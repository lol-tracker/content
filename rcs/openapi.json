
components  info                     openapi paths
----------  ----                     ------- -----
@{schemas=} @{title=; version=1.0.0} 3.0.0   @{/Exit=; /Help=; /Subscribe=; /Unsubscribe=; /accounts-security/v1/accessâ€¦

{
  "components": {
    "schemas": {
      "AccessToken": "@{properties=; type=object}",
      "AccountsSecurityAccountsSecurity": "@{properties=; type=object}",
      "AccountsSecurityHomeBaseCountry": "@{properties=; type=object}",
      "AccountsSecurityProductSessionSession": "@{properties=; type=object}",
      "AgeRestrictionAgeRestriction": "@{properties=; type=object}",
      "AgeRestrictionHomeBaseCountry": "@{properties=; type=object}",
      "AmbassadorErrorResponse": "@{properties=; type=object}",
      "AntiAddictionAntiAddictionConfig": "@{properties=; type=object}",
      "AntiAddictionAntiAddictionPolicy": "@{properties=; type=object}",
      "AntiAddictionAntiAddictionStandaloneConfig": "@{properties=; type=object}",
      "AntiAddictionAntiAddictionState": "@{properties=; type=object}",
      "AntiAddictionDisplayType": "@{enum=System.Object[]; type=string}",
      "AntiAddictionPolicyType": "@{enum=System.Object[]; type=string}",
      "AntiAddictionProductSessionSession": "@{properties=; type=object}",
      "AppCommandAuthStatus": "@{properties=; type=object}",
      "AppCommandAuthStatusState": "@{description=Auth status state.; enum=System.Object[]; type=string}",
      "AppCommandAuthorizationResponse": "@{properties=; type=object}",
      "AppCommandAuthorizationResponseType": "@{description=Authorization response to indicate the follow up for the login flow.; enum=System.Object[]; type=string}",
      "AppCommandCommand": "@{properties=; type=object}",
      "AppCommandCommandAuthV1": "@{properties=; type=object}",
      "AppCommandCommandKind": "@{enum=System.Object[]; type=string}",
      "AppCommandCommandVng": "@{properties=; type=object}",
      "AppFocusRequest": "@{properties=; type=object}",
      "AppInfo": "@{properties=; type=object}",
      "AppleAccountAppleAuthorizationError": "@{enum=System.Object[]; type=string}",
      "AppleAccountAppleAuthorizationOpenConnectId": "@{properties=; type=object}",
      "AppleAccountAppleAuthorizationParameters": "@{properties=; type=object}",
      "AppleAccountAppleAuthorizationResponse": "@{properties=; type=object}",
      "AppleAccountAppleAuthorizationResponseType": "@{enum=System.Object[]; type=string}",
      "AppleAccountPluginConfigResponse": "@{properties=; type=object}",
      "AppleAccountV1AuthMethodConfig": "@{properties=; type=object}",
      "AppleAccountV1DisplayMode": "@{enum=System.Object[]; type=string}",
      "AppleAccountV1WebAuthenticationMethod": "@{enum=System.Object[]; type=string}",
      "AppleAccountV1WebAuthenticationUrlRequest": "@{properties=; type=object}",
      "AuthenticationTypeEnum": "@{enum=System.Object[]; type=string}",
      "Authorization": "@{properties=; type=object}",
      "BindingFullApiHelp": "@{description=Describes the exposed native API.; properties=; type=object}",
      "BindingFullArgumentHelp": "@{description=Describes a function parameter.; properties=; type=object}",
      "BindingFullEnumValueHelp": "@{description=Describes an enumerator.; properties=; type=object}",
      "BindingFullEventHelp": "@{description=Describes an event.; properties=; type=object}",
      "BindingFullFieldHelp": "@{description=Describes a member of a struct.; properties=; type=object}",
      "BindingFullFunctionHelp": "@{description=Describes a function.; properties=; type=object}",
      "BindingFullTypeHelp": "@{description=Describes a struct or enum type.; properties=; type=object}",
      "BindingFullTypeIdentifier": "@{description=Describes the type of a value.; properties=; type=object}",
      "BindingHelpFormat": "@{description=Help format for binding functions and types.; enum=System.Object[]; type=string}",
      "ChatAccountChatSettings": "@{properties=; type=object}",
      "ChatAccountState": "@{enum=System.Object[]; type=string}",
      "ChatActiveConvo": "@{properties=; type=object}",
      "ChatApiTelemetry": "@{properties=; type=object}",
      "ChatBlockPid": "@{properties=; type=object}",
      "ChatBlockedAction": "@{enum=System.Object[]; type=string}",
      "ChatBlockedMapResource": "@{properties=; type=object}",
      "ChatChatBlockedList": "@{properties=; type=object}",
      "ChatChatBlockedPlayer": "@{properties=; type=object}",
      "ChatChatFriend": "@{properties=; type=object}",
      "ChatChatFriends": "@{properties=; type=object}",
      "ChatChatGamePresence": "@{properties=; type=object}",
      "ChatChatGamePresenceUpdate": "@{properties=; type=object}",
      "ChatChatGroup": "@{properties=; type=object}",
      "ChatChatGroupList": "@{properties=; type=object}",
      "ChatChatGroupUpdate": "@{properties=; type=object}",
      "ChatChatMessage": "@{properties=; type=object}",
      "ChatChatMessageList": "@{properties=; type=object}",
      "ChatChatParticipant": "@{properties=; type=object}",
      "ChatChatParticipants": "@{properties=; type=object}",
      "ChatChatPlayer": "@{properties=; type=object}",
      "ChatChatPlayerParticipants": "@{properties=; type=object}",
      "ChatChatSession": "@{properties=; type=object}",
      "ChatChatSessionData": "@{enum=System.Object[]; type=string}",
      "ChatChatSessionState": "@{enum=System.Object[]; type=string}",
      "ChatChatSharedPayload": "@{properties=; type=object}",
      "ChatChatWindowSettings": "@{properties=; type=object}",
      "ChatCommandTelemetry": "@{properties=; type=object}",
      "ChatConfigReadinessEnum": "@{enum=System.Object[]; type=string}",
      "ChatConfigStatus": "@{properties=; type=object}",
      "ChatConversationCreateJoin": "@{properties=; type=object}",
      "ChatConversationCreateJoinFederated": "@{properties=; type=object}",
      "ChatConversationEdit": "@{properties=; type=object}",
      "ChatConversationInitRecent": "@{properties=; type=object}",
      "ChatConversationInitRecentList": "@{properties=; type=object}",
      "ChatConversationReadership": "@{properties=; type=object}",
      "ChatConversationReadershipList": "@{properties=; type=object}",
      "ChatConversationSetActive": "@{properties=; type=object}",
      "ChatConvoCid": "@{properties=; type=object}",
      "ChatConvoJoin": "@{properties=; type=object}",
      "ChatConvoJoinFederated": "@{properties=; type=object}",
      "ChatConvoUpdate": "@{properties=; type=object}",
      "ChatDebugChatGamePresence": "@{properties=; type=object}",
      "ChatDebugConfig": "@{properties=; type=object}",
      "ChatDeleteMessage": "@{properties=; type=object}",
      "ChatDeviceChatSettings": "@{properties=; type=object}",
      "ChatEntitlementsTokenResource": "@{properties=; type=object}",
      "ChatError": "@{properties=; type=object}",
      "ChatErrorId": "@{properties=; type=object}",
      "ChatErrorList": "@{properties=; type=object}",
      "ChatExecutionTime": "@{properties=; type=object}",
      "ChatExecutionTimeSummarization": "@{properties=; type=object}",
      "ChatExecutionTimes": "@{properties=; type=object}",
      "ChatExecutionTimesTelemetry": "@{properties=; type=object}",
      "ChatFriendGroup": "@{properties=; type=object}",
      "ChatFriendGroupCreate": "@{properties=; type=object}",
      "ChatFriendGroupList": "@{properties=; type=object}",
      "ChatFriendGroupName": "@{properties=; type=object}",
      "ChatFriendGroupOrder": "@{properties=; type=object}",
      "ChatFriendGroupSyncList": "@{properties=; type=object}",
      "ChatFriendGroupUpdate": "@{properties=; type=object}",
      "ChatFriendPid": "@{properties=; type=object}",
      "ChatFriendRequest": "@{properties=; type=object}",
      "ChatFriendRequestAdd": "@{properties=; type=object}",
      "ChatFriendRequestList": "@{properties=; type=object}",
      "ChatFriendRequestListPuuid": "@{properties=; type=object}",
      "ChatFriendRequestPost": "@{properties=; type=object}",
      "ChatFriendRequestPuuid": "@{properties=; type=object}",
      "ChatFriendSubscriptionType": "@{enum=System.Object[]; type=string}",
      "ChatFriendUpdate": "@{properties=; type=object}",
      "ChatFriendUpdateList": "@{properties=; type=object}",
      "ChatGroupsFriendGroupSync": "@{properties=; type=object}",
      "ChatJWTVerifyResource": "@{properties=; type=object}",
      "ChatMeasurementType": "@{enum=System.Object[]; type=string}",
      "ChatMessage": "@{properties=; type=object}",
      "ChatMessageList": "@{properties=; type=object}",
      "ChatMessagePost": "@{properties=; type=object}",
      "ChatMessageSend": "@{properties=; type=object}",
      "ChatMessageType": "@{enum=System.Object[]; type=string}",
      "ChatMessagesArchive": "@{properties=; type=object}",
      "ChatMessagesFetchArchive": "@{properties=; type=object}",
      "ChatMessagesSendChatMessage": "@{properties=; type=object}",
      "ChatMultiGamePresence": "@{properties=; type=object}",
      "ChatMultiGamePresenceDelete": "@{properties=; type=object}",
      "ChatMultiGamePresenceList": "@{properties=; type=object}",
      "ChatOptionalMeasurementInformation": "@{properties=; type=object}",
      "ChatParticipantEdit": "@{properties=; type=object}",
      "ChatPlayRestrictionV1Data": "@{properties=; type=object}",
      "ChatPlayRestrictionV1Settings": "@{enum=System.Object[]; type=string}",
      "ChatPlayerAffinityInput": "@{properties=; type=object}",
      "ChatPlayerAffinityToken": "@{properties=; type=object}",
      "ChatPlayerPreferencesResource": "@{properties=; type=object}",
      "ChatPresenceDelete": "@{properties=; type=object}",
      "ChatPresenceProduct": "@{properties=; type=object}",
      "ChatPrivacyReceiveBlockedPlayer": "@{properties=; type=object}",
      "ChatProductLocTranslateReq": "@{properties=; type=object}",
      "ChatProductLocTranslateResp": "@{properties=; type=object}",
      "ChatProductLocTranslateResult": "@{properties=; type=object}",
      "ChatProductMetadata": "@{properties=; type=object}",
      "ChatProductMetadataContentPaths": "@{properties=; type=object}",
      "ChatProductSession": "@{properties=; type=object}",
      "ChatProductSessionState": "@{properties=; type=object}",
      "ChatProtocolPreference": "@{enum=System.Object[]; type=string}",
      "ChatReadCollectionData": "@{properties=; type=object}",
      "ChatReadPoint": "@{properties=; type=object}",
      "ChatRequestPid": "@{properties=; type=object}",
      "ChatRequestPuuid": "@{properties=; type=object}",
      "ChatRiotLogLevel": "@{enum=System.Object[]; type=string}",
      "ChatRsoAccessTokenResource": "@{properties=; type=object}",
      "ChatRsoAuthorizationResource": "@{properties=; type=object}",
      "ChatRsoIdTokenResource": "@{properties=; type=object}",
      "ChatSanitizeRequest": "@{properties=; type=object}",
      "ChatSanitizeResponse": "@{properties=; type=object}",
      "ChatSanitizerStatus": "@{properties=; type=object}",
      "ChatSessionPlatform": "@{properties=; type=object}",
      "ChatSessionState": "@{properties=; type=object}",
      "ChatSocialData": "@{properties=; type=object}",
      "ChatSocialDataReq": "@{properties=; type=object}",
      "ChatSocketClosedCode": "@{enum=System.Object[]; type=string}",
      "ChatUIState": "@{properties=; type=object}",
      "ChatUIStateConversation": "@{properties=; type=object}",
      "ChatUIStateConversationJoin": "@{properties=; type=object}",
      "ChatUIStateConversationList": "@{properties=; type=object}",
      "ChatUIStateConversationUpdate": "@{properties=; type=object}",
      "ChatUpdateChatSettings": "@{properties=; type=object}",
      "ChatUpdateProductSession": "@{properties=; type=object}",
      "ChatUpdateSanitizerSettings": "@{properties=; type=object}",
      "ChatXmppConnectionState": "@{properties=; type=object}",
      "ChatXmppConnectionStatus": "@{enum=System.Object[]; type=string}",
      "ChatXmppReceivedStanza": "@{properties=; type=object}",
      "ChatXmppSendStanza": "@{properties=; type=object}",
      "ChatXmppSessionId": "@{properties=; type=object}",
      "ChatXmppSettings": "@{properties=; type=object}",
      "ChatXmppStatusCheckData": "@{properties=; type=object}",
      "ClientConfigBuildInfo": "@{properties=; type=object}",
      "ClientConfigClientConfig": "@{properties=; type=object}",
      "ClientConfigConfigNamespaceUpdate": "@{properties=; type=object}",
      "ClientConfigConfigParams": "@{properties=; type=object}",
      "ClientConfigConfigReadinessEnum": "@{enum=System.Object[]; type=string}",
      "ClientConfigConfigStatus": "@{properties=; type=object}",
      "ClientConfigConfigType": "@{enum=System.Object[]; type=string}",
      "ClientConfigDataPaths": "@{properties=; type=object}",
      "ClientConfigDepInjectorConfigNamespaceUpdate": "@{properties=; type=object}",
      "ClientConfigDepInjectorRiotClientAuthAlias": "@{properties=; type=object}",
      "ClientConfigDepInjectorRiotClientAuthAuthorization": "@{properties=; type=object}",
      "ClientConfigDepInjectorRiotClientAuthIdClaims": "@{properties=; type=object}",
      "ClientConfigDepInjectorRsoAuthAccessToken": "@{properties=; type=object}",
      "ClientConfigDepInjectorRsoAuthIdToken": "@{properties=; type=object}",
      "ClientConfigDepInjectorSession": "@{properties=; type=object}",
      "ClientConfigDepInjectorSessionsUpdate": "@{properties=; type=object}",
      "ClientConfigDepInjectorTokenV2": "@{properties=; type=object}",
      "ClientConfigDepInjectorUpdateType": "@{enum=System.Object[]; type=string}",
      "ClientConfigRiotClientAuthAlias": "@{properties=; type=object}",
      "ClientConfigRiotClientAuthAuthorization": "@{properties=; type=object}",
      "ClientConfigRiotClientAuthIdClaims": "@{properties=; type=object}",
      "ClientConfigRsoAuthAccessToken": "@{properties=; type=object}",
      "ClientConfigRsoAuthIdToken": "@{properties=; type=object}",
      "ClientConfigSession": "@{properties=; type=object}",
      "ClientConfigSessionsUpdate": "@{properties=; type=object}",
      "ClientConfigTokenV2": "@{properties=; type=object}",
      "ClientConfigUpdateType": "@{enum=System.Object[]; type=string}",
      "ClientFeatureFlagsConfigurationSource": "@{properties=; type=object}",
      "ClientFeatureFlagsExperimentCohortPair": "@{properties=; type=object}",
      "ClientFeatureFlagsFeatureFlagConfiguration": "@{properties=; type=object}",
      "CollectorAvailability": "@{enum=System.Object[]; type=string}",
      "CookieJarCookie": "@{properties=; type=object}",
      "DataPaths": "@{properties=; type=object}",
      "DisambiguationAccessToken": "@{properties=; type=object}",
      "DisambiguationConfigReadinessEnum": "@{enum=System.Object[]; type=string}",
      "DisambiguationConfigStatus": "@{properties=; type=object}",
      "DisambiguationIdToken": "@{properties=; type=object}",
      "DisambiguationRegionLocale": "@{properties=; type=object}",
      "EntitlementsRiotClientAuthAlias": "@{properties=; type=object}",
      "EntitlementsRiotClientAuthAuthorization": "@{properties=; type=object}",
      "EntitlementsRiotClientAuthIdClaims": "@{properties=; type=object}",
      "EntitlementsRsoAuthAccessToken": "@{properties=; type=object}",
      "EntitlementsRsoAuthIdToken": "@{properties=; type=object}",
      "EntitlementsServiceEntitlementsServiceToken": "@{properties=; type=object}",
      "EntitlementsToken": "@{properties=; type=object}",
      "EntitlementsTokenV2": "@{properties=; type=object}",
      "ErrorType": "@{enum=System.Object[]; type=string}",
      "EulaAcceptance": "@{enum=System.Object[]; type=string}",
      "EulaAgreement": "@{properties=; type=object}",
      "EulaAgreementContext": "@{properties=; type=object}",
      "EulaAuthorization": "@{properties=; type=object}",
      "EulaExternalLegalLinks": "@{properties=; type=object}",
      "EulaFinalState": "@{enum=System.Object[]; type=string}",
      "EulaIdToken": "@{properties=; type=object}",
      "EulaPlayerPreferencesResource": "@{properties=; type=object}",
      "EulaPluginTelemetryContext": "@{properties=; type=object}",
      "EulaPrivacyPolicy": "@{properties=; type=object}",
      "EulaPrivacyPolicyContext": "@{properties=; type=object}",
      "EulaProductContext": "@{properties=; type=object}",
      "EulaRegionLocale": "@{properties=; type=object}",
      "ExtendedEventData": "@{properties=; type=object}",
      "FirstPartyFulfillmentFirstPartyFulfillmentFulfillmentReason": "@{enum=System.Object[]; type=string}",
      "FirstPartyFulfillmentFirstPartyFulfillmentFulfillmentRequest": "@{properties=; type=object}",
      "FirstPartyFulfillmentFirstPartyFulfillmentFulfillmentResponse": "@{properties=; type=object}",
      "FirstPartyFulfillmentFirstPartyFulfillmentItemFulfillmentFailureInfo": "@{properties=; type=object}",
      "FirstPartyFulfillmentFirstPartyFulfillmentItemFulfillmentSuccessInfo": "@{properties=; type=object}",
      "FirstPartyFulfillmentFirstPartyFulfillmentMockApiState": "@{enum=System.Object[]; type=string}",
      "FirstPartyFulfillmentFirstPartyFulfillmentRiotPayFulfillmentResponse": "@{properties=; type=object}",
      "FirstPartyFulfillmentFirstPartyFulfillmentRiotPayGetAccessTokensResponse": "@{properties=; type=object}",
      "FirstPartyFulfillmentFirstPartyFulfillmentRiotPayItemFulfillmentFailureInfo": "@{properties=; type=object}",
      "FirstPartyFulfillmentFirstPartyFulfillmentRiotPayItemFulfillmentSuccessInfo": "@{properties=; type=object}",
      "FirstPartyFulfillmentFirstPartyFulfillmentTelemetryContext": "@{properties=; type=object}",
      "FirstPartyFulfillmentFirstPartyFulfillmentTelemetryFulfillmentItemResult": "@{enum=System.Object[]; type=string}",
      "FirstPartyFulfillmentFirstPartyFulfillmentTelemetryFulfillmentResult": "@{enum=System.Object[]; type=string}",
      "FriendsChatBlockPid": "@{properties=; type=object}",
      "FriendsChatBlockedList": "@{properties=; type=object}",
      "FriendsChatBlockedPlayer": "@{properties=; type=object}",
      "FriendsFriendsV2MockApiState": "@{enum=System.Object[]; type=string}",
      "FriendsLookupV1GamerNameAndTagline": "@{properties=; type=object}",
      "FriendsLookupV1NamesetsForPuuidRequest": "@{properties=; type=object}",
      "FriendsLookupV1NamesetsForPuuidResponse": "@{properties=; type=object}",
      "FriendsLookupV1NamesetsForPuuidsRequest": "@{properties=; type=object}",
      "FriendsLookupV1NamesetsForPuuidsResponse": "@{properties=; type=object}",
      "FriendsLookupV1PlaystationNameset": "@{properties=; type=object}",
      "FriendsLookupV1PuuidAndProvider": "@{properties=; type=object}",
      "FriendsLookupV1PuuidsForConsoleIdsRequest": "@{properties=; type=object}",
      "FriendsLookupV1PuuidsForConsoleIdsResponse": "@{properties=; type=object}",
      "FriendsLookupV1SwitchNameset": "@{properties=; type=object}",
      "FriendsLookupV1ToggleMockApiRequest": "@{properties=; type=object}",
      "FriendsLookupV1XboxNameset": "@{properties=; type=object}",
      "FriendsOnlinePlatform": "@{enum=System.Object[]; type=string}",
      "FriendsPlatformUser": "@{properties=; type=object}",
      "FriendsRsoAuthenticatorPluginConfigResponse": "@{properties=; type=object}",
      "FriendsRsoAuthenticatorV1AuthMethodConfig": "@{properties=; type=object}",
      "GaRestrictionAuthorization": "@{properties=; type=object}",
      "GaRestrictionCachedPenaltyNotificationDtoV1": "@{properties=; type=object}",
      "GaRestrictionGapsMailboxUpdated": "@{properties=; type=object}",
      "GaRestrictionLocalizedPenaltyNotification": "@{properties=; type=object}",
      "GaRestrictionLocalizedPenaltyNotificationChatLogEvidenceV1": "@{properties=; type=object}",
      "GaRestrictionMail": "@{properties=; type=object}",
      "GaRestrictionMailState": "@{enum=System.Object[]; type=string}",
      "GaRestrictionMailType": "@{enum=System.Object[]; type=string}",
      "GaRestrictionMailboxStatusUpdated": "@{properties=; type=object}",
      "GaRestrictionPenaltyNotification": "@{properties=; type=object}",
      "GaRestrictionPenaltyNotificationData": "@{properties=; type=object}",
      "GaRestrictionPenaltyNotificationDtoV1": "@{properties=; type=object}",
      "GaRestrictionPenaltyNotificationEvidenceDtoV1": "@{properties=; type=object}",
      "GaRestrictionPenaltyNotificationPlayerAction": "@{enum=System.Object[]; type=string}",
      "GaRestrictionPenaltyNotificationPlayerActionEvent": "@{properties=; type=object}",
      "GaRestrictionPenaltyNotificationTextChatLogEvidenceV1": "@{properties=; type=object}",
      "GaRestrictionPenaltyNotificationVendedPenaltyDtoV1": "@{properties=; type=object}",
      "GaRestrictionPenaltyNotificationsByMessageId": "@{properties=; type=object}",
      "GaRestrictionPluginCallerId_MockCallerId": "@{properties=; type=object}",
      "GaRestrictionPluginCallerId_ProductSession": "@{properties=; type=object}",
      "GaRestrictionRegionLocale": "@{properties=; type=object}",
      "GaRestrictionRequestMailParameters": "@{properties=; type=object}",
      "GaRestrictionUpdateMailStateRequest": "@{properties=; type=object}",
      "GaWarningApiAuthorization": "@{properties=; type=object}",
      "GaWarningGapsMailboxUpdated": "@{properties=; type=object}",
      "GaWarningLocalizedWarningMessage": "@{properties=; type=object}",
      "GaWarningMail": "@{properties=; type=object}",
      "GaWarningMailState": "@{enum=System.Object[]; type=string}",
      "GaWarningMailType": "@{enum=System.Object[]; type=string}",
      "GaWarningMailboxStatusUpdated": "@{properties=; type=object}",
      "GaWarningPluginCallerId_MockCallerId": "@{properties=; type=object}",
      "GaWarningPluginCallerId_ProductSession": "@{properties=; type=object}",
      "GaWarningRegionLocale": "@{properties=; type=object}",
      "GaWarningRequestMailParameters": "@{properties=; type=object}",
      "GaWarningUpdateMailStateRequest": "@{properties=; type=object}",
      "GaWarningWarning": "@{properties=; type=object}",
      "GaWarningWarningAcknowledgementEvent": "@{properties=; type=object}",
      "GaWarningWarningDto": "@{properties=; type=object}",
      "GaWarningWarningFoundUnacknowledgedEvent": "@{properties=; type=object}",
      "GaWarningWarningResponse": "@{properties=; type=object}",
      "GameSessionAccessToken": "@{properties=; type=object}",
      "GameSessionAuthError": "@{properties=; type=object}",
      "GameSessionAuthHint": "@{properties=; type=object}",
      "GameSessionAuthHintType": "@{enum=System.Object[]; type=string}",
      "GameSessionAuthenticationTypeEnum": "@{enum=System.Object[]; type=string}",
      "GameSessionAuthorization": "@{properties=; type=object}",
      "GameSessionAuthorizationCode": "@{properties=; type=object}",
      "GameSessionAuthorizationKey": "@{properties=; type=object}",
      "GameSessionAuthorizationKeyRequest": "@{properties=; type=object}",
      "GameSessionAuthorizationRequest": "@{properties=; type=object}",
      "GameSessionAuthorizationRequestTelemetryContext": "@{properties=; type=object}",
      "GameSessionAuthorizationResponse": "@{properties=; type=object}",
      "GameSessionAuthorizationResponseTelemetryContext": "@{properties=; type=object}",
      "GameSessionAuthorizationResponseType": "@{enum=System.Object[]; type=string}",
      "GameSessionAuthorizationUpdateRequest": "@{properties=; type=object}",
      "GameSessionClientAuthorizationState": "@{enum=System.Object[]; type=string}",
      "GameSessionClientAuthorizationTelemetryContext": "@{properties=; type=object}",
      "GameSessionClientConfigCluster": "@{properties=; type=object}",
      "GameSessionConfigV3AMRValuesSupported": "@{properties=; type=object}",
      "GameSessionConfigV3AuthProgress": "@{enum=System.Object[]; type=string}",
      "GameSessionConfigV3OpenIdConfiguration": "@{properties=; type=object}",
      "GameSessionConfigV3PartnerAuthConfig": "@{properties=; type=object}",
      "GameSessionConfigV3ReadyState": "@{properties=; type=object}",
      "GameSessionDeviceId": "@{properties=; type=object}",
      "GameSessionEntitlementsToken": "@{properties=; type=object}",
      "GameSessionGameCenterAuthCredentials": "@{properties=; type=object}",
      "GameSessionGameSessionServiceCreateSessionRequestBody": "@{properties=; type=object}",
      "GameSessionGameSessionV1ClusterList": "@{properties=; type=object}",
      "GameSessionGameSessionV1GameSessionId": "@{properties=; type=object}",
      "GameSessionGameSessionV1GameSessionMessage": "@{enum=System.Object[]; type=string}",
      "GameSessionGameSessionV1GameSessionRequest": "@{properties=; type=object}",
      "GameSessionGameSessionV1GameSessionResponse": "@{properties=; type=object}",
      "GameSessionGameSessionV1GameSessionState": "@{enum=System.Object[]; type=string}",
      "GameSessionGarenaPartnerCredentials": "@{properties=; type=object}",
      "GameSessionGoogleAuthCredentials": "@{properties=; type=object}",
      "GameSessionHttpCookie": "@{properties=; type=object}",
      "GameSessionHttpCookieJar": "@{properties=; type=object}",
      "GameSessionIdToken": "@{properties=; type=object}",
      "GameSessionImplicitAuthorization": "@{properties=; type=object}",
      "GameSessionImplicitGrantModeTelemetryContext": "@{properties=; type=object}",
      "GameSessionLoginAMR": "@{enum=System.Object[]; type=string}",
      "GameSessionLoginQueueServiceLoginQueueRequest": "@{properties=; type=object}",
      "GameSessionLoginQueueServiceLoginQueueRequestBody": "@{properties=; type=object}",
      "GameSessionLoginQueueServiceLoginQueueTokenType": "@{enum=System.Object[]; type=string}",
      "GameSessionLoginQueueServiceQueueToken": "@{properties=; type=object}",
      "GameSessionLogoutReason": "@{enum=System.Object[]; type=string}",
      "GameSessionMSDKQQPartnerCredentials": "@{properties=; type=object}",
      "GameSessionMSDKV5PartnerCredentials": "@{properties=; type=object}",
      "GameSessionMSDKWeChatPartnerCredentials": "@{properties=; type=object}",
      "GameSessionMultifactorDetails": "@{properties=; type=object}",
      "GameSessionMultifactorMethod": "@{enum=System.Object[]; type=string}",
      "GameSessionPartnerCredentials": "@{properties=; type=object}",
      "GameSessionPartnerCredentialsV3": "@{properties=; type=object}",
      "GameSessionPluginCallerId_MockCallerId": "@{properties=; type=object}",
      "GameSessionPluginCallerId_ProductSession": "@{properties=; type=object}",
      "GameSessionPublicClientConfig": "@{properties=; type=object}",
      "GameSessionRSOAuthTelemetryContext": "@{properties=; type=object}",
      "GameSessionRSOAuthorizationSubmission": "@{properties=; type=object}",
      "GameSessionRSOAuthorizationTelemetryContext": "@{properties=; type=object}",
      "GameSessionRSOAuthorizationTrustLevel": "@{enum=System.Object[]; type=string}",
      "GameSessionRSOCredentialSubmission": "@{properties=; type=object}",
      "GameSessionRSOJWTConfig": "@{properties=; type=object}",
      "GameSessionRSOOTPSubmission": "@{properties=; type=object}",
      "GameSessionRSOPlayerCredentials": "@{properties=; type=object}",
      "GameSessionRSOReauthenticationSubmission": "@{properties=; type=object}",
      "GameSessionSessionCredentials": "@{properties=; type=object}",
      "GameSessionSessionLoginToken": "@{properties=; type=object}",
      "GameSessionSessionMultifactor": "@{properties=; type=object}",
      "GameSessionSessionReauthentication": "@{properties=; type=object}",
      "GameSessionSessionResponse": "@{properties=; type=object}",
      "GameSessionSessionResponseType": "@{enum=System.Object[]; type=string}",
      "GameSessionSessionSignup": "@{properties=; type=object}",
      "GameSessionStatusMessage": "@{properties=; type=object}",
      "GameSessionTelemetryEvent": "@{properties=; type=object}",
      "GameSessionTencentPartnerCredentials": "@{properties=; type=object}",
      "GameSessionTokenContext": "@{properties=; type=object}",
      "GameSessionUserInfo": "@{properties=; type=object}",
      "GameSessionWeGamePartnerCredentials": "@{properties=; type=object}",
      "GoogleAccountGoogleAuthorizationError": "@{enum=System.Object[]; type=string}",
      "GoogleAccountGoogleAuthorizationParameters": "@{properties=; type=object}",
      "GoogleAccountGoogleAuthorizationResponse": "@{properties=; type=object}",
      "GoogleAccountGoogleAuthorizationResponseType": "@{enum=System.Object[]; type=string}",
      "GoogleAccountPluginConfigResponse": "@{properties=; type=object}",
      "GoogleAccountV1AuthMethodConfig": "@{properties=; type=object}",
      "GoogleAccountV1DisplayMode": "@{enum=System.Object[]; type=string}",
      "GoogleAccountV1WebAuthenticationMethod": "@{enum=System.Object[]; type=string}",
      "GoogleAccountV1WebAuthenticationUrlRequest": "@{properties=; type=object}",
      "InfoRadiatorAccessToken": "@{properties=; type=object}",
      "InfoRadiatorAuthenticationTypeEnum": "@{enum=System.Object[]; type=string}",
      "InfoRadiatorAuthorization": "@{properties=; type=object}",
      "InfoRadiatorBuildInfo": "@{properties=; type=object}",
      "InfoRadiatorPatchlineMetadata": "@{properties=; type=object}",
      "InfoRadiatorSession": "@{properties=; type=object}",
      "InfoRadiatorSessionResponse": "@{properties=; type=object}",
      "InfoRadiatorSessionStartEvent": "@{properties=; type=object}",
      "InfoRadiatorSessionStartEvent_AuthState": "@{enum=System.Object[]; type=string}",
      "InfoRadiatorSessionStartEvent_EventTrigger": "@{enum=System.Object[]; type=string}",
      "InfoRadiatorVoiceChatHeartbeatMetrics": "@{properties=; type=object}",
      "InfoRadiatorVoiceChatHeartbeatMetrics_PerProductData": "@{properties=; type=object}",
      "InfoRadiatorVoiceChatHeartbeatMetrics_PerProviderData": "@{properties=; type=object}",
      "JwtAuthenticatorJWTVerifyResource": "@{properties=; type=object}",
      "KrAccountAccessToken": "@{properties=; type=object}",
      "KrAccountAccountPromotionSession": "@{properties=; type=object}",
      "KrAccountKrAccountApiSession": "@{properties=; type=object}",
      "KrAccountKrAccountPluginConfig": "@{properties=; type=object}",
      "LifecycleData": "@{properties=; type=object}",
      "LifecycleEventType": "@{description=Lifecycle event type for all events; enum=System.Object[]; type=string}",
      "LogSeverityLevels": "@{enum=System.Object[]; type=string}",
      "LoginPhase": "@{description=Login phase for the client.; enum=System.Object[]; type=string}",
      "LoginStatus": "@{description=State of the login plugin.; properties=; type=object}",
      "LoyaltyV2ExternalProcess": "@{properties=; type=object}",
      "LoyaltyV2LoyaltyConfig": "@{properties=; type=object}",
      "LoyaltyV2LoyaltyStandaloneConfig": "@{properties=; type=object}",
      "LoyaltyV2PCBangInfo": "@{properties=; type=object}",
      "LoyaltyV2Session": "@{properties=; type=object}",
      "MailboxAccessToken": "@{properties=; type=object}",
      "MailboxAffinityV1AffinityInput": "@{properties=; type=object}",
      "MailboxAffinityV2AffinityProductInput": "@{properties=; type=object}",
      "MailboxAlias": "@{properties=; type=object}",
      "MailboxApiAlias": "@{properties=; type=object}",
      "MailboxApiAuthorization": "@{properties=; type=object}",
      "MailboxApiClientDetails": "@{properties=; type=object}",
      "MailboxApiHomeBaseCountry": "@{properties=; type=object}",
      "MailboxApiIdClaims": "@{properties=; type=object}",
      "MailboxApiLoginCountry": "@{properties=; type=object}",
      "MailboxApiUserInfo": "@{properties=; type=object}",
      "MailboxApiUserInfoLol": "@{properties=; type=object}",
      "MailboxApiUserInfoSummoner": "@{properties=; type=object}",
      "MailboxAuthorization": "@{properties=; type=object}",
      "MailboxGapsMailboxUpdated": "@{properties=; type=object}",
      "MailboxIdClaims": "@{properties=; type=object}",
      "MailboxIdToken": "@{properties=; type=object}",
      "MailboxMail": "@{properties=; type=object}",
      "MailboxMailState": "@{enum=System.Object[]; type=string}",
      "MailboxMailType": "@{enum=System.Object[]; type=string}",
      "MailboxMailboxStatusUpdated": "@{properties=; type=object}",
      "MailboxPlayerAffinityCachedProductAffinity": "@{properties=; type=object}",
      "MailboxPlayerAffinityCachedServiceAffinity": "@{properties=; type=object}",
      "MailboxPlayerAffinityDataSource": "@{enum=System.Object[]; type=string}",
      "MailboxPlayerAffinityPluginConfig": "@{properties=; type=object}",
      "MailboxPlayerAffinityPluginStatus": "@{properties=; type=object}",
      "MailboxPlayerAffinityProductToken": "@{properties=; type=object}",
      "MailboxPlayerAffinityServiceToken": "@{properties=; type=object}",
      "MailboxPlayerAffinityShardInfo": "@{properties=; type=object}",
      "MailboxPlayerAffinityToken": "@{properties=; type=object}",
      "MailboxPlayerAffinityTokenProduct": "@{properties=; type=object}",
      "MailboxPluginCallerId_MockCallerId": "@{properties=; type=object}",
      "MailboxPluginCallerId_ProductSession": "@{properties=; type=object}",
      "MailboxProductAffinityInput": "@{properties=; type=object}",
      "MailboxRequestMailParameters": "@{properties=; type=object}",
      "MailboxRsoAuthAccessToken": "@{properties=; type=object}",
      "MailboxRsoAuthAuthorizationRequest": "@{properties=; type=object}",
      "MailboxRsoAuthAuthorizationResponse": "@{properties=; type=object}",
      "MailboxRsoAuthAuthorizationResponseType": "@{enum=System.Object[]; type=string}",
      "MailboxRsoAuthAuthorizationTrustLevel": "@{enum=System.Object[]; type=string}",
      "MailboxRsoAuthIdToken": "@{properties=; type=object}",
      "MailboxRsoAuthImplicitAuthorization": "@{properties=; type=object}",
      "MailboxRsoAuthReadyState": "@{properties=; type=object}",
      "MailboxRsoAuthUserInfo": "@{properties=; type=object}",
      "MailboxServiceAffinityInput": "@{properties=; type=object}",
      "MailboxUpdateMailStateRequest": "@{properties=; type=object}",
      "MatchmakingPluginCallerId_MockCallerId": "@{properties=; type=object}",
      "MatchmakingPluginCallerId_ProductSession": "@{properties=; type=object}",
      "MatchmakingServiceV1CreateMatchmakingTicketParams": "@{properties=; type=object}",
      "MatchmakingServiceV1CreateMatchmakingTicketResult": "@{properties=; type=object}",
      "MatchmakingServiceV1CreateMatchmakingTicketServiceData": "@{properties=; type=object}",
      "MatchmakingServiceV1DeletePlayerFromMatchmakingResult": "@{properties=; type=object}",
      "MatchmakingServiceV1PlayerData": "@{properties=; type=object}",
      "MatchmakingServiceV1TicketState": "@{properties=; type=object}",
      "MatchmakingServiceV1TicketsState": "@{properties=; type=object}",
      "MatchmakingV1AcceptReady": "@{properties=; type=object}",
      "MatchmakingV1MatchmakingReadyCheck": "@{properties=; type=object}",
      "MatchmakingV1MatchmakingServiceTicket": "@{properties=; type=object}",
      "MatchmakingV1MatchmakingTicket": "@{properties=; type=object}",
      "MatchmakingV1RMSPayloadReadyCheck": "@{properties=; type=object}",
      "MatchmakingV1RMSPayloadTicketStatus": "@{properties=; type=object}",
      "MatchmakingV1ReadyCheckStatus": "@{enum=System.Object[]; type=string}",
      "NameCheckNameValidationResult": "@{properties=; type=object}",
      "NintendoAccountAuthorization": "@{properties=; type=object}",
      "NintendoAccountAuthorizationParameters": "@{properties=; type=object}",
      "NintendoAccountAuthorizationResponse": "@{properties=; type=object}",
      "NintendoAccountErrorCode": "@{enum=System.Object[]; type=string}",
      "NintendoAccountGetNetworkServiceAccountParameters": "@{properties=; type=object}",
      "NintendoAccountNetworkServiceAccount": "@{properties=; type=object}",
      "NintendoAccountNetworkServiceAccountResponse": "@{properties=; type=object}",
      "NintendoAccountOnlinePlatform": "@{enum=System.Object[]; type=string}",
      "NintendoAccountPlatformUser": "@{properties=; type=object}",
      "OnlinePlatform": "@{enum=System.Object[]; type=string}",
      "PatchConfiguration": "@{properties=; type=object}",
      "PatchCookie": "@{properties=; type=object}",
      "PatchCookies": "@{properties=; type=object}",
      "PatchEntitlementsToken": "@{properties=; type=object}",
      "PatchError": "@{properties=; type=object}",
      "PatchErrorCode": "@{enum=System.Object[]; type=string}",
      "PatchInstall": "@{properties=; type=object}",
      "PatchInstallParams": "@{properties=; type=object}",
      "PatchLockedFileInfo": "@{properties=; type=object}",
      "PatchManifestProgress": "@{properties=; type=object}",
      "PatchPatchRequest": "@{properties=; type=object}",
      "PatchPatchStatus": "@{properties=; type=object}",
      "PatchPatchStatusState": "@{enum=System.Object[]; type=string}",
      "PatchPhase": "@{enum=System.Object[]; type=string}",
      "PatchPreviewDiff": "@{properties=; type=object}",
      "PatchPreviewRequest": "@{properties=; type=object}",
      "PatchPreviewStatus": "@{properties=; type=object}",
      "PatchPreviewStatusState": "@{enum=System.Object[]; type=string}",
      "PatchProgress": "@{properties=; type=object}",
      "PatchRegionLocale": "@{properties=; type=object}",
      "PatchRepairFileInfo": "@{properties=; type=object}",
      "PatchRepairFileInfoState": "@{enum=System.Object[]; type=string}",
      "PatchRepairProgress": "@{properties=; type=object}",
      "PatchRepairRequest": "@{properties=; type=object}",
      "PatchRepairStatus": "@{properties=; type=object}",
      "PatchRepairStatusState": "@{enum=System.Object[]; type=string}",
      "PatchRequests": "@{properties=; type=object}",
      "PatchSeedRequest": "@{properties=; type=object}",
      "PatchSeedStatus": "@{properties=; type=object}",
      "PatchSeedStatusState": "@{enum=System.Object[]; type=string}",
      "PatchStatus": "@{properties=; type=object}",
      "PatchUpdateProgress": "@{properties=; type=object}",
      "PaymentsIdToken": "@{properties=; type=object}",
      "PaymentsInitializedPurchase": "@{properties=; type=object}",
      "PaymentsLoginInfo": "@{properties=; type=object}",
      "PaymentsReadyState": "@{properties=; type=object}",
      "PaymentsUserInfo": "@{properties=; type=object}",
      "PlatformLoginAuthenticationMethod": "@{enum=System.Object[]; type=string}",
      "PlatformLoginAuthorizationRequest": "@{properties=; type=object}",
      "PlatformLoginAuthorizationResponse": "@{properties=; type=object}",
      "PlatformLoginAuthorizationResponseType": "@{enum=System.Object[]; type=string}",
      "PlatformLoginLoginPhase": "@{enum=System.Object[]; type=string}",
      "PlatformLoginLoginResult": "@{properties=; type=object}",
      "PlatformLoginLoginStatus": "@{properties=; type=object}",
      "PlatformLoginLoginTypeEnum": "@{enum=System.Object[]; type=string}",
      "PlatformLoginOnlinePlatform": "@{enum=System.Object[]; type=string}",
      "PlatformLoginOutcome": "@{enum=System.Object[]; type=string}",
      "PlatformLoginPlatformUser": "@{properties=; type=object}",
      "PlatformLoginRSOAuthorizationTrustLevel": "@{enum=System.Object[]; type=string}",
      "PlatformLoginRSOSignOnAttemptEvent": "@{properties=; type=object}",
      "PlatformLoginReadyState": "@{properties=; type=object}",
      "PlatformLoginSessionResponse": "@{properties=; type=object}",
      "PlatformLoginSessionResponseType": "@{enum=System.Object[]; type=string}",
      "PlatformLoginStoredSessionState": "@{enum=System.Object[]; type=string}",
      "PlatformUiAccessToken": "@{properties=; type=object}",
      "PlatformUiAliasesV1Alias": "@{properties=; type=object}",
      "PlatformUiAliasesV1AliasInput": "@{properties=; type=object}",
      "PlatformUiAliasesV1AliasList": "@{properties=; type=object}",
      "PlatformUiAliasesV1AliasValidationReason": "@{enum=System.Object[]; type=string}",
      "PlatformUiAliasesV1RequiredResponse": "@{properties=; type=object}",
      "PlatformUiAliasesV1StatusResponse": "@{properties=; type=object}",
      "PlatformUiAppleAuthorizationError": "@{enum=System.Object[]; type=string}",
      "PlatformUiAppleAuthorizationOpenConnectId": "@{properties=; type=object}",
      "PlatformUiAppleAuthorizationParameters": "@{properties=; type=object}",
      "PlatformUiAppleAuthorizationResponse": "@{properties=; type=object}",
      "PlatformUiAppleAuthorizationResponseType": "@{enum=System.Object[]; type=string}",
      "PlatformUiAuthenticateMultifactorInput": "@{properties=; type=object}",
      "PlatformUiAuthenticationResponse": "@{properties=; type=object}",
      "PlatformUiAuthenticationTypeEnum": "@{enum=System.Object[]; type=string}",
      "PlatformUiCaptcha": "@{properties=; type=object}",
      "PlatformUiCaptchaType": "@{enum=System.Object[]; type=string}",
      "PlatformUiConfigV3AuthProgress": "@{enum=System.Object[]; type=string}",
      "PlatformUiConfigV3ReadyState": "@{properties=; type=object}",
      "PlatformUiEligibilityResponse": "@{properties=; type=object}",
      "PlatformUiFREStatus": "@{properties=; type=object}",
      "PlatformUiGamepassResponseDetails": "@{properties=; type=object}",
      "PlatformUiGamepassStatus": "@{enum=System.Object[]; type=string}",
      "PlatformUiGenerateTaglineInput": "@{properties=; type=object}",
      "PlatformUiGenerateTaglineResponse": "@{properties=; type=object}",
      "PlatformUiGoogleAuthorizationError": "@{enum=System.Object[]; type=string}",
      "PlatformUiGoogleAuthorizationParameters": "@{properties=; type=object}",
      "PlatformUiGoogleAuthorizationResponse": "@{properties=; type=object}",
      "PlatformUiGoogleAuthorizationResponseType": "@{enum=System.Object[]; type=string}",
      "PlatformUiHCaptcha": "@{properties=; type=object}",
      "PlatformUiHealupResponseDetails": "@{properties=; type=object}",
      "PlatformUiIdToken": "@{properties=; type=object}",
      "PlatformUiInitiateLoginSessionRequest": "@{properties=; type=object}",
      "PlatformUiKRIdVerificationResponseDetails": "@{properties=; type=object}",
      "PlatformUiLoginStrategyType": "@{enum=System.Object[]; type=string}",
      "PlatformUiMultifactorDetails": "@{properties=; type=object}",
      "PlatformUiMultifactorInput": "@{properties=; type=object}",
      "PlatformUiMultifactorMethod": "@{enum=System.Object[]; type=string}",
      "PlatformUiMultifactorResponseDetails": "@{properties=; type=object}",
      "PlatformUiOnlinePlatform": "@{enum=System.Object[]; type=string}",
      "PlatformUiPlatformUIError": "@{properties=; type=object}",
      "PlatformUiPlatformUIState": "@{properties=; type=object}",
      "PlatformUiPlatformUser": "@{properties=; type=object}",
      "PlatformUiPlayerSessionState": "@{properties=; type=object}",
      "PlatformUiPlayerSessionStateType": "@{enum=System.Object[]; type=string}",
      "PlatformUiPluginConfigResponse": "@{properties=; type=object}",
      "PlatformUiRSOMobileUIAuthorizationTrustLevel": "@{enum=System.Object[]; type=string}",
      "PlatformUiRSOMobileUIEULAUIV2Status": "@{properties=; type=object}",
      "PlatformUiRSOMobileUIEULAUIV2StatusType": "@{enum=System.Object[]; type=string}",
      "PlatformUiRSOMobileUILoginInitiateRequest": "@{properties=; type=object}",
      "PlatformUiRSOMobileUILoginStatus": "@{properties=; type=object}",
      "PlatformUiRSOMobileUILoginStatusType": "@{enum=System.Object[]; type=string}",
      "PlatformUiRSOMobileUILoginStrategyInfo": "@{properties=; type=object}",
      "PlatformUiRSOMobileUILoginStrategyType": "@{enum=System.Object[]; type=string}",
      "PlatformUiRSOMobileUIRegionElectionV1InitiateRequest": "@{properties=; type=object}",
      "PlatformUiRSOMobileUIRegionElectionV1RegionElection": "@{properties=; type=object}",
      "PlatformUiRSOMobileUIRegionsV1RegionAssignmentResponseMessage": "@{enum=System.Object[]; type=string}",
      "PlatformUiRSOMobileUIVngV1RegistrationUIStatus": "@{properties=; type=object}",
      "PlatformUiRSOMobileUIVngV1RegistrationUIStatusType": "@{enum=System.Object[]; type=string}",
      "PlatformUiResponseType": "@{enum=System.Object[]; type=string}",
      "PlatformUiRiotIdentityAuthCompleteInput": "@{properties=; type=object}",
      "PlatformUiRiotIdentityAuthStartInput": "@{properties=; type=object}",
      "PlatformUiSessionResponse": "@{properties=; type=object}",
      "PlatformUiSessionResponseType": "@{enum=System.Object[]; type=string}",
      "PlatformUiSignupCodeLinking": "@{properties=; type=object}",
      "PlatformUiSignupLinkDetails": "@{properties=; type=object}",
      "PlatformUiSignupResponseDetails": "@{properties=; type=object}",
      "PlatformUiSuccessResponseDetails": "@{properties=; type=object}",
      "PlatformUiSuggestedAction": "@{properties=; type=object}",
      "PlatformUiUpdateLoginStrategyRequest": "@{properties=; type=object}",
      "PlatformUiUserInfo": "@{properties=; type=object}",
      "PlatformUiV1AuthMethodConfig": "@{properties=; type=object}",
      "PlatformUiWebLinkingStatus": "@{enum=System.Object[]; type=string}",
      "PlatformUiWebLinkingStatusResponse": "@{properties=; type=object}",
      "PlatformUiXboxSelectUserParameters": "@{properties=; type=object}",
      "PlatformUiXboxSignInOptions": "@{enum=System.Object[]; type=string}",
      "PlatformUicode": "@{enum=System.Object[]; type=string}",
      "PlatformUierrorState": "@{enum=System.Object[]; type=string}",
      "PlatformUistatus": "@{enum=System.Object[]; type=string}",
      "PlatformUser": "@{properties=; type=object}",
      "PlayRestrictionsPlayRestrictionV1Data": "@{properties=; type=object}",
      "PlayRestrictionsPlayRestrictionV1Settings": "@{enum=System.Object[]; type=string}",
      "PlayRestrictionsPluginCallerId_MockCallerId": "@{properties=; type=object}",
      "PlayRestrictionsPluginCallerId_ProductSession": "@{properties=; type=object}",
      "PlayerAccountAccessToken": "@{properties=; type=object}",
      "PlayerAccountAliasesV1Alias": "@{properties=; type=object}",
      "PlayerAccountAliasesV1AliasInput": "@{properties=; type=object}",
      "PlayerAccountAliasesV1AliasList": "@{properties=; type=object}",
      "PlayerAccountAliasesV1AliasLookup": "@{properties=; type=object}",
      "PlayerAccountAliasesV1AliasLookupResponse": "@{properties=; type=object}",
      "PlayerAccountAliasesV1AliasValidationReason": "@{enum=System.Object[]; type=string}",
      "PlayerAccountAliasesV1RequiredResponse": "@{properties=; type=object}",
      "PlayerAccountAliasesV1StatusResponse": "@{properties=; type=object}",
      "PlayerAccountAuthHint": "@{properties=; type=object}",
      "PlayerAccountAuthHintType": "@{enum=System.Object[]; type=string}",
      "PlayerAccountAuthorization": "@{properties=; type=object}",
      "PlayerAccountAuthorizationUpdateRequest": "@{properties=; type=object}",
      "PlayerAccountConfigV3ReadyState": "@{properties=; type=object}",
      "PlayerAccountEligibilityResponse": "@{properties=; type=object}",
      "PlayerAccountGameNameAndTagLine": "@{properties=; type=object}",
      "PlayerAccountGenerateTaglineInput": "@{properties=; type=object}",
      "PlayerAccountGenerateTaglineResponse": "@{properties=; type=object}",
      "PlayerAccountIdToken": "@{properties=; type=object}",
      "PlayerAccountLookupV1GamerNameAndTagline": "@{properties=; type=object}",
      "PlayerAccountLookupV1NamesetsForPuuidRequest": "@{properties=; type=object}",
      "PlayerAccountLookupV1NamesetsForPuuidResponse": "@{properties=; type=object}",
      "PlayerAccountLookupV1NamesetsForPuuidsRequest": "@{properties=; type=object}",
      "PlayerAccountLookupV1NamesetsForPuuidsResponse": "@{properties=; type=object}",
      "PlayerAccountLookupV1PlaystationNameset": "@{properties=; type=object}",
      "PlayerAccountLookupV1PuuidAndProvider": "@{properties=; type=object}",
      "PlayerAccountLookupV1PuuidsForConsoleIdsRequest": "@{properties=; type=object}",
      "PlayerAccountLookupV1PuuidsForConsoleIdsResponse": "@{properties=; type=object}",
      "PlayerAccountLookupV1SwitchNameset": "@{properties=; type=object}",
      "PlayerAccountLookupV1ToggleMockApiRequest": "@{properties=; type=object}",
      "PlayerAccountLookupV1XboxNameset": "@{properties=; type=object}",
      "PlayerAccountOnlinePlatform": "@{enum=System.Object[]; type=string}",
      "PlayerAccountPlatformUser": "@{properties=; type=object}",
      "PlayerAccountPlayerAccountPluginConfig": "@{properties=; type=object}",
      "PlayerAccountPluginConfigResponse": "@{properties=; type=object}",
      "PlayerAccountPromotionV1AccountDetails": "@{properties=; type=object}",
      "PlayerAccountPromotionV1AccountPromotionResponse": "@{properties=; type=object}",
      "PlayerAccountPromotionV1AccountPromotionValidationFailures": "@{properties=; type=object}",
      "PlayerAccountPromotionV1BlockListResponse": "@{properties=; type=object}",
      "PlayerAccountPromotionV1BlockedPuuid": "@{properties=; type=object}",
      "PlayerAccountPromotionV1EligibilityCheckResponse": "@{properties=; type=object}",
      "PlayerAccountPromotionV1UpdateableFieldsResponse": "@{properties=; type=object}",
      "PlayerAccountRSOAuthorizationTrustLevel": "@{enum=System.Object[]; type=string}",
      "PlayerAccountRegionLocale": "@{properties=; type=object}",
      "PlayerAccountRegionsV1EligibilityCheckResponse": "@{properties=; type=object}",
      "PlayerAccountRegionsV1RegionAssignmentResponse": "@{properties=; type=object}",
      "PlayerAccountRegionsV1RegionAssignmentResponseMessage": "@{enum=System.Object[]; type=string}",
      "PlayerAccountSanitizeRequest": "@{properties=; type=object}",
      "PlayerAccountSanitizeResponse": "@{properties=; type=object}",
      "PlayerAccountServiceV1LoginLocationInfo": "@{properties=; type=object}",
      "PlayerAccountServiceV1PlayerLoginLocationHistory": "@{properties=; type=object}",
      "PlayerAccountServiceV1PlayersLoginLocationHistory": "@{properties=; type=object}",
      "PlayerAccountServiceV1RequestedPlayersLoginLocationHistory": "@{properties=; type=object}",
      "PlayerAccountUserInfo": "@{properties=; type=object}",
      "PlayerAccountV1AuthMethodConfig": "@{properties=; type=object}",
      "PlayerAccountV1LoginLocationInfo": "@{properties=; type=object}",
      "PlayerAccountV1PlayerLoginLocationHistory": "@{properties=; type=object}",
      "PlayerAccountV1PlayersLoginLocationHistory": "@{properties=; type=object}",
      "PlayerAccountV1RequestedPlayersLoginLocationHistory": "@{properties=; type=object}",
      "PlayerAccountVngV1HomeBaseCountry": "@{properties=; type=object}",
      "PlayerAccountVngV1RegionLocale": "@{properties=; type=object}",
      "PlayerAccountVngV1StatusResponse": "@{properties=; type=object}",
      "PlayerAccountVngV1WebUrlRequest": "@{properties=; type=object}",
      "PlayerAccountVngV1WebUrlResponse": "@{properties=; type=object}",
      "PlayerAffinityAccessToken": "@{properties=; type=object}",
      "PlayerAffinityAffinityV1AffinityInput": "@{properties=; type=object}",
      "PlayerAffinityAffinityV2AffinityProductInput": "@{properties=; type=object}",
      "PlayerAffinityAlias": "@{properties=; type=object}",
      "PlayerAffinityAuthorization": "@{properties=; type=object}",
      "PlayerAffinityIdClaims": "@{properties=; type=object}",
      "PlayerAffinityIdToken": "@{properties=; type=object}",
      "PlayerAffinityPlayerAffinityCachedProductAffinity": "@{properties=; type=object}",
      "PlayerAffinityPlayerAffinityCachedServiceAffinity": "@{properties=; type=object}",
      "PlayerAffinityPlayerAffinityDataSource": "@{enum=System.Object[]; type=string}",
      "PlayerAffinityPlayerAffinityPluginConfig": "@{properties=; type=object}",
      "PlayerAffinityPlayerAffinityPluginStatus": "@{properties=; type=object}",
      "PlayerAffinityPlayerAffinityProductToken": "@{properties=; type=object}",
      "PlayerAffinityPlayerAffinityServiceToken": "@{properties=; type=object}",
      "PlayerAffinityPlayerAffinityShardInfo": "@{properties=; type=object}",
      "PlayerAffinityPlayerAffinityToken": "@{properties=; type=object}",
      "PlayerAffinityPlayerAffinityTokenProduct": "@{properties=; type=object}",
      "PlayerAffinityProductAffinityInput": "@{properties=; type=object}",
      "PlayerAffinityServiceAffinityInput": "@{properties=; type=object}",
      "PlayerPreferencesAccessToken": "@{properties=; type=object}",
      "PlayerPreferencesAffinityV1AffinityInput": "@{properties=; type=object}",
      "PlayerPreferencesAffinityV2AffinityProductInput": "@{properties=; type=object}",
      "PlayerPreferencesAlias": "@{properties=; type=object}",
      "PlayerPreferencesAuthorization": "@{properties=; type=object}",
      "PlayerPreferencesIdClaims": "@{properties=; type=object}",
      "PlayerPreferencesIdToken": "@{properties=; type=object}",
      "PlayerPreferencesPlayerAffinityCachedProductAffinity": "@{properties=; type=object}",
      "PlayerPreferencesPlayerAffinityCachedServiceAffinity": "@{properties=; type=object}",
      "PlayerPreferencesPlayerAffinityDataSource": "@{enum=System.Object[]; type=string}",
      "PlayerPreferencesPlayerAffinityPluginConfig": "@{properties=; type=object}",
      "PlayerPreferencesPlayerAffinityPluginStatus": "@{properties=; type=object}",
      "PlayerPreferencesPlayerAffinityProductToken": "@{properties=; type=object}",
      "PlayerPreferencesPlayerAffinityServiceToken": "@{properties=; type=object}",
      "PlayerPreferencesPlayerAffinityShardInfo": "@{properties=; type=object}",
      "PlayerPreferencesPlayerAffinityToken": "@{properties=; type=object}",
      "PlayerPreferencesPlayerAffinityTokenProduct": "@{properties=; type=object}",
      "PlayerPreferencesPlayerPreferencesData": "@{properties=; type=object}",
      "PlayerPreferencesPluginCallerId_MockCallerId": "@{properties=; type=object}",
      "PlayerPreferencesPluginCallerId_ProductSession": "@{properties=; type=object}",
      "PlayerPreferencesProductAffinityInput": "@{properties=; type=object}",
      "PlayerPreferencesRegionLocale": "@{properties=; type=object}",
      "PlayerPreferencesServiceAffinityInput": "@{properties=; type=object}",
      "PlayerReportingAuthorization": "@{properties=; type=object}",
      "PlayerReportingGapsMailboxUpdated": "@{properties=; type=object}",
      "PlayerReportingLocalizedReporterFeedbackMessage": "@{properties=; type=object}",
      "PlayerReportingMail": "@{properties=; type=object}",
      "PlayerReportingMailState": "@{enum=System.Object[]; type=string}",
      "PlayerReportingMailType": "@{enum=System.Object[]; type=string}",
      "PlayerReportingMailboxStatusUpdated": "@{properties=; type=object}",
      "PlayerReportingPlayerAffinityInput": "@{properties=; type=object}",
      "PlayerReportingPlayerAffinityStatus": "@{properties=; type=object}",
      "PlayerReportingPlayerAffinityToken": "@{properties=; type=object}",
      "PlayerReportingPlayerReport": "@{properties=; type=object}",
      "PlayerReportingPlayerReportV2": "@{properties=; type=object}",
      "PlayerReportingRegionLocale": "@{properties=; type=object}",
      "PlayerReportingReporterFeedback": "@{properties=; type=object}",
      "PlayerReportingReporterFeedbackAcknowledgedEvent": "@{properties=; type=object}",
      "PlayerReportingReporterFeedbackDto": "@{properties=; type=object}",
      "PlayerReportingReporterFeedbackReceivedEvent": "@{properties=; type=object}",
      "PlayerReportingRequestMailParameters": "@{properties=; type=object}",
      "PlayerReportingUpdateMailStateRequest": "@{properties=; type=object}",
      "PlayerSessionLifecycleAcceptance": "@{enum=System.Object[]; type=string}",
      "PlayerSessionLifecycleAccessToken": "@{properties=; type=object}",
      "PlayerSessionLifecycleAppleAuthorizationError": "@{enum=System.Object[]; type=string}",
      "PlayerSessionLifecycleAppleAuthorizationOpenConnectId": "@{properties=; type=object}",
      "PlayerSessionLifecycleAppleAuthorizationParameters": "@{properties=; type=object}",
      "PlayerSessionLifecycleAppleAuthorizationResponse": "@{properties=; type=object}",
      "PlayerSessionLifecycleAppleAuthorizationResponseType": "@{enum=System.Object[]; type=string}",
      "PlayerSessionLifecycleAuthMethodConfig": "@{properties=; type=object}",
      "PlayerSessionLifecycleAuthenticateGameCenterInput": "@{properties=; type=object}",
      "PlayerSessionLifecycleAuthenticateNintendoInput": "@{properties=; type=object}",
      "PlayerSessionLifecycleAuthenticatePlaystationInput": "@{properties=; type=object}",
      "PlayerSessionLifecycleAuthenticateXboxInput": "@{properties=; type=object}",
      "PlayerSessionLifecycleAuthenticationResponse": "@{properties=; type=object}",
      "PlayerSessionLifecycleAuthenticationTypeEnum": "@{enum=System.Object[]; type=string}",
      "PlayerSessionLifecycleAuthorizationRequest": "@{properties=; type=object}",
      "PlayerSessionLifecycleAuthorizationResponse": "@{properties=; type=object}",
      "PlayerSessionLifecycleAuthorizationResponseType": "@{enum=System.Object[]; type=string}",
      "PlayerSessionLifecycleEntitlementsToken": "@{properties=; type=object}",
      "PlayerSessionLifecycleGameCenterInput": "@{properties=; type=object}",
      "PlayerSessionLifecycleGamepassResponseDetails": "@{properties=; type=object}",
      "PlayerSessionLifecycleGamepassStatus": "@{enum=System.Object[]; type=string}",
      "PlayerSessionLifecycleGoogleAuthorizationError": "@{enum=System.Object[]; type=string}",
      "PlayerSessionLifecycleGoogleAuthorizationParameters": "@{properties=; type=object}",
      "PlayerSessionLifecycleGoogleAuthorizationResponse": "@{properties=; type=object}",
      "PlayerSessionLifecycleGoogleAuthorizationResponseType": "@{enum=System.Object[]; type=string}",
      "PlayerSessionLifecycleHealupResponseDetails": "@{properties=; type=object}",
      "PlayerSessionLifecycleIdToken": "@{properties=; type=object}",
      "PlayerSessionLifecycleImplicitAuthorization": "@{properties=; type=object}",
      "PlayerSessionLifecycleInitiateLoginSessionRequest": "@{properties=; type=object}",
      "PlayerSessionLifecycleKRIdVerificationResponseDetails": "@{properties=; type=object}",
      "PlayerSessionLifecycleLoginStrategyType": "@{enum=System.Object[]; type=string}",
      "PlayerSessionLifecycleMultifactorDetails": "@{properties=; type=object}",
      "PlayerSessionLifecycleMultifactorMethod": "@{enum=System.Object[]; type=string}",
      "PlayerSessionLifecycleMultifactorResponseDetails": "@{properties=; type=object}",
      "PlayerSessionLifecycleNintendoAccountAuthorization": "@{properties=; type=object}",
      "PlayerSessionLifecycleNintendoAccountAuthorizationParameters": "@{properties=; type=object}",
      "PlayerSessionLifecycleNintendoAccountAuthorizationResponse": "@{properties=; type=object}",
      "PlayerSessionLifecycleNintendoAccountErrorCode": "@{enum=System.Object[]; type=string}",
      "PlayerSessionLifecycleNintendoAccountGetNetworkServiceAccountParameters": "@{properties=; type=object}",
      "PlayerSessionLifecycleNintendoAccountNetworkServiceAccount": "@{properties=; type=object}",
      "PlayerSessionLifecycleNintendoAccountNetworkServiceAccountResponse": "@{properties=; type=object}",
      "PlayerSessionLifecycleNintendoInput": "@{properties=; type=object}",
      "PlayerSessionLifecycleOnlinePlatform": "@{enum=System.Object[]; type=string}",
      "PlayerSessionLifecyclePlatformUser": "@{properties=; type=object}",
      "PlayerSessionLifecyclePlayerAccountVngV1StatusResponse": "@{properties=; type=object}",
      "PlayerSessionLifecyclePlayerAffinityProductToken": "@{properties=; type=object}",
      "PlayerSessionLifecyclePlayerSessionState": "@{properties=; type=object}",
      "PlayerSessionLifecyclePlayerSessionStateType": "@{enum=System.Object[]; type=string}",
      "PlayerSessionLifecyclePlaystationAccountAuthorization": "@{properties=; type=object}",
      "PlayerSessionLifecyclePlaystationAccountAuthorizationParameters": "@{properties=; type=object}",
      "PlayerSessionLifecyclePlaystationAccountAuthorizationResponse": "@{properties=; type=object}",
      "PlayerSessionLifecyclePlaystationAccountErrorCode": "@{enum=System.Object[]; type=string}",
      "PlayerSessionLifecyclePlaystationInput": "@{properties=; type=object}",
      "PlayerSessionLifecyclePluginConfigResponse": "@{properties=; type=object}",
      "PlayerSessionLifecycleRSOAuthorizationTrustLevel": "@{enum=System.Object[]; type=string}",
      "PlayerSessionLifecycleReadyState": "@{properties=; type=object}",
      "PlayerSessionLifecycleRegionElectionV1EligibilityResponse": "@{properties=; type=object}",
      "PlayerSessionLifecycleResponseType": "@{enum=System.Object[]; type=string}",
      "PlayerSessionLifecycleSessionLoginToken": "@{properties=; type=object}",
      "PlayerSessionLifecycleSessionResponse": "@{properties=; type=object}",
      "PlayerSessionLifecycleSessionResponseType": "@{enum=System.Object[]; type=string}",
      "PlayerSessionLifecycleSessionState": "@{enum=System.Object[]; type=string}",
      "PlayerSessionLifecycleSignupLinkDetails": "@{properties=; type=object}",
      "PlayerSessionLifecycleSignupResponseDetails": "@{properties=; type=object}",
      "PlayerSessionLifecycleSuccessResponseDetails": "@{properties=; type=object}",
      "PlayerSessionLifecycleSuggestedAction": "@{properties=; type=object}",
      "PlayerSessionLifecycleUpdateLoginStrategyRequest": "@{properties=; type=object}",
      "PlayerSessionLifecycleUserInfo": "@{properties=; type=object}",
      "PlayerSessionLifecycleV1AuthenticateCodeInput": "@{properties=; type=object}",
      "PlayerSessionLifecycleV1AuthenticateOpenIdConnectInput": "@{properties=; type=object}",
      "PlayerSessionLifecycleV1OpenIdConnectInput": "@{properties=; type=object}",
      "PlayerSessionLifecycleWebLinkingStatus": "@{enum=System.Object[]; type=string}",
      "PlayerSessionLifecycleWebLinkingStatusResponse": "@{properties=; type=object}",
      "PlayerSessionLifecycleXboxAccountAuthorization": "@{properties=; type=object}",
      "PlayerSessionLifecycleXboxAccountAuthorizationParameters": "@{properties=; type=object}",
      "PlayerSessionLifecycleXboxAccountAuthorizationResponse": "@{properties=; type=object}",
      "PlayerSessionLifecycleXboxAccountErrorCode": "@{enum=System.Object[]; type=string}",
      "PlayerSessionLifecycleXboxInput": "@{properties=; type=object}",
      "PlaystationAccountAuthorization": "@{properties=; type=object}",
      "PlaystationAccountAuthorizationParameters": "@{properties=; type=object}",
      "PlaystationAccountAuthorizationResponse": "@{properties=; type=object}",
      "PlaystationAccountErrorCode": "@{enum=System.Object[]; type=string}",
      "PlaystationAccountOnlinePlatform": "@{enum=System.Object[]; type=string}",
      "PlaystationAccountPlatformUser": "@{properties=; type=object}",
      "PlaystationAccountUser": "@{properties=; type=object}",
      "PluginDescriptionResource": "@{properties=; type=object}",
      "PluginManagerResource": "@{properties=; type=object}",
      "PluginManagerState": "@{enum=System.Object[]; type=string}",
      "PluginMetadataResource": "@{properties=; type=object}",
      "PluginRegionLocaleChangedEvent": "@{properties=; type=object}",
      "PluginResource": "@{properties=; type=object}",
      "PluginResourceContract": "@{properties=; type=object}",
      "PluginResourceEvent": "@{properties=; type=object}",
      "PluginResourceEventType": "@{enum=System.Object[]; type=string}",
      "PluginServiceError": "@{properties=; type=object}",
      "PluginThreadingModel": "@{enum=System.Object[]; type=string}",
      "PrimeGamingPrimeGamingLoginResponse": "@{properties=; type=object}",
      "PrimeGamingPrimeGamingLoginStatus": "@{enum=System.Object[]; type=string}",
      "PrimeGamingPrimeGamingSupportStatus": "@{properties=; type=object}",
      "PrivacyPrivacySettings": "@{properties=; type=object}",
      "PrivacyTrackingPermissionRequestState": "@{enum=System.Object[]; type=string}",
      "ProductIntegrationAppRepairApplyRequest": "@{properties=; type=object}",
      "ProductIntegrationAppUpdateApplyRequest": "@{properties=; type=object}",
      "ProductIntegrationAppUpdateStatus": "@{properties=; type=object}",
      "ProductIntegrationAppUpdateStatusFile": "@{properties=; type=object}",
      "ProductIntegrationDebugAppUpdateStatus": "@{properties=; type=object}",
      "ProductIntegrationDepsAppRepairApplyRequest": "@{properties=; type=object}",
      "ProductIntegrationDepsAppUpdateApplyRequest": "@{properties=; type=object}",
      "ProductIntegrationDepsAppUpdateStatus": "@{properties=; type=object}",
      "ProductIntegrationDepsRepairCode": "@{enum=System.Object[]; type=string}",
      "ProductIntegrationDetachedSession": "@{properties=; type=object}",
      "ProductIntegrationHeartbeatFile": "@{properties=; type=object}",
      "ProductIntegrationLocaleDataResource": "@{properties=; type=object}",
      "ProductIntegrationLocaleUpdate": "@{properties=; type=object}",
      "ProductIntegrationPatchlineMetadata": "@{properties=; type=object}",
      "ProductIntegrationProductIntegrationAppRepairBody": "@{properties=; type=object}",
      "ProductIntegrationProductIntegrationAppUpdateStatus": "@{properties=; type=object}",
      "ProductIntegrationProductSession": "@{properties=; type=object}",
      "ProductIntegrationRepairCode": "@{enum=System.Object[]; type=string}",
      "ProductIntegrationSettingsToken": "@{properties=; type=object}",
      "ProductIntegrationSettingsTokenRequest": "@{properties=; type=object}",
      "ProductIntegrationSignoutPermission": "@{enum=System.Object[]; type=string}",
      "ProductLocalizationConfigType": "@{enum=System.Object[]; type=string}",
      "ProductLocalizationContentCookies": "@{properties=; type=object}",
      "ProductLocalizationCookie": "@{properties=; type=object}",
      "ProductLocalizationPatchlineMetadata": "@{properties=; type=object}",
      "ProductLocalizationProductLocalizationData": "@{properties=; type=object}",
      "ProductLocalizationProductMetadata": "@{properties=; type=object}",
      "ProductLocalizationProductMetadataMap": "@{properties=; type=object}",
      "ProductLocalizationTranslateRequest": "@{properties=; type=object}",
      "ProductLocalizationTranslateResponse": "@{properties=; type=object}",
      "ProductLocalizationTranslateResult": "@{properties=; type=object}",
      "ProductLocalizationTranslationsData": "@{properties=; type=object}",
      "ProductMetadataAppStoreUpdateInfo": "@{properties=; type=object}",
      "ProductMetadataClientProductType": "@{enum=System.Object[]; type=string}",
      "ProductMetadataConfigType": "@{enum=System.Object[]; type=string}",
      "ProductMetadataConfigurationStatus": "@{enum=System.Object[]; type=string}",
      "ProductMetadataContentCookies": "@{properties=; type=object}",
      "ProductMetadataCookie": "@{properties=; type=object}",
      "ProductMetadataCookieVector": "@{properties=; type=object}",
      "ProductMetadataDebugClientConfigSource": "@{properties=; type=object}",
      "ProductMetadataDependency": "@{properties=; type=object}",
      "ProductMetadataDynamicTagHeuristics": "@{properties=; type=object}",
      "ProductMetadataDynamicTags": "@{properties=; type=object}",
      "ProductMetadataInstallId": "@{properties=; type=object}",
      "ProductMetadataLocaleDataResource": "@{properties=; type=object}",
      "ProductMetadataLoginCountry": "@{properties=; type=object}",
      "ProductMetadataPatchComponentMetadata": "@{properties=; type=object}",
      "ProductMetadataPatchSetMetadata": "@{properties=; type=object}",
      "ProductMetadataPatchlineConfigurationMetadata": "@{properties=; type=object}",
      "ProductMetadataPatchlineMetadata": "@{properties=; type=object}",
      "ProductMetadataPlayerAffinityDataSource": "@{enum=System.Object[]; type=string}",
      "ProductMetadataPlayerAffinityPluginStatus": "@{properties=; type=object}",
      "ProductMetadataPlayerAffinityProductToken": "@{properties=; type=object}",
      "ProductMetadataProductAlias": "@{properties=; type=object}",
      "ProductMetadataProductDefinition": "@{properties=; type=object}",
      "ProductMetadataProductDefinitionMap": "@{properties=; type=object}",
      "ProductMetadataProductMetadata": "@{properties=; type=object}",
      "ProductMetadataProductMetadataMap": "@{properties=; type=object}",
      "ProductMetadataPublishState": "@{enum=System.Object[]; type=string}",
      "ProductMetadataRegionDataResource": "@{properties=; type=object}",
      "ProductMetadataRegionLocale": "@{properties=; type=object}",
      "ProductMetadataScdCookie": "@{properties=; type=object}",
      "ProductMetadataScdCookieVector": "@{properties=; type=object}",
      "ProductMetadataScdEnabled": "@{enum=System.Object[]; type=string}",
      "ProductMetadataSecondaryPatchlineMap": "@{properties=; type=object}",
      "ProductMetadataSecondaryPatchlineMetadata": "@{properties=; type=object}",
      "ProductMetadataShardsDataResource": "@{properties=; type=object}",
      "ProductSessionHeartbeatInfo": "@{properties=; type=object}",
      "ProductSessionLaunchConfiguration": "@{properties=; type=object}",
      "ProductSessionProductPhase": "@{enum=System.Object[]; type=string}",
      "ProductSessionSession": "@{properties=; type=object}",
      "ProductSessionSessionHeartbeat": "@{properties=; type=object}",
      "ProductSessionTerminationReason": "@{enum=System.Object[]; type=string}",
      "ReferenceEchoRequest": "@{properties=; type=object}",
      "ReferenceEchoResponse": "@{properties=; type=object}",
      "RegionLocale": "@{properties=; type=object}",
      "RemotingHelpFormat": "@{description=Help format for remoting functions and types.; enum=System.Object[]; type=string}",
      "RemotingPrivilege": "@{description=Well-known privilege levels for bindable functions.; enum=System.Object[]; type=string}",
      "RemotingSerializedFormat": "@{description=Serialization format for remoting requests and results.; enum=System.Object[]; type=string}",
      "RiotClientAuthApiAlias": "@{properties=; type=object}",
      "RiotClientAuthApiAuthorization": "@{properties=; type=object}",
      "RiotClientAuthApiClientDetails": "@{properties=; type=object}",
      "RiotClientAuthApiHomeBaseCountry": "@{properties=; type=object}",
      "RiotClientAuthApiIdClaims": "@{properties=; type=object}",
      "RiotClientAuthApiLoginCountry": "@{properties=; type=object}",
      "RiotClientAuthApiUserInfo": "@{properties=; type=object}",
      "RiotClientAuthApiUserInfoLol": "@{properties=; type=object}",
      "RiotClientAuthApiUserInfoSummoner": "@{properties=; type=object}",
      "RiotClientAuthRsoAuthAccessToken": "@{properties=; type=object}",
      "RiotClientAuthRsoAuthAuthorizationRequest": "@{properties=; type=object}",
      "RiotClientAuthRsoAuthAuthorizationResponse": "@{properties=; type=object}",
      "RiotClientAuthRsoAuthAuthorizationResponseType": "@{enum=System.Object[]; type=string}",
      "RiotClientAuthRsoAuthAuthorizationTrustLevel": "@{enum=System.Object[]; type=string}",
      "RiotClientAuthRsoAuthIdToken": "@{properties=; type=object}",
      "RiotClientAuthRsoAuthImplicitAuthorization": "@{properties=; type=object}",
      "RiotClientAuthRsoAuthReadyState": "@{properties=; type=object}",
      "RiotClientAuthRsoAuthUserInfo": "@{properties=; type=object}",
      "RiotLoginAuthenticationMethod": "@{enum=System.Object[]; type=string}",
      "RiotLoginAuthorizationRequest": "@{properties=; type=object}",
      "RiotLoginAuthorizationResponse": "@{properties=; type=object}",
      "RiotLoginAuthorizationResponseType": "@{enum=System.Object[]; type=string}",
      "RiotLoginLoginPhase": "@{enum=System.Object[]; type=string}",
      "RiotLoginLoginResult": "@{properties=; type=object}",
      "RiotLoginLoginStatus": "@{properties=; type=object}",
      "RiotLoginLoginTypeEnum": "@{enum=System.Object[]; type=string}",
      "RiotLoginOutcome": "@{enum=System.Object[]; type=string}",
      "RiotLoginPlatformUser": "@{properties=; type=object}",
      "RiotLoginProduct": "@{properties=; type=object}",
      "RiotLoginRSOAuthorizationTrustLevel": "@{enum=System.Object[]; type=string}",
      "RiotLoginRSOSignOnAttemptEvent": "@{properties=; type=object}",
      "RiotLoginReadyState": "@{properties=; type=object}",
      "RiotLoginSessionResponse": "@{properties=; type=object}",
      "RiotLoginSessionResponseType": "@{enum=System.Object[]; type=string}",
      "RiotLoginStoredSessionState": "@{enum=System.Object[]; type=string}",
      "RiotMessagingServiceAccessToken": "@{properties=; type=object}",
      "RiotMessagingServiceAcknowledgeBody": "@{properties=; type=object}",
      "RiotMessagingServiceEntitlementsToken": "@{properties=; type=object}",
      "RiotMessagingServiceMessage": "@{properties=; type=object}",
      "RiotMessagingServicePlayerServiceAffinityInput": "@{properties=; type=object}",
      "RiotMessagingServicePlayerServiceAffinityToken": "@{properties=; type=object}",
      "RiotMessagingServiceSession": "@{properties=; type=object}",
      "RiotMessagingServiceState": "@{enum=System.Object[]; type=string}",
      "RiotMessagingServiceTokenType": "@{enum=System.Object[]; type=string}",
      "RiotStatusBuildInfo": "@{properties=; type=object}",
      "RiotStatusConfigType": "@{enum=System.Object[]; type=string}",
      "RiotStatusCookie": "@{properties=; type=object}",
      "RiotStatusPatchlineMetadata": "@{properties=; type=object}",
      "RiotStatusProductMetadata": "@{properties=; type=object}",
      "RiotStatusProductMetadataMap": "@{properties=; type=object}",
      "RmsMessage": "@{properties=; type=object}",
      "RnetSanitizerContainsSanitizedRequest": "@{properties=; type=object}",
      "RnetSanitizerContainsSanitizedResponse": "@{properties=; type=object}",
      "RnetSanitizerSanitizeRequest": "@{properties=; type=object}",
      "RnetSanitizerSanitizeResponse": "@{properties=; type=object}",
      "RnetSanitizerSanitizerStatus": "@{properties=; type=object}",
      "RsoAuthAccessToken": "@{properties=; type=object}",
      "RsoAuthAuthError": "@{properties=; type=object}",
      "RsoAuthAuthHint": "@{properties=; type=object}",
      "RsoAuthAuthHintType": "@{enum=System.Object[]; type=string}",
      "RsoAuthAuthenticationTypeEnum": "@{enum=System.Object[]; type=string}",
      "RsoAuthAuthorization": "@{properties=; type=object}",
      "RsoAuthAuthorizationCode": "@{properties=; type=object}",
      "RsoAuthAuthorizationKey": "@{properties=; type=object}",
      "RsoAuthAuthorizationKeyRequest": "@{properties=; type=object}",
      "RsoAuthAuthorizationRequest": "@{properties=; type=object}",
      "RsoAuthAuthorizationRequestTelemetryContext": "@{properties=; type=object}",
      "RsoAuthAuthorizationResponse": "@{properties=; type=object}",
      "RsoAuthAuthorizationResponseTelemetryContext": "@{properties=; type=object}",
      "RsoAuthAuthorizationResponseType": "@{enum=System.Object[]; type=string}",
      "RsoAuthAuthorizationUpdateRequest": "@{properties=; type=object}",
      "RsoAuthClientAuthorizationState": "@{enum=System.Object[]; type=string}",
      "RsoAuthClientAuthorizationTelemetryContext": "@{properties=; type=object}",
      "RsoAuthConfigV3AMRValuesSupported": "@{properties=; type=object}",
      "RsoAuthConfigV3AuthProgress": "@{enum=System.Object[]; type=string}",
      "RsoAuthConfigV3OpenIdConfiguration": "@{properties=; type=object}",
      "RsoAuthConfigV3PartnerAuthConfig": "@{properties=; type=object}",
      "RsoAuthConfigV3ReadyState": "@{properties=; type=object}",
      "RsoAuthDeviceId": "@{properties=; type=object}",
      "RsoAuthEntitlementsToken": "@{properties=; type=object}",
      "RsoAuthGameCenterAuthCredentials": "@{properties=; type=object}",
      "RsoAuthGarenaPartnerCredentials": "@{properties=; type=object}",
      "RsoAuthGoogleAuthCredentials": "@{properties=; type=object}",
      "RsoAuthHttpCookie": "@{properties=; type=object}",
      "RsoAuthHttpCookieJar": "@{properties=; type=object}",
      "RsoAuthIdToken": "@{properties=; type=object}",
      "RsoAuthImplicitAuthorization": "@{properties=; type=object}",
      "RsoAuthImplicitGrantModeTelemetryContext": "@{properties=; type=object}",
      "RsoAuthLoginAMR": "@{enum=System.Object[]; type=string}",
      "RsoAuthLogoutReason": "@{enum=System.Object[]; type=string}",
      "RsoAuthMSDKQQPartnerCredentials": "@{properties=; type=object}",
      "RsoAuthMSDKV5PartnerCredentials": "@{properties=; type=object}",
      "RsoAuthMSDKWeChatPartnerCredentials": "@{properties=; type=object}",
      "RsoAuthMultifactorDetails": "@{properties=; type=object}",
      "RsoAuthMultifactorMethod": "@{enum=System.Object[]; type=string}",
      "RsoAuthPartnerCredentials": "@{properties=; type=object}",
      "RsoAuthPartnerCredentialsV3": "@{properties=; type=object}",
      "RsoAuthPublicClientConfig": "@{properties=; type=object}",
      "RsoAuthRSOAuthTelemetryContext": "@{properties=; type=object}",
      "RsoAuthRSOAuthorizationSubmission": "@{properties=; type=object}",
      "RsoAuthRSOAuthorizationTelemetryContext": "@{properties=; type=object}",
      "RsoAuthRSOAuthorizationTrustLevel": "@{enum=System.Object[]; type=string}",
      "RsoAuthRSOCredentialSubmission": "@{properties=; type=object}",
      "RsoAuthRSOJWTConfig": "@{properties=; type=object}",
      "RsoAuthRSOOTPSubmission": "@{properties=; type=object}",
      "RsoAuthRSOPlayerCredentials": "@{properties=; type=object}",
      "RsoAuthRSOReauthenticationSubmission": "@{properties=; type=object}",
      "RsoAuthSessionCredentials": "@{properties=; type=object}",
      "RsoAuthSessionLoginToken": "@{properties=; type=object}",
      "RsoAuthSessionMultifactor": "@{properties=; type=object}",
      "RsoAuthSessionReauthentication": "@{properties=; type=object}",
      "RsoAuthSessionResponse": "@{properties=; type=object}",
      "RsoAuthSessionResponseType": "@{enum=System.Object[]; type=string}",
      "RsoAuthSessionSignup": "@{properties=; type=object}",
      "RsoAuthStatusMessage": "@{properties=; type=object}",
      "RsoAuthTelemetryEvent": "@{properties=; type=object}",
      "RsoAuthTencentPartnerCredentials": "@{properties=; type=object}",
      "RsoAuthTokenContext": "@{properties=; type=object}",
      "RsoAuthUserInfo": "@{properties=; type=object}",
      "RsoAuthWeGamePartnerCredentials": "@{properties=; type=object}",
      "RsoAuthenticatorAuthConfigResponse": "@{properties=; type=object}",
      "RsoAuthenticatorAuthenticationTypeEnum": "@{enum=System.Object[]; type=string}",
      "RsoAuthenticatorHttpCookie": "@{properties=; type=object}",
      "RsoAuthenticatorPlatformUser": "@{properties=; type=object}",
      "RsoAuthenticatorPluginConfigResponse": "@{properties=; type=object}",
      "RsoAuthenticatorRSOAuthorizationTrustLevel": "@{enum=System.Object[]; type=string}",
      "RsoAuthenticatorReadyState": "@{properties=; type=object}",
      "RsoAuthenticatorRegionLocale": "@{properties=; type=object}",
      "RsoAuthenticatorRsoAuthAccessToken": "@{properties=; type=object}",
      "RsoAuthenticatorRsoAuthAuthorizationRequest": "@{properties=; type=object}",
      "RsoAuthenticatorRsoAuthAuthorizationResponse": "@{properties=; type=object}",
      "RsoAuthenticatorRsoAuthAuthorizationResponseType": "@{enum=System.Object[]; type=string}",
      "RsoAuthenticatorRsoAuthIdToken": "@{properties=; type=object}",
      "RsoAuthenticatorRsoAuthImplicitAuthorization": "@{properties=; type=object}",
      "RsoAuthenticatorRsoAuthSessionLoginToken": "@{properties=; type=object}",
      "RsoAuthenticatorV1AuthMethodConfig": "@{properties=; type=object}",
      "RsoAuthenticatorV1AuthenticateCodeInput": "@{properties=; type=object}",
      "RsoAuthenticatorV1AuthenticateFacebookInput": "@{properties=; type=object}",
      "RsoAuthenticatorV1AuthenticateGameCenterInput": "@{properties=; type=object}",
      "RsoAuthenticatorV1AuthenticateMultifactorInput": "@{properties=; type=object}",
      "RsoAuthenticatorV1AuthenticateNintendoInput": "@{properties=; type=object}",
      "RsoAuthenticatorV1AuthenticateOpenIdConnectInput": "@{properties=; type=object}",
      "RsoAuthenticatorV1AuthenticatePlaystationInput": "@{properties=; type=object}",
      "RsoAuthenticatorV1AuthenticateXboxInput": "@{properties=; type=object}",
      "RsoAuthenticatorV1AuthenticationRedirectInput": "@{properties=; type=object}",
      "RsoAuthenticatorV1AuthenticationRequest": "@{properties=; type=object}",
      "RsoAuthenticatorV1AuthenticationResponse": "@{properties=; type=object}",
      "RsoAuthenticatorV1AuthenticationRsoInput": "@{properties=; type=object}",
      "RsoAuthenticatorV1Captcha": "@{properties=; type=object}",
      "RsoAuthenticatorV1CaptchaType": "@{enum=System.Object[]; type=string}",
      "RsoAuthenticatorV1CodeExchangeInput": "@{properties=; type=object}",
      "RsoAuthenticatorV1DisplayMode": "@{enum=System.Object[]; type=string}",
      "RsoAuthenticatorV1FacebookInput": "@{properties=; type=object}",
      "RsoAuthenticatorV1GameCenterInput": "@{properties=; type=object}",
      "RsoAuthenticatorV1GamepassResponseDetails": "@{properties=; type=object}",
      "RsoAuthenticatorV1GamepassStatus": "@{enum=System.Object[]; type=string}",
      "RsoAuthenticatorV1HCaptcha": "@{properties=; type=object}",
      "RsoAuthenticatorV1HealupResponseDetails": "@{properties=; type=object}",
      "RsoAuthenticatorV1KRIdVerificationResponseDetails": "@{properties=; type=object}",
      "RsoAuthenticatorV1LoginRequest": "@{properties=; type=object}",
      "RsoAuthenticatorV1MultifactorInput": "@{properties=; type=object}",
      "RsoAuthenticatorV1MultifactorResponseDetails": "@{properties=; type=object}",
      "RsoAuthenticatorV1MultifactorResponseType": "@{enum=System.Object[]; type=string}",
      "RsoAuthenticatorV1NintendoInput": "@{properties=; type=object}",
      "RsoAuthenticatorV1OpenIdConnectInput": "@{properties=; type=object}",
      "RsoAuthenticatorV1PlaystationInput": "@{properties=; type=object}",
      "RsoAuthenticatorV1ResendLinkRequest": "@{properties=; type=object}",
      "RsoAuthenticatorV1ResponseType": "@{enum=System.Object[]; type=string}",
      "RsoAuthenticatorV1RiotIdentityAuthCompleteInput": "@{properties=; type=object}",
      "RsoAuthenticatorV1RiotIdentityAuthCompleteRequest": "@{properties=; type=object}",
      "RsoAuthenticatorV1RiotIdentityAuthStartInput": "@{properties=; type=object}",
      "RsoAuthenticatorV1RiotIdentityInput": "@{properties=; type=object}",
      "RsoAuthenticatorV1RiotIdentitySignupCompleteInput": "@{properties=; type=object}",
      "RsoAuthenticatorV1RiotIdentitySignupCompleteRequest": "@{properties=; type=object}",
      "RsoAuthenticatorV1RiotIdentitySignupCreateInput": "@{properties=; type=object}",
      "RsoAuthenticatorV1RiotIdentitySignupStartInput": "@{properties=; type=object}",
      "RsoAuthenticatorV1RsoInput": "@{properties=; type=object}",
      "RsoAuthenticatorV1SignupCodeLinking": "@{properties=; type=object}",
      "RsoAuthenticatorV1SignupLinkDetails": "@{properties=; type=object}",
      "RsoAuthenticatorV1SignupLinkRequest": "@{properties=; type=object}",
      "RsoAuthenticatorV1SignupResponseDetails": "@{properties=; type=object}",
      "RsoAuthenticatorV1SuccessResponseDetails": "@{properties=; type=object}",
      "RsoAuthenticatorV1WebAuthenticationMethod": "@{enum=System.Object[]; type=string}",
      "RsoAuthenticatorV1WebAuthenticationUrlRequest": "@{properties=; type=object}",
      "RsoAuthenticatorV1WebLinkingStatus": "@{enum=System.Object[]; type=string}",
      "RsoAuthenticatorV1WebLinkingStatusResponse": "@{properties=; type=object}",
      "RsoAuthenticatorV1XboxInput": "@{properties=; type=object}",
      "RsoMobileUiAcceptance": "@{enum=System.Object[]; type=string}",
      "RsoMobileUiAccountDeletionV1AccountDeletionUIStatus": "@{properties=; type=object}",
      "RsoMobileUiAccountDeletionV1AccountDeletionUIStatusType": "@{enum=System.Object[]; type=string}",
      "RsoMobileUiAccountDeletionV1HomeBaseCountry": "@{properties=; type=object}",
      "RsoMobileUiAccountPromotionStatus": "@{properties=; type=object}",
      "RsoMobileUiAccountPromotionStatusType": "@{enum=System.Object[]; type=string}",
      "RsoMobileUiAuthMethodConfig": "@{properties=; type=object}",
      "RsoMobileUiAuthenticationMethod": "@{enum=System.Object[]; type=string}",
      "RsoMobileUiAuthenticationRedirectRequest": "@{properties=; type=object}",
      "RsoMobileUiConfigReadinessEnum": "@{enum=System.Object[]; type=string}",
      "RsoMobileUiConfigStatus": "@{properties=; type=object}",
      "RsoMobileUiEULAUIInitiate": "@{properties=; type=object}",
      "RsoMobileUiEULAUIStatus": "@{properties=; type=object}",
      "RsoMobileUiEULAUIStatusType": "@{enum=System.Object[]; type=string}",
      "RsoMobileUiEULAUIV2Agreement": "@{properties=; type=object}",
      "RsoMobileUiEULAUIV2Config": "@{properties=; type=object}",
      "RsoMobileUiEULAUIV2Status": "@{properties=; type=object}",
      "RsoMobileUiEULAUIV2StatusType": "@{enum=System.Object[]; type=string}",
      "RsoMobileUiFederatedAuthState": "@{properties=; type=object}",
      "RsoMobileUiFederatedAuthStateType": "@{enum=System.Object[]; type=string}",
      "RsoMobileUiFederatedLoginRequest": "@{properties=; type=object}",
      "RsoMobileUiGameOutOfDateUIInitiate": "@{properties=; type=object}",
      "RsoMobileUiIOSEventInfo": "@{properties=; type=object}",
      "RsoMobileUiKrAccountPromotionSession": "@{properties=; type=object}",
      "RsoMobileUiLoginInitiateRequest": "@{properties=; type=object}",
      "RsoMobileUiLoginStatus": "@{properties=; type=object}",
      "RsoMobileUiLoginStatusType": "@{enum=System.Object[]; type=string}",
      "RsoMobileUiLoginStrategyInfo": "@{properties=; type=object}",
      "RsoMobileUiLoginStrategyType": "@{enum=System.Object[]; type=string}",
      "RsoMobileUiLoginTypeEnum": "@{enum=System.Object[]; type=string}",
      "RsoMobileUiLoginV1Request": "@{properties=; type=object}",
      "RsoMobileUiOutcome": "@{enum=System.Object[]; type=string}",
      "RsoMobileUiPSLPlayerSessionState": "@{properties=; type=object}",
      "RsoMobileUiPlatformUser": "@{properties=; type=object}",
      "RsoMobileUiPluginConfigResponse": "@{properties=; type=object}",
      "RsoMobileUiProduct": "@{properties=; type=object}",
      "RsoMobileUiRSOAuthorizationTrustLevel": "@{enum=System.Object[]; type=string}",
      "RsoMobileUiRSOSignOnAttemptEvent": "@{properties=; type=object}",
      "RsoMobileUiRegionElectionV1EligibilityResponse": "@{properties=; type=object}",
      "RsoMobileUiRegionElectionV1InitiateRequest": "@{properties=; type=object}",
      "RsoMobileUiRegionElectionV1RegionElection": "@{properties=; type=object}",
      "RsoMobileUiRegionElectionV1UpdateRequest": "@{properties=; type=object}",
      "RsoMobileUiRegionsV1EligibilityCheckResponse": "@{properties=; type=object}",
      "RsoMobileUiRegionsV1RegionAssignmentResponse": "@{properties=; type=object}",
      "RsoMobileUiRegionsV1RegionAssignmentResponseMessage": "@{enum=System.Object[]; type=string}",
      "RsoMobileUiRsoAuthAccessToken": "@{properties=; type=object}",
      "RsoMobileUiRsoAuthAuthorizationRequest": "@{properties=; type=object}",
      "RsoMobileUiRsoAuthAuthorizationResponse": "@{properties=; type=object}",
      "RsoMobileUiRsoAuthAuthorizationResponseType": "@{enum=System.Object[]; type=string}",
      "RsoMobileUiRsoAuthIdToken": "@{properties=; type=object}",
      "RsoMobileUiRsoAuthImplicitAuthorization": "@{properties=; type=object}",
      "RsoMobileUiRsoAuthMultifactorDetails": "@{properties=; type=object}",
      "RsoMobileUiRsoAuthMultifactorMethod": "@{enum=System.Object[]; type=string}",
      "RsoMobileUiRsoAuthOpenIdConfiguration": "@{properties=; type=object}",
      "RsoMobileUiRsoAuthSessionLoginToken": "@{properties=; type=object}",
      "RsoMobileUiRsoAuthSessionResponse": "@{properties=; type=object}",
      "RsoMobileUiRsoAuthSessionResponseType": "@{enum=System.Object[]; type=string}",
      "RsoMobileUiRsoAuthSessionState": "@{enum=System.Object[]; type=string}",
      "RsoMobileUiRsoAuthenticatorAuthenticateCodeInput": "@{properties=; type=object}",
      "RsoMobileUiRsoAuthenticatorAuthenticateFacebookInput": "@{properties=; type=object}",
      "RsoMobileUiRsoAuthenticatorAuthenticateGameCenterInput": "@{properties=; type=object}",
      "RsoMobileUiRsoAuthenticatorAuthenticateMultifactorInput": "@{properties=; type=object}",
      "RsoMobileUiRsoAuthenticatorAuthenticateOpenIdConnectInput": "@{properties=; type=object}",
      "RsoMobileUiRsoAuthenticatorAuthenticateRiotIdentityInput": "@{properties=; type=object}",
      "RsoMobileUiRsoAuthenticatorAuthenticationResponse": "@{properties=; type=object}",
      "RsoMobileUiRsoAuthenticatorDisplayMode": "@{enum=System.Object[]; type=string}",
      "RsoMobileUiRsoAuthenticatorFacebookInput": "@{properties=; type=object}",
      "RsoMobileUiRsoAuthenticatorGameCenterInput": "@{properties=; type=object}",
      "RsoMobileUiRsoAuthenticatorGamepassResponseDetails": "@{properties=; type=object}",
      "RsoMobileUiRsoAuthenticatorGamepassStatus": "@{enum=System.Object[]; type=string}",
      "RsoMobileUiRsoAuthenticatorHealupResponseDetails": "@{properties=; type=object}",
      "RsoMobileUiRsoAuthenticatorMultifactorInput": "@{properties=; type=object}",
      "RsoMobileUiRsoAuthenticatorMultifactorResponseDetails": "@{properties=; type=object}",
      "RsoMobileUiRsoAuthenticatorOpenIdConnectInput": "@{properties=; type=object}",
      "RsoMobileUiRsoAuthenticatorResponseType": "@{enum=System.Object[]; type=string}",
      "RsoMobileUiRsoAuthenticatorRiotIdentityInput": "@{properties=; type=object}",
      "RsoMobileUiRsoAuthenticatorSignupLinkDetails": "@{properties=; type=object}",
      "RsoMobileUiRsoAuthenticatorSignupResponseDetails": "@{properties=; type=object}",
      "RsoMobileUiRsoAuthenticatorSuccessResponseDetails": "@{properties=; type=object}",
      "RsoMobileUiRsoAuthenticatorWebAuthenticationMethod": "@{enum=System.Object[]; type=string}",
      "RsoMobileUiRsoAuthenticatorWebAuthenticationUrlRequest": "@{properties=; type=object}",
      "RsoMobileUiStoredSessionState": "@{enum=System.Object[]; type=string}",
      "RsoMobileUiUIAccountPromotionFieldResponse": "@{properties=; type=object}",
      "RsoMobileUiUIAccountPromotionResponse": "@{properties=; type=object}",
      "RsoMobileUiUIAuthorization": "@{properties=; type=object}",
      "RsoMobileUiUIEligibilityCheckResponse": "@{properties=; type=object}",
      "RsoMobileUiUIMSDKQQPartnerCredentials": "@{properties=; type=object}",
      "RsoMobileUiUIMSDKWeChatPartnerCredentials": "@{properties=; type=object}",
      "RsoMobileUiUIPartnerCredentials": "@{properties=; type=object}",
      "RsoMobileUiUIWebViewIncomingCloseRequest": "@{properties=; type=object}",
      "RsoMobileUiUIWebViewIncomingError": "@{properties=; type=object}",
      "RsoMobileUiUIWebViewIncomingResourceRequest": "@{properties=; type=object}",
      "RsoMobileUiUIWebViewOutgoingResourceData": "@{properties=; type=object}",
      "RsoMobileUiUIWebViewOutgoingResourceNotification": "@{properties=; type=object}",
      "RsoMobileUiUIWebViewOutgoingResourceNotificationData": "@{properties=; type=object}",
      "RsoMobileUiUIWebViewOutgoingResourceRequest": "@{properties=; type=object}",
      "RsoMobileUiVngV1RegistrationUIStatus": "@{properties=; type=object}",
      "RsoMobileUiVngV1RegistrationUIStatusType": "@{enum=System.Object[]; type=string}",
      "RsoMobileUiVngV1StatusResponse": "@{properties=; type=object}",
      "RsoMobileUiWebViewAccountPromotionResponse": "@{properties=; type=object}",
      "SGPErrorMessage": "@{properties=; type=object}",
      "SGPErrorResponse": "@{properties=; type=object}",
      "ScdCookie": "@{properties=; type=object}",
      "ScdCookies": "@{properties=; type=object}",
      "ScdEntitlementsToken": "@{properties=; type=object}",
      "ScdProductSession": "@{properties=; type=object}",
      "ScdScdEnabled": "@{enum=System.Object[]; type=string}",
      "Session": "@{properties=; type=object}",
      "SocialFriend": "@{properties=; type=object}",
      "SocialFriendList": "@{properties=; type=object}",
      "SocialProductContext": "@{properties=; type=object}",
      "StructuredLogRequest": "@{properties=; type=object}",
      "TencentLauncherAccessToken": "@{properties=; type=object}",
      "TencentLauncherAuthError": "@{properties=; type=object}",
      "TencentLauncherAuthHint": "@{properties=; type=object}",
      "TencentLauncherAuthHintType": "@{enum=System.Object[]; type=string}",
      "TencentLauncherAuthenticationTypeEnum": "@{enum=System.Object[]; type=string}",
      "TencentLauncherAuthorization": "@{properties=; type=object}",
      "TencentLauncherAuthorizationCode": "@{properties=; type=object}",
      "TencentLauncherAuthorizationKey": "@{properties=; type=object}",
      "TencentLauncherAuthorizationKeyRequest": "@{properties=; type=object}",
      "TencentLauncherAuthorizationRequest": "@{properties=; type=object}",
      "TencentLauncherAuthorizationRequestTelemetryContext": "@{properties=; type=object}",
      "TencentLauncherAuthorizationResponse": "@{properties=; type=object}",
      "TencentLauncherAuthorizationResponseTelemetryContext": "@{properties=; type=object}",
      "TencentLauncherAuthorizationResponseType": "@{enum=System.Object[]; type=string}",
      "TencentLauncherAuthorizationUpdateRequest": "@{properties=; type=object}",
      "TencentLauncherClientAuthorizationState": "@{enum=System.Object[]; type=string}",
      "TencentLauncherClientAuthorizationTelemetryContext": "@{properties=; type=object}",
      "TencentLauncherConfigV3AMRValuesSupported": "@{properties=; type=object}",
      "TencentLauncherConfigV3AuthProgress": "@{enum=System.Object[]; type=string}",
      "TencentLauncherConfigV3OpenIdConfiguration": "@{properties=; type=object}",
      "TencentLauncherConfigV3PartnerAuthConfig": "@{properties=; type=object}",
      "TencentLauncherConfigV3ReadyState": "@{properties=; type=object}",
      "TencentLauncherDeviceId": "@{properties=; type=object}",
      "TencentLauncherEntitlementsToken": "@{properties=; type=object}",
      "TencentLauncherGameCenterAuthCredentials": "@{properties=; type=object}",
      "TencentLauncherGarenaPartnerCredentials": "@{properties=; type=object}",
      "TencentLauncherGoogleAuthCredentials": "@{properties=; type=object}",
      "TencentLauncherHttpCookie": "@{properties=; type=object}",
      "TencentLauncherHttpCookieJar": "@{properties=; type=object}",
      "TencentLauncherIdToken": "@{properties=; type=object}",
      "TencentLauncherImplicitAuthorization": "@{properties=; type=object}",
      "TencentLauncherImplicitGrantModeTelemetryContext": "@{properties=; type=object}",
      "TencentLauncherLoginAMR": "@{enum=System.Object[]; type=string}",
      "TencentLauncherLogoutReason": "@{enum=System.Object[]; type=string}",
      "TencentLauncherMSDKQQPartnerCredentials": "@{properties=; type=object}",
      "TencentLauncherMSDKV5PartnerCredentials": "@{properties=; type=object}",
      "TencentLauncherMSDKWeChatPartnerCredentials": "@{properties=; type=object}",
      "TencentLauncherMultifactorDetails": "@{properties=; type=object}",
      "TencentLauncherMultifactorMethod": "@{enum=System.Object[]; type=string}",
      "TencentLauncherPartnerCredentials": "@{properties=; type=object}",
      "TencentLauncherPartnerCredentialsV3": "@{properties=; type=object}",
      "TencentLauncherProductIntegrationAppUpdateStatus": "@{properties=; type=object}",
      "TencentLauncherProductSessionHeartbeatInfo": "@{properties=; type=object}",
      "TencentLauncherProductSessionProductPhase": "@{enum=System.Object[]; type=string}",
      "TencentLauncherPublicClientConfig": "@{properties=; type=object}",
      "TencentLauncherRSOAuthTelemetryContext": "@{properties=; type=object}",
      "TencentLauncherRSOAuthorizationSubmission": "@{properties=; type=object}",
      "TencentLauncherRSOAuthorizationTelemetryContext": "@{properties=; type=object}",
      "TencentLauncherRSOAuthorizationTrustLevel": "@{enum=System.Object[]; type=string}",
      "TencentLauncherRSOCredentialSubmission": "@{properties=; type=object}",
      "TencentLauncherRSOJWTConfig": "@{properties=; type=object}",
      "TencentLauncherRSOOTPSubmission": "@{properties=; type=object}",
      "TencentLauncherRSOPlayerCredentials": "@{properties=; type=object}",
      "TencentLauncherRSOReauthenticationSubmission": "@{properties=; type=object}",
      "TencentLauncherSessionCredentials": "@{properties=; type=object}",
      "TencentLauncherSessionLoginToken": "@{properties=; type=object}",
      "TencentLauncherSessionMultifactor": "@{properties=; type=object}",
      "TencentLauncherSessionReauthentication": "@{properties=; type=object}",
      "TencentLauncherSessionResponse": "@{properties=; type=object}",
      "TencentLauncherSessionResponseType": "@{enum=System.Object[]; type=string}",
      "TencentLauncherSessionSignup": "@{properties=; type=object}",
      "TencentLauncherStatusMessage": "@{properties=; type=object}",
      "TencentLauncherTelemetryEvent": "@{properties=; type=object}",
      "TencentLauncherTencentLauncherLoginArguments": "@{properties=; type=object}",
      "TencentLauncherTencentLauncherLoginInfo": "@{properties=; type=object}",
      "TencentLauncherTencentPartnerCredentials": "@{properties=; type=object}",
      "TencentLauncherTokenContext": "@{properties=; type=object}",
      "TencentLauncherUserInfo": "@{properties=; type=object}",
      "TencentLauncherWeGamePartnerCredentials": "@{properties=; type=object}",
      "VoiceChatAccessToken": "@{properties=; type=object}",
      "VoiceChatAudioPropertiesResource": "@{properties=; type=object}",
      "VoiceChatAuthorization": "@{properties=; type=object}",
      "VoiceChatCaptureDevicePermissionStatus": "@{enum=System.Object[]; type=string}",
      "VoiceChatDeviceResource": "@{properties=; type=object}",
      "VoiceChatGamepadPTTButton": "@{enum=System.Object[]; type=string}",
      "VoiceChatIdToken": "@{properties=; type=object}",
      "VoiceChatJoinSession": "@{properties=; type=object}",
      "VoiceChatKeyCombo": "@{properties=; type=object}",
      "VoiceChatLogoutReason": "@{enum=System.Object[]; type=string}",
      "VoiceChatPTTMode": "@{enum=System.Object[]; type=string}",
      "VoiceChatParticipantResource": "@{properties=; type=object}",
      "VoiceChatProductSession": "@{properties=; type=object}",
      "VoiceChatPushToTalkKey": "@{properties=; type=object}",
      "VoiceChatPushToTalkResource": "@{properties=; type=object}",
      "VoiceChatSessionResource": "@{properties=; type=object}",
      "VoiceChatSessionStatus": "@{enum=System.Object[]; type=string}",
      "VoiceChatSettingsResource": "@{properties=; type=object}",
      "VoiceChatStateResource": "@{properties=; type=object}",
      "VoiceChatUnnormalizedKeyCombo": "@{properties=; type=object}",
      "VoiceChatUnnormalizedPushToTalkKey": "@{properties=; type=object}",
      "VoiceChatUnnormalizedPushToTalkResource": "@{properties=; type=object}",
      "VoiceChatUpdateParticipantResource": "@{properties=; type=object}",
      "VoiceChatUpdateSessionResource": "@{properties=; type=object}",
      "VoiceChatUpdateSettingsResource": "@{properties=; type=object}",
      "VoiceChatVivoxCallStats": "@{properties=; type=object}",
      "VoiceChatVoiceChatHeartbeatMetrics": "@{properties=; type=object}",
      "VoiceChatVoiceChatHeartbeatMetrics_PerProductData": "@{properties=; type=object}",
      "VoiceChatVoiceChatHeartbeatMetrics_PerProviderData": "@{properties=; type=object}",
      "XboxAccountAuthorization": "@{properties=; type=object}",
      "XboxAccountAuthorizationParameters": "@{properties=; type=object}",
      "XboxAccountAuthorizationResponse": "@{properties=; type=object}",
      "XboxAccountErrorCode": "@{enum=System.Object[]; type=string}",
      "XboxAccountOnlinePlatform": "@{enum=System.Object[]; type=string}",
      "XboxAccountPlatformUser": "@{properties=; type=object}",
      "XboxAccountSelectUserParameters": "@{properties=; type=object}",
      "XboxAccountSignInOptions": "@{enum=System.Object[]; type=string}",
      "basicOperatingSystemInfo": "@{description=User Experience Settings Operating System Information; properties=; type=object}",
      "basicSystemInfo": "@{description=User Experience Settings System Information; properties=; type=object}"
    }
  },
  "info": {
    "title": "",
    "version": "1.0.0"
  },
  "openapi": "3.0.0",
  "paths": {
    "/Exit": {
      "post": "@{operationId=Exit; parameters=System.Object[]; responses=; summary=Closes the connection.; tags=System.Object[]}"
    },
    "/Help": {
      "post": "@{description=With no arguments, returns a list of all available functions and types along with a short description. If a function or type is specified, returns detailed information about it.; operationId=Help; parameters=System.Object[]; responses=; summary=Returns information on available functions and types; tags=System.Object[]}"
    },
    "/Subscribe": {
      "post": "@{operationId=Subscribe; parameters=System.Object[]; responses=; summary=Subscribes to a given event; tags=System.Object[]}"
    },
    "/Unsubscribe": {
      "post": "@{operationId=Unsubscribe; parameters=System.Object[]; responses=; summary=Unsubscribes from a given event; tags=System.Object[]}"
    },
    "/accounts-security/v1/access": {
      "get": "@{operationId=GetAccountsSecurityV1Access; parameters=System.Object[]; responses=; summary=Returns the action need to be done and outbound URL for it; tags=System.Object[]}"
    },
    "/age-restriction/v1/age-restriction/products/{productId}": {
      "get": "@{operationId=GetAgeRestrictionV1AgeRestrictionProductsByProductId; parameters=System.Object[]; responses=; summary=Returns the age-restriction state for the productId; tags=System.Object[]}"
    },
    "/age-restriction/v1/debug/age-restriction/products/{productId}": {
      "put": "@{operationId=PutAgeRestrictionV1DebugAgeRestrictionProductsByProductId; parameters=System.Object[]; requestBody=; responses=; summary=DEBUG: Sets the age-restriction state for the productId; tags=System.Object[]}"
    },
    "/anti-addiction/v1/products/{productId}/anti-addiction-state": {
      "post": "@{operationId=PostAntiAddictionV1ProductsByProductIdAntiAddictionState; parameters=System.Object[]; requestBody=; responses=; summary=Test API for triggering anti-addiction state for testing purposes; tags=System.Object[]}"
    },
    "/anti-addiction/v1/products/{productId}/policies/{policyType}/anti-addiction-state": {
      "get": "@{operationId=GetAntiAddictionV1ProductsByProductIdPoliciesByPolicyTypeAntiAddictionState; parameters=System.Object[]; responses=; summary=Returns an anti-addiction state by productId and policy; tags=System.Object[]}"
    },
    "/app-command/submit": {
      "put": "@{operationId=PutAppCommandSubmit; parameters=System.Object[]; requestBody=; responses=; summary=Used to coerce an application to invoke a registered command.; tags=System.Object[]}"
    },
    "/app-command/v1/auth/status": {
      "delete": "@{operationId=DeleteAppCommandV1AuthStatus; parameters=System.Object[]; responses=; summary=Deletes the stored authentication status; tags=System.Object[]}",
      "get": "@{operationId=GetAppCommandV1AuthStatus; parameters=System.Object[]; responses=; summary=Returns the authentication status; tags=System.Object[]}"
    },
    "/app-command/v1/focus-request": {
      "delete": "@{description=Delete the current app focus request, if one exists; operationId=DeleteAppCommandV1FocusRequest; parameters=System.Object[]; responses=; summary=Delete the current app focus request, if one exists; tags=System.Object[]}",
      "get": "@{description=Get the current app focus request, if one exists; operationId=GetAppCommandV1FocusRequest; parameters=System.Object[]; responses=; summary=Get the current app focus request, if one exists; tags=System.Object[]}"
    },
    "/apple-account/v1/authorization": {
      "delete": "@{operationId=DeleteAppleAccountV1Authorization; parameters=System.Object[]; responses=; summary=Delete authorization status for Apple; tags=System.Object[]}",
      "get": "@{operationId=GetAppleAccountV1Authorization; parameters=System.Object[]; responses=; summary=Retrieve authorization from the Sign In with Apple Account; tags=System.Object[]}",
      "post": "@{operationId=PostAppleAccountV1Authorization; parameters=System.Object[]; requestBody=; responses=; summary=Create authorization from the Sign In with Apple Account; tags=System.Object[]}"
    },
    "/chat/v1/debug": {
      "get": "@{operationId=GetChatV1Debug; parameters=System.Object[]; responses=; summary=get debug config; tags=System.Object[]}",
      "post": "@{operationId=PostChatV1Debug; parameters=System.Object[]; requestBody=; responses=; summary=set debug config; tags=System.Object[]}"
    },
    "/chat/v1/debug/finalize/initialize": {
      "post": "@{operationId=PostChatV1DebugFinalizeInitialize; parameters=System.Object[]; responses=; summary=debug finalize and initialize; tags=System.Object[]}"
    },
    "/chat/v1/device-settings": {
      "get": "@{operationId=GetChatV1DeviceSettings; parameters=System.Object[]; responses=; summary=Get the current values of the device settings related to chat.; tags=System.Object[]}",
      "put": "@{operationId=PutChatV1DeviceSettings; parameters=System.Object[]; requestBody=; responses=; summary=Update the device settings related to chat; tags=System.Object[]}"
    },
    "/chat/v1/session": {
      "get": "@{description=Chat notifies updated events on these endpoints, typically in this order:\n\n* `/chat/v1/session`    ->  { state: \"connecting\", pid: \"\", name: \"\", loaded: false }    //chat is now connecting (empty pid, name)\n* `/chat/v1/session`    ->  { state: \"connected\", pid: \"sum3530124@pvp.net\", name: \"Scarlet Witch\", loaded: false }    //chat is now connected initial data for showing the friends list in the UX is not loaded\n* `/chat/v#/presences`      //for all your friend presences (no way around this currently)\n* `/chat/v#/presences`      //for yourself\n* `/chat/v#/groups`         //batch of every group in your friends list\n* `/chat/v#/friends`        //batch\n* `/chat/v#/blocked`        //batch\n* `/chat/v#/conversations`  //recent conversations\n* `/chat/v#/messages`\n* `/chat/v#/participants`\n* `/chat/v1/session`     -> { state: \"connected\", pid: \"sum3530124@pvp.net\", name: \"Scarlet Witch\", loaded: true }    //chat is now connected and has loaded the initial data to show in the UX\n; operationId=GetChatV1Session; parameters=System.Object[]; responses=; summary=get chat session state; tags=System.Object[]}"
    },
    "/chat/v1/session/connect": {
      "post": "@{operationId=PostChatV1SessionConnect; parameters=System.Object[]; responses=; summary=force to chat to connect & allow reconnects; tags=System.Object[]}"
    },
    "/chat/v1/session/debug/terminate/{product}": {
      "post": "@{operationId=PostChatV1SessionDebugTerminateByProduct; parameters=System.Object[]; responses=; summary=Simulate termination of a product to the chat plugin; tags=System.Object[]}"
    },
    "/chat/v1/session/disconnect": {
      "post": "@{operationId=PostChatV1SessionDisconnect; parameters=System.Object[]; responses=; summary=force chat to disconnect & disallow reconnects; tags=System.Object[]}"
    },
    "/chat/v1/session/platform": {
      "post": "@{operationId=PostChatV1SessionPlatform; parameters=System.Object[]; requestBody=; responses=; summary=Update the chat session's League of Legends platform id; tags=System.Object[]}"
    },
    "/chat/v1/settings": {
      "get": "@{description=**Response:**\n\n```\n{\n  \"bounceDockIconEnabled\": [bounceDockIconEnabled], // If the dock icon will bounce when receiving a new message, game invite, etc\n  \"chat-status-message\": \"[status_message]\",      // The player's status message. This gets updated within chat when the \"status\" of the player is changed\n  \"chatFilterDisabled\": [chatFilterDisabled],       // If bad language is filtered in chat messages\n  \"chatGroupMobile\": [chatGroupMobile],             // If mobile friends are grouped in their own \"MOBILE\" folder\n  \"chatGroupOffline\": [chatGroupOffline],           // If offline friends are grouped in their own \"OFFLINE\" folder\n  \"chatWindow\": {                                   // The chat window settings\n    \"detached\": [detached],                         // If the chat window is docked or popped out\n    \"height\": [height],                             // The height of the chat window\n    \"left\": [left],                                 // The location of the left side of the chat window\n    \"top\": [top],                                   // The location of the top side of the chat window\n    \"width\": [width]                                // The width of the chat window\n  },\n  \"closed-conversations\": {                         // Which conversations have been closed. Used within chat to determine which recent convos to remove on startup. This gets updated\n                                                      // within chat when a conversation is deleted\n    \"[convo_id]\": [closed_timestamp],\n    ...\n  },\n  \"friendRequestToastsDisabled\": [friendRequestToastsDisabled], // If a toast appears when you receive a friend request\n  \"linkClickWarningEnabled\": [linkClickWarningEnabled],         // If a link warning will appear when clicking on links\n  \"messageNotificationsEnabled\": [messageNotificationsEnabled], // If a native toast or regular toast appears when receiving a message\n  \"moreUnreadsEnabled\": [moreUnreadsEnabled],                   // If a \"more unreads\" indicator appears for unread items not currently in scroll view\n  \"muted-conversations\": {                                      // A list of 1:1 muted conversations. This gets updated within chat when the \"muted\" state of a conversation is changed\n    \"[convo_id]\": 1\n  },                       \n  \"recentlyPlayedOpen\": [recentlyPlayedOpen],                  // If the \"recently played\" folder is open\n  \"roster-group-collapsed\": {                                  // A list of each folder's collapsed state. This gets updated within chat when the \"collapsed\" state of a group is changed\n    \"[group_folder_name]\": [collapsed],\n    ...\n  },\n  \"showWhenTypingEnabled\": [showWhenTypingEnabled],            // If an indicator is shown to other players when writing a message to them\n  \"sortBy\": \"[sort_type]\"                                    // How to sort friends in the friends list (ex. by \"availability\" vs \"alphabetical\")\n}\n```\n\nMost of these chat settings are straightforward and only require an update when a player enables or disables a setting. For example, when they check or uncheck a box for the setting.\n; operationId=GetChatV1Settings; parameters=System.Object[]; responses=; summary=Get the account settings related to chat; tags=System.Object[]}",
      "patch": "@{operationId=PatchChatV1Settings; parameters=System.Object[]; requestBody=; responses=; summary=Update the account settings related to chat, partial update using only given fields; tags=System.Object[]}",
      "put": "@{operationId=PutChatV1Settings; parameters=System.Object[]; requestBody=; responses=; summary=Update the account settings related to chat, complete overwrite; tags=System.Object[]}"
    },
    "/chat/v1/social": {
      "post": "@{operationId=PostChatV1Social; parameters=System.Object[]; requestBody=; responses=; summary=Get game/product social data for building the friend list UI; tags=System.Object[]}"
    },
    "/chat/v2/me": {
      "delete": "@{description=Endpoint deleted August 2021; Please use '/chat/v3/me'.; operationId=DeleteChatV2Me; parameters=System.Object[]; requestBody=; responses=; summary=Delete multi-game presence of a specific product; tags=System.Object[]}",
      "put": "@{description=Endpoint deleted August 2021; Please use '/chat/v3/me'.; operationId=PutChatV2Me; parameters=System.Object[]; requestBody=; responses=; summary=Put/update a multi-game presence for a specific product. This implicitly sets the product's chat session state to `active`.; tags=System.Object[]}"
    },
    "/chat/v2/session/connect": {
      "post": "@{operationId=PostChatV2SessionConnect; parameters=System.Object[]; responses=; summary=force to chat to connect & allow reconnects; tags=System.Object[]}"
    },
    "/chat/v2/session/debug/terminate/{product}": {
      "post": "@{operationId=PostChatV2SessionDebugTerminateByProduct; parameters=System.Object[]; responses=; summary=Simulate termination of a product to the chat plugin; tags=System.Object[]}"
    },
    "/chat/v2/session/disconnect": {
      "post": "@{operationId=PostChatV2SessionDisconnect; parameters=System.Object[]; responses=; summary=force chat to disconnect & disallow reconnects; tags=System.Object[]}"
    },
    "/chat/v2/session/platform": {
      "post": "@{operationId=PostChatV2SessionPlatform; parameters=System.Object[]; requestBody=; responses=; summary=Update the chat session's League of Legends platform id; tags=System.Object[]}"
    },
    "/chat/v2/session/state": {
      "get": "@{operationId=GetChatV2SessionState; parameters=System.Object[]; responses=; summary=get chat product session state; tags=System.Object[]}",
      "put": "@{operationId=PutChatV2SessionState; parameters=System.Object[]; requestBody=; responses=; summary=edit session state for specific product; tags=System.Object[]}"
    },
    "/chat/v3/blocked": {
      "delete": "@{description=Endpoint deleted August 2021; Please use '/chat/v4/blocked'.; operationId=DeleteChatV3Blocked; parameters=System.Object[]; requestBody=; responses=; summary=Unblock a player; tags=System.Object[]}",
      "get": "@{description=**Response**:\n\n```\n{\n  \"blocked\": [\n    {\n      \"action\": \"[action]\",         // \"deny\" for blocked\n      \"name\": \"[name]\",             // player name\n      \"order\": \"[order],            // order in block list\n      \"pid\": \"[pid]\"                // player id\n    }\n  ]\n}\n```\n\n\nEndpoint deleted August 2021; Please use '/chat/v4/blocked'.; operationId=GetChatV3Blocked; parameters=System.Object[]; responses=; summary=Get blocked players; tags=System.Object[]}",
      "post": "@{description=Endpoint deleted August 2021; Please use '/chat/v4/blocked'.; operationId=PostChatV3Blocked; parameters=System.Object[]; requestBody=; responses=; summary=Block a player; tags=System.Object[]}"
    },
    "/chat/v3/errors": {
      "delete": "@{operationId=DeleteChatV3Errors; parameters=System.Object[]; requestBody=; responses=; summary=Delete a specific error; tags=System.Object[]}",
      "get": "@{description=**Response:** list of error objects (could have zero or more entries):\n\n```\n{ \"errors\": [\n              { \"class\":   \"[class]\",        //source of error (muc, presence, friend, etc)\n                \"subtype\": \"[subtype]\",      //extra detail; usually most descriptive - along with text field\n                \"type\":    \"[type]\",         //detail - usually action based on error??? (cancel, ignore, etc)\n                \"code\":    \"[code]\",         //numeric error code\n                \"text\":    \"[description]\",  //if available; usually most descriptive (when provided) - along with subtype field\n                \"[key]\":   \"[value]\",        //extra available data, such as...\n                \"pid\":     \"[{pid}]\",        //player id if available\n                \"cid\":     \"[{cid}]\",        //conversation id if available\n                \"id\":      \"[error id]\",     //unique among all errors\n                \"ts\":      \"[timestamp]\"     //integer value: milliseconds UTC\n              },\n              { \"class\":   \"muc\",           //EXAMPLE ERROR OF FAILURE TO JOIN MUC\n                \"subtype\": \"not-allowed\",\n                \"type\":    \"cancel\",\n                \"text\":    \"\",\n                \"code\":    \"405\",\n                \"pid\":     \"sum3530124@pvp.net\",\n                \"cid\":     \"2785eb60-495f-4037-9fa0-98d70bac1b00@pgc.pvp.net\",\n                \"id\":      \"e_1491935420384\"\n                \"ts\":      \"1491935419627\"\n              },\n              { \"class\":   \"auth\",          //EXAMPLE ERROR OF FAILURE TO LOGIN TO CHAT\n                \"id\":      \"e_auth\",\n                \"code\":    \"401\",\n                \"type\":    \"temporary-auth-failure\"\n                \"ts\":      \"1497989043000\",\n                \"cid\":     \"\",\n                \"pid\":     \"\",\n                \"subtype\": \"\",\n                \"text\":    \"\",\n              },\n              ...\n            ]\n}\n```\n\n**Notes:**\n\n* Errors for group chat (multi-user chat: MUC) will have \"class\":\"muc\" and a \"cuuid\" field\n* Usually the \"subtype\" and the \"text\" fields are most descriptive, if they exist\n; operationId=GetChatV3Errors; parameters=System.Object[]; responses=; summary=Get a specific error; tags=System.Object[]}"
    },
    "/chat/v3/friendrequests": {
      "delete": "@{description=Endpoint deleted July 2021; Please use '/chat/v6/friendrequests'.; operationId=DeleteChatV3Friendrequests; parameters=System.Object[]; requestBody=; responses=; summary=Remove or decline friend request; tags=System.Object[]}",
      "get": "@{description=**Response:** named requests root object: a flat list of friend request property groups with 'pid' and 'name' inside (could have zero or more entries):\n\n```\n{\n  \"requests\": [\n    {\n      \"name\":         \"[friend name]\",\n      \"note\":         \"[friend note]\",     // Can be set to contain information about the friend request. (ex. recofriender saves the player name from social media here)\n      \"pid\":          \"[friend pid]\",\n      \"subscription\": \"pending_out\"        //either \"pending_out\" or \"pending_in\" (sent or received request)\n    }\n  ]\n}\n```\n\n\nEndpoint deleted July 2021; Please use '/chat/v6/friendrequests'.; operationId=GetChatV3Friendrequests; parameters=System.Object[]; responses=; summary=Get friend requests; tags=System.Object[]}",
      "post": "@{description=Endpoint deleted July 2021; Please use '/chat/v6/friendrequests'.; operationId=PostChatV3Friendrequests; parameters=System.Object[]; requestBody=; responses=; summary=Add friend request / invite friend; tags=System.Object[]}"
    },
    "/chat/v3/friends": {
      "delete": "@{description=Endpoint deleted August 2021; Please use '/chat/v4/friends'.; operationId=DeleteChatV3Friends; parameters=System.Object[]; requestBody=; responses=; summary=Remove friend; tags=System.Object[]}",
      "get": "@{description=**Response:** named friends root object: a flat list of friend property groups with 'pid' and 'name' inside (could have zero or more entries):```\n{\n  \"friends\": [\n    {\n      \"displayGroup\": \"[display group name]\",   // The current display group of this friend. This will either be the regular group or a meta group (ex. \"MOBILE\", \"OFFLINE\")\n      \"group\":        \"[group name]\",           // The group this friend is a part of\n      \"name\":         \"[friend name]\",\n      \"note\":         \"[friend note]\",\n      \"pid\":          \"[friend pid]\",\n      \"priority\":     \"[group priority value]\"\n    }\n    ...\n  ]\n}\n```\n\n\nEndpoint deleted August 2021; Please use '/chat/v4/friends'.; operationId=GetChatV3Friends; parameters=System.Object[]; responses=; summary=Get friends; tags=System.Object[]}",
      "put": "@{description=**Data:**\n\n```\n{\n  \"puuid\":  \"[puuid]\",           //specify player to update\n  \"pid\":    \"[pid]\",             //specify player to update, JID format, if not using puuid\n  \"group\":  \"[new group name]\",  //if moving friend to different group, specify it here\n  \"note\":   \"[new friend note]\"  //if changing friend note, specify it here\n}\n```\n\n\nEndpoint deleted August 2021; Please use '/chat/v4/friends'.; operationId=PutChatV3Friends; parameters=System.Object[]; requestBody=; responses=; summary=Update a friend; tags=System.Object[]}"
    },
    "/chat/v3/groups": {
      "delete": "@{description=Endpoint deleted August 2021; Please use '/chat/v4/groups'.; operationId=DeleteChatV3Groups; parameters=System.Object[]; requestBody=; responses=; summary=Delete a friend group; tags=System.Object[]}",
      "get": "@{description=**Response:** named groups root object: an ordered list of friend groups. First is highest displayed.  Could have one or more entries, always has a default group:\n\n```\n{\n  \"groups\": [\n    {\n      \"collapsed\":    [collapsed],                  // If the group is open or closed\n      \"isMetaGroup\":  [isMetaGroup],                // If the group is a meta group (ex. \"MOBILE\", \"OFFLINE\")\n      \"name\":        \"[group name]\"\n    }\n    ...\n  ]\n}\n```\n\n**Mobile and Offline Groups**\n\nThe mobile and offline groups will appear in the list of groups if the \"chatGroupMobile\" or \"chatGroupOffline\" settings are set to true. They will appear like this:\n\n```\n{\n  \"groups\": [\n    ...\n    {\n      \"collapsed\": [collapsed],\n      \"isMetaGroup\": true,\n      \"name\": \"MOBILE\"\n    },\n    ...\n    {\n      \"collapsed\": [collapsed],\n      \"isMetaGroup\": true,\n      \"name\": \"OFFLINE\"\n    }\n    ...\n  ]\n}\n```\n\nFriends who are either in the \"offline\" or \"mobile\" state will automatically be given the corresponding \"displayGroup\" (ex. either \"OFFLINE\" or \"MOBILE\") in place of their regular group name. If the settings are turned off the groups will be removed and the friends' \"displayGroup\"s will be set back to their regular group names.\n\n\nEndpoint deleted August 2021; Please use '/chat/v4/groups/order'.; operationId=GetChatV3Groups; parameters=System.Object[]; responses=; summary=Get groups; tags=System.Object[]}",
      "post": "@{description=**Data:**\n\n```\n{\n\"name\":  \"[new group name]\"\n}\n```\nRequirements to create a friend group:\n\n1. name can't be empty --> error 400\n2. name can't happen to be the default group \"**Default\" --> error 403\n3. name can't happen to be a meta group, neither \"OFFLINE\" nor \"MOBILE\" --> error 403\n4. name can't already be the name of another group --> error 409\n\n\nEndpoint deleted August 2021; Please use '/chat/v4/groups'.; operationId=PostChatV3Groups; parameters=System.Object[]; requestBody=; responses=; summary=Create a friend group; tags=System.Object[]}",
      "put": "@{description=**Data:**\n\n```\n{\n\"collapsed\": [new collapsed]   //if collapsing or uncollapsing, specify it here\n\"name\":      \"[current name]\", //current name of group\n\"new_name\":  \"[new name]\",     //same name, or new name if renaming\n}\n```\n\n\nEndpoint deleted August 2021; Please use '/chat/v4/groups'.; operationId=PutChatV3Groups; parameters=System.Object[]; requestBody=; responses=; summary=Update a friend group; tags=System.Object[]}"
    },
    "/chat/v3/groups/order": {
      "put": "@{description=Endpoint deleted August 2021; Please use '/chat/v4/groups/order'.; operationId=PutChatV3GroupsOrder; parameters=System.Object[]; requestBody=; responses=; summary=Order the friend groups; tags=System.Object[]}"
    },
    "/chat/v3/me": {
      "delete": "@{operationId=DeleteChatV3Me; parameters=System.Object[]; requestBody=; responses=; summary=Delete multi-game presence of a specific product; tags=System.Object[]}",
      "put": "@{operationId=PutChatV3Me; parameters=System.Object[]; requestBody=; responses=; summary=Put/update a multi-game presence for a specific product. This implicitly sets the product's chat session state to `active`.; tags=System.Object[]}"
    },
    "/chat/v3/me/debug-jwt": {
      "post": "@{operationId=PostChatV3MeDebugJwt; parameters=System.Object[]; requestBody=; responses=; summary=Simulate updating a game presence with jwt (server authoritative info); tags=System.Object[]}"
    },
    "/chat/v4/blocked": {
      "delete": "@{operationId=DeleteChatV4Blocked; parameters=System.Object[]; requestBody=; responses=; summary=Unblock a player; tags=System.Object[]}",
      "get": "@{description=**Response**:\n\n```\n{\n  \"blocked\": [\n    {\n      \"action\": \"[action]\",         // \"deny\" for blocked\n      \"name\": \"[name]\",             // player name\n      \"order\": \"[order],            // order in block list\n      \"pid\": \"[pid]\"                // player id\n    }\n  ]\n}\n```\n; operationId=GetChatV4Blocked; parameters=System.Object[]; responses=; summary=Get blocked players; tags=System.Object[]}",
      "post": "@{operationId=PostChatV4Blocked; parameters=System.Object[]; requestBody=; responses=; summary=Block a player; tags=System.Object[]}"
    },
    "/chat/v4/conversations/{cid}/participants": {
      "get": "@{description=**Response:** named participants root object: a flat list of conversation participant property groups (could have zero or more entries):\n\n```\n{ \"participants\": [\n                      { \"cid\":  \"[cid]\",\n                        \"pid\":  \"[pid]\",\n                        \"name\": \"[name]\"\n                      },\n                      { \"cid\":  \"[cid]\",\n                        \"pid\":  \"[pid]\",\n                        \"name\": \"[name]\"\n                      },\n                        ...\n                      ]}\n```\n; operationId=GetChatV4ConversationsByCidParticipants; parameters=System.Object[]; responses=; summary=Get the participants in a conversation; tags=System.Object[]}"
    },
    "/chat/v4/conversations/{cid}/participants/{pid}": {
      "get": "@{description=**Response:** named participants root object: a flat list of conversation participant property groups (could have zero or more entries):\n\n```\n{ \"participants\": [\n                      { \"cid\":  \"[cid]\",\n                        \"pid\":  \"[pid]\",\n                        \"name\": \"[name]\"\n                      },\n                      { \"cid\":  \"[cid]\",\n                        \"pid\":  \"[pid]\",\n                        \"name\": \"[name]\"\n                      },\n                        ...\n                      ]}\n```\n; operationId=GetChatV4ConversationsByCidParticipantsByPid; parameters=System.Object[]; responses=; summary=Get specific participant in a conversation; tags=System.Object[]}"
    },
    "/chat/v4/friendrequests": {
      "delete": "@{description=Endpoint deleted August 2023; Please use '/chat/v6/friendrequests'.; operationId=DeleteChatV4Friendrequests; parameters=System.Object[]; requestBody=; responses=; summary=Remove or decline friend request; tags=System.Object[]}",
      "get": "@{description=**Response:** named requests root object: a flat list of friend request property groups with 'pid' and 'name' inside (could have zero or more entries):\n\n```\n{\n  \"requests\": [\n    {\n      \"name\":         \"[friend name]\",\n      \"note\":         \"[friend note]\",     // Can be set to contain information about the friend request. (ex. recofriender saves the player name from social media here)\n      \"pid\":          \"[friend pid]\",\n      \"subscription\": \"pending_out\"        //either \"pending_out\" or \"pending_in\" (sent or received request)\n    }\n  ]\n}\n```\n\n\nEndpoint deleted August 2023; Please use '/chat/v6/friendrequests'.; operationId=GetChatV4Friendrequests; parameters=System.Object[]; responses=; summary=Get friend requests; tags=System.Object[]}",
      "post": "@{description=Endpoint deleted August 2023; Please use '/chat/v6/friendrequests'.; operationId=PostChatV4Friendrequests; parameters=System.Object[]; requestBody=; responses=; summary=Add friend request / invite friend; tags=System.Object[]}"
    },
    "/chat/v4/friends": {
      "delete": "@{operationId=DeleteChatV4Friends; parameters=System.Object[]; requestBody=; responses=; summary=Remove friend; tags=System.Object[]}",
      "get": "@{description=**Response:** named friends root object: a flat list of friend property groups with 'pid' and 'name' inside (could have zero or more entries):```\n{\n  \"friends\": [\n    {\n      \"displayGroup\":   \"[display group name]\",   // The current display group of this friend. This will either be the regular group or a meta group (ex. \"MOBILE\", \"OFFLINE\")\n      \"group\":          \"[group name]\",           // The group this friend is a part of\n      \"name\":           \"[friend name]\",\n      \"note\":           \"[friend note]\",\n      \"pid\":            \"[friend pid]\",\n      \"priority\":       \"[group priority value]\"\n      \"last_online_ts\": \"[last online timestamp]\"\n    }\n    ...\n  ]\n}\n```\n; operationId=GetChatV4Friends; parameters=System.Object[]; responses=; summary=Get friends; tags=System.Object[]}",
      "put": "@{description=**Data:**\n\n```\n{\n  \"puuid\":  \"[puuid]\",           //specify player to update\n  \"pid\":    \"[pid]\",             //specify player to update, JID format, if not using puuid\n  \"group\":  \"[new group name]\",  //if moving friend to different group, specify it here\n  \"note\":   \"[new friend note]\"  //if changing friend note, specify it here\n}\n```\n; operationId=PutChatV4Friends; parameters=System.Object[]; requestBody=; responses=; summary=Update a friend; tags=System.Object[]}"
    },
    "/chat/v4/groups": {
      "delete": "@{operationId=DeleteChatV4Groups; parameters=System.Object[]; requestBody=; responses=; summary=Delete a friend group; tags=System.Object[]}",
      "get": "@{description=**Response:** named groups root object: an ordered list of friend groups. First is highest displayed.  Could have one or more entries, always has a default group:\n\n```\n{\n  \"groups\": [\n    {\n      \"collapsed\":    [collapsed],                  // If the group is open or closed\n      \"isMetaGroup\":  [isMetaGroup],                // If the group is a meta group (ex. \"MOBILE\", \"OFFLINE\")\n      \"name\":        \"[group name]\"\n    }\n    ...\n  ]\n}\n```\n\n**Mobile and Offline Groups**\n\nThe mobile and offline groups will appear in the list of groups if the \"chatGroupMobile\" or \"chatGroupOffline\" settings are set to true. They will appear like this:\n\n```\n{\n  \"groups\": [\n    ...\n    {\n      \"collapsed\": [collapsed],\n      \"isMetaGroup\": true,\n      \"name\": \"MOBILE\"\n    },\n    ...\n    {\n      \"collapsed\": [collapsed],\n      \"isMetaGroup\": true,\n      \"name\": \"OFFLINE\"\n    }\n    ...\n  ]\n}\n```\n\nFriends who are either in the \"offline\" or \"mobile\" state will automatically be given the corresponding \"displayGroup\" (ex. either \"OFFLINE\" or \"MOBILE\") in place of their regular group name. If the settings are turned off the groups will be removed and the friends' \"displayGroup\"s will be set back to their regular group names.\n; operationId=GetChatV4Groups; parameters=System.Object[]; responses=; summary=Get groups; tags=System.Object[]}",
      "post": "@{description=**Data:**\n\n```\n{\n\"name\":  \"[new group name]\"\n}\n```\nRequirements to create a friend group:\n\n1. name can't be empty --> error 400\n2. name can't happen to be the default group \"**Default\" --> error 403\n3. name can't happen to be a meta group, neither \"OFFLINE\" nor \"MOBILE\" --> error 403\n4. name can't already be the name of another group --> error 409\n; operationId=PostChatV4Groups; parameters=System.Object[]; requestBody=; responses=; summary=Create a friend group; tags=System.Object[]}",
      "put": "@{description=**Data:**\n\n```\n{\n\"collapsed\": [new collapsed]   //if collapsing or uncollapsing, specify it here\n\"name\":      \"[current name]\", //current name of group\n\"new_name\":  \"[new name]\",     //same name, or new name if renaming\n}\n```\n; operationId=PutChatV4Groups; parameters=System.Object[]; requestBody=; responses=; summary=Update a friend group; tags=System.Object[]}"
    },
    "/chat/v4/groups/order": {
      "put": "@{operationId=PutChatV4GroupsOrder; parameters=System.Object[]; requestBody=; responses=; summary=Order the friend groups; tags=System.Object[]}"
    },
    "/chat/v4/presences": {
      "get": "@{operationId=GetChatV4Presences; parameters=System.Object[]; responses=; summary=Get multi-game presences; tags=System.Object[]}"
    },
    "/chat/v5/conversations": {
      "delete": "@{description=Endpoint deleted July 2021; Please use '/chat/v7/conversations'.; operationId=DeleteChatV5Conversations; parameters=System.Object[]; requestBody=; responses=; summary=Delete or leave a conversation; tags=System.Object[]}",
      "get": "@{description=Endpoint deleted July 2021; Please use '/chat/v7/conversations' or '/chat/v7/conversations/{domain}'.; operationId=GetChatV5Conversations; parameters=System.Object[]; responses=; summary=Get a conversation by cid; tags=System.Object[]}",
      "post": "@{description=Endpoint deleted July 2021; Please use '/chat/v7/conversations'. It supports federated chat better.; operationId=PostChatV5Conversations; parameters=System.Object[]; requestBody=; responses=; summary=Create or join a conversation; tags=System.Object[]}",
      "put": "@{description=Endpoint deleted July 2021; Please use '/chat/v7/conversations'.; operationId=PutChatV5Conversations; parameters=System.Object[]; requestBody=; responses=; summary=Edit conversation; tags=System.Object[]}"
    },
    "/chat/v5/friendrequests": {
      "delete": "@{description=Endpoint deleted August 2021; Please use '/chat/v6/friendrequests'.; operationId=DeleteChatV5Friendrequests; parameters=System.Object[]; requestBody=; responses=; summary=Remove or decline friend request; tags=System.Object[]}",
      "get": "@{description=**Response:** named requests root object: a flat list of friend request property groups with 'puuid' and GnT info inside (could have zero or more entries in list):\n\n```\n{\n  \"requests\": [\n    {\n      \"gameName\":     \"[friend gameName]\",\n      \"tagLine\":      \"[friend tagLine]\",\n      \"note\":         \"[friend note]\",     // Can be set to contain information about the friend request. (ex. recofriender saves the player name from social media here)\n      \"puuid\":        \"[friend puuid]\",\n      \"subscription\": \"pending_out\"        //either \"pending_out\" or \"pending_in\" (sent or received request)\n    }\n  ]\n}\n```\n\n\nEndpoint deleted August 2021; Please use '/chat/v6/friendrequests'.; operationId=GetChatV5Friendrequests; parameters=System.Object[]; responses=; summary=Get friend requests; tags=System.Object[]}",
      "post": "@{description=Endpoint deleted August 2021; Please use '/chat/v6/friendrequests'.; operationId=PostChatV5Friendrequests; parameters=System.Object[]; requestBody=; responses=; summary=Add friend request / invite friend; tags=System.Object[]}"
    },
    "/chat/v5/messages": {
      "delete": "@{description=Endpoint deleted August 2021; Please use 'chat/v6/messages'.; operationId=DeleteChatV5Messages; parameters=System.Object[]; requestBody=; responses=; summary=Clear conversation message history; tags=System.Object[]}",
      "get": "@{description=**Response**: named messages root object: a flat list of message property groups (could have zero or more entries):\n\n```\n{ \"messages\": [\n                  { \"body\": \"[message]\",            //actual text of this message\n                    \"pid\":  \"[{pid}]\",              //pid of sender\n                    \"name\": \"[name]\",               //name of sender\n                    \"ts\":   \"[timestamp]\",          //integer value: milliseconds UTC\n                    \"cid\":  \"[cid]\",                //conversation id\n                    \"id\":   \"[message id]\",         //unique key within the conversation - for storage\n                    \"read\": true/false,               //whether message has been marked as read or not\n                    \"type\": \"[chat, groupchat, dm]\" //how the message was sent: from friend, from group chat, or a direct message from player in a group chat\n                  },\n                  { \"body\": \"[message]\",\n                    \"pid\":  \"[{pid}]\",\n                    \"ts\":   \"[timestamp]\",\n                    \"cid\":  \"[cid]\",\n                    \"id\":   \"[message id]\",\n                    \"read\": true/false,\n                    \"type\": \"[chat, groupchat, dm]\"\n                  },\n                  ...\n                ]\n}\n```\n\n**NOTE**: messages are sorted by time-stamp, earliest first, latest last\n\n\nEndpoint deleted August 2021; Please use 'chat/v6/messages'.; operationId=GetChatV5Messages; parameters=System.Object[]; responses=; summary=Get conversation messages; tags=System.Object[]}",
      "post": "@{description=**Sending A Message**\nA conversation id (cid) can be a MUC cid or for peer to peer messages, a player id (pid) can be used as a cid.\n\n```\nPOST /chat/v3/conversations/{cid}/messages      //cid is the conversation id passed as a path argument\n```\nData:\n\n```\n{\n  \"message\": \"[message]\" //the text to send\n  \"type\"   : \"[chat, groupchat, dm]\"\n}\n```\nAdditional notes:\n\n* type - used to specify the type of message (inferred from conversation type if left blank)\n  * chat: for P2P messages with friends\n  * groupchat: for group messages within a group chat\n  * dm: for Direct Messages with somebody in a group chat with you, or with a friend\n\nAs players post messages to a conversation, chat notifies on REST in this order:\n\n* /chat/v3/conversations/\n  * with updated data:  \"unread_count\" and the last message ID in the conversation\n* /chat/v3/conversations/{cid}/messages\n  * a list of new messages for the conversation (earliest first, latest last, but many times just one new message)\n\n**Direct Messages (private messages within a group chat)**\n\nPrivate messages between players that are not friends are possible, and this messaging is always tied to a JWT authenticated group chat (MUC) that both players are a part of. The MUC they are a part of has its own conversation-id (cid) and the private conversation between participants includes that cid in its derived cid.  For example if players \"Brad\" and \"Sue\" are both in MUC \"lobby01@league.pvp.net\" and Brad sends a direct message to Sue, then his client will...\n\n```\nPOST /chat/v3/conversations/{cid}/messages      //where cid = \"lobby01@league.pvp.net/Sue\"\n```\nNOTE: all {cid} values should be URL encoded, so the example cid when sent url encoded is \"lobby01%40league.pvp.net%2FSue\"\n\nData:\n\n```\n{\n  \"message\": \"[message]\" //the text to send\n  \"type\"   : \"dm\"\n}      \n```\nAdditional notes:\n\n* The conversation object (and child objects like messages) from Brad's perspective will be at: /chat/v3/conversations/lobby01%40league.pvp.net%2FSue\n* The conversation from Sue's perspective will be at:  /chat/v3/conversations/lobby01%40league.pvp.net%2FBrad\n* All operations (GET participants, GET messages, POST messages, etc) are the same as regular conversations\n* for direct messaging, the conversation \"type\" and the message \"type\" will always be \"dm\" \n\n\nEndpoint deleted August 2021; Please use 'chat/v6/messages'.; operationId=PostChatV5Messages; parameters=System.Object[]; requestBody=; responses=; summary=Send a new chat message to a room or individual; tags=System.Object[]}"
    },
    "/chat/v5/messages/{domain}": {
      "get": "@{description=Endpoint deleted August 2021; Please use 'chat/v6/messages/{domain}'.; operationId=GetChatV5MessagesByDomain; parameters=System.Object[]; responses=; summary=Get messages by domain (optional query args: cid &/or mid); tags=System.Object[]}"
    },
    "/chat/v5/participants": {
      "get": "@{operationId=GetChatV5Participants; parameters=System.Object[]; responses=; summary=Get specific participant in a conversation; tags=System.Object[]}",
      "put": "@{operationId=PutChatV5Participants; parameters=System.Object[]; requestBody=; responses=; summary=edit a player to mute or unmute them, across all conversations; tags=System.Object[]}"
    },
    "/chat/v5/participants/{domain}": {
      "get": "@{operationId=GetChatV5ParticipantsByDomain; parameters=System.Object[]; responses=; summary=Get conversations by domain (optional query arg: cid); tags=System.Object[]}"
    },
    "/chat/v6/conversations": {
      "delete": "@{description=Endpoint deleted August 2021; Please use '/chat/v7/conversations'.; operationId=DeleteChatV6Conversations; parameters=System.Object[]; requestBody=; responses=; summary=Delete or leave a conversation; tags=System.Object[]}",
      "get": "@{description=Endpoint deleted August 2021; Please use '/chat/v7/conversations'.; operationId=GetChatV6Conversations; parameters=System.Object[]; responses=; summary=Get a conversation by cid; tags=System.Object[]}",
      "post": "@{description=Endpoint deleted August 2021; Please use '/chat/v7/conversations'.; operationId=PostChatV6Conversations; parameters=System.Object[]; requestBody=; responses=; summary=Create or join a conversation; tags=System.Object[]}",
      "put": "@{description=Endpoint deleted August 2021; Please use '/chat/v7/conversations'.; operationId=PutChatV6Conversations; parameters=System.Object[]; requestBody=; responses=; summary=Edit conversation; tags=System.Object[]}"
    },
    "/chat/v6/conversations/active": {
      "delete": "@{description=Endpoint deleted August 2021; Please use '/chat/v7/conversations'.; operationId=DeleteChatV6ConversationsActive; parameters=System.Object[]; responses=; summary=Clear active conversation; tags=System.Object[]}",
      "get": "@{description=Endpoint deleted August 2021; Please use '/chat/v7/conversations'.; operationId=GetChatV6ConversationsActive; parameters=System.Object[]; responses=; summary=Get active conversation; tags=System.Object[]}",
      "put": "@{description=Endpoint deleted August 2021; Please use '/chat/v7/conversations'.; operationId=PutChatV6ConversationsActive; parameters=System.Object[]; requestBody=; responses=; summary=Set active conversation; tags=System.Object[]}"
    },
    "/chat/v6/conversations/read": {
      "post": "@{description=Endpoint deleted August 2021; Please use '/chat/v7/conversations'.; operationId=PostChatV6ConversationsRead; parameters=System.Object[]; requestBody=; responses=; summary=Mark conversation as read; tags=System.Object[]}"
    },
    "/chat/v6/conversations/{domain}": {
      "get": "@{description=Endpoint deleted August 2021; Please use '/chat/v7/conversations'.; operationId=GetChatV6ConversationsByDomain; parameters=System.Object[]; responses=; summary=Get conversations by domain (optional query arg: cid); tags=System.Object[]}"
    },
    "/chat/v6/friendrequests": {
      "delete": "@{operationId=DeleteChatV6Friendrequests; parameters=System.Object[]; requestBody=; responses=; summary=Remove or decline friend request; tags=System.Object[]}",
      "get": "@{description=**Response:** named requests root object: a flat list of friend request property groups with 'puuid' and GnT info inside (could have zero or more entries in list):\n\n```\n{\n  \"requests\": [\n    {\n      \"gameName\":     \"[friend gameName]\",\n      \"tagLine\":      \"[friend tagLine]\",\n      \"note\":         \"[friend note]\",     // Can be set to contain information about the friend request. (ex. recofriender saves the player name from social media here)\n      \"puuid\":        \"[friend puuid]\",\n      \"subscription\": \"pending_out\"        //either \"pending_out\" or \"pending_in\" (sent or received request)\n    }\n  ]\n}\n```\n; operationId=GetChatV6Friendrequests; parameters=System.Object[]; responses=; summary=Get friend requests; tags=System.Object[]}",
      "post": "@{operationId=PostChatV6Friendrequests; parameters=System.Object[]; requestBody=; responses=; summary=Add friend request / invite friend; tags=System.Object[]}"
    },
    "/chat/v6/messages": {
      "delete": "@{operationId=DeleteChatV6Messages; parameters=System.Object[]; requestBody=; responses=; summary=Clear conversation message history; tags=System.Object[]}",
      "get": "@{description=**Response**: named messages root object: a flat list of message property groups (could have zero or more entries):\n\n```\n{ \"messages\": [\n                  { \"body\": \"[message]\",            //actual text of this message\n                    \"pid\":  \"[{pid}]\",              //pid of sender\n                    \"name\": \"[name]\",               //name of sender\n                    \"ts\":   \"[timestamp]\",          //integer value: milliseconds UTC\n                    \"cid\":  \"[cid]\",                //conversation id\n                    \"id\":   \"[message id]\",         //unique key within the conversation - for storage\n                    \"read\": true/false,               //whether message has been marked as read or not\n                    \"type\": \"[chat, groupchat, dm]\" //how the message was sent: from friend, from group chat, or a direct message from player in a group chat\n                  },\n                  { \"body\": \"[message]\",\n                    \"pid\":  \"[{pid}]\",\n                    \"ts\":   \"[timestamp]\",\n                    \"cid\":  \"[cid]\",\n                    \"id\":   \"[message id]\",\n                    \"read\": true/false,\n                    \"type\": \"[chat, groupchat, dm]\"\n                  },\n                  ...\n                ]\n}\n```\n\n**NOTE**: messages are sorted by time-stamp, earliest first, latest last\n; operationId=GetChatV6Messages; parameters=System.Object[]; responses=; summary=Get conversation messages; tags=System.Object[]}",
      "post": "@{description=**Sending A Message**\nA conversation id (cid) can be a MUC cid or for peer to peer messages, a player id (pid) can be used as a cid.\n\n```\nPOST /chat/v3/conversations/{cid}/messages      //cid is the conversation id passed as a path argument\n```\nData:\n\n```\n{\n  \"message\": \"[message]\" //the text to send\n  \"type\"   : \"[chat, groupchat, dm]\"\n}\n```\nAdditional notes:\n\n* type - used to specify the type of message (inferred from conversation type if left blank)\n  * chat: for P2P messages with friends\n  * groupchat: for group messages within a group chat\n  * dm: for Direct Messages with somebody in a group chat with you, or with a friend\n\nAs players post messages to a conversation, chat notifies on REST in this order:\n\n* /chat/v3/conversations/\n  * with updated data:  \"unread_count\" and the last message ID in the conversation\n* /chat/v3/conversations/{cid}/messages\n  * a list of new messages for the conversation (earliest first, latest last, but many times just one new message)\n\n**Direct Messages (private messages within a group chat)**\n\nPrivate messages between players that are not friends are possible, and this messaging is always tied to a JWT authenticated group chat (MUC) that both players are a part of. The MUC they are a part of has its own conversation-id (cid) and the private conversation between participants includes that cid in its derived cid.  For example if players \"Brad\" and \"Sue\" are both in MUC \"lobby01@league.pvp.net\" and Brad sends a direct message to Sue, then his client will...\n\n```\nPOST /chat/v3/conversations/{cid}/messages      //where cid = \"lobby01@league.pvp.net/Sue\"\n```\nNOTE: all {cid} values should be URL encoded, so the example cid when sent url encoded is \"lobby01%40league.pvp.net%2FSue\"\n\nData:\n\n```\n{\n  \"message\": \"[message]\" //the text to send\n  \"type\"   : \"dm\"\n}      \n```\nAdditional notes:\n\n* The conversation object (and child objects like messages) from Brad's perspective will be at: /chat/v3/conversations/lobby01%40league.pvp.net%2FSue\n* The conversation from Sue's perspective will be at:  /chat/v3/conversations/lobby01%40league.pvp.net%2FBrad\n* All operations (GET participants, GET messages, POST messages, etc) are the same as regular conversations\n* for direct messaging, the conversation \"type\" and the message \"type\" will always be \"dm\" \n; operationId=PostChatV6Messages; parameters=System.Object[]; requestBody=; responses=; summary=Send a new chat message to a room or individual; tags=System.Object[]}"
    },
    "/chat/v6/messages/{domain}": {
      "get": "@{operationId=GetChatV6MessagesByDomain; parameters=System.Object[]; responses=; summary=Get messages by domain (optional query args: cid &/or mid); tags=System.Object[]}"
    },
    "/chat/v7/conversations": {
      "delete": "@{operationId=DeleteChatV7Conversations; parameters=System.Object[]; requestBody=; responses=; summary=Delete or leave a conversation; tags=System.Object[]}",
      "get": "@{operationId=GetChatV7Conversations; parameters=System.Object[]; responses=; summary=Get a conversation by cid; tags=System.Object[]}",
      "post": "@{operationId=PostChatV7Conversations; parameters=System.Object[]; requestBody=; responses=; summary=Create or join a conversation; tags=System.Object[]}",
      "put": "@{operationId=PutChatV7Conversations; parameters=System.Object[]; requestBody=; responses=; summary=Edit conversation; tags=System.Object[]}"
    },
    "/chat/v7/conversations/active": {
      "delete": "@{operationId=DeleteChatV7ConversationsActive; parameters=System.Object[]; responses=; summary=Clear active conversation; tags=System.Object[]}",
      "get": "@{operationId=GetChatV7ConversationsActive; parameters=System.Object[]; responses=; summary=Get active conversation; tags=System.Object[]}",
      "put": "@{operationId=PutChatV7ConversationsActive; parameters=System.Object[]; requestBody=; responses=; summary=Set active conversation; tags=System.Object[]}"
    },
    "/chat/v7/conversations/read": {
      "post": "@{operationId=PostChatV7ConversationsRead; parameters=System.Object[]; requestBody=; responses=; summary=Mark conversation as read; tags=System.Object[]}"
    },
    "/chat/v7/conversations/{domain}": {
      "get": "@{operationId=GetChatV7ConversationsByDomain; parameters=System.Object[]; responses=; summary=Get conversations by domain (optional query arg: cid); tags=System.Object[]}"
    },
    "/client-config/v1/authorization": {
      "delete": "@{operationId=DeleteClientConfigV1Authorization; parameters=System.Object[]; responses=; summary=Removes the authorization. Triggers revocation of player configuration.; tags=System.Object[]}",
      "put": "@{operationId=PutClientConfigV1Authorization; parameters=System.Object[]; requestBody=; responses=; summary=Updates the authorization information for this plugin. Pushed by the ClientConfigDepInjector. If this is the first authorization of session, triggers an initial fetch of player configuration.; tags=System.Object[]}"
    },
    "/client-config/v1/config": {
      "get": "@{operationId=GetClientConfigV1Config; parameters=System.Object[]; responses=; summary=Returns the configuration for the application. If config is not already cached locally, will make a blocking external request.; tags=System.Object[]}"
    },
    "/client-config/v1/config/{name}": {
      "get": "@{operationId=GetClientConfigV1ConfigByName; parameters=System.Object[]; responses=; summary=Returns the single configuration value. If config is not already cached locally, will make a blocking external request.; tags=System.Object[]}"
    },
    "/client-config/v1/refresh-config-status": {
      "put": "@{operationId=PutClientConfigV1RefreshConfigStatus; parameters=System.Object[]; responses=; summary=Refresh config status.; tags=System.Object[]}"
    },
    "/client-config/v1/sessions": {
      "put": "@{operationId=PutClientConfigV1Sessions; parameters=System.Object[]; requestBody=; responses=; summary=Updates the cached sessions.; tags=System.Object[]}"
    },
    "/client-config/v1/status/{type}": {
      "get": "@{operationId=GetClientConfigV1StatusByType; parameters=System.Object[]; responses=; summary=Returns the status for the given config type which primarily indicates if the config type is ready for use.; tags=System.Object[]}"
    },
    "/client-config/v1/url": {
      "get": "@{operationId=GetClientConfigV1Url; parameters=System.Object[]; responses=; summary=Returns the URL of the external service; tags=System.Object[]}"
    },
    "/client-config/v2/config/{name}": {
      "get": "@{description=Returns an individual configuration field for the requesting application. Both Public and Player types are checked. Subscribing to a configuration field that does not exist results in event UPDATE notifications with an `BindingProperty::Empty` data field. If the receiving module intends to handle the does-not-exist case, the event handler should accept a BindingProperty, not a concrete resource type. \n\n* This call does not block. If config is not already cached locally, an async request will be dispatched.\n\n* If configuration has not yet been fetched, an HTTP 202 is returned. When the configuration is available, a resource notification will be sent to subscribers.\n\n* Configuration is automatically refreshed on state change (login, logout, or notification of change), and apps may be notified by subscribing to this endpoint.\n\n* Connecting game applications will have product information automatically applied to outgoing configuration requests (i.e. app name, version, patchline). This allows configuration overrides to be applied specifically for the app.\n\nResponse codes:\n- 200 If the field exists. The body will be the configuration value.\n- 202 If configuration has not yet been fetched, and updates can be received via subscription notifications.\n- 204 If the field does not exist, and all configuration has been successfully fetched.; operationId=GetClientConfigV2ConfigByName; parameters=System.Object[]; responses=; summary=Non-blocking request for a specific configuration field.; tags=System.Object[]}"
    },
    "/client-config/v2/entitlements-token": {
      "delete": "@{operationId=DeleteClientConfigV2EntitlementsToken; parameters=System.Object[]; responses=; summary=Deletes the entitlements token, if set. Triggers revocation of player configuration.; tags=System.Object[]}",
      "put": "@{operationId=PutClientConfigV2EntitlementsToken; parameters=System.Object[]; requestBody=; responses=; summary=Accepts updated entitlements token. Pushed by the ClientConfigDepInjector. Changes in entitlements trigger refresh of player configuration.; tags=System.Object[]}"
    },
    "/client-config/v2/namespace-changes": {
      "put": "@{operationId=PutClientConfigV2NamespaceChanges; parameters=System.Object[]; requestBody=; responses=; summary=Refresh config status.; tags=System.Object[]}"
    },
    "/client-config/v2/namespace/{namespace}": {
      "get": "@{description=Returns the configuration for the requesting application in the given namespace for both Public and Player types.\n\n* This call does not block. If config is not already cached locally, an async request will be dispatched.\n\n* If configuration has not yet been fetched, an HTTP 202 is returned. When the configuration is available, a resource notification will be sent to subscribers.\n\n* Configuration is automatically refreshed on state change (login, logout, or notification of change), and apps may be notified by subscribing to this endpoint.\n\n* Connecting game applications will have product information automatically applied to outgoing configuration requests (i.e. app name, version, patchline). This allows configuration overrides to be applied specifically for the app.\n\n; operationId=GetClientConfigV2NamespaceByNamespace; parameters=System.Object[]; responses=; summary=Non-blocking request for public+player configurations in a namespace.; tags=System.Object[]}"
    },
    "/client-config/v2/namespace/{namespace}/player": {
      "get": "@{description=Returns the *player* configuration for the requesting application in the given namespace.\n\n* This call does not block. If config is not already cached locally, an async request will be dispatched.\n\n* If configuration has not yet been fetched, an HTTP 202 is returned. When the configuration is available, a resource notification will be sent to subscribers.\n\n* Configuration is automatically refreshed on state change (login, logout, or notification of change), and apps may be notified by subscribing to this endpoint.\n\n* Connecting game applications will have product information automatically applied to outgoing configuration requests (i.e. app name, version, patchline). This allows configuration overrides to be applied specifically for the app.\n\n* 'Player' configuration will have a delete notification sent to subscribers on logout.\n\n; operationId=GetClientConfigV2NamespaceByNamespacePlayer; parameters=System.Object[]; responses=; summary=Non-blocking request for 'player' configurations in a namespace.; tags=System.Object[]}"
    },
    "/client-config/v2/namespace/{namespace}/public": {
      "get": "@{description=Returns the *public* configuration for the requesting application in the given namespace.\n\n* This call does not block. If config is not already cached locally, an async request will be dispatched.\n\n* If configuration has not yet been fetched, an HTTP 202 is returned. When the configuration is available, a resource notification will be sent to subscribers.\n\n* Configuration is automatically refreshed on state change (login, logout, or notification of change), and apps may be notified by subscribing to this endpoint.\n\n* Connecting game applications will have product information automatically applied to outgoing configuration requests (i.e. app name, version, patchline). This allows configuration overrides to be applied specifically for the app.\n\n; operationId=GetClientConfigV2NamespaceByNamespacePublic; parameters=System.Object[]; responses=; summary=Non-blocking request for 'public' configurations in a namespace.; tags=System.Object[]}"
    },
    "/client-feature-flags/v1/debug/all-subscribed-flags": {
      "get": "@{description=*Internal Riot Client API. Only for use by plugins. Please don't use outside of Riot Client or the SDK.*\n\nReturns the keys and values of all feature flags that are currently subscribed -- that is, in active use by code.; operationId=GetClientFeatureFlagsV1DebugAllSubscribedFlags; parameters=System.Object[]; responses=; summary=Returns all the feature flags that are currently subscribed.; tags=System.Object[]}"
    },
    "/client-feature-flags/v1/debug/mock-data": {
      "get": "@{description=*Internal Riot Client API. Only for use by plugins. Please don't use outside of Riot Client or the SDK.*\n\n; operationId=GetClientFeatureFlagsV1DebugMockData; parameters=System.Object[]; responses=; summary=Retrieves the current set of mock data for the plugin.; tags=System.Object[]}",
      "put": "@{description=*Internal Riot Client API. Only for use by plugins. Please don't use outside of Riot Client or the SDK.*\n\nThe entire data set is replaced in one call; partial updates are not supported. The best way to edit the current set of data is to use `GET /debug/mock-data`, modify the result, and `PUT` using this endpoint.\n\nSome minor fixups are performed with the provided data to ensure it is consistent. The plugin treats this as a 'oh hey, there is new data for client-config' event, and behaves appropriately.; operationId=PutClientFeatureFlagsV1DebugMockData; parameters=System.Object[]; requestBody=; responses=; summary=Sets the current set of mock data for the plugin.; tags=System.Object[]}"
    },
    "/client-feature-flags/v1/debug/mock-mode": {
      "delete": "@{description=*Internal Riot Client API. Only for use by plugins. Please don't use outside of Riot Client or the SDK.*\n\nWhen leaving mock mode, all data is refreshed from client-config and restored to normal.; operationId=DeleteClientFeatureFlagsV1DebugMockMode; parameters=System.Object[]; responses=; summary=Leaves mock mode, and deletes mock data.; tags=System.Object[]}",
      "get": "@{description=*Internal Riot Client API. Only for use by plugins. Please don't use outside of Riot Client or the SDK.*\n\nThe return type is a boolean -- `true` indicates that plugin data is currently being mocked.; operationId=GetClientFeatureFlagsV1DebugMockMode; parameters=System.Object[]; responses=; summary=Returns whether the plugin is in mock mode or not.; tags=System.Object[]}",
      "put": "@{description=*Internal Riot Client API. Only for use by plugins. Please don't use outside of Riot Client or the SDK.*\n\nWhen entering mock mode, the current data set from client-config is copied, and further updates from client-config are ignored. The plugin otherwise tries to behave as it would normally.\n\nUse the `/debug/mock-data` endpoint to get/set mocked data in this mode.; operationId=PutClientFeatureFlagsV1DebugMockMode; parameters=System.Object[]; responses=; summary=Enters mock mode, which allows using fake client-config data.; tags=System.Object[]}"
    },
    "/client-feature-flags/v1/debug/overrides/flags": {
      "get": "@{description=*Internal Riot Client API. Only for use by plugins. Please don't use outside of Riot Client or the SDK.*\n\nRetrieves the names and values of all currently set overrides.; operationId=GetClientFeatureFlagsV1DebugOverridesFlags; parameters=System.Object[]; responses=; summary=Retrieves the values of all overridden flags.; tags=System.Object[]}"
    },
    "/client-feature-flags/v1/debug/overrides/flags/{namespace}/{flag}": {
      "delete": "@{description=*Internal Riot Client API. Only for use by plugins. Please don't use outside of Riot Client or the SDK.*\n\nRemoves the override for the specified feature flag. The value of the flag will immediately reflect that being reported by client-config.; operationId=DeleteClientFeatureFlagsV1DebugOverridesFlagsByNamespaceByFlag; parameters=System.Object[]; responses=; summary=Removes an override for a feature flag.; tags=System.Object[]}",
      "put": "@{description=*Internal Riot Client API. Only for use by plugins. Please don't use outside of Riot Client or the SDK.*\n\nForcibly sets the value of a particular feature flag. The override will be in place until a subsequent `DELETE` on the override.; operationId=PutClientFeatureFlagsV1DebugOverridesFlagsByNamespaceByFlag; parameters=System.Object[]; requestBody=; responses=; summary=Forcibly sets the value of a particular feature flag.; tags=System.Object[]}"
    },
    "/client-feature-flags/v1/flags/{namespace}/{flag}": {
      "get": "@{description=*Internal Riot Client API. Only for use by plugins. Please don't use outside of Riot Client or the SDK.*\n\nRetrieves the value of a specific feature flag. Implicitly subscribes, and updates to the feature flag will be broadcast.\n\nFlags which are not currently defined (or entitled) will always return `false` as the default value.; operationId=GetClientFeatureFlagsV1FlagsByNamespaceByFlag; parameters=System.Object[]; responses=; summary=Retrieves the value of a specific feature flag.; tags=System.Object[]}"
    },
    "/cookie-jar/v1/cookies": {
      "delete": "@{operationId=DeleteCookieJarV1Cookies; parameters=System.Object[]; requestBody=; responses=; summary=Delete existing cookies.; tags=System.Object[]}",
      "get": "@{operationId=GetCookieJarV1Cookies; parameters=System.Object[]; responses=; summary=Get all cookies.; tags=System.Object[]}",
      "post": "@{operationId=PostCookieJarV1Cookies; parameters=System.Object[]; requestBody=; responses=; summary=Set new cookies.; tags=System.Object[]}"
    },
    "/data-store/v1/install-settings/{path}": {
      "get": "@{operationId=GetDataStoreV1InstallSettingsByPath; parameters=System.Object[]; responses=; summary=Get the data for the specified key from the install settings.; tags=System.Object[]}",
      "post": "@{operationId=PostDataStoreV1InstallSettingsByPath; parameters=System.Object[]; requestBody=; responses=; summary=Set the data for the specified key from the install settings.; tags=System.Object[]}"
    },
    "/data-store/v1/paths": {
      "get": "@{operationId=GetDataStoreV1Paths; parameters=System.Object[]; responses=; summary=Get the data store paths.; tags=System.Object[]}"
    },
    "/data-store/v1/private-settings/{path}": {
      "get": "@{operationId=GetDataStoreV1PrivateSettingsByPath; parameters=System.Object[]; responses=; summary=Get the data for the specified key from the private settings.; tags=System.Object[]}",
      "post": "@{operationId=PostDataStoreV1PrivateSettingsByPath; parameters=System.Object[]; requestBody=; responses=; summary=Set the data for the specified key from the private settings.; tags=System.Object[]}"
    },
    "/data-store/v1/product-settings/products/{productId}/patchlines/{patchlineId}": {
      "get": "@{operationId=GetDataStoreV1ProductSettingsProductsByProductIdPatchlinesByPatchlineId; parameters=System.Object[]; responses=; summary=Get all settings for the specified product.; tags=System.Object[]}",
      "post": "@{operationId=PostDataStoreV1ProductSettingsProductsByProductIdPatchlinesByPatchlineId; parameters=System.Object[]; requestBody=; responses=; summary=Set all settings for the specified product.; tags=System.Object[]}"
    },
    "/data-store/v1/product-settings/products/{productId}/patchlines/{patchlineId}/{path}": {
      "get": "@{operationId=GetDataStoreV1ProductSettingsProductsByProductIdPatchlinesByPatchlineIdByPath; parameters=System.Object[]; responses=; summary=Get the data for the specified key from the settings for the specified product.; tags=System.Object[]}",
      "post": "@{operationId=PostDataStoreV1ProductSettingsProductsByProductIdPatchlinesByPatchlineIdByPath; parameters=System.Object[]; requestBody=; responses=; summary=Set the data for the specified key from the settings for the specified product.; tags=System.Object[]}"
    },
    "/data-store/v1/reload-product-settings/products/{productId}/patchlines/{patchlineId}": {
      "post": "@{operationId=PostDataStoreV1ReloadProductSettingsProductsByProductIdPatchlinesByPatchlineId; parameters=System.Object[]; responses=; summary=Reload all settings for the specified product.; tags=System.Object[]}"
    },
    "/data-store/v1/system-settings/{path}": {
      "get": "@{operationId=GetDataStoreV1SystemSettingsByPath; parameters=System.Object[]; responses=; summary=Get the setting for the specified key. This API is provided for host applications.; tags=System.Object[]}"
    },
    "/disambiguation/v1/magic-link": {
      "post": "@{description=This API endpoint is deprecated and will be removed by 3/1/2023. Please do not use.; operationId=PostDisambiguationV1MagicLink; parameters=System.Object[]; responses=; summary=Retrieves the magic disambiguation link for the current auth'd account.; tags=System.Object[]}"
    },
    "/entitlements-service/v1/token": {
      "get": "@{description=Calls the entitlements service, and retrieves the user's current entitlements token.\n\nReturns HTTP 400 if the token is not ready.; operationId=GetEntitlementsServiceV1Token; parameters=System.Object[]; responses=; summary=Get the entitlements token from the service; tags=System.Object[]}"
    },
    "/entitlements/v1/token": {
      "get": "@{description=Callers should prefer /v2/token in order to acquire both access and ID token\n\nReturns HTTP 400 if the token is not ready.; operationId=GetEntitlementsV1Token; parameters=System.Object[]; responses=; summary=Get V1 entitlements token, which contains the RSO access token.; tags=System.Object[]}"
    },
    "/entitlements/v2/token": {
      "get": "@{description='Authorization' pertains to the Riot Client application on desktop platforms and the host application for the embedded SDK.\n\nError codes:\n- Returns HTTP 404 if the token is not ready. Likely due to no authentication available.\n- 503 if Entitlements are disabled for this environment.; operationId=GetEntitlementsV2Token; parameters=System.Object[]; responses=; summary=Get V2 Entitlements token, which contains the default RSO authorization.; tags=System.Object[]}"
    },
    "/eula/v1/agreement": {
      "get": "@{operationId=GetEulaV1Agreement; parameters=System.Object[]; responses=; summary=Returns an object containing metadata about the most recent published EULA, and a field, 'acceptance', indicating whether the user has accepted this agreement or not. (The 'acceptance' field is accessible separately via the /acceptance endpoint.\n\nWhen the 'acceptance' field is 'WaitingForAllServiceData', we don't have the data for the latest EULA, nor its acceptance state, and all other fields are invalid.; tags=System.Object[]}"
    },
    "/eula/v1/agreement/acceptance": {
      "get": "@{operationId=GetEulaV1AgreementAcceptance; parameters=System.Object[]; responses=; summary=Returns the acceptance state of the most recent EULA for the current user. Possible values are:\n\n- WaitingForAllServiceData: The user is signed out, we have yet to retrieve client-config, or we are otherwise waiting for data to determine if the user has accepted the latest agreement.\n- AcceptanceRequired: The user has never accepted a EULA, or has not accepted the most recent version.\n- Accepted: The user has accepted the most recent EULA.; tags=System.Object[]}",
      "put": "@{operationId=PutEulaV1AgreementAcceptance; parameters=System.Object[]; responses=; summary=Accepts the most recent EULA for the current user.; tags=System.Object[]}"
    },
    "/eula/v1/agreement/content": {
      "get": "@{operationId=GetEulaV1AgreementContent; parameters=System.Object[]; responses=; summary=Returns the content of the current version EULA.; tags=System.Object[]}"
    },
    "/eula/v1/agreement/reject": {
      "put": "@{operationId=PutEulaV1AgreementReject; parameters=System.Object[]; requestBody=; responses=; summary=Rejects the most recent EULA for the current user.; tags=System.Object[]}"
    },
    "/eula/v1/debug/agreement/force-requirement": {
      "post": "@{operationId=PostEulaV1DebugAgreementForceRequirement; parameters=System.Object[]; responses=; summary=Forces client into requiring acceptance; tags=System.Object[]}"
    },
    "/eula/v1/debug/agreement/short-agreement-content": {
      "put": "@{operationId=PutEulaV1DebugAgreementShortAgreementContent; parameters=System.Object[]; responses=; summary=Simulate short agreement content. This is disabled in public builds.; tags=System.Object[]}"
    },
    "/eula/v1/external-legal-links": {
      "get": "@{operationId=GetEulaV1ExternalLegalLinks; parameters=System.Object[]; responses=; summary=Returns the web URLs for Terms of Service and Privacy Noticeaccording to the most appropriate locale for the agreement you are bound to; tags=System.Object[]}"
    },
    "/eula/v1/privacy-policy": {
      "get": "@{operationId=GetEulaV1PrivacyPolicy; parameters=System.Object[]; responses=; summary=Returns the current privacy policy data.; tags=System.Object[]}"
    },
    "/eula/v1/privacy-policy/content": {
      "get": "@{operationId=GetEulaV1PrivacyPolicyContent; parameters=System.Object[]; responses=; summary=Returns the content of the current privacy policy.; tags=System.Object[]}"
    },
    "/eula/v1/product-context": {
      "delete": "@{operationId=DeleteEulaV1ProductContext; parameters=System.Object[]; responses=; summary=Resets the current product context.; tags=System.Object[]}",
      "get": "@{operationId=GetEulaV1ProductContext; parameters=System.Object[]; responses=; summary=Gets the current product context.; tags=System.Object[]}",
      "put": "@{operationId=PutEulaV1ProductContext; parameters=System.Object[]; requestBody=; responses=; summary=Set the current product context.; tags=System.Object[]}"
    },
    "/first-party-fulfillment/v1/fulfill": {
      "post": "@{description=\n**Description**\n\nThis API will check if the user has made any purchases on the first party store and will attempt to fulfill them.\nThis should typically be called when the game is launched or resumed.\n\nNOTE: Currently, this endpoint only supports PlayStation 4, PlayStation 5, and Switch fulfillment. Xbox support will be added in the future.\n\n** Request Arguments **\n\nRequest Body:\n* `firstPartyAuthToken`: Authentication token for the first party platform required to perform fulfillment.\n    * On Nintendo Switch, provide the NSA ID token if available. Otherwise, RiotGamesApi will fetch the NSA ID token itself.\n    * On Playstation 4 and Playstation 5, provide an NP auth code that includes the \"psn:s2s\" and \"openid\" scopes.\n    * On Xbox, no token is required and an empty string can be provided.\n* `fulfillmentId`: UUID that identifies a unique fulfillment attempt.\n* `fulfillmentReason`: The reason why the fulfillment attempt was made. Possible options are listed below:\n    * `GameLaunched`: Fulfillment was initiated because a purchase may have occurred while the game was not running.\n    * `GameReturnedToForeground`: Fulfillment was initiated because a purchase may have occurred while the game was in the background.\n    * `PurchaseCompleted`: Fulfillment was initiated because a purchase was completed (likely from the in-game store).\n    * `Other`: DO NOT USE without consulting the SDK Features team first. This is a fallback reason for why a fulfillment was initiated if it\n      is not covered by any of the existing reasons. However, you should only use this if SDK Features is not able to add a reason that covers\n      your use case before you need to use it and once SDK Features does add the reason, you are expected to update to using it as soon as it\n      has been made available in the next SDK release.\n\n** Returns **\n\nResponse Body:\n* `FulfillmentResponse` Object:\n    * `fulfillmentRequired`: Bool indicating whether the player owned anything that needed to be fulfilled.\n    * `fulfilledItems`: An `ItemFulfillmentSuccessInfo` object\n        * `itemId`: A string that identifies the item that was fulfilled.\n        * `quantity`: An integer representing how many of the item was fulfilled.\n    * `unfulfilledItems`: An `ItemFulfillmentFailureInfo` object\n        * `itemId`: A string that identifies the item that was unable to be fulfilled.\n        * `quantity`: An integer representing how many of the item could not be fulfilled.\n        * `reason`: A string describing why the item could not be fulfilled.\n\n** Error Codes **\n* Possible error codes: 400, 403, 412, 417, 500, 502, 504, 512\n* Error codes fall into the following categories: recoverable, retriable, and hard failure.\n* Recoverable errors (400, 403, 412) will succeed when the root issue is resolved such as \"412 Unable to perform fulfillment because plugin is not enabled.\" - in this case the plugin needs to be enabled in the config\n* Retriable errors (500, 502, 503, 504) may succeed if another attempt is made later. This could include issues such as the network temporarily being down.\n* Hard failure (417, 512) errors are unlikely to succeed when retried and the root issue is unexpected. An example of this would be the first party libraries failing to load.\n* For more details on error codes and how to handle them please see https://platform.riotgames.com/riotgamesapi-sdk/features/first-party-fulfillment/integrating-first-party-fulfillment\n\n; operationId=PostFirstPartyFulfillmentV1Fulfill; parameters=System.Object[]; requestBody=; responses=; summary=Initiate a fulfillment attempt; tags=System.Object[]}"
    },
    "/friends/v2/make-platform-blocks-riot-blocks": {
      "get": "@{description=\n**Description**\nThis endpoint queries the console for blocked users, looks them up in the Riot system, and checks if all of them are blocked in the Riot ecosystem.\nIf not, the blocks are 'promoted' to Riot blocks. Game teams are required to determined where this endpoint should be invoked in their app lifecycle.\n; operationId=GetFriendsV2MakePlatformBlocksRiotBlocks; parameters=System.Object[]; responses=; summary=Request a synchronization of blocked users from console to Riot ecosystem; tags=System.Object[]}"
    },
    "/friends/v2/mock-api/state": {
      "put": "@{description=\n**Description**\n-- To be filled out when Mock implementation is done.\nSDKFEAT-1393: [Mock] Get Console Blocked User List\n; operationId=PutFriendsV2MockApiState; parameters=System.Object[]; requestBody=; responses=; summary=Set whether the plugin should use a mock friends API or not and if so, how the mock API should behave; tags=System.Object[]}"
    },
    "/ga-restriction/v1/debug/caller-id/mock-id": {
      "delete": "@{description=Deletes the currently set `productId` and `patchlineId`. Plugin APIs will receive `swagger` as the `productId`.; operationId=DeleteGaRestrictionV1DebugCallerIdMockId; parameters=System.Object[]; responses=; summary=Stops mocking the caller ID for Swagger calls; tags=System.Object[]}",
      "get": "@{description=Returns the `productId` and `patchlineId` being passed to APIs in this plugin when called via Swagger.\n\nReturns 404 if a mock caller ID is not in use.; operationId=GetGaRestrictionV1DebugCallerIdMockId; parameters=System.Object[]; responses=; summary=Checks the caller ID in use when APIs are called from Swagger; tags=System.Object[]}",
      "put": "@{description=Sets the `productId` and `patchlineId` to pass to APIs in this plugin during future calls from Swagger.\n\nUse this functionality to test APIs in this plugin with Swagger, as if they were being called from another product.; operationId=PutGaRestrictionV1DebugCallerIdMockId; parameters=System.Object[]; requestBody=; responses=; summary=Sets the caller ID to use when calling this plugin from Swagger; tags=System.Object[]}"
    },
    "/ga-restriction/v1/debug/penalty-notifications-data": {
      "delete": "@{operationId=DeleteGaRestrictionV1DebugPenaltyNotificationsData; parameters=System.Object[]; responses=; summary=Delete all penalty notifications for all products.; tags=System.Object[]}",
      "get": "@{operationId=GetGaRestrictionV1DebugPenaltyNotificationsData; parameters=System.Object[]; responses=; summary=Returns the raw data for the cached Penalty Notifications that this plugin received. This intended for debugging only.; tags=System.Object[]}"
    },
    "/ga-restriction/v1/debug/penalty-notifications-data/{messageId}": {
      "delete": "@{operationId=DeleteGaRestrictionV1DebugPenaltyNotificationsDataByMessageId; parameters=System.Object[]; responses=; summary=Delete the penalty notification for a specific message ID. Note that you'll still be able to see the message until your next relog.; tags=System.Object[]}",
      "put": "@{operationId=PutGaRestrictionV1DebugPenaltyNotificationsDataByMessageId; parameters=System.Object[]; requestBody=; responses=; summary=Add some arbitrary penalty notification. Uses your current callerId's productId. Note that if you acknowledge or delete this message, the plugin will still attempt to tell Mailbox, which may result in an error log.; tags=System.Object[]}"
    },
    "/ga-restriction/v1/debug/time": {
      "delete": "@{operationId=DeleteGaRestrictionV1DebugTime; parameters=System.Object[]; responses=; summary=Deletes the current mocked time, so that we use the real time again.; tags=System.Object[]}",
      "get": "@{operationId=GetGaRestrictionV1DebugTime; parameters=System.Object[]; responses=; summary=Check what the plugin is using as the current time. If the time is being mocked, uses the mock. Otherwise uses the real current time. Uses milliseconds since epoch.; tags=System.Object[]}"
    },
    "/ga-restriction/v1/debug/time/{millisSinceEpoch}": {
      "put": "@{operationId=PutGaRestrictionV1DebugTimeByMillisSinceEpoch; parameters=System.Object[]; responses=; summary=Mock the current time. This can help you debug if the plugin automatically deletes messages. Note that we only try to delete messages when we receive or acknowledge messages. Uses milliseconds since epoch.; tags=System.Object[]}"
    },
    "/ga-restriction/v1/penalty-notifications": {
      "get": "@{operationId=GetGaRestrictionV1PenaltyNotifications; parameters=System.Object[]; responses=; summary=Provides a list of penalty notifications to show to the player for the callerId.; tags=System.Object[]}"
    },
    "/ga-restriction/v1/penalty-notifications/{messageId}": {
      "put": "@{operationId=PutGaRestrictionV1PenaltyNotificationsByMessageId; parameters=System.Object[]; responses=; summary=Marks a penalty notification as read. Read messages will still be accessible, but they don't need to be immediately displayed to the player.; tags=System.Object[]}"
    },
    "/ga-restriction/v1/unread-penalty-notifications": {
      "get": "@{operationId=GetGaRestrictionV1UnreadPenaltyNotifications; parameters=System.Object[]; responses=; summary=Provides a list of unread penalty notifications to show to the player for the callerId.; tags=System.Object[]}"
    },
    "/ga-warning/v1/debug/caller-id/mock-id": {
      "delete": "@{description=Deletes the currently set `productId` and `patchlineId`. Plugin APIs will receive `swagger` as the `productId`.; operationId=DeleteGaWarningV1DebugCallerIdMockId; parameters=System.Object[]; responses=; summary=Stops mocking the caller ID for Swagger calls; tags=System.Object[]}",
      "get": "@{description=Returns the `productId` and `patchlineId` being passed to APIs in this plugin when called via Swagger.\n\nReturns 404 if a mock caller ID is not in use.; operationId=GetGaWarningV1DebugCallerIdMockId; parameters=System.Object[]; responses=; summary=Checks the caller ID in use when APIs are called from Swagger; tags=System.Object[]}",
      "put": "@{description=Sets the `productId` and `patchlineId` to pass to APIs in this plugin during future calls from Swagger.\n\nUse this functionality to test APIs in this plugin with Swagger, as if they were being called from another product.; operationId=PutGaWarningV1DebugCallerIdMockId; parameters=System.Object[]; requestBody=; responses=; summary=Sets the caller ID to use when calling this plugin from Swagger; tags=System.Object[]}"
    },
    "/ga-warning/v1/debug/simulate-warning/{category}": {
      "post": "@{description=\n**Data**\n\n* `category`: The category is a key used to create the localized message for the player. As an example, `INAPPROPRIATE_TEXT` is the category\nsent when a player was flagged for inappropriate chat. If the category is unrecognized, a fallback message will be used.\n; operationId=PostGaWarningV1DebugSimulateWarningByCategory; parameters=System.Object[]; responses=; summary=Simulate sending a game-agnostic warning message to this player with a specific category. Endpoint not available in public builds.; tags=System.Object[]}"
    },
    "/ga-warning/v1/warnings": {
      "get": "@{description=\n**Description**\n\nYou will only get warnings for the current game. To make testing easier, there are debug endpoints on this plugin that allow you to mock your current game.\n\n**Response Body**\n\n* `gaWarningMessage`: Top-level response field. If there are no unacknowledged warnings, this will be empty object `{}`.\nOtherwise it will contain unacknowledged warnings keyed by their ID.\n* `gaWarningMessage.{id}`: Represents a single unacknowledged warning.\n  * `gaWarningMessage.{id}.category`: Category of the warning message--internal string.\n  * `gaWarningMessage.{id}.locale`: Detected locale of player and what locale the message was localized to.\n  * `gaWarningMessage.{id}.message`: Localized message to display to player.\n  * `gaWarningMessage.{id}.title`: Localized message title to display to player.\n  * `gaWarningMessage.{id}.acknowledgeText`: Localized text player must type to acknowledge the warning.\n  * (OPTIONAL) `gaWarningMessage.{id}.seeMoreUrl`: Hyperlink to give players more context about community guidelines. This field and `seeMoreLabel` won't always be present and you should build your UI to account for that.\n  * (OPTIONAL) `gaWarningMessage.{id}.seeMoreLabel`: Label for `seeMoreUrl`. Do not display the raw link, use this label instead. This field and `seeMoreUrl` won't always be present and you should build your UI to account for that.\n\n**Response Codes**\n* `200`: Success.\n* `401`: Player must be logged in.\n; operationId=GetGaWarningV1Warnings; parameters=System.Object[]; responses=; summary=Provides a list of unacknowledged localized game-agnostic warnings to show the player.; tags=System.Object[]}"
    },
    "/ga-warning/v1/warnings/ack": {
      "delete": "@{operationId=DeleteGaWarningV1WarningsAck; parameters=System.Object[]; responses=; summary=Acknowledges all warnings for the current game.; tags=System.Object[]}"
    },
    "/ga-warning/v1/warnings/ack/{id}": {
      "delete": "@{description=\n**Description**\n\nAcknowledges warning that has ID with {id}. See GET warnings endpoint for more info on how to find `{id}`.\n\n**Response Codes**\n* `404`: No warning with that ID found.\n* `204`: Warning found and acknowledged (deleted).\n; operationId=DeleteGaWarningV1WarningsAckById; parameters=System.Object[]; responses=; summary=Acknowledges a specific GA player warning.; tags=System.Object[]}"
    },
    "/game-session/v1/clusters": {
      "get": "@{operationId=GetGameSessionV1Clusters; parameters=System.Object[]; responses=; summary=Gets a list of all available clusters. Cluster IDs arrive asynchronously and may not be immediately avaiable. The logic of selecting the optimal cluster for a player is up to the game team.; tags=System.Object[]}"
    },
    "/game-session/v1/debug/caller-id/mock-id": {
      "delete": "@{description=Deletes the currently set `productId` and `patchlineId`. Plugin APIs will receive `swagger` as the `productId`.; operationId=DeleteGameSessionV1DebugCallerIdMockId; parameters=System.Object[]; responses=; summary=Stops mocking the caller ID for Swagger calls; tags=System.Object[]}",
      "get": "@{description=Returns the `productId` and `patchlineId` being passed to APIs in this plugin when called via Swagger.\n\nReturns 404 if a mock caller ID is not in use.; operationId=GetGameSessionV1DebugCallerIdMockId; parameters=System.Object[]; responses=; summary=Checks the caller ID in use when APIs are called from Swagger; tags=System.Object[]}",
      "put": "@{description=Sets the `productId` and `patchlineId` to pass to APIs in this plugin during future calls from Swagger.\n\nUse this functionality to test APIs in this plugin with Swagger, as if they were being called from another product.; operationId=PutGameSessionV1DebugCallerIdMockId; parameters=System.Object[]; requestBody=; responses=; summary=Sets the caller ID to use when calling this plugin from Swagger; tags=System.Object[]}"
    },
    "/game-session/v1/sessions": {
      "post": "@{description=Creates a GAPS Session Funnel request that interacts with 1-3 services based on the supplied options. Requests are handle asynchronously and reported by through changes to the `state` property of this resource. Use the generated `id` field as a path parameter to subscribe to this specific funnel instance.\n\nPlayers exiting the funnel will exit with one of several known states indicated by the `message` field of theis resource. Session heartbeats and queue polling are handled transparently, as are server-side kicks.; operationId=PostGameSessionV1Sessions; parameters=System.Object[]; requestBody=; responses=; summary=Creates a request for GAPS login queue, bypass queue, and session services.; tags=System.Object[]}"
    },
    "/game-session/v1/sessions/{sessionId}": {
      "delete": "@{operationId=DeleteGameSessionV1SessionsBySessionId; parameters=System.Object[]; responses=; summary=Requests to disconnect the player from the session.; tags=System.Object[]}",
      "get": "@{operationId=GetGameSessionV1SessionsBySessionId; parameters=System.Object[]; responses=; summary=Gets the status of the specified session.; tags=System.Object[]}"
    },
    "/google-account/v1/authorization": {
      "delete": "@{operationId=DeleteGoogleAccountV1Authorization; parameters=System.Object[]; responses=; summary=Delete the current Google authorization session.; tags=System.Object[]}",
      "get": "@{operationId=GetGoogleAccountV1Authorization; parameters=System.Object[]; responses=; summary=Gets the current Google authorization status.; tags=System.Object[]}",
      "post": "@{operationId=PostGoogleAccountV1Authorization; parameters=System.Object[]; requestBody=; responses=; summary=Start an authorization request with Google.; tags=System.Object[]}"
    },
    "/info-radiator/v1/custom-heartbeat-metric/{name}": {
      "delete": "@{operationId=DeleteInfoRadiatorV1CustomHeartbeatMetricByName; parameters=System.Object[]; responses=; summary=Delete a custom heartbeat metric, if it exists; tags=System.Object[]}",
      "put": "@{operationId=PutInfoRadiatorV1CustomHeartbeatMetricByName; parameters=System.Object[]; requestBody=; responses=; summary=Create or update the value of a custom heartbeat metric; tags=System.Object[]}"
    },
    "/info-radiator/v1/time-sample/{phaseName}/end": {
      "post": "@{description=The time-sample APIs are deprecated and no longer do useful work. They will be removed in March 2024.; operationId=PostInfoRadiatorV1TimeSampleByPhaseNameEnd; parameters=System.Object[]; responses=; summary=Mark the end of the time phase sample and send an event to Analytics Platform conforming to the `riotclient__TimeSample__v4` schema.; tags=System.Object[]}"
    },
    "/info-radiator/v1/time-sample/{phaseName}/start": {
      "post": "@{description=The time-sample APIs are deprecated and no longer do useful work. They will be removed in March 2024.; operationId=PostInfoRadiatorV1TimeSampleByPhaseNameStart; parameters=System.Object[]; responses=; summary=Track the start time for a time phase sample of interest. Call `/info-radiator/v1/time-sample/{phase}/end` to mark the end of the sample.; tags=System.Object[]}"
    },
    "/jwt-authenticator/v1/verify": {
      "post": "@{operationId=PostJwtAuthenticatorV1Verify; parameters=System.Object[]; requestBody=; responses=; summary=Verify a JWT; tags=System.Object[]}"
    },
    "/kr-account/config/v1/config": {
      "get": "@{description=Debug information allowing the ability to introspect the current plugin config.; operationId=GetKrAccountConfigV1Config; parameters=System.Object[]; responses=; summary=The current plugin configuration.; tags=System.Object[]}"
    },
    "/kr-account/promotion/v1/session": {
      "get": "@{operationId=GetKrAccountPromotionV1Session; parameters=System.Object[]; responses=; summary=Get KR account session token for KR Account Promotion flow; tags=System.Object[]}"
    },
    "/loyalty/v1/debug/set-loyalty-resource/{pcbId}": {
      "post": "@{operationId=PostLoyaltyV1DebugSetLoyaltyResourceByPcbId; parameters=System.Object[]; responses=; summary=Sets a loyalty resource for testing purposes - DEBUG ONLY; tags=System.Object[]}"
    },
    "/loyalty/v1/loyalty-resource": {
      "get": "@{operationId=GetLoyaltyV1LoyaltyResource; parameters=System.Object[]; responses=; summary=Returns loyalty resource including pcbId if player's playing from pcbang or not found exception; tags=System.Object[]}"
    },
    "/mailbox/v1/check-new-mail": {
      "get": "@{description=\n**Description**\n\nThis API is subscribable and for notifications that new mail is available.\n; operationId=GetMailboxV1CheckNewMail; parameters=System.Object[]; responses=; summary=Returns if the mailbox has new mail; tags=System.Object[]}"
    },
    "/mailbox/v1/check-new-product-mail/{productId}": {
      "get": "@{description=\n**Description**\n\nThis API is subscribable and for notifications that new mail is available. This is the internal implementation meant to be used by other plugins.\n\nRequired arguments:\n```\nproductId: A standard [product identifier](https://gh.riotgames.com/shared-static-data/rpg/tree/master/products)\n```\n; operationId=GetMailboxV1CheckNewProductMailByProductId; parameters=System.Object[]; responses=; summary=Returns if the mailbox has new mail; tags=System.Object[]}"
    },
    "/mailbox/v1/debug/caller-id/mock-id": {
      "delete": "@{description=Deletes the currently set `productId` and `patchlineId`. Plugin APIs will receive `swagger` as the `productId`.; operationId=DeleteMailboxV1DebugCallerIdMockId; parameters=System.Object[]; responses=; summary=Stops mocking the caller ID for Swagger calls; tags=System.Object[]}",
      "get": "@{description=Returns the `productId` and `patchlineId` being passed to APIs in this plugin when called via Swagger.\n\nReturns 404 if a mock caller ID is not in use.; operationId=GetMailboxV1DebugCallerIdMockId; parameters=System.Object[]; responses=; summary=Checks the caller ID in use when APIs are called from Swagger; tags=System.Object[]}",
      "put": "@{description=Sets the `productId` and `patchlineId` to pass to APIs in this plugin during future calls from Swagger.\n\nUse this functionality to test APIs in this plugin with Swagger, as if they were being called from another product.; operationId=PutMailboxV1DebugCallerIdMockId; parameters=System.Object[]; requestBody=; responses=; summary=Sets the caller ID to use when calling this plugin from Swagger; tags=System.Object[]}"
    },
    "/mailbox/v1/enabled": {
      "get": "@{description=\n**Description**\n\nThis API is subscribable and use to verify the feature is enabled in the current loaded cluster config.\n\n; operationId=GetMailboxV1Enabled; parameters=System.Object[]; responses=; summary=Returns whether or not the mailbox feature is enabled for this environment; tags=System.Object[]}"
    },
    "/mailbox/v1/mail": {
      "post": "@{description=\n**Description**\n\nThis API allows for retrieving mail and the product ID is inferred.\n\nRequired request parameters:\n```\nincludedStates : A list of message states, like READ or ACKNOWLEDGED, that should be included.\n```\n; operationId=PostMailboxV1Mail; parameters=System.Object[]; requestBody=; responses=; summary=Returns a list of player's mail.; tags=System.Object[]}"
    },
    "/mailbox/v1/mail-state": {
      "put": "@{description=\n**Description**\n\nAllows marking mail as read or acknowledged -- 'new' is not a valid argument\n\nArgument Options:\n```\nACKNOWLEDGED,\nREAD\n```\n; operationId=PutMailboxV1MailState; parameters=System.Object[]; requestBody=; responses=; summary=Update the state of a message as read or acknowledged; tags=System.Object[]}"
    },
    "/mailbox/v1/mail/{productId}": {
      "post": "@{description=\n**Description**\n\nThis API allows for retrieving mail. Here, the productId is required. This is an internal API to be used by other plugins.\n\nRequired arguments:\n```\nproductId: A standard [product identifier](https://gh.riotgames.com/shared-static-data/rpg/tree/master/products)\n```\n; operationId=PostMailboxV1MailByProductId; parameters=System.Object[]; requestBody=; responses=; summary=Fetch mail for a player on behalf of a product.; tags=System.Object[]}"
    },
    "/mailbox/v1/ready": {
      "get": "@{description=\n**Description**\n\nSubscribe to this endpoint to know when it is safe to call other mailbox APIs.\n\nThe result is `true` when all of the following are true: mailbox has been enabled by configuration, the cluster configuration is loaded, player affinity is available, and the player is logged in.\n\nIf the result is `false`, do not attempt to call mailbox APIs.\n\n; operationId=GetMailboxV1Ready; parameters=System.Object[]; responses=; summary=Returns whether or not the mailbox feature is enabled and ready to use for this environment; tags=System.Object[]}"
    },
    "/matchmaking-service/v1/match/{check_id}/accept": {
      "post": "@{description=\n**Description**\n\nThis endpoint accepts the ready check and confirm the player is entering the match.\nIt's achived by calling equivalent endpoint in the matchmaking service.\n\n**Request Argument**\n\nPath argument\n* `check_id` - id of a ready check to accept\n\n**Returns**\n\n* GenericSuccess on successful request\n* Failure object on failed request\n\n**Error Codes**\n\nPossible error codes with general information about possible root causes:\n\n* `httpStatus: 400`\n    * `errorCode: BAD_REQUEST` `message: Bad parameter used as input` - test text\n        * At least one of the parameters you provided are invalid and did not pass matchmaking service parsing.\n\n* `httpStatus: 401`\n    * `errorCode: UNAUTHORIZED` `message: Request lacks valid authentication` - ie. Unauthorized from Matchmaking Service\n        * The player is not part of the ticket you are trying to act on\n        * Invalid or missing claims\n        * Your product does not have access to matchmaking service\n\n    * `errorCode: UNAUTHORIZED` `message: Unauthorized` - ie. Unauthorized from SGP\n        * Invalid token - It may be expired or your product does not have access to matchmaking service\n\n* `httpStatus: 404` `errorCode: NOT_FOUND` `message: Resource not found`\n    * The resource you are trying to act on, such as deleting or retrieving a ticket, does not exist in the Matchmaking system.\n\n* `httpStatus: 409` `errorCode: CONFLICT` `message: conflict occurred (puuid: {PUUID}, ticket_id: {TICKET_ID})`\n    * Usually caused by attempting to create a ticket for a product and PUUID combination that already exists.\n\n* `httpStatus: 500`\n    * `errorCode: INTERNAL_SERVER_ERROR`\n        * There may be variations to the message to explain exactly what went wrong, but logs should have the details needed to triage. These errors are unexpected and warrant an investigation into the issue.\n\n    * `endpoint_dependency_not_ready`\n        * One or more dependencies for endpoint are not ready yet\n\n    * `no_base_url_detected`\n        * Key `service-plugin.matchmaking-service.base_url` is missing in ublic client-config\n; operationId=PostMatchmakingServiceV1MatchByCheckIdAccept; parameters=System.Object[]; responses=; tags=System.Object[]}"
    },
    "/matchmaking-service/v1/match/{check_id}/decline": {
      "post": "@{description=\n**Description**\n\nThis endpoint declines the ready check and confirm the player is not entering the match.\nIt's achived by calling equivalent endpoint in the matchmaking service.\n\n**Request Argument**\n\nPath argument\n* `check_id` - id of a ready check to decline\n\n**Returns**\n\n* GenericSuccess on successful request\n* Failure object on failed request\n\n**Error Codes**\n\nPossible error codes with general information about possible root causes:\n\n* `httpStatus: 400`\n    * `errorCode: BAD_REQUEST` `message: Bad parameter used as input` - test text\n        * At least one of the parameters you provided are invalid and did not pass matchmaking service parsing.\n\n* `httpStatus: 401`\n    * `errorCode: UNAUTHORIZED` `message: Request lacks valid authentication` - ie. Unauthorized from Matchmaking Service\n        * The player is not part of the ticket you are trying to act on\n        * Invalid or missing claims\n        * Your product does not have access to matchmaking service\n\n    * `errorCode: UNAUTHORIZED` `message: Unauthorized` - ie. Unauthorized from SGP\n        * Invalid token - It may be expired or your product does not have access to matchmaking service\n\n* `httpStatus: 404` `errorCode: NOT_FOUND` `message: Resource not found`\n    * The resource you are trying to act on, such as deleting or retrieving a ticket, does not exist in the Matchmaking system.\n\n* `httpStatus: 409` `errorCode: CONFLICT` `message: conflict occurred (puuid: {PUUID}, ticket_id: {TICKET_ID})`\n    * Usually caused by attempting to create a ticket for a product and PUUID combination that already exists.\n\n* `httpStatus: 500`\n    * `errorCode: INTERNAL_SERVER_ERROR`\n        * There may be variations to the message to explain exactly what went wrong, but logs should have the details needed to triage. These errors are unexpected and warrant an investigation into the issue.\n\n    * `endpoint_dependency_not_ready`\n        * One or more dependencies for endpoint are not ready yet\n\n    * `no_base_url_detected`\n        * Key `service-plugin.matchmaking-service.base_url` is missing in ublic client-config\n; operationId=PostMatchmakingServiceV1MatchByCheckIdDecline; parameters=System.Object[]; responses=; tags=System.Object[]}"
    },
    "/matchmaking-service/v1/match/{ticket_id}": {
      "delete": "@{description=\n**Description**\n\nThis endpoint removes a ticket with given id from the Matchmaking flow.\nIt's achived by calling equivalent endpoint in the matchmaking service.\n\n**Request Argument**\n\nPath argument:\n* `ticket_id` - id of a ticket to remove\n\n**Returns**\n\n* GenericSuccess on successful request\n* Failure object on failed request\n\n**Error Codes**\n\nPossible error codes with general information about possible root causes:\n\n* `httpStatus: 400`\n    * `errorCode: BAD_REQUEST` `message: Bad parameter used as input` - test text\n        * At least one of the parameters you provided are invalid and did not pass matchmaking service parsing.\n\n* `httpStatus: 401`\n    * `errorCode: UNAUTHORIZED` `message: Request lacks valid authentication` - ie. Unauthorized from Matchmaking Service\n        * The player is not part of the ticket you are trying to act on\n        * Invalid or missing claims\n        * Your product does not have access to matchmaking service\n\n    * `errorCode: UNAUTHORIZED` `message: Unauthorized` - ie. Unauthorized from SGP\n        * Invalid token - It may be expired or your product does not have access to matchmaking service\n\n* `httpStatus: 404` `errorCode: NOT_FOUND` `message: Resource not found`\n    * The resource you are trying to act on, such as deleting or retrieving a ticket, does not exist in the Matchmaking system.\n\n* `httpStatus: 409` `errorCode: CONFLICT` `message: conflict occurred (puuid: {PUUID}, ticket_id: {TICKET_ID})`\n    * Usually caused by attempting to create a ticket for a product and PUUID combination that already exists.\n\n* `httpStatus: 500`\n    * `errorCode: INTERNAL_SERVER_ERROR`\n        * There may be variations to the message to explain exactly what went wrong, but logs should have the details needed to triage. These errors are unexpected and warrant an investigation into the issue.\n\n    * `endpoint_dependency_not_ready`\n        * One or more dependencies for endpoint are not ready yet\n\n    * `no_base_url_detected`\n        * Key `service-plugin.matchmaking-service.base_url` is missing in ublic client-config\n; operationId=DeleteMatchmakingServiceV1MatchByTicketId; parameters=System.Object[]; responses=; tags=System.Object[]}",
      "get": "@{description=\n**Description**\n\nThis endpoint gets the current state of a specified ticket.\nIt's achived by calling equivalent endpoint in the matchmaking service.\n\n**Request Argument**\n\nPath argument:\n* `ticket_id` - id of a ticket to remove\n\n**Returns**\n\nResponse Body:\n* `TicketState` Object:\n    * `id` - A string that contains ticket id\n    * `product` - A string that contains product id\n    * `shard` - A string that contains information about shard info\n    * `mode` - A string that contains information about matchmaking mode\n    * `submode` - An optional string that contains information about matchmaking submode\n    * `version` - A string that contains information about matchmaking version\n    * `state` - A string that contains information about state of match\n    * `match_id` - A string that contains information about match id\n    * `puuids` - A list of strings containing puuid of players participating in match\n    * `created_at` - A string that contains information about creation time of ticket\n    * `updated_at` - A string that contains information about update time of ticket\n    * `state_updated_at` - A string that contains information about update time of match state\n    * `ticket_age_ms` - A string that contains information about age of ticket in miliseconds\n\n**Error Codes**\n\nPossible error codes with general information about possible root causes:\n\n* `httpStatus: 400`\n    * `errorCode: BAD_REQUEST` `message: Bad parameter used as input` - test text\n        * At least one of the parameters you provided are invalid and did not pass matchmaking service parsing.\n\n* `httpStatus: 401`\n    * `errorCode: UNAUTHORIZED` `message: Request lacks valid authentication` - ie. Unauthorized from Matchmaking Service\n        * The player is not part of the ticket you are trying to act on\n        * Invalid or missing claims\n        * Your product does not have access to matchmaking service\n\n    * `errorCode: UNAUTHORIZED` `message: Unauthorized` - ie. Unauthorized from SGP\n        * Invalid token - It may be expired or your product does not have access to matchmaking service\n\n* `httpStatus: 404` `errorCode: NOT_FOUND` `message: Resource not found`\n    * The resource you are trying to act on, such as deleting or retrieving a ticket, does not exist in the Matchmaking system.\n\n* `httpStatus: 409` `errorCode: CONFLICT` `message: conflict occurred (puuid: {PUUID}, ticket_id: {TICKET_ID})`\n    * Usually caused by attempting to create a ticket for a product and PUUID combination that already exists.\n\n* `httpStatus: 500`\n    * `errorCode: INTERNAL_SERVER_ERROR`\n        * There may be variations to the message to explain exactly what went wrong, but logs should have the details needed to triage. These errors are unexpected and warrant an investigation into the issue.\n\n    * `endpoint_dependency_not_ready`\n        * One or more dependencies for endpoint are not ready yet\n\n    * `no_base_url_detected`\n        * Key `service-plugin.matchmaking-service.base_url` is missing in ublic client-config\n; operationId=GetMatchmakingServiceV1MatchByTicketId; parameters=System.Object[]; responses=; tags=System.Object[]}"
    },
    "/matchmaking-service/v1/matches": {
      "delete": "@{description=\n**Description**\n\nThis endpoint removes a player from the matchmaking flow, ie. ends their current request for a match in matchmaking.\nIt's achived by calling equivalent endpoint in the matchmaking service.\n\n**Request Argument**\n\nQuery arguments\n* `shard`: optional parameter storing shard info\n\n* `mode`: optional parameter storing matchmaking mode\n\n* `version`: optional parameter storing matchmaking version\n\n**Returns**\n\nResponse Body:\n* GenericSuccess on successful request\n* Failure object on failed request\n\n**Error Codes**\n\nPossible error codes with general information about possible root causes:\n\n* `httpStatus: 400`\n    * `errorCode: BAD_REQUEST` `message: Bad parameter used as input` - test text\n        * At least one of the parameters you provided are invalid and did not pass matchmaking service parsing.\n\n* `httpStatus: 401`\n    * `errorCode: UNAUTHORIZED` `message: Request lacks valid authentication` - ie. Unauthorized from Matchmaking Service\n        * The player is not part of the ticket you are trying to act on\n        * Invalid or missing claims\n        * Your product does not have access to matchmaking service\n\n    * `errorCode: UNAUTHORIZED` `message: Unauthorized` - ie. Unauthorized from SGP\n        * Invalid token - It may be expired or your product does not have access to matchmaking service\n\n* `httpStatus: 404` `errorCode: NOT_FOUND` `message: Resource not found`\n    * The resource you are trying to act on, such as deleting or retrieving a ticket, does not exist in the Matchmaking system.\n\n* `httpStatus: 409` `errorCode: CONFLICT` `message: conflict occurred (puuid: {PUUID}, ticket_id: {TICKET_ID})`\n    * Usually caused by attempting to create a ticket for a product and PUUID combination that already exists.\n\n* `httpStatus: 500`\n    * `errorCode: INTERNAL_SERVER_ERROR`\n        * There may be variations to the message to explain exactly what went wrong, but logs should have the details needed to triage. These errors are unexpected and warrant an investigation into the issue.\n\n    * `endpoint_dependency_not_ready`\n        * One or more dependencies for endpoint are not ready yet\n\n    * `no_base_url_detected`\n        * Key `service-plugin.matchmaking-service.base_url` is missing in ublic client-config\n; operationId=DeleteMatchmakingServiceV1Matches; parameters=System.Object[]; responses=; tags=System.Object[]}",
      "get": "@{description=\n**Description**\n\nThis endpoint gets the current state of a player who has entered matchmaking.\nIt's achived by calling equivalent endpoint in the matchmaking service.\n\n**Request Argument**\n\nQuery arguments\n* `shard`: optional parameter storing shard info\n\n* `mode`: optional parameter storing matchmaking mode\n\n* `version`: optional parameter storing matchmaking version\n\n**Returns**\n\nResponse Body:\n* `TicketsState` Object:\n    * `tickets`: A list containg `TicketState` objects\n        * `id` - A string that contains ticket id\n        * `product` - A string that contains product id\n        * `shard` - A string that contains information about shard info\n        * `mode` - A string that contains information about matchmaking mode\n        * `submode` - An optional string that contains information about matchmaking submode\n        * `version` - A string that contains information about matchmaking version\n        * `state` - A string that contains information about state of match\n        * `match_id` - A string that contains information about match id\n        * `puuids` - A list of strings containing puuid of players participating in match\n        * `created_at` - A string that contains information about creation time of ticket\n        * `updated_at` - A string that contains information about update time of ticket\n        * `state_updated_at` - A string that contains information about update time of match state\n        * `ticket_age_ms` - A string that contains information about age of ticket in miliseconds\n\n\n**Error Codes**\n\nPossible error codes with general information about possible root causes:\n\n* `httpStatus: 400`\n    * `errorCode: BAD_REQUEST` `message: Bad parameter used as input`\n        * At least one of the parameters you provided are invalid and did not pass matchmaking service parsing.\n\n* `httpStatus: 401`\n    * `errorCode: UNAUTHORIZED` `message: Request lacks valid authentication` - ie. Unauthorized from Matchmaking Service\n        * The player is not part of the ticket you are trying to act on\n        * Invalid or missing claims\n        * Your product does not have access to matchmaking service\n\n    * `errorCode: UNAUTHORIZED` `message: Unauthorized` - ie. Unauthorized from SGP\n        * Invalid token - It may be expired or your product does not have access to matchmaking service\n\n* `httpStatus: 404` `errorCode: NOT_FOUND` `message: Resource not found`\n    * The resource you are trying to act on, such as deleting or retrieving a ticket, does not exist in the Matchmaking system.\n\n* `httpStatus: 409` `errorCode: CONFLICT` `message: conflict occurred (puuid: {PUUID}, ticket_id: {TICKET_ID})`\n    * Usually caused by attempting to create a ticket for a product and PUUID combination that already exists.\n\n* `httpStatus: 422` `errorCode: UNPROCESSABLE_ENTITY` `message: ProductAlgorithms.Ruleset config is not found`\n    * No matchmaking algorithm has been configured for the given ticket create parameters.\n\n* `httpStatus: 500`\n    * `errorCode: INTERNAL_SERVER_ERROR`\n        * There may be variations to the message to explain exactly what went wrong, but logs should have the details needed to triage. These errors are unexpected and warrant an investigation into the issue.\n\n    * `endpoint_dependency_not_ready`\n        * One or more dependencies for endpoint are not ready yet\n\n    * `no_base_url_detected`\n        * Key `service-plugin.matchmaking-service.base_url` is missing in ublic client-config\n; operationId=GetMatchmakingServiceV1Matches; parameters=System.Object[]; responses=; tags=System.Object[]}",
      "post": "@{description=\n**Description**\n\nThis endpoint creates a Matchmaking ticket with the provided params.\nIt's achived by calling equivalent endpoint in the matchmaking service.\n\n**Request Argument**\n\nBody argument\n\n* `CreateMatchmakingTicketParams` Object:\n    * `shard`: parameter storing shard info\n    * `mode`: parameter storing matchmaking mode\n    * `mode`: optional parameter storing matchmaking mode\n    * `version`: parameter storing matchmaking version\n    * `additionalDataForAlgorithm`: parameter storing additional data required by matchmaking algorithm\n\n**Returns**\n\nResponse Body:\n* `CreateMatchmakingTicketResult` Object:\n    * `ticketId`: A string that contains ticket id\n\n**Error Codes**\n\nPossible error codes with general information about possible root causes:\n\n* `httpStatus: 400`\n    * `errorCode: BAD_REQUEST` `message: Bad parameter used as input`\n        * At least one of the parameters you provided are invalid and did not pass matchmaking service parsing.\n\n* `httpStatus: 401`\n    * `errorCode: UNAUTHORIZED` `message: Request lacks valid authentication` - ie. Unauthorized from Matchmaking Service\n        * The player is not part of the ticket you are trying to act on\n        * Invalid or missing claims\n        * Your product does not have access to matchmaking service\n\n    * `errorCode: UNAUTHORIZED` `message: Unauthorized` - ie. Unauthorized from SGP\n        * Invalid token - It may be expired or your product does not have access to matchmaking service\n\n* `httpStatus: 404` `errorCode: NOT_FOUND` `message: Resource not found`\n    * The resource you are trying to act on, such as deleting or retrieving a ticket, does not exist in the Matchmaking system.\n\n* `httpStatus: 409` `errorCode: CONFLICT` `message: conflict occurred (puuid: {PUUID}, ticket_id: {TICKET_ID})`\n    * Usually caused by attempting to create a ticket for a product and PUUID combination that already exists.\n\n* `httpStatus: 422` `errorCode: UNPROCESSABLE_ENTITY` `message: ProductAlgorithms.Ruleset config is not found`\n    * No matchmaking algorithm has been configured for the given ticket create parameters.\n\n* `httpStatus: 500`\n    * `errorCode: INTERNAL_SERVER_ERROR`\n        * There may be variations to the message to explain exactly what went wrong, but logs should have the details needed to triage. These errors are unexpected and warrant an investigation into the issue.\n\n    * `endpoint_dependency_not_ready`\n        * One or more dependencies for endpoint are not ready yet\n\n    * `no_base_url_detected`\n        * Key `service-plugin.matchmaking-service.base_url` is missing in ublic client-config\n; operationId=PostMatchmakingServiceV1Matches; parameters=System.Object[]; requestBody=; responses=; tags=System.Object[]}"
    },
    "/matchmaking/v1/debug/caller-id/mock-id": {
      "delete": "@{description=Deletes the currently set `productId` and `patchlineId`. Plugin APIs will receive `swagger` as the `productId`.; operationId=DeleteMatchmakingV1DebugCallerIdMockId; parameters=System.Object[]; responses=; summary=Stops mocking the caller ID for Swagger calls; tags=System.Object[]}",
      "get": "@{description=Returns the `productId` and `patchlineId` being passed to APIs in this plugin when called via Swagger.\n\nReturns 404 if a mock caller ID is not in use.; operationId=GetMatchmakingV1DebugCallerIdMockId; parameters=System.Object[]; responses=; summary=Checks the caller ID in use when APIs are called from Swagger; tags=System.Object[]}",
      "put": "@{description=Sets the `productId` and `patchlineId` to pass to APIs in this plugin during future calls from Swagger.\n\nUse this functionality to test APIs in this plugin with Swagger, as if they were being called from another product.; operationId=PutMatchmakingV1DebugCallerIdMockId; parameters=System.Object[]; requestBody=; responses=; summary=Sets the caller ID to use when calling this plugin from Swagger; tags=System.Object[]}"
    },
    "/matchmaking/v1/tickets/{ticket_id}": {
      "delete": "@{operationId=DeleteMatchmakingV1TicketsByTicketId; parameters=System.Object[]; responses=; summary=Delete the matchmaking ticket and remove player from matchmaking queue; tags=System.Object[]}",
      "get": "@{operationId=GetMatchmakingV1TicketsByTicketId; parameters=System.Object[]; responses=; summary=Get a Matchmaking Ticket associated with a ticketid; tags=System.Object[]}"
    },
    "/matchmaking/v1/tickets/{ticket_id}/ready-check": {
      "get": "@{operationId=GetMatchmakingV1TicketsByTicketIdReadyCheck; parameters=System.Object[]; responses=; summary=Get the ready-check status of the current ticket, if it exists; tags=System.Object[]}",
      "post": "@{operationId=PostMatchmakingV1TicketsByTicketIdReadyCheck; parameters=System.Object[]; requestBody=; responses=; summary=Accept or decline the ready check associated with a ticket id; tags=System.Object[]}"
    },
    "/name-check/v1/validate": {
      "get": "@{description=This API endpoint is deprecated and will be removed by 3/1/2023. Please do not use.; operationId=GetNameCheckV1Validate; parameters=System.Object[]; responses=; summary=Verify user input name.; tags=System.Object[]}"
    },
    "/nintendo-account/v1/authorization": {
      "post": "@{operationId=PostNintendoAccountV1Authorization; parameters=System.Object[]; requestBody=; responses=; summary=Gets authorization from the Nintendo Account of the player logged in the Nintendo Switch; tags=System.Object[]}"
    },
    "/nintendo-account/v1/network-service-accountid-token": {
      "post": "@{operationId=PostNintendoAccountV1NetworkServiceAccountidToken; parameters=System.Object[]; requestBody=; responses=; summary=Get the Network Service Account ID (NSA) for the player logged in the Nintendo Switch; tags=System.Object[]}"
    },
    "/nintendo-account/v1/player-nickname": {
      "get": "@{operationId=GetNintendoAccountV1PlayerNickname; parameters=System.Object[]; responses=; summary=Gets the player nickname of the Nintendo Account for the player logged in the Nintendo Switch; tags=System.Object[]}"
    },
    "/patch/v1/configuration": {
      "get": "@{operationId=GetPatchV1Configuration; parameters=System.Object[]; responses=; summary=Retrieve the configuration; tags=System.Object[]}",
      "put": "@{description=\n**Data**\n* `cache_path`:  Path to the global cache used to store downloaded chunks.\n* `cache_size`: Cache size in bytes.\n; operationId=PutPatchV1Configuration; parameters=System.Object[]; requestBody=; responses=; summary=Configure plugin settings such as cache size and location; tags=System.Object[]}"
    },
    "/patch/v1/installs": {
      "get": "@{operationId=GetPatchV1Installs; parameters=System.Object[]; responses=; summary=Get list of installs on disk; tags=System.Object[]}"
    },
    "/patch/v1/installs/{install-id}": {
      "delete": "@{description=\nDelete an install resource. All outstanding requests will be cancelled but the files on disk will be left intact.\n; operationId=DeletePatchV1InstallsByInstallId; parameters=System.Object[]; responses=; summary=Delete the install resource; tags=System.Object[]}",
      "get": "@{operationId=GetPatchV1InstallsByInstallId; parameters=System.Object[]; responses=; summary=Get detailed information about an install, including current requests and status.; tags=System.Object[]}",
      "put": "@{description=\n**Data**\n* `excluded_paths`: List of paths (relative to the install root) that are excluded from the update. Files under these paths won't be checked during the verification and repair processes.\n* `metadata_path`:  The location for the install .db and .manifest files. The extension will be directly appended to this path.\n* `seed_path`: The location where updated chunks will be stored for this install when performing a seed operation, and the location where chunks will be sourced from when performing a patch operation.\n; operationId=PutPatchV1InstallsByInstallId; parameters=System.Object[]; requestBody=; responses=; summary=Register a new install; tags=System.Object[]}"
    },
    "/patch/v1/installs/{install-id}/requests/patch": {
      "delete": "@{description=\nDelete the patch request, interrupting any ongoing patching operations.\n; operationId=DeletePatchV1InstallsByInstallIdRequestsPatch; parameters=System.Object[]; responses=; summary=Delete patch request for install; tags=System.Object[]}",
      "put": "@{description=\n**Note**\n* If a request already exists it will be replaced by the new resource.\n\n**Data**\n* `headers`: Headers to send with every request. If the manifest url is behind SCD then a Cookie header is required.\n* `url`: Url for the release manifest.\n* `max_download_speed`: Maximum download speed, in bytes/sec. If zero then no limits will be applied.\n* `repair`: Whether a full repair should be performed prior to the update.\n* `tags`: Tags to filter which content gets patched. https://riotsdk.rpg.riotgames.com/docs/for-users/patching/onboarding/localization/\n* `stage`: Only patch up to the specified stage.\n* `temp_path`: (Optional) Custom directory to use for working storage during patching.\n* `delete_foreign_paths`:  (optional) If true, paths that are not considered part of the install will be checked during the verification and repair processes and removed.\n; operationId=PutPatchV1InstallsByInstallIdRequestsPatch; parameters=System.Object[]; requestBody=; responses=; summary=Submit patch request for install; tags=System.Object[]}"
    },
    "/patch/v1/installs/{install-id}/requests/preview": {
      "delete": "@{description=\nDelete the preview request, interrupting any ongoing preview operations.\n; operationId=DeletePatchV1InstallsByInstallIdRequestsPreview; parameters=System.Object[]; responses=; summary=Delete preview request for install; tags=System.Object[]}",
      "put": "@{description=\n**Notes**\n* The request contains all the info needed, including the full url to the release manifest, http headers and tags.\n* If a request already exists it will be replaced by the new resource.\n\n**Data**\n* `headers`: Headers to send with every request. If the manifest url is behind SCD then a Cookie header is required.\n* `url`: Url for the release manifest.\n* `stage`: Only patch up to the specified stage.\n* `fast`: Whether to perform a fast (but less accurate) estimation.\n* `tags`: Tags to filter which content gets patched. https://riotsdk.rpg.riotgames.com/docs/for-users/patching/onboarding/localization/\n; operationId=PutPatchV1InstallsByInstallIdRequestsPreview; parameters=System.Object[]; requestBody=; responses=; summary=Submit preview request for install; tags=System.Object[]}"
    },
    "/patch/v1/installs/{install-id}/requests/repair": {
      "delete": "@{operationId=DeletePatchV1InstallsByInstallIdRequestsRepair; parameters=System.Object[]; responses=; summary=Delete the repair request, interrupting any ongoing repair operations.; tags=System.Object[]}",
      "put": "@{description=\n**Notes**\n* Allows you to perform a repair on a set of files or a full repair without having to wait or game client to exit. Only use this if you're\nabsolutely certain that the files are not currently in use.\n* Game is responsible for displaying repair progress and can get progress using the GET /patch/v1/installs/{install-id}/status/repair endpoint.\n\n**Data**\n* `files`: a list of file paths for files that need to be repaired. If none specified then the patcher will perform a full repair. File paths must\nbe relative to the install root.\n* `manifest_url`: Url for the release manifest.\n* `headers`: Headers to send with every request. If the manifest url is behind SCD then a Cookie header is required.\n* `max_download_speed`: Maximum download speed, in bytes/sec. If zero then no limits will be applied.\n* `allowed_http_fallback_hostnames`: List of hostnames for which we'll fall back to HTTP instead of HTTPS if they resolve to an RFC1918 private IP address.\n* `delete_foreign_paths`:  (optional) If true, paths that are not considered part of the install will be checked during the verification and repair processes and removed.\n; operationId=PutPatchV1InstallsByInstallIdRequestsRepair; parameters=System.Object[]; requestBody=; responses=; summary=Triggers a repair operation; tags=System.Object[]}"
    },
    "/patch/v1/installs/{install-id}/requests/seed": {
      "delete": "@{description=\nDelete the seed request, interrupting any ongoing seed operations.\n; operationId=DeletePatchV1InstallsByInstallIdRequestsSeed; parameters=System.Object[]; responses=; summary=Delete seed request for install; tags=System.Object[]}",
      "put": "@{description=\n**Notes**\n* Seeding will download any chunks needed to the seed path, but will not modify any files in the install directory. The seed path is specified in the install.\n* If a request already exists it will be replaced by the new resource. https://riotsdk.rpg.riotgames.com/docs/for-users/patching/concepts/seeding/\n\n**Data**\n* `headers`: Headers to send with every request. If the manifest url is behind SCD then a Cookie header is required.\n* `url`: Url for the release manifest.\n* `max_download_speed`: Maximum download speed, in bytes/sec. If zero then no limits will be applied.\n* `stage`: Only patch up to the specified stage.\n* `tags`: Tags to filter which content gets patched. https://riotsdk.rpg.riotgames.com/docs/for-users/patching/onboarding/localization/\n* `delete_foreign_paths`:  (optional) If true, paths that are not considered part of the install will be checked during the verification and repair processes and removed.\n; operationId=PutPatchV1InstallsByInstallIdRequestsSeed; parameters=System.Object[]; requestBody=; responses=; summary=Submit seed request for install; tags=System.Object[]}"
    },
    "/patch/v1/installs/{install-id}/status": {
      "get": "@{description=\n**Note**\n* The status is always relative to a manifest and set of tags, specified by the `url` and `tags` fields respectively.\n* If there is any work in progress, `url` and `tags` will match those from the request.\n* If there are no pending requests, `url` and `tags` will match the files in the install folder.\n\n**Responses**\n\n**Patch**\n* `updating`: Currently performing a patching / seeding request.\n* `out_of_date`: The last request was partially completed and more work needs to be done before all files are in sync with the release manifest.\n* `up_to_date`: The last request completed successfully and files are in sync with the release manifest.\n* `not_installed`: The last request completed successfully and detected that the install-id is not installed.\n* `pending_verify`: The last request has not completed verification step.\n\n**Seed**\n* `seeding`: Currently performing a seeding request.\n* `out_of_date`: The last request was partially completed and more work needs to be done before all data needed to update the install has been downloaded.\n* `up_to_date`: The last request completed successfully and all data needed to update the install has been downloaded.\n* `pending_verify`: The last request has not completed verification step.\n\n**Preview**\n* `pending`: The preview request has not finished.\n* `done`: The last preview request completed successfully.\n\n**Repair**\n* `manifest_url`: the url of the release manifest.\n* `repair_progress`: The progress of the repair operation. Contains:\n    * `bytes_to_repair`: Total number of bytes to read.\n    * `files_to_repair`: Total number of files to read.\n    * `repaired_bytes`: Number of bytes read from disk so far.\n    * `repaired_files`: Number of files read from disk so far.\n* `state`: The overall state of the repair operation. Possible states include:\n    * `pending`: No repair requests have been made.\n    * `in_progress`: Repair is in progress.\n    * `canceled`: The repair operation was canceled.\n    * `done`: Repair operation is complete.\n; operationId=GetPatchV1InstallsByInstallIdStatus; parameters=System.Object[]; responses=; summary=Retrieve the current patch, preview and seed statuses of an install resource; tags=System.Object[]}"
    },
    "/patch/v1/installs/{install-id}/status/patch": {
      "get": "@{description=\n**Notes**\n* The status is always relative to a manifest and set of tags, specified by the `url` and `tags` fields respectively.\n* If there is any work in progress, `url` and `tags` will match those from the request.\n* If there are no pending requests, `url` and `tags` will match the files in the install folder.\n\n**Response**\n\nThe `state` field will is populated based on the current work with the following values:\n* `updating`: Currently performing a patching / seeding request.\n* `out_of_date`: The last request was partially completed and more work needs to be done before all files are in sync with the release manifest.\n* `up_to_date`: The last request completed successfully and files are in sync with the release manifest.\n* `not_installed`: The last request completed successfully and detected that the install-id is not installed.\n* `pending_verify`: The last request has not completed verification step.\n; operationId=GetPatchV1InstallsByInstallIdStatusPatch; parameters=System.Object[]; responses=; summary=Retrieve the current patch status of an install.; tags=System.Object[]}"
    },
    "/patch/v1/installs/{install-id}/status/preview": {
      "get": "@{description=\n**Response**\n\nThe `state` field will is populated based on the current work with the following values:\n* `pending`: The preview request has not finished.\n* `done`: The last preview request completed successfully.\n; operationId=GetPatchV1InstallsByInstallIdStatusPreview; parameters=System.Object[]; responses=; summary=Retrieve the current preview status of an install.; tags=System.Object[]}"
    },
    "/patch/v1/installs/{install-id}/status/repair": {
      "get": "@{description=\n**Response**\n* `manifest_url`: the url of the release manifest.\n* `repair_progress`: The progress of the repair operation. Contains:\n    * `bytes_to_repair`: Total number of bytes to read.\n    * `files_to_repair`: Total number of files to read.\n    * `repaired_bytes`: Number of bytes read from disk so far.\n    * `repaired_files`: Number of files read from disk so far.\n* `state`: The overall state of the repair operation.\n    * `pending`: No repair requests have been made.\n    * `in_progress`: Repair is in progress.\n    * `canceled`: The repair operation was canceled.\n    * `done`: Repair operation is complete.\n; operationId=GetPatchV1InstallsByInstallIdStatusRepair; parameters=System.Object[]; responses=; summary=Retrieve the current repair status of an install.; tags=System.Object[]}"
    },
    "/patch/v1/installs/{install-id}/status/seed": {
      "get": "@{description=\n**Notes**\n* If there is any work in progress, `url` and `tags` will match those from the request.\n* If there are no pending requests, `url` and `tags` will match the files in the install folder.\n\n**Response**\n\nThe `state` field will is populated based on the current work with the following values:\n* `seeding`: Currently performing a seeding request.\n* `out_of_date`: The last request was partially completed and more work needs to be done before all files are in sync with the release manifest.\n* `up_to_date`: The last request completed successfully and files are in sync with the release manifest.\n* `pending_verify`: The last request has not completed verification step.\n; operationId=GetPatchV1InstallsByInstallIdStatusSeed; parameters=System.Object[]; responses=; summary=Retrieve the current seed status of an install.; tags=System.Object[]}"
    },
    "/payments/v1/initialize-purchase": {
      "post": "@{operationId=PostPaymentsV1InitializePurchase; parameters=System.Object[]; responses=; summary=Begin the purchase flow, receiving the URL to a web client.; tags=System.Object[]}"
    },
    "/platform-login/v1/status": {
      "get": "@{operationId=GetPlatformLoginV1Status; parameters=System.Object[]; responses=; summary=Returns the current login state of the client; tags=System.Object[]}"
    },
    "/platform-ui/v1/enabled": {
      "get": "@{operationId=GetPlatformUiV1Enabled; parameters=System.Object[]; responses=; summary=Returns true if platform-ui is enabled; tags=System.Object[]}"
    },
    "/platform-ui/v1/fre": {
      "delete": "@{operationId=DeletePlatformUiV1Fre; parameters=System.Object[]; responses=; summary=Disable FRE; tags=System.Object[]}",
      "get": "@{operationId=GetPlatformUiV1Fre; parameters=System.Object[]; responses=; summary=Get FRE status; tags=System.Object[]}",
      "post": "@{operationId=PostPlatformUiV1Fre; parameters=System.Object[]; responses=; summary=Enable FRE; tags=System.Object[]}"
    },
    "/platform-ui/v1/sdk-instance-id": {
      "get": "@{operationId=GetPlatformUiV1SdkInstanceId; parameters=System.Object[]; responses=; summary=Returns sdk instance id to be used with platform-ui views, necessary when running multiple instances of the SDK; tags=System.Object[]}"
    },
    "/platform-ui/v1/status": {
      "get": "@{operationId=GetPlatformUiV1Status; parameters=System.Object[]; responses=; summary=Returns current status of UI; tags=System.Object[]}"
    },
    "/play-restrictions/v1/debug/caller-id/mock-id": {
      "delete": "@{description=Deletes the currently set `productId` and `patchlineId`. Plugin APIs will receive `swagger` as the `productId`.; operationId=DeletePlayRestrictionsV1DebugCallerIdMockId; parameters=System.Object[]; responses=; summary=Stops mocking the caller ID for Swagger calls; tags=System.Object[]}",
      "get": "@{description=Returns the `productId` and `patchlineId` being passed to APIs in this plugin when called via Swagger.\n\nReturns 404 if a mock caller ID is not in use.; operationId=GetPlayRestrictionsV1DebugCallerIdMockId; parameters=System.Object[]; responses=; summary=Checks the caller ID in use when APIs are called from Swagger; tags=System.Object[]}",
      "put": "@{description=Sets the `productId` and `patchlineId` to pass to APIs in this plugin during future calls from Swagger.\n\nUse this functionality to test APIs in this plugin with Swagger, as if they were being called from another product.; operationId=PutPlayRestrictionsV1DebugCallerIdMockId; parameters=System.Object[]; requestBody=; responses=; summary=Sets the caller ID to use when calling this plugin from Swagger; tags=System.Object[]}"
    },
    "/play-restrictions/v1/restrictions": {
      "get": "@{operationId=GetPlayRestrictionsV1Restrictions; parameters=System.Object[]; responses=; summary=Get the current play restrictions; tags=System.Object[]}",
      "put": "@{description=\n**Description**\nAllows game teams to configure how various services pertaining to play restrictions (being able to communicate with other players in-game) are configured.\n\n**Argument**\n* `data`: A struct containing booleans for each service that comes under play-restrictions.\n; operationId=PutPlayRestrictionsV1Restrictions; parameters=System.Object[]; requestBody=; responses=; summary=Set the play restrictions for the SDK; tags=System.Object[]}"
    },
    "/player-account-service/v1/login-history/history": {
      "post": "@{description=This endpoint retrieves location history records for given PUUIDs by making a call to the service. \nFor each PUUID there will be only one location history record - the most recent one. \nThe limit on the list of puuids is 200. If more than 200 PUUIDs are in the request body, the service will return a HTTP 400. \n; operationId=PostPlayerAccountServiceV1LoginHistoryHistory; parameters=System.Object[]; requestBody=; responses=; tags=System.Object[]}"
    },
    "/player-account/aliases/v1/active": {
      "get": "@{description=Deprecated, please use v1/display-name to get the players game name and tag.; operationId=GetPlayerAccountAliasesV1Active; parameters=System.Object[]; responses=; summary=Returns the current active game name for the player.; tags=System.Object[]}"
    },
    "/player-account/aliases/v1/aliases": {
      "get": "@{operationId=GetPlayerAccountAliasesV1Aliases; parameters=System.Object[]; responses=; summary=Gets a list of all aliases for the player.; tags=System.Object[]}",
      "post": "@{operationId=PostPlayerAccountAliasesV1Aliases; parameters=System.Object[]; requestBody=; responses=; summary=Sets a new set of aliases for the player.; tags=System.Object[]}"
    },
    "/player-account/aliases/v1/display-name": {
      "get": "@{operationId=GetPlayerAccountAliasesV1DisplayName; parameters=System.Object[]; responses=; summary=Returns the current active, sanitized, game name and tag for the player.; tags=System.Object[]}"
    },
    "/player-account/aliases/v1/eligibility": {
      "post": "@{operationId=PostPlayerAccountAliasesV1Eligibility; parameters=System.Object[]; responses=; summary=Check if a player is eligible for a name change.; tags=System.Object[]}"
    },
    "/player-account/aliases/v1/generate-tagline": {
      "post": "@{operationId=PostPlayerAccountAliasesV1GenerateTagline; parameters=System.Object[]; requestBody=; responses=; summary=Returns a random tagline that is valid for the player.; tags=System.Object[]}"
    },
    "/player-account/aliases/v1/lookup": {
      "get": "@{operationId=GetPlayerAccountAliasesV1Lookup; parameters=System.Object[]; responses=; summary=Lookup a list of aliases with the provided gameName and optional tagLine.; tags=System.Object[]}"
    },
    "/player-account/aliases/v1/required": {
      "get": "@{operationId=GetPlayerAccountAliasesV1Required; parameters=System.Object[]; responses=; summary=Check if a player is required to set their name.; tags=System.Object[]}"
    },
    "/player-account/aliases/v1/validity": {
      "post": "@{operationId=PostPlayerAccountAliasesV1Validity; parameters=System.Object[]; requestBody=; responses=; summary=Checks a name for validity without saving it.; tags=System.Object[]}"
    },
    "/player-account/config/v1/config": {
      "get": "@{description=Debug information allowing the ability to introspect the current plugin config.; operationId=GetPlayerAccountConfigV1Config; parameters=System.Object[]; responses=; summary=The current plugin configuration.; tags=System.Object[]}"
    },
    "/player-account/login-history/v1/debug/cache": {
      "get": "@{description=This endpoint is used to get the conent of cache.\n; operationId=GetPlayerAccountLoginHistoryV1DebugCache; parameters=System.Object[]; responses=; tags=System.Object[]}",
      "put": "@{description=This endpoint is used to set the content of cache.\n; operationId=PutPlayerAccountLoginHistoryV1DebugCache; parameters=System.Object[]; requestBody=; responses=; tags=System.Object[]}"
    },
    "/player-account/login-history/v1/history": {
      "post": "@{description=This endpoint returns login location history records for each requested PUUID. \nThe most recent login location is the record provided. \nIf the caching mechanism is enabled, it will retrieve as many PUUIDs' records as possible from the cache, \nfor the remaining PUUIDs, it will call the service to retrieve appropriate records. \nIn the opposite case, all records will be retrieved from the service. \n\n; operationId=PostPlayerAccountLoginHistoryV1History; parameters=System.Object[]; requestBody=; responses=; tags=System.Object[]}"
    },
    "/player-account/lookup/v1/namesets-for-puuid": {
      "post": "@{description=\n**Description**\nRetrieves the namesets for the PUUID provided.\nA Nameset contains the user's name on the given platform.\nExample: SwitchNameset.name would be the Switch username associated with the user's PUUID on Switch\n\n** Body Argument **\n\n\"NamesetsForPuuidRequest\"\n    \"puuid\" - PUUID (String)\n\nResponse Body:\nNamesetsForPuuidResponse:\n    \"puuid\" - PUUID (String)\n    \"switchNameset\" - A SwitchNameset\n    \"playstationNameset\" - A PlaystationNameset\n    \"xboxNameset\" - An XboxNameset\n    \"alias\" - A RiotAlias\n    \"error\" - A String containing any errors\n\nSwitchNameset:\n    \"name\" - A String with the Switch name associated to the requested PUUID\n\nPlaystationNameset:\n    \"name\" - A String with the Playstation name associated to the requested PUUID\n\nXboxNameset:\n    \"name\" - A String with the Xbox name associated to the requested PUUID\n\nRiotAlias:\n    \"gameName\" - The users Game Name (String)\n    \"tagLine\" - The users Tag Line (String)\n\n; operationId=PostPlayerAccountLookupV1NamesetsForPuuid; parameters=System.Object[]; requestBody=; responses=; summary=Retrieves the namesets for a single PUUID; tags=System.Object[]}"
    },
    "/player-account/lookup/v1/namesets-for-puuids": {
      "post": "@{description=\n**Description**\nRetrieves the namesets for each PUUID provided.\nA Nameset contains the user's name on the given platform.\nExample: SwitchNameset.name would be the Switch username associated with the user's PUUID on Switch\n\n** Request Arguments **\n\nRequest Body Object:\nNamesetsForPuuidsRequest Object:\n    \"puuids\" - A list of PUUIDs to retrieve namesets for\n\nNamesetsForPuuidsResponse Body:\n    \"namesets\" - A list of NamesetsResponseElements\n\nNamesetsResponseElement:\n    \"puuid\" - PUUID (String)\n    \"switchNameset\" - A SwitchNameset\n    \"playstationNameset\" - A PlaystationNameset\n    \"xboxNameset\" - An XboxNameset\n    \"alias\" - A RiotAlias\n    \"error\" - A String containing any errors\n\nSwitchNameset:\n    \"name\" - A String with the Switch name associated to the requested PUUID\n\nPlaystationNameset:\n    \"name\" - A String with the Playstation name associated to the requested PUUID\n\nXboxNameset:\n    \"name\" - A String with the Xbox name associated to the requested PUUID\n\nRiotAlias:\n    \"gameName\" - The users Game Name (String)\n    \"tagLine\" - The users Tag Line (String)\n\n; operationId=PostPlayerAccountLookupV1NamesetsForPuuids; parameters=System.Object[]; requestBody=; responses=; summary=Retrieves the namesets for each PUUID provided; tags=System.Object[]}"
    },
    "/player-account/lookup/v1/puuids-for-consoleids": {
      "post": "@{description=\n**Description**\nRetrieves the PUUIDs for each Console ID provided.\n\n** Request Arguments **\n\nRequest Body Object:\nConsoleIdsToPuuidsRequest Object:\n    \"consoleIds\" - A list of console IDs to retrieve PUUIDs for\n    \"environment\" - A String name for the platform environment (e.g. \"sp-int\")\n\nConsoleIdsToPuuidsResponse Body:\n    \"response\" - A list of ConsoleIdToPuuidResponseElements\n\nPuuidAndProvider:\n    \"puuid\" - The PUUID associated with the Console ID\n    \"providerId\" - A String ID for the provider (e.g. as \"123abc123\")\n    \"error\" - A String containing any errors (e.g. \"No matching account found.\")\n\n; operationId=PostPlayerAccountLookupV1PuuidsForConsoleids; parameters=System.Object[]; requestBody=; responses=; summary=Retrieves the PUUIDs for each Console ID provided; tags=System.Object[]}"
    },
    "/player-account/lookup/v1/toggle-mock-api": {
      "post": "@{description=\n**Description**\n-- To be filled out when Mock implementation is done.\nSDKFEAT-1393: [Mock] Get Console Blocked User List\n; operationId=PostPlayerAccountLookupV1ToggleMockApi; parameters=System.Object[]; requestBody=; responses=; summary=Set whether the plugin should use a mock friends API or not and if so, how the mock API should behave; tags=System.Object[]}"
    },
    "/player-account/promotion/v1/eligibility": {
      "get": "@{operationId=GetPlayerAccountPromotionV1Eligibility; parameters=System.Object[]; responses=; summary=Return the latest cached eligibility check.; tags=System.Object[]}",
      "post": "@{operationId=PostPlayerAccountPromotionV1Eligibility; parameters=System.Object[]; responses=; summary=Check if a player is eligible for promotion.; tags=System.Object[]}"
    },
    "/player-account/promotion/v1/fields": {
      "get": "@{description=Returns an empty list until an eligibility check has been performed.; operationId=GetPlayerAccountPromotionV1Fields; parameters=System.Object[]; responses=; summary=Get a list of fields the player can update.; tags=System.Object[]}"
    },
    "/player-account/promotion/v1/promotion": {
      "post": "@{operationId=PostPlayerAccountPromotionV1Promotion; parameters=System.Object[]; requestBody=; responses=; summary=Promote an account by providing missing details.; tags=System.Object[]}"
    },
    "/player-account/regions/v1/eligibility": {
      "get": "@{operationId=GetPlayerAccountRegionsV1Eligibility; parameters=System.Object[]; responses=; summary=Check if a player is eligible for regions selection.; tags=System.Object[]}"
    },
    "/player-account/regions/v1/region/{regionCode}": {
      "post": "@{operationId=PostPlayerAccountRegionsV1RegionByRegionCode; parameters=System.Object[]; responses=; summary=assign the given region to player account; tags=System.Object[]}"
    },
    "/player-account/vng/v1/status/ready": {
      "get": "@{operationId=GetPlayerAccountVngV1StatusReady; parameters=System.Object[]; responses=; summary=Whether VNG status endpoints are ready to handle requests (RSO access token exists); tags=System.Object[]}"
    },
    "/player-account/vng/v1/status/{productId}": {
      "get": "@{operationId=GetPlayerAccountVngV1StatusByProductId; parameters=System.Object[]; responses=; summary=Check cache to see if a player must register with the Vietnamese government; otherwise, check with VNG (via the Player Account Service).; tags=System.Object[]}",
      "post": "@{operationId=PostPlayerAccountVngV1StatusByProductId; parameters=System.Object[]; responses=; summary=Check with VNG (via the Player Account Service) to see if a player must register with the Vietnamese government.; tags=System.Object[]}"
    },
    "/player-account/vng/v1/web-url/{productId}": {
      "post": "@{operationId=PostPlayerAccountVngV1WebUrlByProductId; parameters=System.Object[]; requestBody=; responses=; summary=Create the external web url with the given redirect-uri; tags=System.Object[]}"
    },
    "/player-affinity/affinity/v1/token": {
      "post": "@{description=Endpoint deleted November 2021; Please use 'player-affinity/service/v2/token'.; operationId=PostPlayerAffinityAffinityV1Token; parameters=System.Object[]; requestBody=; responses=; summary=Get a player affinity token.; tags=System.Object[]}"
    },
    "/player-affinity/config/v1/config": {
      "get": "@{description=Debug information allowing the ability to introspect the current plugin config.; operationId=GetPlayerAffinityConfigV1Config; parameters=System.Object[]; responses=; summary=The current plugin configuration.; tags=System.Object[]}"
    },
    "/player-affinity/config/v1/status": {
      "get": "@{description=Returns the current readiness of the plugin.; operationId=GetPlayerAffinityConfigV1Status; parameters=System.Object[]; responses=; summary=The current plugin readiness.; tags=System.Object[]}"
    },
    "/player-affinity/product/v1/token": {
      "post": "@{description=Endpoint deleted November 2021; Please use 'player-affinity/product/v2/token'.; operationId=PostPlayerAffinityProductV1Token; parameters=System.Object[]; requestBody=; responses=; summary=Get a player product affinity token, save it to the local cache, and notify subscribers. Retrieve from local cache on error.; tags=System.Object[]}"
    },
    "/player-affinity/product/v1/token/{product}": {
      "get": "@{description=Endpoint deleted November 2021; Please use 'player-affinity/product/v2/token/{product}'.; operationId=GetPlayerAffinityProductV1TokenByProduct; parameters=System.Object[]; responses=; summary=Get the cached product affinity token.; tags=System.Object[]}"
    },
    "/player-affinity/product/v2/cached-affinity/{product}": {
      "get": "@{operationId=GetPlayerAffinityProductV2CachedAffinityByProduct; parameters=System.Object[]; responses=; summary=Get the cached product affinity.; tags=System.Object[]}"
    },
    "/player-affinity/product/v2/token": {
      "post": "@{operationId=PostPlayerAffinityProductV2Token; parameters=System.Object[]; requestBody=; responses=; summary=Get a player product affinity token, save the affinity to the local cache, and notify subscribers.; tags=System.Object[]}"
    },
    "/player-affinity/product/v2/token/debug": {
      "post": "@{operationId=PostPlayerAffinityProductV2TokenDebug; parameters=System.Object[]; requestBody=; responses=; summary=DEBUG: For debugging subscribers. Save a new product affinity token to the local cache and notify subscribers.; tags=System.Object[]}"
    },
    "/player-affinity/product/v2/token/{product}": {
      "get": "@{operationId=GetPlayerAffinityProductV2TokenByProduct; parameters=System.Object[]; responses=; summary=Get the player product affinity token.; tags=System.Object[]}"
    },
    "/player-affinity/service/v1/token": {
      "post": "@{description=Endpoint deleted November 2021; Please use 'player-affinity/service/v2/token'.; operationId=PostPlayerAffinityServiceV1Token; parameters=System.Object[]; requestBody=; responses=; summary=Get a player service affinity token.; tags=System.Object[]}"
    },
    "/player-affinity/service/v2/cached-affinity/{service}": {
      "get": "@{operationId=GetPlayerAffinityServiceV2CachedAffinityByService; parameters=System.Object[]; responses=; summary=Get the cached service affinity.; tags=System.Object[]}"
    },
    "/player-affinity/service/v2/token": {
      "post": "@{operationId=PostPlayerAffinityServiceV2Token; parameters=System.Object[]; requestBody=; responses=; summary=Get a player service affinity token and save the affinity to the local cache.; tags=System.Object[]}"
    },
    "/player-affinity/shard": {
      "put": "@{operationId=PutPlayerAffinityShard; parameters=System.Object[]; requestBody=; responses=; summary=Sets the current; tags=System.Object[]}"
    },
    "/player-preferences/v1/data-json/productId/{productId}/type/{type}": {
      "get": "@{operationId=GetPlayerPreferencesV1DataJsonProductIdByProductIdTypeByType; parameters=System.Object[]; responses=; summary=Get decompressed and decoded JSON player preferences information from a specified type from the Player Preferences service; tags=System.Object[]}",
      "put": "@{operationId=PutPlayerPreferencesV1DataJsonProductIdByProductIdTypeByType; parameters=System.Object[]; requestBody=; responses=; summary=Puts any valid JSON object for the specified type into the Player Preferences service; tags=System.Object[]}"
    },
    "/player-preferences/v1/data-json/{type}": {
      "get": "@{operationId=GetPlayerPreferencesV1DataJsonByType; parameters=System.Object[]; responses=; summary=Get decompressed and decoded JSON player preferences information from a specified type from the Player Preferences service; tags=System.Object[]}",
      "put": "@{operationId=PutPlayerPreferencesV1DataJsonByType; parameters=System.Object[]; requestBody=; responses=; summary=Puts any valid JSON object for the specified type into the Player Preferences service; tags=System.Object[]}"
    },
    "/player-preferences/v1/data/{type}": {
      "get": "@{operationId=GetPlayerPreferencesV1DataByType; parameters=System.Object[]; responses=; summary=Get decompressed and decoded player preferences information from a specified type from the Player Preferences service as string; tags=System.Object[]}",
      "put": "@{operationId=PutPlayerPreferencesV1DataByType; parameters=System.Object[]; requestBody=; responses=; summary=Puts any string for the specified type into the Player Preferences service; tags=System.Object[]}"
    },
    "/player-preferences/v1/debug/caller-id/mock-id": {
      "delete": "@{description=Deletes the currently set `productId` and `patchlineId`. Plugin APIs will receive `swagger` as the `productId`.; operationId=DeletePlayerPreferencesV1DebugCallerIdMockId; parameters=System.Object[]; responses=; summary=Stops mocking the caller ID for Swagger calls; tags=System.Object[]}",
      "get": "@{description=Returns the `productId` and `patchlineId` being passed to APIs in this plugin when called via Swagger.\n\nReturns 404 if a mock caller ID is not in use.; operationId=GetPlayerPreferencesV1DebugCallerIdMockId; parameters=System.Object[]; responses=; summary=Checks the caller ID in use when APIs are called from Swagger; tags=System.Object[]}",
      "put": "@{description=Sets the `productId` and `patchlineId` to pass to APIs in this plugin during future calls from Swagger.\n\nUse this functionality to test APIs in this plugin with Swagger, as if they were being called from another product.; operationId=PutPlayerPreferencesV1DebugCallerIdMockId; parameters=System.Object[]; requestBody=; responses=; summary=Sets the caller ID to use when calling this plugin from Swagger; tags=System.Object[]}"
    },
    "/player-preferences/v1/ready": {
      "get": "@{operationId=GetPlayerPreferencesV1Ready; parameters=System.Object[]; responses=; summary=True if the plugin is ready to be used; tags=System.Object[]}"
    },
    "/player-reporting/v1/debug/simulate-reporter-feedback/{category}": {
      "post": "@{description=\n**Data**\n* `category`: The category is a key used to create the localized message for the player. As an example, `CHEATING` is the category\nsent when a player's report for cheating was utilized for penalizing a cheater. If the category is unrecognized, a fallback message will be used.\n; operationId=PostPlayerReportingV1DebugSimulateReporterFeedbackByCategory; parameters=System.Object[]; responses=; summary=Simulate sending a reporting feedback message to this player with a specific report category.; tags=System.Object[]}"
    },
    "/player-reporting/v1/report": {
      "post": "@{description=\n**Data**\n* `categories`: List of category strings that player is reporting another player for. Different products use different categories.\n* `comment`: Comment associated with this report.\n* `location`: The location where the offending behavior occurred. Example: `in-game`.\n* `match_token`: The reporting player's match token, which is a signed JWT. See Platform docs for more info on match tokens.\n* `offender_puuid`: Whom the player is reporting.\n\n**Response**\n\nThis endpoint can return the following response codes:\n* `204`: Report successfully submitted. Note that in some cases it's intended UX that the submission is a \"success\" even if the report cannot be submitted.\n* `401`: Client is unable to retrieve current player's access token, which is required. Most common when trying to submit a report without having first logged in.\n\n\nEndpoint deleted June 2022; Please use '/player-reporting/v2/report'.; operationId=PostPlayerReportingV1Report; parameters=System.Object[]; requestBody=; responses=; tags=System.Object[]}"
    },
    "/player-reporting/v1/reporter-feedback": {
      "get": "@{description=\n**Data**\n* Response is a JSON map of `id` --> individual reporter feedback messages. Example:\n```json\n{\n\"1\": {\n    \"locale\": \"en_US\",\n    \"category\": \"CHEATING\",\n    \"message\": \"Your report of cheating has been verified.\",\n    \"title\": \"Report Feedback\"\n}\n}\n```\n\n* `locale`: Detected locale of player and what locale the message was localized to.\n* `category`: Category of the report--an internal string. Category keys to different localized messages.\n* `message`: Localized message to display to player.\n* `title`: Localized message title to display to player.\n\nResponse will be an empty map `{}` if there are no reporter-feedback messages to display.\n; operationId=GetPlayerReportingV1ReporterFeedback; parameters=System.Object[]; responses=; summary=Provides a list of unacknowledged localized reporter feedback messages to show the player.; tags=System.Object[]}"
    },
    "/player-reporting/v1/reporter-feedback/ack": {
      "post": "@{operationId=PostPlayerReportingV1ReporterFeedbackAck; parameters=System.Object[]; responses=; summary=Acknowledges all reporter feedbacks.; tags=System.Object[]}"
    },
    "/player-reporting/v1/reporter-feedback/ack/{id}": {
      "post": "@{description=\n**Description**\n\nSee GET reporter feedback endpoint for more info on how to find `{id}`.\n\n**Response**\nThis endpoint will always return a 2xx response code and a boolean response:\n* `true`: Reporter Feedback message with given ID was found and acknowledged.\n* `false`: No Reporter Feedback message with given ID was found.\n; operationId=PostPlayerReportingV1ReporterFeedbackAckById; parameters=System.Object[]; responses=; summary=Acknowledges a specific reporter feedback. Returns true if we can find a reporter feedback that matches that ID. Returns false if we can't.; tags=System.Object[]}"
    },
    "/player-reporting/v1/status": {
      "get": "@{description=\n**Description**\n\nReturns `true` if the plugin is ready to receive reports. Note that from the perspective of plugin customers submitting reports,\nreports can be \"successfully submitted\" even if the plugin is not ready to receive reports. This is an intended experience.\n; operationId=GetPlayerReportingV1Status; parameters=System.Object[]; responses=; summary=For Integration test & debugging use only.; tags=System.Object[]}"
    },
    "/player-reporting/v2/report": {
      "post": "@{description=\nReporting V2 is similar to v1, but the token can accept more types than just a MATCH_TOKEN to allow support for reporting guilds and potentially other entities in the future.\n**Data**\n* `categories`: List of category strings that player is reporting another player for. Different products use different categories.\n* `comment`: Player written comment associated with this report.\n* `location`: The location where the offending behavior occurred. Example: `in-game`.\n* `tokenType`: The type of information the token contains. Example: `MATCH_TOKEN`, `GUILD_TOKEN`.\n* `token`: A signed JWT with a format matching the tokenType. See Platform docs for more info on token formats and types.\n* `offenderId`: The id of the offender. For players this is their puuid.\n\n**Response**\n\nThis endpoint can return the following response codes:\n* `204`: Report successfully submitted. Note that in some cases it's intended UX that the submission is a \"success\" even if the report cannot be submitted.\n* `401`: Client is unable to retrieve current player's access token, which is required. Most common when trying to submit a report without having first logged in.\n; operationId=PostPlayerReportingV2Report; parameters=System.Object[]; requestBody=; responses=; tags=System.Object[]}"
    },
    "/player-session-lifecycle/v1/login-strategy": {
      "put": "@{operationId=PutPlayerSessionLifecycleV1LoginStrategy; parameters=System.Object[]; requestBody=; responses=; summary=Set a Login Strategy for the current session.; tags=System.Object[]}"
    },
    "/player-session-lifecycle/v1/session": {
      "delete": "@{operationId=DeletePlayerSessionLifecycleV1Session; parameters=System.Object[]; responses=; summary=Delete the current lifecycle session; tags=System.Object[]}",
      "get": "@{operationId=GetPlayerSessionLifecycleV1Session; parameters=System.Object[]; responses=; summary=Get the login info of the player. Subscribe to this endpoint then make a POST to be notified when player has been logged in; tags=System.Object[]}",
      "post": "@{description=Automatically attempt to handle RSO processing up to the point the player is logged in.; operationId=PostPlayerSessionLifecycleV1Session; parameters=System.Object[]; requestBody=; responses=; summary=Create a session used to retrieve common player authentication information.; tags=System.Object[]}",
      "put": "@{operationId=PutPlayerSessionLifecycleV1Session; parameters=System.Object[]; requestBody=; responses=; summary=Update a session used to retrieve common player authentication information. Remember to pass all of the session config values on update. Use `PUT /player-session-lifecycle/v1/login-strategy` when updating the login strategy.; tags=System.Object[]}"
    },
    "/player-session-lifecycle/v1/session/retry": {
      "post": "@{operationId=PostPlayerSessionLifecycleV1SessionRetry; parameters=System.Object[]; responses=; summary=Retry the last known internal action causing the current error state.; tags=System.Object[]}"
    },
    "/playstation-account/v1/authorization": {
      "post": "@{operationId=PostPlaystationAccountV1Authorization; parameters=System.Object[]; requestBody=; responses=; summary=Gets authorization from the Playstation Network Account of the player logged in the Playstation Network; tags=System.Object[]}"
    },
    "/playstation-account/v1/authorization-consent": {
      "get": "@{operationId=GetPlaystationAccountV1AuthorizationConsent; parameters=System.Object[]; responses=; summary=Authorization consent status for PlayStation; tags=System.Object[]}",
      "put": "@{operationId=PutPlaystationAccountV1AuthorizationConsent; parameters=System.Object[]; requestBody=; responses=; summary=Update authorization consent status for PlayStation; tags=System.Object[]}"
    },
    "/playstation-account/v1/player-nickname": {
      "get": "@{operationId=GetPlaystationAccountV1PlayerNickname; parameters=System.Object[]; responses=; summary=Gets the player nickname of the Playstation Account for the player logged in the Playstation device; tags=System.Object[]}"
    },
    "/playstation-account/v1/player-nickname-without-consent": {
      "get": "@{operationId=GetPlaystationAccountV1PlayerNicknameWithoutConsent; parameters=System.Object[]; responses=; summary=Gets the player nickname of the Playstation Account for the player logged in the Playstation device without checking for consent authorization; tags=System.Object[]}"
    },
    "/playstation-account/v1/user": {
      "get": "@{operationId=GetPlaystationAccountV1User; parameters=System.Object[]; responses=; summary=Retrieve Playstation profile and PSN account info; tags=System.Object[]}",
      "post": "@{operationId=PostPlaystationAccountV1User; parameters=System.Object[]; responses=; summary=Tries to sign in a player; tags=System.Object[]}"
    },
    "/plugin-manager/v1/status": {
      "get": "@{operationId=GetPluginManagerV1Status; parameters=System.Object[]; responses=; summary=Get the status of the plugin manager.; tags=System.Object[]}"
    },
    "/plugin-manager/v2/descriptions": {
      "get": "@{operationId=GetPluginManagerV2Descriptions; parameters=System.Object[]; responses=; summary=Get all plugin descriptions.; tags=System.Object[]}"
    },
    "/plugin-manager/v2/descriptions/{plugin}": {
      "get": "@{operationId=GetPluginManagerV2DescriptionsByPlugin; parameters=System.Object[]; responses=; summary=Get a plugin description.; tags=System.Object[]}"
    },
    "/plugin-manager/v2/plugins": {
      "get": "@{operationId=GetPluginManagerV2Plugins; parameters=System.Object[]; responses=; summary=Get diagnostic information for all plugins.; tags=System.Object[]}"
    },
    "/plugin-manager/v2/plugins/{plugin}": {
      "get": "@{operationId=GetPluginManagerV2PluginsByPlugin; parameters=System.Object[]; responses=; summary=Get diagnostic information for a single plugin.; tags=System.Object[]}"
    },
    "/prime-gaming/v1/login": {
      "delete": "@{description=\n**PrimeGamingPrimeGamingLoginResponse**\nLoginStatus consisting of:\n* `status`: The current state of the login with Amazon. One of: `logged_out`, `logging_in`, `logged_in`, `logging_out`, `error` (PrimeGamingPrimeGamingLoginStatus enum)\n* `amazonAccessToken`: The access token of the Amazon login, or empty `\"\"` if none is present.\n; operationId=DeletePrimeGamingV1Login; parameters=System.Object[]; responses=; summary=Logout from Amazon; tags=System.Object[]}",
      "get": "@{description=\n**PrimeGamingPrimeGamingLoginResponse**\n* `status`: The current state of the login with Amazon. One of: `logged_out`, `logging_in`, `logged_in`, `logging_out`, `error` (PrimeGamingPrimeGamingLoginStatus enum)\n* `amazonAccessToken`: The access token of the Amazon login, or empty `\"\"` if none is present.\n; operationId=GetPrimeGamingV1Login; parameters=System.Object[]; responses=; summary=Get the Amazon login status; tags=System.Object[]}",
      "post": "@{description=\n**PrimeGamingPrimeGamingLoginResponse**\n* `status`: The current state of the login with Amazon. One of: `logged_out`, `logging_in`, `logged_in`, `logging_out`, `error` (PrimeGamingPrimeGamingLoginStatus enum)\n* `amazonAccessToken`: The access token of the Amazon login, or empty `\"\"` if none is present.; operationId=PostPrimeGamingV1Login; parameters=System.Object[]; responses=; summary=Initiate Login with Amazon to enable Prime Gaming; tags=System.Object[]}"
    },
    "/prime-gaming/v1/supported": {
      "get": "@{description=\n**PrimeGamingPrimeGamingSupportStatus**\n* `supported`: true if Prime Gaming is supported in this game, false otherwise\n* `details`: Description about why Prime Gaming may not be supported in this game. This is for debugging purposes only.\n; operationId=GetPrimeGamingV1Supported; parameters=System.Object[]; responses=; summary=Check whether Prime Gaming is supported on the current platform; tags=System.Object[]}"
    },
    "/privacy/v1/tracking": {
      "get": "@{description=\n**iOS specific considerations**\n\nWhen the setting is changed while the game is in the background, the RiotGamesApi currently does not\nimmediately get notified of a change in tracking permissions, but checks again as those permissions\nare required, and notifies on change. If games need real-time access to tracking settings after a\nbackground, calling this endpoint after a return from background will force the SDK to look for\nsetting changes immediately and will also trigger a notification if the value has changed.\n\n**Response Codes**\n- `200`: Privacy settings and state are available.\n\n**Data**\n- `canUseTracking`: If `true`, the player's tracking information can be used.\n- `canRequestTrackingPermission`: If `true`, POST /privacy/v1/tracking/request-permission to request\n  permission to track the player.\n- `state`: Indicates if we have not yet requested tracking permissions (`Unrequested`), if we are\n  in the process of requesting permission to track (`Requesting`), and if we have completed that\n  request at any time in the past (`Completed`).\n; operationId=GetPrivacyV1Tracking; parameters=System.Object[]; responses=; summary=Retrieves privacy tracking settings and state.; tags=System.Object[]}"
    },
    "/privacy/v1/tracking/request-permission": {
      "post": "@{description=\n**Response Codes**\n- `200`: Request is in flight, subscribe to `/privacy/v1/tracking` for updates.\n- `405`: Unable to request permission for this platform.\n- `409`: A request for permission is already in flight, or is unnecessary (for instance, if the\n  player has declined tracking.)\n- `500`: The Info.plist file for the app is missing a NSUserTrackingUsageDescription entry. The\n  Apple APIs cannot function without it.\n; operationId=PostPrivacyV1TrackingRequestPermission; parameters=System.Object[]; responses=; summary=Ask the player for permission to track them via telemetry; tags=System.Object[]}"
    },
    "/private-settings/v1/settings": {
      "delete": "@{operationId=DeletePrivateSettingsV1Settings; parameters=System.Object[]; responses=; summary=Clear all private settings; tags=System.Object[]}"
    },
    "/private-settings/v1/settings/{userid}/{key}": {
      "get": "@{operationId=GetPrivateSettingsV1SettingsByUseridByKey; parameters=System.Object[]; responses=; summary=For facilitating testing. Plugins should access private-settings via config key `private.user.<userid>.<key>`.; tags=System.Object[]}",
      "put": "@{operationId=PutPrivateSettingsV1SettingsByUseridByKey; parameters=System.Object[]; requestBody=; responses=; summary=Update an individual private setting configuration. Upon success, configuration data within `private.user.<userid>.<key>` is updated and platform-specific settings 'save' systems are notified.; tags=System.Object[]}"
    },
    "/private-settings/v1/token/{userid}": {
      "get": "@{description=API only enabled when `private-settings.multi-user-mode` is set to `true` (Consoles default `true`, else `false`).\n\n`token` refers to a compressed and url-safe base64 encoded token of private settings for the user.\n\n`userId` in this API refers to the platform-specific identifier for an active profile or user account.\n\n * xbox: XUID\n * playstation: Account ID\n * switch: NSA ID\n\nPlatforms not listed do not need to use this API, as private settings persistence is managed by this SDK.; operationId=GetPrivateSettingsV1TokenByUserid; parameters=System.Object[]; responses=; summary=Only valid after a token has been restored or reset via PUT. Subscribe (or call) to this endpoint to receive updates on modifications to the private-settings for the given `userId`. Host applications should include this token with platform-specific data saves for the `userId`.; tags=System.Object[]}",
      "put": "@{description=Only call once per user, per session.\n\nAPI only enabled when `private-settings.multi-user-mode` is set to `true` (Consoles default `true`, else `false`).\n\n`token` refers to a compressed and url-safe base64 encoded token of private settings for the user.\n\n`userId` in this API refers to the platform-specific identifier for an active profile or user account.\n\n * xbox: XUID\n * playstation: Account ID\n * switch: NSA ID\n\nPlatforms not listed do not need to use this API, as private settings persistence is managed by this SDK.; operationId=PutPrivateSettingsV1TokenByUserid; parameters=System.Object[]; requestBody=; responses=; summary=Submit settings token after loading last-known saved data for the current device user.\nIf no save data or token exists for user, submit an no token or an empty string to reset private-settings for user.; tags=System.Object[]}"
    },
    "/product-integration-deps/v1/app-repair/apply-requests/products/{productId}/patchlines/{patchlineId}": {
      "delete": "@{description=This removes a apply request. This should be called once the repair has been completed.; operationId=DeleteProductIntegrationDepsV1AppRepairApplyRequestsProductsByProductIdPatchlinesByPatchlineId; parameters=System.Object[]; responses=; summary=Removes a apply request.; tags=System.Object[]}",
      "get": "@{description=It will return the apply request that matches the provided product/patchline for a running, or previously running game. Apply requests should be created via the product-integration plugin when games would like Riot Client to repair their game after it closes.; operationId=GetProductIntegrationDepsV1AppRepairApplyRequestsProductsByProductIdPatchlinesByPatchlineId; parameters=System.Object[]; responses=; summary=Returns the game repair request for the matching product/patchline; tags=System.Object[]}",
      "put": "@{description=This adds a new apply request and notify out of the new resource. Apply requests should be created via the product-integration plugin when games would like Riot Client to repair their game after it closes.; operationId=PutProductIntegrationDepsV1AppRepairApplyRequestsProductsByProductIdPatchlinesByPatchlineId; parameters=System.Object[]; requestBody=; responses=; summary=Applies a game repair by opening Riot Client and repairing the game (on Desktop).; tags=System.Object[]}"
    },
    "/product-integration-deps/v1/app-update/apply-requests/products/{productId}/patchlines/{patchlineId}": {
      "delete": "@{description=This removes a apply request. This should be called once the update has been completed.; operationId=DeleteProductIntegrationDepsV1AppUpdateApplyRequestsProductsByProductIdPatchlinesByPatchlineId; parameters=System.Object[]; responses=; summary=Removes a apply request.; tags=System.Object[]}",
      "get": "@{description=It will return the apply request that matches the provided product/patchline for a running, or previously running game. Apply requests should be created via the product-integration plugin when games would like Riot Client to update their game after it closes.; operationId=GetProductIntegrationDepsV1AppUpdateApplyRequestsProductsByProductIdPatchlinesByPatchlineId; parameters=System.Object[]; responses=; summary=Returns the game update request for the matching product/patchline; tags=System.Object[]}",
      "put": "@{description=This adds a new apply request and notify out of the new resource. Apply requests should be created via the product-integration plugin when games would like Riot Client to update their game after it closes.; operationId=PutProductIntegrationDepsV1AppUpdateApplyRequestsProductsByProductIdPatchlinesByPatchlineId; parameters=System.Object[]; requestBody=; responses=; summary=Applies a game update by opening Riot Client and patching the game (on Desktop) or exiting to the App Store (on Mobile).; tags=System.Object[]}"
    },
    "/product-integration-deps/v1/app-update/statuses/products/{productId}/patchlines/{patchlineId}": {
      "get": "@{description=This returns the app update status for a given product and patchline.; operationId=GetProductIntegrationDepsV1AppUpdateStatusesProductsByProductIdPatchlinesByPatchlineId; parameters=System.Object[]; responses=; summary=Get the current app update status for a given product and patchline; tags=System.Object[]}",
      "put": "@{description=This sets the app update status for a given product and patchline, allowing a game to respond to whether or not it requires an update.; operationId=PutProductIntegrationDepsV1AppUpdateStatusesProductsByProductIdPatchlinesByPatchlineId; parameters=System.Object[]; requestBody=; responses=; summary=Push the current app update status for a given product and patchline; tags=System.Object[]}"
    },
    "/product-integration/v1/app-repair/apply": {
      "delete": "@{operationId=DeleteProductIntegrationV1AppRepairApply; parameters=System.Object[]; responses=; summary=Use this to cancel a game repair that was previously requested.; tags=System.Object[]}",
      "put": "@{description=Applies a game repair by opening Riot Client and repairing the game once the game is closed (on Desktop).; operationId=PutProductIntegrationV1AppRepairApply; parameters=System.Object[]; requestBody=; responses=; summary=Applies a game repair by opening Riot Client and repairing the game once the game is closed (on Desktop).; tags=System.Object[]}"
    },
    "/product-integration/v1/app-update/apply": {
      "put": "@{description=Applies a game update by opening Riot Client and patching the game (on Desktop) or exiting to the App Store (on Mobile).; operationId=PutProductIntegrationV1AppUpdateApply; parameters=System.Object[]; responses=; summary=Applies a game update by opening Riot Client and patching the game (on Desktop) or exiting to the App Store (on Mobile).; tags=System.Object[]}"
    },
    "/product-integration/v1/app-update/status": {
      "get": "@{description=Indicates the state of the primary patchline (or App Store app) for the running game.; operationId=GetProductIntegrationV1AppUpdateStatus; parameters=System.Object[]; responses=; summary=Indicates the state of the primary patchline (or App Store app) for the running game.; tags=System.Object[]}"
    },
    "/product-integration/v1/debug/app-repair/apply": {
      "delete": "@{description=The session id should match one from a running game; operationId=DeleteProductIntegrationV1DebugAppRepairApply; parameters=System.Object[]; requestBody=; responses=; summary=Debug endpoint to cancel a repair by session id; tags=System.Object[]}",
      "put": "@{description=The session id should match one from a running game; operationId=PutProductIntegrationV1DebugAppRepairApply; parameters=System.Object[]; requestBody=; responses=; summary=Debug endpoint to apply a repair by session id; tags=System.Object[]}"
    },
    "/product-integration/v1/debug/app-update/apply": {
      "put": "@{description=The session id should match one from a running game; operationId=PutProductIntegrationV1DebugAppUpdateApply; parameters=System.Object[]; requestBody=; responses=; summary=Debug endpoint to apply an update by session id; tags=System.Object[]}"
    },
    "/product-integration/v1/debug/app-update/statuses": {
      "get": "@{description=This will return a map of session ids for open games to update statuses; operationId=GetProductIntegrationV1DebugAppUpdateStatuses; parameters=System.Object[]; responses=; summary=Debug endpoint to get a list of all the app update statuses; tags=System.Object[]}"
    },
    "/product-integration/v1/debug/app-update/statuses/{sessionId}": {
      "get": "@{description=The session id should match one from a running game; operationId=GetProductIntegrationV1DebugAppUpdateStatusesBySessionId; parameters=System.Object[]; responses=; summary=Debug endpoint to get an update status by session id; tags=System.Object[]}",
      "put": "@{description=Debug endpoint to update the app's update status by session id; operationId=PutProductIntegrationV1DebugAppUpdateStatusesBySessionId; parameters=System.Object[]; requestBody=; responses=; summary=Debug endpoint to update the app's update status by session id; tags=System.Object[]}"
    },
    "/product-integration/v1/detached-sessions": {
      "get": "@{operationId=GetProductIntegrationV1DetachedSessions; parameters=System.Object[]; responses=; summary=Finds standalone external product sessions from other closed or active instances of this application; tags=System.Object[]}"
    },
    "/product-integration/v1/locale": {
      "get": "@{description=Returns the locale the product should be running with. Prioritizes the product locale setting, followed by the SDK locale, and falling back to `en_US` if all else fails.; operationId=GetProductIntegrationV1Locale; parameters=System.Object[]; responses=; summary=Returns the locale the product should be running with. Prioritizes the product locale setting, followed by the SDK locale, and falling back to `en_US` if all else fails.; tags=System.Object[]}",
      "put": "@{description=\n## Context\nThis function is being added the support the ability for standalone games to set product locale. The behavior works as follows:\n- First verify that the locale attempting to be set is listed as an available product locale. No actual validation is done on the product locale itself, just that it is present\nin the list of available locales stored in the configuration keyed locale_data.available_locales.\n- After confirming the validity, we attempt to find the product settings file. If it exists, it means that we are in standalone SDK mode. We then propagate the locale to the file\nto persist it across sessions\n- If the file does not exist, it means that we are being run through the Riot Client, and instead we call the `PUT /riotclient/product-locales/products/%s/patchlines/%s`\nendpoint to set the product locale for that product + patchline combination.\n\n### Legacy support\nLeague of Legends unofficially supports players setting their locale to values that are not available to the region. For example, setting their NA client to ja_JP. This is done\ncurrently via modifying the LeagueClientSettings.yaml file and explicitly setting their locale to their locale of choice. We want to continue to support this behavior on behalf\nof League. This function does not modify the validation or ability to override your locale. The validation done here on this function behaves the same as the existing Riot Client\nvalidation, which continues to allow for player modifications.\n\nIf that should change in the future, this function will need to be updated to reflect the changes as well as the `PUT /riotclient/product-locales/products/%s/patchlines/%s` endpoint.\n\n## Arguments\n- locale\n  - the 4 letter code representing the country + language specified separated by an underscore. For example, ja_JP is Japanese, and en_US is US English.\n  - no validation on the 4 letter codes are done; we merely check for its existence in the list of available locales.\n; operationId=PutProductIntegrationV1Locale; parameters=System.Object[]; requestBody=; responses=; summary=Applies the locale specified in the body to the product currently running. Locale should be in language_country format. for example, zh_CN or ko_KR; tags=System.Object[]}"
    },
    "/product-integration/v1/locale/products/{productId}/patchlines/{patchlineId}": {
      "get": "@{description=\n## Context\nThis endpoint is similar to the `GET /product-integration/v1/locale` endpoint except that the product and patchline IDs are provided. Note that the product and patchline IDs are only used if Standalone mode is NOT enabled since it takes priority.\n\nThis endpoint was added to give game teams the flexibility to switch between Standalone mode and Riot Client mode via configuration (no code changes). As soon as all games have migrated to Standalone mode, we can remove this endpoint.\n; operationId=GetProductIntegrationV1LocaleProductsByProductIdPatchlinesByPatchlineId; parameters=System.Object[]; responses=; summary=Returns the locale of the product setting if in Standalone mode, or else returns the locale of the product/patchline setting in Riot Client; tags=System.Object[]}",
      "put": "@{description=\n## Context\nThis endpoint is similar to the `PUT /product-integration/v1/locale` endpoint except that the product and patchline IDs are provided. Note that the product and patchline IDs are only used if Standalone mode is NOT enabled since it takes priority.\n\nThis endpoint was added to give game teams the flexibility to switch between Standalone mode and Riot Client mode via configuration (no code changes). As soon as all games have migrated to Standalone mode, we can remove this endpoint.\n; operationId=PutProductIntegrationV1LocaleProductsByProductIdPatchlinesByPatchlineId; parameters=System.Object[]; requestBody=; responses=; summary=Applies the locale specified in the body to the product and patchline provided. Locale should be in language_country format. for example, zh_CN or ko_KR; tags=System.Object[]}"
    },
    "/product-integration/v1/settings-token": {
      "post": "@{operationId=PostProductIntegrationV1SettingsToken; parameters=System.Object[]; requestBody=; responses=; summary=Generate a token that can be used to configure a standalone instance of the SDK running for a future instance of the given product; tags=System.Object[]}"
    },
    "/product-integration/v1/signout": {
      "post": "@{operationId=PostProductIntegrationV1Signout; parameters=System.Object[]; responses=; summary=Requests signout from the Riot Platform for all running products, if permitted for requesting product; tags=System.Object[]}"
    },
    "/product-integration/v1/signout/permission": {
      "get": "@{description=If an error is returned, signout is not allowed. This is intended to be called by desktop games that are launched by Riot Client. Mobile and console products may call it and it will always be Allowed. Callers can use this information to take specific action (e.g. showing signout button or not).; operationId=GetProductIntegrationV1SignoutPermission; parameters=System.Object[]; responses=; summary=Indicates if a product is allowed to request signout from the Riot Platform for all running products; tags=System.Object[]}"
    },
    "/product-localization/v1/data": {
      "get": "@{operationId=GetProductLocalizationV1Data; parameters=System.Object[]; responses=; summary=Returns loc plugin data - for triaging issues with bad or missing loc data; tags=System.Object[]}"
    },
    "/product-localization/v1/products/{productId}/patchlines/{patchlineId}/translations/{locale}": {
      "get": "@{operationId=GetProductLocalizationV1ProductsByProductIdPatchlinesByPatchlineIdTranslationsByLocale; parameters=System.Object[]; responses=; summary=Returns translations for a specified patchline and locale or fetches them if they are not yet fetched; tags=System.Object[]}"
    },
    "/product-localization/v1/products/{productId}/translations/{locale}": {
      "get": "@{operationId=GetProductLocalizationV1ProductsByProductIdTranslationsByLocale; parameters=System.Object[]; responses=; summary=Returns translations for a specified product and locale or fetches them if they are not yet fetched; tags=System.Object[]}"
    },
    "/product-localization/v1/translate": {
      "post": "@{operationId=PostProductLocalizationV1Translate; parameters=System.Object[]; requestBody=; responses=; summary=DEPRECATED - Returns a translation string(s) for given keys, if found, in Riot Client's locale; tags=System.Object[]}"
    },
    "/product-localization/v2/translate": {
      "post": "@{operationId=PostProductLocalizationV2Translate; parameters=System.Object[]; requestBody=; responses=; summary=Returns a translation string(s) for given keys, if found; tags=System.Object[]}"
    },
    "/product-metadata/v1/cookies": {
      "get": "@{description=Returns a list of cookies associated with URIs that point to patchline resources.\n\nIt's not necessary to use the results of this endpoint manually; when the list is updated, `/cookie-jar/v1/cookies` is automatically updated with the new set of cookies.; operationId=GetProductMetadataV1Cookies; parameters=System.Object[]; responses=; summary=Retrieves all cookies necessary to access any URI associated with any patchline.; tags=System.Object[]}"
    },
    "/product-metadata/v1/debug/mock-data/{source}": {
      "get": "@{description=`source` may be one of `public` or `player`, indiciating which data set from client-config the mock data represents.; operationId=GetProductMetadataV1DebugMockDataBySource; parameters=System.Object[]; responses=; summary=Retrieves the current set of mock data for the plugin.; tags=System.Object[]}",
      "put": "@{description=`source` may be one of `public` or `player`, indiciating which data set from client-config the mock data represents.\n\nThe entire data set is replaced in one call; partial updates are not supported. The best way to edit the current set of data is to use `GET /debug/mock-data`, modify the result, and `PUT` using this endpoint.\n\nSome minor fixups are performed with the provided data to ensure it is consistent. The plugin treats this as a 'oh hey, there is new data for client-config' event, and behaves appropriately.; operationId=PutProductMetadataV1DebugMockDataBySource; parameters=System.Object[]; requestBody=; responses=; summary=Sets the current set of mock data for the plugin.; tags=System.Object[]}"
    },
    "/product-metadata/v1/debug/mock-mode": {
      "delete": "@{description=When leaving mock mode, all data is refreshed from client-config and restored to normal.; operationId=DeleteProductMetadataV1DebugMockMode; parameters=System.Object[]; responses=; summary=Leaves mock mode, and deletes mock data.; tags=System.Object[]}",
      "get": "@{description=The return type is a boolean -- `true` indicates that plugin data is currently being mocked.; operationId=GetProductMetadataV1DebugMockMode; parameters=System.Object[]; responses=; summary=Returns whether the plugin is in mock mode or not.; tags=System.Object[]}",
      "put": "@{description=When entering mock mode, the current data set from client-config is copied, and further updates from client-config are ignored. The plugin otherwise tries to behave as it would normally, for instance, private products will only be listed when signed in.\n\nUse the `/debug/mock-data` endpoint to get/set mocked data in this mode.; operationId=PutProductMetadataV1DebugMockMode; parameters=System.Object[]; responses=; summary=Enters mock mode, which allows using mock product and patchline data.; tags=System.Object[]}"
    },
    "/product-metadata/v1/definitions/products": {
      "get": "@{description=Returns the same data available via the `/products` resource, except patchlines are returned as a list of patchline IDs, rather than full patchline definitions.; operationId=GetProductMetadataV1DefinitionsProducts; parameters=System.Object[]; responses=; summary=Retrieve brief definitions of all entitled products.; tags=System.Object[]}"
    },
    "/product-metadata/v1/definitions/products/{productId}": {
      "get": "@{description=Returns the same data available via the `/products/{productId}` resource, except patchlines are returned as a list of patchline IDs, rather than full patchline definitions.; operationId=GetProductMetadataV1DefinitionsProductsByProductId; parameters=System.Object[]; responses=; summary=Retrieve a brief definition of a specific product.; tags=System.Object[]}"
    },
    "/product-metadata/v1/products/{productId}/patchlines/{patchlineId}/secondary-patchlines": {
      "get": "@{description=Returns a list of secondary patchlines from the specified patchline inside the specified product, including associated metadata.; operationId=GetProductMetadataV1ProductsByProductIdPatchlinesByPatchlineIdSecondaryPatchlines; parameters=System.Object[]; responses=; summary=Retrieves a list of secondary patchlines.; tags=System.Object[]}"
    },
    "/product-metadata/v1/products/{productId}/patchlines/{patchlineId}/secondary-patchlines/{secondaryPatchlineId}": {
      "get": "@{description=Returns secondary patchline metadata from the specified patchline inside the specified product.; operationId=GetProductMetadataV1ProductsByProductIdPatchlinesByPatchlineIdSecondaryPatchlinesBySecondaryPatchlineId; parameters=System.Object[]; responses=; summary=Retrieves a secondary patchline within a patchline.; tags=System.Object[]}"
    },
    "/product-metadata/v1/publish-states/{configType}": {
      "get": "@{description=Returns Published or NotPublished; operationId=GetProductMetadataV1PublishStatesByConfigType; parameters=System.Object[]; responses=; summary=Retrieves the publish state of products of config type (public or player).; tags=System.Object[]}"
    },
    "/product-metadata/v2/products": {
      "get": "@{description=Returns all entitled products, with all metadata for patchlines and secondary patchlines associated with the product.; operationId=GetProductMetadataV2Products; parameters=System.Object[]; responses=; summary=Retrieves a full list of all entitled products and patchlines.; tags=System.Object[]}"
    },
    "/product-metadata/v2/products/{productId}": {
      "get": "@{description=Returns a single entitled product, with all metadata for patchlines and secondary patchlines associated with the product.; operationId=GetProductMetadataV2ProductsByProductId; parameters=System.Object[]; responses=; summary=Retrieves a single product and all its entitled patchlines.; tags=System.Object[]}"
    },
    "/product-metadata/v2/products/{productId}/patchlines/{patchlineId}": {
      "get": "@{description=Returns a single patchline within a product, with all associated metadata, including any secondary patchlines.; operationId=GetProductMetadataV2ProductsByProductIdPatchlinesByPatchlineId; parameters=System.Object[]; responses=; summary=Retrieves a single patchline.; tags=System.Object[]}"
    },
    "/product-metadata/v2/products/{productId}/player-affinity-token": {
      "get": "@{description=Returns an id of single product with a map of its player affinities.; operationId=GetProductMetadataV2ProductsByProductIdPlayerAffinityToken; parameters=System.Object[]; responses=; summary=Retrieves player affinity token for a single product.; tags=System.Object[]}"
    },
    "/product-metadata/v2/region-locale": {
      "get": "@{operationId=GetProductMetadataV2RegionLocale; parameters=System.Object[]; responses=; summary=Get the current region and locale.; tags=System.Object[]}"
    },
    "/product-session/v1/data/path": {
      "get": "@{operationId=GetProductSessionV1DataPath; parameters=System.Object[]; responses=; summary=Returns the standard data folder for your application; tags=System.Object[]}"
    },
    "/product-session/v1/data/path/{patchline-name}": {
      "get": "@{operationId=GetProductSessionV1DataPathByPatchlineName; parameters=System.Object[]; responses=; summary=Returns the standard logs folder for a given full patchline name.; tags=System.Object[]}"
    },
    "/product-session/v1/external-sessions": {
      "get": "@{operationId=GetProductSessionV1ExternalSessions; parameters=System.Object[]; responses=; summary=Get all sessions across products external to Riot Client. e.g. just games and not the UX product.; tags=System.Object[]}"
    },
    "/product-session/v1/external-sessions/{session-id}": {
      "get": "@{operationId=GetProductSessionV1ExternalSessionsBySessionId; parameters=System.Object[]; responses=; summary=Get the session for a specific session ID for a product external to Riot Client. e.g. just games and not the UX product.; tags=System.Object[]}"
    },
    "/product-session/v1/heartbeat/{session-id}": {
      "get": "@{operationId=GetProductSessionV1HeartbeatBySessionId; parameters=System.Object[]; responses=; summary=Deprecated. Please use POST /product-session/v2/heartbeat.; tags=System.Object[]}"
    },
    "/product-session/v1/host-session": {
      "get": "@{description=A 'host session' may be created for the application that Foundation is running within, used on mobile or console platforms.; operationId=GetProductSessionV1HostSession; parameters=System.Object[]; responses=; summary=Fetches the session of the 'host app', if it exists for this platform.; tags=System.Object[]}",
      "post": "@{description=A 'host session' may be created for the application that Foundation is running within, used on mobile or console platforms.; operationId=PostProductSessionV1HostSession; parameters=System.Object[]; requestBody=; responses=; summary=Handles creation of a new session for the 'host app'; tags=System.Object[]}"
    },
    "/product-session/v1/host-session/id": {
      "get": "@{description=A 'host session' may be created for the application that Foundation is running within, used on mobile or console platforms.; operationId=GetProductSessionV1HostSessionId; parameters=System.Object[]; responses=; summary=Fetches the session ID of the 'host app', if it exists for this platform.; tags=System.Object[]}"
    },
    "/product-session/v1/logs/path": {
      "get": "@{operationId=GetProductSessionV1LogsPath; parameters=System.Object[]; responses=; summary=Returns the standard logs folder for your application; tags=System.Object[]}"
    },
    "/product-session/v1/logs/path/{patchline-name}": {
      "get": "@{operationId=GetProductSessionV1LogsPathByPatchlineName; parameters=System.Object[]; responses=; summary=Returns the standard logs folder for a given full patchline name.; tags=System.Object[]}"
    },
    "/product-session/v1/session-heartbeats/{session-id}": {
      "get": "@{description=The heartbeat is split out from the normal session endpoint because it changes frequently, and it would be slow to notify all the subscribers that care about game starting and stopping but not heartbeats.; operationId=GetProductSessionV1SessionHeartbeatsBySessionId; parameters=System.Object[]; responses=; summary=[Only intended to be called by product launchers, like Riot Client.] Get the heartbeat for a specific session ID.; tags=System.Object[]}"
    },
    "/product-session/v1/sessions": {
      "get": "@{operationId=GetProductSessionV1Sessions; parameters=System.Object[]; responses=; summary=Get all sessions across products.; tags=System.Object[]}"
    },
    "/product-session/v1/sessions/{session-id}": {
      "delete": "@{operationId=DeleteProductSessionV1SessionsBySessionId; parameters=System.Object[]; requestBody=; responses=; summary=[Only intended to be called by product launchers, like Riot Client.] Handles deleting a session.; tags=System.Object[]}",
      "get": "@{operationId=GetProductSessionV1SessionsBySessionId; parameters=System.Object[]; responses=; summary=[Only intended to be called by product launchers, like Riot Client.] Get the session for a specific session ID.; tags=System.Object[]}",
      "post": "@{operationId=PostProductSessionV1SessionsBySessionId; parameters=System.Object[]; requestBody=; responses=; summary=Handles creation of a new session.; tags=System.Object[]}"
    },
    "/product-session/v2/heartbeat": {
      "post": "@{description=* Call this endpoint periodically to verify that Riot Client is still responding.\n\n* Upon your product entering the 'Gameplay' phase, Riot Client will lock patching and prevent updates to products or Riot Client in the case of a crash and restart, prioritizing launching the game promptly.\n\n* Products should include a 'User-Agent' header per RFC-0031d. \n\n* If this call fails and your sessionID is valid, then you can begin the recovery process specified in RFC-1064.\n\n* Riot Client expects this heartbeat from your application on a regular interval (once every 10-60 seconds) in order to make sure your application is not hung or otherwise unresponsive.; operationId=PostProductSessionV2Heartbeat; parameters=System.Object[]; requestBody=; responses=; summary=Periodic heartbeat made by products to update Riot Client with state of gameplay, and to verify connectivity to Riot Client. \n\nSessionId is derived from 'session' HTTP header, or websocket authentication.; tags=System.Object[]}"
    },
    "/product-session/v2/heartbeat-internal/{session-id}": {
      "post": "@{operationId=PostProductSessionV2HeartbeatInternalBySessionId; parameters=System.Object[]; requestBody=; responses=; summary=Internal endpoint for updating the heartbeat of an existing session.; tags=System.Object[]}"
    },
    "/product-session/v2/heartbeat/{session-id}": {
      "post": "@{description=* Call this endpoint periodically to verify that Riot Client is still responding.\n\n* Upon your product entering the 'Gameplay' phase, Riot Client will lock patching and prevent updates to products or Riot Client in the case of a crash and restart, prioritizing launching the game promptly.\n\n* Products should include a 'User-Agent' header per RFC-0031d. \n\n* If this call fails and your sessionID is valid, then you can begin the recovery process specified in RFC-1064.\n\n* Riot Client expects this heartbeat from your application on a regular interval (once every 10-60 seconds) in order to make sure your application is not hung or otherwise unresponsive.; operationId=PostProductSessionV2HeartbeatBySessionId; parameters=System.Object[]; requestBody=; responses=; summary=Periodic heartbeat made by products to update Riot Client with state of gameplay, and to verify connectivity to Riot Client. ; tags=System.Object[]}"
    },
    "/reference/v1/echo": {
      "put": "@{description=\n**Description**\n\nThis API is intended as a reference on how to create a plugin for new developers. The endpoint simply returns a string that the user inputs\n\nRequired arguments:\n```\necho: A string that will be returned to the user\n```\n; operationId=PutReferenceV1Echo; parameters=System.Object[]; requestBody=; responses=; summary=Returns the user input string; tags=System.Object[]}"
    },
    "/riot-client-auth/v1/authorization": {
      "get": "@{description=*Internal Riot Client API. Please don't use outside of Riot Client.*\n\nProvides the RSO Access Token for the SDK, intended for internal use by plugins that don't provide game-specific data.; operationId=GetRiotClientAuthV1Authorization; parameters=System.Object[]; responses=; summary=The player's RSO tokens; tags=System.Object[]}"
    },
    "/riot-client-auth/v1/home-base-country": {
      "get": "@{description=*Internal Riot Client API. Please don't use outside of Riot Client.*\n\nProvides the home base country provided by RSO, intended for internal use by plugins that don't provide game-specific data.; operationId=GetRiotClientAuthV1HomeBaseCountry; parameters=System.Object[]; responses=; summary=The player's home base country; tags=System.Object[]}"
    },
    "/riot-client-auth/v1/login-country": {
      "get": "@{description=*Internal Riot Client API. Please don't use outside of Riot Client.*\n\nProvides the login country provided by RSO, intended for internal use by plugins that don't provide game-specific data.; operationId=GetRiotClientAuthV1LoginCountry; parameters=System.Object[]; responses=; summary=The player's login country; tags=System.Object[]}"
    },
    "/riot-client-auth/v1/rso-client": {
      "get": "@{description=*Internal Riot Client API. Please don't use outside of Riot Client.*\n\nProvides the RSO client ID and any other required client details for game-agnostic authorization business logic.\n\nSee [RSO's Client documentation](http://accounts.docs.rpg.riotgames.io/docs/clients/index/)For more context.; operationId=GetRiotClientAuthV1RsoClient; parameters=System.Object[]; responses=; summary=Fetch the SDK's RSO client details.; tags=System.Object[]}"
    },
    "/riot-client-auth/v1/userinfo": {
      "get": "@{description=*Internal Riot Client API. Please don't use outside of Riot Client.*\n\nProvides game-agnostic, unencrypted claims about the player intended for use by Riot Client's UI and internal plugins. Note that these claims are neither signed nor encrypted, and should not be sent to remote services as authoritative.; operationId=GetRiotClientAuthV1Userinfo; parameters=System.Object[]; responses=; summary=Public claims about the player; tags=System.Object[]}"
    },
    "/riot-login/v1/status": {
      "get": "@{operationId=GetRiotLoginV1Status; parameters=System.Object[]; responses=; summary=Returns the current login state of the client; tags=System.Object[]}"
    },
    "/riot-messaging-service/v1/acknowledge": {
      "post": "@{operationId=PostRiotMessagingServiceV1Acknowledge; parameters=System.Object[]; requestBody=; responses=; summary=acknowledge RMS message received; tags=System.Object[]}"
    },
    "/riot-messaging-service/v1/connect": {
      "delete": "@{operationId=DeleteRiotMessagingServiceV1Connect; parameters=System.Object[]; responses=; summary=Schedule a disconnect request from RMS.; tags=System.Object[]}",
      "post": "@{operationId=PostRiotMessagingServiceV1Connect; parameters=System.Object[]; requestBody=; responses=; summary=Schedule a connect request to RMS.; tags=System.Object[]}"
    },
    "/riot-messaging-service/v1/entitlements": {
      "delete": "@{operationId=DeleteRiotMessagingServiceV1Entitlements; parameters=System.Object[]; responses=; summary=Delete session entitlements token; tags=System.Object[]}",
      "post": "@{operationId=PostRiotMessagingServiceV1Entitlements; parameters=System.Object[]; requestBody=; responses=; summary=Update session entitlements token; tags=System.Object[]}"
    },
    "/riot-messaging-service/v1/message/{a}": {
      "get": "@{description=Endpoint deprecated and will be deleted October 2022.  Please use 'riot-messaging-service/v1/messages/{+path}'.; operationId=GetRiotMessagingServiceV1MessageByA; parameters=System.Object[]; responses=; summary=Util endpoint that responds with any cached messages for the resource based on component a; tags=System.Object[]}"
    },
    "/riot-messaging-service/v1/message/{a}/{b}": {
      "get": "@{description=Endpoint deprecated and will be deleted October 2022.  Please use 'riot-messaging-service/v1/messages/{+path}'.; operationId=GetRiotMessagingServiceV1MessageByAByB; parameters=System.Object[]; responses=; summary=Util endpoint that responds with any cached messages for the aggregate resource based on components a:b; tags=System.Object[]}"
    },
    "/riot-messaging-service/v1/message/{a}/{b}/{c}": {
      "get": "@{description=Endpoint deprecated and will be deleted October 2022.  Please use 'riot-messaging-service/v1/messages/{+path}'.; operationId=GetRiotMessagingServiceV1MessageByAByBByC; parameters=System.Object[]; responses=; summary=Util endpoint that responds with any cached messages for the aggregate resource based on components a:b:c; tags=System.Object[]}"
    },
    "/riot-messaging-service/v1/message/{a}/{b}/{c}/{d}": {
      "get": "@{description=Endpoint deprecated and will be deleted October 2022.  Please use 'riot-messaging-service/v1/messages/{+path}'.; operationId=GetRiotMessagingServiceV1MessageByAByBByCByD; parameters=System.Object[]; responses=; summary=Util endpoint that responds with any cached messages for the aggregate resource based on components a:b:c:d; tags=System.Object[]}"
    },
    "/riot-messaging-service/v1/message/{a}/{b}/{c}/{d}/{e}": {
      "get": "@{description=Endpoint deprecated and will be deleted October 2022.  Please use 'riot-messaging-service/v1/messages/{+path}'.; operationId=GetRiotMessagingServiceV1MessageByAByBByCByDByE; parameters=System.Object[]; responses=; summary=Util endpoint that responds with any cached messages for the aggregate resource based on components a:b:c:d:e; tags=System.Object[]}"
    },
    "/riot-messaging-service/v1/message/{a}/{b}/{c}/{d}/{e}/{f}": {
      "get": "@{description=Endpoint deprecated and will be deleted October 2022.  Please use 'riot-messaging-service/v1/messages/{+path}'.; operationId=GetRiotMessagingServiceV1MessageByAByBByCByDByEByF; parameters=System.Object[]; responses=; summary=Util endpoint that responds with any cached messages for the aggregate resource based on components a:b:c:d:e:f; tags=System.Object[]}"
    },
    "/riot-messaging-service/v1/messages/{path}": {
      "get": "@{description=Subscriptions can be for a fully qualified path (mock/v1/resource), a wildcard (mock/v1/ *) or a recursive wildcard (mock/ **).\n\nNote that subscriptions for your application cannot overlap or conflict, such that a subscription for `mock/ **` cannot coincide with a subscription for `mock/v1/resource`.; operationId=GetRiotMessagingServiceV1MessagesByPath; parameters=System.Object[]; responses=; summary=Subscription endpoint to receive async notifications of push messages with the given resource path.; tags=System.Object[]}"
    },
    "/riot-messaging-service/v1/out-of-sync": {
      "get": "@{operationId=GetRiotMessagingServiceV1OutOfSync; parameters=System.Object[]; responses=; summary=This is subscribe-only endpoint. Notification on this resource is triggered if RMS session is out of sync.; tags=System.Object[]}"
    },
    "/riot-messaging-service/v1/reconnect": {
      "post": "@{operationId=PostRiotMessagingServiceV1Reconnect; parameters=System.Object[]; responses=; summary=Schedule a reconnect request to RMS. For debug purposes only.; tags=System.Object[]}"
    },
    "/riot-messaging-service/v1/session": {
      "delete": "@{operationId=DeleteRiotMessagingServiceV1Session; parameters=System.Object[]; responses=; summary=Kill the current session, if any.; tags=System.Object[]}",
      "get": "@{operationId=GetRiotMessagingServiceV1Session; parameters=System.Object[]; responses=; summary=Return the current session, if any.; tags=System.Object[]}"
    },
    "/riot-messaging-service/v1/simulate-message": {
      "post": "@{operationId=PostRiotMessagingServiceV1SimulateMessage; parameters=System.Object[]; requestBody=; responses=; summary=Simulate an RMS message. For debug purposes only.; tags=System.Object[]}"
    },
    "/riot-messaging-service/v1/socket": {
      "delete": "@{operationId=DeleteRiotMessagingServiceV1Socket; parameters=System.Object[]; responses=; summary=Schedule a socket kill request. For debug purposes only.; tags=System.Object[]}"
    },
    "/riot-messaging-service/v1/state": {
      "get": "@{operationId=GetRiotMessagingServiceV1State; parameters=System.Object[]; responses=; summary=Return all state; tags=System.Object[]}"
    },
    "/riot-messaging-service/v1/switch-servers": {
      "post": "@{operationId=PostRiotMessagingServiceV1SwitchServers; parameters=System.Object[]; responses=; summary=Schedule a switching server request to RMS. For debug purposes only.; tags=System.Object[]}"
    },
    "/riot-messaging-service/v1/token/refresh": {
      "post": "@{operationId=PostRiotMessagingServiceV1TokenRefresh; parameters=System.Object[]; responses=; summary=Schedule a token refresh request to RMS. For debug purposes only.; tags=System.Object[]}"
    },
    "/riot-messaging-service/v1/user": {
      "get": "@{operationId=GetRiotMessagingServiceV1User; parameters=System.Object[]; responses=; summary=Returns the PUUID that this plugin is currently authenticated for; tags=System.Object[]}"
    },
    "/riot-messaging-service/v2/simulate-message": {
      "post": "@{operationId=PostRiotMessagingServiceV2SimulateMessage; parameters=System.Object[]; requestBody=; responses=; summary=Simulate an RMS message. For debug purposes only.; tags=System.Object[]}"
    },
    "/riot-status/v1/debug/set-riotclient-patchline/{patchlineId}": {
      "post": "@{operationId=PostRiotStatusV1DebugSetRiotclientPatchlineByPatchlineId; parameters=System.Object[]; responses=; summary=Returns raw JSON service status information for issues affecting multiple games; tags=System.Object[]}"
    },
    "/riot-status/v1/products/{productId}/patchlines/{patchlineId}/deployments/{deployment}": {
      "get": "@{operationId=GetRiotStatusV1ProductsByProductIdPatchlinesByPatchlineIdDeploymentsByDeployment; parameters=System.Object[]; responses=; summary=Returns raw JSON service status information for a specific game service cluster; tags=System.Object[]}"
    },
    "/riot-status/v1/riotclient": {
      "get": "@{operationId=GetRiotStatusV1Riotclient; parameters=System.Object[]; responses=; summary=Returns raw JSON service status information for issues affecting multiple games; tags=System.Object[]}"
    },
    "/riotclient/app-name": {
      "get": "@{operationId=GetRiotclientAppName; parameters=System.Object[]; responses=; summary=Application name without file extension; tags=System.Object[]}"
    },
    "/riotclient/build-number": {
      "get": "@{operationId=GetRiotclientBuildNumber; parameters=System.Object[]; responses=; summary=Numeric build number for this application; tags=System.Object[]}"
    },
    "/riotclient/command-line-args": {
      "get": "@{description=Command line arguments are deprecated, and will be removed June 2022. Use configuration directly.; operationId=GetRiotclientCommandLineArgs; parameters=System.Object[]; responses=; summary=Get the command line parameters for the application; tags=System.Object[]}"
    },
    "/riotclient/get_region_locale": {
      "get": "@{operationId=GetRiotclientGetRegionLocale; parameters=System.Object[]; responses=; summary=Get the current region and locale.; tags=System.Object[]}"
    },
    "/riotclient/lifecycle": {
      "get": "@{description=Endpoint will be deleted after July 2023 [SDKEXP-2014]; operationId=GetRiotclientLifecycle; parameters=System.Object[]; responses=; summary=Get the current lifecycle events.; tags=System.Object[]}",
      "put": "@{description=Endpoint will be deleted after July 2023 [SDKEXP-2014]; operationId=PutRiotclientLifecycle; parameters=System.Object[]; requestBody=; responses=; summary=Update the current app lifecycle events.; tags=System.Object[]}"
    },
    "/riotclient/machine-id": {
      "get": "@{operationId=GetRiotclientMachineId; parameters=System.Object[]; responses=; summary=Base64 encoded uuid identifying the user's machine; tags=System.Object[]}"
    },
    "/riotclient/new-args": {
      "post": "@{description=This endpoint is deprecated, and will be removed June 2022, use direct events instead (e.g. `/player-affinity/shard`.; operationId=PostRiotclientNewArgs; parameters=System.Object[]; requestBody=; responses=; summary=Endpoint for passing in new data.; tags=System.Object[]}"
    },
    "/riotclient/product-locales/products/{productId}/patchlines/{patchlineId}": {
      "get": "@{operationId=GetRiotclientProductLocalesProductsByProductIdPatchlinesByPatchlineId; parameters=System.Object[]; responses=; summary=Gets the locale of the product with the specified product and patchline id; tags=System.Object[]}",
      "put": "@{operationId=PutRiotclientProductLocalesProductsByProductIdPatchlinesByPatchlineId; parameters=System.Object[]; requestBody=; responses=; summary=Sets the locale of the product with the specified installId; tags=System.Object[]}"
    },
    "/riotclient/region-locale": {
      "get": "@{operationId=GetRiotclientRegionLocale; parameters=System.Object[]; responses=; summary=Get the current region and locale.; tags=System.Object[]}",
      "put": "@{operationId=PutRiotclientRegionLocale; parameters=System.Object[]; requestBody=; responses=; summary=Update the region and locale.; tags=System.Object[]}"
    },
    "/riotclient/secondary-args": {
      "get": "@{description=Command line arguments are deprecated, and will be removed June 2022. Use configuration directly.; operationId=GetRiotclientSecondaryArgs; parameters=System.Object[]; responses=; summary=Get the command line parameters that occur after the '--' delimiter; tags=System.Object[]}"
    },
    "/riotclient/session-id": {
      "get": "@{operationId=GetRiotclientSessionId; parameters=System.Object[]; responses=; summary=UUID identifying a user interaction session. This value is created when the user session begins (i.e. mobile game open, Riot Client starts). Multiple instances of the SDK may share the same session ID if they were launched by the same Riot Client user session.; tags=System.Object[]}"
    },
    "/riotclient/set_region_locale": {
      "post": "@{operationId=PostRiotclientSetRegionLocale; parameters=System.Object[]; responses=; summary=Update the region and locale.; tags=System.Object[]}"
    },
    "/riotclient/system-info/v1/basic-info": {
      "get": "@{operationId=GetRiotclientSystemInfoV1BasicInfo; parameters=System.Object[]; responses=; summary=Get basic system information: OS, memory, processor speed, and number of physical cores; tags=System.Object[]}"
    },
    "/riotclient/trace": {
      "get": "@{operationId=GetRiotclientTrace; parameters=System.Object[]; responses=; summary=Retrieves a completed scheduler trace.; tags=System.Object[]}"
    },
    "/riotclient/v1/app-info": {
      "get": "@{operationId=GetRiotclientV1AppInfo; parameters=System.Object[]; responses=; summary=Information about the application hosting the SDK; tags=System.Object[]}"
    },
    "/riotclient/v1/platform-user": {
      "get": "@{operationId=GetRiotclientV1PlatformUser; parameters=System.Object[]; responses=; summary=Information about the currently active platform user; tags=System.Object[]}",
      "put": "@{operationId=PutRiotclientV1PlatformUser; parameters=System.Object[]; requestBody=; responses=; summary=Update the currently active platform user; tags=System.Object[]}"
    },
    "/rnet-sanitizer/v1/containsSanitized": {
      "post": "@{operationId=PostRnetSanitizerV1ContainsSanitized; parameters=System.Object[]; requestBody=; responses=; summary=Determine if the request has a sanitized word; tags=System.Object[]}"
    },
    "/rnet-sanitizer/v1/sanitize": {
      "post": "@{operationId=PostRnetSanitizerV1Sanitize; parameters=System.Object[]; requestBody=; responses=; summary=Sanitize the input text(s); tags=System.Object[]}"
    },
    "/rnet-sanitizer/v1/status": {
      "get": "@{operationId=GetRnetSanitizerV1Status; parameters=System.Object[]; responses=; summary=Gets the current status of the sanitizer plugin; tags=System.Object[]}"
    },
    "/rso-auth/configuration/v3/amr-values-supported": {
      "get": "@{operationId=GetRsoAuthConfigurationV3AmrValuesSupported; parameters=System.Object[]; responses=; summary=Returns a list of supported authentication strategies.; tags=System.Object[]}"
    },
    "/rso-auth/configuration/v3/client-id": {
      "get": "@{operationId=GetRsoAuthConfigurationV3ClientId; parameters=System.Object[]; responses=; summary=Returns the default client ID for this application. Only available once /v3/ready-state is marked as ready.; tags=System.Object[]}"
    },
    "/rso-auth/configuration/v3/openid-configuration": {
      "get": "@{operationId=GetRsoAuthConfigurationV3OpenidConfiguration; parameters=System.Object[]; responses=; summary=Returns the raw RSO openid configuration. This resource will be notified when the configuration is retrieved initially and when it's updated.; tags=System.Object[]}"
    },
    "/rso-auth/configuration/v3/partner-auth-config": {
      "get": "@{operationId=GetRsoAuthConfigurationV3PartnerAuthConfig; parameters=System.Object[]; responses=; summary=Returns a partner auth config; tags=System.Object[]}"
    },
    "/rso-auth/configuration/v3/ready-state": {
      "get": "@{description=The rso-auth plugin relies on asynchronous fetching of multiple resources. This endpoint reflects whether or not all of those resources have been retrieved.\n\nThis endpoint also supports subscriptions.; operationId=GetRsoAuthConfigurationV3ReadyState; parameters=System.Object[]; responses=; summary=Returns the ready state of the rso-auth plugin; tags=System.Object[]}"
    },
    "/rso-auth/v1/auth-hints/hint": {
      "delete": "@{operationId=DeleteRsoAuthV1AuthHintsHint; parameters=System.Object[]; responses=; summary=Dismisses the current auth hint; tags=System.Object[]}",
      "get": "@{operationId=GetRsoAuthV1AuthHintsHint; parameters=System.Object[]; responses=; summary=Returns the current auth hint; tags=System.Object[]}",
      "post": "@{operationId=PostRsoAuthV1AuthHintsHint; parameters=System.Object[]; requestBody=; responses=; summary=Creates a test auth hint; tags=System.Object[]}"
    },
    "/rso-auth/v1/authorization": {
      "delete": "@{description=\nThis method destroys both the client-side authorization and revokes refresh tokens (if any) on the server. As a result, this request can fail if the authorization server is down. In the face of failure, the client still forgets the authorization, otherwise server-side downtime would prevent a player from logging out.\n\n; operationId=DeleteRsoAuthV1Authorization; parameters=System.Object[]; responses=; summary=Revoke existing tokens, logging the user out.; tags=System.Object[]}",
      "get": "@{description=When the user is logged in, this resource will be populated with data about the player:\n\n* **currentPlatformId** is the player's home platformId\n* **currentAccountId** is the account ID for the player on their home platform.\n* **subject** is the [RFC 0214g]()-defined globally unique identifier for the player.\n* **authenticationType** is the authentication mechanism used to establish the RSO session.\n\nWhile true that the player's `currentPlatformId` will usually match the `region` setting of the client, consuming plugins *must not* make this assumption. Applications *must not* create identifiers for the player by concatenating `currentAccountId` with the client's region setting. consuming plugins *should* use the `subject` to globally recognize players, but may use a concatenation of `currentPlatformId` and `currentAccountId` if subject is infeasible.\n\nIn addition, note that when a player transfers from region to region, the value of that player's `currentPlatformId` and `currentAccountId` will change, but the value of their `subject` will not.\n\n; operationId=GetRsoAuthV1Authorization; parameters=System.Object[]; responses=; summary=Retrieve a player's authorization status.; tags=System.Object[]}"
    },
    "/rso-auth/v1/authorization/access-token": {
      "get": "@{description=If the player has a valid authorization, this API will return the player's access token, as well as their approximate expiration time and scope. This token can be used as the `Bearer` value of an `Authorization` header in order to make requets against services protected by RSO tokens. This token represents permission sets granted to the application by the player.\n\nAccess tokens expire. This plugin will handle refreshing access tokens automatically, but it's up to your plugin to either request an access token for each request, or subscribe to resource updated events for the token.\n\nAccess tokens are intended to be server-authoritative, despite being verifiable client-side as well. Scopes are included as a means for UIs to anticipate which scopes are available.\n\n**Note:** This API returns the token's expiry as seconds since the unix epoch. Do not trust this value locally in the client, as the player's system clock may be incorrect. This value is *deprecated*, and may be removed in a future version.\n\n; operationId=GetRsoAuthV1AuthorizationAccessToken; parameters=System.Object[]; responses=; summary=Retrieve a player's access token.; tags=System.Object[]}"
    },
    "/rso-auth/v1/authorization/error": {
      "get": "@{description=If the player has failed to log in via RSO, and the HTTP error code cannot uniquely disambiguate the error encountered, provides more information about the error encountered in the form of the error and errorDescription provided from RSO via OAuth errors.\n; operationId=GetRsoAuthV1AuthorizationError; parameters=System.Object[]; responses=; summary=Retrieves any error received from RSO during the last authorization attempt.; tags=System.Object[]}"
    },
    "/rso-auth/v1/authorization/gas": {
      "post": "@{description=Executes OAuth2's [resource owner password credentials grant](https://tools.ietf.org/html/rfc6749#section-4.3) flow in order to log the user in. If successful, it will alter trigger a modification of the `/rso-auth/v1/authorization` resource and relevant sub-resources with details of the user's session. This flow is stateless, and does not create a session with the RSO server.\n\nIn circumstances where additional data is required to log the user in (such as captcha or multi-factor authentication, this method will simply fail.\n\n; operationId=PostRsoAuthV1AuthorizationGas; parameters=System.Object[]; requestBody=; responses=; summary=Log the user in with username, password and platformId.; tags=System.Object[]}"
    },
    "/rso-auth/v1/authorization/id-token": {
      "get": "@{description=If the player has a valid authorization, this API will return the player's id token, as well as their approximate expiration time and a JSON object of the data it includes. This token includes details about the player, signed as a means of trust. These details--called claims--are data about the player that the RSO server deems to be true at the time of authentication. There is no guarantee that these details have not changed in the interim.\n\nId tokens are only created at login, and cannot be refreshed, as the system's trust that the claims remain true decays over time. Expired Id tokens may continue to be used informationally, but *must not* be trusted.\n\n**Note:** This API returns the token's expiry as seconds since the unix epoch. Do not trust this value locally in the client, as the player's system clock may be incorrect. This value is *deprecated*, and may be removed in a future version.\n; operationId=GetRsoAuthV1AuthorizationIdToken; parameters=System.Object[]; responses=; summary=Retrieve a player's ID token.; tags=System.Object[]}"
    },
    "/rso-auth/v1/authorization/refresh": {
      "post": "@{description=Executes OAuth2's [refresh flow](https://tools.ietf.org/html/rfc6749#section-6) in order to refresh an expired authorization. This API is for debugging and testing only; the RSO plugin handles refresh automatically.\n\nRefreshes authorization for all clients that have currently active authorizations, the return value is from the main client RiotClient bootstraps with (the one from config); operationId=PostRsoAuthV1AuthorizationRefresh; parameters=System.Object[]; responses=; summary=Force a refresh of the RSO tokens.; tags=System.Object[]}"
    },
    "/rso-auth/v1/authorization/simulate-error": {
      "post": "@{description=Sets a simulated error response code to be used next time `POST`:`/rso-auth/v1/authorization/gas` occurs. Then resets to normal functionality; operationId=PostRsoAuthV1AuthorizationSimulateError; parameters=System.Object[]; requestBody=; responses=; summary=Set simulated error response code for logging in; tags=System.Object[]}"
    },
    "/rso-auth/v1/authorization/userinfo": {
      "delete": "@{description=This endpoint is not available until the OpenID configuration is retrieved.; operationId=DeleteRsoAuthV1AuthorizationUserinfo; parameters=System.Object[]; responses=; summary=Delete the player userinfo; tags=System.Object[]}",
      "get": "@{description=If the player has a valid access token, and the userinfo has previously been fetched, this API will return the userinfo of the player as specified by the access token's scopes.\n\nThis endpoint is not available until the OpenID configuration is retrieved.; operationId=GetRsoAuthV1AuthorizationUserinfo; parameters=System.Object[]; responses=; summary=Retrieve a player's userinfo.; tags=System.Object[]}",
      "post": "@{description=If the player has a valid access token, this API will invoke RSO's userinfo endpoint to retrieve the userinfo of the player as specified by the access token's scopes.\n\nThis endpoint is not available until the OpenID configuration is retrieved.; operationId=PostRsoAuthV1AuthorizationUserinfo; parameters=System.Object[]; responses=; summary=Retrieve a player's userinfo from RSO.; tags=System.Object[]}"
    },
    "/rso-auth/v1/device-id": {
      "post": "@{description=Provides client-side settings for collecting device ID information, including a session id, collector server and merchant id. The session ID is programmatically generated by the plugin at startup.\n\nThis endpoint is not available until the OpenID configuration is retrieved.; operationId=PostRsoAuthV1DeviceId; parameters=System.Object[]; responses=; summary=Retrieves device ID configuration.; tags=System.Object[]}"
    },
    "/rso-auth/v1/key/request": {
      "post": "@{operationId=PostRsoAuthV1KeyRequest; parameters=System.Object[]; requestBody=; responses=; summary=Generates an authorization key from an existing authorization. An 'authorization key' is a code and code verifier encoded together.; tags=System.Object[]}"
    },
    "/rso-auth/v1/logout-reason": {
      "get": "@{operationId=GetRsoAuthV1LogoutReason; parameters=System.Object[]; responses=; summary=Returns latest logout reason.; tags=System.Object[]}"
    },
    "/rso-auth/v1/session": {
      "delete": "@{description=Destroys the login session locally and on the RSO server. Local sessions will also be destroyed and will require newly authenticating to login and create a new authentication session.; operationId=DeleteRsoAuthV1Session; parameters=System.Object[]; responses=; summary=Destroy the login session.; tags=System.Object[]}",
      "get": "@{description=Returns a `SessionResponse` with details of the current state of the session. This is a subscribable end-point that will update as the state is updated.\n\nWhen not set, the type of the `SessionResponse` will be set to `unknown_authentication_response`. The return value will also include the current state of the `persistLogin` value.\n; operationId=GetRsoAuthV1Session; parameters=System.Object[]; responses=; summary=Retrieve the current session state.; tags=System.Object[]}"
    },
    "/rso-auth/v1/session/credentials": {
      "put": "@{description=Progresses the login flow for the session with the required player credentials.\n\nThis API should be called when prompted for `needs_authentication` from the `/rso-auth/v2/authorizations` API. Along with the user's credentials, this API will also take the `trustDevice` boolean to tell the RSO service whether or not to record this device as a trusted device to remember for use when determining trust level requirements.\n\nThis API returns a response that contains a type to determine how to follow up in the login process. If the credentials are accepted then the type will be set to `authenticated`.\n\nIf further verification is required then the type may be set to `needs_multifactor_verification`, in which case details can be found in the `MultifactorDetails`, and the required input should be PUT to `/rso-auth/v2/authentication/multifactor`\n\nIn some error cases, the `error` string may be set to indicate more information about the authentication state.\n; operationId=PutRsoAuthV1SessionCredentials; parameters=System.Object[]; requestBody=; responses=; summary=Update an authentication session with credentials to login.; tags=System.Object[]}"
    },
    "/rso-auth/v1/session/login-token": {
      "put": "@{description=Authenticates a player using a token from rso-authenticator.\n\nThe `authentication_type` value should be `SSOAuth` for social/3rd party authentication tokens (e.g. Google, Facebook, etc), and `Riot Auth` for Riot Games authentication tokens.\n; operationId=PutRsoAuthV1SessionLoginToken; parameters=System.Object[]; requestBody=; responses=; summary=Update an authentication session with a token from rso-authenticator.; tags=System.Object[]}"
    },
    "/rso-auth/v1/session/multifactor": {
      "put": "@{description=Progresses the login flow for the session with the required multifactor authentication.\n\nThis API should be called when prompted for `needs_multifactor_verification` after providing credentials through `/rso-auth/v2/authentication/credentials`.\n\nThe `retry` boolean can be set when calling this API to cause MFA to push the multifactor message to the user again.\nIn some error cases, the `error` string may be set to indicate more information about the authentication state.\n; operationId=PutRsoAuthV1SessionMultifactor; parameters=System.Object[]; requestBody=; responses=; summary=Update an authentication session with multifactor input to complete login.; tags=System.Object[]}"
    },
    "/rso-auth/v1/session/persistence": {
      "get": "@{description=Returns a `BindingProperty` representing the serialized cookies that maintains the current session that can later be `PUT` back to restore the session.\n\nThis endpoint is only available to Internal calls (plugin-to-plugin)\n; operationId=GetRsoAuthV1SessionPersistence; parameters=System.Object[]; responses=; summary=Retrieves the persistence value of this session as a `BindingProperty` which can be serialized to local storage.; tags=System.Object[]}",
      "put": "@{description=Takes the `BindingProperty` and tries to rehydrate the cookies to restore the session state which can be retrieved by doing a `GET` on this endpoint.\n\nThese cookies will automatically be appended to calls to `/v2/authorizations` and `/v1/session` endpoints as part of the session to restore, refresh and continue to use the session.\n\nThis endpoint is only available to Internal calls (plugin-to-plugin)\n; operationId=PutRsoAuthV1SessionPersistence; parameters=System.Object[]; requestBody=; responses=; summary=Takes a `BindingProperty` and restores the session state.; tags=System.Object[]}"
    },
    "/rso-auth/v1/session/reauthentication": {
      "put": "@{description=Reauthenticates the session with the player password.\n\nThis API should be called when prompted for `needs_reauthentication` from the `/rso-auth/v2/authorizations` API\n\nIf the password is accepted, then the type will be set to `authenticated`.\n\nIn some error cases, the `error` string may be set to indicate more information about the authentication state.\n; operationId=PutRsoAuthV1SessionReauthentication; parameters=System.Object[]; requestBody=; responses=; summary=Update an authentication session with player password to reauthenticate.; tags=System.Object[]}"
    },
    "/rso-auth/v1/session/signup-token": {
      "put": "@{description=Authenticates a player using a token from signup-api; operationId=PutRsoAuthV1SessionSignupToken; parameters=System.Object[]; requestBody=; responses=; summary=Update an authentication session with a token from signup-api.; tags=System.Object[]}"
    },
    "/rso-auth/v1/status-message": {
      "get": "@{operationId=GetRsoAuthV1StatusMessage; parameters=System.Object[]; responses=; summary=Get the current RSO status message; tags=System.Object[]}",
      "post": "@{operationId=PostRsoAuthV1StatusMessage; parameters=System.Object[]; requestBody=; responses=; summary=Update the RSO auth status; tags=System.Object[]}"
    },
    "/rso-auth/v1/userinfo/refresh": {
      "post": "@{operationId=PostRsoAuthV1UserinfoRefresh; parameters=System.Object[]; responses=; summary=This internal endpoint can be used to force a refresh of all current UserInfos.\nThis is an expensive operation and should be only used if necessary.; tags=System.Object[]}"
    },
    "/rso-auth/v1/userinfo/{client-id}": {
      "delete": "@{operationId=DeleteRsoAuthV1UserinfoByClientId; parameters=System.Object[]; responses=; summary=This endpoint is not available until the OpenID configuration is retrieved.; tags=System.Object[]}",
      "get": "@{description=If the client-id has a valid access token managed by the implicit grant mode manager, this API will return the userinfo of the player for the client-id as specified by the access token's scopes.\n\nThis endpoint is not available until the OpenID configuration is retrieved.; operationId=GetRsoAuthV1UserinfoByClientId; parameters=System.Object[]; responses=; summary=Retrieve a player's userinfo using the implicit grant mode managed client-id and access-token.; tags=System.Object[]}",
      "post": "@{description=If the client-id has a valid access token managed by the implicit grant mode manager, this API will return the userinfo of the player for the client-id as specified by the access token's scopes.\n\nThis endpoint is not available until the OpenID configuration is retrieved.; operationId=PostRsoAuthV1UserinfoByClientId; parameters=System.Object[]; responses=; summary=Refresh a player's userinfo using the implicit grant mode managed client-id and access-token.; tags=System.Object[]}"
    },
    "/rso-auth/v2/authorizations": {
      "post": "@{description=Attempts to retrieve the authorization associated with the `client-id` set in the `authorizationRequest`. If the player has not been logged in, then this call will prompt that a login session be established.\n\nWhen POSTing a request for authorization, the body may optionally include an array of `scope`s to be included for the authorization. Likewise, an array of `trustLevels` can be set to set the level at which the authorization state is trusted.\n\nThis API returns type: `needs_authentication` if the client requires authentication before an authorization can be presented, or type: `needs_reauthorization` if the client requires reauthentication before a new authorization can be presented, or type: `authorized` along with the `ImplicitAuthorization` field populated.\n\n; operationId=PostRsoAuthV2Authorizations; parameters=System.Object[]; requestBody=; responses=; summary=Create a new authorization request, or retrieves authorization for an existing request.; tags=System.Object[]}"
    },
    "/rso-auth/v2/authorizations/{client-id}": {
      "delete": "@{description=This API will delete the local instance of the authorization associated with the client-id. This can be retrieved again by first POSTing via the `/rso-auth/v2/authorizations` API.; operationId=DeleteRsoAuthV2AuthorizationsByClientId; parameters=System.Object[]; responses=; summary=Remove the local instance of the authorization for the client-id.; tags=System.Object[]}",
      "get": "@{description=If an authorization request has been created, this API will return the `ImplicitAuthorization` associated with the `client-id`. If an authorization request has not been created, one will need to be created by successfully POSTing to `/rso-auth/v2/authorizations`.\n\nOn success, this API will return type: `authorized` along with the `ImplicitAuthorization` field populated.\n\n; operationId=GetRsoAuthV2AuthorizationsByClientId; parameters=System.Object[]; responses=; summary=Retrieve the authorization for the client-id.; tags=System.Object[]}",
      "patch": "@{description=If an existing authorization exists for this client ID, it will update the request with any values provided and request a fresh authorization.\n\nWhen PATCHing a request to update an existing authorization, the body may optionally include an array of `scope`s to be included for the authorization. Likewise, an array of `trustLevels` can be set to set the level at which the authorization state is trusted.\n\nThis API returns type: `needs_authentication` if the client requires authentication before an authorization can be presented, or type: `needs_reauthorization` if the client requires reauthentication before a new authorization can be presented, or type: `authorized` along with the `ImplicitAuthorization` field populated.\n\n; operationId=PatchRsoAuthV2AuthorizationsByClientId; parameters=System.Object[]; requestBody=; responses=; summary=Updates an existing authorization for a client and requests a new authorization.; tags=System.Object[]}",
      "post": "@{description=This endpoint refreshes authorization for a given client ID and returns the resultant updated authorization; operationId=PostRsoAuthV2AuthorizationsByClientId; parameters=System.Object[]; responses=; summary=Refresh an authorization for a given client; tags=System.Object[]}"
    },
    "/rso-auth/v2/config": {
      "delete": "@{description=Removes configuration overrides. This removes any provided configuration overrides.; operationId=DeleteRsoAuthV2Config; parameters=System.Object[]; responses=; summary=Reset the RSO endpoint configuration.; tags=System.Object[]}",
      "post": "@{description=Overrides the configuration from RSO from the config files, if any. The url should not have a trailing slash and should be the root url for the RSO instance to be used.; operationId=PostRsoAuthV2Config; parameters=System.Object[]; requestBody=; responses=; summary=Override the default RSO configuration; tags=System.Object[]}"
    },
    "/rso-auth/v2/partner-auth": {
      "post": "@{description=Endpoint to be deleted January 2023; Please use '/rso-auth/v3/partner-auth'.; operationId=PostRsoAuthV2PartnerAuth; parameters=System.Object[]; requestBody=; responses=; summary=Log the user in with any of the accepted partner credentials; tags=System.Object[]}"
    },
    "/rso-auth/v3/partner-auth": {
      "post": "@{operationId=PostRsoAuthV3PartnerAuth; parameters=System.Object[]; requestBody=; responses=; summary=Log the user in with any of the accepted partner credentials; tags=System.Object[]}"
    },
    "/rso-authenticator/v1/authentication": {
      "delete": "@{operationId=DeleteRsoAuthenticatorV1Authentication; parameters=System.Object[]; responses=; summary=Delete the current authentication session.; tags=System.Object[]}",
      "get": "@{operationId=GetRsoAuthenticatorV1Authentication; parameters=System.Object[]; responses=; summary=Get the current state of authentication.; tags=System.Object[]}",
      "put": "@{operationId=PutRsoAuthenticatorV1Authentication; parameters=System.Object[]; requestBody=; responses=; summary=Update the current prompt for authentication.; tags=System.Object[]}"
    },
    "/rso-authenticator/v1/authentication/apple": {
      "post": "@{operationId=PostRsoAuthenticatorV1AuthenticationApple; parameters=System.Object[]; requestBody=; responses=; summary=Authenticate a player with apple open id token.; tags=System.Object[]}"
    },
    "/rso-authenticator/v1/authentication/code": {
      "post": "@{operationId=PostRsoAuthenticatorV1AuthenticationCode; parameters=System.Object[]; requestBody=; responses=; summary=Create a new authentication session with code from a previous federated authentication.; tags=System.Object[]}"
    },
    "/rso-authenticator/v1/authentication/facebook": {
      "post": "@{operationId=PostRsoAuthenticatorV1AuthenticationFacebook; parameters=System.Object[]; requestBody=; responses=; summary=Authenticate a player with facebook access token.; tags=System.Object[]}"
    },
    "/rso-authenticator/v1/authentication/gamecenter": {
      "post": "@{description=Removing endpoint on Feb 2022 due to dropped support by Apple. Context JIRA ticket: SDKFEAT-633; operationId=PostRsoAuthenticatorV1AuthenticationGamecenter; parameters=System.Object[]; requestBody=; responses=; summary=Authenticate a player with gamecenter credentials.; tags=System.Object[]}"
    },
    "/rso-authenticator/v1/authentication/google": {
      "post": "@{operationId=PostRsoAuthenticatorV1AuthenticationGoogle; parameters=System.Object[]; requestBody=; responses=; summary=Authenticate a player with google open id token.; tags=System.Object[]}"
    },
    "/rso-authenticator/v1/authentication/link/apple": {
      "put": "@{operationId=PutRsoAuthenticatorV1AuthenticationLinkApple; parameters=System.Object[]; requestBody=; responses=; summary=Link the current authentication with an existing account with apple open id token.; tags=System.Object[]}"
    },
    "/rso-authenticator/v1/authentication/link/code": {
      "put": "@{operationId=PutRsoAuthenticatorV1AuthenticationLinkCode; parameters=System.Object[]; requestBody=; responses=; summary=Link the current authentication with a code from a previous federated authentication.; tags=System.Object[]}"
    },
    "/rso-authenticator/v1/authentication/link/facebook": {
      "put": "@{operationId=PutRsoAuthenticatorV1AuthenticationLinkFacebook; parameters=System.Object[]; requestBody=; responses=; summary=Link the current authentication with an existing account with facebook access token.; tags=System.Object[]}"
    },
    "/rso-authenticator/v1/authentication/link/gamecenter": {
      "put": "@{operationId=PutRsoAuthenticatorV1AuthenticationLinkGamecenter; parameters=System.Object[]; requestBody=; responses=; summary=Link the current authentication with an existing account with gamecenter credentials.; tags=System.Object[]}"
    },
    "/rso-authenticator/v1/authentication/link/google": {
      "put": "@{operationId=PutRsoAuthenticatorV1AuthenticationLinkGoogle; parameters=System.Object[]; requestBody=; responses=; summary=Link the current authentication with an existing account with google open id token.; tags=System.Object[]}"
    },
    "/rso-authenticator/v1/authentication/link/nintendo": {
      "put": "@{operationId=PutRsoAuthenticatorV1AuthenticationLinkNintendo; parameters=System.Object[]; requestBody=; responses=; summary=Link the current authentication with an existing account with nintendo open id tokens.; tags=System.Object[]}"
    },
    "/rso-authenticator/v1/authentication/link/playstation": {
      "put": "@{operationId=PutRsoAuthenticatorV1AuthenticationLinkPlaystation; parameters=System.Object[]; requestBody=; responses=; summary=Link the current authentication with an existing account with playstation authorization code.; tags=System.Object[]}"
    },
    "/rso-authenticator/v1/authentication/link/resendCode": {
      "put": "@{operationId=PutRsoAuthenticatorV1AuthenticationLinkResendCode; parameters=System.Object[]; responses=; summary=Request that a code for linking be resent.; tags=System.Object[]}"
    },
    "/rso-authenticator/v1/authentication/link/riot-identity": {
      "put": "@{operationId=PutRsoAuthenticatorV1AuthenticationLinkRiotIdentity; parameters=System.Object[]; requestBody=; responses=; summary=Link the current authentication with an existing account with riot identity.; tags=System.Object[]}"
    },
    "/rso-authenticator/v1/authentication/link/rso": {
      "put": "@{operationId=PutRsoAuthenticatorV1AuthenticationLinkRso; parameters=System.Object[]; requestBody=; responses=; summary=Link the current authentication with an existing RSO account with access and id tokens.; tags=System.Object[]}"
    },
    "/rso-authenticator/v1/authentication/link/status": {
      "delete": "@{operationId=DeleteRsoAuthenticatorV1AuthenticationLinkStatus; parameters=System.Object[]; responses=; summary=Delete the current web linking code.; tags=System.Object[]}",
      "get": "@{operationId=GetRsoAuthenticatorV1AuthenticationLinkStatus; parameters=System.Object[]; responses=; summary=Get the current status of web linking.; tags=System.Object[]}"
    },
    "/rso-authenticator/v1/authentication/link/xbox": {
      "put": "@{operationId=PutRsoAuthenticatorV1AuthenticationLinkXbox; parameters=System.Object[]; requestBody=; responses=; summary=Link the current authentication with an existing account with xbox tokens.; tags=System.Object[]}"
    },
    "/rso-authenticator/v1/authentication/multifactor": {
      "post": "@{operationId=PostRsoAuthenticatorV1AuthenticationMultifactor; parameters=System.Object[]; requestBody=; responses=; summary=Linking player's social to their multifactor enabled riot account.; tags=System.Object[]}"
    },
    "/rso-authenticator/v1/authentication/nintendo": {
      "post": "@{operationId=PostRsoAuthenticatorV1AuthenticationNintendo; parameters=System.Object[]; requestBody=; responses=; summary=Authenticate a player with nintendo open id tokens.; tags=System.Object[]}"
    },
    "/rso-authenticator/v1/authentication/playstation": {
      "post": "@{operationId=PostRsoAuthenticatorV1AuthenticationPlaystation; parameters=System.Object[]; requestBody=; responses=; summary=Authenticate a player with Playstation id token.; tags=System.Object[]}"
    },
    "/rso-authenticator/v1/authentication/redirect": {
      "post": "@{operationId=PostRsoAuthenticatorV1AuthenticationRedirect; parameters=System.Object[]; requestBody=; responses=; summary=Redirect the current authentication to the given url; tags=System.Object[]}"
    },
    "/rso-authenticator/v1/authentication/riot-identity-signup/complete": {
      "post": "@{operationId=PostRsoAuthenticatorV1AuthenticationRiotIdentitySignupComplete; parameters=System.Object[]; requestBody=; responses=; summary=Complete a new Riot Identity Signup authentication session.; tags=System.Object[]}"
    },
    "/rso-authenticator/v1/authentication/riot-identity-signup/start": {
      "post": "@{operationId=PostRsoAuthenticatorV1AuthenticationRiotIdentitySignupStart; parameters=System.Object[]; requestBody=; responses=; summary=Start a new Riot Identity Signup authentication session.; tags=System.Object[]}"
    },
    "/rso-authenticator/v1/authentication/riot-identity/complete": {
      "post": "@{operationId=PostRsoAuthenticatorV1AuthenticationRiotIdentityComplete; parameters=System.Object[]; requestBody=; responses=; summary=Complete a new Riot Identity authentication session.; tags=System.Object[]}"
    },
    "/rso-authenticator/v1/authentication/riot-identity/start": {
      "post": "@{operationId=PostRsoAuthenticatorV1AuthenticationRiotIdentityStart; parameters=System.Object[]; requestBody=; responses=; summary=Start a new Riot Identity authentication session.; tags=System.Object[]}"
    },
    "/rso-authenticator/v1/authentication/xbox": {
      "post": "@{operationId=PostRsoAuthenticatorV1AuthenticationXbox; parameters=System.Object[]; requestBody=; responses=; summary=Authenticate a player with Xbox xsts token and user hash; tags=System.Object[]}"
    },
    "/rso-authenticator/v1/config": {
      "get": "@{operationId=GetRsoAuthenticatorV1Config; parameters=System.Object[]; responses=; summary=Get the current client config; tags=System.Object[]}"
    },
    "/rso-authenticator/v1/login": {
      "post": "@{operationId=PostRsoAuthenticatorV1Login; parameters=System.Object[]; requestBody=; responses=; summary=Completes authentication given a login token; tags=System.Object[]}"
    },
    "/rso-authenticator/v1/web-authentication-url": {
      "post": "@{operationId=PostRsoAuthenticatorV1WebAuthenticationUrl; parameters=System.Object[]; requestBody=; responses=; summary=Provides a url for performing a web based authentication; tags=System.Object[]}"
    },
    "/rso-mobile-ui/v1/account-promotion/initiate": {
      "post": "@{description=Launches a UI for handling account promotion; operationId=PostRsoMobileUiV1AccountPromotionInitiate; parameters=System.Object[]; responses=; tags=System.Object[]}"
    },
    "/rso-mobile-ui/v1/account-promotion/status": {
      "get": "@{operationId=GetRsoMobileUiV1AccountPromotionStatus; parameters=System.Object[]; responses=; summary=Get the current account promotion UI status; tags=System.Object[]}"
    },
    "/rso-mobile-ui/v1/authentication-redirect": {
      "post": "@{description=Internal endpoint for triggering redirect of the current authentication to a given url.; operationId=PostRsoMobileUiV1AuthenticationRedirect; parameters=System.Object[]; requestBody=; responses=; tags=System.Object[]}"
    },
    "/rso-mobile-ui/v1/debug/browser/redirect": {
      "post": "@{operationId=PostRsoMobileUiV1DebugBrowserRedirect; parameters=System.Object[]; requestBody=; responses=; tags=System.Object[]}"
    },
    "/rso-mobile-ui/v1/debug/configurations": {
      "get": "@{operationId=GetRsoMobileUiV1DebugConfigurations; parameters=System.Object[]; responses=; summary=Introspect the current configuration; tags=System.Object[]}"
    },
    "/rso-mobile-ui/v1/debug/sdk": {
      "post": "@{operationId=PostRsoMobileUiV1DebugSdk; parameters=System.Object[]; requestBody=; responses=; tags=System.Object[]}"
    },
    "/rso-mobile-ui/v1/debug/webview/decide-navigation-policy": {
      "post": "@{operationId=PostRsoMobileUiV1DebugWebviewDecideNavigationPolicy; parameters=System.Object[]; requestBody=; responses=; tags=System.Object[]}"
    },
    "/rso-mobile-ui/v1/debug/webview/javascript-message": {
      "post": "@{operationId=PostRsoMobileUiV1DebugWebviewJavascriptMessage; parameters=System.Object[]; requestBody=; responses=; tags=System.Object[]}"
    },
    "/rso-mobile-ui/v1/debug/webview/launch": {
      "post": "@{operationId=PostRsoMobileUiV1DebugWebviewLaunch; parameters=System.Object[]; requestBody=; responses=; summary=Debug endpoint to detect page launches; tags=System.Object[]}"
    },
    "/rso-mobile-ui/v1/debug/webview/load-error-page": {
      "post": "@{operationId=PostRsoMobileUiV1DebugWebviewLoadErrorPage; parameters=System.Object[]; requestBody=; responses=; tags=System.Object[]}"
    },
    "/rso-mobile-ui/v1/debug/webview/simulate-onfinish": {
      "post": "@{operationId=PostRsoMobileUiV1DebugWebviewSimulateOnfinish; parameters=System.Object[]; requestBody=; responses=; summary=Simulates the callback from the web view closing; tags=System.Object[]}"
    },
    "/rso-mobile-ui/v1/delete-account": {
      "post": "@{operationId=PostRsoMobileUiV1DeleteAccount; parameters=System.Object[]; responses=; summary=Initiates the Account Deletion UI to delete a player's Riot account. Be careful, this functionality is destructive - making it difficult, if not impossible, to recover an account.; tags=System.Object[]}"
    },
    "/rso-mobile-ui/v1/delete-account/status": {
      "get": "@{description=\n**Response**\n* `status`: the current status of the Delete Account flow. Of type Api::AccountDeletionV1::AccountDeletionUIStatus.\n; operationId=GetRsoMobileUiV1DeleteAccountStatus; parameters=System.Object[]; responses=; summary=Retrieves the current status of the Account Deletion UI initiated via /rso-mobile-ui/v1/delete-account. Most useful for a client to track whether or not an Account Deletion flow was cancelled or completed.; tags=System.Object[]}"
    },
    "/rso-mobile-ui/v1/eula/initiate": {
      "post": "@{description=Launches a dialog UI for requesting player acceptance to the current EULA from rcp-be-eula; operationId=PostRsoMobileUiV1EulaInitiate; parameters=System.Object[]; requestBody=; responses=; tags=System.Object[]}"
    },
    "/rso-mobile-ui/v1/eula/status": {
      "get": "@{description=Get the current EULA UI status.; operationId=GetRsoMobileUiV1EulaStatus; parameters=System.Object[]; responses=; tags=System.Object[]}"
    },
    "/rso-mobile-ui/v1/federated-login": {
      "post": "@{description=Internal endpoint for triggering federated logins for account linking.; operationId=PostRsoMobileUiV1FederatedLogin; parameters=System.Object[]; requestBody=; responses=; tags=System.Object[]}"
    },
    "/rso-mobile-ui/v1/ios-auth-redirect": {
      "post": "@{operationId=PostRsoMobileUiV1IosAuthRedirect; parameters=System.Object[]; requestBody=; responses=; summary=iOS application open url event; tags=System.Object[]}"
    },
    "/rso-mobile-ui/v1/login/initiate": {
      "post": "@{description=Launches an Android Activity or iOS UIView to display a login flow to the player using a WebView; operationId=PostRsoMobileUiV1LoginInitiate; parameters=System.Object[]; requestBody=; responses=; tags=System.Object[]}"
    },
    "/rso-mobile-ui/v1/login/status": {
      "get": "@{operationId=GetRsoMobileUiV1LoginStatus; parameters=System.Object[]; responses=; summary=Get the current login UI status; tags=System.Object[]}"
    },
    "/rso-mobile-ui/v1/login/strategies": {
      "get": "@{description=Returns a list of strategies supported by the rso-mobile-ui plugin for this SDK version and client id; operationId=GetRsoMobileUiV1LoginStrategies; parameters=System.Object[]; responses=; tags=System.Object[]}"
    },
    "/rso-mobile-ui/v1/region-election": {
      "delete": "@{operationId=DeleteRsoMobileUiV1RegionElection; parameters=System.Object[]; responses=; summary=Programmatically dismiss the Region Election UI. Note that this endpoit returns immediately, but the resource is finalized synchronously.; tags=System.Object[]}",
      "get": "@{operationId=GetRsoMobileUiV1RegionElection; parameters=System.Object[]; responses=; summary=Fetches the state of the Region Election UI; tags=System.Object[]}",
      "post": "@{operationId=PostRsoMobileUiV1RegionElection; parameters=System.Object[]; requestBody=; responses=; summary=Initiates the display of the Region Election UI; tags=System.Object[]}",
      "put": "@{operationId=PutRsoMobileUiV1RegionElection; parameters=System.Object[]; requestBody=; responses=; summary=Programmatically update the state of the Region Election UI; tags=System.Object[]}"
    },
    "/rso-mobile-ui/v1/region-election/eligibility": {
      "get": "@{operationId=GetRsoMobileUiV1RegionElectionEligibility; parameters=System.Object[]; responses=; summary=Check if a player is eligible for region election with UI; tags=System.Object[]}"
    },
    "/rso-mobile-ui/v1/show-game-out-of-date": {
      "post": "@{operationId=PostRsoMobileUiV1ShowGameOutOfDate; parameters=System.Object[]; requestBody=; responses=; summary=Show a native dialog displaying game is out of date and redirecting user to app store; tags=System.Object[]}"
    },
    "/rso-mobile-ui/v1/vng/profile/{productId}": {
      "post": "@{description=Launches a WebView to edit VNG (Vietnam) profile registration; operationId=PostRsoMobileUiV1VngProfileByProductId; parameters=System.Object[]; responses=; tags=System.Object[]}"
    },
    "/rso-mobile-ui/v1/vng/register/{productId}": {
      "post": "@{description=Launches a WebView (if necessary) to handle initial, one-time, game-specific, required VNG (Vietnam) profile registration; operationId=PostRsoMobileUiV1VngRegisterByProductId; parameters=System.Object[]; responses=; tags=System.Object[]}"
    },
    "/rso-mobile-ui/v1/vng/status": {
      "get": "@{description=Get the current VNG Registration UI status.; operationId=GetRsoMobileUiV1VngStatus; parameters=System.Object[]; responses=; tags=System.Object[]}"
    },
    "/rso-mobile-ui/v2/eula": {
      "get": "@{description=Get the current EULA UI V2 content.; operationId=GetRsoMobileUiV2Eula; parameters=System.Object[]; responses=; tags=System.Object[]}"
    },
    "/rso-mobile-ui/v2/eula/agreement": {
      "post": "@{description=Saves agreement status; operationId=PostRsoMobileUiV2EulaAgreement; parameters=System.Object[]; requestBody=; responses=; tags=System.Object[]}"
    },
    "/rso-mobile-ui/v2/eula/initiate": {
      "post": "@{description=Launches a WebView for requesting player acceptance to the current EULA from rcp-be-eula; operationId=PostRsoMobileUiV2EulaInitiate; parameters=System.Object[]; responses=; tags=System.Object[]}"
    },
    "/rso-mobile-ui/v2/eula/status": {
      "get": "@{description=Get the current EULA UI V2 status.; operationId=GetRsoMobileUiV2EulaStatus; parameters=System.Object[]; responses=; tags=System.Object[]}"
    },
    "/scd/v1/cookies": {
      "get": "@{operationId=GetScdV1Cookies; parameters=System.Object[]; responses=; summary=Returns the list of cookies; tags=System.Object[]}"
    },
    "/scd/v1/enabled": {
      "get": "@{operationId=GetScdV1Enabled; parameters=System.Object[]; responses=; summary=Returns whether SCD communication is enabled.; tags=System.Object[]}",
      "post": "@{operationId=PostScdV1Enabled; parameters=System.Object[]; requestBody=; responses=; summary=Activates communication to the SCD service.; tags=System.Object[]}"
    },
    "/scd/v1/enabled-in-config": {
      "get": "@{description=This provides an indicator that SCD communication may become available if any requests are made and acts as an emergency kill-switch to disable requests to SCD service. Use /scd/v1/enabled to determine if SCD is currently enabled.; operationId=GetScdV1EnabledInConfig; parameters=System.Object[]; responses=; summary=Returns whether SCD communication is enabled in confguration.; tags=System.Object[]}"
    },
    "/scd/v1/url-patterns/test": {
      "post": "@{operationId=PostScdV1UrlPatternsTest; parameters=System.Object[]; requestBody=; responses=; summary=Returns whether a url refers to SCD-protected content; tags=System.Object[]}"
    },
    "/social/v1/friends": {
      "get": "@{operationId=GetSocialV1Friends; parameters=System.Object[]; responses=; summary=When subscribed to this endpoint will notify with the entire friend list on every create/update/delete.; tags=System.Object[]}"
    },
    "/social/v1/friends/patch": {
      "get": "@{operationId=GetSocialV1FriendsPatch; parameters=System.Object[]; responses=; summary=For subscriptions only. On update and delete will notify with patches (changed elements only) rather than the full list. For a simple GET use the non-patch version of this URL.; tags=System.Object[]}"
    },
    "/social/v1/initialize": {
      "post": "@{operationId=PostSocialV1Initialize; parameters=System.Object[]; requestBody=; responses=; tags=System.Object[]}"
    },
    "/social/v1/ready": {
      "get": "@{operationId=GetSocialV1Ready; parameters=System.Object[]; responses=; tags=System.Object[]}"
    },
    "/swagger/v1/api-docs": {
      "get": "@{operationId=GetSwaggerV1ApiDocs; parameters=System.Object[]; responses=; summary=Retrieves the API documentation; tags=System.Object[]}"
    },
    "/swagger/v2/swagger.json": {
      "get": "@{operationId=GetSwaggerV2SwaggerJson; parameters=System.Object[]; responses=; summary=Retrieves the API documentation; tags=System.Object[]}"
    },
    "/swagger/v3/openapi.json": {
      "get": "@{operationId=GetSwaggerV3OpenapiJson; parameters=System.Object[]; responses=; summary=Retrieves the API documentation; tags=System.Object[]}"
    },
    "/telemetry/v1/application-start-time": {
      "get": "@{operationId=GetTelemetryV1ApplicationStartTime; parameters=System.Object[]; responses=; summary=Gets the millisecond UNIX timestamp of when the application was started.; tags=System.Object[]}"
    },
    "/telemetry/v1/availability": {
      "get": "@{operationId=GetTelemetryV1Availability; parameters=System.Object[]; responses=; summary=Returns the availability for each telemetry ingest endpoint. This is not updated dynamically.; tags=System.Object[]}"
    },
    "/telemetry/v1/common-data/{key}": {
      "post": "@{operationId=PostTelemetryV1CommonDataByKey; parameters=System.Object[]; requestBody=; responses=; summary=Adds/updates a common data key and value to be sent with every subsequent event.; tags=System.Object[]}"
    },
    "/telemetry/v1/events/{eventType}": {
      "post": "@{operationId=PostTelemetryV1EventsByEventType; parameters=System.Object[]; requestBody=; responses=; summary=Adds a new event to be sent to Dradis and/or other analytics/monitoring data sinks. All events will have their eventType prefixed; tags=System.Object[]}"
    },
    "/telemetry/v1/metrics/{name}": {
      "put": "@{operationId=PutTelemetryV1MetricsByName; parameters=System.Object[]; requestBody=; responses=; summary=Pushes a metric sample to a public collector endpoint.; tags=System.Object[]}"
    },
    "/telemetry/v1/singular/event/{eventName}": {
      "post": "@{operationId=PostTelemetryV1SingularEventByEventName; parameters=System.Object[]; requestBody=; responses=; summary=Sends an event to Singular (hits a derivative of the Singular s2s 'event' endpoint).; tags=System.Object[]}"
    },
    "/telemetry/v1/singular/session": {
      "post": "@{operationId=PostTelemetryV1SingularSession; parameters=System.Object[]; requestBody=; responses=; summary=Starts a session with Singular (hits the Singular s2s 'launch' endpoint).; tags=System.Object[]}"
    },
    "/telemetry/v1/structured_logs": {
      "put": "@{operationId=PutTelemetryV1StructuredLogs; parameters=System.Object[]; requestBody=; responses=; summary=Handles a new structured log message for pushing to a public Collector-V1 endpoint. Structured log fields must be of the following types: bool, string, float, int, uint; tags=System.Object[]}"
    },
    "/telemetry/v2/events-extended/{id}": {
      "put": "@{operationId=PutTelemetryV2EventsExtendedById; parameters=System.Object[]; requestBody=; responses=; summary=Sends the event to the Analytics Pipeline CollectorV2 endpoint (https://data.riotgames.com). This backend differs from /v1/events as it requires schemas to be registered in the schema repository.; tags=System.Object[]}"
    },
    "/telemetry/v2/events-schemaless/{id}": {
      "put": "@{operationId=PutTelemetryV2EventsSchemalessById; parameters=System.Object[]; requestBody=; responses=; summary=Sends the event directly to New Relic, without sending the data to AP.; tags=System.Object[]}"
    },
    "/telemetry/v2/events/{id}": {
      "put": "@{operationId=PutTelemetryV2EventsById; parameters=System.Object[]; requestBody=; responses=; summary=Sends the event to the Analytics Pipeline CollectorV2 endpoint (https://data.riotgames.com). This backend differs from /v1/events as it requires schemas to be registered in the schema repository.; tags=System.Object[]}"
    },
    "/telemetry/v2/legacy-metadata/{propertyName}": {
      "delete": "@{operationId=DeleteTelemetryV2LegacyMetadataByPropertyName; parameters=System.Object[]; responses=; summary=Deletes a property intended to be shared across both the riotgamesapi__ and riotclient__ schemas.; tags=System.Object[]}",
      "post": "@{operationId=PostTelemetryV2LegacyMetadataByPropertyName; parameters=System.Object[]; requestBody=; responses=; summary=Sets metadata intended to be shared across both the riotgamesapi__ and riotclient__ schemas.; tags=System.Object[]}"
    },
    "/telemetry/v2/metadata/{schemaPrefix}/{metadataEntity}/{propertyName}": {
      "delete": "@{operationId=DeleteTelemetryV2MetadataBySchemaPrefixByMetadataEntityByPropertyName; parameters=System.Object[]; responses=; summary=Deletes a property in the metadata automatically applied to a type of analytics platform event; tags=System.Object[]}",
      "post": "@{operationId=PostTelemetryV2MetadataBySchemaPrefixByMetadataEntityByPropertyName; parameters=System.Object[]; requestBody=; responses=; summary=Sets the metadata to automatically apply to a type of analytics platform event; tags=System.Object[]}"
    },
    "/tencent-launcher/v1/debug/force-load": {
      "post": "@{description=\n            **Description**\n            A debug API to force-load the ACLSDK, even if configured off.\n            Can only be used internally for testing.\n        ; operationId=PostTencentLauncherV1DebugForceLoad; parameters=System.Object[]; responses=; summary=Force-load the ACLSDK; tags=System.Object[]}"
    },
    "/tencent-launcher/v1/login": {
      "post": "@{description=**Requirements**\nThis should only be used by products launched via the Tencent Launcher.\n\nThis function is disabled unless the following configuration is passedto the SDK at startup:\n* `publisher`: must be set to `tencent`\n* `auth-via-tencent-launcher`: must be set to `true`\n\nRequires ACLSDK.dll to be present. If absent, calling this functionwill return a `501` error code.\n\n\n            **Description**\n\n            Initializes the ACLSDK, retrieves the player's Tencent credentials\n            from the Tencent Launcher, and uses them to auth with RSO via the\n            partner-auth API.\n\n            **Request Arguments**\n            * `tencentGameId` - The Tencent-supplied game ID\n            * `tencentGameKey` - The Tencent-supplied game key\n\n            **Returns**\n            A successful return indicates that the player has successfully authed\n            with RSO.\n\n            A failed return indicates an error, either with ACLSDK, or the resulting\n            RSO auth.\n        ; operationId=PostTencentLauncherV1Login; parameters=System.Object[]; requestBody=; responses=; summary=Initialize RSO login using mSDK credentials from the Tencent Launcher; tags=System.Object[]}"
    },
    "/tencent-launcher/v1/login-info": {
      "get": "@{description=**Requirements**\nThis should only be used by products launched via the Tencent Launcher.\n\nThis function is disabled unless the following configuration is passedto the SDK at startup:\n* `publisher`: must be set to `tencent`\n* `auth-via-tencent-launcher`: must be set to `true`\n\nRequires ACLSDK.dll to be present. If absent, calling this functionwill return a `501` error code.\n\n\n            **Description**\n            Retrieves the Tencent Launcher LoginInfo (credentials) from the\n            ACLSDK. If logged in, the response will contain the required tokens\n            for RSO auth, or for auth with other Tencent services like Midas.\n\n            This endpoint may be subscribed to, and a notification will be\n            generated when:\n            * `/login` is successfully called, containing the Tencent-specific\n              credentials,\n            * The Tencent Launcher performs a periodic refresh of the credentials.\n\n            **Returns**\n            If `/login` has not yet successfully been called, a `404` error\n            code is returned.\n\n            If the login information is available, a structure is returned\n            containing the fields:\n            * `openid`\n            * `token`\n            * `channel`\n            * `ext`\n\n            These fields should be treated as opaque.\n        ; operationId=GetTencentLauncherV1LoginInfo; parameters=System.Object[]; responses=; summary=Retrieves the mSDK credentials from the Tencent Launcher; tags=System.Object[]}"
    },
    "/tencent-launcher/v1/repair-on-shutdown": {
      "post": "@{description=\n            **Description**\n            After the game shuts down Tencent Launcher will repair the game and then relaunch it.\n        ; operationId=PostTencentLauncherV1RepairOnShutdown; parameters=System.Object[]; responses=; summary=Initializes repair on shutdown flow in the ACLOS; tags=System.Object[]}"
    },
    "/tencent-launcher/v1/update-status": {
      "get": "@{operationId=GetTencentLauncherV1UpdateStatus; parameters=System.Object[]; responses=; summary=Gets the current update status. This will be no-update-available until ACLSDK tells us that there is an update.; tags=System.Object[]}"
    },
    "/voice-chat/v1/active-product": {
      "get": "@{operationId=GetVoiceChatV1ActiveProduct; parameters=System.Object[]; responses=; summary=Get the current active product; tags=System.Object[]}"
    },
    "/voice-chat/v1/audio-properties": {
      "get": "@{operationId=GetVoiceChatV1AudioProperties; parameters=System.Object[]; responses=; summary=Get current audio properties; tags=System.Object[]}"
    },
    "/voice-chat/v1/heartbeat-metrics": {
      "get": "@{description=This endpoint retrieves metrics about active sessions and products that are currently using the voice-chat plugin. It is an internal endpoint, intended for use directly by the info-radiator plugin, which manages the heartbeat cadence of the SDK.; operationId=GetVoiceChatV1HeartbeatMetrics; parameters=System.Object[]; responses=; summary=Retrieve a set of metrics about the voice chat plugin.; tags=System.Object[]}"
    },
    "/voice-chat/v1/initialize-provider/{productName}": {
      "post": "@{operationId=PostVoiceChatV1InitializeProviderByProductName; parameters=System.Object[]; requestBody=; responses=; summary=Eagerly initialize a provider. Needed for device settings to update before a first session is established; tags=System.Object[]}"
    },
    "/voice-chat/v1/push-to-talk": {
      "get": "@{description=Endpoint deleted March 2021.; operationId=GetVoiceChatV1PushToTalk; parameters=System.Object[]; responses=; summary=Get voice chat push to talk configuration status; tags=System.Object[]}",
      "put": "@{description=Endpoint deleted March 2021.; operationId=PutVoiceChatV1PushToTalk; parameters=System.Object[]; requestBody=; responses=; summary=Set voice chat push to talk configuration; tags=System.Object[]}"
    },
    "/voice-chat/v1/push-to-talk/check-available": {
      "post": "@{description=Endpoint deleted March 2021.; operationId=PostVoiceChatV1PushToTalkCheckAvailable; parameters=System.Object[]; requestBody=; responses=; summary=Use to check if we have permissions to start push to talk; tags=System.Object[]}"
    },
    "/voice-chat/v2/devices/capture": {
      "get": "@{operationId=GetVoiceChatV2DevicesCapture; parameters=System.Object[]; responses=; summary=Get the list of available sound capture devices; tags=System.Object[]}"
    },
    "/voice-chat/v2/devices/capture/permission": {
      "get": "@{description=Use this endpoint to determine if the user has granted access to the microphone for voice. Returns an enum that indicates if permission is denied/granted, or if permission needs to be obtained through the prompt-for-permission endpoint.; operationId=GetVoiceChatV2DevicesCapturePermission; parameters=System.Object[]; responses=; summary=Returns true if the user has permission to use the microphone.; tags=System.Object[]}"
    },
    "/voice-chat/v2/devices/capture/prompt-for-permission": {
      "put": "@{description=On Mac OS, starting from 10.14 (Mojave), we must ask the user for permission to access the microphone. Until they accept the prompt, or if they decline, the microphone will be unavailable, and voice will not be transmitted.\nBefore joining a voice channel, users of this plugin should call PUT on this endpoint while being subscribed for updates to /voice-chat/v2/devices/capture/permission. If 'permission' is updated to 'true', the listener must leave and re-join the voice channel to enable the microphone.\nIf the user has already granted or denied permission, this endpoint does nothing. The endpoint always returns immediately with success.; operationId=PutVoiceChatV2DevicesCapturePromptForPermission; parameters=System.Object[]; responses=; summary=Prompts the user for permission to use the microphone, if required.; tags=System.Object[]}"
    },
    "/voice-chat/v2/devices/render": {
      "get": "@{operationId=GetVoiceChatV2DevicesRender; parameters=System.Object[]; responses=; summary=Get the list of available sound render devices; tags=System.Object[]}"
    },
    "/voice-chat/v2/push-to-talk/check-available": {
      "post": "@{operationId=PostVoiceChatV2PushToTalkCheckAvailable; parameters=System.Object[]; requestBody=; responses=; summary=Use to check if we have permissions to start push to talk; tags=System.Object[]}"
    },
    "/voice-chat/v2/push-to-talk/{productName}": {
      "get": "@{operationId=GetVoiceChatV2PushToTalkByProductName; parameters=System.Object[]; responses=; summary=Get voice chat push to talk configuration status; tags=System.Object[]}",
      "put": "@{operationId=PutVoiceChatV2PushToTalkByProductName; parameters=System.Object[]; requestBody=; responses=; summary=Set voice chat push to talk configuration; tags=System.Object[]}"
    },
    "/voice-chat/v2/sessions": {
      "delete": "@{description=Endpoint deleted March 2021.; operationId=DeleteVoiceChatV2Sessions; parameters=System.Object[]; responses=; summary=Leave all joined sessions; tags=System.Object[]}",
      "get": "@{description=Endpoint deleted March 2021.; operationId=GetVoiceChatV2Sessions; parameters=System.Object[]; responses=; summary=Get the list of all current voice sessions; tags=System.Object[]}",
      "post": "@{description=Endpoint deleted March 2021.; operationId=PostVoiceChatV2Sessions; parameters=System.Object[]; responses=; summary=Join a session with game-specific JWT token; tags=System.Object[]}",
      "put": "@{description=volume: Controls the output volume for a room. Set to 0 to mute.\nisFocused: Toggles if a session gains volume priority, which dampens the volume of the other sessions.\nisTransmitEnabled: Toggles audio input for a session.\n\n\nEndpoint deleted March 2021.; operationId=PutVoiceChatV2Sessions; parameters=System.Object[]; requestBody=; responses=; summary=Update the properties for all sessions; tags=System.Object[]}"
    },
    "/voice-chat/v2/sessions/{id}": {
      "delete": "@{description=Endpoint deleted March 2021.; operationId=DeleteVoiceChatV2SessionsById; parameters=System.Object[]; responses=; summary=Leave a session; tags=System.Object[]}",
      "get": "@{description=Endpoint deleted March 2021.; operationId=GetVoiceChatV2SessionsById; parameters=System.Object[]; responses=; summary=Get session details; tags=System.Object[]}",
      "put": "@{description=volume: Controls the output volume for a room. Set to 0 to mute.\nisFocused: Toggles if a session gains volume priority, which dampens the volume of the other sessions.\nisTransmitEnabled: Toggles audio input for a session.\n\n\nEndpoint deleted March 2021.; operationId=PutVoiceChatV2SessionsById; parameters=System.Object[]; requestBody=; responses=; summary=Update the properties for a session; tags=System.Object[]}"
    },
    "/voice-chat/v2/sessions/{sessionId}/participants/{participantId}": {
      "get": "@{description=Endpoint deleted March 2021.; operationId=GetVoiceChatV2SessionsBySessionIdParticipantsByParticipantId; parameters=System.Object[]; responses=; summary=Get participant details; tags=System.Object[]}",
      "put": "@{description=Endpoint deleted March 2021.; operationId=PutVoiceChatV2SessionsBySessionIdParticipantsByParticipantId; parameters=System.Object[]; requestBody=; responses=; summary=Update local participant details; tags=System.Object[]}"
    },
    "/voice-chat/v2/settings": {
      "get": "@{description=Endpoint deleted March 2021.; operationId=GetVoiceChatV2Settings; parameters=System.Object[]; responses=; summary=Get current voice chat settings; tags=System.Object[]}",
      "put": "@{description=Endpoint deleted March 2021.; operationId=PutVoiceChatV2Settings; parameters=System.Object[]; requestBody=; responses=; summary=Update current voice chat settings; tags=System.Object[]}"
    },
    "/voice-chat/v2/state": {
      "get": "@{description=Always returns true. SDK inititalize/authenticate/authorize is now done when creating/joining a voice session/channel\n\nEndpoint deleted October 2020.; operationId=GetVoiceChatV2State; parameters=System.Object[]; responses=; summary=Get the connection state; tags=System.Object[]}"
    },
    "/voice-chat/v3/sessions/{productName}": {
      "delete": "@{description=Endpoint deprecated and will be deleted November 2022.  Please use /voice-chat/v4/sessions/{productName}; operationId=DeleteVoiceChatV3SessionsByProductName; parameters=System.Object[]; responses=; summary=Leave all joined sessions; tags=System.Object[]}",
      "get": "@{description=Endpoint deprecated and will be deleted November 2022.  Please use /voice-chat/v4/sessions/{productName}; operationId=GetVoiceChatV3SessionsByProductName; parameters=System.Object[]; responses=; summary=Get the list of all current voice sessions; tags=System.Object[]}",
      "post": "@{description=Endpoint deprecated and will be deleted November 2022.  Please use /voice-chat/v4/sessions/{productName}; operationId=PostVoiceChatV3SessionsByProductName; parameters=System.Object[]; responses=; summary=Join a session with game-specific JWT token; tags=System.Object[]}",
      "put": "@{description=volume: Controls the output volume for a room. Set to 0 to mute.\nisFocused: Toggles if a session gains volume priority, which dampens the volume of the other sessions.\nisTransmitEnabled: Toggles audio input for a session.\n\n\nEndpoint deprecated and will be deleted November 2022.  Please use /voice-chat/v4/sessions/{productName}; operationId=PutVoiceChatV3SessionsByProductName; parameters=System.Object[]; requestBody=; responses=; summary=Update the properties for all sessions; tags=System.Object[]}"
    },
    "/voice-chat/v3/sessions/{productName}/{id}": {
      "delete": "@{description=Endpoint deprecated and will be deleted November 2022.  Please use /voice-chat/v4/sessions/{productName}; operationId=DeleteVoiceChatV3SessionsByProductNameById; parameters=System.Object[]; responses=; summary=Leave a session; tags=System.Object[]}",
      "get": "@{description=Endpoint deprecated and will be deleted November 2022.  Please use /voice-chat/v4/sessions/{productName}/{id}; operationId=GetVoiceChatV3SessionsByProductNameById; parameters=System.Object[]; responses=; summary=Get session details; tags=System.Object[]}",
      "put": "@{description=volume: Controls the output volume for a room. Set to 0 to mute.\nisFocused: Toggles if a session gains volume priority, which dampens the volume of the other sessions.\nisTransmitEnabled: Toggles audio input for a session.\n\n\nEndpoint deprecated and will be deleted November 2022.  Please use /voice-chat/v4/sessions/{productName}; operationId=PutVoiceChatV3SessionsByProductNameById; parameters=System.Object[]; requestBody=; responses=; summary=Update the properties for a session; tags=System.Object[]}"
    },
    "/voice-chat/v3/sessions/{productName}/{sessionId}/participants/{participantId}": {
      "get": "@{description=Endpoint deprecated and will be deleted November 2022.  Please use /voice-chat/v4/sessions/{productName}; operationId=GetVoiceChatV3SessionsByProductNameBySessionIdParticipantsByParticipantId; parameters=System.Object[]; responses=; summary=Get participant details; tags=System.Object[]}",
      "put": "@{description=Endpoint deprecated and will be deleted November 2022.  Please use /voice-chat/v4/sessions/{productName}; operationId=PutVoiceChatV3SessionsByProductNameBySessionIdParticipantsByParticipantId; parameters=System.Object[]; requestBody=; responses=; summary=Update local participant details; tags=System.Object[]}"
    },
    "/voice-chat/v3/settings/{productName}": {
      "get": "@{operationId=GetVoiceChatV3SettingsByProductName; parameters=System.Object[]; responses=; summary=Get current voice chat settings; tags=System.Object[]}",
      "put": "@{operationId=PutVoiceChatV3SettingsByProductName; parameters=System.Object[]; requestBody=; responses=; summary=Update current voice chat settings; tags=System.Object[]}"
    },
    "/voice-chat/v4/sessions/{productName}": {
      "delete": "@{operationId=DeleteVoiceChatV4SessionsByProductName; parameters=System.Object[]; responses=; summary=Leave all joined sessions; tags=System.Object[]}",
      "get": "@{operationId=GetVoiceChatV4SessionsByProductName; parameters=System.Object[]; responses=; summary=Get the list of all current voice sessions; tags=System.Object[]}",
      "post": "@{operationId=PostVoiceChatV4SessionsByProductName; parameters=System.Object[]; requestBody=; responses=; summary=Join a session with game-specific JWT token; tags=System.Object[]}",
      "put": "@{description=volume: Controls the output volume for a room. Set to 0 to mute.\nisFocused: Toggles if a session gains volume priority, which dampens the volume of the other sessions.\nisTransmitEnabled: Toggles audio input for a session.\n; operationId=PutVoiceChatV4SessionsByProductName; parameters=System.Object[]; requestBody=; responses=; summary=Update the properties for all sessions; tags=System.Object[]}"
    },
    "/voice-chat/v4/sessions/{productName}/{id}": {
      "delete": "@{operationId=DeleteVoiceChatV4SessionsByProductNameById; parameters=System.Object[]; responses=; summary=Leave a session; tags=System.Object[]}",
      "get": "@{operationId=GetVoiceChatV4SessionsByProductNameById; parameters=System.Object[]; responses=; summary=Get session details; tags=System.Object[]}",
      "put": "@{description=volume: Controls the output volume for a room. Set to 0 to mute.\nisFocused: Toggles if a session gains volume priority, which dampens the volume of the other sessions.\nisTransmitEnabled: Toggles audio input for a session.\n; operationId=PutVoiceChatV4SessionsByProductNameById; parameters=System.Object[]; requestBody=; responses=; summary=Update the properties for a session; tags=System.Object[]}"
    },
    "/voice-chat/v4/sessions/{productName}/{sessionId}/participants/{participantId}": {
      "get": "@{operationId=GetVoiceChatV4SessionsByProductNameBySessionIdParticipantsByParticipantId; parameters=System.Object[]; responses=; summary=Get participant details; tags=System.Object[]}",
      "put": "@{operationId=PutVoiceChatV4SessionsByProductNameBySessionIdParticipantsByParticipantId; parameters=System.Object[]; requestBody=; responses=; summary=Update local participant details; tags=System.Object[]}"
    },
    "/xbox-account/v1/authorization": {
      "post": "@{operationId=PostXboxAccountV1Authorization; parameters=System.Object[]; requestBody=; responses=; summary=Gets authorization from the Xbox Account of the player logged in the Xbox; tags=System.Object[]}"
    },
    "/xbox-account/v1/authorization-consent": {
      "get": "@{operationId=GetXboxAccountV1AuthorizationConsent; parameters=System.Object[]; responses=; summary=Authorization consent status for Xbox; tags=System.Object[]}",
      "put": "@{operationId=PutXboxAccountV1AuthorizationConsent; parameters=System.Object[]; requestBody=; responses=; summary=Update authorization consent status for Xbox; tags=System.Object[]}"
    },
    "/xbox-account/v1/player-nickname": {
      "get": "@{operationId=GetXboxAccountV1PlayerNickname; parameters=System.Object[]; responses=; summary=Get user's Xbox gamertag; tags=System.Object[]}"
    },
    "/xbox-account/v1/player-nickname-without-consent": {
      "get": "@{operationId=GetXboxAccountV1PlayerNicknameWithoutConsent; parameters=System.Object[]; responses=; summary=Get user's Xbox gamertag without checking authorization consent; tags=System.Object[]}"
    },
    "/xbox-account/v1/user": {
      "post": "@{operationId=PostXboxAccountV1User; parameters=System.Object[]; requestBody=; responses=; summary=Sign in user on Xbox; tags=System.Object[]}"
    }
  }
}
