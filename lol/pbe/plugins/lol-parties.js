(() => {
  var __webpack_modules__ = [
      ,
      (e) => {
        "use strict";
        let t;
        function n() {
          return (
            t ||
            (console.error(
              "The `provider` object has not been set, please do so by calling the `init` method.",
            ),
            null)
          );
        }
        const i = {
          init: function (e, n) {
            return (t = e), this.add(n);
          },
          _getValue: function (e, n) {
            let i;
            return (
              "function" == typeof n
                ? ((i = n(t)),
                  i ||
                    console.warn(
                      "The function for key " + e + " returned a falsy value: ",
                      i,
                    ))
                : "string" == typeof n
                  ? ((i = t.get(n)),
                    i ||
                      console.warn(
                        "The provider `get` invocation for the key " +
                          e +
                          " returned a falsy value: ",
                        i,
                      ))
                  : "object" == typeof n && (i = n),
              i
            );
          },
          add: function (e) {
            e = e || {};
            const t = [],
              n = this;
            return (
              Object.keys(e).forEach(function (i) {
                const s = e[i],
                  o = n._getValue(i, s);
                o && o.then
                  ? (o.then(function (e) {
                      e ||
                        console.warn(
                          "The promise for the key " +
                            i +
                            " resolved with a falsy value: ",
                          e,
                        ),
                        n._addValue(i, e);
                    }),
                    t.push(o))
                  : n._addValue(i, o);
              }),
              Promise.all(t)
            );
          },
          _addValue: function (e, t) {
            this[e] = t;
          },
          provider: function () {
            return (
              console.error(
                "The function `provider` has been deprecated, please use `getProvider`",
                new Error().stack,
              ),
              n()
            );
          },
          getProvider: function () {
            return n();
          },
        };
        e.exports = i;
      },
      (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.default = void 0);
        var n = new (class {
          constructor() {
            this.subDoc = document;
          }
          set(e) {
            this.subDoc = e;
          }
          get() {
            return this.subDoc;
          }
        })();
        t.default = n;
      },
      (e, t, n) => {
        "use strict";
        var i = (function (e, t) {
            if (!t && e && e.__esModule) return e;
            if (null === e || ("object" != typeof e && "function" != typeof e))
              return { default: e };
            var n = v(t);
            if (n && n.has(e)) return n.get(e);
            var i = {},
              s = Object.defineProperty && Object.getOwnPropertyDescriptor;
            for (var o in e)
              if (
                "default" !== o &&
                Object.prototype.hasOwnProperty.call(e, o)
              ) {
                var a = s ? Object.getOwnPropertyDescriptor(e, o) : null;
                a && (a.get || a.set)
                  ? Object.defineProperty(i, o, a)
                  : (i[o] = e[o]);
              }
            (i.default = e), n && n.set(e, i);
            return i;
          })(n(1)),
          s = y(n(4)),
          o = y(n(14)),
          a = y(n(15)),
          r = y(n(16)),
          l = y(n(17)),
          c = y(n(5)),
          m = y(n(7)),
          u = y(n(20)),
          d = y(n(10)),
          p = n(9),
          h = n(12),
          g = y(n(21)),
          b = y(n(22)),
          f = y(n(24)),
          _ = y(n(25));
        function y(e) {
          return e && e.__esModule ? e : { default: e };
        }
        function v(e) {
          if ("function" != typeof WeakMap) return null;
          var t = new WeakMap(),
            n = new WeakMap();
          return (v = function (e) {
            return e ? n : t;
          })(e);
        }
        const S = "/lol-summoner/v1/current-summoner",
          x = i.default.getProvider().getSocket(),
          E = i.Navigation.getFullPageModalManager(),
          k = i.UIKit.getModalManager();
        e.exports = class {
          constructor() {
            (this._currentParty = null),
              (this._currentPlayer = null),
              (this._selected = null),
              (this._application = null),
              (this._lastGameflowPhase = null),
              (this._factoryRegistered = !1),
              (this._restoreNavigationState = null),
              (this._applicationRegisteredPromise = null),
              (this._partyCreatedCallback = null),
              (this._lobbiesObserver = !1),
              (this._gameflowObserver = !1),
              (this._queues = m.default),
              (this._platformConfigSingleton = d.default),
              (this._showingState = r.default.create());
            const e = i.Viewport.getApiKey(
              "rcp-fe-lol-parties - bump/release parties",
            );
            b.default.set("viewportApiKey", e),
              (this._screenRoot = i.Viewport.main().getScreenRoot(
                e,
                "rcp-fe-lol-parties",
              )),
              this._connectViewportIsShowing(),
              this._connectToPatcher(),
              (this._requirements = { login: !1, summoner: !1 }),
              (this._binding = i.dataBinding.bindTo(
                (0, i.getProvider)().getSocket(),
              )),
              this._binding.addObserver(S, this, this._updateSummoner),
              (this._readyCheckNotifications = new f.default());
          }
          show() {
            return new Promise((e, t) => {
              this._createApplication().then(
                () => {
                  i.logger.trace("BUMPING PARTIES SCREEN ROOT"),
                    this._ensureSomethingVisible(),
                    (this._restoreNavigationState = i.Navigation.clearActive()),
                    this._screenRoot.bump().then(() => {
                      i.logger.trace("PARTIES VISIBLE IN SCREEN ROOT"),
                        this._showingState.set("isInViewport", !0);
                    }),
                    e();
                },
                (e) => {
                  t(e);
                },
              );
            });
          }
          showParty(e = !1) {
            return this._currentParty || e
              ? (this._showingState.showParty(),
                this.show().catch((e) => {
                  i.logger.error("ERROR SHOWING PARTY", e);
                }))
              : (i.logger.error(
                  "ASKED TO SHOW PARTY BUT NOT ATTACHED TO PARTY",
                ),
                Promise.reject());
          }
          showGameSelect() {
            return (
              i.logger.trace("SHOWING GAME SELECT"),
              this._showingState.showGameSelect(),
              this.show().catch((e) => {
                i.logger.error("ERROR SHOWING GAME SELECT", e);
              })
            );
          }
          showGameSelectPreselected(e) {
            this._setSelectedAndShowGameSelect(e);
          }
          getAvailableQueueIds(e, t, n) {
            return this._queues.getAvailableQueuesForCategoryAndGameType(
              e,
              t,
              n,
            );
          }
          hide() {
            this._showingState.get("isInViewport") &&
              (this._restoreNavigationState &&
                (this._restoreNavigationState(),
                (this._restoreNavigationState = null)),
              this._showingState.set("isInViewport", !1)),
              i.logger.trace("RELEASING PARTIES SCREEN ROOT"),
              this._screenRoot.release();
          }
          canInvitePlayer(e) {
            return u.default.canInvitePlayer(e);
          }
          invitePlayer(e, t) {
            return u.default.invitePlayer(e, t);
          }
          subscribeCanInvite(e) {
            return u.default.subscribeCanInvite(e);
          }
          unsubscribeCanInvite(e) {
            return u.default.unsubscribeCanInvite(e);
          }
          createLobby(e) {
            return new Promise((t, n) => {
              this._currentParty ||
                (this._partyCreatedCallback = () => {
                  t();
                }),
                this._currentPlayer
                  ? !this._currentParty ||
                    this._currentParty.localMember.isLeader
                    ? (this._lobbiesObserver.createLobby(e),
                      this._currentParty && t())
                    : n(new Error("NOT_LEADER"))
                  : n("NOT_SIGNED_IN");
            });
          }
          _connectViewportIsShowing() {
            this._screenRoot.on("show", () => {
              this._showingState.set("isInViewport", !0),
                b.default.set("isShowing", !0);
            }),
              this._screenRoot.on("hide", () => {
                this._showingState.set("isInViewport", !1),
                  b.default.set("isShowing", !1),
                  this._screenRoot.release();
              });
          }
          _connectToPatcher() {
            i.Navigation.playButtonSubscribe(() => {
              this._playButtonClicked();
            }),
              i.Navigation.lobbyButtonSubscribe(() => {
                this._lobbyButtonClicked();
              }),
              i.Navigation.tftLobbySubscribe(() => {
                this._showTftLobby();
              }),
              this._screenRoot.on("show", () => {
                i.logger.trace("LOCKING PLAY BUTTON"),
                  i.Navigation.setIsShowingLobby(!0);
              }),
              this._screenRoot.on("hide", () => {
                (this._restoreNavigationState = null),
                  i.logger.trace("UNLOCKING PLAY BUTTON"),
                  i.Navigation.setIsShowingLobby(!1);
              });
          }
          _updateSummoner(e) {
            if (!e) return;
            !e.unnamed &&
              !e.nameChangeFlag &&
              this._updateRequirements({ summoner: e });
          }
          _updateRequirements(e) {
            (this._requirements = i.lodash.assign(this._requirements, e)),
              this._requirements.summoner &&
                (this._clearBindings(),
                this._handleNewSession(this._requirements.summoner));
          }
          _clearBindings() {
            this._binding.removeObserver(S, this);
          }
          _handleNewSession(e) {
            (this._currentPlayer = e),
              (this._lobbiesObserver = new s.default(
                this._currentPlayer,
                this._partyCreated.bind(this),
                this._partyDestroyed.bind(this),
                this._partyKicked.bind(this),
                this._partyTimeout.bind(this),
                this._partyGameStartError.bind(this),
                this._partyServiceShutdown.bind(this),
                this._partyServiceUnavailable.bind(this),
              )),
              (this._gameflowObserver = new o.default(
                this._gameflowPhaseChanged.bind(this),
              ));
          }
          _partyCreated(e) {
            if (
              ((this._currentParty = e),
              this._ensureSelectedExists(),
              e.gameConfig)
            ) {
              const { isCustom: t } = e.gameConfig;
              this._selected.set("isTrainingGame", !1),
                this._selected.set("isCreatingCustomGame", t),
                this._selected.set("queueId", e.gameConfig.queueId),
                t
                  ? this._selected.set("mapId", e.gameConfig.mapId)
                  : c.default.checkForRankedDivisionRestriction(e);
            } else i.logger.error("COULD NOT FIND party.gameConfig", e);
            i.logger.trace("PARTY CREATED", this._selected.get("queueId")),
              this._selected.get("isUpdatingSelection") ||
                (p.TUTORIAL_QUEUE_IDS.includes(this._selected.get("queueId"))
                  ? this._showNewPlayerExperience()
                  : this.showParty()),
              this._partyCreatedCallback &&
                (this._partyCreatedCallback(),
                (this._partyCreatedCallback = null));
          }
          _partyDestroyed() {
            this._ensureSelectedExists(),
              this._selected.isUpdatingSelection ||
                (this.hide(),
                this.navigateHomeIfPartyEndedInLobby(),
                (this._currentParty = null));
          }
          navigateHomeIfPartyEndedInLobby() {
            return (0, i.dataBinding)("/lol-gameflow", x)
              .get("/v1/gameflow-phase")
              .then(function (e) {
                ("Lobby" === e || "None" === e) && i.Navigation.showHome();
              });
          }
          _partyKicked() {
            (0, g.default)("parties_kicked_confirmation_body");
          }
          _partyTimeout() {
            (0, g.default)("parties_timeout_confirmation_body");
          }
          _partyGameStartError() {
            (0, g.default)(
              "parties_game_start_error_confirmation_body",
              "parties_game_start_error_confirmation_ok",
            );
          }
          _partyServiceShutdown() {
            (0, g.default)("parties_service_shutdown_error_confirmation_body");
          }
          _partyServiceUnavailable() {
            (0, g.default)(
              "parties_service_unavailable_error_confirmation_body",
            );
          }
          _playButtonClicked() {
            i.logger.trace("PLAY BUTTON CLICKED"),
              this._setSelectedAndShowGameSelect();
          }
          _setSelectedAndShowGameSelect(e) {
            let t;
            if (e) {
              const n = this._queues.get("useOperationalConfigs")
                ? this._queues.get("orderedQueueIds")
                : this._platformConfigSingleton.get("defaultGameQueues");
              t = this._getFirstEligibleQueue(e, n);
            } else t = this._getLastSelected();
            t.then(
              (e) => {
                this._ensureSelectedExists(),
                  this._selected.set("queueId", e),
                  this._selected.set("needsAdditionalGameConfig", !1),
                  this._selected.set("isCreatingCustomGame", !1),
                  this._selected.set("isJoiningCustomGame", !1),
                  this._selected.set("isTrainingGame", !1),
                  this.showGameSelect();
              },
              (e) => {
                i.logger.error("FAILED TO SHOW GAME SELECT", e), n(47)();
              },
            );
          }
          _showTftLobby() {
            this._lobbiesObserver.createLobby(p.DEFAULT_TFT_QUEUE_ID);
          }
          _lobbyButtonClicked() {
            i.logger.trace("LOBBY BUTTON CLICKED"), this.showParty();
          }
          _getNpeQueueDefault() {
            return (0, i.dataBinding)("lol-settings").get(
              "/v2/account/LCUPreferences/lol-npe-first-touch",
            );
          }
          _ensureSelectedExists() {
            this._selected ||
              (this._selected = a.default.create({ queues: this._queues }));
          }
          _getLastSelected() {
            return this._queueIdIfAlreadyPlayed().then((e) => {
              const t = this._queues.get("useOperationalConfigs")
                ? this._queues.get("orderedQueueIds")
                : this._platformConfigSingleton.get("defaultGameQueues");
              return e
                ? (i.logger.trace(
                    "Found last-played-queue, checking eligibility...",
                    e,
                  ),
                  this._getFirstEligibleQueue(e, t))
                : this._getFirstEligibleQueue(null, t);
            });
          }
          _queueIdIfAlreadyPlayed() {
            return this._lobbiesObserver
              ? this._lobbiesObserver.lastLobbyQueueId()
              : Promise.resolve(null);
          }
          _getFirstEligibleQueue(e, t = []) {
            return new Promise((n) => {
              Promise.all([
                c.default.fetchEligibilities(),
                this._getNpeQueueDefault(),
              ]).then((s) => {
                const o = c.default.get("eligibilities");
                if (e && o[e] && o[e].eligible) return void n(e);
                const a = t.slice(),
                  r =
                    s && s.length > 1 && s[1].data
                      ? s[1].data.modeSelected
                      : "";
                r &&
                  r === p.NPE_FIRST_TOUCH_QUEUE_SELECT_ID.TFT &&
                  a.unshift(p.DEFAULT_TFT_QUEUE_ID),
                  a.push(p.DEFAULT_QUEUE_ID);
                for (let e = 0; e < a.length; e++) {
                  const t = a[e];
                  if (o[t] && o[t].eligible) return void n(t);
                }
                for (const e in o)
                  if (o[e].eligible)
                    return (
                      i.logger.info(
                        "NOT ELIGIBLE FOR DEFAULT QUEUES, SELECTING FIRST ELIGIBLE QUEUE FOUND:",
                        e,
                      ),
                      void n(parseInt(e, 10))
                    );
                i.logger.error(
                  "COULD NOT FIND ELIGIBLE QUEUE OUT OF THOSE ENABLED",
                  o,
                ),
                  n(p.DEFAULT_QUEUE_ID);
              });
            });
          }
          _registerApplication() {
            return this._factoryRegistered
              ? Promise.resolve()
              : new Promise((e) => {
                  n(48)().then(() => {
                    (this._factoryRegistered = !0), e();
                  });
                });
          }
          _createApplication() {
            if (this._application) return Promise.resolve(this._application);
            if (this._applicationRegisteredPromise)
              return this._applicationRegisteredPromise;
            const e = (e, t) => {
              this._registerApplication()
                .then(() => {
                  (this._applicationRegisteredPromise = null),
                    this._ensureSelectedExists(),
                    (this._application = i.ComponentFactory.create(
                      "PartiesScreen",
                      {
                        showingState: this._showingState,
                        selected: this._selected,
                        queues: this._queues,
                      },
                    )),
                    this._application.domNode
                      ? (this._screenRoot
                          .getElement()
                          .appendChild(this._application.domNode),
                        e(this._application))
                      : (i.logger.error("FAILED TO INITIALIZE PARTIES SCREEN"),
                        t(
                          new Error(
                            "PartiesScreen application failed to initialize.",
                          ),
                        ));
                })
                .catch((e) => {
                  (this._applicationRegisteredPromise = null),
                    i.logger.error("ERROR REGISTERING PARTIES APPLICATION", e),
                    t(e);
                });
            };
            return (
              (this._applicationRegisteredPromise = new Promise(function (
                t,
                n,
              ) {
                e(t, n);
              })),
              this._applicationRegisteredPromise
            );
          }
          _destroyApplication() {
            this._application &&
              (this._application.domNode &&
                this._screenRoot
                  .getElement()
                  .removeChild(this._application.domNode),
              this._application.onRemove(),
              delete this.application,
              (this.application = !1));
          }
          _gameflowPhaseChanged(e, t) {
            const n = "EndOfGame" === t && "Lobby" === e,
              i = -1 !== ["Lobby", "Matchmaking", "ReadyCheck"].indexOf(e),
              s = "ChampSelect" === t && i;
            "ChampSelect" === t &&
              "Lobby" === e &&
              l.default.handlePartyDodge(),
              n || s ? this.showParty(!0) : "ChampSelect" === e && this.hide();
          }
          _ensureSomethingVisible() {
            this._showingState.get("isShowingParty") ||
              this._showingState.get("isShowingGameSelect") ||
              (this._currentParty
                ? this._showingState.showParty()
                : this._showingState.showGameSelect());
          }
          _getGameModeTutorialSeenSettingsKey(e, t, n) {
            return t === h.CHERRY_GAME_MODE
              ? "Map30_CHERRY_2024_05_TutorialSeen"
              : n
                ? `Map${e}_${t}_${n}_TutorialSeen`
                : `Map${e}_${t}_TutorialSeen`;
          }
          _showGameModeTutorialIfNeeded(e, t, n, s, o, a, r, l) {
            if (!e || !t || !n) return;
            const c = (0, i.dataBinding)("/lol-settings");
            c.get("/v1/account/lol-tutorial").then((i) => {
              const m = this._getGameModeTutorialSeenSettingsKey(e, t, s);
              if (i && i.data && i.data[m]) return;
              const u = this._showGameModeTutorial(t, n, o, a, r, l),
                d = (e) => {
                  "ok-button" === e &&
                    (i.data || (i.data = {}),
                    (i.data[m] = !0),
                    c.patch("/v1/account/lol-tutorial", {
                      data: i.data,
                      schemaVersion: i.schemaVersion,
                    }));
                };
              u ? u.then(d) : d("ok-button");
            });
          }
          _showGameModeTutorial(e, t, n, s, o, a) {
            const r = p.ONE_PAGE_TUTORIAL_GAME_MODES.includes(e),
              l = r
                ? "GameModeOnePageTutorialComponent"
                : "GameModeTutorialComponent",
              c = p.ONE_PAGE_TUTORIAL_LONG_CARD_LAYOUT_GAME_MODES.includes(e),
              m = i.ComponentFactory.create(
                l,
                i.Ember.Object.create({
                  title: n,
                  subheader: s,
                  tutorialCards: t,
                  tutorialBg: o,
                  iconV2: a,
                  isLongCardLayout: c,
                }),
              ),
              u = i.ComponentFactory.getDOMNode(m);
            let d;
            if (r) {
              d = k.add({
                type: "DialogAlert",
                data: {
                  contents: u,
                  okText: i.tra.get(
                    "TFT" === e
                      ? "tft_tutorial_close"
                      : "tutorial_one_page_confirm_button_text",
                  ),
                  dismissible: !0,
                  dismissibleType: "inside",
                },
              }).okPromise;
            } else {
              E.open({ data: { contents: u } });
            }
            return d;
          }
          _showNewPlayerExperience() {
            (0, i.getProvider)()
              .getOptional("rcp-fe-lol-new-player-experience")
              .then(
                (e) => e.show(),
                (e) => i.logger.error("Provider getOptional failure", e),
              );
          }
          _showFlexRestrictionModalIfNeeded() {
            const e = this._flexRestrictionModal
              ? this._flexRestrictionModal
              : new _.default();
            e.tryShow(),
              this._flexRestrictionModal || (this._flexRestrictionModal = e);
          }
          loadQueueEligibilitiesIfDirty() {
            const e = this._queues.get("useOperationalConfigs")
              ? this._queues.get("orderedQueueIds")
              : this._platformConfigSingleton.get("defaultGameQueues");
            return this._getFirstEligibleQueue(null, e);
          }
        };
      },
      (e, t, n) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.default = void 0);
        var i = (function (e, t) {
            if (!t && e && e.__esModule) return e;
            if (null === e || ("object" != typeof e && "function" != typeof e))
              return { default: e };
            var n = r(t);
            if (n && n.has(e)) return n.get(e);
            var i = {},
              s = Object.defineProperty && Object.getOwnPropertyDescriptor;
            for (var o in e)
              if (
                "default" !== o &&
                Object.prototype.hasOwnProperty.call(e, o)
              ) {
                var a = s ? Object.getOwnPropertyDescriptor(e, o) : null;
                a && (a.get || a.set)
                  ? Object.defineProperty(i, o, a)
                  : (i[o] = e[o]);
              }
            (i.default = e), n && n.set(e, i);
            return i;
          })(n(1)),
          s = a(n(5)),
          o = a(n(13));
        function a(e) {
          return e && e.__esModule ? e : { default: e };
        }
        function r(e) {
          if ("function" != typeof WeakMap) return null;
          var t = new WeakMap(),
            n = new WeakMap();
          return (r = function (e) {
            return e ? n : t;
          })(e);
        }
        const l = i.default.getProvider().getSocket();
        var c = class {
          constructor(e, t, n, s, o, a, r, c) {
            (this._lobbyData = !1),
              (this._currentPlayer = e),
              (this._partyCreated = t),
              (this._partyDestroyed = n),
              (this._partyKicked = s),
              (this._partyTimeout = o),
              (this._partyGameStartError = a),
              (this._partyServiceShutdown = r),
              (this._partyServiceUnavailable = c),
              (this._lobbyBinding = (0, i.dataBinding)("/lol-lobby", l)),
              (this._gameflowBinding = (0, i.dataBinding)("/lol-gameflow", l)),
              this._observeLobbies(),
              this._observeEligibilitiesReady(),
              this._observeLobbyNotifications();
          }
          createLobby(e) {
            return this._lobbyBinding.post("v2/lobby", { queueId: e });
          }
          _observeLobbies() {
            this._lobbyBinding.observe("v2/lobby", (e) => {
              i.logger.trace("/v2/lobby returned data", JSON.stringify(e)),
                this._handleLobbyData(e);
            });
          }
          _observeEligibilitiesReady() {
            this._lobbyBinding.observe(
              "v2/eligibility/initial-configuration-complete",
              (e) => {
                this._handleEligibilityReady(e);
              },
            );
          }
          _observeLobbyNotifications() {
            this._lobbyBinding.observe("v2/notifications", (e) => {
              i.logger.trace(
                "/v2/notifications returned data",
                JSON.stringify(e),
              ),
                this._handleLobbyNotification(e);
            });
          }
          _getPlayerStatus() {
            return o.default.getWithTimeout(
              this._gameflowBinding,
              "v1/gameflow-metadata/player-status",
              50,
            );
          }
          lastLobbyQueueId() {
            return this._getPlayerStatus().then((e) => {
              let t = null;
              return (
                e &&
                  e.lastQueuedLobbyStatus &&
                  e.lastQueuedLobbyStatus.queueId &&
                  (t = e.lastQueuedLobbyStatus.queueId),
                t
              );
            });
          }
          _handleLobbyData(e) {
            this._lobbyData
              ? e || this._deletedLobby()
              : e && this._newLobby(e);
          }
          _handleLobbyNotification(e) {
            if (!e || !e.length) return;
            const t = e[e.length - 1];
            let n = !0;
            if (
              ("KICKED" === t.notificationReason
                ? this._partyKicked()
                : "Timeout" === t.notificationReason
                  ? this._partyTimeout()
                  : "GameStartError" === t.notificationReason
                    ? this._partyGameStartError()
                    : "ServiceShutdown" === t.notificationReason
                      ? this._partyServiceShutdown()
                      : "SERVICE_UNAVAILABLE" === t.notificationReason
                        ? this._partyServiceUnavailable()
                        : (n = !1),
              n)
            ) {
              const e = `v2/notifications/${t.notificationId}`;
              this._lobbyBinding.delete(e);
            }
          }
          _deletedLobby() {
            this._partyDestroyed(), (this._lobbyData = !1);
          }
          _newLobby(e) {
            (this._lobbyData = e), this._partyCreated(this._lobbyData);
          }
          _handleEligibilityReady(e) {
            e && s.default.fetchEligibilities();
          }
        };
        t.default = c;
      },
      (e, t, n) => {
        "use strict";
        var i;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.default = void 0);
        var s = (
          (i = n(6)) && i.__esModule ? i : { default: i }
        ).default.create();
        t.default = s;
      },
      (e, t, n) => {
        "use strict";
        var i,
          s = n(1),
          o = (i = n(7)) && i.__esModule ? i : { default: i },
          a = n(9);
        const r = [
            "teammaxsizerestriction",
            "teamsizerestriction",
            "gameversionmismatch",
            "missingtoken",
          ],
          l = ["missingtoken", "playerranksoloonlyrestriction"],
          c = "TeamSkillRestriction",
          m = (0, s.emberDataBinding)({
            Ember: s.Ember,
            websocket: (0, s.getProvider)().getSocket(),
            logPrefix: "service:queue-eligibility",
            basePaths: { lobby: "/lol-lobby" },
            boundProperties: { lobby: { api: "lobby", path: "/v2/lobby" } },
          });
        e.exports = s.Ember.Object.extend(m, {
          queues: o.default,
          eligibilities: null,
          validForSummonerIds: [],
          restrictions: s.Ember.computed.alias("lobby.restrictions"),
          warnings: s.Ember.computed.alias("lobby.warnings"),
          lobbyRestrictionsDoNotExist: s.Ember.computed.equal(
            "restrictions",
            void 0,
          ),
          lobbyRestrictionsExist: s.Ember.computed.not(
            "lobbyRestrictionsDoNotExist",
          ),
          memberSummonerIds: s.Ember.computed.mapBy(
            "lobby.members",
            "summonerId",
          ),
          playerRestrictions: null,
          teamRestrictions: null,
          restrictionsObserver: s.Ember.on(
            "init",
            s.Ember.observer(
              "restrictions.[]",
              "restrictions.@each.restrictionCode",
              "memberSummonerIds",
              function () {
                this.get("memberSummonerIds") &&
                  s.Ember.run.once(this, this._setPlayerAndTeamRestrictions);
              },
            ),
          ),
          hasMinorRestriction: function (e) {
            for (let t = 0; t < e.length; t++) {
              const n = e[t];
              if (
                -1 !== a.TENCENT_MINOR_RESTRICTIONS.indexOf(n.restrictionCode)
              )
                return !0;
            }
            return !1;
          },
          isTeamRestriction: function (e) {
            return -1 !== r.indexOf(e.restrictionCode.toLowerCase());
          },
          isPlayerAndTeamRestriction: function (e) {
            return (
              -1 !== r.indexOf(e.restrictionCode.toLowerCase()) &&
              -1 !== l.indexOf(e.restrictionCode.toLowerCase())
            );
          },
          groupMissingTokenRestrictions: function (e) {
            const t = [],
              n = new Set();
            let i = e;
            if (
              e &&
              ((i = e.slice(0)),
              e.forEach((e) => {
                const i = e.restrictionCode;
                null !== i &&
                  a.MISSING_TOKEN_ERRORS.includes(i) &&
                  (t.push(e.restrictionArgs.errorCode),
                  e.summonerIds &&
                    e.summonerIds.forEach((e) => {
                      n.add(e);
                    }));
              }),
              t.length > 0)
            ) {
              i = i.filter(
                (e) =>
                  !e.restrictionArgs ||
                  !e.restrictionArgs.errorCode ||
                  !a.MISSING_TOKEN_ERRORS.includes(e.restrictionCode),
              );
              const e = s.Ember.Object.create({
                restrictionCode: "MissingToken",
                summonerIds: s.Ember.A(Array.from(n)),
                restrictionArgs: { errorCodes: t.join(", ") },
              });
              i.push(e);
            }
            return i;
          },
          trimRestrictionsUsingGroupRules: function (e) {
            const t =
                e.filter((e) => "TeamDivisionRestriction" === e.restrictionCode)
                  .length > 0,
              n = e.filter((e) => e.restrictionCode === c).length > 0;
            return t && n
              ? e.filter(function (e) {
                  return e.restrictionCode !== c;
                })
              : e;
          },
          applyRestrictionGroupRules: function (e) {
            let t = (e || []).slice(0);
            return (
              (t = this.groupMissingTokenRestrictions(t)),
              (t = this.trimRestrictionsUsingGroupRules(t)),
              t
            );
          },
          _setPlayerAndTeamRestrictions: function () {
            const e = this.applyRestrictionGroupRules(this.get("restrictions")),
              t = [],
              n = [],
              i = (e && e.length) || 0;
            for (let s = 0; s < i; s++) {
              const i = e[s];
              this.isPlayerAndTeamRestriction(i)
                ? (n.push(i), t.push(i))
                : this.isTeamRestriction(i)
                  ? n.push(i)
                  : t.push(i);
            }
            this.set("playerRestrictions", s.Ember.A(t)),
              this.set("teamRestrictions", s.Ember.A(n));
          },
          hasLobbyRestrictions: s.Ember.computed.gt("restrictions.length", 0),
          hasLobbyTeamSizeRestriction: s.Ember.computed(
            "hasLobbyRestrictions",
            "restrictions",
            function () {
              if (this.get("hasLobbyRestrictions")) {
                const e = this.get("restrictions");
                if (e)
                  for (let t = 0, n = e.length; t < n; t++)
                    if (
                      "teammaxsizerestriction" ===
                      e[t].restrictionCode.toLowerCase()
                    )
                      return !0;
              }
              return !1;
            },
          ),
          _shouldUseLobbyForQueue: function (e) {
            return (
              this.get("lobbyRestrictionsExist") &&
              this.get("lobby.gameConfig.queueId") === e
            );
          },
          restrictionsForQueue: function (e) {
            if (this._shouldUseLobbyForQueue(e))
              return this.get("restrictions");
            const t = this.get("eligibilities");
            return t && t[e] ? t[e].restrictions : [];
          },
          getRestrictionForCode: function (e) {
            const t = this.get("eligibilities");
            if (t)
              for (const n in t) {
                const i = t[n].restrictions.find(
                  (t) => t.restrictionCode === e,
                );
                if (i) return i;
              }
            return null;
          },
          isQueueAvailable: function (e) {
            return (
              !!o.default.availableQueueIds &&
              o.default.availableQueueIds.includes(e)
            );
          },
          fetchEligibilities: function () {
            return this.checkEligibility().then(
              (e) => {
                this._processEligibilities(e);
              },
              () => {
                s.logger.error(
                  "FAILED TO FETCH ELIGIBILITIES, PROVIDING BACKFILL",
                ),
                  this._backfillEligibilities();
              },
            );
          },
          _backfillEligibilities: function () {
            const e = this.get("queues.availableQueueIds"),
              t = {};
            if (e && e.length)
              for (let n = 0; n < e.length; n++)
                t[e[n]] = { eligible: !0, restrictions: [] };
            this.set("eligibilities", t);
          },
          _mapEligibilities: function (e) {
            const t = {};
            return e && e.length
              ? (e.forEach((e) => {
                  (e.restrictions = this.groupMissingTokenRestrictions(
                    e.restrictions,
                  )),
                    (t[e.queueId] = e);
                }),
                t)
              : t;
          },
          _processEligibilities: function (e) {
            const t = this._mapEligibilities(e);
            return this.set("eligibilities", t), t;
          },
          checkEligibility: function () {
            return this.get("api.lobby").post("/v2/eligibility/party");
          },
          hasRankedDivisionRestriction: !1,
          checkForRankedDivisionRestriction: function (e) {
            if (
              (this.set("hasRankedDivisionRestriction", !1),
              e.members.length < 2)
            )
              return;
            const t = e.gameConfig.queueId,
              n = o.default.getQueueById(t);
            if (!n || !n.isRanked) return;
            const i = [];
            for (let t = 0; t < e.members.length; t++)
              i.push(e.members[t].summonerId);
            this.checkEligibility().then((e) => {
              if (e && e.length) {
                const t = e[0];
                if (!t.eligible && t.restrictions.length > 0) {
                  "TeamDivisionRestriction" ===
                    t.restrictions[0].restrictionCode &&
                    this.set("hasRankedDivisionRestriction", !0);
                }
              }
            });
          },
          getLocInfoForPlayerRankSoloOnlyRestriction: function (e, t) {
            const n = {
              key: "game_select_queue_restriction_player_playerranksoloonlyrestriction_generic",
              args: {},
            };
            if (
              !e.restrictionArgs ||
              !e.restrictionArgs.maxTierForPremadeSize2 ||
              !e.restrictionArgs.maxDivisionForPremadeSize2
            )
              return n;
            const i = s.LeagueTierNames.getUpOneDivision(
              e.restrictionArgs.maxTierForPremadeSize2,
              e.restrictionArgs.maxDivisionForPremadeSize2,
              t,
            );
            if (i) {
              s.LeagueTierNames.isLowestTierDivision(i.tier, i.division, t)
                ? ((n.key =
                    "game_select_queue_restriction_player_playerranksoloonlyrestriction_tier"),
                  (n.args.minTierForPlayerRankSoloOnlyRestriction =
                    s.LeagueTierNames.getTierName(i.tier)))
                : ((n.key =
                    "game_select_queue_restriction_player_playerranksoloonlyrestriction_tieranddivision"),
                  (n.args.minTierAndDivisionForPlayerRankSoloOnlyRestriction =
                    s.LeagueTierNames.getFullTierDivisionName(
                      i.tier,
                      i.division,
                    )));
            }
            return n;
          },
        });
      },
      (e, t, n) => {
        "use strict";
        var i;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.default = void 0);
        var s = (
          (i = n(8)) && i.__esModule ? i : { default: i }
        ).default.create();
        t.default = s;
      },
      (e, t, n) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.default = void 0);
        var i = n(1),
          s = n(9),
          o = r(n(10)),
          a = r(n(5));
        function r(e) {
          return e && e.__esModule ? e : { default: e };
        }
        const l = (0, i.getProvider)().getSocket(),
          c = (0, i.dataBinding)("/lol-maps", l),
          m = (0, i.dataBinding)("/lol-game-queues", l),
          u = (0, i.dataBinding)("/lol-client-config", l);
        var d = i.Ember.Object.extend({
          init() {
            this._super(...arguments), this._initObservers();
          },
          willDestroy() {
            this._super(...arguments),
              c.unobserve(this),
              m.unobserve(this),
              u.unobserve(this);
          },
          _initObservers() {
            c.observe("/v2/maps", this, (e) => {
              !e ||
                this.isDestroying ||
                this.isDestroyed ||
                this.set("mapsPlatformJson", e);
            }),
              m.observe("/v1/queues", this, (e) => {
                !e ||
                  this.isDestroying ||
                  this.isDestroyed ||
                  this.set("platformJson", e);
              }),
              u.observe(
                "/v3/client-config/lol.client_settings.queues.use_operational_config",
                this,
                (e) => {
                  this.isDestroying ||
                    this.isDestroyed ||
                    this.set("useOperationalConfigs", e);
                },
              ),
              u.observe(
                "/v3/client-config/operational/operational.queues.order",
                this,
                (e) => {
                  !e ||
                    this.isDestroying ||
                    this.isDestroyed ||
                    this.set("orderedQueueIds", this._splitQueues(e));
                },
              );
          },
          platformConfigSingleton: o.default,
          eligibilitiesSingleton: a.default,
          platformEnabledQueues: i.Ember.computed.alias(
            "platformConfigSingleton.enabledGameQueues",
          ),
          gameSelectEligibilityHash: i.Ember.computed.alias(
            "eligibilitiesSingleton.gameSelectEligibilityHash",
          ),
          tutorialFlowEnabled: i.Ember.computed.alias(
            "platformConfigSingleton.tutorialFlowEnabled",
          ),
          disabledRgmButtonEnabled: i.Ember.computed.alias(
            "platformConfigSingleton.disabledRgmButtonEnabled",
          ),
          platformJson: {},
          defaultMapsInfo: {},
          allMapsInfo: [],
          queuesById: {},
          queuesByCategory: {},
          useOperationalConfigs: null,
          availableQueues: {},
          availableQueueIds: i.Ember.A(),
          orderedQueueIds: i.Ember.A(),
          mapsPlatformJson: i.Ember.computed({
            set: function (e, t) {
              if (!t || !t.reduce) return;
              this.set("allMapsInfo", t);
              const n = t.reduce(
                (e, t) => (t.isDefault && (e[t.id] = t), e),
                {},
              );
              this.set("defaultMapsInfo", n);
            },
          }),
          queuesChangedObserver: i.Ember.observer(
            "allMapsInfo",
            "platformJson",
            "platformEnabledQueues",
            "useOperationalConfigs",
            "disabledRgmButtonEnabled",
            "gameSelectEligibilityHash",
            function () {
              const e = {},
                t = {},
                n = {},
                o = [],
                a = this.get("platformEnabledQueues"),
                r = this.get("useOperationalConfigs"),
                l = this.get("platformJson");
              if (!l || !l.length) return;
              let c = !1;
              if (
                (l.forEach((i) => {
                  const l = i.id,
                    { category: m } = i,
                    { mapId: u } = i,
                    { gameMode: d } = i,
                    { assetMutator: p } = i,
                    { isVisible: h } = i,
                    g = this.getGameType(u, d);
                  (t[m] = t[m] ? t[m] : {}),
                    t[m][g] ||
                      (t[m][g] = {
                        mapId: u,
                        gameMode: d,
                        assetMutator: p,
                        queues: [],
                      }),
                    t[m][g].queues.push(l);
                  const b = r ? h : -1 !== a.indexOf(l),
                    f = i.queueAvailability === s.QUEUE_AVAILABILITY.enabled;
                  if (b && f) {
                    const e = this.getMapModeInfo(u, d);
                    !c && e && e.isRGM && (c = !0),
                      (n[m] = n[m] ? n[m] : {}),
                      n[m][g] ||
                        (n[m][g] = {
                          mapId: u,
                          gameMode: d,
                          assetMutator: p,
                          queues: [],
                        }),
                      n[m][g].queues.push(l),
                      o.push(l);
                  }
                  (i.available = f), (e[l] = i);
                }),
                this.get("disabledRgmButtonEnabled") &&
                  !c &&
                  n[s.CATEGORY_NAMES.PVP])
              ) {
                const e = this.getGameType(
                  s.DISABLED_RGM_GAME_TYPE.mapId,
                  s.DISABLED_RGM_GAME_TYPE.gameMode,
                );
                n[s.CATEGORY_NAMES.PVP][e] = s.DISABLED_RGM_GAME_TYPE;
              }
              this.set("queuesById", e),
                this.set("queuesByCategory", t),
                this.set("availableQueues", n),
                this.set("availableQueueIds", i.Ember.A(o));
            },
          ),
          getPickTypeForQueue: function (e) {
            const t = this.get("queuesById");
            if (!t || !t[e]) return "";
            const n = t[e].gameTypeConfig.pickMode;
            return s.PICK_TYPES[n] ? s.PICK_TYPES[n] : "";
          },
          getQueueTypeForQueue: function (e) {
            const t = this.get("queuesById");
            return t && t[e] ? t[e].type : "";
          },
          getMapInfoById: function (e) {
            return this.defaultMapsInfo[e];
          },
          getMapModeInfo: function (e, t, n) {
            const i = this.get("allMapsInfo").find(
              (n) => n.id === e && n.gameMode === t,
            );
            if (n && i && i.isRGM) {
              const e = this.get("queuesById");
              e[n] && (i.gameModeShortName = e[n].shortName);
            }
            return i;
          },
          getQueueById: function (e) {
            return this.queuesById[e];
          },
          getQueuesByCategory: function (e) {
            const t = this.get("queuesByCategory");
            return t[e] ? t[e] : null;
          },
          getTutorialQueues: function () {
            return s.TUTORIAL_GAME_TYPES;
          },
          getAllAvailableGameTypesForCategory: function (e) {
            if ("Training" === e) return this.getTutorialQueues();
            const t = this.get("availableQueues"),
              n = [];
            let i = {};
            t[e] && (i = t[e]);
            for (const e in i) n.push(i[e]);
            return this._sortGameTypes(n), n;
          },
          _sortGameTypes: function (e) {
            e.sort((e, t) => {
              let n = this._compareGameMode(e, t, "CLASSIC");
              return (
                0 === n && (n = this._compareGameMode(e, t, "ARAM")),
                0 === n && (n = this._compareGameMode(e, t, "TFT")),
                n
              );
            });
          },
          _compareGameMode: function (e, t, n) {
            if (e.gameMode === n) {
              if (t.gameMode !== n) return -1;
            } else if (t.gameMode === n) return 1;
            return 0;
          },
          getFlatQueuesByCategory: function (e) {
            const t = this.getQueuesByCategory(e) || [],
              n = Object.keys(t).map((e) => t[e].queues);
            return [].concat(...n);
          },
          getAllQueuesForCategoryAndGameType: function (e, t, n) {
            let i = [];
            const s = this.get("queuesByCategory"),
              o = this.getGameType(t, n);
            return (
              s[e] && s[e][o] && (i = s[e][o].queues),
              this._sortQueuesPlaceDefaultsFirst(i),
              i
            );
          },
          getAvailableQueuesForCategoryAndGameType: function (e, t, n) {
            let i = [];
            if ("Training" === e && this.get("tutorialFlowEnabled"))
              return s.TUTORIAL_QUEUE_IDS;
            const o = this.get("availableQueues"),
              a = this.getGameType(t, n);
            return (
              o[e] && o[e][a] && o[e][a].queues && (i = o[e][a].queues),
              this._sortQueuesPlaceDefaultsFirst(i),
              i
            );
          },
          _sortQueuesPlaceDefaultsFirst: function (e) {
            const t = this.get("useOperationalConfigs")
              ? this.get("orderedQueueIds")
              : this.platformConfigSingleton.get("defaultGameQueues");
            if (t)
              return e.sort(function (e, n) {
                const i = t.indexOf(e),
                  s = t.indexOf(n);
                return i > -1 ? (s > -1 ? i - s : -1) : s > -1 ? 1 : 0;
              });
          },
          _splitQueues: function (e) {
            const t = e ? `${e}`.split(",") : [],
              n = [];
            return (
              t.forEach((e) => {
                n.push(parseInt(e, 10));
              }),
              i.Ember.A(n)
            );
          },
          getDefaultQueueForCategory: function (e) {
            const t = this.get("availableQueues");
            if (t[e]) {
              const n = i.lodash.keys(t[e])[0];
              return t[e][n].queues[0];
            }
            return null;
          },
          categoryHasQueues: function (e) {
            return !!this.get("availableQueues")[e];
          },
          getGameType: function (e, t) {
            return e + "-" + t;
          },
        });
        t.default = d;
      },
      (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.TUTORIAL_TYPE_MAPS =
            t.TUTORIAL_QUEUE_IDS =
            t.TUTORIAL_GAME_TYPES =
            t.TRAINING_TYPES =
            t.TFT_TUTORIAL_QUEUE_ID =
            t.TFT_RANKED_QUEUE_ID =
            t.TFT_NPE_QUEUE_ID =
            t.TFT_NORMAL_QUEUE_ID =
            t.TFT_NEW_PLAYER_RESTRICTION =
            t.TFT_HYPER_ROLL_QUEUE_IDS =
            t.TFT_DOUBLE_UP_QUEUE_ID =
            t.TFT_CUSTOM_QUEUE_IDS =
            t.TFT_AVAILABLE_NPE_QUEUE_IDS =
            t.TENCENT_MINOR_RESTRICTIONS =
            t.QUEUE_TYPE =
            t.QUEUE_AVAILABILITY =
            t.PICK_TYPES =
            t.PAIRS_QUEUE_IDS =
            t.ONE_PAGE_TUTORIAL_LONG_CARD_LAYOUT_GAME_MODES =
            t.ONE_PAGE_TUTORIAL_GAME_MODES =
            t.NPE_FIRST_TOUCH_QUEUE_SELECT_ID =
            t.MULTI_TEAM_GAME_MODES =
            t.MISSING_TOKEN_ERRORS =
            t.LOL_NEW_PLAYER_RESTRICTION =
            t.INVALID_QUEUE_ID =
            t.GAME_MODES =
            t.DISABLED_RGM_GAME_TYPE =
            t.DEFAULT_TFT_QUEUE_ID =
            t.DEFAULT_QUEUE_ID =
            t.CATEGORY_NAMES =
            t.CATEGORIES_DISPLAY_ORDER =
              void 0);
        t.PICK_TYPES = {
          SimulPickStrategy: "blind",
          DraftModeSinglePickStrategy: "draft",
          TeamBuilderDraftPickStrategy: "draft",
          AllRandomPickStrategy: "random",
          TournamentPickStrategy: "tournament",
          OneTeamVotePickStrategy: "vote",
          QuickplayPickStrategy: "blind",
        };
        t.QUEUE_AVAILABILITY = {
          enabled: "Available",
          disabled: "PlatformDisabled",
        };
        t.QUEUE_TYPE = {
          RANKED_FLEX_SR: "RANKED_FLEX_SR",
          RANKED_SOLO_5x5: "RANKED_SOLO_5x5",
        };
        const n = { PVP: "PvP", VERSUSAI: "VersusAi", TRAINING: "Training" };
        t.CATEGORY_NAMES = n;
        const i = {
          primary: [n.PVP, n.VERSUSAI, n.TRAINING],
          secondary: ["CreateCustom", "JoinCustom"],
        };
        t.CATEGORIES_DISPLAY_ORDER = i;
        t.TUTORIAL_GAME_TYPES = [
          {
            mapId: 11,
            gameMode: "TUTORIAL_FLOW",
            requiresCustomGameSubCategory: !1,
            queues: [],
          },
          {
            mapId: 11,
            gameMode: "PRACTICETOOL",
            requiresCustomGameSubCategory: !0,
            queues: [],
          },
        ];
        t.TUTORIAL_TYPE_MAPS = {
          BASIC_TUTORIAL: 12,
          BATTLE_TRAINING: 11,
          TUTORIAL_FLOW: 11,
          PRACTICETOOL: 11,
          CLASSIC: 11,
        };
        t.DISABLED_RGM_GAME_TYPE = {
          mapId: 11,
          gameMode: "LCURGMDISABLED",
          requiresCustomGameSubCategory: !1,
          queues: [],
        };
        t.DEFAULT_QUEUE_ID = 31;
        t.DEFAULT_TFT_QUEUE_ID = 1090;
        t.INVALID_QUEUE_ID = -1;
        t.GAME_MODES = { TFT: "TFT", CLASSIC: "CLASSIC" };
        t.TFT_CUSTOM_QUEUE_IDS = { 100: 3e3, 101: 3010 };
        t.ONE_PAGE_TUTORIAL_GAME_MODES = ["TFT", "CHERRY"];
        t.ONE_PAGE_TUTORIAL_LONG_CARD_LAYOUT_GAME_MODES = ["CHERRY"];
        t.MULTI_TEAM_GAME_MODES = ["CHERRY"];
        t.NPE_FIRST_TOUCH_QUEUE_SELECT_ID = {
          TFT: "teamfight",
          SR: "summonersrift",
        };
        t.TRAINING_TYPES = {
          PRACTICE_TOOL: "PRACTICETOOL",
          TUTORIAL: "TUTORIAL_FLOW",
        };
        t.MISSING_TOKEN_ERRORS = [
          "BanInfoNotAvailable",
          "MinorInfoNotAvailable",
          "LeaguesInfoNotAvailable",
          "SummonerInfoNotAvailable",
          "InventoryChampsInfoNotAvailable",
          "InventoryQueuesInfoNotAvailable",
        ];
        t.TENCENT_MINOR_RESTRICTIONS = [
          "PlayerMinorRestriction",
          "PlayerTimePlayedRestriction",
        ];
        t.TFT_NEW_PLAYER_RESTRICTION = "TFTNewPlayerRestriction";
        t.LOL_NEW_PLAYER_RESTRICTION = "LOLNewPlayerRestriction";
        t.TUTORIAL_QUEUE_IDS = [2e3, 2010, 2020];
        t.PAIRS_QUEUE_IDS = [
          1140, 1141, 1142, 1143, 1150, 1151, 1152, 1160, 1161, 1162,
        ];
        t.TFT_HYPER_ROLL_QUEUE_IDS = [1120, 1121, 1122, 1130, 1131, 1132];
        t.TFT_RANKED_QUEUE_ID = 1100;
        t.TFT_NORMAL_QUEUE_ID = 1090;
        t.TFT_NPE_QUEUE_ID = 2200;
        t.TFT_TUTORIAL_QUEUE_ID = 1110;
        t.TFT_DOUBLE_UP_QUEUE_ID = 1160;
        const s = [1090, 2200, 1110];
        t.TFT_AVAILABLE_NPE_QUEUE_IDS = s;
      },
      (e, t, n) => {
        "use strict";
        var i;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.default = void 0);
        var s = (
          (i = n(11)) && i.__esModule ? i : { default: i }
        ).default.create();
        t.default = s;
      },
      (e, t, n) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.default = void 0);
        var i = n(1),
          s = n(12);
        const o = Object.freeze({
            LcuLobbyPotatoModeForced: !1,
            LcuSocialDefaultGameQueues: "2,33,32,31",
            LcuSocialEnabledGameQueues:
              "2,400,420,440,8,9,65,33,32,31,800,810,820",
            LcuSocialAggressiveScanning: !1,
            LcuTutorialEnabled: !0,
            LcuTutorialNewEnabled: !1,
            QueueRestrictionAllowablePremadeSizesForQueueId440: "1,2,3,4,5",
            QueueRewardsSoloAutoFillProtectionForQueueId440: !1,
            QueueRewardsSoloIpRewardsForQueueId440: !1,
            FeaturedModesDisabledRgmButtonEnabled: !0,
            FeaturedModesGoldenSpatulaClubDisabled: !1,
            MutatorsEnabledModes: [],
            EosTextEnabled: !1,
            EternalsEnabled: !1,
            ChallengesClientState: s.CHALLENGES_CLIENT_STATES.HIDDEN,
          }),
          a = (0, i.emberDataBinding)({
            Ember: i.Ember,
            websocket: (0, i.getProvider)().getSocket(),
            logPrefix: "plugin:parties:platform-config-singleton",
            basePaths: { platformConfig: "/lol-platform-config" },
            boundProperties: {
              LcuLobbyPotatoModeForced: {
                api: "platformConfig",
                path: "/v1/namespaces/LcuLobby/PotatoModeForced",
              },
              LcuSocialDefaultGameQueues: {
                api: "platformConfig",
                path: "/v1/namespaces/LcuSocial/DefaultGameQueues",
              },
              LcuSocialEnabledGameQueues: {
                api: "platformConfig",
                path: "/v1/namespaces/LcuSocial/EnabledGameQueues",
              },
              LcuSocialAggressiveScanning: {
                api: "platformConfig",
                path: "/v1/namespaces/LcuSocial/AggressiveScanning",
              },
              LcuTutorialEnabled: {
                api: "platformConfig",
                path: "/v1/namespaces/LcuTutorial/Enabled",
              },
              LcuTutorialNewEnabled: {
                api: "platformConfig",
                path: "/v1/namespaces/LcuTutorial/NewPlayerExperienceEnabled",
              },
              QueueRestrictionAllowablePremadeSizesForQueueId440: {
                api: "platformConfig",
                path: "/v1/namespaces/QueueRestriction/AllowablePremadeSizesForQueueId440",
              },
              QueueRewardsSoloAutoFillProtectionForQueueId440: {
                api: "platformConfig",
                path: "/v1/namespaces/QueueRewards/SoloAutoFillProtectionForQueueId440",
              },
              QueueRewardsSoloIpRewardsForQueueId440: {
                api: "platformConfig",
                path: "/v1/namespaces/QueueRewards/SoloIpRewardsForQueueId440",
              },
              FeaturedModesDisabledRgmButtonEnabled: {
                api: "platformConfig",
                path: "/v1/namespaces/FeaturedModes/DisabledRgmButtonEnabled",
              },
              FeaturedModesGoldenSpatulaClubDisabled: {
                api: "platformConfig",
                path: "/v1/namespaces/FeaturedModes/GoldenSpatulaClubDisabled",
              },
              MutatorsEnabledModes: {
                api: "platformConfig",
                path: "v1/namespaces/Mutators/EnabledModes",
              },
              TftPatchNotesUrl: {
                api: "platformConfig",
                path: "/v1/namespaces/LcuTft/PatchNotesUrl",
              },
              initialConfigurationComplete: {
                api: "platformConfig",
                path: "/v1/initial-configuration-complete",
              },
              EternalsEnabled: {
                api: "platformConfig",
                path: "/v1/namespaces/Eternals/Enabled",
              },
              ChallengesClientState: {
                api: "platformConfig",
                path: "v1/namespaces/Challenges/ClientState",
              },
            },
          });
        var r = i.Ember.Object.extend(a, {
          potatoModeForced: i.Ember.computed(
            "initialConfigurationComplete",
            "LcuLobbyPotatoModeForced",
            function () {
              return this._getValueOrDefault("LcuLobbyPotatoModeForced");
            },
          ),
          defaultGameQueues: i.Ember.computed(
            "initialConfigurationComplete",
            "LcuSocialDefaultGameQueues",
            function () {
              const e = this._getValueOrDefault("LcuSocialDefaultGameQueues");
              return this._splitQueues(e);
            },
          ),
          enabledGameQueues: i.Ember.computed(
            "initialConfigurationComplete",
            "LcuSocialEnabledGameQueues",
            function () {
              const e = this._getValueOrDefault("LcuSocialEnabledGameQueues");
              return this._splitQueues(e);
            },
          ),
          aggressiveScanning: i.Ember.computed(
            "initialConfigurationComplete",
            "LcuSocialAggressiveScanning",
            function () {
              return this._getValueOrDefault("LcuSocialAggressiveScanning");
            },
          ),
          tutorialEnabled: i.Ember.computed(
            "initialConfigurationComplete",
            "LcuTutorialEnabled",
            function () {
              return this._getValueOrDefault("LcuTutorialEnabled");
            },
          ),
          tutorialFlowEnabled: i.Ember.computed(
            "initialConfigurationComplete",
            "LcuTutorialNewEnabled",
            function () {
              return this._getValueOrDefault("LcuTutorialNewEnabled");
            },
          ),
          allowablePremadeSizesForQueue440: i.Ember.computed(
            "initialConfigurationComplete",
            "QueueRestrictionAllowablePremadeSizesForQueueId440",
            function () {
              return this._getValueOrDefault(
                "QueueRestrictionAllowablePremadeSizesForQueueId440",
              );
            },
          ),
          soloAutoFillProtectionForQueueId440: i.Ember.computed(
            "initialConfigurationComplete",
            "QueueRewardsSoloAutoFillProtectionForQueueId440",
            function () {
              return this._getValueOrDefault(
                "QueueRewardsSoloAutoFillProtectionForQueueId440",
              );
            },
          ),
          soloIpRewardsForQueueId440: i.Ember.computed(
            "initialConfigurationComplete",
            "QueueRewardsSoloIpRewardsForQueueId440",
            function () {
              return this._getValueOrDefault(
                "QueueRewardsSoloIpRewardsForQueueId440",
              );
            },
          ),
          disabledRgmButtonEnabled: i.Ember.computed(
            "initialConfigurationComplete",
            "FeaturedModesDisabledRgmButtonEnabled",
            function () {
              return this._getValueOrDefault(
                "FeaturedModesDisabledRgmButtonEnabled",
              );
            },
          ),
          goldenSpatulaClubDisabled: i.Ember.computed(
            "initialConfigurationComplete",
            "FeaturedModesGoldenSpatulaClubDisabled",
            function () {
              return this._getValueOrDefault(
                "FeaturedModesGoldenSpatulaClubDisabled",
              );
            },
          ),
          enabledCustomGameModes: i.Ember.computed(
            "initialConfigurationComplete",
            "MutatorsEnabledModes",
            function () {
              return this._getValueOrDefault("MutatorsEnabledModes");
            },
          ),
          eternalsEnabled: i.Ember.computed(
            "initialConfigurationComplete",
            "EternalsEnabled",
            function () {
              return this._getValueOrDefault("EternalsEnabled");
            },
          ),
          lobbyChallengesEnabled: i.Ember.computed(
            "initialConfigurationComplete",
            "ChallengesClientState",
            function () {
              return (
                this._getValueOrDefault("ChallengesClientState") ===
                s.CHALLENGES_CLIENT_STATES.ENABLED
              );
            },
          ),
          _getValueOrDefault: function (e) {
            const t = this.get("initialConfigurationComplete"),
              n = this.get(e);
            if (!this._isNill(n) || t) return this._isNill(n) ? o[e] : n;
          },
          _splitQueues: function (e) {
            const t = e ? `${e}`.split(",") : [],
              n = [];
            return (
              t.forEach((e) => {
                n.push(parseInt(e, 10));
              }),
              i.Ember.A(n)
            );
          },
          _isNill: function (e) {
            return null == e || "" === e;
          },
        });
        t.default = r;
      },
      (e) => {
        "use strict";
        e.exports = {
          INVITED_ROLES: {
            PENDING: "Pending",
            ACCEPTED: "Accepted",
            JOINED: "Joined",
            DECLINED: "Declined",
            KICKED: "Kicked",
            ERROR: "Error",
          },
          SUGGESTED_TYPES: {
            FRIEND: "OnlineFriend",
            PREMADE: "PreviousPremade",
            FRIEND_OF_FRIEND: "FriendOfFriend",
            HONORED: "HonorInteractions",
            VICTORIOUS: "VictoriousComrade",
            LEGACY: "LegacyPlayAgain",
          },
          PARTY_TYPES: { OPEN: "open", CLOSED: "closed" },
          TFT_MAX_PARTY_SIZE: 8,
          NORMAL_MAX_PARTY_SIZE: 5,
          CHERRY_GAME_MODE: "CHERRY",
          STRAWBERRY_GAME_MODE: "STRAWBERRY",
          TFT_GAME_MODE: "TFT",
          QUEUE_ID_TO_MULTITEAM_LOBBY_CONFIG: {
            1700: { subteamCount: 8, playerSlotCount: 2 },
            1701: { subteamCount: 1, playerSlotCount: 1 },
            1704: { subteamCount: 2, playerSlotCount: 2 },
            1710: { subteamCount: 8, playerSlotCount: 2 },
            1720: { subteamCount: 8, playerSlotCount: 2 },
            1731: { subteamCount: 1, playerSlotCount: 1 },
            1732: { subteamCount: 1, playerSlotCount: 2 },
            1734: { subteamCount: 2, playerSlotCount: 2 },
            1736: { subteamCount: 3, playerSlotCount: 2 },
            1738: { subteamCount: 4, playerSlotCount: 2 },
            1741: { subteamCount: 5, playerSlotCount: 2 },
            1742: { subteamCount: 6, playerSlotCount: 2 },
            1744: { subteamCount: 7, playerSlotCount: 2 },
          },
          CHALLENGES_CLIENT_STATES: {
            HIDDEN: "Hidden",
            DISABLED: "Disabled",
            ENABLED: "Enabled",
          },
        };
      },
      (e) => {
        "use strict";
        e.exports = {
          getWithTimeout: function (e, t, n) {
            return new Promise((i) => {
              let s, o;
              e.get(t).then((e) => {
                clearTimeout(s), o || i(e);
              }),
                (s = setTimeout(() => {
                  (o = !0), i(null);
                }, n));
            });
          },
        };
      },
      (e, t, n) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.default = void 0);
        var i = (function (e, t) {
          if (!t && e && e.__esModule) return e;
          if (null === e || ("object" != typeof e && "function" != typeof e))
            return { default: e };
          var n = s(t);
          if (n && n.has(e)) return n.get(e);
          var i = {},
            o = Object.defineProperty && Object.getOwnPropertyDescriptor;
          for (var a in e)
            if ("default" !== a && Object.prototype.hasOwnProperty.call(e, a)) {
              var r = o ? Object.getOwnPropertyDescriptor(e, a) : null;
              r && (r.get || r.set)
                ? Object.defineProperty(i, a, r)
                : (i[a] = e[a]);
            }
          (i.default = e), n && n.set(e, i);
          return i;
        })(n(1));
        function s(e) {
          if ("function" != typeof WeakMap) return null;
          var t = new WeakMap(),
            n = new WeakMap();
          return (s = function (e) {
            return e ? n : t;
          })(e);
        }
        const o = i.default.getProvider().getSocket();
        var a = class {
          constructor(e) {
            (this._lastPhase = null),
              (this._gameflowBinding = (0, i.dataBinding)("/lol-gameflow", o)),
              (this._gameflowPhaseChangeCallback = e),
              this._observeSession();
          }
          _observeSession() {
            this._gameflowBinding.observe("v1/session", (e) => {
              this._handleGameflowData(e);
            });
          }
          _handleGameflowData(e) {
            if (!e || !e.phase) return;
            const t = e.phase;
            t !== this._lastPhase &&
              (this._gameflowPhaseChangeCallback &&
                this._gameflowPhaseChangeCallback(t, this._lastPhase),
              (this._lastPhase = t));
          }
        };
        t.default = a;
      },
      (e, t, n) => {
        "use strict";
        var i = n(1),
          s = n(9);
        const { RunMixin: o } = i.EmberAddons.EmberLifeline;
        e.exports = i.Ember.Object.extend(o, {
          queues: null,
          animationLock: !1,
          isCreatingCustomGame: !1,
          needsAdditionalGameConfig: !1,
          isJoiningCustomGame: !1,
          isTrainingGame: !1,
          _trainingGameMode: null,
          trainingGameMode: i.Ember.computed({
            get: function () {
              return this.get("_trainingGameMode");
            },
            set: function (e, t) {
              return (
                this.set("_trainingGameMode", t),
                s.TUTORIAL_TYPE_MAPS[t] &&
                  (this.set("mapId", s.TUTORIAL_TYPE_MAPS[t]),
                  this.set("gameMode", t),
                  this.set("assetMutator", null)),
                t
              );
            },
          }),
          _queueId: null,
          queueId: i.Ember.computed({
            get: function () {
              return this.get("_queueId");
            },
            set: function (e, t) {
              this.set("_queueId", t);
              const n = this.get("queues");
              if (n) {
                const e = n.getQueueById(t);
                e && e.category && this.set("category", e.category),
                  e &&
                    e.mapId &&
                    (this.set("mapId", e.mapId),
                    this.set("gameMode", e.gameMode),
                    this.set("assetMutator", e.assetMutator));
              }
              return t;
            },
          }),
          queue: i.Ember.computed("queues.queuesById", "queueId", function () {
            const e = this.get("queueId"),
              t = this.get("queues");
            return null !== e && t ? t.getQueueById(e) : null;
          }),
          category: "",
          mapId: 11,
          map: i.Ember.computed("mapId", "queues.mapsInfo", function () {
            const e = this.get("queue.mapId"),
              t = this.get("queues");
            return e && t ? t.getMapInfoById(e) : null;
          }),
          gameMode: !1,
          assetMutator: !1,
          pickType: i.Ember.computed(
            "queues.queuesById",
            "queueId",
            function () {
              return this.get("queues").getPickTypeForQueue(
                this.get("queueId"),
              );
            },
          ),
          botDifficulty: i.Ember.computed(
            "queues.queuesById",
            "queueId",
            function () {
              return "";
            },
          ),
          isUpdatingSelection: !1,
          maxPlaying: i.Ember.computed("queue.numPlayersPerTeam", function () {
            return parseInt(this.get("queue.numPlayersPerTeam"), 10);
          }),
          gameConfig: i.Ember.computed(
            "queueId",
            "queue.category",
            "botDifficulty",
            "maxPlaying",
            function () {
              return {
                gameCategory: this.get("queue.category"),
                botDifficulty: this.get("botDifficulty"),
                queueId: this.get("queueId"),
                maxPlaying: this.get("maxPlaying"),
              };
            },
          ),
          isEqual(e) {
            return (
              !!(e instanceof i.Ember.Object && e.get) &&
              this.get("queueId") === e.get("queueId")
            );
          },
          animationLockTimeout: 1200,
          animationLockObserver: i.Ember.on(
            "init",
            i.Ember.observer("animationLock", function () {
              this.get("animationLock") &&
                this.runTask(function () {
                  this.set("animationLock", !1);
                }, this.get("animationLockTimeout"));
            }),
          ),
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        const s = "party",
          o = "gameselect";
        e.exports = i.Ember.Object.extend({
          showVerticalAnimation: !1,
          showing: null,
          isShowingLeagueBanner: !1,
          isShowingParty: i.Ember.computed.equal("showing", s),
          isShowingGameSelect: i.Ember.computed.equal("showing", o),
          isInViewport: !1,
          showParty: function () {
            this.set("showing", s);
          },
          showGameSelect: function () {
            this.set("showing", o);
          },
        });
      },
      (e, t, n) => {
        "use strict";
        var i;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.default = void 0);
        var s = (
          (i = n(18)) && i.__esModule ? i : { default: i }
        ).default.create();
        t.default = s;
      },
      (e, t, n) => {
        "use strict";
        var i,
          s = n(1),
          o = (i = n(19)) && i.__esModule ? i : { default: i };
        const a = (0, s.emberDataBinding)({
          Ember: s.Ember,
          websocket: (0, s.getProvider)().getSocket(),
          logPrefix: "service:game-select",
          basePaths: {
            gameflow: "/lol-gameflow",
            summoner: "/lol-summoner",
            lobby: "/lol-lobby",
          },
          boundProperties: {
            gameflowSession: { api: "gameflow", path: "/v1/session" },
            lobby: { api: "lobby", path: "/v2/lobby" },
            currentSummoner: { api: "summoner", path: "/v1/current-summoner" },
          },
        });
        e.exports = s.Ember.Object.extend(a, o.default, {
          gameflowPhase: s.Ember.computed.alias("gameflowSession.phase"),
          currentSummonerId: s.Ember.computed.alias(
            "currentSummoner.summonerId",
          ),
          _inLobby: !1,
          _multiUserChatId: null,
          _lobbyMembers: s.Ember.A(),
          _playedInviteSound: s.Ember.A(),
          _shouldPlay: s.Ember.A(),
          _didPlay: s.Ember.A(),
          shouldPlay: function (e) {
            if (((e = this._castId(e)), this._checkIfDidPlayForMember(e)))
              return !1;
            return this._shouldPlayIndexOf(e) > -1;
          },
          didPlay: function (e) {
            e = this._castId(e);
            const t = this._shouldPlayIndexOf(e);
            -1 !== t &&
              (this.get("_shouldPlay").splice(t, 1),
              this.get("_didPlay").push(e));
          },
          handlePartyDodge: function () {
            const e = this.get("_lobbyMembers");
            for (let t = 0; t < e.length; t++)
              this.get("_shouldPlay").push(e[t]);
          },
          pendingInvites: s.Ember.computed.filterBy(
            "lobby.invitations",
            "state",
            "Pending",
          ),
          pendingInvitesObserver: s.Ember.on(
            "init",
            s.Ember.observer("pendingInvites.[]", function () {
              s.Ember.run.once(this, function () {
                const e = this.get("pendingInvites");
                this.pendingInvitesChanged(e);
              });
            }),
          ),
          pendingInvitesChanged: function (e) {
            const t = this.get("_playedInviteSound"),
              n = s.Ember.A();
            let i = !1;
            e.forEach((e) => {
              let s = e.get("toSummonerId");
              (s = this._castId(s)), -1 === t.indexOf(s) && (i = !0), n.push(s);
            }),
              this.set("_playedInviteSound", n),
              i &&
                this.playSound(
                  "/fe/lol-static-assets/sounds/sfx-parties-member-banner-invited.ogg",
                );
          },
          _lobbyMembersChangedObserver: s.Ember.on(
            "init",
            s.Ember.observer(
              "lobby",
              "lobby.members.[]",
              "lobby.members.@each.summonerId",
              "lobby.members.@each.ready",
              function () {
                s.Ember.run.once(this, function () {
                  const e = this.get("lobby");
                  this._lobbyChanged(e);
                });
              },
            ),
          ),
          _lobbyChanged: function (e) {
            const t = this.get("_inLobby");
            return t && !e
              ? this._handleLobbyDeleted()
              : !t && e
                ? this._handleNewLobby(e)
                : t && e
                  ? this._handleLobbyUpdated(e)
                  : void 0;
          },
          _handleLobbyDeleted: function () {
            this.set("_inLobby", !1),
              this.set("_shouldPlay", s.Ember.A()),
              this.set("_didPlay", s.Ember.A()),
              this.set("_lobbyMembers", s.Ember.A()),
              this.set("_multiUserChatId", null),
              this.set("_playedInviteSound", s.Ember.A());
          },
          _handleNewLobby: function (e) {
            const t = this._castId(this.get("currentSummonerId"));
            this.get("_shouldPlay").push(t),
              this._updateMemberCache(e),
              this.set("_inLobby", !0),
              this.set("_multiUserChatId", e.get("multiUserChatId"));
            const n = s.Ember.A();
            for (let i = 0; i < e.members.length; i++) {
              const s = e.members[i];
              s.get("summonerId") !== t &&
                s.get("ready") &&
                n.push(s.get("summonerId"));
            }
            this.set("_didPlay", n);
            const i = e.get("invitations");
            if (i && i.length) {
              const e = s.Ember.A(),
                t = i.filterBy("state", "Pending");
              for (let n = 0; n < t.length; n++)
                e.push(this._castId(t[n].get("toSummonerId")));
              this.set("_playedInviteSound", e);
            }
          },
          _handleLobbyUpdated: function (e) {
            if ("Matchmaking" === this.get("gameflowPhase")) return;
            if (this._isNewLobby(e)) return void this._handleNewLobby(e);
            const t = e.get("members");
            if (t && t.length)
              for (let e = 0; e < t.length; e++)
                this._checkIfShouldPlayForMember(t[e]);
            this._updateMemberCache(e),
              this.set("_multiUserChatId", e.get("multiUserChatId"));
          },
          _checkIfShouldPlayForMember(e) {
            const t = this._castId(e.get("summonerId"));
            if (this._checkIfDidPlayForMember(t)) return;
            const n = e.get("ready"),
              i = this._lookupInMemberCache(t),
              s = !i && n,
              o = i && !i.ready && n;
            (s || o) && this.get("_shouldPlay").push(t);
          },
          _checkIfDidPlayForMember(e) {
            return this.get("_didPlay").indexOf(e) > -1;
          },
          _isNewLobby(e) {
            const t = e.get("multiUserChatId");
            return (
              !(!t || t === this._multiUserChatId) &&
              e.get("members.length") > 1
            );
          },
          _updateMemberCache: function (e) {
            if (!e) return;
            const t = e.get("members");
            if (!t || !t.length) return;
            const n = this.get("_didPlay"),
              i = s.Ember.A(),
              o = {};
            for (let e = 0; e < t.length; e++) {
              const s = this._castId(t[e].get("summonerId")),
                a = t[e].get("ready");
              (o[s] = { ready: a }), n.indexOf(s) > -1 && i.push(s);
            }
            this.set("_lobbyMembers", o), this.set("_didPlay", i);
          },
          _lookupInMemberCache: function (e) {
            const t = this.get("_lobbyMembers");
            return t && t[(e = this._castId(e))] ? t[e] : null;
          },
          _shouldPlayIndexOf: function (e) {
            return (e = this._castId(e)), this.get("_shouldPlay").indexOf(e);
          },
          _castId: function (e) {
            return parseInt(e, 10);
          },
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        const s = "sfx-ui";
        e.exports = i.Ember.Mixin.create({
          getMapSoundUrl: function (e) {
            const t = this.get("assets").getMap(
              this.get("mapId"),
              this.get("gameMode"),
              this.get("assetMutator"),
            );
            if (!t || !t.assets || !t.assets[e]) return !1;
            return `/${t.assets[e]}`;
          },
          playSound: function (e) {
            if (!1 === e) return;
            i.Audio.getChannel(s).createSound(e).play();
          },
          hoverSoundLocked: !1,
          attachHoverSoundWithDisabledCheck: function (e, t) {
            e.addEventListener("mouseenter", () => {
              this.get("hoverSoundDisabled") ||
                this.get("hoverSoundLocked") ||
                (this.playSound(t), this.set("hoverSoundLocked", !0));
            }),
              e.addEventListener("mouseleave", () => {
                this.set("hoverSoundLocked", !1);
              });
          },
          addHoverClickSound: function (e, t, n) {
            this.$(e)
              .on("mouseover", () => {
                this.playSound(t);
              })
              .on("click", () => {
                this.playSound(n);
              });
          },
        });
      },
      (e) => {
        "use strict";
        e.exports = {
          _canInvitePlayerCallback: null,
          _inviteCallback: null,
          _registerCanInviteCallback: function (e) {
            this._canInvitePlayerCallback = e;
          },
          _registerInviteCallback: function (e) {
            this._inviteCallback = e;
          },
          canInvitePlayer(e) {
            return (
              !!this._canInvitePlayerCallback &&
              this._canInvitePlayerCallback(e)
            );
          },
          invitePlayer(e, t) {
            return this._inviteCallback
              ? this._inviteCallback(e, t)
              : Promise.reject(new Error("APPLICATION_NOT_INITIALIZED"));
          },
        };
      },
      (e, t, n) => {
        "use strict";
        var i = (function (e, t) {
          if (!t && e && e.__esModule) return e;
          if (null === e || ("object" != typeof e && "function" != typeof e))
            return { default: e };
          var n = s(t);
          if (n && n.has(e)) return n.get(e);
          var i = {},
            o = Object.defineProperty && Object.getOwnPropertyDescriptor;
          for (var a in e)
            if ("default" !== a && Object.prototype.hasOwnProperty.call(e, a)) {
              var r = o ? Object.getOwnPropertyDescriptor(e, a) : null;
              r && (r.get || r.set)
                ? Object.defineProperty(i, a, r)
                : (i[a] = e[a]);
            }
          (i.default = e), n && n.set(e, i);
          return i;
        })(n(1));
        function s(e) {
          if ("function" != typeof WeakMap) return null;
          var t = new WeakMap(),
            n = new WeakMap();
          return (s = function (e) {
            return e ? n : t;
          })(e);
        }
        i.default.getProvider().getSocket();
        const o = i.UIKit.getModalManager(),
          a = i.UIKit.getToastManager(),
          r = i.UIKit.getTemplateHelper();
        e.exports = function (e, t) {
          return i.tra.ready().then(() => {
            const n = i.tra.get(e),
              s = r.contentBlockNotification(n);
            if (t) {
              const e = i.tra.get(t);
              o.add({ type: "DialogAlert", data: { contents: n, okText: e } });
            } else
              a.add({
                type: "DialogToast",
                data: { contents: s },
                timing: "slow",
              });
          });
        };
      },
      (e, t, n) => {
        "use strict";
        var i;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.default = void 0);
        var s = (
          (i = n(23)) && i.__esModule ? i : { default: i }
        ).default.create();
        t.default = s;
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        e.exports = i.Ember.Object.extend({
          viewportApiKey: void 0,
          isShowing: !1,
        });
      },
      (e, t, n) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.default = void 0);
        var i = n(1);
        const s = (0, i.getProvider)().getSocket();
        var o = class {
          constructor() {
            (this.hasProcessedNotifications = !1),
              (this.toastManager = i.UIKit.getToastManager()),
              (this.templateHelper = i.UIKit.getTemplateHelper()),
              (this.modalManager = i.UIKit.getModalManager()),
              (this.playerNames = i.playerNames),
              (this.handleReadyCheckData =
                this.handleReadyCheckData.bind(this)),
              (this.matchMakingBinding = (0, i.dataBinding)(
                "/lol-matchmaking",
                s,
              )),
              this.matchMakingBinding.observe(
                "/v1/ready-check",
                this.handleReadyCheckData,
              );
          }
          handleReadyCheckData(e) {
            e && "InProgress" !== e.state
              ? this.hasProcessedNotifications ||
                ("None" === e.dodgeWarning &&
                  "Declined" === e.playerResponse) ||
                this.processNotifications(e)
              : (this.hasProcessedNotifications = !1);
          }
          processNotifications(e) {
            "PartyNotReady" === e.state && this.handlePartyNotReady(e),
              "StrangerNotReady" === e.state && this.handleStrangerNotReady(),
              "Warning" === e.dodgeWarning && this.handleDodgeWarning(),
              "Penalty" === e.dodgeWarning && this.handleDodgePenalty(),
              (this.hasProcessedNotifications = !0);
          }
          handlePartyNotReady(e) {
            const t = e.declinerIds && e.declinerIds[0];
            if (t)
              return (0, i.dataBinding)("/lol-summoner/v1", s)
                .get("/summoners/" + t)
                .then((e) => {
                  let t = "";
                  e
                    ? (t = this.playerNames.formatPlayerName(e).playerNameFull)
                    : i.logger.error(
                        "/lol-summoner/v1/summoners with a summoner id returned no summoner",
                      );
                  const n = this.templateHelper.contentBlockNotification(
                    i.tra.formatString(
                      "ready_check_reject_party_notification",
                      { summonerName: t },
                    ),
                    "lol-ready-check-notification-party-reject",
                  );
                  this.toastManager.add({
                    type: "DialogToast",
                    data: { contents: n, dismissable: !0 },
                    timing: "slow",
                  });
                })
                .catch((e) => {
                  throw (i.logger.error("failed to handlePartyNotReady", e), e);
                });
            i.logger.error(
              "/lol-matchmaking/v1/ready-check had state PartyNotReady with no declinerIds",
            );
          }
          handleStrangerNotReady() {
            const e = this.templateHelper.contentBlockNotification(
              i.tra.get("ready_check_reject_stranger_notification"),
              "lol-ready-check-notification-stranger-reject",
            );
            this.toastManager.add({
              type: "DialogToast",
              data: { contents: e, dismissable: !0 },
              timing: "slow",
            });
          }
          handleDodgeWarning() {
            const e = this.templateHelper.contentBlockDialogSimple(
              i.tra.get("ready_check_dodge_warning_notification"),
              "dialog-medium",
              "lol-ready-check-notification-dodge-warning",
            );
            this.modalManager.add({
              type: "DialogAlert",
              data: {
                contents: e,
                okText: i.tra.get("lib_ui_dialog_alert_ok"),
              },
            });
          }
          handleDodgePenalty() {
            const e = this.templateHelper.contentBlockDialogSimple(
              i.tra.get("ready_check_dodge_penalty_notification"),
              "dialog-medium",
              "lol-ready-check-notification-dodge-penalty",
            );
            this.modalManager.add({
              type: "DialogAlert",
              data: {
                contents: e,
                okText: i.tra.get("lib_ui_dialog_alert_ok"),
              },
            });
          }
        };
        t.default = o;
      },
      (e, t, n) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.default = void 0);
        var i = n(1);
        n(26);
        const s = "/v1/account/lol-leagues",
          o = "hasSeenFlexRestrictionModal",
          a = i.UIKit.getModalManager(),
          r = n(27);
        t.default = class {
          constructor() {
            this._hasShownThisSession = !1;
          }
          tryShow() {
            if (this._hasShownThisSession) return;
            const e = (0, i.dataBinding)("/lol-settings"),
              t = (0, i.dataBinding)("/lol-summoner"),
              n = (0, i.dataBinding)("/lol-platform-config");
            Promise.all([
              e.get("/v2/ready"),
              e.get(s, { skipCache: !0 }),
              t.get("/v1/current-summoner"),
              n.get("/v1/namespaces/LeagueConfig/FlexRestrictionModalEnabled"),
              n.get("/v1/namespaces/LeagueConfig/FlexRestrictionModalMinLevel"),
            ]).then((t) => {
              const [n, i, a, r, l] = t;
              if (!(n && r && i && a)) return;
              const c = i.data && i.data[o],
                m = a.summonerLevel || 0;
              if (!c && m >= (l || 30)) {
                this._createFlexRestrictionModal().okPromise.then(() => {
                  this._hasShownThisSession = !0;
                  const t = {};
                  return (t[o] = !0), e.patch(s, { data: t, schemaVersion: 1 });
                });
              } else this._hasShownThisSession = !0;
            });
          }
          _createFlexRestrictionModal() {
            let e = document.createElement("div");
            return (
              (e.innerHTML = r({
                title: i.tra.get(
                  "game_select_flex_restrictions_disabled_title",
                ),
                description: i.tra.get(
                  "game_select_flex_restrictions_disabled_body",
                ),
              })),
              (e = e.firstChild),
              a.add({
                type: "DialogAlert",
                data: {
                  contents: e,
                  okText: i.tra.get("lib_ui_dialog_alert_ok"),
                  dismissible: !0,
                  dismissibleType: "inside",
                },
              })
            );
          }
        };
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        var i = n(28);
        e.exports = (i.default || i).template({
          compiler: [7, ">= 4.0.0"],
          main: function (e, t, n, i, s) {
            var o,
              a = null != t ? t : e.nullContext || {},
              r = n.helperMissing,
              l = "function",
              c = e.escapeExpression;
            return (
              '<lol-uikit-dialog-frame>\r\n  <lol-uikit-content-block type="dialog-large" class="flex-restriction-modal">\r\n    <div class="flex-restriction-modal-title">' +
              c(
                typeof (o =
                  null != (o = n.title || (null != t ? t.title : t))
                    ? o
                    : r) === l
                  ? o.call(a, { name: "title", hash: {}, data: s })
                  : o,
              ) +
              '</div>\r\n    <div class="flex-restriction-modal-body">' +
              c(
                typeof (o =
                  null != (o = n.description || (null != t ? t.description : t))
                    ? o
                    : r) === l
                  ? o.call(a, { name: "description", hash: {}, data: s })
                  : o,
              ) +
              "</div>\r\n  </lol-uikit-content-block>\r\n</lol-uikit-dialog-frame>\r\n"
            );
          },
          useData: !0,
        });
      },
      (e, t, n) => {
        e.exports = n(29).default;
      },
      (e, t, n) => {
        "use strict";
        function i(e) {
          return e && e.__esModule ? e : { default: e };
        }
        function s(e) {
          if (e && e.__esModule) return e;
          var t = {};
          if (null != e)
            for (var n in e)
              Object.prototype.hasOwnProperty.call(e, n) && (t[n] = e[n]);
          return (t.default = e), t;
        }
        t.__esModule = !0;
        var o = s(n(30)),
          a = i(n(44)),
          r = i(n(32)),
          l = s(n(31)),
          c = s(n(45)),
          m = i(n(46));
        function u() {
          var e = new o.HandlebarsEnvironment();
          return (
            l.extend(e, o),
            (e.SafeString = a.default),
            (e.Exception = r.default),
            (e.Utils = l),
            (e.escapeExpression = l.escapeExpression),
            (e.VM = c),
            (e.template = function (t) {
              return c.template(t, e);
            }),
            e
          );
        }
        var d = u();
        (d.create = u),
          m.default(d),
          (d.default = d),
          (t.default = d),
          (e.exports = t.default);
      },
      (e, t, n) => {
        "use strict";
        function i(e) {
          return e && e.__esModule ? e : { default: e };
        }
        (t.__esModule = !0), (t.HandlebarsEnvironment = m);
        var s = n(31),
          o = i(n(32)),
          a = n(33),
          r = n(41),
          l = i(n(43));
        t.VERSION = "4.1.2";
        t.COMPILER_REVISION = 7;
        t.REVISION_CHANGES = {
          1: "<= 1.0.rc.2",
          2: "== 1.0.0-rc.3",
          3: "== 1.0.0-rc.4",
          4: "== 1.x.x",
          5: "== 2.0.0-alpha.x",
          6: ">= 2.0.0-beta.1",
          7: ">= 4.0.0",
        };
        var c = "[object Object]";
        function m(e, t, n) {
          (this.helpers = e || {}),
            (this.partials = t || {}),
            (this.decorators = n || {}),
            a.registerDefaultHelpers(this),
            r.registerDefaultDecorators(this);
        }
        m.prototype = {
          constructor: m,
          logger: l.default,
          log: l.default.log,
          registerHelper: function (e, t) {
            if (s.toString.call(e) === c) {
              if (t)
                throw new o.default("Arg not supported with multiple helpers");
              s.extend(this.helpers, e);
            } else this.helpers[e] = t;
          },
          unregisterHelper: function (e) {
            delete this.helpers[e];
          },
          registerPartial: function (e, t) {
            if (s.toString.call(e) === c) s.extend(this.partials, e);
            else {
              if (void 0 === t)
                throw new o.default(
                  'Attempting to register a partial called "' +
                    e +
                    '" as undefined',
                );
              this.partials[e] = t;
            }
          },
          unregisterPartial: function (e) {
            delete this.partials[e];
          },
          registerDecorator: function (e, t) {
            if (s.toString.call(e) === c) {
              if (t)
                throw new o.default(
                  "Arg not supported with multiple decorators",
                );
              s.extend(this.decorators, e);
            } else this.decorators[e] = t;
          },
          unregisterDecorator: function (e) {
            delete this.decorators[e];
          },
        };
        var u = l.default.log;
        (t.log = u), (t.createFrame = s.createFrame), (t.logger = l.default);
      },
      (e, t) => {
        "use strict";
        (t.__esModule = !0),
          (t.extend = a),
          (t.indexOf = function (e, t) {
            for (var n = 0, i = e.length; n < i; n++) if (e[n] === t) return n;
            return -1;
          }),
          (t.escapeExpression = function (e) {
            if ("string" != typeof e) {
              if (e && e.toHTML) return e.toHTML();
              if (null == e) return "";
              if (!e) return e + "";
              e = "" + e;
            }
            if (!s.test(e)) return e;
            return e.replace(i, o);
          }),
          (t.isEmpty = function (e) {
            return (!e && 0 !== e) || !(!c(e) || 0 !== e.length);
          }),
          (t.createFrame = function (e) {
            var t = a({}, e);
            return (t._parent = e), t;
          }),
          (t.blockParams = function (e, t) {
            return (e.path = t), e;
          }),
          (t.appendContextPath = function (e, t) {
            return (e ? e + "." : "") + t;
          });
        var n = {
            "&": "&amp;",
            "<": "&lt;",
            ">": "&gt;",
            '"': "&quot;",
            "'": "&#x27;",
            "`": "&#x60;",
            "=": "&#x3D;",
          },
          i = /[&<>"'`=]/g,
          s = /[&<>"'`=]/;
        function o(e) {
          return n[e];
        }
        function a(e) {
          for (var t = 1; t < arguments.length; t++)
            for (var n in arguments[t])
              Object.prototype.hasOwnProperty.call(arguments[t], n) &&
                (e[n] = arguments[t][n]);
          return e;
        }
        var r = Object.prototype.toString;
        t.toString = r;
        var l = function (e) {
          return "function" == typeof e;
        };
        l(/x/) &&
          (t.isFunction = l =
            function (e) {
              return (
                "function" == typeof e && "[object Function]" === r.call(e)
              );
            }),
          (t.isFunction = l);
        var c =
          Array.isArray ||
          function (e) {
            return (
              !(!e || "object" != typeof e) && "[object Array]" === r.call(e)
            );
          };
        t.isArray = c;
      },
      (e, t) => {
        "use strict";
        t.__esModule = !0;
        var n = [
          "description",
          "fileName",
          "lineNumber",
          "message",
          "name",
          "number",
          "stack",
        ];
        function i(e, t) {
          var s = t && t.loc,
            o = void 0,
            a = void 0;
          s && (e += " - " + (o = s.start.line) + ":" + (a = s.start.column));
          for (
            var r = Error.prototype.constructor.call(this, e), l = 0;
            l < n.length;
            l++
          )
            this[n[l]] = r[n[l]];
          Error.captureStackTrace && Error.captureStackTrace(this, i);
          try {
            s &&
              ((this.lineNumber = o),
              Object.defineProperty
                ? Object.defineProperty(this, "column", {
                    value: a,
                    enumerable: !0,
                  })
                : (this.column = a));
          } catch (e) {}
        }
        (i.prototype = new Error()), (t.default = i), (e.exports = t.default);
      },
      (e, t, n) => {
        "use strict";
        function i(e) {
          return e && e.__esModule ? e : { default: e };
        }
        (t.__esModule = !0),
          (t.registerDefaultHelpers = function (e) {
            s.default(e),
              o.default(e),
              a.default(e),
              r.default(e),
              l.default(e),
              c.default(e),
              m.default(e);
          });
        var s = i(n(34)),
          o = i(n(35)),
          a = i(n(36)),
          r = i(n(37)),
          l = i(n(38)),
          c = i(n(39)),
          m = i(n(40));
      },
      (e, t, n) => {
        "use strict";
        t.__esModule = !0;
        var i = n(31);
        (t.default = function (e) {
          e.registerHelper("blockHelperMissing", function (t, n) {
            var s = n.inverse,
              o = n.fn;
            if (!0 === t) return o(this);
            if (!1 === t || null == t) return s(this);
            if (i.isArray(t))
              return t.length > 0
                ? (n.ids && (n.ids = [n.name]), e.helpers.each(t, n))
                : s(this);
            if (n.data && n.ids) {
              var a = i.createFrame(n.data);
              (a.contextPath = i.appendContextPath(n.data.contextPath, n.name)),
                (n = { data: a });
            }
            return o(t, n);
          });
        }),
          (e.exports = t.default);
      },
      (e, t, n) => {
        "use strict";
        t.__esModule = !0;
        var i,
          s = n(31),
          o = n(32),
          a = (i = o) && i.__esModule ? i : { default: i };
        (t.default = function (e) {
          e.registerHelper("each", function (e, t) {
            if (!t) throw new a.default("Must pass iterator to #each");
            var n = t.fn,
              i = t.inverse,
              o = 0,
              r = "",
              l = void 0,
              c = void 0;
            function m(t, i, o) {
              l &&
                ((l.key = t),
                (l.index = i),
                (l.first = 0 === i),
                (l.last = !!o),
                c && (l.contextPath = c + t)),
                (r += n(e[t], {
                  data: l,
                  blockParams: s.blockParams([e[t], t], [c + t, null]),
                }));
            }
            if (
              (t.data &&
                t.ids &&
                (c = s.appendContextPath(t.data.contextPath, t.ids[0]) + "."),
              s.isFunction(e) && (e = e.call(this)),
              t.data && (l = s.createFrame(t.data)),
              e && "object" == typeof e)
            )
              if (s.isArray(e))
                for (var u = e.length; o < u; o++)
                  o in e && m(o, o, o === e.length - 1);
              else {
                var d = void 0;
                for (var p in e)
                  e.hasOwnProperty(p) &&
                    (void 0 !== d && m(d, o - 1), (d = p), o++);
                void 0 !== d && m(d, o - 1, !0);
              }
            return 0 === o && (r = i(this)), r;
          });
        }),
          (e.exports = t.default);
      },
      (e, t, n) => {
        "use strict";
        t.__esModule = !0;
        var i,
          s = n(32),
          o = (i = s) && i.__esModule ? i : { default: i };
        (t.default = function (e) {
          e.registerHelper("helperMissing", function () {
            if (1 !== arguments.length)
              throw new o.default(
                'Missing helper: "' +
                  arguments[arguments.length - 1].name +
                  '"',
              );
          });
        }),
          (e.exports = t.default);
      },
      (e, t, n) => {
        "use strict";
        t.__esModule = !0;
        var i = n(31);
        (t.default = function (e) {
          e.registerHelper("if", function (e, t) {
            return (
              i.isFunction(e) && (e = e.call(this)),
              (!t.hash.includeZero && !e) || i.isEmpty(e)
                ? t.inverse(this)
                : t.fn(this)
            );
          }),
            e.registerHelper("unless", function (t, n) {
              return e.helpers.if.call(this, t, {
                fn: n.inverse,
                inverse: n.fn,
                hash: n.hash,
              });
            });
        }),
          (e.exports = t.default);
      },
      (e, t) => {
        "use strict";
        (t.__esModule = !0),
          (t.default = function (e) {
            e.registerHelper("log", function () {
              for (
                var t = [void 0], n = arguments[arguments.length - 1], i = 0;
                i < arguments.length - 1;
                i++
              )
                t.push(arguments[i]);
              var s = 1;
              null != n.hash.level
                ? (s = n.hash.level)
                : n.data && null != n.data.level && (s = n.data.level),
                (t[0] = s),
                e.log.apply(e, t);
            });
          }),
          (e.exports = t.default);
      },
      (e, t) => {
        "use strict";
        (t.__esModule = !0),
          (t.default = function (e) {
            e.registerHelper("lookup", function (e, t) {
              return e
                ? "constructor" !== t || e.propertyIsEnumerable(t)
                  ? e[t]
                  : void 0
                : e;
            });
          }),
          (e.exports = t.default);
      },
      (e, t, n) => {
        "use strict";
        t.__esModule = !0;
        var i = n(31);
        (t.default = function (e) {
          e.registerHelper("with", function (e, t) {
            i.isFunction(e) && (e = e.call(this));
            var n = t.fn;
            if (i.isEmpty(e)) return t.inverse(this);
            var s = t.data;
            return (
              t.data &&
                t.ids &&
                ((s = i.createFrame(t.data)).contextPath = i.appendContextPath(
                  t.data.contextPath,
                  t.ids[0],
                )),
              n(e, {
                data: s,
                blockParams: i.blockParams([e], [s && s.contextPath]),
              })
            );
          });
        }),
          (e.exports = t.default);
      },
      (e, t, n) => {
        "use strict";
        (t.__esModule = !0),
          (t.registerDefaultDecorators = function (e) {
            o.default(e);
          });
        var i,
          s = n(42),
          o = (i = s) && i.__esModule ? i : { default: i };
      },
      (e, t, n) => {
        "use strict";
        t.__esModule = !0;
        var i = n(31);
        (t.default = function (e) {
          e.registerDecorator("inline", function (e, t, n, s) {
            var o = e;
            return (
              t.partials ||
                ((t.partials = {}),
                (o = function (s, o) {
                  var a = n.partials;
                  n.partials = i.extend({}, a, t.partials);
                  var r = e(s, o);
                  return (n.partials = a), r;
                })),
              (t.partials[s.args[0]] = s.fn),
              o
            );
          });
        }),
          (e.exports = t.default);
      },
      (e, t, n) => {
        "use strict";
        t.__esModule = !0;
        var i = n(31),
          s = {
            methodMap: ["debug", "info", "warn", "error"],
            level: "info",
            lookupLevel: function (e) {
              if ("string" == typeof e) {
                var t = i.indexOf(s.methodMap, e.toLowerCase());
                e = t >= 0 ? t : parseInt(e, 10);
              }
              return e;
            },
            log: function (e) {
              if (
                ((e = s.lookupLevel(e)),
                "undefined" != typeof console && s.lookupLevel(s.level) <= e)
              ) {
                var t = s.methodMap[e];
                console[t] || (t = "log");
                for (
                  var n = arguments.length, i = Array(n > 1 ? n - 1 : 0), o = 1;
                  o < n;
                  o++
                )
                  i[o - 1] = arguments[o];
                console[t].apply(console, i);
              }
            },
          };
        (t.default = s), (e.exports = t.default);
      },
      (e, t) => {
        "use strict";
        function n(e) {
          this.string = e;
        }
        (t.__esModule = !0),
          (n.prototype.toString = n.prototype.toHTML =
            function () {
              return "" + this.string;
            }),
          (t.default = n),
          (e.exports = t.default);
      },
      (e, t, n) => {
        "use strict";
        (t.__esModule = !0),
          (t.checkRevision = function (e) {
            var t = (e && e[0]) || 1,
              n = r.COMPILER_REVISION;
            if (t !== n) {
              if (t < n) {
                var i = r.REVISION_CHANGES[n],
                  s = r.REVISION_CHANGES[t];
                throw new a.default(
                  "Template was precompiled with an older version of Handlebars than the current runtime. Please update your precompiler to a newer version (" +
                    i +
                    ") or downgrade your runtime to an older version (" +
                    s +
                    ").",
                );
              }
              throw new a.default(
                "Template was precompiled with a newer version of Handlebars than the current runtime. Please update your runtime to a newer version (" +
                  e[1] +
                  ").",
              );
            }
          }),
          (t.template = function (e, t) {
            if (!t) throw new a.default("No environment passed to template");
            if (!e || !e.main)
              throw new a.default("Unknown template object: " + typeof e);
            (e.main.decorator = e.main_d), t.VM.checkRevision(e.compiler);
            var n = {
              strict: function (e, t) {
                if (!(t in e))
                  throw new a.default('"' + t + '" not defined in ' + e);
                return e[t];
              },
              lookup: function (e, t) {
                for (var n = e.length, i = 0; i < n; i++)
                  if (e[i] && null != e[i][t]) return e[i][t];
              },
              lambda: function (e, t) {
                return "function" == typeof e ? e.call(t) : e;
              },
              escapeExpression: s.escapeExpression,
              invokePartial: function (n, i, o) {
                o.hash &&
                  ((i = s.extend({}, i, o.hash)), o.ids && (o.ids[0] = !0)),
                  (n = t.VM.resolvePartial.call(this, n, i, o));
                var r = t.VM.invokePartial.call(this, n, i, o);
                if (
                  (null == r &&
                    t.compile &&
                    ((o.partials[o.name] = t.compile(n, e.compilerOptions, t)),
                    (r = o.partials[o.name](i, o))),
                  null != r)
                ) {
                  if (o.indent) {
                    for (
                      var l = r.split("\n"), c = 0, m = l.length;
                      c < m && (l[c] || c + 1 !== m);
                      c++
                    )
                      l[c] = o.indent + l[c];
                    r = l.join("\n");
                  }
                  return r;
                }
                throw new a.default(
                  "The partial " +
                    o.name +
                    " could not be compiled when running in runtime-only mode",
                );
              },
              fn: function (t) {
                var n = e[t];
                return (n.decorator = e[t + "_d"]), n;
              },
              programs: [],
              program: function (e, t, n, i, s) {
                var o = this.programs[e],
                  a = this.fn(e);
                return (
                  t || s || i || n
                    ? (o = l(this, e, a, t, n, i, s))
                    : o || (o = this.programs[e] = l(this, e, a)),
                  o
                );
              },
              data: function (e, t) {
                for (; e && t--; ) e = e._parent;
                return e;
              },
              merge: function (e, t) {
                var n = e || t;
                return e && t && e !== t && (n = s.extend({}, t, e)), n;
              },
              nullContext: Object.seal({}),
              noop: t.VM.noop,
              compilerInfo: e.compiler,
            };
            function i(t) {
              var s =
                  arguments.length <= 1 || void 0 === arguments[1]
                    ? {}
                    : arguments[1],
                o = s.data;
              i._setup(s),
                !s.partial &&
                  e.useData &&
                  (o = (function (e, t) {
                    (t && "root" in t) ||
                      ((t = t ? r.createFrame(t) : {}).root = e);
                    return t;
                  })(t, o));
              var a = void 0,
                l = e.useBlockParams ? [] : void 0;
              function c(t) {
                return "" + e.main(n, t, n.helpers, n.partials, o, l, a);
              }
              return (
                e.useDepths &&
                  (a = s.depths
                    ? t != s.depths[0]
                      ? [t].concat(s.depths)
                      : s.depths
                    : [t]),
                (c = m(e.main, c, n, s.depths || [], o, l))(t, s)
              );
            }
            return (
              (i.isTop = !0),
              (i._setup = function (i) {
                i.partial
                  ? ((n.helpers = i.helpers),
                    (n.partials = i.partials),
                    (n.decorators = i.decorators))
                  : ((n.helpers = n.merge(i.helpers, t.helpers)),
                    e.usePartial &&
                      (n.partials = n.merge(i.partials, t.partials)),
                    (e.usePartial || e.useDecorators) &&
                      (n.decorators = n.merge(i.decorators, t.decorators)));
              }),
              (i._child = function (t, i, s, o) {
                if (e.useBlockParams && !s)
                  throw new a.default("must pass block params");
                if (e.useDepths && !o)
                  throw new a.default("must pass parent depths");
                return l(n, t, e[t], i, 0, s, o);
              }),
              i
            );
          }),
          (t.wrapProgram = l),
          (t.resolvePartial = function (e, t, n) {
            e
              ? e.call || n.name || ((n.name = e), (e = n.partials[e]))
              : (e =
                  "@partial-block" === n.name
                    ? n.data["partial-block"]
                    : n.partials[n.name]);
            return e;
          }),
          (t.invokePartial = function (e, t, n) {
            var i = n.data && n.data["partial-block"];
            (n.partial = !0),
              n.ids && (n.data.contextPath = n.ids[0] || n.data.contextPath);
            var o = void 0;
            n.fn &&
              n.fn !== c &&
              (function () {
                n.data = r.createFrame(n.data);
                var e = n.fn;
                (o = n.data["partial-block"] =
                  function (t) {
                    var n =
                      arguments.length <= 1 || void 0 === arguments[1]
                        ? {}
                        : arguments[1];
                    return (
                      (n.data = r.createFrame(n.data)),
                      (n.data["partial-block"] = i),
                      e(t, n)
                    );
                  }),
                  e.partials &&
                    (n.partials = s.extend({}, n.partials, e.partials));
              })();
            void 0 === e && o && (e = o);
            if (void 0 === e)
              throw new a.default(
                "The partial " + n.name + " could not be found",
              );
            if (e instanceof Function) return e(t, n);
          }),
          (t.noop = c);
        var i,
          s = (function (e) {
            if (e && e.__esModule) return e;
            var t = {};
            if (null != e)
              for (var n in e)
                Object.prototype.hasOwnProperty.call(e, n) && (t[n] = e[n]);
            return (t.default = e), t;
          })(n(31)),
          o = n(32),
          a = (i = o) && i.__esModule ? i : { default: i },
          r = n(30);
        function l(e, t, n, i, s, o, a) {
          function r(t) {
            var s =
                arguments.length <= 1 || void 0 === arguments[1]
                  ? {}
                  : arguments[1],
              r = a;
            return (
              !a ||
                t == a[0] ||
                (t === e.nullContext && null === a[0]) ||
                (r = [t].concat(a)),
              n(
                e,
                t,
                e.helpers,
                e.partials,
                s.data || i,
                o && [s.blockParams].concat(o),
                r,
              )
            );
          }
          return (
            ((r = m(n, r, e, a, i, o)).program = t),
            (r.depth = a ? a.length : 0),
            (r.blockParams = s || 0),
            r
          );
        }
        function c() {
          return "";
        }
        function m(e, t, n, i, o, a) {
          if (e.decorator) {
            var r = {};
            (t = e.decorator(t, r, n, i && i[0], o, a, i)), s.extend(t, r);
          }
          return t;
        }
      },
      (e, t, n) => {
        "use strict";
        (t.__esModule = !0),
          (t.default = function (e) {
            var t = void 0 !== n.g ? n.g : window,
              i = t.Handlebars;
            e.noConflict = function () {
              return t.Handlebars === e && (t.Handlebars = i), e;
            };
          }),
          (e.exports = t.default);
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        const s = i.UIKit.getModalManager();
        e.exports = function () {
          const e = i.tra.get("parties_unknown_error"),
            t = i.tra.get("parties_kicked_confirmation_ok");
          s.add({
            type: "DialogAlert",
            data: { contents: e, okText: t },
          }).domNode.classList.add("parties-unknown-error-modal");
        };
      },
      (e, t, n) => {
        "use strict";
        var i,
          s = n(1),
          o = (i = n(49)) && i.__esModule ? i : { default: i };
        function a(e, t, i) {
          const a = (0, o.default)(s.Ember, s.tra),
            { EmberCollectionApi: r, PlayerNameInputApi: l } =
              s.SharedEmberComponents,
            {
              ArrowFooterComponent: c,
              ButtonMaskIconComponent: m,
              CallToActionPipComponent: u,
              ClickableIconButtonComponent: d,
              FramedIconButtonComponent: p,
              HextechLoadingAnimationComponent: h,
              PlayerRestrictionInfoComponent: g,
              RemainingTimeTextComponent: b,
              CountdownWidgetComponent: f,
              PerkPageTooltipComponent: _,
              PlayerNameComponent: y,
              SkinPurchaseButtonComponent: v,
              SkinChromaButtonComponent: S,
              SkinChromaModalComponent: x,
              SkinQuestFormModalComponent: E,
            } = s.SharedComponents.getSharedEmberComponents(),
            {
              ChallengeBannerTitleComponent: k,
              ChallengeBannerTokenComponent: C,
              ChallengeBannerTokenContainerComponent: P,
              ChallengeItemTooltipComponent: I,
              ChallengeItemFooterComponent: T,
              RiotclientService: w,
              GameDataService: M,
            } = s.SharedComponents.getApi_SharedChallengesComponents(),
            L = n(50),
            A = n(52),
            R = n(54),
            N = n(55),
            D = n(58),
            O = n(61),
            B = n(62),
            F = n(63),
            q = n(64),
            G = n(65),
            U = n(66),
            Q = n(69),
            j = n(70).default,
            H = n(71),
            z = n(73),
            V = n(76),
            W = n(77),
            Y = n(78).default,
            K = n(79),
            $ = n(80),
            X = n(81).default;
          let J = {
            name: "PartiesScreen",
            tra: a,
            ComponentFactory: s.ComponentFactory,
            PartiesScreenComponent: n(82),
            PartiesAmbienceComponent: n(86),
            PartiesBackgroundComponent: n(90),
            PartiesHeaderComponent: n(93),
            PartiesDebugToolsComponent: n(100),
            PartiesDebugCustomLobbyComponent: n(103),
            PartiesDebugQueueLobbyComponent: n(107),
            MatchmakingErrorsComponent: n(110),
            PartiesFooterNotificationsComponent: n(111),
            PartiesNotificationsComponent: n(114),
            PartiesRootComponent: n(116),
            PartiesFooterComponent: n(118),
            LowerSectionComponent: n(122),
            PlayerPartyControlsComponent: n(126),
            InviteButtonComponent: n(129),
            InviteInfoPanelComponent: n(131),
            InviteInfoPanelPlayerComponent: n(134),
            InviteInfoPanelTftProgressionComponent: n(137),
            PlayerManagementButtonComponent: n(140),
            PointEligibilityComponent: n(143),
            ArrowFooterComponent: c,
            DisbandCountdownComponent: n(146),
            OpenPartyToggleComponent: n(149),
            ...i,
            GameSelectRootComponent: n(152),
            GameSelectFooterComponent: n(155),
            GameTypeSelectComponent: n(158),
            GameTypeCardComponent: n(161),
            GameTypeIconComponent: n(164),
            GameTypeCategorySelectComponent: n(167),
            CategorySelectComponent: n(174),
            PlayableCategoryComponent: n(176),
            CustomGameSetupComponent: n(178),
            CustomGameSubcategoryCardComponent: n(181),
            CustomGameRootComponent: n(183),
            SpectatorInfoComponent: n(186),
            SpectatorMemberComponent: n(189),
            CustomTeamsComponent: n(192),
            CustomTeamMemberComponent: n(196),
            CustomGameListComponent: n(200),
            CustomGameTournamentCodeComponent: n(204),
            CustomGameRowComponent: n(207),
            TftLobbyComponent: n(209),
            TftFooterComponent: n(212),
            TftPlayerCardComponent: n(215),
            TftPlayerCardCosmeticsComponent: n(236),
            TftEventCountdownComponent: n(239),
            TftEmeraldRankModalComponent: n(244),
            TftCosmeticsPickerComponent: n(247),
            SocialLeaderboardButtonComponent: n(250),
            CallToActionPipComponent: u,
            V2BannerComponent: n(255),
            V2FooterComponent: n(259),
            V2FooterNotificationsComponent: n(262),
            V2HeaderComponent: n(265),
            V2PartiesRootComponent: n(268),
            V2PlayerManagementButtonComponent: n(271),
            V2PlayerPartyControlsComponent: n(274),
            V2PointEligibilityComponent: n(277),
            V2PositionSelectorComponent: n(280),
            V2HorizontalOptionsShowcaseComponent: n(283),
            V2PositionIconComponent: n(286),
            V2BannerPositionIconComponent: n(289),
            V2PositionSelectorButtonComponent: n(292),
            V2PositionSelectorOptionComponent: n(295),
            V2PositionSelectorModalComponent: n(298),
            V2InviteInfoPanelComponent: n(301),
            V2InviteInfoPanelPlayerComponent: n(304),
            V2InviteInfoPanelTftProgressionComponent: n(307),
            V2BannerCrystalTooltipComponent: n(310),
            V2BannerPlaceholderComponent: n(313),
            IdentityTooltipComponent: n(316),
            RankIdentityTooltipComponent: n(319),
            SummonerIconIdentityTooltipComponent: n(322),
            PrestigeIdentityTooltipComponent: n(325),
            GenericButtonComponent: n(328),
            AnimatedFindMatchButtonComponent: n(332),
            CherryRatingComponent: n(335),
            ChallengeBannerTitleComponent: k,
            ChallengeBannerTokenComponent: C,
            ChallengeBannerTokenContainerComponent: P,
            ChallengeItemTooltipComponent: I,
            ChallengeItemFooterComponent: T,
            PlayerRestrictionInfoComponent: g,
            RemainingTimeTextComponent: b,
            CountdownWidgetComponent: f,
            QuickPlayLoadoutSelectorComponent: n(338),
            QuickPlaySelectionRendererComponent: n(342),
            QuickPlayChampionSquareComponent: n(345),
            QuickPlayChampionGridComponent: n(348),
            QuickPlayGridChampionComponent: n(352),
            QuickPlayChampionSelectorComponent: n(355),
            QuickPlayPerksSelectorComponent: n(358),
            QuickPlayPerksPageDropdownComponent: n(362),
            QuickPlayPerksPageDropdownOptionComponent: n(365),
            QuickPlaySkinCarouselComponent: n(368),
            QuickPlaySkinSelectComponent: n(371),
            QuickPlaySummonerSpellPopupComponent: n(374),
            QuickPlaySummonerSpellRendererComponent: n(377),
            QuickPlaySummonerSpellSelectComponent: n(380),
            QuickPlayLoadoutTooltipComponent: n(383),
            QuickPlaySelectionsContainerComponent: n(386),
            QuickPlaySelectionRulesTooltipComponent: n(389),
            MultiteamLobbyRootComponent: n(392).default,
            MultiteamLobbySubteamComponent: n(395).default,
            MultiteamLobbySubteamPlayerSlotComponent: n(398).default,
            StrawberryLobbyRootComponent: n(401).default,
            ButtonMaskIconComponent: m,
            ClickableIconButtonComponent: d,
            FramedIconButtonComponent: p,
            PerkPageTooltipComponent: _,
            PlayerNameComponent: y,
            SkinPurchaseButtonComponent: v,
            SkinChromaButtonComponent: S,
            SkinChromaModalComponent: x,
            SkinQuestFormModalComponent: E,
            LobbiesService: N,
            AssetsService: L,
            ChatService: A,
            PartySettingsService: q,
            MatchmakingService: D,
            SummonerService: R,
            QueueEligibilityService: B,
            GameflowService: F,
            CustomGamesService: G,
            CustomGameListService: U,
            InventoryService: Q,
            PatcherService: j,
            InvitesService: H,
            EternalsService: O,
            TftCosmeticsService: V,
            TftEventsService: W,
            TftNpeService: Y,
            SocialLeaderboardService: K,
            ChallengesService: $,
            RiotclientService: w,
            GameDataService: M,
            QuickPlayService: z,
            ClientConfigService: X,
            EqHelper: s.Ember.Helper.helper((e) => e[0] === e[1]),
          };
          s.StrawberryModules && Object.assign(J, { ...s.StrawberryModules });
          const Z = n(404);
          Object.assign(J, {
            TftPlaybookIconComponent: n(405),
            TftPlaybookMenuComponent: n(408),
            TftPlaybookItemComponent: n(411),
            TftPlaybookItemDetailsComponent: n(414),
            TftPlaybookCardComponent: n(417),
            TftPlaybookTutorialComponent: n(420),
            TftPlaybookService: Z,
          }),
            (J = r.registerToFactoryDefinition(J)),
            s.EmberApplicationFactory.setFactoryDefinition(J),
            s.EmberApplicationFactory.setFactoryDefinition({
              name: "TftRewardCelebration",
              tra: a,
              ComponentFactory: s.ComponentFactory,
              TftRewardCelebrationComponent: n(423).default,
            }),
            s.EmberApplicationFactory.setFactoryDefinition({
              name: "PartyQueueErrorDialogComponent",
              tra: a,
              ComponentFactory: s.ComponentFactory,
              PartyQueueErrorDialogComponent: n(426),
              PartyQueueErrorDialogGenericComponent: n(428),
              PartyQueueErrorDialogMinLevelComponent: n(430),
              PartyQueueErrorDialogLeaverBustedComponent: n(432),
              PartyQueueErrorDialogLeaverBusterLockoutComponent: n(434),
              PartyQueueErrorDialogLeaverBusterTaintedWarningComponent: n(437),
              PartyQueueErrorDialogQueueDodgeComponent: n(439),
              PartyQueueErrorDialogPrerequisiteQueuesNotPlayedComponent: n(442),
            }),
            s.EmberApplicationFactory.setFactoryDefinition({
              name: "PartiesInviteDialog",
              tra: a,
              ComponentFactory: s.ComponentFactory,
              PartiesInviteDialogComponent: n(444),
              InviteDialogGroupComponent: n(448),
              LobbiesService: N,
              ChatService: A,
              MatchmakingService: D,
              SummonerService: R,
              QueueEligibilityService: B,
              CustomGamesService: G,
              InvitesService: H,
              PlayerNameComponent: y,
              ...l.fetchPlayerNameInputAndDependencies(),
            }),
            s.EmberApplicationFactory.setFactoryDefinition({
              name: "LowPriorityQueueToastComponent",
              tra: a,
              ComponentFactory: s.ComponentFactory,
              LowPriorityQueueToastComponent: n(451),
            }),
            s.EmberApplicationFactory.setFactoryDefinition({
              name: "LowPriorityQueueModalComponent",
              tra: a,
              ComponentFactory: s.ComponentFactory,
              LowPriorityQueueToastComponent: n(454),
            }),
            s.EmberApplicationFactory.setFactoryDefinition({
              name: "AutofillSettingComponent",
              tra: a,
              ComponentFactory: s.ComponentFactory,
              AutofillSettingComponent: n(456),
            }),
            s.EmberApplicationFactory.setFactoryDefinition({
              name: "GameModeTutorialComponent",
              tra: a,
              ComponentFactory: s.ComponentFactory,
              GameModeTutorialComponent: n(459),
            }),
            s.EmberApplicationFactory.setFactoryDefinition({
              name: "GameModeOnePageTutorialComponent",
              tra: a,
              ComponentFactory: s.ComponentFactory,
              GameModeTutorialComponent: n(462),
            }),
            s.EmberApplicationFactory.setFactoryDefinition({
              name: "SocialLeaderboardFeatureFlyoutComponent",
              tra: a,
              ComponentFactory: s.ComponentFactory,
              SocialLeaderboardFeatureFlyoutComponent: n(465),
              SocialLeaderboardHeaderComponent: n(468),
              SocialLeaderboardCountdownTimerComponent: n(471),
              SocialLeaderboardTableComponent: n(475),
              SocialLeaderboardRowComponent: n(478),
              SocialLeaderboardFriendFilterComponent: n(481),
              SocialLeaderboardFriendNotFoundComponent: n(484),
              SocialLeaderboardNotEnoughFriendsComponent: n(487),
              SocialLeaderboardErrorStateComponent: n(490),
              HextechLoadingAnimationComponent: h,
              LobbiesService: N,
              SummonerService: R,
              QueueEligibilityService: B,
              MatchmakingService: D,
              ChatService: A,
              SocialLeaderboardService: K,
              InvitesService: H,
              ...e,
              TEMPLATES: { ...t },
            });
        }
        (e.exports = async function () {
          let e = null;
          try {
            e = (
              await (0, s.getProvider)().getOptional("rcp-fe-lol-tft")
            ).getBattlePassMilestone();
          } catch (e) {
            s.logger.error("Provider getOptional failure", e);
          }
          let t = null,
            n = null;
          try {
            const e = await (0, s.getProvider)().getOptional(
              "rcp-fe-lol-social",
            );
            (t = e.getHovercardComponent()), (n = e.getHovercardTemplates());
          } catch (e) {
            s.logger.error("Provider getOptional failure", e);
          }
          a(t, n, e);
        }),
          (e.exports.registerApplication = a);
      },
      (e) => {
        "use strict";
        function t(e) {
          const n = {};
          for (const i in e)
            "object" == typeof e[i] ? (n[i] = t(e[i])) : (n[i] = e[i]);
          return n;
        }
        function n(e, t, n) {
          const { regions: i, region: s, locale: o } = e.metadata();
          if ((n = n.get("metadata." + t)) && "region" === t && n.id !== s.id) {
            const t = i[n.id],
              s = t.defaultLocale
                ? t.defaultLocale.id
                : t.availableLocales[0].id;
            e.setLocale(s, n.id);
          } else n && "locale" === t && n.id !== o.id && e.setLocale(n.id);
        }
        e.exports = function (e, i, s) {
          let o;
          const a = { metadata: !0, moment: !0 };
          return (
            (i = i.observe(() => {
              if (o) {
                const e = t(i.metadata());
                o.set("metadata", e),
                  o.beginPropertyChanges(),
                  Object.keys(a).forEach((e) => {
                    o.propertyWillChange(e), o.propertyDidChange(e);
                  }),
                  o.endPropertyChanges();
              }
            })),
            (o = e.Service.extend({
              _tra: null,
              init() {
                this.wrapTra(i);
              },
              wrapTra(e) {
                e &&
                  ((this._tra = e),
                  this.set("metadata", t(this._tra.metadata())),
                  (this.setLocale = this._tra.setLocale.bind(this._tra)),
                  (this.formatString = this._tra.formatString.bind(this._tra)),
                  (this.moment = this._tra.moment.bind(this._tra)),
                  (this.ready = this._tra.ready.bind(this._tra)),
                  (this.exists = this._tra.exists.bind(this._tra)),
                  (this.getAsync = this._tra.getAsync.bind(this._tra)),
                  (this.existsAsync = this._tra.existsAsync.bind(this._tra)),
                  (this.numeral = this._tra.numeral.bind(this._tra)));
              },
              unknownProperty(e) {
                return (a[e] = !0), this._tra.get(e);
              },
              willDestroy: () => this._tra.unregister(),
              addOverlays: function (e) {
                let t = this._tra;
                for (const n of e) t = t.overlay(n);
                t && this.wrapTra(t);
              },
            }).create()),
            o.set("service", o),
            o.addObserver("metadata.region", n.bind(null, i, "region")),
            o.addObserver("metadata.locale", n.bind(null, i, "locale")),
            s &&
              (console.warning(
                "deprecated: pass a traService as a property of your Ember application definition",
              ),
              s.register("tra:main", o, { instantiate: !1 }),
              s.inject("component", "tra", "tra:main"),
              s.inject("controller", "tra", "tra:main"),
              s.inject("view", "tra", "tra:main"),
              s.inject("model", "tra", "tra:main"),
              s.inject("route", "tra", "tra:main"),
              s.inject("service", "tra", "tra:main")),
            o
          );
        };
      },
      (e, t, n) => {
        "use strict";
        var i = n(1),
          s = n(51);
        const o = (0, i.getProvider)().getSocket(),
          a = (0, i.emberDataBinding)({
            Ember: i.Ember,
            websocket: o,
            logPrefix: "service:assets",
            basePaths: {
              gameflow: "/lol-gameflow",
              gameData: "/lol-game-data",
            },
            boundProperties: {
              gameflowSession: {
                api: "gameflow",
                path: "/v1/session",
                default: {},
              },
              summonerIcons: {
                api: "gameData",
                path: "/assets/v1/summoner-icons.json",
              },
              regionLocale: "/riotclient/region-locale",
            },
          });
        e.exports = i.Ember.Service.extend(a, {
          init() {
            this._super(...arguments),
              this.set("maps", []),
              this._initObservers();
          },
          _initObservers() {
            (0, i.dataBinding)("/lol-maps", o).observe(
              "/v2/maps",
              this,
              (e) => {
                e && this.set("maps", e);
              },
            ),
              (0, i.dataBinding)("/lol-game-data", o).observe(
                "/assets/v1/generic-assets.json",
                this,
                (e) => {
                  e &&
                    this.set(
                      "teamPlannerButtonAssets",
                      e["lcu-assets-tft-team-planner-button"],
                    );
                },
              );
          },
          currentMapId: i.Ember.computed.alias("gameflowSession.map.id"),
          currentGameMode: i.Ember.computed.alias(
            "gameflowSession.map.gameMode",
          ),
          currentQueueId: i.Ember.computed.alias(
            "gameflowSession.gameData.queue.id",
          ),
          backgroundAssets: i.Ember.computed(
            "availableMaps.@each.id",
            "availableMaps.[]",
            function () {
              const e = i.Ember.A();
              return (
                this.get("availableMaps").forEach((t) => {
                  if (t.assets) {
                    let n, i, o, a;
                    (i = !1),
                      (a = s.SIDEBAR_BACKGROUND_COLORS.DEFAULT),
                      t.assets["parties-background-video"]
                        ? ((n = !0), (o = t.assets["parties-background-video"]))
                        : ((n = !1), (o = t.assets["parties-background"])),
                      o && (i = `/${o}`),
                      o &&
                        s.SIDEBAR_BACKGROUND_COLORS[t.gameMode] &&
                        s.SIDEBAR_BACKGROUND_COLORS[t.gameMode][t.id] &&
                        (a = s.SIDEBAR_BACKGROUND_COLORS[t.gameMode][t.id]),
                      e.pushObject({
                        id: t.id,
                        isDefault: t.isDefault,
                        gameMode: t.gameMode,
                        gameMutator: t.gameMutator,
                        url: i,
                        isVideo: n,
                        sidebarBackgroundColor: a,
                      });
                  }
                }),
                e
              );
            },
          ),
          availableMaps: i.Ember.computed(
            "maps.@each.id",
            "maps.[]",
            function () {
              const e = this.get("maps");
              return e || [];
            },
          ),
          getMap: function (e, t, n) {
            const i = this.get("maps");
            return this._getMap(i, e, t, n);
          },
          getBackgroundAsset: function (e, t, n) {
            const i = this.get("backgroundAssets");
            return this._getMap(i, e, t, n);
          },
          _getMap: function (e, t, n, i) {
            let s = !1,
              o = !1;
            for (const a of e)
              if (
                (a.id === t && a.isDefault && (o = a),
                a.id !== t || a.gameMode !== n || a.gameMutator)
              ) {
                if (
                  a.id === t &&
                  a.gameMode === n &&
                  i &&
                  a.gameMutator === i
                ) {
                  s = a;
                  break;
                }
              } else s = a;
            return s || o;
          },
        });
      },
      (e) => {
        "use strict";
        e.exports = {
          TUTORIAL_ASSETS: {
            BASIC_TUTORIAL: {
              "game-select-icon-active-video":
                "/fe/lol-parties/tutorial-active-video.webm",
              "game-select-icon-intro-video":
                "/fe/lol-parties/tutorial-intro-video.webm",
              "game-select-icon-disabled":
                "/fe/lol-parties/tutorial-disabled.png",
              "game-select-icon-hover": "/fe/lol-parties/tutorial-hover.png",
              "game-select-icon-default":
                "/fe/lol-parties/tutorial-default.png",
              "game-select-icon-active": "/fe/lol-parties/tutorial-active.png",
              "icon-victory": "/fe/lol-parties/tutorial-icon-victory.png",
            },
            BATTLE_TRAINING: {
              "game-select-icon-active-video":
                "/fe/lol-parties/battletraining-active-video.webm",
              "game-select-icon-intro-video":
                "/fe/lol-parties/battletraining-intro-video.webm",
              "game-select-icon-disabled":
                "/fe/lol-parties/battletraining-disabled.png",
              "game-select-icon-hover":
                "/fe/lol-parties/battletraining-hover.png",
              "game-select-icon-default":
                "/fe/lol-parties/battletraining-default.png",
              "game-select-icon-active":
                "/fe/lol-parties/battletraining-active.png",
              "icon-victory": "/fe/lol-parties/battletraining-icon-victory.png",
            },
            TUTORIAL_FLOW: {
              "game-select-icon-active-video":
                "/fe/lol-parties/battletraining-active-video.webm",
              "game-select-icon-intro-video":
                "/fe/lol-parties/battletraining-intro-video.webm",
              "game-select-icon-disabled":
                "/fe/lol-parties/battletraining-disabled.png",
              "game-select-icon-hover":
                "/fe/lol-parties/battletraining-hover.png",
              "game-select-icon-default":
                "/fe/lol-parties/battletraining-default.png",
              "game-select-icon-active":
                "/fe/lol-parties/battletraining-active.png",
              "icon-victory": "/fe/lol-parties/battletraining-icon-victory.png",
            },
            PRACTICETOOL: {
              "game-select-icon-active-video":
                "/fe/lol-parties/practicetool-active-video.webm",
              "game-select-icon-intro-video":
                "/fe/lol-parties/practicetool-intro-video.webm",
              "game-select-icon-disabled":
                "/fe/lol-parties/practicetool-disabled.png",
              "game-select-icon-hover":
                "/fe/lol-parties/practicetool-hover.png",
              "game-select-icon-default":
                "/fe/lol-parties/practicetool-default.png",
              "game-select-icon-active":
                "/fe/lol-parties/practicetool-active.png",
              "icon-victory": "/fe/lol-parties/practicetool-icon-victory.png",
            },
          },
          SIDEBAR_BACKGROUND_COLORS: {
            DEFAULT: "#010a13",
            ASCENSION: { 8: "#452B13" },
            ODIN: { 8: "#452B13" },
            ARAM: { 12: "#072237" },
            CLASSIC: { 10: "#21172A", 11: "#10242F" },
            KINGPORO: { 12: "#072237" },
            SIEGE: { 11: "#10242F" },
            ASSASSINATE: { 11: "#490916" },
            URF: { 11: "#4B231B" },
            ARSR: { 11: "#10242F" },
          },
        };
      },
      (e, t, n) => {
        "use strict";
        var i,
          s = n(1),
          o = (i = n(53)) && i.__esModule ? i : { default: i };
        const a = (0, s.emberDataBinding)({
          Ember: s.Ember,
          websocket: (0, s.getProvider)().getSocket(),
          logPrefix: "service:chat",
          basePaths: { chat: "/lol-chat" },
          boundProperties: {
            me: { api: "chat", path: "/v1/me" },
            friends: {
              api: "chat",
              path: "/v1/friends",
              objectTypes: { "[]": o.default },
            },
            groups: { api: "chat", path: "/v1/friend-groups" },
          },
        });
        e.exports = s.Ember.Service.extend(a, {
          friends: s.Ember.A(),
          isFriend: function (e) {
            const t = this.get("friends");
            return !!(t && t.length > 0) && t.isAny("summonerId", e);
          },
          getFriend: function (e) {
            const t = this.get("friends");
            return t && t.findBy("summonerId", e);
          },
          sendFriendRequest: function (e) {
            this.get("api.chat").post("/v2/friend-requests", e);
          },
          sendChatMessage: function (e, t) {
            const n = `/v1/conversations/${t}/messages`;
            return this.get("api.chat").post(n, {
              body: e,
              type: "information",
            });
          },
        });
      },
      (e, t, n) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.default = void 0);
        var i = n(1);
        const s = ["chat", "away"];
        var o = i.Ember.Object.extend({
          id: null,
          puuid: null,
          summonerId: null,
          name: null,
          gameName: null,
          gameTag: null,
          availability: null,
          icon: null,
          championId: null,
          contextText: null,
          isHonorRecognized: !1,
          isRecentlyPlayed: !1,
          avatarImgUrl: i.Ember.computed(
            "icon",
            "championId",
            "isInRecentGroup",
            function () {
              return this.get("isInRecentGroup")
                ? (function (e) {
                    if (!e || 0 === e)
                      return "/lol-game-data/assets/v1/champion-icons/-1.png";
                    return `/lol-game-data/assets/v1/champion-icons/${e}.png`;
                  })(this.get("championId"))
                : (function (e) {
                    if (!e || -1 === e)
                      return "/lol-game-data/assets/v1/profile-icons/1.jpg";
                    return `/lol-game-data/assets/v1/profile-icons/${e}.jpg`;
                  })(this.get("icon"));
            },
          ),
          isInRecentGroup: i.Ember.computed.or(
            "isHonorRecognized",
            "isRecentlyPlayed",
          ),
          checked: !1,
          checkboxId: i.Ember.computed("summonerId", function () {
            return `invite-dialog-checkbox-${this.get("summonerId")}`;
          }),
          canBeInvited: i.Ember.computed("availability", function () {
            const e = this.get("availability");
            return -1 !== s.indexOf(e);
          }),
          canBeInvitedBy(e) {
            const t = this.get("canBeInvited"),
              n = this.get("platformId"),
              i = this.get("product");
            return t && e && n === e.platformId && i === e.product;
          },
        });
        t.default = o;
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        const s = (0, i.emberDataBinding)({
          Ember: i.Ember,
          websocket: (0, i.getProvider)().getSocket(),
          logPrefix: "service:summoner",
          basePaths: { summoner: "/lol-summoner" },
          boundProperties: {
            currentSummoner: { api: "summoner", path: "/v1/current-summoner" },
          },
        });
        e.exports = i.Ember.Service.extend(s, {
          localSummonerId: i.Ember.computed.alias("currentSummoner.summonerId"),
          localProfileIconId: i.Ember.computed.alias(
            "currentSummoner.profileIconId",
          ),
          getSummoner: function (e) {
            const t = `/v1/summoners/${e}`;
            return this.get("api.summoner").get(t);
          },
          getSummonerBySummonerName: function (e) {
            const t = `/v1/summoners?name=${(e = encodeURIComponent(e))}`;
            return this.get("api.summoner").get(t);
          },
          getSummonersBySummonerNames: function (e) {
            return this.get("api.summoner").post("/v2/summoners/names", e);
          },
          getSummonersByAliases(e) {
            return this.get("api.summoner").post("/v1/summoners/aliases", e);
          },
          getSummonersByPuuid: function (e) {
            return this.get("api.summoner").post("/v2/summoners/puuid", e);
          },
        });
      },
      (e, t, n) => {
        "use strict";
        var i,
          s = n(1),
          o = n(12),
          a = n(56),
          r = n(57),
          l = n(9),
          c = (i = n(10)) && i.__esModule ? i : { default: i };
        const m = "tftEmeraldModalSeenNew",
          u = (0, s.emberDataBinding)({
            Ember: s.Ember,
            websocket: (0, s.getProvider)().getSocket(),
            logPrefix: "service:game-select",
            basePaths: {
              gameQueues: "/lol-game-queues",
              login: "/lol-login",
              lobby: "/lol-lobby",
              summoner: "/lol-summoner",
              suggestedPlayers: "/lol-suggested-players",
              chat: "/lol-chat",
              regalia: "/lol-regalia",
              featuredModes: "/lol-featured-modes",
              honor: "/lol-honor-v2",
              settings: "/lol-settings",
              gameData: "/lol-game-data",
            },
            boundProperties: {
              queues: { api: "gameQueues", path: "/v1/queues", default: [] },
              lobbyTimer: { api: "lobby", path: "/v2/lobby/countdown" },
              localSummonerData: { api: "login", path: "/v1/session" },
              currentSummoner: {
                api: "summoner",
                path: "/v1/current-summoner",
              },
              currentSummonerProfile: {
                api: "summoner",
                path: "/v1/current-summoner/summoner-profile",
              },
              availability: { api: "lobby", path: "/v1/lobby/availability" },
              invitations: { api: "lobby", path: "/v1/lobby/invitations" },
              suggestedPlayers: {
                api: "suggestedPlayers",
                path: "/v1/suggested-players",
              },
              chatConversations: { api: "chat", path: "/v1/conversations" },
              chatParticipants: {
                api: "chat",
                path: "/v1/conversations/{{chatConversationId}}/participants",
              },
              me: { api: "chat", path: "/v1/me" },
              notifications: { api: "lobby", path: "/v2/notifications" },
              gameSelectEligibilityHash: {
                api: "lobby",
                path: "/v2/eligibility/game-select-eligibility-hash",
              },
              regaliaConfig: { api: "regalia", path: "/v2/config" },
              featuredModesEntitledFeatures: {
                api: "featuredModes",
                path: "/v1/entitled-feature/{{queueId}}",
              },
              honorConfig: { api: "honor", path: "/v1/config" },
              hasPlayedTFTRankedMode: {
                api: "lobby",
                path: "/v1/lobby/tft-ranked-history",
              },
              tftPreferences: {
                api: "settings",
                path: "/v2/account/LCUPreferences/lol-tft",
              },
              tftSetData: { api: "gameData", path: "/assets/v1/tftsets.json" },
            },
          });
        e.exports = s.Ember.Service.extend(u, {
          matchmakingService: s.Ember.inject.service("matchmaking"),
          eligibilityService: s.Ember.inject.service("queue-eligibility"),
          playerNames: s.playerNames,
          platformConfig: c.default,
          init: function () {
            this._super(...arguments),
              (this.lobbiesDataBinding = (0, s.dataBinding)(
                "/lol-lobby",
                (0, s.getProvider)().getSocket(),
              )),
              this.lobbiesDataBinding.observe(
                "/v2/lobby",
                this,
                this.handleLobby,
              );
          },
          handleLobbyMemberNames: (e) =>
            e.puuid
              ? s.playerNames
                  .getDisplayNameByPUUID(e.puuid)
                  .then((t) => ({ displayName: t, ...e }))
              : e,
          handleLobby(e) {
            s.playerNames.isUsingAlias &&
              e?.members &&
              e.members.forEach((t, n) => {
                this.handleLobbyMemberNames(t).then((t) => {
                  e.members[n] = t;
                });
              }),
              this.set("lobby", e);
          },
          chatConversationId: s.Ember.computed(
            "lobby.multiUserChatId",
            "chatConversations.@each.id",
            function () {
              let e = this.get("lobby.multiUserChatId");
              if (!e) return "";
              e = e.split("@")[0];
              const t = this.get("chatConversations"),
                n = t && t.find((t) => t.id.split("@")[0] === e);
              return n && n.id ? encodeURIComponent(n.id) : "";
            },
          ),
          partyId: s.Ember.computed.alias("lobby.partyId"),
          queueId: s.Ember.computed.alias("lobby.gameConfig.queueId"),
          gameConfig: s.Ember.computed.alias("lobby.gameConfig"),
          gameMode: s.Ember.computed.alias("lobby.gameConfig.gameMode"),
          inLobby: s.Ember.computed.notEmpty("lobby.gameConfig.queueId"),
          isCustom: s.Ember.computed.bool("lobby.gameConfig.isCustom"),
          currentPlayer: s.Ember.computed.alias("lobby.localMember"),
          scarcePositions: s.Ember.computed.alias("lobby.scarcePositions"),
          currentPartyMembers: s.Ember.computed.alias("lobby.members"),
          currentPartyMemberIds: s.Ember.computed.mapBy(
            "currentPartyMembers",
            "summonerId",
          ),
          isCurrentPlayerPartyLeader: s.Ember.computed.bool(
            "lobby.localMember.isLeader",
          ),
          isCurrentPlayerPartyMember: s.Ember.computed.not(
            "isCurrentPlayerPartyLeader",
          ),
          autoFillEligible: s.Ember.computed.alias(
            "lobby.localMember.autoFillEligible",
          ),
          currentPartyIsNotFull: s.Ember.computed.not("currentPartyIsFull"),
          premadeSizeAllowed: s.Ember.computed.alias(
            "lobby.gameConfig.premadeSizeAllowed",
          ),
          allowablePremadeSizes: s.Ember.computed.alias(
            "lobby.gameConfig.allowablePremadeSizes",
          ),
          isDraft: s.Ember.computed.alias(
            "lobby.gameConfig.showPositionSelector",
          ),
          showPositionSelector: s.Ember.computed.alias(
            "lobby.gameConfig.showPositionSelector",
          ),
          currentPartySize: s.Ember.computed.alias("lobby.members.length"),
          lobbyTimerEnabled: s.Ember.computed.alias("lobbyTimer.enabled"),
          lobbyTimerCountdown: s.Ember.computed.alias("lobbyTimer.countdown"),
          maxTeamSize: s.Ember.computed.alias("lobby.gameConfig.maxTeamSize"),
          restrictions: s.Ember.computed.alias("lobby.restrictions"),
          warnings: s.Ember.computed.alias("lobby.warnings"),
          partyType: s.Ember.computed.alias("lobby.partyType"),
          isLobbyFull: s.Ember.computed.alias("lobby.gameConfig.isLobbyFull"),
          isOpenPartyDisabled: s.Ember.computed.equal("lobby.partyType", ""),
          isOpenPartyEnabled: s.Ember.computed.not("isOpenPartyDisabled"),
          isMap21: s.Ember.computed.equal("lobby.gameConfig.mapId", 21),
          isTFT: s.Ember.computed.equal("gameMode", o.TFT_GAME_MODE),
          isCherry: s.Ember.computed.equal("gameMode", o.CHERRY_GAME_MODE),
          isStrawberry: s.Ember.computed.equal(
            "gameMode",
            o.STRAWBERRY_GAME_MODE,
          ),
          isSolo: s.Ember.computed("lobby.members.length", function () {
            const e = this.get("lobby");
            return !(e && e.members && e.members.length > 1);
          }),
          maxLobbySize: s.Ember.computed(
            "lobby.gameConfig.maxLobbySize",
            "isTFT",
            function () {
              const e = this.get("lobby.gameConfig.maxLobbySize");
              return (
                e ||
                (this.get("isTFT")
                  ? o.TFT_MAX_PARTY_SIZE
                  : o.NORMAL_MAX_PARTY_SIZE)
              );
            },
          ),
          currentPartyIsFull: s.Ember.computed(
            "currentPartySize",
            "maxLobbySize",
            "isCustom",
            function () {
              if (this.get("isCustom")) return !1;
              const e = this.get("maxLobbySize");
              return this.get("currentPartySize") >= e;
            },
          ),
          memberNameHash: s.Ember.computed(
            "lobby.members.@each.summonerName",
            "currentSummoner.summonerId",
            function () {
              const e = {},
                t = this.get("currentSummoner");
              t &&
                (e[t.summonerId] = this.get("playerNames.isUsingAlias")
                  ? t.gameName
                  : t.summonerName);
              const n = this.get("lobby.members");
              if (n && n.length > 0) {
                const { length: t } = n;
                for (let i = 0; i < t; i++) {
                  const t = n[i];
                  e[t.summonerId] = this.get("playerNames.isUsingAlias")
                    ? t.gameName
                    : t.summonerName;
                }
              }
              return e;
            },
          ),
          hasLobbyRestrictions: s.Ember.computed.gt("restrictions.length", 0),
          currentTeamIsFull: s.Ember.computed(
            "currentPartyMembers.length",
            "maxTeamSize",
            function () {
              return (
                this.get("currentPartyMembers.length") >=
                this.get("maxTeamSize")
              );
            },
          ),
          otherCurrentPartyMembers: s.Ember.computed(
            "currentPartyMembers.@each.summonerId",
            "currentPlayer.summonerId",
            function () {
              const e = this.get("currentPartyMembers") || [],
                t = this.get("currentPlayer.summonerId");
              return (
                (e ? s.Ember.A(e.filter((e) => e.summonerId !== t)) : void 0) ||
                s.Ember.A()
              );
            },
          ),
          currentPartyLeader: s.Ember.computed(
            "currentPartyMembers.@each.isLeader",
            function () {
              const e = this.get("currentPartyMembers");
              return !!e && e.find((e) => e.isLeader);
            },
          ),
          invites: s.Ember.computed.alias("lobby.invitations"),
          pendingInvites: s.Ember.computed(
            "lobby.invitations.[]",
            "lobby.invitations.@each.state",
            function () {
              return (this.get("lobby.invitations") || s.Ember.A()).filter(
                (e) => "Pending" === e.state || "Requested" === e.state,
              );
            },
          ),
          invitedPlayerIds: s.Ember.computed.mapBy(
            "lobby.invitations",
            "toSummonerId",
          ),
          currentPlayerAcceptedInvitation: s.Ember.computed(
            "lobby.invitations.[]",
            "lobby.invitations.@each.state",
            "currentPlayer.summonerId",
            function () {
              const e = this.get("lobby.invitations"),
                t = this.get("currentPlayer.summonerId");
              if (e && t) {
                const n = e.find((e) => e.toSummonerId === t);
                if (n && n.state) return n.state === o.INVITED_ROLES.ACCEPTED;
              }
              return !1;
            },
          ),
          currentPartySuggestedPlayers:
            s.Ember.computed.alias("suggestedPlayers"),
          honorSuggestionsEnabled: s.Ember.computed.bool(
            "honorConfig.HonorSuggestionsEnabled",
          ),
          currentPlayerCanInvite: s.Ember.computed.and(
            "currentPlayer.allowedInviteOthers",
            "matchmakingService.isNotSearching",
            "currentPartyIsNotFull",
          ),
          shouldForceScarcePositionSelection: s.Ember.computed(
            "lobby.gameConfig.shouldForceScarcePositionSelection",
            function () {
              return this.get(
                "lobby.gameConfig.shouldForceScarcePositionSelection",
              );
            },
          ),
          multiteamLobbySubteamCount: s.Ember.computed("queueId", function () {
            const e = this.get("queueId");
            return e &&
              o.QUEUE_ID_TO_MULTITEAM_LOBBY_CONFIG &&
              o.QUEUE_ID_TO_MULTITEAM_LOBBY_CONFIG[e] &&
              o.QUEUE_ID_TO_MULTITEAM_LOBBY_CONFIG[e].subteamCount
              ? o.QUEUE_ID_TO_MULTITEAM_LOBBY_CONFIG[e].subteamCount
              : 0;
          }),
          multiteamLobbySubteamPlayerSlotCount: s.Ember.computed(
            "queueId",
            function () {
              const e = this.get("queueId");
              return e &&
                o.QUEUE_ID_TO_MULTITEAM_LOBBY_CONFIG &&
                o.QUEUE_ID_TO_MULTITEAM_LOBBY_CONFIG[e] &&
                o.QUEUE_ID_TO_MULTITEAM_LOBBY_CONFIG[e].playerSlotCount
                ? o.QUEUE_ID_TO_MULTITEAM_LOBBY_CONFIG[e].playerSlotCount
                : 0;
            },
          ),
          shouldShowMultiteamLobby: s.Ember.computed(
            "multiteamLobbySubteamCount",
            "multiteamLobbySubteamPlayerSlotCount",
            function () {
              return (
                this.get("multiteamLobbySubteamCount") > 0 &&
                this.get("multiteamLobbySubteamPlayerSlotCount") > 0
              );
            },
          ),
          subteamDataToSummonerIdMap: s.Ember.computed(
            "lobby",
            "shouldShowMultiteamLobby",
            function () {
              const e = {},
                t = this.get("lobby"),
                n = this.get("shouldShowMultiteamLobby");
              return t && n
                ? (t.members.forEach((t) => {
                    if (!t.subteamIndex || !t.intraSubteamPosition) return;
                    const n = [t.subteamIndex, t.intraSubteamPosition];
                    e[n] = t.summonerId;
                  }),
                  e)
                : e;
            },
          ),
          currentQueue: s.Ember.computed(
            "queueId",
            "queues",
            "queues.[]",
            function () {
              const e = this.get("queueId"),
                t = this.get("queues");
              return e && Array.isArray(t) && Boolean(t.length)
                ? t.find((t) => t.id === e)
                : null;
            },
          ),
          createLobbyWithQueueId: function (e) {
            return (
              s.logger.trace(`Creating new lobby with queueId: ${e}`),
              this.get("api.lobby").post("v2/lobby", { queueId: e })
            );
          },
          isPlayerInLobby: function (e) {
            const t = this.get("currentPlayer");
            if (t && t.summonerId === e) return !0;
            return !!this.get("invites").find(
              (t) =>
                t.toSummonerId === e &&
                t.state !== o.INVITED_ROLES.KICKED &&
                t.state !== o.INVITED_ROLES.DECLINED,
            );
          },
          invitePlayer: function (e) {
            return this.isPlayerInLobby(e) || this.get("currentPartyIsFull")
              ? Promise.reject()
              : this.get("api.lobby").post("/v2/lobby/invitations", [
                  { toSummonerId: e },
                ]);
          },
          invitePlayers: function (e) {
            if (this.get("currentPartyIsFull")) return Promise.reject();
            const t = [];
            return (
              e.forEach((e) => {
                this.isPlayerInLobby(e) || t.push({ toSummonerId: e });
              }),
              0 === t.length
                ? Promise.reject()
                : this.get("api.lobby").post("/v2/lobby/invitations", t)
            );
          },
          transferLeadershipToPlayer: function (e) {
            return this._postMemberAction(e, "promote");
          },
          leaveParty: function () {
            return (
              this.cancelMatchmakingSearch(),
              this.leaveLobby().then(() => {
                this.get("eligibilityService").refreshEligibilities();
              })
            );
          },
          leaveLobby: function () {
            return this.get("api.lobby").delete("/v2/lobby");
          },
          removePlayerFromParty: function (e) {
            return this._postMemberAction(e, "kick");
          },
          removeSuggestedPlayer: function (e) {
            return this.get("api.suggestedPlayers").delete(
              `/v1/suggested-players/${e}`,
            );
          },
          sendInvitePrivilegeAction: function (e, t) {
            return this.get("api.lobby").post(`/v2/lobby/members/${e}/${t}`);
          },
          _postMemberAction: function (e, t) {
            if (!e)
              throw new Error(
                "Attempting to act on invalid lobby summoner id: " + e,
              );
            if (!t)
              throw new Error(
                "Attempting to post invalid lobby summoner action: " + t,
              );
            const n = `/v2/lobby/members/${e}/${t}`;
            return this.get("api.lobby").post(n);
          },
          setPositionPreferences: function (e) {
            return this.get("api.lobby").put(
              "/v1/lobby/members/localMember/position-preferences",
              e,
            );
          },
          setSubteamData: function (e, t) {
            return this.get("api.lobby").put("/v2/lobby/subteamData", {
              subteamIndex: e,
              intraSubteamPosition: t,
            });
          },
          shouldSecondaryButtonHideNonScarcePositions: function (e) {
            const t = this.get("shouldForceScarcePositionSelection"),
              n = this.isPositionAScarcePosition(e),
              i = this.get("scarcePositions") || [];
            return t && !n && i.length > 0;
          },
          shouldHideSecondaryPosition: function (e) {
            const t = this.get("currentTeamIsFull"),
              n = this.get("shouldForceScarcePositionSelection"),
              i = this.isPositionAScarcePosition(e);
            return t || (n && i) || e === a.POSITIONS.FILL;
          },
          isPositionAScarcePosition: function (e) {
            const t = this.get("scarcePositions") || [],
              n = t && t.includes(e);
            return e === a.POSITIONS.FILL || n;
          },
          canStartMatchmaking: s.Ember.computed.alias("lobby.canStartActivity"),
          isPremadeRestrictedFives: s.Ember.computed(
            "premadeSizeAllowed",
            "allowablePremadeSizes.[]",
            function () {
              const e = this.get("allowablePremadeSizes"),
                t = this.get("premadeSizeAllowed");
              return !(!e || 1 !== e.length || 5 !== e[0] || !1 !== t);
            },
          ),
          chatParticipantsObserver: s.Ember.computed(
            "chatConversationId",
            "chatParticipants.@each.{id,icon,availability}",
            function () {
              return this.get("chatParticipants");
            },
          ),
          startMatchmakingSearch: function () {
            return this.get("api.lobby").post("/v2/lobby/matchmaking/search");
          },
          cancelMatchmakingSearch: function () {
            return this.get("api.lobby").delete("/v2/lobby/matchmaking/search");
          },
          deleteNotification: function (e) {
            return e
              ? this.get("api.lobby").delete(`/v2/notifications/${e}`)
              : Promise.reject();
          },
          setPartyType: function (e) {
            return this.get("api.lobby").put("/v2/lobby/partyType", e);
          },
          isLobbyDisabled: function (e) {
            return !(
              !e ||
              !r.GAME_AVAILABILITY_TYPES[e] ||
              "disabled" !== r.GAME_AVAILABILITY_TYPES[e]
            );
          },
          queueAvailabilityWarningTooltip: s.Ember.computed(
            "queueId",
            "isCustom",
            "inLobby",
            "availability",
            "tra.ready",
            "tra.parties_queue_disbanded_tooltip",
            function () {
              if (!this.get("isCustom") && this.get("inLobby")) {
                const e = this.get("availability");
                if (this.isLobbyDisabled(e))
                  return this.get("tra.parties_queue_disbanded_tooltip");
              }
              return "";
            },
          ),
          hasQueueAvailabilityWarning: s.Ember.computed.gt(
            "queueAvailabilityWarningTooltip.length",
            0,
          ),
          hasSeenTFTEmeraldModal: s.Ember.computed(
            "tftPreferences",
            function () {
              const e = this.get("tftPreferences") || {};
              return (e.data && !!e.data[m]) || !1;
            },
          ),
          shouldShowTFTEmeraldModal: s.Ember.computed(
            "hasPlayedTFTRankedMode",
            "queueId",
            "hasSeenTFTEmeraldModal",
            "tftSetData",
            function () {
              const e = this.get("tftSetData");
              let t = !1;
              e && (t = "TFTSet10" === e.LCTFTModeData.mDefaultSet.SetCoreName);
              const n = [
                  l.TFT_RANKED_QUEUE_ID,
                  l.TFT_DOUBLE_UP_QUEUE_ID,
                ].includes(this.get("queueId")),
                i = this.get("hasSeenTFTEmeraldModal");
              if (t && n && !i) {
                if (this.get("hasPlayedTFTRankedMode")) return !0;
                this.markTFTEmeraldModalAsSeen();
              }
              return !1;
            },
          ),
          markTFTEmeraldModalAsSeen: function () {
            const e = {};
            (e[m] = !0),
              (0, s.dataBinding)(
                "/lol-settings",
                (0, s.getProvider)().getSocket(),
              ).patch("/v2/account/LCUPreferences/lol-tft", {
                data: e,
                schemaVersion: 1,
              }),
              this.set("hasSeenTFTEmeraldModal", !0);
          },
        });
      },
      (e) => {
        "use strict";
        e.exports = {
          POSITIONS: {
            MIDDLE: "MIDDLE",
            BOTTOM: "BOTTOM",
            JUNGLE: "JUNGLE",
            TOP: "TOP",
            UTILITY: "UTILITY",
            FILL: "FILL",
            NONE: "NONE",
            UNSELECTED: "UNSELECTED",
          },
          CHAMP_STATS_POSITION_UTILITY: "SUPPORT",
          MAP21_LANE_ROLE: "LANE",
          MAP21_MAPPINGS: {
            TOP: "JUNGLE",
            JUNGLE: "JUNGLE",
            MIDDLE: "BOTTOM",
            BOTTOM: "BOTTOM",
            UTILITY: "BOTTOM",
          },
          POSITION_ROLES: { PRIMARY: "PRIMARY", SECONDARY: "SECONDARY" },
        };
      },
      (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.GAME_AVAILABILITY_TYPES =
            t.CUSTOM_GAME_SPECTATOR_VALUES =
            t.CUSTOM_GAME_SPECTATOR_TYPES =
            t.CUSTOM_GAME_SPECTATOR_DELAY_OPTIONS =
            t.CUSTOM_GAME_NORMAL_MUTATORS =
            t.CUSTOM_GAME_MUTATOR_NAMES =
            t.CUSTOM_GAME_MAP_MUTATOR_OVERRIDES =
            t.CUSTOM_GAME_ERROR_CODES =
            t.CUSTOM_GAME_BOT_POSITIONS =
              void 0);
        t.CUSTOM_GAME_MUTATOR_NAMES = {
          GAME_CFG_DRAFT_TOURNAMENT: "tournament_draft",
          GAME_CFG_PICK_RANDOM: "random",
          GAME_CFG_DRAFT_STD: "draft",
          GAME_CFG_PICK_BLIND: "blind",
          GAME_CFG_TEAM_BUILDER_BLIND: "blind",
          GAME_CFG_TEAM_BUILDER_DRAFT: "draft",
          GAME_CFG_COUNTER_PICK: "counter",
          GAME_CFG_PICK_SIMUL_TD: "simultaneous",
          GAME_CFG_PICK_SIMUL: "simultaneous",
          GAME_CFG_BLIND_DUPE: "all_for_one",
          GAME_CFG_BLIND_DRAFT_ST: "blind_draft",
          NORMAL_TFT: "tft",
          RANKED_TFT_TURBO: "hyper_roll",
          GAME_MUTATOR_OVERRIDE_SHOWDOWN: "showdown",
        };
        t.CUSTOM_GAME_SPECTATOR_TYPES = {
          AllAllowed: "all",
          NotAllowed: "none",
          LobbyAllowed: "lobby",
          FriendsAllowed: "dropin",
        };
        t.CUSTOM_GAME_SPECTATOR_VALUES = {
          AllAllowed: "AllAllowed",
          NotAllowed: "NotAllowed",
          LobbyAllowed: "LobbyAllowed",
          FriendsAllowed: "FriendsAllowed",
        };
        t.CUSTOM_GAME_SPECTATOR_DELAY_OPTIONS = {
          AddDelay: "add_delay",
          NoDelay: "no_delay",
        };
        t.GAME_AVAILABILITY_TYPES = {
          Available: "available",
          PlatformDisabled: "disabled",
          DoesntMeetRequirements: "requirements",
          ClientUnsupported: "unsupported",
        };
        t.CUSTOM_GAME_ERROR_CODES = {
          401: "UserBannedException",
          403: "IncorrectPasswordException",
          404: "GameNotFoundException",
          409: "GameNameNotUniqueException",
          423: "GameflowLocked",
          430: "PlayerAlreadyInGameException",
          431: "TeamFullException",
          432: "GameFullException",
          433: "NotEnoughPlayersException",
          434: "TooManyPlayersException",
          435: "GameModeNotSupportedException",
          437: "InvalidCustomGameNameException",
          500: "UnknownException",
          530: "InvalidGameStateException",
          531: "StaleGameVersionException",
          532: "GameStartUnbalancedTeamsException",
          533: "GameNotDraftModeTurnException",
        };
        t.CUSTOM_GAME_NORMAL_MUTATORS = [1, 2, 4, 6, 100, 101];
        t.CUSTOM_GAME_MAP_MUTATOR_OVERRIDES = { 12: [7] };
        t.CUSTOM_GAME_BOT_POSITIONS = {
          TOP: "TOP",
          JUNGLE: "JUNGLE",
          MIDDLE: "MIDDLE",
          BOTTOM: "BOTTOM",
          UTILITY: "UTILITY",
        };
      },
      (e, t, n) => {
        "use strict";
        var i = n(1),
          s = n(59),
          o = n(60);
        const a = (0, i.emberDataBinding)({
          Ember: i.Ember,
          websocket: (0, i.getProvider)().getSocket(),
          logPrefix: "parties:service:matchmaking",
          basePaths: { matchmaking: "/lol-matchmaking", lobby: "/lol-lobby" },
          boundProperties: {
            matchmakingSearch: { api: "matchmaking", path: "/v1/search" },
            matchmakingSearchState: {
              api: "lobby",
              path: "/v2/lobby/matchmaking/search-state",
            },
            currentSummoner: "lol-summoner/v1/current-summoner",
          },
        });
        e.exports = i.Ember.Service.extend(a, {
          lobbiesService: i.Ember.inject.service("lobbies"),
          currentPartyMembers: i.Ember.computed.alias(
            "lobbiesService.currentPartyMembers",
          ),
          matchmakingErrors: i.Ember.computed.alias(
            "matchmakingSearchState.errors",
          ),
          matchmakingErrorState: i.Ember.computed.alias(
            "matchmakingSearchState.searchState",
          ),
          validSearchErrors: i.Ember.computed(
            "matchmakingErrors.@each.id",
            "currentPartyMembers.@each.summonerId",
            function () {
              const e = this.get("currentPartyMembers");
              if (!e) return i.Ember.A();
              const t = e.map((e) => e.summonerId) || [],
                n = this.get("matchmakingErrors");
              return i.Ember.A(
                i.lodash.filter(n, (e) => !!t.includes(e.penalizedSummonerId)),
              );
            },
          ),
          validSearchErrorIds: i.Ember.computed(
            "validSearchErrors",
            function () {
              return this.get("validSearchErrors").map((e) => e.get("id"));
            },
          ),
          longestSearchError: i.Ember.computed(
            "validSearchErrors",
            function () {
              const e = this.get("validSearchErrors"),
                t = i.lodash.orderBy(e, ["penaltyTimeRemaining"], ["desc"]);
              return !!t.length && t[0];
            },
          ),
          longestSearchErrorPenaltyTimeRemaining: i.Ember.computed.readOnly(
            "longestSearchError.penaltyTimeRemaining",
          ),
          longestSearchErrorPenaltyTimeRemainingFormatted: i.Ember.computed(
            "longestSearchErrorPenaltyTimeRemaining",
            function () {
              return (0, o.formatThreeLargestUnits)(
                this.get("longestSearchErrorPenaltyTimeRemaining"),
              );
            },
          ),
          searchState: i.Ember.computed.alias("matchmakingSearch.searchState"),
          isSearching: i.Ember.computed.equal(
            "searchState",
            s.MATCHMAKING_STATES.SEARCHING,
          ),
          isNotSearching: i.Ember.computed.not("isSearching"),
          isMatchFound: i.Ember.computed.equal(
            "searchState",
            s.MATCHMAKING_STATES.FOUND,
          ),
          isMatchNotFound: i.Ember.computed.not("isMatchFound"),
          isInQueue: i.Ember.computed.or("isSearching", "isMatchFound"),
          lowPriorityData: i.Ember.computed.readOnly(
            "matchmakingSearch.lowPriorityData",
          ),
          isLowPriorityQueue: i.Ember.computed.gt(
            "lowPriorityData.penaltyTime",
            0,
          ),
          isQueueDelay: i.Ember.computed.equal(
            "lowPriorityData.reason",
            s.LOW_PRIORITY_REASONS.QUEUE_DELAY,
          ),
          hasLowPriorityPenaltyTimeRemaining: i.Ember.computed.gt(
            "lowPriorityData.penaltyTimeRemaining",
            0,
          ),
          isSelfInLowPriorityQueue: i.Ember.computed(
            "lowPriorityData.penalizedSummonerIds",
            "currentSummoner.summonerId",
            function () {
              const e = this.get("lowPriorityData.penalizedSummonerIds");
              return (
                !(!e || e.length < 1) &&
                e.contains(this.get("currentSummoner.summonerId"))
              );
            },
          ),
        });
      },
      (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.SEARCH_ERROR_TYPES =
            t.MATCHMAKING_STATES =
            t.LOW_PRIORITY_REASONS =
              void 0);
        t.SEARCH_ERROR_TYPES = {
          QUEUE_DODGER: "QUEUE_DODGER",
          LEAVER_BUSTER_QUEUE_DELAY: "LEAVER_BUSTED",
          LEAVER_BUSTER_QUEUE_LOCKOUT: "LEAVER_BUSTER_QUEUE_LOCKOUT",
          LEAVER_BUSTER_TAINTED_WARNING: "LEAVER_BUSTER_TAINTED_WARNING",
          RANKED_MIN_LEVEL: "RANKED_MIN_LEVEL",
          PREREQUISITE_QUEUES_NOT_PLAYED: "PREREQUISITE_QUEUES_NOT_PLAYED",
        };
        t.MATCHMAKING_STATES = { SEARCHING: "Searching", FOUND: "Found" };
        t.LOW_PRIORITY_REASONS = {
          LEAVER_BUSTED: "LEAVER_BUSTED",
          QUEUE_DELAY: "QUEUE_DELAY",
        };
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        e.exports = {
          formatSeconds: function (e) {
            return this.formatMilliseconds(1e3 * e);
          },
          formatMilliseconds: function (e) {
            e = e || 0;
            const t = Math.floor(e / 60 / 60 / 1e3).toString();
            let n = Math.floor((e / 60 / 1e3) % 60).toString();
            const i = ("0" + Math.floor((e / 1e3) % 60).toString()).slice(-2);
            return (
              t > 0 && (n = ("0" + n).slice(-2)),
              (t > 0 ? t + ":" : "") + n + ":" + i
            );
          },
          formatThreeLargestUnits: function (e) {
            e = e || 0;
            const t = Math.floor(e / 60 / 60 / 24 / 7);
            let n = Math.floor((e / 60 / 60 / 24) % 7),
              s = Math.floor((e / 60 / 60) % 24);
            const o = Math.floor((e / 60) % 60),
              a = ("0" + (Math.floor(e) % 60).toString()).slice(-2);
            return t > 1
              ? n > 0
                ? s > 0
                  ? i.tra.formatString("queue_penalty_timer_wdh", {
                      weeks: t,
                      days: n,
                      hours: s,
                    })
                  : i.tra.formatString("queue_penalty_timer_wd", {
                      weeks: t,
                      days: n,
                    })
                : s > 0
                  ? i.tra.formatString("queue_penalty_timer_wh", {
                      weeks: t,
                      hours: s,
                    })
                  : i.tra.formatString("queue_penalty_timer_w", { weeks: t })
              : ((n += 7 * t),
                n > 2
                  ? s > 0
                    ? i.tra.formatString("queue_penalty_timer_dhms", {
                        days: n,
                        hours: s,
                        minutes: o,
                        seconds: a,
                      })
                    : i.tra.formatString("queue_penalty_timer_dms", {
                        days: n,
                        minutes: o,
                        seconds: a,
                      })
                  : ((s += 24 * n),
                    s > 0
                      ? i.tra.formatString("queue_penalty_timer_hms", {
                          hours: s,
                          minutes: o,
                          seconds: a,
                        })
                      : i.tra.formatString("queue_penalty_timer_ms", {
                          minutes: o,
                          seconds: a,
                        })));
          },
        };
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        const s = (0, i.emberDataBinding)({
          Ember: i.Ember,
          websocket: (0, i.getProvider)().getSocket(),
          logPrefix: "service:eternals",
          basePaths: { eternals: "/lol-statstones" },
          boundProperties: {
            enabledQueues: {
              api: "eternals",
              path: "/v1/statstones-enabled-queue-ids",
            },
          },
        });
        e.exports = i.Ember.Service.extend(s);
      },
      (e, t, n) => {
        "use strict";
        var i = n(1),
          s = l(n(5)),
          o = n(9),
          a = n(12),
          r = l(n(7));
        function l(e) {
          return e && e.__esModule ? e : { default: e };
        }
        const c = (0, i.emberDataBinding)({
          Ember: i.Ember,
          websocket: (0, i.getProvider)().getSocket(),
          logPrefix: "service:queue-eligibility",
          basePaths: {
            login: "/lol-login",
            clientconfig: "/lol-client-config",
          },
          boundProperties: {
            loginSession: { api: "login", path: "/v1/session" },
            tftNPEConfig: {
              api: "clientconfig",
              path: "/v3/client-config/lol.client_settings.tft.tft_npe",
            },
          },
        });
        e.exports = i.Ember.Service.extend(c, {
          lobbies: i.Ember.inject.service("lobbies"),
          summoner: i.Ember.inject.service("summoner"),
          playerNames: i.playerNames,
          queues: r.default,
          eligibilitiesEntity: s.default,
          loginConnected: i.Ember.computed.alias("loginSession.connected"),
          localSummonerId: i.Ember.computed.alias("summoner.localSummonerId"),
          loading: i.Ember.computed.readOnly("eligibilitiesEntity.loading"),
          eligibilities: i.Ember.computed.readOnly(
            "eligibilitiesEntity.eligibilities",
          ),
          currentPartyMembers: i.Ember.computed.alias(
            "lobbies.currentPartyMembers",
          ),
          isSolo: i.Ember.computed.alias("lobbies.isSolo"),
          isTFTNPEEnabled: i.Ember.computed.bool("tftNPEConfig.enabled"),
          shouldShowNPEQueue: i.Ember.computed.bool(
            "tftNPEConfig.shouldShowNPEQueue",
          ),
          partyHasNewTFTPlayerWithoutBypass: i.Ember.computed(
            "eligibilities",
            "currentPartyMembers",
            function () {
              const e = this.get("eligibilitiesEntity").getRestrictionForCode(
                o.TFT_NEW_PLAYER_RESTRICTION,
              );
              if (e) {
                const t = this.get("currentPartyMembers");
                for (const n of e.summonerIds) {
                  const e = t.find((e) => e.summonerId === n);
                  if (e && !e.tftNPEQueueBypass) return !0;
                }
              }
              return !1;
            },
          ),
          partyHasNewTFTPlayer: i.Ember.computed("eligibilities", function () {
            return !!this.get("eligibilitiesEntity").getRestrictionForCode(
              o.TFT_NEW_PLAYER_RESTRICTION,
            );
          }),
          newTFTPlayers: i.Ember.computed("eligibilities", function () {
            const e = this.get("eligibilitiesEntity").getRestrictionForCode(
              o.TFT_NEW_PLAYER_RESTRICTION,
            );
            return e ? e.summonerIds : [];
          }),
          isNewTFTPlayer: i.Ember.computed(
            "localSummonerId",
            "eligibilities",
            function () {
              const e = this.get("localSummonerId"),
                t = this.get("eligibilitiesEntity").getRestrictionForCode(
                  o.TFT_NEW_PLAYER_RESTRICTION,
                );
              return !!t && -1 !== t.summonerIds.indexOf(e);
            },
          ),
          hasRankedDivisionRestriction: i.Ember.computed(
            "eligibilitiesEntity.restrictions",
            "lobbies.hasLobbyRestrictions",
            function () {
              const e = this.get("eligibilitiesEntity.restrictions");
              if (e && e.length > 0) {
                return !!e.find(
                  (e) => "TeamDivisionRestriction" === e.restrictionCode,
                );
              }
              return !1;
            },
          ),
          refreshEligibilities: function () {
            return this.get("eligibilitiesEntity").fetchEligibilities();
          },
          isQueueAvailable: function (e) {
            return this.get("eligibilitiesEntity").isQueueAvailable(e);
          },
          generateDisabledReasonForParty: function (e) {
            return new Promise((t) => {
              (!e.restrictions || e.restrictions.length < 1) && t("");
              const n = [];
              let i = !1;
              this.applyRestrictionGroupRules(e.restrictions).forEach((t) => {
                (t.queueId = e.queueId),
                  o.TENCENT_MINOR_RESTRICTIONS.includes(t.restrictionCode)
                    ? i ||
                      ((i = !0), n.push(this.generateRestrictionForParty(t)))
                    : n.push(this.generateRestrictionForParty(t));
              }),
                Promise.all(n).then((e) => {
                  t(e);
                });
            });
          },
          groupMissingTokenRestrictions: function (e) {
            return this.get(
              "eligibilitiesEntity",
            ).groupMissingTokenRestrictions(e);
          },
          applyRestrictionGroupRules: function (e) {
            return this.get("eligibilitiesEntity").applyRestrictionGroupRules(
              e,
            );
          },
          generateRestrictionForParty: function (e) {
            return new Promise((t) => {
              const n = this.get("summoner");
              let s;
              if (e.summonerIds) {
                const t = this.get("lobbies.memberNameHash"),
                  i = [];
                e.summonerIds.forEach((e) => {
                  const s = t[e];
                  s
                    ? i.push(Promise.resolve({ gameName: s, displayName: s }))
                    : i.push(n.getSummoner(e));
                }),
                  (s = Promise.all(i));
              } else s = Promise.resolve([]);
              const o = this.get("queues").getQueueById(e.queueId);
              let a = Promise.resolve([]);
              return (
                o &&
                  o.isRanked &&
                  (a = i.LeagueTierNames.getTiersForQueue(o.type)),
                Promise.all([s, a]).then((n) => {
                  const i = n[0],
                    s = n[1];
                  t(this._generateMessageForParty(e, i, ", ", s));
                })
              );
            });
          },
          _generateMessageForParty: function (e, t, n = "<br>", i) {
            const r = e.restrictionCode || "QueueDisabled";
            let l = e.restrictionArgs || {};
            const c = [];
            t.forEach((e) => {
              this.get("playerNames.isUsingAlias")
                ? c.push(e.gameName)
                : c.push(e.displayName);
            }),
              (l.players = c.join(n));
            const m = this.get("queues"),
              u = m.getQueueById(e.queueId);
            let d = !1;
            if (
              "PlayerMinLevelRestriction" === e.restrictionCode ||
              "PlayerAvailableChampionRestriction" === e.restrictionCode ||
              "PrerequisiteQueuesNotPlayedRestriction" === e.restrictionCode ||
              "PlayerTimePlayedRestriction" === e.restrictionCode ||
              "PlayerMinorRestriction" === e.restrictionCode ||
              e.restrictionCode === o.TFT_NEW_PLAYER_RESTRICTION ||
              e.restrictionCode === o.LOL_NEW_PLAYER_RESTRICTION
            ) {
              const t = m.getMapModeInfo(u.mapId, u.gameMode);
              if (
                "PlayerTimePlayedRestriction" === e.restrictionCode ||
                "PlayerMinorRestriction" === e.restrictionCode
              )
                d = `game_select_queue_restriction_party_${r.toLowerCase()}`;
              else if (e.restrictionCode === o.TFT_NEW_PLAYER_RESTRICTION) {
                e.summonerIds.length > 1 ||
                !e.summonerIds.includes(this.get("localSummonerId"))
                  ? ((d =
                      "game_select_queue_restriction_party_tftnewplayerrestrictionveteran"),
                    (l = { ...l, gameMode: t.gameModeShortName }))
                  : ((d =
                      "game_select_queue_restriction_party_tftnewplayerrestriction"),
                    (l = { gamesRemaining: l.gamesWonRemaining }));
              } else if (e.restrictionCode === o.LOL_NEW_PLAYER_RESTRICTION) {
                e.summonerIds.length > 1 ||
                !e.summonerIds.includes(this.get("localSummonerId"))
                  ? (d =
                      "game_select_queue_restriction_party_lolnewplayerrestrictionveteran")
                  : ((d =
                      "game_select_queue_restriction_party_lolnewplayerrestriction"),
                    (l = {
                      normalLolGamesRemaining: l.normalLolGamesPlayedRemaining,
                    }));
              } else if (
                "PrerequisiteQueuesNotPlayedRestriction" !==
                  e.restrictionCode &&
                t &&
                t.isRGM
              )
                d = `game_select_queue_restriction_${r.toLowerCase()}_featured`;
              else {
                const t = m.getQueueTypeForQueue(e.queueId),
                  n = m.getPickTypeForQueue(e.queueId);
                d = `game_select_queue_restriction_${r.toLowerCase()}_${t}_${n}`;
              }
              this.get("tra").exists(d) ||
                (d = `game_select_queue_restriction_${r.toLowerCase()}_generic`);
            } else if ("QueueEntryNotEntitledRestriction" === e.restrictionCode)
              d = `game_select_queue_restriction_${r.toLowerCase()}_${e.queueId}`;
            else if ("MissingToken" === e.restrictionCode)
              d = e.restrictionArgs.errorCodes.includes("3L")
                ? "game_select_queue_restriction_leagues_missingtoken"
                : `game_select_queue_restriction_${r.toLowerCase()}`;
            else if ("TeamMaxSizeRestriction" === e.restrictionCode)
              d = "parties_premade_size_restriction";
            else if ("PlayerRankSoloOnlyRestriction" === e.restrictionCode) {
              const t = s.default.getLocInfoForPlayerRankSoloOnlyRestriction(
                e,
                i,
              );
              (d = t.key), (l = t.args);
            } else d = `game_select_queue_restriction_party_${r.toLowerCase()}`;
            if (u && u.gameMode === a.CHERRY_GAME_MODE) {
              const t = 8100;
              if ("TeamDivisionRestriction" === e.restrictionCode) {
                (d =
                  "game_select_queue_restriction_party_cherrygladiatorratingdelta"),
                  (l = { maxRatingDelta: 1e3, ratingRestrictionThreshold: t });
              } else
                "TeamMaxSizeRestriction" === e.restrictionCode &&
                  ((d =
                    "game_select_queue_restriction_party_cherrygladiatorpartysize"),
                  (l = { ratingRestrictionThreshold: t }));
            }
            return this.get("tra.formatString")(d, l);
          },
          _arrayLength: function (e) {
            return (e && e.length) || 0;
          },
          getTeamQueueEligibilities: function (e) {
            const t = this.get("eligibilities"),
              n = this._arrayLength(e);
            if (0 === n || !t) return i.Ember.A([]);
            const s = [];
            for (let i = 0; i < n; i++) {
              const n = e[0];
              if (t[n] && !t[n].eligible) {
                const e = [],
                  i = this._arrayLength(t[n].restrictions);
                for (let s = 0; s < i; s++) {
                  const i = t[n].restrictions[s];
                  this.get("eligibilitiesEntity").isTeamRestriction(i) &&
                    e.push(i);
                }
                e.length > 0 && ((t[n].restrictions = e), s.push(t[n]));
              }
            }
            return i.Ember.A(s);
          },
          getSoloEligibilities: function (e) {
            const t = [];
            if (e) {
              let n = this.get("eligibilities");
              if (n && n[e] && !n[e].eligible) {
                n = n[e];
                const i = [],
                  s = this._arrayLength(n.restrictions);
                for (let e = 0; e < s; e++) {
                  const t = n.restrictions[e];
                  this.get("eligibilitiesEntity").isTeamRestriction(t) ||
                    i.push(t);
                }
                i.length > 0 && ((n.restrictions = i), t.push(n));
              }
            }
            return i.Ember.A(t);
          },
          restrictionsForQueue: function (e) {
            return this.get("eligibilitiesEntity").restrictionsForQueue(e);
          },
          getSoloIneligibleQueues: function (e) {
            const t = i.Ember.A();
            return (
              e &&
                e.forEach((e) => {
                  const n = this.getSoloEligibilities(e)[0];
                  n && !n.eligible && t.push(n);
                }),
              t
            );
          },
          isTutorialRestricted: function () {
            const e = this.get("eligibilities");
            if (e)
              for (let t = 0; t < o.TUTORIAL_QUEUE_IDS.length; t++) {
                const n = e[o.TUTORIAL_QUEUE_IDS[t]];
                if (
                  n &&
                  this.get("eligibilitiesEntity").hasMinorRestriction(
                    n.restrictions,
                  )
                )
                  return !0;
              }
            return !1;
          },
          getIneligibleQueues: function (e) {
            const t = i.Ember.A(),
              n = this.get("eligibilities");
            return (
              e &&
                n &&
                e.forEach((e) => {
                  const i = n[e];
                  i && !i.eligible && t.push(i);
                }),
              t
            );
          },
          getQueueEligibilities: function (e) {
            const t = i.Ember.A(),
              n = this.get("eligibilities");
            return r.default && 0 !== r.default.length && n
              ? (e &&
                  n &&
                  e.forEach((e) => {
                    const i = n[e];
                    i && t.push(i);
                  }),
                t)
              : i.Ember.A();
          },
          isSummonerRestricted: function (e, t) {
            if (!e) return !0;
            if (e.eligible) return !1;
            const n = e.restrictions || [],
              i = n.length;
            for (let e = 0; e < i; e++) {
              if (-1 !== n[e].summonerIds.indexOf(t)) return !0;
            }
            return !1;
          },
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        const s = (0, i.emberDataBinding)({
          Ember: i.Ember,
          websocket: (0, i.getProvider)().getSocket(),
          logPrefix: "service:gameflow",
          basePaths: { gameflow: "/lol-gameflow", lobby: "/lol-lobby" },
          boundProperties: {
            session: { api: "gameflow", path: "/v1/session" },
          },
        });
        e.exports = i.Ember.Service.extend(s, {
          phase: i.Ember.computed.alias("session.phase"),
          isLobby: i.Ember.computed.equal("phase", "Lobby"),
          isMatchmaking: i.Ember.computed.equal("phase", "Matchmaking"),
          isReadyCheck: i.Ember.computed.equal("phase", "ReadyCheck"),
          isChampSelect: i.Ember.computed.equal("phase", "ChampSelect"),
          isPhasePostGame: i.Ember.computed("phase", function () {
            const e = this.get("phase");
            return (
              "WaitingForStats" === e ||
              "PreEndOfGame" === e ||
              "EndOfGame" === e
            );
          }),
          currentQueueId: i.Ember.computed.alias("session.gameData.queue.id"),
          startBasicTutorial: function () {
            return this.get("api.lobby")
              .delete("/v2/lobby")
              .catch(() => {})
              .then(() =>
                this.get("api.gameflow").post("v1/basic-tutorial/start"),
              );
          },
          startBattleTraining: function () {
            return this.get("api.lobby")
              .delete("/v2/lobby")
              .catch(() => {})
              .then(() =>
                this.get("api.gameflow").post("v1/battle-training/start"),
              );
          },
          startTutorialFlow: function () {
            (0, i.getProvider)()
              .getOptional("rcp-fe-lol-new-player-experience")
              .then(
                (e) => e.show(),
                (e) => i.logger.error("Provider getOptional failure", e),
              );
          },
        });
      },
      (e, t, n) => {
        "use strict";
        var i,
          s = n(1),
          o = (i = n(10)) && i.__esModule ? i : { default: i };
        const { Promise: a } = s.bluebird,
          r = (0, s.emberDataBinding)({
            Ember: s.Ember,
            websocket: (0, s.getProvider)().getSocket(),
            logPrefix: "service:parties:settings",
            basePaths: { settings: "/lol-settings", party: "/lol-lobby" },
            boundProperties: {
              localParties: { api: "settings", path: "/v1/local/lol-parties" },
              accountParties: {
                api: "settings",
                path: "/v1/account/lol-parties",
              },
              tft: {
                api: "settings",
                path: "/v2/account/LCUPreferences/lol-tft",
              },
            },
          });
        e.exports = s.Ember.Service.extend(r, {
          platformConfigSingleton: o.default,
          uxSettings: null,
          _bannerAnimationsEnabled: !0,
          bannerAnimationsEnabled: s.Ember.computed.and(
            "largeAreaAnimationsEnabled",
            "_bannerAnimationsEnabled",
          ),
          largeAreaAnimationsEnabled: s.Ember.computed(
            "uxSettings.largeAreaAnimationsEnabled",
            "platformConfigSingleton.potatoModeForced",
            function () {
              return (
                !this.get("platformConfigSingleton.potatoModeForced") &&
                this.get("uxSettings.largeAreaAnimationsEnabled")
              );
            },
          ),
          animationsEnabled: s.Ember.computed.alias(
            "largeAreaAnimationsEnabled",
          ),
          init: function () {
            this._super(),
              this.set(
                "uxSettingsListener",
                this.uxSettingsObserver.bind(this),
              ),
              s.UXSettings.addObserver(this.get("uxSettingsListener")),
              this.getTFTNewPlayerData();
          },
          willDestroy: function () {
            this._super(),
              s.UXSettings.removeObserver(this.get("uxSettingsListener"));
          },
          permanentHideAutofillModal: s.Ember.computed(
            "localParties.permanentHideAutofillModal",
            {
              get() {
                return !!this.get(
                  "localParties.data.permanentHideAutofillModal",
                );
              },
              set(e, t) {
                return this.get("api.settings")
                  .patch("/v1/local/lol-parties", {
                    data: { permanentHideAutofillModal: t },
                    schemaVersion: 1,
                  })
                  .then(() => t);
              },
            },
          ),
          shouldHideAutofillModal: function () {
            return this.sessionPromise().then((e) =>
              e
                ? a.resolve(!0)
                : this.permanentPromise().then((e) =>
                    e && e.data && e.data.permanentHideAutofillModal
                      ? a.resolve(!0)
                      : a.resolve(!1),
                  ),
            );
          },
          sessionHideAutofillModal: s.Ember.computed({
            get() {
              return this.sessionPromise();
            },
            set() {
              return this.get("api.party").put("/v1/autofill-displayed");
            },
          }),
          permanentPromise: function () {
            return this.get("api.settings").get("/v1/local/lol-parties");
          },
          sessionPromise: function () {
            return this.get("api.party").get("/v1/autofill-displayed");
          },
          hideAutofillModal: s.Ember.computed.or(
            "permanentHideAutofillModal",
            "sessionHideAutofillModal",
          ),
          uxSettingsObserver: function (e) {
            this.set("uxSettings", e);
          },
          hasSeenOpenPartyFirstExperience: s.Ember.computed(
            "accountParties.data.hasSeenOpenPartyFirstExperience",
            {
              get() {
                return !!this.get(
                  "accountParties.data.hasSeenOpenPartyFirstExperience",
                );
              },
              set(e, t) {
                return this.get("api.settings")
                  .patch("/v1/account/lol-parties", {
                    data: { hasSeenOpenPartyFirstExperience: t },
                    schemaVersion: 1,
                  })
                  .then(() => t);
              },
            },
          ),
          iconOverride: s.Ember.computed("tft.data.iconOverride", {
            get() {
              return this.get("tft.data.iconOverride");
            },
            set(e, t) {
              return this.get("api.settings")
                .patch("/v2/account/LCUPreferences/lol-tft", {
                  data: { iconOverride: t },
                  schemaVersion: 1,
                })
                .then(() => t);
            },
          }),
          getTFTNewPlayerData: function () {
            this.get("tft.data.tftGamesPlayed") &&
              this.sendNewPlayerDataToParties(
                this.get("tft.data.tftGamesPlayed"),
                this.get("tft.data.tftGamesWon"),
              );
          },
          sendNewPlayerDataToParties: function (e = 0, t = 0) {
            this.get("api.party").post("/v1/tft/newPlayer", {
              tftGamesPlayed: e,
              tftGamesWon: t,
            });
          },
        });
      },
      (e, t, n) => {
        "use strict";
        var i,
          s = n(1),
          o = n(57),
          a = (i = n(10)) && i.__esModule ? i : { default: i },
          r = n(9);
        const l = (0, s.emberDataBinding)({
          Ember: s.Ember,
          websocket: (0, s.getProvider)().getSocket(),
          logPrefix: "service:custom-games",
          basePaths: {
            gameQueues: "/lol-game-queues",
            lobby: "/lol-lobby",
            summoner: "/lol-summoner",
            suggestedPlayers: "/lol-suggested-players",
            chat: "/lol-chat",
            platformConfig: "/lol-platform-config",
            sanitizer: "/sanitizer",
            gameData: "/lol-game-data",
            gameFlow: "/lol-gameflow",
            spectator: "/lol-spectator",
            perks: "/lol-perks",
          },
          boundProperties: {
            queues: { api: "gameQueues", path: "/v1/custom" },
            nonDefaultQueues: {
              api: "gameQueues",
              path: "/v1/custom-non-default",
            },
            lobby: { api: "lobby", path: "/v2/lobby" },
            customBotsEnabled: {
              api: "lobby",
              path: "/v2/lobby/custom/bots-enabled",
            },
            customAvailableBots: {
              api: "lobby",
              path: "/v2/lobby/custom/available-bots",
            },
            currentSummoner: { api: "summoner", path: "/v1/current-summoner" },
            chatParticipants: {
              api: "chat",
              path: "/v1/conversations/{{chatConversationId}}/participants",
            },
            clientSystemStatesJMX: {
              api: "platformConfig",
              path: "/v1/namespaces/ClientSystemStates",
            },
            riotscriptInCustoms: {
              api: "platformConfig",
              path: "/v1/namespaces/BotConfigurations/RiotscriptInCustoms",
            },
            gameflowSession: { api: "gameFlow", path: "/v1/session" },
            championSummary: {
              api: "gameData",
              path: "/assets/v1/champion-summary.json",
            },
            spectatorV3Config: {
              api: "spectator",
              path: "/v1/spectate/config",
            },
            recommendedPositions: {
              api: "perks",
              path: "/v1/recommended-champion-positions",
            },
          },
        });
        e.exports = s.Ember.Service.extend(l, {
          spectatorV3Enabled: s.Ember.computed.alias(
            "spectatorV3Config.isEnabled",
          ),
          spectatorV3DelayConfigurable: s.Ember.computed.alias(
            "spectatorV3Config.isSpectatorDelayConfigurable",
          ),
          nameError: null,
          isSwitchingTeamsOrSpectating: !1,
          preventTeamChanges: !1,
          platformConfigSingleton: a.default,
          playerNames: s.playerNames,
          playerInputs: s.Ember.Object.create({
            name: "",
            subcategoryIndex: 0,
            mutatorId: 1,
            numPlayersPerTeam: 5,
            gameServerRegion: "",
            password: "",
            spectatorType: "AllAllowed",
            spectatorDelay: "AddDelay",
          }),
          availability: s.Ember.computed.alias("queues.queueAvailability"),
          available: s.Ember.computed.equal("availability", "Available"),
          shownCustomSubcategories: s.Ember.computed.alias(
            "queues.subcategories",
          ),
          subcategories: s.Ember.computed.union(
            "queues.subcategories",
            "nonDefaultQueues.subcategories",
          ),
          spectatorTypes: s.Ember.computed.alias("queues.spectatorPolicies"),
          customSpectatorSlotLimit: s.Ember.computed.alias(
            "queues.spectatorSlotLimit",
          ),
          lobbySpectatorSlotLimit: s.Ember.computed(
            "lobby.gameConfig.maxLobbySize",
            "lobby.gameConfig.maxTeamSize",
            function () {
              return (
                this.get("lobby.gameConfig.maxLobbySize") -
                this.get("lobby.gameConfig.maxTeamSize")
              );
            },
          ),
          spectatorSlotLimit: s.Ember.computed(
            "customSpectatorSlotLimit",
            "lobbySpectatorSlotLimit",
            "isCustom",
            function () {
              return this.get("isCustom")
                ? this.get("customSpectatorSlotLimit")
                : this.get("lobbySpectatorSlotLimit");
            },
          ),
          gameName: s.Ember.computed.alias("lobby.gameConfig.customLobbyName"),
          teamSize: s.Ember.computed.alias("lobby.gameConfig.maxTeamSize"),
          isCustomUI: s.Ember.computed.or("isCustom", "isSpectatorCustom"),
          isSpectatorCustom: s.Ember.computed(
            "lobby.gameConfig.customSpectatorPolicy",
            function () {
              const e = this.get("lobby.gameConfig.customSpectatorPolicy");
              return e && e !== o.CUSTOM_GAME_SPECTATOR_VALUES.NotAllowed;
            },
          ),
          isCustom: s.Ember.computed.alias("lobby.gameConfig.isCustom"),
          mutatorName: s.Ember.computed.alias(
            "lobby.gameConfig.customMutatorName",
          ),
          spectatorPolicy: s.Ember.computed.alias(
            "lobby.gameConfig.customSpectatorPolicy",
          ),
          rewardsDisabledReasons: s.Ember.computed.alias(
            "lobby.gameConfig.customRewardsDisabledReasons",
          ),
          isLobbyFull: s.Ember.computed.alias("lobby.gameConfig.isLobbyFull"),
          isTFT: s.Ember.computed.equal(
            "lobby.gameConfig.gameMode",
            r.GAME_MODES.TFT,
          ),
          team100: s.Ember.computed.alias("lobby.gameConfig.customTeam100"),
          team200: s.Ember.computed.alias("lobby.gameConfig.customTeam200"),
          customBotsDisabled: s.Ember.computed.not("customBotsEnabled"),
          minPlayers: s.Ember.computed.alias(
            "clientSystemStatesJMX.minNumPlayersForPracticeGame",
          ),
          aggressiveScanning: s.Ember.computed.alias(
            "platformConfigSingleton.aggressiveScanning",
          ),
          currentPlayer: s.Ember.computed.alias("lobby.localMember"),
          currentPlayerIsSpectator: s.Ember.computed.equal(
            "currentPlayersTeam",
            "spectator",
          ),
          localSummonerName: s.Ember.computed.alias(
            "currentSummoner.displayName",
          ),
          localGameName: s.Ember.computed.alias("currentSummoner.gameName"),
          localSummonerLevel: s.Ember.computed.alias(
            "currentSummoner.summonerLevel",
          ),
          haveNameError: s.Ember.computed.notEmpty("nameError"),
          gameMapMinPlayers: s.Ember.computed(
            "clientSystemStatesJMX.gameMapEnabledDTOList",
            function () {
              const e = this.get("clientSystemStatesJMX.gameMapEnabledDTOList");
              return e ? s.Ember.A(e) : s.Ember.A([]);
            },
          ),
          selectedSubcategory: s.Ember.computed(
            "playerInputs.subcategoryIndex",
            "subcategories.[]",
            function () {
              const e = this.get("subcategories");
              if (!e || e.length < 1) return null;
              return e[this.get("playerInputs.subcategoryIndex")];
            },
          ),
          subcategoriesObserver: s.Ember.computed(
            "subcategories.@each.queueAvailability",
            function () {
              const e = this.get("subcategories");
              if (!e || e.length < 1) return;
              const t = e[this.get("playerInputs.subcategoryIndex")];
              (t &&
                "available" ===
                  o.GAME_AVAILABILITY_TYPES[t.get("queueAvailability")]) ||
                this.resetSelectedSubcategory();
            },
          ),
          gameServerRegions: s.Ember.computed.alias("queues.gameServerRegions"),
          updatePlayerInputServerRegionObserver: s.Ember.on(
            "init",
            s.Ember.observer("queues.gameServerRegions.[]", function () {
              s.Ember.run.once(this, () => {
                this._updatePlayerSelectedRegion(
                  this.get("queues.gameServerRegions"),
                );
              });
            }),
          ),
          spectators: s.Ember.computed(
            "lobby.gameConfig.customSpectators.[]",
            "lobby.gameConfig.customSpectators.@each.summonerId",
            function () {
              return (
                this.get("lobby.gameConfig.customSpectators") || s.Ember.A()
              );
            },
          ),
          currentNumPlayers: s.Ember.computed(
            "team100.[]",
            "team200.[]",
            function () {
              return (
                this.get("team100").filterBy("isBot", !1).length +
                this.get("team200").filterBy("isBot", !1).length
              );
            },
          ),
          currentPlayersTeam: s.Ember.computed(
            "currentPlayer",
            "team100",
            "team100.[]",
            "team100.@each.summonerId",
            "team200",
            "team200.[]",
            "team200.@each.summonerId",
            "spectators",
            function () {
              const e = this.get("currentPlayer"),
                t = this.get("team100"),
                n = this.get("team200"),
                i = this.get("spectators");
              return e && e.summonerId
                ? this._isOnTeam(e, t)
                  ? 1
                  : this._isOnTeam(e, n)
                    ? 2
                    : this._isOnTeam(e, i)
                      ? "spectator"
                      : 0
                : 0;
            },
          ),
          gameflowPhaseObserver: s.Ember.computed(
            "gameflowSession.phase",
            function () {
              "Lobby" === this.get("gameflowSession.phase") &&
                this.set("preventTeamChanges", !1);
            },
          ),
          availableBots: s.Ember.computed("customAvailableBots", function () {
            const e = this.get("customAvailableBots"),
              t = e ? s.Ember.A(e) : s.Ember.A();
            return (
              t.forEach((e) => {
                e.botDifficulties = e.botDifficulties
                  ? s.Ember.A(e.botDifficulties)
                  : s.Ember.A();
              }),
              t
            );
          }),
          availableBotDetails: s.Ember.computed(
            "availableBots",
            "availableBots.[]",
            "championSummary",
            "recommendedPositions",
            function () {
              const e = this.get("availableBots"),
                t = s.Ember.A(),
                n = this.get("championSummary"),
                i = this.get("recommendedPositions");
              if (n)
                return (
                  e.forEach((e) => {
                    let o = "";
                    const a = n.findBy("id", e.id);
                    a && a.squarePortraitPath && (o = a.squarePortraitPath);
                    const r = {
                      id: e.id,
                      name: e.name,
                      botDifficulties: s.Ember.A(),
                      selected: null,
                      botIconUrl: o,
                      recommendedPositions: i[e.id].recommendedPositions || [],
                    };
                    e.botDifficulties &&
                      e.botDifficulties.forEach((e) => {
                        const t = this.getDifficultyDisplayName(e);
                        r.botDifficulties.pushObject({
                          difficulty: e,
                          difficultyDisplayName: t,
                        });
                      }),
                      t.pushObject(r);
                  }),
                  t
                );
            },
          ),
          defaultGameName: s.Ember.computed(
            "tra.ready",
            "localSummonerName",
            "localGameName",
            function () {
              const e = this.get("localGameName"),
                t = this.get("localSummonerName"),
                n = this.get("playerNames").isUsingAlias ? e : t;
              if (!n) return "";
              const i = this.get("tra.formatString")(
                "custom_game_setup_name_default",
                { summonerName: n },
              );
              return this.set("playerInputs.name", i), i;
            },
          ),
          gameServerRegionOptions: s.Ember.computed(
            "playerInputs.gameServerRegion",
            "gameServerRegions",
            "gameServerRegions.[]",
            function () {
              const e = this.get("gameServerRegions");
              if (!e || !e.length) return s.Ember.A([]);
              const t = this.get("playerInputs.gameServerRegion"),
                n = [];
              for (let i = 0; i < e.length; i++) {
                const s = e[i] === t;
                n.push({ value: e[i], isSelected: s });
              }
              return s.Ember.A(n);
            },
          ),
          getRewardsDisabledReasons: function () {
            const e = this.get("rewardsDisabledReasons");
            return e && e instanceof Array
              ? e
              : this.areTeamsImbalanced()
                ? ["UNBALANCED_TEAMS"]
                : [];
          },
          _isOnTeam: function (e, t) {
            if (e && t && t.length) {
              if (t.findBy("summonerId", e.summonerId)) return !0;
            }
            return !1;
          },
          getDifficultyDisplayName: function (e) {
            return this.get(
              `tra.custom_game_bot_skill_level_${e.toLowerCase()}`,
            );
          },
          areTeamsImbalanced: function () {
            return this.get("team100.length") !== this.get("team200.length");
          },
          getSubCategoryIndex: function (e, t) {
            const n = this.get("subcategories");
            for (let i = 0; i < n.length; i++) {
              const s = n[i];
              if (s.get("mapId") === e && s.get("gameMode") === t) return i;
            }
            return -1;
          },
          resetSelectedSubcategory: function () {
            const e = this.get("subcategories");
            for (let t = 0; t < e.length; t++) {
              const n = e[t].get("queueAvailability");
              if ("available" === o.GAME_AVAILABILITY_TYPES[n]) {
                this.selectSubcategory(t);
                break;
              }
            }
          },
          selectSubcategoryByMapMode: function (e, t) {
            const n = this.getSubCategoryIndex(e, t);
            n >= 0 && this.selectSubcategory(n);
          },
          subCategoryExists: function (e, t) {
            return this.getSubCategoryIndex(e, t) >= 0;
          },
          selectSubcategory: function (e) {
            const t = this.get("subcategories"),
              n = t[e];
            if (!n) return !1;
            const i = t[this.get("playerInputs.subcategoryIndex")],
              s = this.get("playerInputs.numPlayersPerTeam"),
              o = i.get("numPlayersPerTeam"),
              a = n.get("numPlayersPerTeam");
            (s === o || s > a) && this.set("playerInputs.numPlayersPerTeam", a);
            const r = n.get("mutators"),
              l = this.get("playerInputs.mutatorId");
            if (r.length > 0 && !r.findBy("id", l)) {
              const e = r[0].get("id");
              this.set("playerInputs.mutatorId", e),
                this.set("playerInputs.queueId", this.getQueueId(e));
            }
            return this.set("playerInputs.subcategoryIndex", e), !0;
          },
          getQueueId: function (e) {
            return r.TFT_CUSTOM_QUEUE_IDS[e] || r.INVALID_QUEUE_ID;
          },
          generateCustomGamePayload: function () {
            const e = this.get("playerInputs.subcategoryIndex"),
              t = this.get("subcategories");
            if (!t[e])
              return (
                s.logger.error(
                  `Tried to create custom game with invalid subcategory index: ${e}`,
                ),
                !1
              );
            const n = t[e];
            return this._gameIsPracticeTool(n.get("gameMode"))
              ? this._generatePracticeToolPayload(n)
              : this._generateCustomGamePayload(n);
          },
          _generateCustomGamePayload: function (e) {
            let t = this.get("playerInputs.password").trim();
            "" === t && (t = null);
            const n = this.get("playerInputs.queueId") || r.INVALID_QUEUE_ID;
            return {
              customGameLobby: {
                configuration: {
                  gameMode: e.get("gameMode"),
                  gameMutator: "",
                  gameServerRegion: this.get("playerInputs.gameServerRegion"),
                  mapId: e.get("mapId"),
                  mutators: { id: this.get("playerInputs.mutatorId") },
                  spectatorPolicy: this.get("playerInputs.spectatorType"),
                  spectatorDelayEnabled:
                    "AddDelay" === this.get("playerInputs.spectatorDelay"),
                  teamSize: this.get("playerInputs.numPlayersPerTeam"),
                },
                lobbyName:
                  this.get("playerInputs.name") || this.get("defaultGameName"),
                lobbyPassword: t,
              },
              isCustom: n === r.INVALID_QUEUE_ID,
              queueId: n,
            };
          },
          _generatePracticeToolPayload: function () {
            return {
              customGameLobby: {
                configuration: {
                  gameMode: "PRACTICETOOL",
                  gameMutator: "",
                  gameServerRegion: this.get("playerInputs.gameServerRegion"),
                  mapId: 11,
                  mutators: { id: 1 },
                  spectatorPolicy: "AllAllowed",
                  teamSize: 1,
                },
                lobbyName: this.get("defaultGameName"),
                lobbyPassword: null,
              },
              isCustom: !0,
            };
          },
          _gameIsPracticeTool: function (e) {
            return "PRACTICETOOL" === e;
          },
          changeQueueToCustom: function () {
            return new Promise((e, t) => {
              if (this.get("nameError")) return t("nameError");
              const n = this.generateCustomGamePayload();
              if (!1 === n) return t();
              const i = "v2/lobby";
              s.logger.trace(
                `Creating custom-game using /lol-lobby/${i} endpoint: ${JSON.stringify(n)}`,
              ),
                this.get("api.lobby")
                  .post(i, n)
                  .then(
                    () => {
                      e();
                    },
                    (e) => {
                      const n = this.getErrorTypeFromCreateResponse(e);
                      t(n);
                    },
                  );
            });
          },
          getErrorTypeFromCreateResponse: function (e) {
            let t = 500;
            e && e.status && (t = e.status);
            const n = o.CUSTOM_GAME_ERROR_CODES[t]
              ? o.CUSTOM_GAME_ERROR_CODES[t]
              : "UnknownException";
            return (
              s.logger.error("Creating custom game received error:", {
                errorType: n,
                statusCode: t,
                response: e,
              }),
              "GameNameNotUniqueException" === n &&
                this.set("nameError", "duplicate"),
              "InvalidCustomGameNameException" === n &&
                this.set("nameError", "invalid"),
              n
            );
          },
          enterChampSelect: function () {
            this.set("preventTeamChanges", !0);
            return this.get("api.lobby").post(
              "/v1/lobby/custom/start-champ-select",
            );
          },
          teamToString: function (e) {
            let t = "";
            return (
              1 === e || "100" === e
                ? (t = "one")
                : (2 !== e && "200" !== e) || (t = "two"),
              t
            );
          },
          teamToStringQueue: function (e) {
            switch (e) {
              case 1:
              case "100":
                return "TEAM1";
              case 2:
              case "200":
                return "TEAM2";
              default:
                return "";
            }
          },
          teamToStringId: function (e) {
            let t = "";
            return (
              1 === e || "one" === e
                ? (t = "100")
                : (2 !== e && "two" !== e) || (t = "200"),
              t
            );
          },
          switchTeams: function (e) {
            this.set("isSwitchingTeamsOrSpectating", !0);
            const t = this.get("isCustom"),
              n = t ? this.teamToString(e) : this.teamToStringQueue(e);
            if (
              (s.logger.trace(`Current player switching to team ${n}`),
              0 !== n.length)
            ) {
              const e = t
                ? `/v1/lobby/custom/switch-teams?team=${n}`
                : `/v2/lobby/team/${n.toUpperCase()}`;
              return this.get("api.lobby")
                .post(e)
                .then(() => {
                  this.set("isSwitchingTeamsOrSpectating", !1);
                })
                .catch((e) => {
                  e.text &&
                    s.logger.error(
                      "an error has occurred when switching teams",
                      JSON.parse(e.text),
                    ),
                    this.set("isSwitchingTeamsOrSpectating", !1);
                });
            }
          },
          joinSpectators: function () {
            this.set("isSwitchingTeamsOrSpectating", !0),
              s.logger.trace("Current player switching to spectator");
            const e = this.get("isCustom")
              ? "/v1/lobby/custom/switch-teams?team=spectator"
              : "/v2/lobby/team/SPECTATOR";
            return this.get("api.lobby")
              .post(e)
              .then(() => {
                this.set("isSwitchingTeamsOrSpectating", !1);
              })
              .catch((e) => {
                e.text &&
                  s.logger.error(
                    "an error has occurred when moving to spectator",
                    JSON.parse(e.text),
                  ),
                  this.set("isSwitchingTeamsOrSpectating", !1);
              });
          },
          findMinPlayersForMap: function (e) {
            let t = 1;
            const n = this.get("gameMapMinPlayers");
            if (e && n && n.length > 0) {
              const i = n.findBy("gameMapId", e);
              i && i.minPlayers && (t = i.minPlayers);
            }
            return t;
          },
          addBot: function (e, t, n, i) {
            const o = this.teamToStringId(e);
            if (0 !== o.length) {
              const e = n || "NONE";
              this._createTempBot(o, t, e);
              const a = {
                botDifficulty: e,
                championId: t,
                teamId: o,
                position: i,
              };
              return this.get("api.lobby")
                .post("/v1/lobby/custom/bots", a)
                .catch((e) => {
                  e.text &&
                    s.logger.error(
                      "an error has occurred when adding a bot",
                      JSON.parse(e.text),
                    ),
                    this._removeTempBots();
                });
            }
          },
          changeBot: function ({
            botId: e,
            team: t,
            championId: n,
            botDifficulty: i,
            botPosition: o,
            botToDeletePosition: a,
          }) {
            let r;
            r = a
              ? `/v1/lobby/custom/bots/${e}/${a}`
              : `/v1/lobby/custom/bots/${e}/NONE`;
            const l = this.teamToStringId(t);
            if (0 !== l.length) {
              const t = i || "NONE";
              this._removeBotByBotId(e), this._createTempBot(l, n, t);
              const a = {
                botDifficulty: t,
                championId: n,
                teamId: l,
                position: o,
              };
              return this.get("api.lobby")
                .post(r, a)
                .catch((e) => {
                  e.text &&
                    s.logger.error(
                      "an error has occurred when changing a bot",
                      JSON.parse(e.text),
                    ),
                    this._removeTempBots();
                });
            }
          },
          removeBot: function (e) {
            this._removeBotByBotId(e);
            const t = `/v1/lobby/custom/bots/${e}`;
            return this.get("api.lobby")
              .delete(t)
              .catch((e) => {
                e.text &&
                  s.logger.error(
                    "an error has occurred when removing a bot",
                    JSON.parse(e.text),
                  );
              });
          },
          _createTempBot: function (e, t, n) {
            const i = s.Ember.Object.create({
              summonerId: -1,
              botChampionId: t,
              botDifficulty: n,
              isBot: !0,
            });
            "100" === e
              ? this.get("team100").addObject(i)
              : this.get("team200").addObject(i);
          },
          _removeBotByBotId: function (e) {
            const t = ["team100", "team200"];
            for (let n = 0; n < t.length; n++) {
              const i = this.get(t[n]),
                s = i.findBy("botId", e);
              if (s) return void i.removeObject(s);
            }
          },
          _removeTempBots: function () {
            const e = ["team100", "team200"];
            for (let t = 0; t < e.length; t++) {
              const n = this.get(e[t]);
              n.forEach((e) => {
                -1 === e.get("summonerId") &&
                  e.get("isBot") &&
                  n.removeObject(e);
              });
            }
          },
          getSubcategoryMinLevel: function (e, t) {
            const n = this.getSubCategoryIndex(e, t);
            if (n >= 0) {
              const e = this.get("subcategories")[n];
              if (e) return e.get("minLevel");
            }
            return 1;
          },
          _updatePlayerSelectedRegion: function (e) {
            const t = this.get("playerInputs.gameServerRegion");
            t &&
              ((e &&
                e.some(function (e) {
                  return e === t;
                })) ||
                this.set("playerInputs.gameServerRegion", "")),
              !this.get("playerInputs.gameServerRegion") &&
                e &&
                e.length &&
                this.set("playerInputs.gameServerRegion", e[0]);
          },
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1),
          s = a(n(67)),
          o = a(n(68));
        function a(e) {
          return e && e.__esModule ? e : { default: e };
        }
        const r = (0, i.emberDataBinding)({
          Ember: i.Ember,
          websocket: (0, i.getProvider)().getSocket(),
          logPrefix: "service:custom-game-list",
          basePaths: { lobby: "/lol-lobby" },
          boundProperties: {
            tournamentShortCodesEnabled:
              "/lol-platform-config/v1/namespaces/ClientSystemStates/tournamentShortCodesEnabled",
          },
        });
        e.exports = i.Ember.Service.extend(i.Ember.Evented, r, {
          selectedCustomGame: null,
          modalManager: i.UIKit.getModalManager(),
          customGameListDataBindingSetup: !1,
          customGames: i.Ember.A(),
          noSelectedGame: i.Ember.computed.empty("selectedCustomGame"),
          isSelectedCustomGameFull: i.Ember.computed(
            "selectedCustomGame",
            "selectedCustomGame.filledPlayerSlots",
            "selectedCustomGame.maxPlayerSlots",
            function () {
              const e = this.get("selectedCustomGame.maxPlayerSlots");
              return this.get("selectedCustomGame.filledPlayerSlots") >= e;
            },
          ),
          isSelectedCustomGameSpectatorsFull: i.Ember.computed(
            "selectedCustomGame",
            "selectedCustomGame.filledSpectatorSlots",
            "selectedCustomGame.maxSpectatorSlots",
            function () {
              const e = this.get("selectedCustomGame.maxSpectatorSlots");
              return this.get("selectedCustomGame.filledSpectatorSlots") >= e;
            },
          ),
          confirmButtonText: i.Ember.computed(
            "selectedCustomGame",
            "selectedCustomGame.filledPlayerSlots",
            "selectedCustomGame.maxPlayerSlots",
            "selectedCustomGame.filledSpectatorSlots",
            "selectedCustomGame.maxSpectatorSlots",
            "tra.custom_game_join",
            "tra.custom_game_spectate",
            function () {
              const e = !this.get("selectedCustomGame"),
                t = !this.get("isSelectedCustomGameFull");
              return e || t || this.get("isSelectedCustomGameSpectatorsFull")
                ? this.get("tra.custom_game_join")
                : this.get("tra.custom_game_spectate");
            },
          ),
          confirmButtonEnabled: i.Ember.computed.bool("selectedCustomGame"),
          joinCustomGame: function (e) {
            let t;
            if (e) {
              if (e.id || e.partyId)
                return (
                  (t = e.hasPassword
                    ? this.promptPasswordModal()
                    : Promise.resolve()),
                  t.then((t) => {
                    const n = { asSpectator: !!e.spectator };
                    t && (n.password = t),
                      i.logger.warning(
                        `JOINING CUSTOM GAME FROM LIST (${e.id ? e.id : e.partyId})`,
                      );
                    const o = e.partyId
                      ? `/v2/party/${e.partyId}/join`
                      : `/v1/custom-games/${e.id}/join`;
                    return (0, i.dataBinding)("lol-lobby")
                      .post(o, n)
                      .catch((e) => {
                        const t = [401, 403, 404, 432, 438, 500].includes(
                          e.status,
                        )
                          ? this.get(`tra.custom_game_list_error_${e.status}`)
                          : this.get("tra.custom_game_list_error_generic");
                        return (
                          s.default.promptJoinErrorModal(t), Promise.reject(e)
                        );
                      });
                  })
                );
              i.logger.error(
                "joinCustomGame options needs to have an id defined",
              );
            } else i.logger.error("joinCustomGame options not defined");
          },
          createCustomListBind: function () {
            const e = { objectTypes: { "[]": o.default }, root: this };
            this.dataBindProperty(
              "lobby",
              "/v1/custom-games",
              "customGames",
              e,
            ),
              this.set("customGameListDataBindingSetup", !0);
          },
          refreshGameList: function () {
            return !1 === this.get("customGameListDataBindingSetup")
              ? (this.createCustomListBind(), Promise.resolve())
              : (0, i.dataBinding)("lol-lobby")
                  .post("/v1/custom-games/refresh")
                  .catch(function () {
                    return Promise.reject();
                  });
          },
          joinWithTournamentCode: function (e) {
            if (!e)
              return Promise.reject(
                new Error(
                  "No tournament code provided to joinWithTournamentCode",
                ),
              );
            return /[A-Z]{2,4}[0-9a-fA-F]{5}-[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/g.test(
              e,
            )
              ? (0, i.dataBinding)("lol-lobby")
                  .post(`/v1/tournaments/${e}/join`)
                  .catch(function (e) {
                    return Promise.reject(e);
                  })
              : Promise.reject(new Error("Badly formatted tournament code"));
          },
          triggerShowParty: function () {
            this.trigger("showParty");
          },
          promptPasswordModal: function () {
            const e = document.createElement("lol-uikit-flat-input"),
              t = document.createElement("lol-uikit-content-block");
            (e.innerHTML =
              '<input type="password" id="custom-game-join-password-input"></input>'),
              t.setAttribute("type", "dialog-small"),
              (t.innerHTML = `<h4>${this.get("tra.custom_game_list_required_password_header")}</h4>\n       <p>${this.get("tra.custom_game_list_required_password_text")}</p>\n       <hr class="heading-spacer">`),
              t.appendChild(e);
            const n = i.UIKit.getModalManager().add({
                type: "DialogConfirm",
                data: {
                  contents: t,
                  acceptText: this.get(
                    "tra.custom_game_list_required_password_join",
                  ),
                  declineText: this.get(
                    "tra.custom_game_list_required_password_cancel",
                  ),
                  closeButton: !1,
                },
              }),
              s = n.domNode.querySelector("#custom-game-join-password-input");
            return (
              s && s.focus(),
              n.acceptPromise.then(function () {
                const t = e.querySelector(
                  "input[id=custom-game-join-password-input]",
                ).value;
                return Promise.resolve(t);
              })
            );
          },
        });
      },
      (e, t, n) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.default = void 0);
        var i = n(1),
          s = {
            promptPasswordModal: function () {
              const e = document.createElement("lol-uikit-flat-input"),
                t = document.createElement("lol-uikit-content-block");
              (e.innerHTML =
                '<input type="password" id="custom-game-join-password-input"></input>'),
                t.setAttribute("type", "dialog-small"),
                (t.innerHTML = `<h4>${i.tra.get("custom_game_list_required_password_header")}</h4>\n       <p>${i.tra.get("custom_game_list_required_password_text")}</p>\n       <hr class="heading-spacer">`),
                t.appendChild(e);
              const n = i.UIKit.getModalManager().add({
                  type: "DialogConfirm",
                  data: {
                    contents: t,
                    acceptText: i.tra.get(
                      "custom_game_list_required_password_join",
                    ),
                    declineText: i.tra.get(
                      "custom_game_list_required_password_cancel",
                    ),
                    closeButton: !1,
                  },
                }),
                s = n.domNode.querySelector("#custom-game-join-password-input");
              return (
                s && s.focus(),
                n.acceptPromise.then(function () {
                  const t = e.querySelector(
                    "input[id=custom-game-join-password-input]",
                  ).value;
                  return Promise.resolve(t);
                })
              );
            },
            promptJoinErrorModal: function (e) {
              const t = i.tra.get("custom_game_list_error_title"),
                n = i.tra.get("custom_game_list_error_ok_button"),
                s = i.UIKit.getTemplateHelper().contentBlockDialog(
                  t,
                  e,
                  "dialog-medium",
                  "rcp-fe-lol-lobby-join-custom-game-error",
                );
              return i.UIKit.getModalManager().add({
                type: "DialogAlert",
                data: { contents: s, okText: n },
              });
            },
          };
        t.default = s;
      },
      (e, t, n) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.default = void 0);
        var i = n(1);
        var s = i.Ember.Object.extend({
          mapName: i.Ember.computed(
            "mapId",
            "root.tra.game_select_map_name_11",
            "root.tra.game_select_map_name_10",
            "root.tra.game_select_map_name_12",
            "root.tra.game_select_map_name_8",
            function () {
              const e = this.get("mapId");
              return this.get(`root.tra.game_select_map_name_${e}`);
            },
          ),
        });
        t.default = s;
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        const s = (0, i.emberDataBinding)({
          Ember: i.Ember,
          websocket: (0, i.getProvider)().getSocket(),
          logPrefix: "service:inventory",
          basePaths: { inventory: "/lol-inventory" },
          boundProperties: {
            skinAugmentInventory: {
              api: "inventory",
              path: "/v2/inventory/SKIN_AUGMENT",
            },
          },
        });
        e.exports = i.Ember.Service.extend(s, {
          ownedSkinAugments: i.Ember.computed(
            "skinAugmentInventory.[]",
            function () {
              return (this.get("skinAugmentInventory") ?? []).reduce(
                (e, t) => ((e[t.uuid] = t.owned), e),
                {},
              );
            },
          ),
        });
      },
      (e, t, n) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.default = void 0);
        var i = n(1),
          s = i.Ember.Service.extend({
            isConnected: i.Navigation.isConnectedToServer,
            init() {
              this._super(...arguments),
                i.Navigation.subscribe("isConnectedToServer", (e) => {
                  this.set("isConnected", e);
                });
            },
          });
        t.default = s;
      },
      (e, t, n) => {
        "use strict";
        var i = n(1),
          s = a(n(72)),
          o = a(n(20));
        function a(e) {
          return e && e.__esModule ? e : { default: e };
        }
        e.exports = i.Ember.Service.extend(s.default, {
          lobbiesService: i.Ember.inject.service("lobbies"),
          summonerService: i.Ember.inject.service("summoner"),
          chatService: i.Ember.inject.service("chat"),
          currentPlayerCanInvite: i.Ember.computed.alias(
            "lobbiesService.currentPlayerCanInvite",
          ),
          isLobbyFull: i.Ember.computed.alias("lobbiesService.isLobbyFull"),
          isCustomUI: i.Ember.computed.alias("lobbiesService.isCustomUI"),
          setupCallbacks: i.Ember.on("init", function () {
            o.default._registerCanInviteCallback(
              this.canInvitePlayer.bind(this),
            ),
              o.default._registerInviteCallback(this.invitePlayer.bind(this));
          }),
          canInvitePlayer: function (e) {
            return (
              !(!e || !this.get("currentPlayerCanInvite")) &&
              (!this.get("isLobbyFull") || !this.get("isCustomUI")) &&
              !this.playerInParty(e)
            );
          },
          invitePlayer: function (e, t = null) {
            return new Promise((n, i) => {
              if (!this.get("currentPlayerCanInvite"))
                return void i(new Error("CANNOT_INVITE"));
              let s;
              this.playerInParty(e) && i(new Error("PLAYER_IN_PARTY")),
                (s = t
                  ? Promise.resolve({ displayName: t })
                  : this.get("summonerService").getSummoner(e)),
                s
                  .then(
                    (n) => (
                      (t = n.displayName), this.checkIfPlayerAvailable(e, t)
                    ),
                  )
                  .then(() => this.get("lobbiesService").invitePlayer(e))
                  .then(() => {
                    n();
                  })
                  .catch(() => {
                    i(new Error("COULD_NOT_INVITE"));
                  });
            });
          },
          playerInParty: function (e) {
            let t = !1;
            if (e) {
              const n = this.get("lobbiesService.currentPartyMembers");
              if (!n || !n.length) return !1;
              t = !!n.find((t) => t.summonerId === e);
            }
            return t;
          },
          checkIfPlayerAvailable: function (e, t) {
            return new Promise((n, i) => {
              e || i();
              const s = this.get("chatService");
              if (!s.isFriend(e)) return void n();
              const o = s.getFriend(e);
              o &&
              s.me &&
              s.me.product === o.product &&
              s.me.platformId === o.platformId &&
              -1 !== ["chat", "away"].indexOf(o.availability)
                ? n()
                : (this.showFriendNotAvailableToast(t), i());
            });
          },
          showFriendNotAvailableToast: function (e) {
            const t = this.get("tra.formatString")(
              "parties_player_ineligible_to_join",
              { player: e },
            );
            this.showToast(t, "invite-eligibility");
          },
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        e.exports = i.Ember.Mixin.create({
          ModalManager: i.UIKit.getModalManager(),
          ToastManager: i.UIKit.getToastManager(),
          TemplateHelper: i.UIKit.getTemplateHelper(),
          showInviteModal: function () {
            const e = i.ComponentFactory.create("LobbyInviteDialog"),
              { domNode: t } = e,
              n = this.get("ModalManager").add({
                type: "DialogConfirm",
                data: {
                  contents: t,
                  acceptText: this.get("tra.invite_dialog_send_invites_button"),
                  closeButton: !0,
                },
              });
            return (
              t.addEventListener("disableacceptbutton", (e) => {
                n.disableAcceptButton(), e.stopPropagation();
              }),
              t.addEventListener("enableacceptbutton", (e) => {
                n.enableAcceptButton(), e.stopPropagation();
              }),
              n.acceptPromise
                .then(
                  () => {
                    t.querySelector(".lobby-invite-dialog").dispatchEvent(
                      new Event("sendInvitesClicked"),
                    );
                  },
                  () => {
                    t.querySelector(".lobby-invite-dialog").dispatchEvent(
                      new Event("closeModalClicked"),
                    );
                  },
                )
                .catch(() => {}),
              n
            );
          },
          showGameSelectErrorModal: function (e, t, n) {
            const i = this.get("tra.parties_game_select_error_modal_ok"),
              s = this.get("ModalManager").add({
                type: "DialogAlert",
                data: { contents: e, okText: i },
              });
            return (
              s && s.domNode && n && s.domNode.classList.add(n),
              t &&
                s.okPromise.then(() => {
                  t();
                }),
              s
            );
          },
          showModal: function (e) {
            const t = this.get("ModalManager").add(e);
            return (
              i.Ember.get(t, "data.onOk") && t.okPromise
                ? t.okPromise.then(t.data.onOk)
                : t.acceptPromise &&
                  t.acceptPromise
                    .then(() => {
                      i.Ember.get(t, "data.onAccept") && t.data.onAccept();
                    })
                    .catch(() => {
                      i.Ember.get(t, "data.onDecline") && t.data.onDecline();
                    }),
              t
            );
          },
          removeModal: function (e) {
            this.get("ModalManager").remove(e);
          },
          showToast: function (e, t) {
            const n = this.get("TemplateHelper").contentBlockNotification(e);
            return (
              t && n.classList.add(t),
              this.get("ToastManager").add({
                type: "DialogToast",
                data: { contents: n },
              })
            );
          },
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1),
          s = n(9),
          o = n(56),
          a = n(74),
          r = n(75);
        const l = "/lol-settings/v2/ready",
          c = "/lol-settings/v1/account/champ-select",
          m = { schemaVersion: 1, data: { skins: {}, spells: {} } },
          u = "/lol-settings/v2/account/LCUPreferences/lol-quick-play",
          d = { schemaVersion: 1, data: { slots: [] } },
          p = [420, 440, 400, 430, 870, 850, 840, 830],
          h = "owned",
          g = "rental",
          b = "loyalty",
          f = "free-to-play",
          _ = "BUNDLES";
        e.exports = i.Ember.Service.extend({
          init: function () {
            this._super(...arguments),
              this.set("championByChampId", new Map()),
              this.set("perksSelections", []),
              (this._binding = i.dataBinding.bindTo(
                (0, i.getProvider)().getSocket(),
              )),
              this.getGameDataSummonerSpells(),
              this._binding.observe(
                "/lol-summoner/v1/current-summoner",
                this,
                this.handleCurrentSummoner,
              ),
              this._binding.observe(
                "/lol-lobby/v2/lobby",
                this,
                this.handleLobby,
              ),
              this._binding.observe(
                "/lol-platform-config/v1/namespaces/DisabledChampions",
                this,
                this.handleDisabledChampions,
              ),
              this._binding.observe(
                "/lol-gameflow/v1/session",
                this,
                this.handleGameflowSession,
              ),
              this._binding.observe(
                "/lol-perks/v1/pages",
                this,
                this.handlePerksPages,
              ),
              this._binding.observe(
                "/lol-platform-config/v1/namespaces/ClientSystemStates/gameModeToInactiveSpellIds",
                this,
                this.handleGameModeToInactiveSpellIds,
              ),
              this._binding.observe(l, this, this.handleSettingsReady),
              this._binding.observe(
                "/lol-platform-config/v1/namespaces/SkinsViewer",
                this,
                this._handleSkinViewerSettings,
              );
          },
          _handleSkinViewerSettings(e) {
            this.set("disableAllPurchase", e.DisableAllPurchase);
          },
          getSearchMatchingTerms(e, t, n) {
            const i = `champion_local_search_colloq_${e}`;
            return (
              (this.get("tra").exists(i) ? this.get(`tra.${i}`) : t) || ""
            )
              .toLocaleLowerCase(n)
              .trim();
          },
          setChampionProperty(e, t, n, s) {
            const o = s.get(e);
            o && i.Ember.set(o, t, n);
          },
          _getCatalogSkinPurchaseInfo(e) {
            return this._binding.get(
              `/lol-store/v1/catalog/CHAMPION_SKIN?itemIds=[${e}]`,
            );
          },
          _setSkinsPurchaseEnabled(e) {
            const t = this.get("disableAllPurchase");
            if (!Boolean(e.length)) return Promise.reject();
            const n = e.map((e) => e.id);
            return this._getCatalogSkinPurchaseInfo(n).then((n) => {
              Boolean(n.length) &&
                n.forEach((n) => {
                  if (!Boolean(n)) return;
                  const s = e.find((e) => e.id === (n.id || n.itemId)),
                    o = this._isSkinPurchasable(n) && !t;
                  i.Ember.set(s, "purchaseEnabled", o);
                });
            });
          },
          _setSkinsOwnership(e) {
            if (Boolean(e.length))
              return e.forEach((e) => {
                if (!e.ownership) return;
                const t = e.ownership.owned,
                  n = e.ownership.loyaltyReward,
                  s = e.ownership.rental.rented,
                  o = e.ownership.xboxGPReward,
                  a = t || n || s || o;
                i.Ember.set(e, "unlocked", a);
              });
          },
          _catalogItemHasValidDates: (e, t) =>
            !(!t || !t.releaseDate || e < t.releaseDate) &&
            !(t.inactiveDate && e > t.inactiveDate),
          _catalogItemHasValidPrice(e) {
            if (e && Boolean(e.length))
              return void 0 !== e.find((e) => e.cost > 0);
          },
          _isSkinPurchasable(e) {
            if (e && e.active && e.releaseDate) {
              const t = Date.now();
              return (
                !!this._catalogItemHasValidDates(t, e) &&
                (!!Boolean(e && e.inventoryType === _) ||
                  !!(
                    e.sale &&
                    t >= e.sale.startDate &&
                    t < e.sale.endDate &&
                    this._catalogItemHasValidPrice(e.sale.prices)
                  ) ||
                  this._catalogItemHasValidPrice(e.prices))
              );
            }
            return !1;
          },
          getChampionSummary(e) {
            const t = document.documentElement.lang;
            if (e) {
              const n = new Map();
              Object.values(e).forEach((e) => {
                const { id: i, name: s, squarePortraitPath: o, skins: a } = e,
                  r = this.getSearchMatchingTerms(i, s, t);
                n.set(i, {
                  id: i,
                  name: s,
                  squarePortraitPath: o,
                  searchMatchingTerms: r,
                  skins: a,
                }),
                  -1 === i && this.set("defaultSquarePortraitPath", o);
              });
              (this.get("currentQuickPlaySelections") || []).forEach((e) => {
                this.setChampionProperty(
                  e.championId,
                  "selectedPosition",
                  e.positionPreference,
                  n,
                );
              }),
                this.set("championByChampId", n);
            }
          },
          getGameDataSummonerSpells() {
            return this._binding
              .get("/lol-game-data/assets/v1/summoner-spells.json")
              .then((e) => {
                this.set("summonerSpells", e);
              });
          },
          handleCurrentSummoner(e) {
            const t = Boolean(this.get("currentSummoner.puuid"));
            if ((this.set("currentSummoner", e), !t && e && e.puuid)) {
              const t = `/lol-champions/v1/inventories/${e.summonerId}/champions`;
              this._binding.observe(t, this, this.handleChampionInventory),
                this._binding
                  .get(
                    "/lol-client-config/v3/client-config/lol.client_settings.champ_mastery.lcm_enabled",
                  )
                  .then((t) => {
                    const n = Boolean(t)
                      ? "/lol-champion-mastery/v1/local-player/champion-mastery"
                      : `/lol-collections/v1/inventories/${e.puuid}/champion-mastery`;
                    this._binding.observe(n, this, this.handleChampionMastery);
                  }),
                this._binding.observe(
                  "/lol-match-history/v1/products/lol/current-summoner/matches",
                  this,
                  this.handleMatchHistory,
                );
            }
          },
          isEntitledChampion: (e) =>
            e &&
            e.ownership &&
            (e.freeToPlay ||
              e.ownership.owned ||
              e.ownership.loyaltyReward ||
              e.ownership.xboxGPReward ||
              e.ownership.rental.rented),
          calculateOwnershipType(e) {
            const { freeToPlay: t, ownership: n } = e;
            return n.owned
              ? h
              : n.rental.rented
                ? g
                : n.loyaltyReward || n.xboxGPReward
                  ? b
                  : t
                    ? f
                    : "";
          },
          handleChampionInventory(e) {
            this.getChampionSummary(e);
            const t = this.get("championByChampId") || new Map(),
              n = [];
            (e || []).forEach((e) => {
              const i = e.id;
              Boolean(e.skins.length) &&
                (n.push(...e.skins),
                e.skins.forEach((e) => {
                  Boolean(e.chromas.length) && n.push(...e.chromas),
                    Boolean(e.questSkinInfo.tiers.length) &&
                      n.push(...e.questSkinInfo.tiers);
                }));
              const s = this.calculateOwnershipType(e);
              this.setChampionProperty(i, "ownershipType", s, t);
            }),
              this.set(
                "ownedChampionIds",
                (e || [])
                  .filter((e) => e.ownership && e.ownership.owned)
                  .map((e) => e.id),
              ),
              this.set(
                "entitledChampionIds",
                (e || [])
                  .filter((e) => this.isEntitledChampion(e))
                  .map((e) => e.id),
              ),
              this._setSkinsPurchaseEnabled(n),
              this._setSkinsOwnership(n),
              this.setChampionsDisabled(),
              this.set("championInventory", e);
          },
          handleLobby(e) {
            this.set("gameMode", i.Ember.get(e || {}, "gameConfig.gameMode")),
              this.set(
                "isQuickPlayLobby",
                i.Ember.get(e || {}, "gameConfig.showQuickPlaySlotSelection"),
              ),
              this.set(
                "scarcePositions",
                i.Ember.get(e || {}, "scarcePositions"),
              );
            const t = this.get("currentQuickPlaySelections") || [],
              n = (e || {}).playerSlots || [],
              s = this.get("championByChampId") || new Map();
            t.forEach((e) => {
              const t = e.championId;
              this.setChampionProperty(t, "selectedPosition", "", s);
            }),
              n.forEach((e) => {
                const t = e.championId;
                this.setChampionProperty(
                  t,
                  "selectedPosition",
                  e.positionPreference,
                  s,
                );
              }),
              this.set("currentQuickPlaySelections", n);
          },
          setChampionsDisabled() {
            const e = this.get("queueGameMode"),
              t = this.get("queueGameType"),
              n = this.get("disabledChampionsData"),
              i = this.get("disabledChampionsInitialized");
            if (!e || !t || !i) return;
            const s = this.get("championByChampId") || new Map();
            (this.get("disabledChampionIds") || []).forEach((e) => {
              this.setChampionProperty(e, "disabled", !1, s);
            });
            const o = (n || {})[e],
              a = (n || {})[t],
              r = [].concat(o || [], a || []);
            r.forEach((e) => {
              this.setChampionProperty(e, "disabled", !0, s);
            }),
              this.set("disabledChampionIds", r);
          },
          handleDisabledChampions(e) {
            this.set("disabledChampionsInitialized", !0),
              this.set("disabledChampionsData", e),
              this.setChampionsDisabled();
          },
          handleGameflowSession(e) {
            const t = i.Ember.get(e || {}, "gameData.queue.gameMode"),
              n = i.Ember.get(e || {}, "gameData.queue.type");
            this.set("queueGameMode", t),
              this.set("queueGameType", n),
              this.setChampionsDisabled();
          },
          champs: i.Ember.computed(
            "championInventory.[]",
            "championByChampId",
            function () {
              const e = [
                ...(this.get("championByChampId") || new Map()).values(),
              ].filter((e) => !!e.name && !!e.ownershipType);
              return e.sort((e, t) => e.name.localeCompare(t.name)), e;
            },
          ),
          handlePerksPages(e) {
            this.set("perksPages", e);
          },
          handleGameModeToInactiveSpellIds(e) {
            this.set("gameModeToInactiveSpellIds", e);
          },
          gameModeDisabledSpellIds: i.Ember.computed(
            "gameMode",
            "gameModeToInactiveSpellIds",
            function () {
              const e = this.get("gameMode"),
                t = this.get("gameModeToInactiveSpellIds") || {},
                n = i.Ember.get(t, "ALL_GAME_MODES_DISABLED_SPELLS_KEY") || [],
                s = i.Ember.get(t, e) || [];
              return n.concat(s);
            },
          ),
          gameModeSummonerSpells: i.Ember.computed(
            "summonerSpells.@each.gameModes",
            "gameModeDisabledSpellIds.[]",
            "currentSummoner.summonerLevel",
            "gameMode",
            function () {
              const e = this.get("gameMode"),
                t = this.get("currentSummoner.summonerLevel") || 1,
                n = this.get("summonerSpells") || [],
                i = this.get("gameModeDisabledSpellIds") || [];
              return n
                .filter((t) => t.gameModes.includes(e))
                .map((e) => {
                  const n = i.includes(e.id),
                    s = t >= e.summonerLevel;
                  return {
                    ...e,
                    isSpellDisabledForMode: n,
                    isEligibleToUseSpell: s,
                    isDisabled: n || !s,
                    sfxPath: `/fe/lol-champ-select/sounds/sfx-spellchoose-${e.id}.ogg`,
                  };
                });
            },
          ),
          getChampionData(e) {
            return (
              this.get("championByChampId").get(e) || {
                id: e,
                squarePortraitPath: this.get("defaultSquarePortraitPath"),
                skins: [],
              }
            );
          },
          handleSettingsReady(e) {
            e &&
              (this._binding.observe(c, this, this.handleChampSelectSettings),
              this._binding.observe(u, this, this.handleQuickPlaySettings),
              this._binding.unobserve(l, this)),
              this.set("settingsReady", e);
          },
          handleChampSelectSettings(e) {
            this.set("champSelectSettings", e);
          },
          saveLastSelectedSkinForChampion(e, t) {
            if (!this.get("settingsReady") || !e || !t) return Promise.reject();
            const n = this.get("champSelectSettings.data.skins") || {},
              i = this.get("champSelectSettings.data.spells") || {};
            n[`${e}`] = t;
            const s = Object.assign({}, m, { data: { spells: i, skins: n } });
            return this._binding.put(c, s);
          },
          getLastSelectedSkinForChampion(e) {
            const t = `${e}`;
            return (this.get("champSelectSettings.data.skins") || {})[t] || 0;
          },
          getDefaultSkinForChampion(e) {
            const t = this.getLastSelectedSkinForChampion(e),
              n = this.getChampionData(e);
            return t || ((n.skins || []).find((e) => e.isBase) || {}).id || 0;
          },
          handleQuickPlaySettings(e) {
            const t = i.Ember.get(e || {}, "data");
            this.set("quickPlaySettingsData", t),
              this.set("quickPlaySettingsInitialized", !0);
          },
          handleChampionMastery(e) {
            const t = (e || []).map((e) => ({
              championId: e.championId,
              championPoints: e.championPoints,
            }));
            t.sort((e, t) => t.championPoints - e.championPoints);
            const n = t.map((e) => e.championId);
            this.set("championMasteryChampionIds", n);
          },
          handleMatchHistory(e) {
            const t = this.get("currentSummoner.puuid"),
              n = (i.Ember.get(e || {}, "games.games") || [])
                .filter((e) => e.gameMode === s.GAME_MODES.CLASSIC)
                .map((e) => {
                  const n = (e.participantIdentities || []).find(
                    (e) => e.player.puuid === t,
                  );
                  return (e.participants || []).find(
                    (e) => e.participantId === n.participantId,
                  ).championId;
                });
            this.set("matchHistoryChampionIds", n);
          },
          quickPlayDefaultSelections: i.Ember.computed(
            "settingsReady",
            "quickPlaySettingsData.slots",
            "quickPlaySettingsInitialized",
            "championMasteryChampionIds",
            "matchHistoryChampionIds",
            "ownedChampionIds",
            "entitledChampionIds",
            "scarcePositions",
            "isQuickPlayLobby",
            function () {
              const e = this.get("settingsReady"),
                t = this.get("quickPlaySettingsData.slots") || [],
                n = this.get("quickPlaySettingsInitialized"),
                s = this.get("championMasteryChampionIds"),
                o = this.get("matchHistoryChampionIds"),
                a = this.get("ownedChampionIds"),
                r = this.get("entitledChampionIds"),
                l = this.get("isQuickPlayLobby"),
                c = this.get("scarcePositions"),
                m = this.get("disabledChampionIds"),
                u =
                  Boolean(o) &&
                  Boolean(a) &&
                  Boolean(r) &&
                  Boolean(c) &&
                  Boolean(s) &&
                  Boolean(m);
              if (!(e && n && l && u)) return [];
              if (t.length) return t;
              const d = r.filter((e) => !m.includes(e)),
                p = i.lodash.shuffle(a),
                h = s.concat(o, p),
                g = [...new Set(h)].filter(
                  (e) =>
                    d.includes(e) && this.getChampionData(e).skins.length > 0,
                );
              let b = this.getValidChampPositionSelections([], g, c);
              if (b.length < 2) {
                const e = d.filter((e) => !g.includes(e));
                b = this.getValidChampPositionSelections(
                  b,
                  i.lodash.shuffle(e),
                  c,
                );
              }
              return b.map((e) => {
                const t = this.getDefaultSkinForChampion(e.championId),
                  n = this.getDefaultSpellsForPosition(e.positionPreference);
                return { ...e, skinId: t, spell1: n[0], spell2: n[1] };
              });
            },
          ),
          getSanitizedPreferredPosition(e) {
            const t = i.ChampionStatistics.getPreferredPosition(e);
            return t === o.CHAMP_STATS_POSITION_UTILITY
              ? o.POSITIONS.UTILITY
              : t;
          },
          getValidChampPositionSelections(e = [], t, n) {
            let i = (e[0] || {}).positionPreference,
              s = 0;
            for (; e.length < 2 && s < t.length; ) {
              const o = t[s],
                a = this.getSanitizedPreferredPosition(o);
              if (i) {
                const t = 0 !== n.length && !n.includes(i),
                  s = n.includes(a);
                ((t && s) || !t) &&
                  a !== i &&
                  e.push({ championId: o, positionPreference: a });
              } else (i = a), e.push({ championId: o, positionPreference: a });
              s++;
            }
            return e;
          },
          getDefaultSpellsForPosition(e) {
            const t = this.get("champSelectSettings.data.spells") || {},
              n = this.get("gameModeSummonerSpells"),
              i = p.map((e) => t[e] || []),
              s = (0, r.getEligibleSpells)(n, a.DEFAULT_MOVEMENT_SPELLS)[0].id,
              o = [
                s,
                (0, r.getEligibleSpells)(
                  n,
                  [
                    a.DEFAULT_NON_MOVEMENT_SPELL_BY_POSITION[e],
                    a.DEFAULT_NON_MOVEMENT_SPELL,
                  ],
                  [s],
                )[0].id,
              ],
              l = i
                .concat([o])
                .find((e) => 2 === e.length && !e.includes(void 0));
            return (0, r.getSpellIdsWithSmiteAssignedIfAppropriate)(l, e, n);
          },
          saveQuickPlaySelections(e) {
            if (!this.get("settingsReady")) return Promise.resolve();
            const t = { data: { slots: e } };
            return this._binding.put(u, Object.assign({}, d, t));
          },
        });
      },
      (e, t, n) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.SPELL_IDS =
            t.DEFAULT_NON_MOVEMENT_SPELL_BY_POSITION =
            t.DEFAULT_NON_MOVEMENT_SPELL =
            t.DEFAULT_MOVEMENT_SPELLS =
              void 0);
        var i = n(56);
        const s = {
          SMITE: 11,
          TELEPORT: 12,
          IGNITE: 14,
          HEAL: 7,
          EXHAUST: 3,
          GHOST: 6,
          FLASH: 4,
        };
        t.SPELL_IDS = s;
        const o = {};
        (o[i.POSITIONS.TOP] = s.TELEPORT),
          (o[i.POSITIONS.JUNGLE] = s.SMITE),
          (o[i.POSITIONS.MIDDLE] = s.IGNITE),
          (o[i.POSITIONS.BOTTOM] = s.HEAL),
          (o[i.POSITIONS.UTILITY] = s.EXHAUST);
        const a = o;
        t.DEFAULT_NON_MOVEMENT_SPELL_BY_POSITION = a;
        const r = [s.FLASH, s.GHOST];
        t.DEFAULT_MOVEMENT_SPELLS = r;
        const l = s.HEAL;
        t.DEFAULT_NON_MOVEMENT_SPELL = l;
      },
      (e, t, n) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.getEligibleSpells = function (e, t = [], n = []) {
            return o(e, t, n);
          }),
          (t.getSpellIdsWithSmiteAssignedIfAppropriate = function (
            e = [],
            t,
            n,
            a = !1,
          ) {
            const r = n.find((e) => e.id === s.SPELL_IDS.SMITE);
            return t !== i.POSITIONS.JUNGLE || r.isDisabled
              ? a
                ? (function (e = [], t, n) {
                    const i = [...e],
                      a = o(
                        n,
                        [
                          s.DEFAULT_NON_MOVEMENT_SPELL_BY_POSITION[t],
                          s.DEFAULT_NON_MOVEMENT_SPELL,
                          ...s.DEFAULT_MOVEMENT_SPELLS,
                        ],
                        i,
                      ),
                      r = a[0].id,
                      l = i.indexOf(s.SPELL_IDS.SMITE);
                    -1 !== l && (i[l] = r);
                    return i;
                  })(e, t, n)
                : e
              : (function (e = []) {
                  const t = [...e];
                  t[0] !== s.SPELL_IDS.SMITE &&
                    t[1] !== s.SPELL_IDS.SMITE &&
                    (t[0] === s.SPELL_IDS.FLASH
                      ? (t[1] = s.SPELL_IDS.SMITE)
                      : (t[0] = s.SPELL_IDS.SMITE));
                  return t;
                })(e);
          });
        var i = n(56),
          s = n(74);
        function o(e, t = [], n = []) {
          const i = t.concat(e.map((e) => e.id));
          return e
            .filter((e) => !e.isDisabled && !n.includes(e.id))
            .sort((e, t) => i.indexOf(e.id) - i.indexOf(t.id));
        }
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        const s = (e) =>
            e.reduce(
              (e, t) => ({
                ...e,
                ...t.items.reduce(
                  (e, t) => ({
                    ...e,
                    ...(t.upgrades || []).reduce(
                      (e, t) => ({ ...e, [t.itemId]: t.loadoutsIcon }),
                      {},
                    ),
                    [t.itemId]: t.loadoutsIcon,
                  }),
                  {},
                ),
              }),
              {},
            ),
          o = (e) =>
            e.groups.reduce(
              (e, t) => [
                ...e,
                ...t.items.reduce((e, t) => {
                  if (t.owned || t.f2p || t.loyalty) {
                    let n = [...e, t];
                    if (t?.upgrades?.length) {
                      const e = t.upgrades.filter((e) => e.owned);
                      n = [...n, ...e];
                    }
                    return n;
                  }
                  return e;
                }, []),
              ],
              [],
            ),
          a = (0, i.emberDataBinding)({
            Ember: i.Ember,
            websocket: (0, i.getProvider)().getSocket(),
            logPrefix: "parties:service:tft-cosmetics",
            basePaths: {
              cosmetics: "/lol-cosmetics",
              clientconfig: "/lol-client-config",
            },
            boundProperties: {
              companions: {
                api: "cosmetics",
                path: "/v1/inventories/tft/companions",
              },
              defaultCompanions: {
                api: "cosmetics",
                path: "/v1/inventories/default/companions",
              },
              mapSkins: {
                api: "cosmetics",
                path: "/v1/inventories/tft/map-skins",
              },
              damageSkins: {
                api: "cosmetics",
                path: "/v1/inventories/tft/damage-skins",
              },
              randomizeLoadouts: {
                api: "clientconfig",
                path: "/v3/client-config/lol.client_settings.tft.tft_randomize_loadouts",
              },
            },
          });
        e.exports = i.Ember.Service.extend(a, {
          companionIconUrls: i.Ember.computed("companions.groups", function () {
            return s(this.get("companions.groups") || []);
          }),
          mapSkinIconUrls: i.Ember.computed("mapSkins.groups", function () {
            return s(this.get("mapSkins.groups") || []);
          }),
          damageSkinIconUrls: i.Ember.computed(
            "damageSkins.groups",
            function () {
              return s(this.get("damageSkins.groups") || []);
            },
          ),
          ownedCompanions: i.Ember.computed("companions", function () {
            return o(this.get("companions"));
          }),
          ownedMapSkins: i.Ember.computed("mapSkins", function () {
            return o(this.get("mapSkins"));
          }),
          ownedDamageSkins: i.Ember.computed("damageSkins", function () {
            return o(this.get("damageSkins"));
          }),
          equippedCompanion: i.Ember.computed(
            "companions.selectedLoadoutItem.itemId",
            function () {
              return this.get("companions.selectedLoadoutItem");
            },
          ),
          equippedMapSkin: i.Ember.computed(
            "mapSkins.selectedLoadoutItem.itemId",
            function () {
              return this.get("mapSkins.selectedLoadoutItem");
            },
          ),
          equippedDamageSkin: i.Ember.computed(
            "damageSkins.selectedLoadoutItem.itemId",
            function () {
              return this.get("damageSkins.selectedLoadoutItem");
            },
          ),
          isTFTRandomizeLoadoutsEnabled: i.Ember.computed.bool(
            "randomizeLoadouts.enabled",
          ),
          randomizeAll: function () {
            const e = this.get("ownedCompanions"),
              t = this.get("ownedMapSkins"),
              n = this.get("ownedDamageSkins"),
              s = e[Math.floor(Math.random() * e.length)],
              o = t[Math.floor(Math.random() * t.length)],
              a = n[Math.floor(Math.random() * n.length)],
              r = (0, i.getProvider)().getSocket();
            (0, i.dataBinding)("/lol-cosmetics", r).put(
              "/v1/selection/companion",
              s.itemId,
            ),
              (0, i.dataBinding)("/lol-cosmetics", r).put(
                "/v1/selection/tft-map-skin",
                o.itemId,
              ),
              (0, i.dataBinding)("/lol-cosmetics", r).put(
                "/v1/selection/tft-damage-skin",
                a.itemId,
              ),
              this.set("companions.selectedLoadoutItem", s),
              this.set("mapSkins.selectedLoadoutItem", o),
              this.set("damageSkins.selectedLoadoutItem", a);
          },
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        const s = "/lol-tft/v1/tft/events";
        e.exports = i.Ember.Service.extend({
          tftEventsData: null,
          tftEvent: null,
          eventQueues: i.Ember.computed.alias("tftEvent.queueIds"),
          eventEnabled: i.Ember.computed.alias("tftEvent.enabled"),
          eventEndDate: i.Ember.computed.alias("tftEvent.endDate"),
          init: function () {
            this._super(...arguments),
              (this._binding = i.db),
              this._initObservers();
          },
          willDestroy: function () {
            this._binding.removeObserver(s, this), this._super(...arguments);
          },
          _initObservers() {
            this._binding.addObserver(s, this, (e) => {
              e &&
                (this.set("tftEventsData", e.subNavTabs),
                e.subNavTabs.length > 1
                  ? i.logger.error(
                      "Currently only displaying one event in the TFT Hub is supported - received " +
                        e.length +
                        " events.",
                    )
                  : 1 === e.subNavTabs.length &&
                    this.set("tftEvent", e.subNavTabs[0]));
            });
          },
          isTftEventQueue: function (e) {
            const t = this.get("eventQueues");
            if (!t || !e) return !1;
            let n = !1;
            return (
              Array.isArray(t) &&
                t.length > 0 &&
                (n = t.some(function (t) {
                  return e === t;
                })),
              n
            );
          },
        });
      },
      (e, t, n) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.default = void 0);
        var i = n(1);
        const s = "/lol-settings/v2/account/LCUPreferences/lol-tft",
          o = "shouldShowTFTNPEQueueUnlock";
        var a = i.Ember.Service.extend({
          eligibilityService: i.Ember.inject.service("queue-eligibility"),
          preferencesInitialized: !1,
          shouldShowTFTNPEQueueUnlock: !1,
          init() {
            this._super(...arguments),
              i.db.addObserver(s, this, this._handleTFTPreferences);
          },
          willDestroy() {
            this._super(...arguments), i.db.removeObserver(s, this);
          },
          _handleTFTPreferences(e) {
            if (!e || !e.data) return;
            const t = Boolean(e.data[o]);
            this.set("shouldShowTFTNPEQueueUnlock", t),
              this.set("preferencesInitialized", !0);
          },
          updateShouldShowTFTNPEQueueUnlock(e) {
            const t = Boolean(e);
            return i.db
              .patch(s, { data: { [o]: t }, schemaVersion: 1 })
              .then(() => {
                this.set("shouldShowTFTNPEQueueUnlock", t);
              });
          },
        });
        t.default = a;
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        const s = (0, i.emberDataBinding)({
          Ember: i.Ember,
          websocket: (0, i.getProvider)().getSocket(),
          logPrefix: "service:social-leaderboard",
          basePaths: { socialLeaderboard: "/lol-social-leaderboard" },
        });
        e.exports = i.Ember.Service.extend(s, {
          getSocialLeaderboardData: function (e) {
            const t = `/v1/social-leaderboard-data?queueType=${e}`;
            return this.get("api.socialLeaderboard").get(t, { skipCache: !0 });
          },
          getSocialLeaderboardNextUpdateTime: function (e) {
            const t = `/v1/leaderboard-next-update-time?queueType=${e}`;
            return this.get("api.socialLeaderboard").get(t, { skipCache: !0 });
          },
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1),
          s = n(12);
        e.exports = i.Ember.Service.extend({
          init: function () {
            this._super(...arguments),
              (this._binding = i.db),
              this._binding.observe(
                "/lol-platform-config/v1/namespaces/Challenges/ClientState",
                this,
                this.handleLobbyChallengesEnabled,
              );
          },
          handleLobbyChallengesEnabled(e) {
            i.SharedChallengesConstants.getFlagValueOrDefault(
              i.SharedChallengesConstants.CHALLENGE_FLAG_NAMES.CLIENT_STATE,
              e,
            ) === s.CHALLENGES_CLIENT_STATES.ENABLED
              ? this._binding.observe(
                  "/lol-challenges/v1/available-queue-ids",
                  this,
                  this.handleAvailableQueueIds,
                )
              : (this._binding.unobserve(
                  "/lol-challenges/v1/available-queue-ids",
                  this,
                ),
                this.set("enabledQueues", void 0));
          },
          handleAvailableQueueIds(e) {
            this.set("enabledQueues", e);
          },
        });
      },
      (e, t, n) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.default = void 0);
        var i = n(1);
        const s = [
          {
            name: "isLegendaryChampionMasteryEnabled",
            path: "lol.client_settings.champ_mastery.lcm_enabled",
            default: !1,
          },
        ];
        var o = i.Ember.Service.extend({
          init: function () {
            this._super(...arguments),
              (this.clientConfigDataBinding = (0, i.dataBinding)(
                "/lol-client-config",
                (0, i.getProvider)().getSocket(),
              )),
              s.forEach((e) => {
                const t = `v3/client-config/${e.path}`;
                this.clientConfigDataBinding.observe(t, this, (t) =>
                  this.setProperty(e, t),
                );
              });
          },
          setProperty(e, t) {
            let n = e.default;
            "" !== t && (n = t), this.set(e.name, n);
          },
          willDestroy() {
            this._super(...arguments),
              s.forEach((e) => {
                const t = `v3/client-config/${e.path}`;
                this.clientConfigDataBinding.unobserve(t, this);
              });
          },
        });
        t.default = o;
      },
      (e, t, n) => {
        "use strict";
        var i = n(1),
          s = c(n(72)),
          o = c(n(19)),
          a = c(n(83)),
          r = c(n(10)),
          l = n(9);
        function c(e) {
          return e && e.__esModule ? e : { default: e };
        }
        n(84);
        const { RunMixin: m } = i.EmberAddons.EmberLifeline;
        e.exports = i.Ember.Component.extend(
          m,
          a.default,
          s.default,
          o.default,
          {
            classNames: ["parties-view"],
            classNameBindings: [
              "isInQueue:in-matchmaking-search",
              "gameflowObserver",
              "loginConnectedObserver",
              "invitesService.currentPlayerCanInvite",
            ],
            showingState: null,
            selected: null,
            queues: null,
            _updatedInvitedBanners: !1,
            _lastQueueId: null,
            _lastPartyId: null,
            _playedSoundQueueId: null,
            lobbyIsDisabled: !1,
            _positionSelectorEmberApp: null,
            _positionSelectorData: null,
            ModalManager: i.UIKit.getModalManager(),
            matchmakingService: i.Ember.inject.service("matchmaking"),
            lobbiesService: i.Ember.inject.service("lobbies"),
            eligibilityService: i.Ember.inject.service("queue-eligibility"),
            customGamesService: i.Ember.inject.service("custom-games"),
            gameflowService: i.Ember.inject.service("gameflow"),
            invitesService: i.Ember.inject.service("invites"),
            partySettingsService: i.Ember.inject.service("party-settings"),
            assets: i.Ember.inject.service(),
            tftEventService: i.Ember.inject.service("tft-events"),
            layout: n(85),
            isCustom: i.Ember.computed.alias("lobbiesService.isCustom"),
            isInQueue: i.Ember.computed.alias("matchmakingService.isInQueue"),
            isMatchmaking: i.Ember.computed.or(
              "gameflowService.isMatchmaking",
              "gameflowService.isReadyCheck",
            ),
            isCustomUI: i.Ember.computed.alias("customGamesService.isCustomUI"),
            isInViewport: i.Ember.computed.alias("showingState.isInViewport"),
            isShowingParty: i.Ember.computed.alias(
              "showingState.isShowingParty",
            ),
            isShowingGameSelect: i.Ember.computed.alias(
              "showingState.isShowingGameSelect",
            ),
            queueId: i.Ember.computed.alias("lobbiesService.queueId"),
            partyId: i.Ember.computed.alias("lobbiesService.partyId"),
            isTFT: i.Ember.computed.alias("lobbiesService.isTFT"),
            isStrawberry: i.Ember.computed.alias("lobbiesService.isStrawberry"),
            isNotChampSelect: i.Ember.computed.not(
              "gameflowService.isChampSelect",
            ),
            isLeader: i.Ember.computed.alias(
              "lobbiesService.isCurrentPlayerPartyLeader",
            ),
            shouldShowMultiteamLobby: i.Ember.computed.alias(
              "lobbiesService.shouldShowMultiteamLobby",
            ),
            animationsEnabled: i.Ember.computed.alias(
              "partySettingsService.animationsEnabled",
            ),
            partyViewObserver: i.Ember.computed(
              "isInViewport",
              "isShowingParty",
              "queueId",
              function () {
                const e = this.get("isInViewport"),
                  t = this.get("isShowingParty"),
                  n = this.get("queueId");
                let s = "";
                e &&
                  t &&
                  this.get("tftEventService").isTftEventQueue(n) &&
                  (s = "TFT_Event_Series"),
                  i.Navigation.setTrackerState("partyViewSeries", s);
              },
            ),
            changeGameTypeSound:
              "/fe/lol-parties/sfx-parties-trans-change-game-type.ogg",
            platformConfigSingleton: r.default,
            shouldUsePartiesV2Components: i.Ember.computed.not("isCustom"),
            init() {
              this._super(...arguments),
                (this._initialPerfMetricSent = !1),
                i.Telemetry.startTracingEvent("parties-init-ember-app-settle");
            },
            didRender() {
              this._super(...arguments),
                this._initialPerfMetricSent ||
                  this.debounceTask("_endPerformanceMeasurement", 250);
            },
            _endPerformanceMeasurement() {
              i.Telemetry.endTracingEvent("parties-init-ember-app-settle"),
                (this._initialPerfMetricSent = !0);
            },
            isMatchmakingClassName: i.Ember.computed(
              "isMatchmaking",
              function () {
                return this.get("isMatchmaking")
                  ? "bg-current isMatchmaking"
                  : "bg-current";
              },
            ),
            updateBackgroundAnimation: function (e) {
              const t = e.pageX - window.innerWidth / 2,
                n = e.pageY - window.innerHeight / 2,
                i = this.get("isMatchmaking"),
                s = this.element.querySelector(
                  ".lol-uikit-background-switcher-image",
                );
              i ||
                (s.style.cssText = `\n      transform: scale(1.125) translateX(-${50 + t / 75}px) translateY(-${50 + n / 75}px);\n    `);
            },
            mouseMove: function (e) {
              this.get("animationsEnabled"), this.get("isTFT");
            },
            queueIdObserver: i.Ember.on(
              "init",
              i.Ember.observer("queueId", "isCustom", function () {
                i.Ember.run.once(this, function () {
                  this._updateSelectionFromCustomLobby();
                });
              }),
            ),
            queueTransitionObserver: i.Ember.on(
              "init",
              i.Ember.observer("partyId", "queueId", function () {
                i.Ember.run.once(this, function () {
                  this.get("isLeader") ||
                    this._partyMemberTransition(
                      this.get("partyId"),
                      this.get("queueId"),
                    );
                });
              }),
            ),
            isDisconnected: !1,
            loginConnectedObserver: i.Ember.computed(
              "eligibilityService.loginConnected",
              function () {
                const e = this.get("eligibilityService.loginConnected");
                !0 === e
                  ? this.get("isDisconnected") &&
                    (i.logger.warning("Parties plugin thinks we reconnected!"),
                    this.set("isDisconnected", !1),
                    this.get("eligibilityService").refreshEligibilities())
                  : !1 === e && this.handleDisconnect();
              },
            ),
            handleDisconnect: function () {
              this.set("isDisconnected", !0),
                this.get("isShowingParty") ||
                  (this.get("lobbiesService.inLobby")
                    ? (i.logger.warning(
                        "Parties plugin disconnected so returning to parties screen",
                      ),
                      this.get("showingState").showParty())
                    : this.get("isShowingGameSelect") &&
                      (i.logger.warning(
                        "Parties plugin disconnected so hiding game select screen",
                      ),
                      this.hideOurselves()));
            },
            refreshEligibilityObserver: i.Ember.on(
              "init",
              i.Ember.observer(
                "isShowingGameSelect",
                "lobbiesService.gameSelectEligibilityHash",
                "otherPartyMembers",
                function () {
                  i.Ember.run.once(this, function () {
                    const e = this.get(
                      "lobbiesService.gameSelectEligibilityHash",
                    );
                    i.logger.trace(
                      `refreshEligibilityObserver: updated party hash: ${e}`,
                    ),
                      this.checkIfNeedToRefreshEligibility();
                  });
                },
              ),
            ),
            checkIfNeedToRefreshEligibility: function () {
              const e = this.get("isShowingGameSelect"),
                t =
                  this.get("eligibilityService.isTFTNPEEnabled") &&
                  [l.TFT_NORMAL_QUEUE_ID, l.TFT_NPE_QUEUE_ID].includes(
                    this.get("queueId"),
                  );
              (e || t) && this.get("eligibilityService").refreshEligibilities();
            },
            debugToolsEnabled: i.Ember.computed(
              "lobbiesService.queues.[]",
              function () {
                const e = this.get("lobbiesService.queues");
                if (e && e.length > 0) {
                  const t = e.findBy("id", 432);
                  return t && "Available" === t.queueAvailability;
                }
                return !1;
              },
            ),
            handleWillDestroyElement: i.Ember.on(
              "willDestroyElement",
              function () {
                this._destroyInviteDialog();
              },
            ),
            gameflowObserver: i.Ember.computed(
              "gameflowService.phase",
              "_inviteModal",
              function () {
                !this.get("gameflowService.isLobby") &&
                  this.get("_inviteModal") &&
                  this.get("ModalManager").remove(this.get("_inviteModal"));
              },
            ),
            _destroyInviteDialog: function () {
              const e = this.get("_inviteModal");
              e &&
                e.domNode &&
                e.domNode
                  .querySelector(".parties-invite-dialog")
                  .dispatchEvent(new Event("destroyComponent")),
                this.set("_inviteDialogComponent", null);
            },
            _getPartiesInviteDialog: function () {
              let e = this.get("_inviteDialogComponent");
              if (e) {
                const { domNode: t } = e,
                  n = t.querySelector(".parties-invite-dialog");
                n && n.dispatchEvent(new Event("initInviteDialog"));
              } else
                (e = i.ComponentFactory.create("PartiesInviteDialog")),
                  this.set("_inviteDialogComponent", e);
              return this.get("_inviteDialogComponent");
            },
            showInviteModal: function () {
              const e = this._getPartiesInviteDialog(),
                t = this.get("tra.invite_dialog_send_invites_button");
              return e.renderPromise.then(() => {
                const { domNode: n } = e,
                  i = this.get("ModalManager").add({
                    type: "DialogConfirm",
                    data: { contents: n, acceptText: t, closeButton: !0 },
                  });
                return (
                  n.addEventListener("disableacceptbutton", (e) => {
                    i.disableAcceptButton(), e.stopPropagation();
                  }),
                  n.addEventListener("enableacceptbutton", (e) => {
                    i.enableAcceptButton(), e.stopPropagation();
                  }),
                  n.addEventListener("closeinvitemodal", (e) => {
                    this.get("ModalManager").remove(i), e.stopPropagation();
                  }),
                  i.domNode.classList.add("parties-invite-dialog-modal"),
                  i.acceptPromise
                    .then(() => {
                      n.querySelector(".parties-invite-dialog").dispatchEvent(
                        new Event("sendInvitesClicked"),
                      );
                    })
                    .catch(() => {}),
                  i
                );
              });
            },
            _updateSelectionFromCustomLobby: function () {
              const e = this.get("lobbiesService.gameConfig"),
                t = this.get("queueId");
              e &&
                (this.get("lobbiesService.isCustom")
                  ? (this.set("selected.isCreatingCustomGame", !0),
                    this.set("selected.mapId", e.mapId),
                    this.set("selected.gameMode", e.gameMode))
                  : i.lodash.isNumber(t) &&
                    (this.set("selected.queueId", t),
                    this.set("selected.isCreatingCustomGame", !1)));
            },
            _partyMemberTransition: function (e, t) {
              i.lodash.isNumber(t) && -1 !== t && e
                ? e === this.get("_lastPartyId")
                  ? this.get("_lastQueueId") !== t && this._changedQueue(t)
                  : this._changedParty(e, t)
                : this._clearPartyCache();
            },
            _clearPartyCache: function () {
              this.set("_lastQueueId", null),
                this.set("_lastPartyId", null),
                this.set("_playedSoundQueueId", null);
            },
            _changedParty: function (e, t) {
              this.set("_lastPartyId", e),
                this.set("_lastQueueId", t),
                this.set("_playedSoundQueueId", null),
                this.get("showingState").showParty();
            },
            _changedQueue: function (e) {
              this._playQueueTransitionSound(e), this.set("_lastQueueId", e);
            },
            _playQueueTransitionSound: function (e) {
              this.get("_playedSoundQueueId") !== e &&
                (this.playSound(this.get("changeGameTypeSound")),
                this.set("_playedSoundQueueId", e));
            },
            actions: {
              showGameSelect: function () {
                this.set("showingState.showVerticalAnimation", !0),
                  this.set("showingState.isShowingLeagueBanner", !1),
                  this.get("showingState").showGameSelect();
              },
              showInviteModal: function () {
                this.showInviteModal().then((e) => {
                  this.set("_inviteModal", e);
                });
              },
              cachePositionSelector: function (e, t) {
                this.set("_positionSelectorEmberApp", e),
                  this.set("_positionSelectorData", t);
              },
            },
          },
        );
      },
      (e, t, n) => {
        "use strict";
        var i,
          s = n(1),
          o = (i = n(22)) && i.__esModule ? i : { default: i };
        e.exports = s.Ember.Mixin.create({
          leaveParty: function () {
            return this.hideOurselves().then(() =>
              this.get("lobbiesService").leaveParty(),
            );
          },
          hideOurselves: function () {
            if (
              (this.set("selected.isUpdatingSelection", !1),
              this.get("showingState.isInViewport"))
            ) {
              const e = s.Viewport.main().getScreenRoot(
                o.default.get("viewportApiKey"),
                "rcp-fe-lol-parties",
              );
              return s.Navigation.showHome().then(() =>
                e.release().then(() => {
                  this.get("showingState").set("isInViewport", !1);
                }),
              );
            }
            return Promise.resolve();
          },
        });
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "knELOR2N",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\root-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\root-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\root-component\\\\index.js\\" "],["text","\\n"],["append",["helper",["parties-background"],null,[["selected","showingState","isMatchmakingClassName"],[["get",["selected"]],["get",["showingState"]],["get",["isMatchmakingClassName"]]]]],false],["text","\\n"],["append",["helper",["parties-ambience"],null,[["selected","showingState"],[["get",["selected"]],["get",["showingState"]]]]],false],["text","\\n"],["open-element","div",[]],["static-attr","class","parties-content"],["flush-element"],["text","\\n"],["block",["if"],[["get",["isShowingParty"]]],null,11],["block",["if"],[["get",["isCustomUI"]]],null,10,8],["text","\\n  "],["append",["helper",["game-select-root"],null,[["showingState","selected","queues"],[["get",["showingState"]],["get",["selected"]],["get",["queues"]]]]],false],["text","\\n\\n  "],["append",["unknown",["parties-notifications"]],false],["text","\\n\\n"],["block",["if"],[["get",["debugToolsEnabled"]]],null,0],["close-element"],["text","\\n"],["open-element","div",[]],["static-attr","style","display: none"],["flush-element"],["text","\\n  "],["comment"," here are some computeds we need in a template somewhere, so they update "],["text","\\n  "],["append",["unknown",["customGamesService","gameIdObserver"]],false],["text","\\n  "],["append",["unknown",["customGamesService","gameflowPhaseObserver"]],false],["text","\\n  "],["append",["unknown",["partyViewObserver"]],false],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["append",["helper",["parties-debug-tools"],null,[["selected","showingState"],[["get",["selected"]],["get",["showingState"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["append",["helper",["v2-header"],null,[["showingState","selected","isInQueue","queues","cancelFlow"],[["get",["showingState"]],["get",["selected"]],["get",["isInQueue"]],["get",["queues"]],"showGameSelect"]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["append",["helper",["v2-parties-root"],null,[["showingState","selected","showGameSelect","isInQueue","showInviteModal"],[["get",["showingState"]],["get",["selected"]],"showGameSelect",["get",["isInQueue"]],"showInviteModal"]]],false],["text","\\n    "]],"locals":[]},{"statements":[["text","      "],["append",["helper",["multiteam-lobby-root"],null,[["showingState","selected","showInviteModal"],[["get",["showingState"]],["get",["selected"]],"showInviteModal"]]],false],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["shouldShowMultiteamLobby"]]],null,3,2]],"locals":[]},{"statements":[["text","      "],["append",["helper",["strawberry-lobby-root"],null,[["showingState","selected","showInviteModal"],[["get",["showingState"]],["get",["selected"]],"showInviteModal"]]],false],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["isStrawberry"]]],null,5,4]],"locals":[]},{"statements":[["text","      "],["append",["helper",["tft-lobby"],null,[["showingState","selected","showGameSelect","isInQueue","showInviteModal"],[["get",["showingState"]],["get",["selected"]],"showGameSelect",["get",["isInQueue"]],"showInviteModal"]]],false],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["isTFT"]]],null,7,6],["block",["if"],[["get",["isShowingParty"]]],null,1]],"locals":[]},{"statements":[["text","      "],["append",["helper",["parties-header"],null,[["showingState","selected","isInQueue","queues"],[["get",["showingState"]],["get",["selected"]],["get",["isInQueue"]],["get",["queues"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["isShowingParty"]]],null,9],["text","    "],["append",["helper",["custom-game-root"],null,[["selected","showingState","showInviteModal"],[["get",["selected"]],["get",["showingState"]],"showInviteModal"]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","empty-header-spacer"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1),
          s = r(n(19)),
          o = r(n(87)),
          a = r(n(22));
        function r(e) {
          return e && e.__esModule ? e : { default: e };
        }
        e.exports = i.Ember.Component.extend(s.default, {
          gameflowService: i.Ember.inject.service("gameflow"),
          assets: i.Ember.inject.service(),
          classNameBindings: ["stateMachine"],
          isShowingLobby: !0,
          mapId: i.Ember.computed.readOnly("selected.mapId"),
          gameMode: i.Ember.computed.readOnly("selected.gameMode"),
          assetMutator: i.Ember.computed.readOnly("selected.assetMutator"),
          queueId: i.Ember.computed.readOnly("selected.queueId"),
          insertListener: i.Ember.on("didInsertElement", function () {
            this.attachScreenRoot();
          }),
          attachScreenRoot: function () {
            i.Viewport.main()
              .getScreenRoot(
                a.default.get("viewportApiKey"),
                "rcp-fe-lol-parties",
              )
              .on("show", () => {
                this.determineState();
              });
          },
          lobbyAmbience: i.Ember.computed(
            "mapId",
            "assets.availableMaps",
            function () {
              return this.getMapSoundUrl("sfx-ambience-pregame-loop-sound");
            },
          ),
          matchmakingMusic: i.Ember.computed(
            "queueId",
            "assets.availableMaps",
            function () {
              return this.getMapSoundUrl("music-inqueue-loop-sound");
            },
          ),
          isLobby: i.Ember.computed.readOnly("gameflowService.isLobby"),
          isInQueue: i.Ember.computed.or(
            "gameflowService.isMatchmaking",
            "gameflowService.isReadyCheck",
          ),
          isChampSelect: i.Ember.computed.readOnly(
            "gameflowService.isChampSelect",
          ),
          stateMachine: i.Ember.computed(
            "lobbyAmbience",
            "isChampSelect",
            "isInQueue",
            function () {
              return this.determineState();
            },
          ),
          determineState: function () {
            if (this.get("isChampSelect"))
              return o.default.stop(), "champSelect";
            if (this.get("isInQueue")) {
              const e = this.get("matchmakingMusic");
              return e && o.default.playMusic(e), "queue";
            }
            if (this.get("isLobby")) {
              const e = this.get("lobbyAmbience");
              return e && o.default.playAmbience(e), "lobby";
            }
          },
        });
      },
      (e, t, n) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.default = void 0);
        var i = n(1),
          s = r(n(88)),
          o = r(n(22)),
          a = n(89);
        function r(e) {
          return e && e.__esModule ? e : { default: e };
        }
        var l = new (class {
          constructor() {
            (this.sfxChannel = new s.default("sfx-ambience")),
              (this.musicChannel = new s.default("music-ambience")),
              (this.isPlaying = null),
              this.attachToScreenRoot();
          }
          attachToScreenRoot() {
            i.Viewport.main()
              .getScreenRoot(
                o.default.get("viewportApiKey"),
                "rcp-fe-lol-parties",
              )
              .on("hide", () => {
                this.isPlaying === a.SOUND_TYPE_AMBIENCE &&
                  (this.sfxChannel.stop(), (this.isPlaying = null));
              });
          }
          playAmbience(e) {
            this.isPlaying === a.SOUND_TYPE_MUSIC && this.musicChannel.stop(),
              (this.isPlaying = a.SOUND_TYPE_AMBIENCE),
              this.sfxChannel.play(e, { allowConcurrency: !1 });
          }
          playMusic(e) {
            this.isPlaying === a.SOUND_TYPE_AMBIENCE && this.sfxChannel.stop(),
              (this.isPlaying = a.SOUND_TYPE_MUSIC),
              this.musicChannel.play(e, { allowConcurrency: !1 });
          }
          stop() {
            this.isPlaying === a.SOUND_TYPE_AMBIENCE
              ? this.sfxChannel.stop()
              : this.isPlaying === a.SOUND_TYPE_MUSIC &&
                this.musicChannel.stop(),
              (this.isPlaying = null);
          }
        })();
        t.default = l;
      },
      (e, t, n) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.default = void 0);
        var i = n(1);
        var s = class {
          constructor(e) {
            (this.channelName = e),
              (this.channel = i.Audio.getChannel(e)),
              (this.playingSound = !1),
              (this.currentSoundUrl = !1);
          }
          _createSound(e) {
            return this.channel.createSound(e, { fadeIn: !0, isLoop: !0 });
          }
          play(e) {
            return this.currentSoundUrl === e
              ? Promise.resolve()
              : this.playingSound && this.playingSound.isPlaying()
                ? void (
                    this.playingSound.isPlaying() &&
                    this.playingSound
                      .stop()
                      .then(() => this._actuallyPlay(e))
                      .catch(() => this._actuallyPlay(e))
                  )
                : this._actuallyPlay(e);
          }
          _actuallyPlay(e) {
            return (
              i.logger.trace(`Playing ${this.channelName} ${e}`),
              (this.currentSoundUrl = e),
              (this.playingSound = this._createSound(e)),
              this.playingSound.on("stop", (e) => (e.dispose(), null)),
              this.playingSound.play()
            );
          }
          stop(e) {
            this.playingSound &&
              (i.logger.trace(
                `Stopping ${this.channelName} ${this.currentSoundUrl}`,
              ),
              this.playingSound.isPlaying() &&
                ((e = e || 100),
                this.playingSound.fadeOut(e, { stop: !0 }).catch(() => {})),
              (this.playingSound = !1),
              (this.currentSoundUrl = !1));
          }
        };
        t.default = s;
      },
      (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.SOUND_TYPE_MUSIC = t.SOUND_TYPE_AMBIENCE = void 0);
        t.SOUND_TYPE_AMBIENCE = 1;
        t.SOUND_TYPE_MUSIC = 2;
      },
      (e, t, n) => {
        "use strict";
        var i,
          s = n(1),
          o = (i = n(19)) && i.__esModule ? i : { default: i };
        n(91),
          (e.exports = s.Ember.Component.extend(o.default, {
            layout: n(92),
            assets: s.Ember.inject.service(),
            customGamesService: s.Ember.inject.service("custom-games"),
            partySettingsService: s.Ember.inject.service("party-settings"),
            bannerAnimationsEnabled: s.Ember.computed.alias(
              "partySettingsService.bannerAnimationsEnabled",
            ),
            classNames: ["parties-background"],
            classNameBindings: [
              "isShowingParty",
              "isShowingGameSelect",
              "bgVerticalAnimation",
              "isCustomGame",
            ],
            backgroundAssets: s.Ember.computed.alias("assets.backgroundAssets"),
            haveBackgroundAssets: s.Ember.computed.gt(
              "backgroundAssets.length",
              0,
            ),
            currentBackgroundUrl: s.Ember.computed(
              "backgroundAssets",
              "selected.mapId",
              "selected.gameMode",
              "selected.assetMutator",
              function () {
                const e = this.get("selected");
                return this._backgroundById(
                  e.mapId,
                  e.gameMode,
                  e.assetMutator,
                );
              },
            ),
            transitionType: s.Ember.computed(
              "bannerAnimationsEnabled",
              function () {
                return this.get("bannerAnimationsEnabled") ? "fade" : "none";
              },
            ),
            isShowingParty: s.Ember.computed.alias(
              "showingState.isShowingParty",
            ),
            isShowingGameSelect: s.Ember.computed.alias(
              "showingState.isShowingGameSelect",
            ),
            isCustomGame: s.Ember.computed.alias(
              "customGamesService.isCustomUI",
            ),
            bgVerticalAnimation: s.Ember.computed(
              "isShowingParty",
              "isShowingGameSelect",
              function () {
                const e = this.get("isShowingParty"),
                  t = this.get("isShowingGameSelect");
                let n,
                  i = "";
                return (
                  e
                    ? ((i = "parties-top-to-btm"),
                      (n = "/fe/lol-parties/sfx-gameselect-trans-to-lobby.ogg"))
                    : t &&
                      ((i = "parties-btm-to-top"),
                      (n =
                        "/fe/lol-parties/sfx-lobby-trans-to-gameselect.ogg")),
                  this.get("showingState.showVerticalAnimation")
                    ? ((this.get("bannerAnimationsEnabled") &&
                        this.get("showingState.isShowingLeagueBanner")) ||
                        this.playSound(n),
                      this.set("selected.animationLock", !0),
                      i)
                    : ""
                );
              },
            ),
            didInsertElementListener: s.Ember.on(
              "didInsertElement",
              function () {
                this.element
                  .querySelector(".bg-current")
                  .addEventListener("animationend", () => {
                    this.onAnimationEnd();
                  }),
                  s.Viewport.sidebar().on(
                    "backgroundUnset",
                    this._setSidebarBackground.bind(this),
                  );
              },
            ),
            onAnimationEnd: function () {
              this.set("showingState.showVerticalAnimation", !1),
                this.set("selected.animationLock", !1);
            },
            _backgroundById: function (e, t, n) {
              let i = this.get("assets").getBackgroundAsset(e, t, n);
              i ||
                (i = this.get("backgroundAssets").find(
                  (t) => t.id === e && t.isDefault,
                ));
              let s = "";
              i && i.url && (s = i.url);
              let o = "";
              return (
                i && i.sidebarBackgroundColor && (o = i.sidebarBackgroundColor),
                this.set("sidebarBackgroundColor", o),
                this._setSidebarBackground(),
                s
              );
            },
            _setSidebarBackground: function () {
              const e = s.Viewport.main().getCurrentScreenRoot();
              e &&
                e._id &&
                "rcp-fe-lol-parties" === e._id.name &&
                s.Viewport.sidebar().setBackgroundGradient(
                  this.get("sidebarBackgroundColor"),
                );
            },
          }));
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "GMS1Y6BZ",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\background-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\background-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\background-component\\\\index.js\\" "],["text","\\n"],["append",["helper",["uikit-background-switcher"],null,[["class","src","transitionType"],[["get",["isMatchmakingClassName"]],["get",["currentBackgroundUrl"]],["get",["transitionType"]]]]],false],["text","\\n\\n"],["open-element","div",[]],["static-attr","class","parties-background-mask"],["flush-element"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1),
          s = c(n(19)),
          o = c(n(94)),
          a = n(57),
          r = n(95),
          l = c(n(96));
        function c(e) {
          return e && e.__esModule ? e : { default: e };
        }
        n(98),
          (e.exports = i.Ember.Component.extend(o.default, s.default, {
            layout: n(99),
            customGamesService: i.Ember.inject.service("custom-games"),
            lobbiesService: i.Ember.inject.service("lobbies"),
            assets: i.Ember.inject.service(),
            isCustomGame: i.Ember.computed.alias(
              "customGamesService.isCustomUI",
            ),
            mapId: i.Ember.computed.alias("selected.mapId"),
            gameMode: i.Ember.computed.alias("selected.queue.gameMode"),
            assetMutator: i.Ember.computed.alias("selected.queue.assetMutator"),
            category: i.Ember.computed.alias("selected.queue.category"),
            pickType: i.Ember.computed.alias("selected.pickType"),
            queueId: i.Ember.computed.alias("selected.queueId"),
            isTFT: i.Ember.computed.alias("customGamesService.isTFT"),
            tutorialData: i.Ember.computed(
              "assets.availableMaps",
              "mapId",
              "gameMode",
              "assetMutator",
              function () {
                const e = { tutorialCards: [], title: null, subheader: null },
                  t = this.get("assets").getMap(
                    this.get("mapId"),
                    this.get("gameMode"),
                    this.get("assetMutator"),
                  );
                return (
                  t &&
                    (Array.isArray(t.tutorialCards) &&
                      (e.tutorialCards = t.tutorialCards),
                    (e.title = t.locStrings.tutorial_title),
                    (e.subheader = t.locStrings.tutorial_subheader),
                    (e.tutorialBg = t.assets["tutorial-bg"] || ""),
                    (e.iconV2 = t.assets["icon-v2"] || "")),
                  e
                );
              },
            ),
            hasGameModeTutorial: i.Ember.computed.alias(
              "tutorialData.tutorialCards.length",
            ),
            isNotTFT: i.Ember.computed.not("lobbiesService.isTFT"),
            showMapNameAndTeamSize: i.Ember.computed.and("isNotTFT"),
            showPointEligibility: i.Ember.computed.and("isNotTFT"),
            mapName: i.Ember.computed(
              "mapId",
              "assets.availableMaps",
              function () {
                const e = this.get("mapId"),
                  t = this.get("assetMutator");
                return this.get("assets").getMap(e, this.get("gameMode"), t)
                  .name;
              },
            ),
            customGameName: i.Ember.computed.alias(
              "customGamesService.gameName",
            ),
            customTeamSize: i.Ember.computed.alias(
              "customGamesService.teamSize",
            ),
            customMutatorName: i.Ember.computed(
              "customGamesService.mutatorName",
              "tra.ready",
              "tra.custom_game_mutator_type_blind",
              function () {
                const e = this.get("customGamesService.mutatorName");
                return a.CUSTOM_GAME_MUTATOR_NAMES[e]
                  ? this.get(
                      `tra.custom_game_mutator_type_${a.CUSTOM_GAME_MUTATOR_NAMES[e]}`,
                    )
                  : e;
              },
            ),
            queueName: i.Ember.computed(
              "queueId",
              "queues.platformJson",
              function () {
                const e = this.get("queueId"),
                  t = this.get("queues.platformJson"),
                  n = e && Array.isArray(t) ? t.find((t) => t.id === e) : null;
                return n ? n.shortName : "";
              },
            ),
            pickTypeNameHidden: i.Ember.computed.empty("pickTypeName"),
            pickTypeName: i.Ember.computed(
              "pickType",
              "tra.ready",
              "lobbiesService.isMap21",
              "lobbiesService.isTFT",
              "tra.game_select_pick_type_name_blind",
              function () {
                if (this.get("lobbiesService.isTFT")) return "";
                if (this.get("lobbiesService.isMap21"))
                  return this.get("tra.game_select_pick_type_name_blind");
                const e = this.get("pickType");
                return e ? this.get(`tra.game_select_pick_type_name_${e}`) : "";
              },
            ),
            teamSize: i.Ember.computed(
              "selected.maxPlaying",
              "isCustomGame",
              "customTeamSize",
              function () {
                let e;
                return (
                  (e = this.get("isCustomGame")
                    ? this.get("customTeamSize")
                    : this.get("selected.maxPlaying")),
                  e ? this.translate("game_select_team_size", { size: e }) : ""
                );
              },
            ),
            mapBackgroundClass: i.Ember.computed(
              "mapId",
              "gameMode",
              "assets.availableMaps",
              "assetMutator",
              function () {
                const e = this.get("assets").getMap(
                  this.get("mapId"),
                  this.get("gameMode"),
                  this.get("assetMutator"),
                );
                return e
                  ? l.default.mapKey({ mapId: e.id, gameMode: e.gameMode })
                  : "";
              },
            ),
            didInsertElement() {
              this._super(...arguments);
              if (this.get("tutorialData").tutorialCards.length > 0) {
                const e = this.get("mapId"),
                  t = this.get("gameMode"),
                  n = this.get("tutorialData"),
                  s = this.get("assetMutator");
                i.PartyAPI._showGameModeTutorialIfNeeded(
                  e,
                  t,
                  n.tutorialCards,
                  s,
                  n.title,
                  n.subheader,
                  n.tutorialBg,
                  n.iconV2,
                );
              }
            },
            actions: {
              showGameModeTutorial: function () {
                this.playSound(r.SFX_URLS.SFX_SOC_UI_CLICK_GENERIC);
                const e = this.get("gameMode"),
                  t = this.get("tutorialData");
                i.PartyAPI._showGameModeTutorial(
                  e,
                  t.tutorialCards,
                  t.title,
                  t.subheader,
                  t.tutorialBg,
                  t.iconV2,
                );
              },
            },
          }));
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        e.exports = i.Ember.Mixin.create({
          translate: function (e, t) {
            return this.get("tra.formatString")(e, t);
          },
        });
      },
      (e) => {
        "use strict";
        e.exports = {
          SFX_CHANNEL: "sfx-ui",
          SFX_URLS: {
            SFX_UIKIT_CLICK_AND_SLIDE:
              "/fe/lol-uikit/sfx-uikit-click-and-slide.ogg",
            SFX_SOC_UI_CLICK_GENERIC:
              "/fe/lol-parties/sfx-soc-ui-click-generic.ogg",
            SFX_COMPANION_PICKER_HOVER:
              "/fe/lol-parties/sfx-uikit-grid-hover.ogg",
            SFX_COMPANION_PICKER_CLICK:
              "/fe/lol-parties/sfx-uikit-grid-click.ogg",
            SFX_DROPDOWN_CLICK:
              "fe/rcp-fe-lol-uikit/audio/sfx-uikit-dropdown-click.ogg",
            SFX_LOADOUT_RARITY_CLICK:
              "/fe/lol-static-assets/sounds/sfx-loadout-rarity-button-click.ogg",
            SFX_LOADOUT_FAVORITES_CLICK:
              "/fe/lol-static-assets/sounds/sfx-uikit-button-generic-click.ogg",
            SFX_STAR_SHARDS_PURCHASE:
              "/fe/lol-parties/sfx-starshards-button-release.ogg",
            SFX_STAR_SHARDS_SUCCESS:
              "/fe/lol-parties/sfx-starshards-success.ogg",
            SFX_STAR_SHARDS_CELEBRATION:
              "/fe/lol-parties/sfx-celebrate-upgrade-littlelegend.ogg",
            SFX_RADIALMENU_OPEN: "/fe/lol-parties/sfx-radialmenu-open.ogg",
            SFX_RADIALMENU_ROLE_SELECT:
              "/fe/lol-parties/sfx-radialmenu-role-select.ogg",
            SFX_RADIALMENU_ROLE_HOVER:
              "/fe/lol-parties/sfx-radialmenu-role-hover.ogg",
            SFX_RADIALMENU_PRIMARY_CLOSE:
              "/fe/lol-parties/sfx-radialmenu-role-primary.ogg",
            SFX_RADIALMENU_SECONDARY_CLOSE:
              "/fe/lol-parties/sfx-radialmenu-role-secondary.ogg",
            SFX_FIND_MATCH_CLICK:
              "/fe/lol-parties/sfx-lobby-button-find-match-click.ogg",
            SFX_FIND_MATCH_HOVER:
              "/fe/lol-parties/sfx-lobby-button-find-match-hover.ogg",
            SFX_LOBBY_QUIT_CLICK:
              "/fe/lol-parties/sfx-lobby-button-quit-click.ogg",
            SFX_LOBBY_QUIT_HOVER:
              "/fe/lol-parties/sfx-lobby-button-quit-hover.ogg",
            SFX_GOLD_HOVER: "/fe/lol-uikit/sfx-uikit-button-gold-hover.ogg",
            SFX_GOLD_CLICK: "/fe/lol-uikit/sfx-uikit-button-gold-click.ogg",
          },
        };
      },
      (e, t, n) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.default = void 0);
        var i,
          s = n(1),
          o = (i = n(7)) && i.__esModule ? i : { default: i },
          a = n(97);
        var r = {
          isGameInviteAcceptable: function (e, t, n, i, s) {
            if (e && e.gameConfig && i) {
              const i = !!n && "dnd" !== n.availability,
                o = !!t && t.bypassEligibilityCheck;
              return (
                s && i && "Pending" === e.state && (o || e.canAcceptInvitation)
              );
            }
            return !1;
          },
          isReadyForGame: function (e) {
            const t = e || {},
              n = "Patching" === t.action || "Repairing" === t.action,
              i = !t.isUpToDate && "CheckingForUpdates" === t.action;
            return !n && !i;
          },
          gameType: function (e) {
            if (e) {
              if (a.CUSTOM_GAME_TYPES.indexOf(e.inviteGameType) > -1)
                return s.tra.get("parties_game_type_practice");
              const t = o.default.getMapModeInfo(e.mapId, e.gameMode);
              if (t && t.isRGM) return s.tra.get("parties_game_type_featured");
              const n = o.default.getQueueById(e.queueId);
              return n
                ? n.category === a.BOT_GAME_TYPE
                  ? s.tra.get("parties_game_type_coop_vs_ai")
                  : n.description
                : "";
            }
          },
          mapKey: function (e) {
            if (e) {
              const t = o.default.getMapModeInfo(e.mapId, e.gameMode);
              return t && t.isRGM
                ? "game_map_rotating_game_mode"
                : a.MAP_TO_I18N_KEY[e.mapId];
            }
          },
        };
        t.default = r;
      },
      (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.MAP_TO_I18N_KEY = t.CUSTOM_GAME_TYPES = t.BOT_GAME_TYPE = void 0);
        t.MAP_TO_I18N_KEY = {
          8: "game_map_crystal_scar",
          10: "game_map_twisted_treeline",
          11: "game_map_summoners_rift",
          12: "game_map_howling_abyss",
          16: "game_map_cosmic_ruins",
          21: "game_map_21",
          22: "game_map_22",
          30: "game_map_30",
        };
        t.CUSTOM_GAME_TYPES = ["PRACTICE_GAME", "CUSTOM_GAME"];
        t.BOT_GAME_TYPE = "VersusAi";
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "erw7/cet",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\header-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\header-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\header-component\\\\index.js\\" "],["text","\\n"],["block",["if"],[["get",["isCustomGame"]]],null,6,4]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","            "],["open-element","div",[]],["static-attr","class","lobby-header-eligibility lobby-header-interactable"],["flush-element"],["text","\\n              "],["append",["helper",["point-eligibility"],null,[["selected","isCustomGame"],[["get",["selected"]],false]]],false],["text","\\n            "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","            "],["open-element","lol-uikit-info-icon",[]],["static-attr","class","show-tutorial-button lobby-header-interactable"],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"showGameModeTutorial"],null],null],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","            "],["open-element","div",[]],["static-attr","class","lobby-header-separator"],["flush-element"],["close-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","lobby-header-sub-detail-regalia"],["flush-element"],["append",["unknown",["mapName"]],false],["close-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","lobby-header-sub-detail-regalia small-spacing"],["flush-element"],["append",["unknown",["teamSize"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","            "],["open-element","div",[]],["static-attr","class","lobby-header-separator"],["flush-element"],["close-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","lobby-header-detail-regalia"],["flush-element"],["append",["unknown",["pickTypeName"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","\\n  "],["open-element","div",[]],["static-attr","class","parties-header-container"],["dynamic-attr","data-parties-selected-category",["concat",[["unknown",["selected","category"]]]]],["dynamic-attr","data-parties-selected-queue-id",["concat",[["unknown",["selected","queueId"]]]]],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","lobby-header-wrapper"],["flush-element"],["text","\\n      "],["open-element","div",[]],["dynamic-attr","class",["concat",["lobby-header-map-icon ",["unknown",["mapBackgroundClass"]]]]],["flush-element"],["close-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","lobby-header-right-regalia"],["flush-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","lobby-header-details-container-regalia"],["flush-element"],["text","\\n          "],["open-element","div",[]],["static-attr","class","lobby-header-detail-regalia"],["flush-element"],["append",["unknown",["queueName"]],false],["close-element"],["text","\\n"],["block",["unless"],[["get",["pickTypeNameHidden"]]],null,3],["text","        "],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","lobby-header-details-container-regalia"],["flush-element"],["text","\\n"],["block",["if"],[["get",["showMapNameAndTeamSize"]]],null,2],["block",["if"],[["get",["hasGameModeTutorial"]]],null,1],["block",["if"],[["get",["showPointEligibility"]]],null,0],["text","        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n\\n"]],"locals":[]},{"statements":[["text","            "],["open-element","span",[]],["static-attr","class","lobby-header-game-type-detail"],["flush-element"],["append",["unknown",["teamSize"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","\\n  "],["open-element","div",[]],["static-attr","class","parties-header-container custom-header-container"],["dynamic-attr","data-parties-selected-category",["concat",[["unknown",["selected","category"]]]]],["dynamic-attr","data-parties-selected-queue-id",["concat",[["unknown",["selected","queueId"]]]]],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","lobby-header-wrapper custom-header-wrapper"],["flush-element"],["text","\\n      "],["open-element","div",[]],["dynamic-attr","class",["concat",["lobby-header-map-icon ",["unknown",["mapBackgroundClass"]]]]],["flush-element"],["close-element"],["text","\\n\\n      "],["open-element","div",[]],["static-attr","class","lobby-header-right"],["flush-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","lobby-header-details"],["flush-element"],["text","\\n          "],["open-element","span",[]],["static-attr","class","lobby-header-detail uppercase"],["flush-element"],["append",["unknown",["customGameName"]],false],["close-element"],["text","\\n        "],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","lobby-header-game-type-details"],["flush-element"],["text","\\n          "],["open-element","span",[]],["static-attr","class","lobby-header-game-type-detail lobby-header-custom-map-name"],["flush-element"],["append",["unknown",["mapName"]],false],["close-element"],["text","\\n"],["block",["unless"],[["get",["isTFT"]]],null,5],["text","          "],["open-element","span",[]],["static-attr","class","lobby-header-game-type-detail"],["flush-element"],["append",["unknown",["customMutatorName"]],false],["close-element"],["text","\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n\\n"]],"locals":[]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        n(101),
          (e.exports = i.Ember.Component.extend({
            layout: n(102),
            classNames: ["parties-debug-tools"],
            selectedTab: "queues",
            selectedTabIsQueues: i.Ember.computed("selectedTab", function () {
              return "queues" === this.get("selectedTab");
            }),
            selectedTabIsCustoms: i.Ember.computed("selectedTab", function () {
              return "customs" === this.get("selectedTab");
            }),
            handleDidInsertElement: i.Ember.on("didInsertElement", function () {
              this.set("_keyDown", this.onKeyDown.bind(this)),
                document.addEventListener("keydown", this.get("_keyDown"));
            }),
            handleWillDestroyElement: i.Ember.on(
              "willDestroyElement",
              function () {
                document.removeEventListener("keydown", this.get("_keyDown"));
              },
            ),
            onKeyDown: function (e) {
              e.ctrlKey &&
                89 === e.keyCode &&
                this.$(".parties-debug-queues").toggle();
            },
            actions: {
              selectTab(e) {
                this.set("selectedTab", e);
              },
            },
          }));
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "qPBTuTBm",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\debug-tools-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\debug-tools-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\debug-tools-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","parties-debug-queues"],["flush-element"],["text"," \\n  "],["open-element","h1",[]],["static-attr","class","parties-debug-title"],["flush-element"],["text","PARTIES - DEBUG"],["close-element"],["text","\\n  "],["open-element","span",[]],["static-attr","class","parties-debug-tip"],["flush-element"],["text","[ctrl-y to dismiss]"],["close-element"],["text","\\n  "],["open-element","lol-uikit-navigation-bar",[]],["static-attr","type","nav-bar-secondary"],["static-attr","direction","left"],["static-attr","selectedIndex","0"],["flush-element"],["text","\\n    "],["open-element","lol-uikit-navigation-item",[]],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"selectTab","queues"],null],null],["flush-element"],["text","Queues"],["close-element"],["text","\\n    "],["open-element","lol-uikit-navigation-item",[]],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"selectTab","customs"],null],null],["flush-element"],["text","Custom Games"],["close-element"],["text","\\n  "],["close-element"],["text","\\n\\n  "],["open-element","div",[]],["static-attr","class","parties-debug-tab-content"],["flush-element"],["text","\\n"],["block",["if"],[["get",["selectedTabIsQueues"]]],null,1],["block",["if"],[["get",["selectedTabIsCustoms"]]],null,0],["text","  "],["close-element"],["text","\\n"],["close-element"],["text"," \\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["append",["unknown",["parties-debug-custom-lobby"]],false],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["append",["helper",["parties-debug-queue-lobby"],null,[["selected","showingState"],[["get",["selected"]],["get",["showingState"]]]]],false],["text"," \\n"]],"locals":[]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i,
          s = n(1),
          o = (i = n(10)) && i.__esModule ? i : { default: i };
        n(104);
        var a = n(105);
        e.exports = s.Ember.Component.extend({
          layout: n(106),
          classNames: ["parties-debug-custom-lobby"],
          assetsService: s.Ember.inject.service("assets"),
          customGamesService: s.Ember.inject.service("custom-games"),
          platformConfigSingleton: o.default,
          availableMaps: s.Ember.computed.alias("assetsService.availableMaps"),
          availableModes: s.Ember.computed.alias(
            "platformConfigSingleton.enabledCustomGameModes",
          ),
          defaultGameName: s.Ember.computed.alias(
            "customGamesService.defaultGameName",
          ),
          supportedMapSummaries: s.Ember.computed(
            "availableMaps",
            "availableModes",
            function () {
              const e = this.get("availableMaps"),
                t = this.get("availableModes"),
                n = this._mapsById(e),
                i = s.Ember.A(this._reduceToMapSummaries(n, t)),
                o = this.get("selectedMapId"),
                a = this.get("selectedModeId");
              for (let e = i.length - 1; e >= 0; --e)
                if (i[e].mapId === o || 0 === e) {
                  const t = i[e];
                  (t.selected = !0), this.set("selectedMapId", t.mapId);
                  let n = t.supportedModes[0];
                  if (a) {
                    const e = t.supportedModes.find((e) => e.id === a);
                    e && (n = e);
                  }
                  (n.selected = !0), this.set("selectedModeId", n.id);
                  break;
                }
              return i;
            },
          ),
          selectedMapId: 11,
          selectedModeId: null,
          selectedTeamSize: 5,
          selectedChampSelectId: 1,
          selectedGameServerRegion: null,
          errorText: null,
          selectedMapSummary: s.Ember.computed(
            "supportedMapSummaries",
            "selectedMapId",
            function () {
              const e = this.get("supportedMapSummaries"),
                t = this.get("selectedMapId");
              let n = null;
              if (e && t) {
                const i = e.find((e) => e.mapId === t);
                i && (n = i);
              }
              return n;
            },
          ),
          selectedModeSummary: s.Ember.computed(
            "selectedMapSummary",
            "selectedModeId",
            function () {
              const e = this.get("selectedMapSummary"),
                t = this.get("selectedModeId");
              let n = null;
              if (e && t) {
                const i = e.supportedModes.find((e) => e.id === t);
                i && (n = i);
              }
              return n;
            },
          ),
          teamSizeOptions: s.Ember.computed(function () {
            const e = [],
              t = this.get("selectedTeamSize");
            for (let n = 1; n <= 5; ++n)
              e.push({ value: n, selected: t === n });
            return e;
          }),
          champSelectStrategyOptions: s.Ember.computed(
            "selectedChampSelectId",
            function () {
              const e = s.Ember.A(),
                t = this.get("selectedChampSelectId");
              return (
                a.DEBUG_CHAMP_SELECT_STRATEGIES.forEach((n) => {
                  const i = {
                    name: n.name,
                    id: n.id,
                    selected: t === n.id || void 0,
                  };
                  e.push(i);
                }),
                e
              );
            },
          ),
          createButtonEnabled: s.Ember.computed(
            "selectedModeSummary",
            function () {
              const e = this.get("selectedModeSummary");
              return e && e.enabled;
            },
          ),
          gameServerRegionOptions: s.Ember.computed.alias(
            "customGamesService.gameServerRegionOptions",
          ),
          _mapsById: function (e) {
            const t = {};
            return (
              e.forEach((e) => {
                const n = e.id;
                t[n] || (t[n] = []), t[n].push(e);
              }),
              t
            );
          },
          _reduceToMapSummaries: function (e, t) {
            const n = [];
            return (
              Object.keys(e).forEach((i) => {
                let s = e[i];
                s.sort((e, t) => (e.gameMutator ? 1 : t.gameMutator ? -1 : 0));
                const o = [];
                s = s.filter(
                  (e) => !o.includes(e.gameMode) && (o.push(e.gameMode), !0),
                );
                const a = this._reduceToMapSummary(s, t);
                a && n.push(a);
              }),
              n
            );
          },
          _reduceToMapSummary: function (e, t) {
            let n = null;
            return (
              e.length > 0 &&
                ((n = {
                  mapId: e[0].id,
                  mapName: e[0].name,
                  supportedModes: [],
                }),
                n.mapName || (n.mapName = `Map ${n.mapId}`),
                e.forEach((e) => {
                  const i = {
                    id: `${n.mapId}-${e.gameMode}`,
                    name: e.gameModeName,
                    gameMode: e.gameMode,
                    enabled: t && t.includes(e.gameMode),
                  };
                  n.supportedModes.push(i);
                })),
              n
            );
          },
          _setSelectedMapId: function (e) {
            const t = this.get("selectedMapId");
            if ((this.set("selectedMapId", e), e !== t)) {
              const e = this.get("selectedMapSummary");
              e && this.set("selectedModeId", e.supportedModes[0].id);
            }
          },
          _clearErrorText: function () {
            this.set("errorText", null);
          },
          _nameInputElement: function () {
            return this.element
              ? this.element.querySelector("input#debug-custom-game-name")
              : null;
          },
          getLobbyName: function () {
            const e = this._nameInputElement();
            return e && e.value ? e.value : this.get("defaultGameName");
          },
          _buildV2LobbyPayload: function () {
            const e = this.get("selectedMapSummary"),
              t = this.get("selectedModeSummary"),
              n = this.get("selectedTeamSize"),
              i = this.get("selectedChampSelectId"),
              s = this.get("selectedGameServerRegion"),
              o = this.getLobbyName(),
              a = {
                customGameLobby: {
                  configuration: {
                    gameMode: t.gameMode,
                    mapId: e.mapId,
                    gameTypeConfig: { id: i },
                    spectatorPolicy: "AllAllowed",
                    teamSize: n,
                  },
                  lobbyName: o,
                },
                isCustom: !0,
              };
            return (
              s &&
                "default" !== s.toLowerCase() &&
                (a.customGameLobby.configuration.gameServerRegion = s),
              a
            );
          },
          _createDebugCustomLobby: function () {
            const e = this._buildV2LobbyPayload(),
              t = "v2/lobby";
            return (
              s.logger.trace(
                `Creating DEBUG custom-game using /lol-lobby/${t} endpoint: ${JSON.stringify(e)}`,
              ),
              (0, s.dataBinding)("/lol-lobby")
                .post(t, e)
                .catch((e) => Promise.reject(e))
            );
          },
          actions: {
            createDebugLobby() {
              this._clearErrorText(),
                this._createDebugCustomLobby().then(null, (e) => {
                  this.set("errorText", JSON.stringify(e, null, 2));
                });
            },
            toggleAdvancedOptions() {
              const e = "hidden",
                t = this.$(".parties-debug-advanced-options");
              t.hasClass(e) ? t.removeClass(e) : t.addClass(e);
            },
            selectMap(e) {
              this._clearErrorText(), this._setSelectedMapId(e);
            },
            selectMode(e) {
              this._clearErrorText(), this.set("selectedModeId", e);
            },
            selectTeamSize(e) {
              this._clearErrorText(), this.set("selectedTeamSize", e);
            },
            selectChampSelectId(e) {
              this._clearErrorText(), this.set("selectedChampSelectId", e);
            },
            selectGameServerRegion(e) {
              this._clearErrorText(), this.set("selectedGameServerRegion", e);
            },
          },
        });
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.DEBUG_CHAMP_SELECT_STRATEGIES = void 0);
        t.DEBUG_CHAMP_SELECT_STRATEGIES = [
          { name: "Blind", id: 1 },
          { name: "OFA Vote", id: 14 },
        ];
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "0kqt7XpC",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\debug-tools-component\\\\debug-custom-lobby-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\debug-tools-component\\\\debug-custom-lobby-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\debug-tools-component\\\\debug-custom-lobby-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","parties-debug-custom-lobby"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","parties-debug-custom-game-config"],["flush-element"],["text","\\n    "],["open-element","lol-uikit-scrollable",[]],["flush-element"],["text","\\n      "],["open-element","label",[]],["static-attr","for","parties-debug-maps-dropdown"],["flush-element"],["text","Map"],["close-element"],["text","\\n      "],["open-element","lol-uikit-framed-dropdown",[]],["static-attr","id","parties-debug-maps-dropdown"],["flush-element"],["text","\\n"],["block",["each"],[["get",["supportedMapSummaries"]]],null,8],["text","      "],["close-element"],["text","\\n\\n"],["block",["if"],[["get",["selectedMapSummary"]]],null,7],["text","\\n"],["block",["if"],[["get",["selectedModeSummary"]]],null,4],["text","    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n\\n  "],["open-element","label",[]],["static-attr","for","parties-debug-game-name-input"],["flush-element"],["text","Game Name"],["close-element"],["text","\\n  "],["open-element","lol-uikit-flat-input",[]],["static-attr","id","parties-debug-game-name-input"],["flush-element"],["text","\\n    "],["open-element","input",[]],["static-attr","type","text"],["static-attr","name","debug-custom-game-name"],["static-attr","id","debug-custom-game-name"],["dynamic-attr","value",["concat",[["unknown",["defaultGameName"]]]]],["static-attr","maxlength","30"],["flush-element"],["close-element"],["text","\\n  "],["close-element"],["text","\\n\\n  "],["open-element","label",[]],["static-attr","for","parties-debug-advanced-options"],["modifier",["action"],[["get",[null]],"toggleAdvancedOptions"],[["on"],["click"]]],["flush-element"],["text","Show Advanced Options"],["close-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","parties-debug-advanced-options hidden"],["flush-element"],["text","\\n    "],["open-element","label",[]],["static-attr","for","parties-debug-game-server-region-dropdown"],["flush-element"],["text","Game Region"],["close-element"],["text","\\n    "],["open-element","lol-uikit-framed-dropdown",[]],["static-attr","id","parties-debug-game-server-region-dropdown"],["flush-element"],["text","\\n      "],["open-element","lol-uikit-dropdown-option",[]],["static-attr","slot","lol-uikit-dropdown-option"],["static-attr","selected","true"],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"selectGameServerRegion","default"],null],null],["flush-element"],["text","Default"],["close-element"],["text","\\n"],["block",["each"],[["get",["gameServerRegionOptions"]]],null,1],["text","    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n\\n"],["block",["if"],[["get",["errorText"]]],null,0],["text","  "],["open-element","lol-uikit-flat-button",[]],["dynamic-attr","disabled",["helper",["if"],[["get",["createButtonEnabled"]],null,true],null],null],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"createDebugLobby"],null],null],["flush-element"],["text","Create Lobby"],["close-element"],["text"," \\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","parties-debug-custom-lobby-error"],["flush-element"],["text","\\n    "],["open-element","lol-uikit-scrollable",[]],["flush-element"],["text","\\n    "],["append",["unknown",["errorText"]],false],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","lol-uikit-dropdown-option",[]],["static-attr","slot","lol-uikit-dropdown-option"],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"selectGameServerRegion",["get",["gameServerRegionOption","value"]]],null],null],["flush-element"],["text","\\n          "],["append",["unknown",["gameServerRegionOption","value"]],false],["text","\\n        "],["close-element"],["text","\\n"]],"locals":["gameServerRegionOption"]},{"statements":[["text","        "],["open-element","lol-uikit-dropdown-option",[]],["static-attr","slot","lol-uikit-dropdown-option"],["dynamic-attr","selected",["unknown",["champSelectOption","selected"]],null],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"selectChampSelectId",["get",["champSelectOption","id"]]],null],null],["flush-element"],["text","\\n        "],["append",["unknown",["champSelectOption","name"]],false],["text","\\n        "],["close-element"],["text","\\n"]],"locals":["champSelectOption"]},{"statements":[["text","        "],["open-element","lol-uikit-dropdown-option",[]],["static-attr","slot","lol-uikit-dropdown-option"],["dynamic-attr","selected",["unknown",["sizeOption","selected"]],null],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"selectTeamSize",["get",["sizeOption","value"]]],null],null],["flush-element"],["text","\\n        "],["append",["unknown",["sizeOption","value"]],false],["text","\\n        "],["close-element"],["text","\\n"]],"locals":["sizeOption"]},{"statements":[["text","      "],["open-element","label",[]],["static-attr","for","parties-debug-teamsize-dropdown"],["flush-element"],["text","Team Size"],["close-element"],["text","\\n      "],["open-element","lol-uikit-framed-dropdown",[]],["static-attr","id","parties-debug-teamsize-dropdown"],["flush-element"],["text","\\n"],["block",["each"],[["get",["teamSizeOptions"]]],null,3],["text","      "],["close-element"],["text","\\n\\n      "],["open-element","label",[]],["static-attr","for","parties-debug-pick-format-dropdown"],["flush-element"],["text","Pick Format"],["close-element"],["text","\\n      "],["open-element","lol-uikit-framed-dropdown",[]],["static-attr","id","parties-debug-pick-format-dropdown"],["flush-element"],["text","\\n"],["block",["each"],[["get",["champSelectStrategyOptions"]]],null,2],["text","      "],["close-element"],["text","\\n\\n"]],"locals":[]},{"statements":[["text","          "],["open-element","span",[]],["static-attr","class","parties-debug-mode-disabled"],["flush-element"],["text","DISABLED - "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","lol-uikit-dropdown-option",[]],["static-attr","slot","lol-uikit-dropdown-option"],["dynamic-attr","selected",["unknown",["modeSummary","selected"]],null],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"selectMode",["get",["modeSummary","id"]]],[["on"],["click"]]],null],["flush-element"],["text","\\n"],["block",["unless"],[["get",["modeSummary","enabled"]]],null,5],["text","          "],["open-element","span",[]],["flush-element"],["append",["unknown",["modeSummary","gameMode"]],false],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":["modeSummary"]},{"statements":[["text","      "],["open-element","label",[]],["static-attr","for","parties-debug-modes-dropdown"],["flush-element"],["text","Mode"],["close-element"],["text","\\n      "],["open-element","lol-uikit-framed-dropdown",[]],["static-attr","id","parties-debug-modes-dropdown"],["flush-element"],["text","\\n"],["block",["each"],[["get",["selectedMapSummary","supportedModes"]]],null,6],["text","      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","lol-uikit-dropdown-option",[]],["static-attr","slot","lol-uikit-dropdown-option"],["dynamic-attr","selected",["unknown",["mapSummary","selected"]],null],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"selectMap",["get",["mapSummary","mapId"]]],[["on"],["click"]]],null],["flush-element"],["text","\\n        "],["append",["unknown",["mapSummary","mapName"]],false],["text","\\n        "],["close-element"],["text","\\n"]],"locals":["mapSummary"]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        n(108),
          (e.exports = i.Ember.Component.extend({
            layout: n(109),
            classNames: ["parties-debug-queue-lobby"],
            omitDisabledQueues: !0,
            lobbiesService: i.Ember.inject.service("lobbies"),
            queues: i.Ember.computed.alias("lobbiesService.queues"),
            selectedQueueId: i.Ember.computed.alias("lobbiesService.queueId"),
            assetsService: i.Ember.inject.service("assets"),
            availableMaps: i.Ember.computed.alias(
              "assetsService.availableMaps",
            ),
            debugMaps: i.Ember.computed(
              "availableMaps.[]",
              "availableMaps.@each.id",
              "queues.[]",
              "omitDisabledQueues",
              function () {
                const e = i.Ember.A();
                let t = null;
                if (
                  (this.get("availableMaps").forEach((n) => {
                    const i = this.get("omitDisabledQueues")
                      ? this.getFirstEnabledQueue(n)
                      : this.get("queues");
                    if (!e.findBy("id", n.id) && i) {
                      const i = {},
                        s = this.get("selectedMap");
                      (i.id = n.id),
                        s && s.id === n.id
                          ? ((i.selected = "selected"), (t = n.id))
                          : (i.selected = null),
                        (i.name = n.name || `Map ${n.id}`),
                        11 === i.id ? e.unshift(i) : e.push(i);
                    }
                  }),
                  !t)
                ) {
                  this.set("selectedMap", { id: 11 });
                  const t = e.findBy("id", 11);
                  t && (t.selected = "selected");
                }
                return e;
              },
            ),
            debugTypes: i.Ember.computed(
              "queues.[]",
              "selectedMap",
              "debugMaps.@each.id",
              "omitDisabledQueues",
              function () {
                const e = i.Ember.A(),
                  t = this.queuesForSelectedMap(),
                  n = !this.get("omitDisabledQueues");
                return (
                  t.forEach((t) => {
                    if (!e.findBy("id", t.id)) {
                      if (!t.isTeamBuilderManaged) return;
                      const i = "Available" === t.queueAvailability;
                      if (i || (!i && n)) {
                        const n = {},
                          s = this.get("selectedType");
                        (n.id = t.id),
                          (n.selected = s && s.id === t.id ? "selected" : null),
                          (n.name = t.type),
                          (n.numPlayers =
                            t.numPlayersPerTeam + "x" + t.numPlayersPerTeam),
                          (n.disabled = !i),
                          (n.isTeamBuilderManaged = t.isTeamBuilderManaged),
                          e.push(n);
                      }
                    }
                  }),
                  e.sortBy("id")
                );
              },
            ),
            typesDropdownDisabled: i.Ember.computed(
              "selectedMap",
              "debugTypes",
              function () {
                return (
                  !this.get("selectedMap") || this.get("debugTypes").length < 1
                );
              },
            ),
            createButtonDisabled: i.Ember.computed(
              "selectedMap",
              "debugTypes",
              "selectedType",
              function () {
                return (
                  !this.get("selectedMap") ||
                  !this.get("selectedType") ||
                  this.get("debugTypes").length < 1
                );
              },
            ),
            getFirstEnabledQueue: function (e) {
              let t = null;
              const n = this.get("queues");
              for (let i = 0; i < n.length; i++) {
                const n = this.get("queues")[i];
                if (n.mapId === e.id && "Available" === n.queueAvailability) {
                  t = n;
                  break;
                }
              }
              return t;
            },
            queuesForSelectedMap: function () {
              const e = this.get("selectedMap");
              return e
                ? this.get("queues").filterBy("mapId", e.id)
                : this.get("queues");
            },
            actions: {
              debugSetGameMode: function () {
                const e = this.get("selectedType").id;
                this.set("selected.isUpdatingSelection", !0),
                  this.set("selected.queueId", e),
                  this.get("lobbiesService")
                    .createLobbyWithQueueId(e)
                    .then(() => {
                      this.set("selected.isUpdatingSelection", !1),
                        this.get("showingState").showParty();
                    });
              },
              setDebugMap: function (e) {
                this.set("selectedMap", e), this.set("selectedType", null);
              },
              setDebugType: function (e) {
                this.set("selectedType", e);
              },
            },
          }));
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "NXbI49vl",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\debug-tools-component\\\\debug-queue-lobby-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\debug-tools-component\\\\debug-queue-lobby-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\debug-tools-component\\\\debug-queue-lobby-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","parties-debug-queues-wrapper"],["flush-element"],["text","\\n  "],["open-element","lol-uikit-flat-checkbox",[]],["static-attr","class","parties-debug-show-disabled-queues"],["flush-element"],["text","\\n    "],["append",["helper",["input"],null,[["slot","id","type","checked"],["input","parties-debug-show-disabled-queues-check","checkbox",["get",["omitDisabledQueues"]]]]],false],["text","\\n    "],["open-element","label",[]],["static-attr","slot","label"],["static-attr","for","parties-debug-show-disabled-queues-check"],["flush-element"],["text","Hide Disabled Queues"],["close-element"],["text","\\n  "],["close-element"],["text","\\n\\n  "],["open-element","label",[]],["static-attr","for","parties-debug-maps-dropdown"],["flush-element"],["text","Map"],["close-element"],["text","\\n  "],["open-element","lol-uikit-framed-dropdown",[]],["static-attr","id","parties-debug-maps-dropdown"],["flush-element"],["text","\\n"],["block",["each"],[["get",["debugMaps"]]],null,2],["text","  "],["close-element"],["text","\\n\\n  "],["open-element","label",[]],["static-attr","for","parties-debug-types-dropdown"],["flush-element"],["text","Game Type"],["close-element"],["text","\\n  "],["open-element","lol-uikit-framed-dropdown",[]],["dynamic-attr","disabled",["helper",["if"],[["get",["typesDropdownDisabled"]],true,null],null],null],["static-attr","id","parties-debug-types-dropdown"],["flush-element"],["text","\\n"],["block",["each"],[["get",["debugTypes"]]],null,1],["text","  "],["close-element"],["text","\\n\\n  "],["open-element","span",[]],["static-attr","class","parties-debug-selected-queue"],["flush-element"],["text","\\n"],["block",["if"],[["get",["selectedType","id"]]],null,0],["text","  "],["close-element"],["text","\\n  "],["open-element","lol-uikit-flat-button",[]],["dynamic-attr","disabled",["helper",["if"],[["get",["createButtonDisabled"]],true,null],null],null],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"debugSetGameMode"],[["on"],["click"]]],null],["flush-element"],["text","Create Lobby"],["close-element"],["text","\\n"],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    Selected QueueId: "],["append",["unknown",["selectedType","id"]],false],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","lol-uikit-dropdown-option",[]],["static-attr","slot","lol-uikit-dropdown-option"],["dynamic-attr","selected",["unknown",["type","selected"]],null],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"setDebugType",["get",["type"]]],[["on"],["click"]]],null],["flush-element"],["text","\\n      "],["open-element","span",[]],["static-attr","class","parties-debug-disabled"],["flush-element"],["append",["helper",["if"],[["get",["type","disabled"]],"DISABLED - "],null],false],["close-element"],["text","\\n      "],["open-element","span",[]],["static-attr","class","parties-debug-tb"],["flush-element"],["append",["helper",["if"],[["get",["type","isTeamBuilderManaged"]],"TB - "],null],false],["close-element"],["text","\\n      "],["append",["unknown",["type","numPlayers"]],false],["text"," - "],["append",["unknown",["type","name"]],false],["text"," - ("],["append",["unknown",["type","id"]],false],["text",")\\n      "],["close-element"],["text","\\n"]],"locals":["type"]},{"statements":[["text","    "],["open-element","lol-uikit-dropdown-option",[]],["static-attr","slot","lol-uikit-dropdown-option"],["dynamic-attr","selected",["unknown",["map","selected"]],null],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"setDebugMap",["get",["map"]]],[["on"],["click"]]],null],["flush-element"],["text","\\n      "],["append",["unknown",["map","name"]],false],["text","\\n    "],["close-element"],["text","\\n"]],"locals":["map"]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        const s = [n(59).SEARCH_ERROR_TYPES.LEAVER_BUSTER_TAINTED_WARNING];
        e.exports = i.Ember.Component.extend({
          lobbiesService: i.Ember.inject.service("lobbies"),
          matchmakingService: i.Ember.inject.service("matchmaking"),
          summonerService: i.Ember.inject.service("summoner"),
          _isTransitioningState: null,
          _notifiedSearchErrorIds: i.Ember.Object.create({}),
          _visibleErrorModals: {},
          searchErrorObserver: i.Ember.on(
            "init",
            i.Ember.observer(
              "matchmakingService.longestSearchError",
              "matchmakingService.matchmakingErrorState",
              function () {
                i.Ember.run.once(this, function () {
                  const e = this.get("matchmakingService.longestSearchError"),
                    t = e.id,
                    n = this.get("_notifiedSearchErrorIds"),
                    i = n.hasOwnProperty(e.id),
                    s = e.errorType,
                    o =
                      "Error" ===
                      this.get("matchmakingService.matchmakingErrorState"),
                    a = this.get("lobbiesService.inLobby");
                  t > -1 && s && !i && o && a
                    ? ((n[e.get("id")] = !0),
                      this.showQueueErrorModal(
                        e.errorType,
                        e.get("id"),
                        e.penalizedSummonerId,
                      ),
                      this.set("_isTransitioningState", !1))
                    : this.hideVisibleExpiredErrors();
                });
              },
            ),
          ),
          hideVisibleExpiredErrors: function () {
            const e = this.get("_visibleErrorModals"),
              t = i.lodash.keys(e);
            if (0 === t.length) return;
            const n = this.get("matchmakingService.validSearchErrorIds"),
              s = i.UIKit.getModalManager();
            t.forEach((t) => {
              const i = parseInt(t, 10);
              -1 === n.indexOf(i) && (s.remove(e[t]), delete e[t]);
            }),
              this.set("_visibleErrorModals", e);
          },
          isErrorHandledByOtherPlugin: function (e, t, n) {
            return !(!s.includes(e) || (t && !n));
          },
          showQueueErrorModal: function (e, t, n) {
            const s = { penalizedSummonerId: n },
              o = this.get("lobbiesService.isCurrentPlayerPartyLeader"),
              a = this.get("summonerService.localSummonerId") === n;
            if (this.isErrorHandledByOtherPlugin(e, o, a)) return;
            const r = i.UIKit.getModalManager(),
              l = i.ComponentFactory.create("PartyQueueErrorDialogComponent", {
                errorType: e,
                errorData: s,
              }),
              { domNode: c } = l,
              m = this.get("tra.lib_ui_dialog_alert_ok"),
              u = this.get("_visibleErrorModals"),
              d = r.add({
                type: "DialogAlert",
                data: { contents: c, okText: m },
              });
            (u[t] = d),
              this.set("_visibleErrorModals", u),
              d.okPromise.then(() => {
                const e = this.get("_visibleErrorModals");
                e[t] && (delete e[t], this.set("_visibleErrorModals", e));
              });
          },
        });
      },
      (e, t, n) => {
        "use strict";
        var i,
          s = n(1),
          o = (i = n(5)) && i.__esModule ? i : { default: i },
          a = n(9);
        n(112);
        const { RunMixin: r } = s.EmberAddons.EmberLifeline,
          l = s.UIKit.getTooltipManager(),
          c = s.UIKit.getTemplateHelper();
        e.exports = s.Ember.Component.extend(r, {
          layout: n(113),
          positionError: null,
          positionWarning: null,
          premadeSizeAllowed: null,
          allowablePremadeSizes: null,
          currentPartySize: null,
          autoFillEligible: !1,
          autoFillProtectedForStreaking: !1,
          autoFillProtectedForPromos: !1,
          autoFillProtectedForSoloing: !1,
          shouldShowBetaWatermark: !1,
          disabledReasons: s.Ember.A(),
          lobbiesService: s.Ember.inject.service("lobbies"),
          eligibilityService: s.Ember.inject.service("queue-eligibility"),
          eligibilitiesEntity: o.default,
          restrictions: s.Ember.computed.alias(
            "eligibilitiesEntity.restrictions",
          ),
          warnings: s.Ember.computed.alias("eligibilitiesEntity.warnings"),
          hasLobbyRestrictions: s.Ember.computed.or(
            "eligibilitiesEntity.hasLobbyRestrictions",
            "shouldShowPremadeSizeError",
          ),
          shouldShowRestrictionTooltip: s.Ember.computed(
            "restrictions",
            function () {
              return (
                this.get("restrictions").filter(
                  (e) => e.restrictionCode !== a.TFT_NEW_PLAYER_RESTRICTION,
                ).length > 0
              );
            },
          ),
          hasTFTNewPlayerRestriction: s.Ember.computed(
            "restrictions",
            function () {
              return !!this.get("restrictions").find(
                (e) => e.restrictionCode === a.TFT_NEW_PLAYER_RESTRICTION,
              );
            },
          ),
          teamSizeRestrictionMembers: s.Ember.computed(
            "restrictions",
            "restrictions.[]",
            function () {
              const e = this.get("restrictions");
              if (e)
                for (let t = 0; t < e.length; t++)
                  if ("TeamSizeRestriction" === e[t].restrictionCode)
                    return e[t].summonerIds.length;
              return 0;
            },
          ),
          hasQueueAvailabilityWarning: s.Ember.computed.alias(
            "lobbiesService.hasQueueAvailabilityWarning",
          ),
          queueAvailabilityWarningTooltip: s.Ember.computed.alias(
            "lobbiesService.queueAvailabilityWarningTooltip",
          ),
          mmrStandardDeviationWarning: s.Ember.computed.alias(
            "tra.parties_large_skill_gap_warning",
          ),
          mmrStandardDeviationWarningTooltip: s.Ember.computed.alias(
            "tra.parties_large_skill_gap_warning_tooltip",
          ),
          hasMmrStandardDeviationWarning: s.Ember.computed(
            "warnings.[]",
            function () {
              const e = this.get("warnings");
              if (e)
                for (let t = 0; t < e.length; t++) {
                  if ("MmrStandardDeviationTooLarge" === e[t].restrictionCode)
                    return !0;
                }
              return !1;
            },
          ),
          shouldShowAutoFillStatus: s.Ember.computed(
            "autoFillEligible",
            "autoFillProtectedForStreaking",
            "autoFillProtectedForPromos",
            "autoFillProtectedForSoloing",
            function () {
              return (
                this.get("autoFillEligible") ||
                this.get("autoFillProtectedForStreaking") ||
                this.get("autoFillProtectedForPromos") ||
                this.get("autoFillProtectedForSoloing")
              );
            },
          ),
          shouldShowPremadeSizeError:
            s.Ember.computed.not("premadeSizeAllowed"),
          premadeSizeErrorText: s.Ember.computed(
            "premadeSizeAllowed",
            "tra.game_select_queue_restriction_party_teamsizerestriction",
            "tra.ready",
            "teamSizeRestrictionMembers",
            "tra.parties_premade_size_restriction",
            "tra.parties_premade_size_restriction_singular",
            "tra.parties_premade_size_fives",
            "allowablePremadeSizes",
            "restrictions",
            "restrictions.[]",
            "restrictions.@each.summonerIdsString",
            function () {
              const e = this.get("teamSizeRestrictionMembers"),
                t = this.get("allowablePremadeSizes");
              if (t && 1 === t.length && 5 === t[0])
                return this.get("tra.parties_premade_size_fives");
              if (e > 1) {
                const t = { teamSizeRestriction: e };
                return this.get("tra").formatString(
                  "game_select_queue_restriction_party_teamsizerestriction",
                  t,
                );
              }
              if (1 === e)
                return this.get(
                  "tra.parties_premade_size_restriction_singular",
                );
              const n = { num: e };
              return this.get("tra").formatString(
                "parties_premade_size_restriction",
                n,
              );
            },
          ),
          tftNewPlayerErrorText: s.Ember.computed(
            "tra.game_select_queue_restriction_party_tftnewplayerlobbyrestriction",
            "lobbiesService.currentQueue",
            "eligibilityService.newTFTPlayers",
            "lobbiesService.currentPartyMembers.@each.puuid",
            function () {
              const e = this.get("lobbiesService.currentQueue"),
                t = e ? e.description : "",
                n = this.get("eligibilityService.newTFTPlayers"),
                i = this.get("lobbiesService.currentPartyMembers"),
                s = {
                  gameMode: t,
                  players: n
                    .map((e) => {
                      const t = i.find((t) => t.summonerId === e);
                      return t ? t.summonerName : "";
                    })
                    .join(","),
                };
              return this.get("tra").formatString(
                "game_select_queue_restriction_party_tftnewplayerlobbyrestriction",
                s,
              );
            },
          ),
          shouldShowAutoFillProtection: s.Ember.computed(
            "autoFillProtectedForStreaking",
            "autoFillProtectedForPromos",
            "autoFillProtectedForSoloing",
            function () {
              return (
                this.get("autoFillProtectedForStreaking") ||
                this.get("autoFillProtectedForPromos") ||
                this.get("autoFillProtectedForSoloing")
              );
            },
          ),
          classNames: ["parties-footer-notifications"],
          warningTooltipText: s.Ember.computed(
            "tra.parties_autofill_tooltip",
            "tra.parties_autofill_streak_protection",
            "tra.parties_autofill_promo_protection",
            "tra.parties_autofill_solo_protection",
            "autoFillEligible",
            "autoFillProtectedForStreaking",
            "autoFillProtectedForPromos",
            "autoFillProtectedForSoloing",
            function () {
              return this.get("autoFillEligible")
                ? this.get("tra.parties_autofill_tooltip")
                : this.get("autoFillProtectedForSoloing")
                  ? this.get("tra.parties_autofill_solo_protection")
                  : this.get("autoFillProtectedForPromos")
                    ? this.get("tra.parties_autofill_promo_protection")
                    : this.get("autoFillProtectedForStreaking")
                      ? this.get("tra.parties_autofill_streak_protection")
                      : void 0;
            },
          ),
          tooltipConfig: {
            targetAnchor: { x: "center", y: "top" },
            tooltipAnchor: { x: "center", y: "bottom" },
            offset: { x: 0, y: 0 },
          },
          restrictionsText: s.Ember.computed(
            "shouldShowPremadeSizeError",
            "hasLobbyRestrictions",
            "teamSizeRestrictionMembers",
            "hasTFTNewPlayerRestriction",
            "restrictions.@each.summonerIdsString",
            "tra.ready",
            "tra.game_select_queue_restriction_party_notification",
            "eligibilityService.partyHasNewTFTPlayer",
            "tftNewPlayerErrorText",
            function () {
              return this.get("shouldShowPremadeSizeError")
                ? this.get("premadeSizeErrorText")
                : this.get("teamSizeRestrictionMembers") > 0
                  ? this.get(
                      "tra.game_select_queue_restriction_party_notification",
                    )
                  : this.get("hasTFTNewPlayerRestriction") &&
                      this.get("eligibilityService.partyHasNewTFTPlayer")
                    ? this.get("tftNewPlayerErrorText")
                    : "";
            },
          ),
          restrictionsTooltipTextObserver: s.Ember.on(
            "init",
            s.Ember.observer(
              "hasLobbyRestrictions",
              "restrictions.@each.restrictionCode",
              "restrictions.@each.summonerIdsString",
              "restrictions",
              "lobbiesService.currentPartyMembers.@each.summonerId",
              "lobbiesService.queueId",
              "tra.ready",
              function () {
                s.Ember.run.once(this, () => {
                  this.generateRestrictionStringsForParty();
                });
              },
            ),
          ),
          generateRestrictionStringsForParty: function () {
            if (this.get("hasLobbyRestrictions")) {
              const e = this.get(
                  "eligibilitiesEntity",
                ).groupMissingTokenRestrictions(this.get("restrictions")),
                t = [];
              if (e) {
                const n = this.get("lobbiesService.queueId"),
                  i = this.get("eligibilityService");
                return i && i.generateRestrictionForParty
                  ? (e.forEach((e) => {
                      e.restrictionCode !== a.TFT_NEW_PLAYER_RESTRICTION &&
                        ((e.queueId = n),
                        t.push(i.generateRestrictionForParty(e)));
                    }),
                    Promise.all(t).then((e) => {
                      this.set("disabledReasons", s.Ember.A(e));
                    }))
                  : Promise.resolve();
              }
            }
            return Promise.resolve();
          },
          restrictionLeaderClass: s.Ember.computed(
            "isCurrentPlayerPartyLeader",
            function () {
              return this.get("isCurrentPlayerPartyLeader") ? "leader" : "";
            },
          ),
          showQueueAvailabilityTooltip: s.Ember.on(
            "didInsertElement",
            s.Ember.observer("hasQueueAvailabilityWarning", function () {
              this.runTask(
                () => this.updateQueueAvailabilityWarningTooltip(),
                250,
              );
            }),
          ),
          updateQueueAvailabilityWarningTooltip: function () {
            const e = this.element.querySelector(
              ".parties-queue-warning-error",
            );
            if (this.get("hasQueueAvailabilityWarning")) {
              let t = this.get("_queueAvailabilityWarningTooltipDOM");
              if (!t) {
                (t = document.createElement("lol-uikit-tooltip")),
                  t.classList.add("parties-footer-tooltip");
                const e = c.contentBlockDialogSimple(
                  this.get("queueAvailabilityWarningTooltip"),
                );
                e.setAttribute("type", "tooltip-large"),
                  t.appendChild(e),
                  this.set("_queueAvailabilityWarningTooltipDOM", t);
              }
              l.assign(e, t, {}, this.get("tooltipConfig")), l.show(e);
            } else l.unassign(e);
          },
        });
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "JuYWzJiP",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\footer-notifications-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\footer-notifications-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\footer-notifications-component\\\\index.js\\" "],["text","\\n"],["block",["if"],[["get",["hasQueueAvailabilityWarning"]]],null,21,20]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","parties-beta-watermark"],["flush-element"],["text","\\n    "],["append",["unknown",["tra","parties_game_mode_beta"]],false],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["shouldShowBetaWatermark"]]],null,0]],"locals":[]},{"statements":[["text","      "],["open-element","lol-uikit-content-block",[]],["static-attr","class","parties-footer-tooltip"],["static-attr","type","tooltip-large"],["flush-element"],["text","\\n        "],["append",["unknown",["warningTooltipText"]],false],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","div",[]],["static-attr","class","parties-autofill-warning-icon"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","div",[]],["static-attr","class","parties-autofill-protection-icon"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["shouldShowAutoFillProtection"]]],null,4,3],["text","      "],["append",["unknown",["positionWarning"]],false],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","parties-footer-warning"],["flush-element"],["text","\\n"],["block",["if"],[["get",["positionWarning"]]],null,5],["block",["uikit-tooltip"],null,[["tooltipConfig"],[["get",["tooltipConfig"]]]],2],["text","  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["shouldShowAutoFillStatus"]]],null,6,1]],"locals":[]},{"statements":[["text","      "],["open-element","lol-uikit-content-block",[]],["static-attr","class","parties-footer-tooltip"],["static-attr","type","tooltip-large"],["flush-element"],["text","\\n        "],["append",["unknown",["mmrStandardDeviationWarningTooltip"]],false],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","parties-footer-warning"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","parties-mmr-warning-icon"],["flush-element"],["close-element"],["append",["unknown",["mmrStandardDeviationWarning"]],false],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipConfig"],[["get",["tooltipConfig"]]]],8],["text","  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["hasMmrStandardDeviationWarning"]]],null,9,7]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","parties-footer-error"],["flush-element"],["append",["unknown",["positionError"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["positionError"]]],null,11,10]],"locals":[]},{"statements":[["text","      "],["open-element","lol-uikit-content-block",[]],["static-attr","class","parties-footer-tooltip"],["static-attr","type","tooltip-large"],["flush-element"],["text","\\n        "],["append",["unknown",["readyWarningTooltip"]],false],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","parties-footer-warning parties-ready-warning"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","parties-ready-warning-icon"],["flush-element"],["close-element"],["text","\\n    "],["append",["unknown",["readyWarning"]],false],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipConfig"],[["get",["tooltipConfig"]]]],13],["text","  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["readyWarning"]]],null,14,12]],"locals":[]},{"statements":[["text","              "],["open-element","li",[]],["flush-element"],["append",["helper",["sanitize"],[["get",["reason"]]],null],false],["close-element"],["text","\\n"]],"locals":["reason"]},{"statements":[["text","        "],["open-element","lol-uikit-content-block",[]],["static-attr","class","parties-footer-tooltip"],["static-attr","type","tooltip-large"],["flush-element"],["text","\\n          "],["open-element","ul",[]],["flush-element"],["text","\\n"],["block",["each"],[["get",["disabledReasons"]]],null,16],["text","          "],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["uikit-tooltip"],null,[["tooltipConfig"],[["get",["tooltipConfig"]]]],17]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","parties-restrictions-warning-error"],["flush-element"],["text","\\n    "],["open-element","div",[]],["dynamic-attr","class",["concat",["parties-notification-warning-icon ",["unknown",["restrictionLeaderClass"]]]]],["flush-element"],["close-element"],["text","\\n    "],["append",["unknown",["restrictionsText"]],false],["text","\\n"],["block",["if"],[["get",["shouldShowRestrictionTooltip"]]],null,18],["text","  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["hasLobbyRestrictions"]]],null,19,15]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","parties-queue-warning-error"],["flush-element"],["text","\\n    "],["open-element","div",[]],["dynamic-attr","class",["concat",["parties-notification-warning-icon ",["unknown",["restrictionLeaderClass"]]]]],["flush-element"],["close-element"],["text","\\n    "],["append",["unknown",["tra","parties_roster_invite_disabled_eligibility_disabled"]],false],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1),
          s = n(115);
        e.exports = i.Ember.Component.extend({
          init(...e) {
            this._super(...e), (this._playerNames = i.playerNames);
          },
          classNames: ["parties-notifications"],
          lobbiesService: i.Ember.inject.service("lobbies"),
          notifications: i.Ember.computed.alias("lobbiesService.notifications"),
          inLobby: i.Ember.computed.alias("lobbiesService.inLobby"),
          currentPlayer: i.Ember.computed.alias(
            "lobbiesService.currentSummoner",
          ),
          toastManager: i.UIKit.getToastManager(),
          templateHelper: i.UIKit.getTemplateHelper(),
          notificationsObserver: i.Ember.on(
            "init",
            i.Ember.observer("notifications.@each.notificationId", function () {
              i.Ember.run.once(this, () => {
                const e = this.get("notifications");
                e && 0 !== e.length && this._processQueueDodgeNotifications(e);
              });
            }),
          ),
          _processQueueDodgeNotifications: function (e) {
            e.forEach((e) => {
              e.notificationReason ===
              s.MATCHMAKING_DODGE_NOTIFICATIONS.PARTY_DODGED
                ? (this._partyDodged(e),
                  this._deleteNotification(e.notificationId))
                : e.notificationReason ===
                    s.MATCHMAKING_DODGE_NOTIFICATIONS.STRANGER_DODGED &&
                  (this._strangerDodged(),
                  this._deleteNotification(e.notificationId));
            });
          },
          _strangerDodged: function () {
            const e = this.get("templateHelper").contentBlockNotification(
              this.get(
                "tra.game_flow_champ_select_dodge_stranger_notification",
              ),
              "lol-ready-check-notification-stranger-dodge",
            );
            return this._toastNotify(e);
          },
          _partyDodged: function (e) {
            const t = this.get("currentPlayer"),
              n = e.summonerIds[0];
            n && t.summonerId === n
              ? this._notifySelfDodge(this.get("inLobby"))
              : this._notifyPartyMemberDodge(n);
          },
          _notifySelfDodge: function (e) {
            const t = e
                ? this.get(
                    "tra.game_flow_champ_select_dodge_player_notification_lobby",
                  )
                : this.get(
                    "tra.game_flow_champ_select_dodge_player_notification",
                  ),
              n = this.get("templateHelper").contentBlockNotification(
                t,
                "lol-ready-check-notification-party-dodge",
              );
            this._toastNotify(n);
          },
          async _notifyPartyMemberDodge(e) {
            if (!e)
              throw new Error(
                "Cannot notify party member dodge with falsy summonerId",
              );
            const { playerNameFull: t } =
                await this._playerNames.getDisplayNameBySummonerId(e),
              n = this.get("tra").formatString(
                "game_flow_champ_select_dodge_party_notification",
                { summonerName: t },
              ),
              i = this.get("templateHelper").contentBlockNotification(
                n,
                "lol-ready-check-notification-party-dodge",
              );
            this._toastNotify(i);
          },
          _toastNotify: function (e) {
            this.get("toastManager").add({
              type: "DialogToast",
              data: { contents: e, dismissable: !0 },
              timing: "slow",
            });
          },
          _deleteNotification: function (e) {
            this.get("lobbiesService").deleteNotification(e);
          },
        });
      },
      (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.TEAM_BUILDER_REMOVAL_NOTIFICATIONS =
            t.MATCHMAKING_DODGE_NOTIFICATIONS =
            t.LEGACY_LOBBY_REMOVAL_NOTIFICATIONS =
              void 0);
        t.MATCHMAKING_DODGE_NOTIFICATIONS = {
          INVALID: "Invalid",
          PARTY_DODGED: "PartyDodged",
          STRANGER_DODGED: "StrangerDodged",
        };
        t.LEGACY_LOBBY_REMOVAL_NOTIFICATIONS = {
          KICKED: "KICKED",
          DESTROYED: "DESTROYED",
          PROGRESSED: "PROGRESSED",
        };
        t.TEAM_BUILDER_REMOVAL_NOTIFICATIONS = {
          NONE: "None",
          KICKED: "Kicked",
          DISBANDED: "Disbanded",
          LEFT: "Left",
          SERVICE_ERROR: "ServiceError",
          OTHER: "Other",
          TIMEOUT: "Timeout",
          GAME_START_ERROR: "GameStartError",
          SERVICE_SHUTDOWN: "ServiceShutdown",
        };
      },
      (e, t, n) => {
        "use strict";
        var i = n(1),
          s = a(n(19)),
          o = a(n(72));
        function a(e) {
          return e && e.__esModule ? e : { default: e };
        }
        n(117),
          (e.exports = i.Ember.Component.extend(s.default, o.default, {
            ModalManager: i.UIKit.getModalManager(),
            classNames: ["parties-root"],
            classNameBindings: ["isShowingParty:parties-show:parties-hide"],
            lobbiesService: i.Ember.inject.service("lobbies"),
            matchmakingService: i.Ember.inject.service("matchmaking"),
            chatService: i.Ember.inject.service("chat"),
            playerNames: i.playerNames,
            inParty: i.Ember.computed.and(
              "lobbiesService.inLobby",
              "isShowingParty",
            ),
            isShowingParty: i.Ember.computed.alias(
              "showingState.isShowingParty",
            ),
            maxTeamSize: i.Ember.computed.alias("lobbiesService.maxTeamSize"),
            buttonsDisabled: i.Ember.computed.or(
              "matchmakingService.isSearching",
              "matchmakingService.isMatchFound",
            ),
            buttonsEnabled: i.Ember.computed.not("buttonsDisabled"),
            currentPlayer: i.Ember.computed.alias(
              "lobbiesService.currentPlayer",
            ),
            currentPartyMembers: i.Ember.computed.alias(
              "lobbiesService.currentPartyMembers",
            ),
            isCurrentPlayerPartyLeader: i.Ember.computed.alias(
              "lobbiesService.isCurrentPlayerPartyLeader",
            ),
            currentPartyLeader: i.Ember.computed.alias(
              "lobbiesService.currentPartyLeader",
            ),
            currentPlayerCanInvite: i.Ember.computed.alias(
              "lobbiesService.currentPlayerCanInvite",
            ),
            currentPlayerHasInvitePrivileges: i.Ember.computed.alias(
              "currentPlayer.allowedInviteOthers",
            ),
            partyInvitesAllowed: i.Ember.computed(
              "currentPlayerCanInvite",
              "currentPartyIsFull",
              "buttonsEnabled",
              function () {
                const e = this.get("buttonsEnabled"),
                  t = this.get("currentPlayerCanInvite"),
                  n = this.get("currentPartyIsFull");
                return e && t && !n;
              },
            ),
            _previousPartyLeaderId: null,
            _previousCanInvite: null,
            backButtonShown: i.Ember.computed.alias(
              "isCurrentPlayerPartyLeader",
            ),
            backButtonContainerClass: i.Ember.computed(
              "backButtonShown",
              function () {
                return this.get("backButtonShown")
                  ? "back-button-shown"
                  : "back-button-hidden";
              },
            ),
            backButtonDisabled: i.Ember.computed.alias("buttonsDisabled"),
            playerPlaceholders: i.Ember.computed(
              "currentPartyMembers.[]",
              "otherPartyMembers.[]",
              "maxTeamSize",
              "lobbiesService.isTFT",
              "lobbiesService.maxLobbySize",
              function () {
                if (0 === (this.get("currentPartyMembers.length") || 0))
                  return i.Ember.A();
                let e = this.get("lobbiesService.isTFT")
                  ? this.get("lobbiesService.maxLobbySize")
                  : this.get("maxTeamSize");
                e || (e = 0);
                const t = this.get("otherPartyMembers.length") || 0,
                  n = Math.max(e - t - 1, 0),
                  s = [];
                for (let e = 0; e < n; e++)
                  s.push(
                    i.Ember.Object.create({ index: e, isPlaceholder: !0 }),
                  );
                return i.Ember.A(s);
              },
            ),
            otherPartyMembers: i.Ember.computed.alias(
              "lobbiesService.otherCurrentPartyMembers",
            ),
            observeInvitePrivilegesChange: i.Ember.observer(
              "currentPlayerHasInvitePrivileges",
              function () {
                i.Ember.run.once(this, this._handleInviteGrantedRevoked);
              },
            ),
            _handleInviteGrantedRevoked: function () {
              const e = this.get("currentPlayerHasInvitePrivileges"),
                t = this.get("_previousCanInvite"),
                n = this.get("isCurrentPlayerPartyLeader");
              t !== e &&
                null !== t &&
                (!e || this.get("_hasPlayedInviteGranted") || n
                  ? e ||
                    !this.get("_hasPlayedInviteGranted") ||
                    n ||
                    (this.get("chatService").sendChatMessage(
                      this.get(
                        "tra.parties_invite_privileges_chat_notification_revoked",
                      ),
                      this.get("chatConversationId"),
                    ),
                    this.playSound(
                      "/fe/lol-parties/sfx-lobby-notif-revoke.ogg",
                    ),
                    this.set("_hasPlayedInviteGranted", !1))
                  : (this.playSound(
                      "/fe/lol-parties/sfx-lobby-notif-invite-granted.ogg",
                    ),
                    this.get("chatService").sendChatMessage(
                      this.get(
                        "tra.parties_invite_privileges_chat_notification_granted",
                      ),
                      this.get("chatConversationId"),
                    ),
                    this.set("_hasPlayedInviteGranted", !0))),
                this.set("_previousCanInvite", e);
            },
            observePartyLeaderChange: i.Ember.observer(
              "isCurrentPlayerPartyLeader",
              function () {
                i.Ember.run.once(this, this._handlePartyLeaderGranted);
              },
            ),
            _handlePartyLeaderGranted: function () {
              const e = this.get("currentPartyLeader.summonerId"),
                t = this.get("currentPlayer.summonerId"),
                n = this.get("isCurrentPlayerPartyLeader"),
                i = this.get("_previousPartyLeaderId");
              n && i !== t && !!i && !this.get("_hasPlayedLeaderSound")
                ? (this.get("chatService").sendChatMessage(
                    this.get(
                      "tra.parties_promoted_to_leader_chat_notification",
                    ),
                    this.get("chatConversationId"),
                  ),
                  this.playSound(
                    "/fe/lol-parties/sfx-lobby-notif-captain-granted.ogg",
                  ),
                  this.set("_hasPlayedLeaderSound", !0))
                : n || this.set("_hasPlayedLeaderSound", !1),
                this.set("_previousPartyLeaderId", e);
            },
            initializeObservedObjects: i.Ember.on(
              "didInsertElement",
              function () {
                this.get("matchmakingService.isSearching"),
                  this.get("matchmakingService.isLowPriorityQueue"),
                  this.get(
                    "matchmakingService.hasLowPriorityPenaltyTimeRemaining",
                  );
              },
            ),
            lowPriorityNotificationObserver: i.Ember.observer(
              "matchmakingService.isSearching",
              function () {
                const e = this.get("selfLowPriorityModal");
                this.get("matchmakingService.isSearching") &&
                this.get("matchmakingService.isLowPriorityQueue")
                  ? this.showLowPriorityNotification()
                  : e &&
                    (this.removeModal(e),
                    this.set("selfLowPriorityModal", void 0));
              },
            ),
            lowPriorityNotificationRemovalObserver: i.Ember.observer(
              "matchmakingService.hasLowPriorityPenaltyTimeRemaining",
              function () {
                const e = this.get("selfLowPriorityModal"),
                  t = this.get(
                    "matchmakingService.hasLowPriorityPenaltyTimeRemaining",
                  );
                e && !t && this.removeModal(e);
              },
            ),
            showLowPriorityNotification: function () {
              this.get("matchmakingService.isQueueDelay") &&
              this.get("isCurrentPlayerPartyLeader")
                ? this.showQueueDelayToast()
                : this.get("matchmakingService.isSelfInLowPriorityQueue")
                  ? this.get("selfLowPriorityModal") ||
                    this.showSelfLowPriorityModal()
                  : this.get(
                      "matchmakingService.lowPriorityData.penaltyTimeRemaining",
                    ) > 0 && this.showLowPriorityToast();
            },
            showLowPriorityToast: function () {
              const e = this.get(
                "matchmakingService.lowPriorityData.penalizedSummonerIds",
              );
              if (!e || e.length < 1) return;
              const t = e.map((e) =>
                this.get("playerNames").getDisplayNameBySummonerId(e),
              );
              Promise.all(t).then((e) => {
                const t = i.ComponentFactory.create(
                  "LowPriorityQueueToastComponent",
                  { penalizedPlayerNames: i.lodash.map(e, "playerNameFull") },
                );
                this.get("ToastManager").add({
                  type: "DialogToast",
                  data: { contents: t.domNode },
                  onRemove: () => t.onRemove(),
                });
              });
            },
            showSelfLowPriorityModal: function () {
              const e = i.ComponentFactory.create(
                  "LowPriorityQueueModalComponent",
                ),
                t = this.showModal({
                  type: "DialogAlert",
                  data: {
                    contents: e.domNode,
                    okText: this.get(
                      "tra.low_priority_queue_modal_leave_queue",
                    ),
                    onOk: () => {
                      this.get("lobbiesService").cancelMatchmakingSearch(),
                        this.set("selfLowPriorityModal", void 0),
                        e.onRemove();
                    },
                  },
                });
              this.set("selfLowPriorityModal", t);
            },
            showQueueDelayToast: function () {
              const e = i.UIKit.getTemplateHelper().contentBlockTooltip(
                this.get("tra.low_priority_queue_delay_warning_header"),
                this.get("tra.low_priority_queue_delay_warning_body"),
                "notification",
              );
              this.get("ToastManager").add({
                type: "DialogToast",
                data: { contents: e },
              });
            },
            actions: {
              backButtonClick: function () {
                this.get("backButtonDisabled") ||
                  this.sendAction("showGameSelect");
              },
              showInviteModal: function () {
                this.sendAction("showInviteModal");
              },
            },
            chatConversationId: i.Ember.computed.alias(
              "lobbiesService.chatConversationId",
            ),
            canStartMatchmaking: i.Ember.computed.alias(
              "lobbiesService.canStartMatchmaking",
            ),
            allowablePremadeSizes: i.Ember.computed.alias(
              "lobbiesService.allowablePremadeSizes",
            ),
            notInParty: i.Ember.computed.not("inParty"),
            hideReadyWarning: i.Ember.computed.or(
              "notInParty",
              "canStartMatchmaking",
              "matchmakingService.isInQueue",
            ),
            readyWarningTooltip: i.Ember.computed(
              "currentPartyMembers.[]",
              "currentPartyMembers.@each.ready",
              "hideReadyWarning",
              "tra.ready",
              "tra.parties_ready_warning_tooltip",
              "playerNames.isUsingAlias",
              function () {
                if (this.get("hideReadyWarning")) return;
                const e = [],
                  t = this.get("currentPartyMembers");
                for (let n = 0; n < t.length; n++) {
                  const i = t[n];
                  i.ready ||
                    (this.get("playerNames.isUsingAlias")
                      ? e.push(i?.displayName?.playerNameFull)
                      : e.push(i.summonerName));
                }
                if (i.lodash.isEmpty(e)) return;
                return this.get("tra.formatString")(
                  "parties_ready_warning_tooltip",
                  { notReadyMemberNames: e.join(", ") },
                );
              },
            ),
            readyWarning: i.Ember.computed(
              "readyWarningTooltip",
              "tra.ready",
              "tra.parties_ready_warning",
              function () {
                const e = this.get("readyWarningTooltip");
                if (e && e.length > 0)
                  return this.get("tra.parties_ready_warning");
              },
            ),
          }));
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        "use strict";
        var i = n(1),
          s = m(n(19)),
          o = m(n(72)),
          a = m(n(94)),
          r = m(n(83)),
          l = m(n(10)),
          c = m(n(119));
        function m(e) {
          return e && e.__esModule ? e : { default: e };
        }
        n(120);
        const { RunMixin: u } = i.EmberAddons.EmberLifeline,
          d = "QUEUE_DODGER",
          p = "LEAVER_BUSTED",
          h = "LEAVER_BUSTER_QUEUE_LOCKOUT",
          g = i.Ember.Object.extend(i.Ember.PromiseProxyMixin);
        e.exports = i.Ember.Component.extend(
          u,
          a.default,
          s.default,
          o.default,
          r.default,
          {
            classNames: ["parties-footer-container"],
            layout: n(121),
            init(...e) {
              this._super(...e), (this._playerNames = i.playerNames);
            },
            _notifiedSearchErrorIds: i.Ember.A(),
            matchmakingService: i.Ember.inject.service("matchmaking"),
            lobbiesService: i.Ember.inject.service("lobbies"),
            customGamesService: i.Ember.inject.service("custom-games"),
            customGameListService: i.Ember.inject.service("custom-game-list"),
            gameflowService: i.Ember.inject.service("gameflow"),
            patcherService: i.Ember.inject.service("patcher"),
            partySettingsService: i.Ember.inject.service("party-settings"),
            queueEligibilityService:
              i.Ember.inject.service("queue-eligibility"),
            platformConfig: l.default,
            animationsEnabled: i.Ember.computed.alias(
              "partySettingsService.animationsEnabled",
            ),
            inLobby: i.Ember.computed.alias("lobbiesService.inLobby"),
            currentPartyMembers: i.Ember.computed.alias(
              "lobbiesService.currentPartyMembers",
            ),
            currentPartySize: i.Ember.computed.alias(
              "lobbiesService.currentPartySize",
            ),
            isPremadeRestrictedFives: i.Ember.computed.alias(
              "lobbiesService.isPremadeRestrictedFives",
            ),
            isLeader: i.Ember.computed.alias(
              "lobbiesService.isCurrentPlayerPartyLeader",
            ),
            isNotLeader: i.Ember.computed.not("isLeader"),
            isMember: i.Ember.computed.alias(
              "lobbiesService.isCurrentPlayerPartyMember",
            ),
            displayNotLeaderTooltip: i.Ember.computed.and(
              "inLobby",
              "isMember",
              "isNotSearching",
              "isMatchNotFound",
            ),
            searchState: i.Ember.computed.alias(
              "matchmakingService.searchState",
            ),
            isSearching: i.Ember.computed.alias(
              "matchmakingService.isSearching",
            ),
            isNotSearching: i.Ember.computed.alias(
              "matchmakingService.isNotSearching",
            ),
            isMatchFound: i.Ember.computed.alias(
              "matchmakingService.isMatchFound",
            ),
            isMatchNotFound: i.Ember.computed.alias(
              "matchmakingService.isMatchNotFound",
            ),
            isInQueue: i.Ember.computed.or("isSearching", "isMatchFound"),
            animationLock: i.Ember.computed.alias("selected.animationLock"),
            currentMapId: i.Ember.computed.alias("selected.mapId"),
            searchError: i.Ember.computed.readOnly(
              "matchmakingService.longestSearchError",
            ),
            searchErrorType: i.Ember.computed.readOnly("searchError.errorType"),
            isSearchError: i.Ember.computed.bool("searchError"),
            searchErrorHasTimeRemaining: i.Ember.computed.gt(
              "matchmakingService.longestSearchErrorPenaltyTimeRemaining",
              0,
            ),
            hasPenaltyTime: i.Ember.computed.and(
              "isSearchError",
              "searchErrorHasTimeRemaining",
            ),
            timeRemaining: i.Ember.computed.readOnly(
              "matchmakingService.longestSearchErrorPenaltyTimeRemainingFormatted",
            ),
            penalizedSummonerNameProxy: i.Ember.computed(
              "searchError.penalizedSummonerId",
              function () {
                const e = this.get("searchError.penalizedSummonerId");
                return (
                  e &&
                  g.create({
                    promise: this._playerNames.getDisplayNameBySummonerId(e),
                  })
                );
              },
            ),
            penalizedSummonerDisplayName: i.Ember.computed.alias(
              "penalizedSummonerNameProxy.content.playerNameFull",
            ),
            customGameRewardsDisabledModalElement: null,
            customGameRewardsDisabledReasons: i.Ember.A(),
            customGameChampSelectErrorElement: null,
            customGameChampSelectErrorBody: "",
            customGameChampSelectErrorPlayers: i.Ember.A(),
            hasQueueAvailabilityWarning: i.Ember.computed.alias(
              "lobbiesService.hasQueueAvailabilityWarning",
            ),
            queueAvailabilityWarningTooltip: i.Ember.computed.alias(
              "lobbiesService.queueAvailabilityWarningTooltip",
            ),
            showCustomGameContentWarning: i.Ember.computed(
              "selected.isTrainingGame",
              "selected.isCreatingCustomGame",
              "tra.ready",
              function () {
                return (
                  this.get("selected.isTrainingGame") &&
                  this.get("selected.isCreatingCustomGame") &&
                  this.get("tra").exists(
                    "custom_game_training_content_warning",
                  ) &&
                  this.get("tra").exists(
                    "custom_game_training_rewards_warning",
                  ) &&
                  this.get("tra").exists("custom_game_training_question")
                );
              },
            ),
            hideCustomGameRewardsModal: !0,
            insertListener: i.Ember.on("didInsertElement", function () {
              const e = this.element.querySelector(
                "lol-uikit-content-block#custom-games-disabled-reasons",
              );
              this.set("customGameRewardsDisabledModalElement", e);
              const t = this.element.querySelector(
                "lol-uikit-content-block#custom-games-champ-select-error",
              );
              this.set("customGameChampSelectErrorElement", t);
            }),
            queueErrorMessage: i.Ember.computed(
              "searchErrorType",
              "penalizedSummonerDisplayName",
              "tra.ready",
              "tra.parties_queue_error_queue_dodge_myself_body",
              "tra.parties_queue_error_queue_dodge_other_body",
              "tra.parties_queue_error_generic_body",
              function () {
                const e = this.get("searchErrorType"),
                  t = this.get("searchError.penalizedSummonerId"),
                  n = this.get("matchmakingService.currentSummoner.summonerId");
                switch (e) {
                  case d:
                    return t === n
                      ? this.get(
                          "tra.parties_queue_error_queue_dodge_myself_body",
                        )
                      : this.translate(
                          "parties_queue_error_queue_dodge_other_body",
                          { player: this.get("penalizedSummonerDisplayName") },
                        );
                  case h:
                    return t === n
                      ? this.get(
                          "tra.parties_queue_error_leaver_buster_lockout_restriction_tooltip_myself_body",
                        )
                      : this.translate(
                          "parties_queue_error_leaver_buster_lockout_restriction_tooltip_other_body",
                          { player: this.get("penalizedSummonerDisplayName") },
                        );
                  default:
                    return this.get(
                      "tra.parties_queue_error_generic_body$html",
                    );
                }
              },
            ),
            patcherDisconnected: i.Ember.computed.not(
              "patcherService.isConnected",
            ),
            showingPartyButNotLeader: i.Ember.computed.and(
              "showingState.isShowingParty",
              "isNotLeader",
            ),
            confirmButtonThrottled: !1,
            confirmButtonNotThrottled: i.Ember.computed.not(
              "confirmButtonThrottled",
            ),
            showingPartyButThrottled: i.Ember.computed.and(
              "showingState.isShowingParty",
              "isLeader",
              "confirmButtonThrottled",
            ),
            showingPartyAndInQueue: i.Ember.computed.and(
              "showingState.isShowingParty",
              "isInQueue",
            ),
            showingPartyAndPenaltyTime: i.Ember.computed(
              "showingState.isShowingParty",
              "hasPenaltyTime",
              "customGamesService.isCustomUI",
              function () {
                return (
                  this.get("showingState.isShowingParty") &&
                  this.get("hasPenaltyTime") &&
                  !this.get("customGamesService.isCustomUI")
                );
              },
            ),
            hasRankedDivisionRestriction: i.Ember.computed.alias(
              "queueEligibilityService.hasRankedDivisionRestriction",
            ),
            showingPartyAndRankedDivisionRestriction: i.Ember.computed.and(
              "showingState.isShowingParty",
              "hasRankedDivisionRestriction",
            ),
            cannotStartMatchmaking: i.Ember.computed.not(
              "lobbiesService.canStartMatchmaking",
            ),
            showingPartyButCannotStartMatchmaking: i.Ember.computed.and(
              "showingState.isShowingParty",
              "isLeader",
              "cannotStartMatchmaking",
            ),
            confirmButtonDisabled: i.Ember.computed.or(
              "animationLock",
              "patcherDisconnected",
              "selected.isUpdatingSelection",
              "lobbiesService.hasLobbyRestrictions",
              "showingPartyButNotLeader",
              "showingPartyButThrottled",
              "showingPartyAndRankedDivisionRestriction",
              "showingPartyAndInQueue",
              "showingPartyAndPenaltyTime",
              "showingPartyButCannotStartMatchmaking",
              "hasQueueAvailabilityWarning",
            ),
            confirmButtonEnabled: i.Ember.computed.not("confirmButtonDisabled"),
            confirmButtonText: i.Ember.computed(
              "tra.ready",
              "hasPenaltyTime",
              "isInQueue",
              "customGamesService.isCustomUI",
              "customGameListService.confirmButtonText",
              "tra.parties_button_in_queue",
              "tra.parties_button_find_match",
              "tra.parties_button_start_game",
              function () {
                if (this.get("isInQueue"))
                  return this.get("tra.parties_button_in_queue");
                if (this.get("customGamesService.isCustomUI"))
                  return this.get("tra.parties_button_start_game");
                if (this.get("hasPenaltyTime")) {
                  this.get("tra.parties_button_blocked");
                  return `${this.get("timeRemaining")}`;
                }
                return this.get("tra.parties_button_find_match");
              },
            ),
            buttonSounds: {
              closeHover: "/fe/lol-parties/sfx-lobby-button-quit-hover.ogg",
              closeClick: "/fe/lol-parties/sfx-lobby-button-quit-click.ogg",
              confirmHover:
                "/fe/lol-parties/sfx-lobby-button-find-match-hover.ogg",
              confirmClick:
                "/fe/lol-parties/sfx-lobby-button-find-match-click.ogg",
            },
            searchErrorLeaverBusterQueueDelay: i.Ember.computed.equal(
              "searchErrorType",
              p,
            ),
            searchErrorLeaverBusterQueueLockout: i.Ember.computed.equal(
              "searchErrorType",
              h,
            ),
            confirmButtonShowTooltip: i.Ember.computed(
              "displayNotLeaderTooltip",
              "hasPenaltyTime",
              "searchErrorLeaverBusterQueueDelay",
              "isPremadeRestrictedFives",
              "isInQueue",
              "patcherService.isConnected",
              "hasQueueAvailabilityWarning",
              "showingState.isShowingGameSelect",
              "lobbiesService.canStartMatchmaking",
              "lobbiesService.premadeSizeAllowed",
              "lobbiesService.hasLobbyRestrictions",
              "customGamesService.isCustomUI",
              function () {
                return (
                  !(
                    !this.get("displayNotLeaderTooltip") &&
                    !this.get("isPremadeRestrictedFives") &&
                    this.get("patcherService.isConnected")
                  ) ||
                  !(
                    !this.get("hasPenaltyTime") ||
                    this.get("searchErrorLeaverBusterQueueDelay") ||
                    this.get("showingState.isShowingGameSelect") ||
                    this.get("customGamesService.isCustomUI")
                  ) ||
                  !(
                    this.get("isInQueue") ||
                    this.get("lobbiesService.canStartMatchmaking") ||
                    !this.get("lobbiesService.premadeSizeAllowed")
                  ) ||
                  !!this.get("hasQueueAvailabilityWarning")
                );
              },
            ),
            confirmButtonTooltipText: i.Ember.computed(
              "displayNotLeaderTooltip",
              "hasPenaltyTime",
              "queueErrorMessage",
              "customGamesService.isCustomUI",
              "isPremadeRestrictedFives",
              "patcherService.isConnected",
              "lobbiesService.canStartMatchmaking",
              "hasQueueAvailabilityWarning",
              "tra.metadata",
              "tra.ready",
              "tra.parties_find_match_wait_for_captain",
              "tra.parties_start_game_wait_for_captain",
              "tra.parties_position_select_members_required_tooltip",
              "tra.parties_patcher_not_connected",
              "tra.parties_premade_size_five_restriction",
              "lobbiesService.hasLobbyRestrictions",
              function () {
                let e = "";
                return (
                  this.get("patcherService.isConnected") ||
                    (e = i.tra.get("parties_patcher_not_connected")),
                  this.get("hasRankedDivisionRestriction")
                    ? (e = this.get(
                        "tra.game_select_queue_restriction_party_teamdivisionrestriction",
                      ))
                    : this.get("isPremadeRestrictedFives")
                      ? (e = this.get(
                          "tra.parties_premade_size_five_restriction",
                        ))
                      : this.get("lobbiesService.canStartMatchmaking") ||
                        (e = this.get("readyWarning")
                          ? this.get("readyWarning")
                          : this.get(
                              "tra.parties_position_select_members_required_tooltip",
                            )),
                  this.get("displayNotLeaderTooltip")
                    ? (e = this.get("customGamesService.isCustomUI")
                        ? this.get("tra.parties_start_game_wait_for_captain")
                        : this.get("tra.parties_find_match_wait_for_captain"))
                    : this.get("hasPenaltyTime") &&
                      (e = this.get("queueErrorMessage")),
                  this.get("hasQueueAvailabilityWarning")
                    ? this.get("queueAvailabilityWarningTooltip")
                    : e.replace(/\n/, "<br>")
                );
              },
            ),
            closeButtonDisabled: i.Ember.computed.or("animationLock"),
            closeButtonText: i.Ember.computed(
              "tra.ready",
              "tra.parties_button_quit",
              "tra.parties_button_quit_matchmaking",
              "isInQueue",
              function () {
                return this.get("isInQueue")
                  ? this.get("tra.parties_button_quit_matchmaking")
                  : this.get("tra.parties_button_quit");
              },
            ),
            startMatchmaking: function () {
              this.get("confirmButtonNotThrottled") &&
                (this.set("confirmButtonThrottled", !0),
                (this.enterQueueTimer = i.Telemetry.startTimer(
                  "parties-enter-queue",
                )),
                this.get("lobbiesService")
                  .startMatchmakingSearch()
                  .then(
                    () => {
                      this.set("confirmButtonThrottled", !1);
                    },
                    (e) => {
                      c.default.sendTelemetryEvent("feature_error", {
                        id: "PARTIES_START_MATCHMAKING_ATTEMPT_FAILED",
                        severity: "blocker",
                        message:
                          "failed http post request to /lol-lobby/v2/lobby/matchmaking/search",
                      }),
                        this.set("confirmButtonThrottled", !1),
                        this.set("_isTransitioningState", !1),
                        i.logger.warning(
                          `Start matchmaking search failed: ${e}`,
                        );
                    },
                  ));
            },
            enterQueueTelemetryObserver: i.Ember.observer(
              "isInQueue",
              function () {
                this.get("isInQueue") &&
                  this.enterQueueTimer &&
                  (i.Telemetry.stopAndRecordTimer(this.enterQueueTimer),
                  delete this.enterQueueTimer);
              },
            ),
            cancelMatchmaking: function () {
              this.get("isSearching") &&
                this.get("lobbiesService").cancelMatchmakingSearch();
            },
            customTryToEnterChampSelect: function () {
              return this.checkCustomTeamSizeRestrictions()
                .then(() => this.checkCustomRewards())
                .then(() => this.customEnterChampSelect())
                .catch(() => {
                  this.set("_isTransitioningState", !1);
                });
            },
            checkCustomTeamSizeRestrictions: function () {
              const e = this.get("customGamesService"),
                t = this.get("currentMapId"),
                n = e.findMinPlayersForMap(t),
                s = e.get("minPlayers"),
                o = e.get("currentNumPlayers"),
                a = n > s ? n : s;
              let r = "";
              o < n &&
                (r = this.translate(
                  "custom_game_champ_select_error_min_map_player",
                  { numPlayers: o, minRequired: n },
                )),
                o < s &&
                  (r = this.translate(
                    "custom_game_champ_select_error_min_player",
                    { minPlayers: a },
                  ));
              const l = i.tra.get("parties_kicked_confirmation_ok");
              return o < a
                ? (this.showModal({
                    type: "DialogAlert",
                    data: { contents: r, okText: l },
                  }),
                  Promise.reject())
                : Promise.resolve();
            },
            checkCustomRewards: function () {
              return this.get("hideCustomGameRewardsModal")
                ? Promise.resolve()
                : new Promise((e, t) => {
                    document.activeElement.blur();
                    const n =
                      this.get(
                        "customGamesService",
                      ).getRewardsDisabledReasons();
                    if (!n || 0 === n.length) return void e();
                    const s = [];
                    n.forEach((e) => {
                      const t = `tra.custom_game_rewards_disabled_reason_${e.toLowerCase()}`,
                        n = this.get(t);
                      n && n.length > 0 && s.push(n);
                    }),
                      this.set(
                        "customGameRewardsDisabledReasons",
                        i.Ember.A(s),
                      );
                    const o = this.showModal({
                      type: "DialogConfirm",
                      data: {
                        contents: this.get(
                          "customGameRewardsDisabledModalElement",
                        ),
                        acceptText: this.get(
                          "tra.custom_game_rewards_disabled_confirm_yes",
                        ),
                        declineText: this.get(
                          "tra.custom_game_rewards_disabled_confirm_no",
                        ),
                        onAccept: () => {
                          e();
                        },
                        onDecline: () => {
                          t();
                        },
                      },
                    });
                    o.domNode.classList.add(
                      "parties-custom-game-rewards-disabled-modal",
                    );
                    const a = o.domNode.querySelector(".button-accept");
                    a && a.focus();
                  });
            },
            enterChampSelectLockTime: 300,
            customEnterChampSelect: function () {
              return (
                this.set("confirmButtonThrottled", !0),
                this.get("customGamesService")
                  .enterChampSelect()
                  .then(
                    () => {
                      this.set("_isTransitioningState", !1),
                        this.runTask(() => {
                          this.set("confirmButtonThrottled", !1);
                        }, this.get("enterChampSelectLockTime"));
                    },
                    (e) => {
                      this.set("confirmButtonThrottled", !1),
                        this.handleCustomGameChampSelectError(e);
                    },
                  )
              );
            },
            handleCustomGameChampSelectError: function (e) {
              i.logger.warning(
                `Custom game encountered error when entering champ select: ${e}`,
              );
              const t = this.determineCustomGameErrorBody(e);
              this.set("customGameChampSelectErrorBody", t);
              const n = i.tra.get("parties_kicked_confirmation_ok");
              this.showModal({
                type: "DialogAlert",
                data: {
                  contents: this.get("customGameChampSelectErrorElement"),
                  okText: n,
                },
              }).domNode.classList.add(
                "parties-custom-game-champ-select-errors-modal",
              ),
                this.set("_isTransitioningState", !1),
                this.set("customGamesService.preventTeamChanges", !1);
            },
            aggregateCustomChampSelectErrorReasons: function (e) {
              if (!e.data) return {};
              let t = {};
              if (e.data.failedPlayers && e.data.failedPlayers.length)
                for (let n = 0; n < e.data.failedPlayers.length; n++) {
                  const i = e.data.failedPlayers[n];
                  t[i.reason] || (t[i.reason] = []),
                    t[i.reason].push(i.summonerName);
                }
              return (
                (t = this.aggregateCustomChampSelectErrorByStatus(e, t)), t
              );
            },
            aggregateCustomChampSelectErrorByStatus: function (e, t) {
              if (e.data.httpStatus)
                switch (e.data.httpStatus) {
                  case 435:
                    t.GAME_MODE_NOT_SUPPORTED = !0;
                    break;
                  case 436:
                    let n = !0;
                    if (e.data.message) {
                      const t = e.data.message.match(/([0-9]+) required/);
                      t && (n = t[1]);
                    }
                    t.NOT_ENOUGH_PLAYERS_FOR_MAP = n;
                }
              return t;
            },
            determineCustomGameErrorBody: function (e) {
              let t = "";
              const n = this.aggregateCustomChampSelectErrorReasons(e);
              if (
                (this.set("customGameChampSelectErrorPlayers", i.Ember.A()),
                this.set("showCustomGameMinorRestrictionDetails", !1),
                n.RANKED_NUM_CHAMPS)
              )
                (t = this.get(
                  "tra.custom_game_champ_select_error_min_champions",
                )),
                  this.set(
                    "customGameChampSelectErrorPlayers",
                    i.Ember.A(n.RANKED_NUM_CHAMPS),
                  );
              else if (
                n.MINOR_RESTRICTED ||
                n.PARENTAL_CONTROL_RESTRICTION ||
                n.TIME_PLAYED_RESTRICTION
              ) {
                t = this.get(
                  "tra.custom_game_champ_select_error_generic_player_restriction",
                );
                const e = i.tra.metadata().locale.id.substr(0, 2).toLowerCase(),
                  s = i.lodash
                    .union(
                      n.MINOR_RESTRICTED,
                      n.PARENTAL_CONTROL_RESTRICTION,
                      n.TIME_PLAYED_RESTRICTION,
                    )
                    .sort((t, n) => t.localeCompare(n, e));
                this.set("customGameChampSelectErrorPlayers", i.Ember.A(s)),
                  this.set("showCustomGameMinorRestrictionDetails", !0);
              } else if (n.NOT_ENOUGH_PLAYERS_FOR_MAP)
                if (!0 === n.NOT_ENOUGH_PLAYERS_FOR_MAP)
                  t = this.get(
                    "tra.custom_game_champ_select_error_min_player_unknown_required",
                  );
                else {
                  const e =
                    this.get("customGamesService").get("currentNumPlayers");
                  t = this.translate(
                    "custom_game_champ_select_error_min_map_player",
                    {
                      numPlayers: e,
                      minRequired: n.NOT_ENOUGH_PLAYERS_FOR_MAP,
                    },
                  );
                }
              else
                t = n.GAME_MODE_NOT_SUPPORTED
                  ? this.get(
                      "tra.custom_game_champ_select_error_game_mode_unsupported",
                    )
                  : this.get("tra.custom_game_champ_select_error_unknown");
              return t;
            },
            leavePartyModal: function () {
              if (this.get("currentPartySize") > 1) {
                this.showModal({
                  type: "DialogConfirm",
                  data: {
                    contents: this.get("tra.parties_leave_confirmation_text"),
                    acceptText: this.get("tra.parties_leave_confirmation_yes"),
                    declineText: this.get("tra.parties_leave_confirmation_no"),
                    onAccept: () => {
                      this.leaveParty();
                    },
                  },
                }).domNode.classList.add("parties-leave-party-modal");
              } else this.leaveParty();
            },
            confirmButtonClicked: function () {
              this.set("_isTransitioningState", !0),
                this.get("customGamesService.isCustom")
                  ? this.customTryToEnterChampSelect()
                  : this.startMatchmaking();
            },
            _hasClickedCloseDuringTransition: !1,
            handleCloseDuringTransition: i.Ember.computed(
              "_hasClickedCloseDuringTransition",
              "isSearching",
              "isMatchFound",
              "hasPenaltyTime",
              function () {
                (this.get("isSearching") ||
                  this.get("isMatchFound") ||
                  this.get("hasPenaltyTime")) &&
                  (this.set("_isTransitioningState", !1),
                  this.get("_hasClickedCloseDuringTransition") &&
                    (this.set("_hasClickedCloseDuringTransition", !1),
                    this.cancelMatchmaking()));
              },
            ),
            lobbyAvailabilityMatchmakingObserver: i.Ember.observer(
              "hasQueueAvailabilityWarning",
              "isSearching",
              function () {
                this.get("hasQueueAvailabilityWarning") &&
                  this.get("isSearching") &&
                  this.get("lobbiesService").cancelMatchmakingSearch();
              },
            ),
            closeButtonClicked: function () {
              this.blurCloseButton(),
                this.get("isSearching") || this.get("isMatchFound")
                  ? this.cancelMatchmaking()
                  : this.get("_isTransitioningState")
                    ? (this.set("_hasClickedCloseDuringTransition", !0),
                      this.get("lobbiesService")
                        .leaveLobby()
                        .catch((e) => {
                          i.logger.warning(`Leaving lobby failed: ${e}`),
                            this.set("_isTransitioningState", !1);
                        }))
                    : this.leavePartyModal();
            },
            blurCloseButton: function () {
              const e = this.element.querySelector("button.close");
              e && e.blur();
            },
            actions: {
              confirmButton: function () {
                this.confirmButtonClicked();
              },
              closeButton: function () {
                this.closeButtonClicked();
              },
            },
          },
        );
      },
      (e, t, n) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.default = void 0);
        var i = (function (e, t) {
          if (!t && e && e.__esModule) return e;
          if (null === e || ("object" != typeof e && "function" != typeof e))
            return { default: e };
          var n = s(t);
          if (n && n.has(e)) return n.get(e);
          var i = {},
            o = Object.defineProperty && Object.getOwnPropertyDescriptor;
          for (var a in e)
            if ("default" !== a && Object.prototype.hasOwnProperty.call(e, a)) {
              var r = o ? Object.getOwnPropertyDescriptor(e, a) : null;
              r && (r.get || r.set)
                ? Object.defineProperty(i, a, r)
                : (i[a] = e[a]);
            }
          (i.default = e), n && n.set(e, i);
          return i;
        })(n(1));
        function s(e) {
          if ("function" != typeof WeakMap) return null;
          var t = new WeakMap(),
            n = new WeakMap();
          return (s = function (e) {
            return e ? n : t;
          })(e);
        }
        var o = new (class {
          constructor() {
            const e = i.default.getProvider().getSocket();
            (this._telemetryBinding = (0, i.dataBinding)("/telemetry", e)),
              (this._startSessionTime = !1);
          }
          beginSession() {
            this._startSessionTime = new Date();
          }
          sendTelemetryEvent(e, t) {
            const n = this._startSessionTime
                ? new Date() - this._startSessionTime
                : -1,
              i = Object.assign(t, {
                plugin: "rcp-fe-lol-parties",
                sessionTime: n.toString(),
              });
            this._logDradisEvent(e, i);
          }
          _sendDetailedEvent(e, t, n, i, s) {
            ((s = s || {}).eventContext = e),
              (s.eventType = t),
              (s.eventAction = n),
              this._logDradisEvent(i, s);
          }
          _logDradisEvent(e, t) {
            this._telemetryBinding.post(`/v1/events/${e}`, t);
          }
          logError(e, t, n) {
            const i = { action: e, errorDescription: t, errorData: n };
            return this._sendDetailedEvent(
              "app",
              "general",
              "error",
              "social_panel",
              i,
            );
          }
          gameInviteAccept() {
            this._sendDetailedEvent(
              "gamePanel",
              "gameInvite",
              "accept",
              "social_panel",
            );
          }
          gameInviteDecline() {
            this._sendDetailedEvent(
              "gamePanel",
              "gameInvite",
              "decline",
              "social_panel",
            );
          }
        })();
        t.default = o;
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "e4BeLJFg",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\footer-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\footer-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\footer-component\\\\index.js\\" "],["text","\\n"],["append",["helper",["arrow-footer"],null,[["animationsEnabled","confirmButtonDisabled","confirmButtonText","confirmButtonShowTooltip","confirmButtonTooltipText","confirmButtonHoverSound","confirmButtonClickSound","closeButtonDisabled","closeButtonText","closeButtonHoverSound","closeButtonClickSound","closeButtonType","confirmButtonClicked","closeButtonClicked"],[["get",["animationsEnabled"]],["get",["confirmButtonDisabled"]],["get",["confirmButtonText"]],["get",["confirmButtonShowTooltip"]],["get",["confirmButtonTooltipText"]],["get",["buttonSounds","confirmHover"]],["get",["buttonSounds","confirmClick"]],["get",["closeButtonDisabled"]],["get",["closeButtonText"]],["get",["buttonSounds","closeHover"]],["get",["buttonSounds","closeClick"]],"close","confirmButton","closeButton"]]],false],["text","\\n"],["open-element","span",[]],["dynamic-attr","data-eligibility-observer",["concat",[["unknown",["eligibilityObserver"]]]]],["flush-element"],["close-element"],["text","\\n"],["open-element","span",[]],["dynamic-attr","data-showing-party-observer",["concat",[["unknown",["showingPartyObserver"]]]]],["flush-element"],["close-element"],["text","\\n"],["open-element","span",[]],["dynamic-attr","data-close-transition-observer",["concat",[["unknown",["handleCloseDuringTransition"]]]]],["flush-element"],["close-element"],["text","\\n"],["open-element","div",[]],["static-attr","style","display:none;"],["flush-element"],["text","\\n  "],["open-element","lol-uikit-content-block",[]],["static-attr","class","custom-games-error"],["static-attr","id","custom-games-disabled-reasons"],["static-attr","type","dialog-medium"],["flush-element"],["text","\\n"],["block",["if"],[["get",["showCustomGameContentWarning"]]],null,4,3],["text","  "],["close-element"],["text","\\n  "],["open-element","lol-uikit-content-block",[]],["static-attr","class","custom-games-error"],["static-attr","id","custom-games-champ-select-error"],["static-attr","type","dialog-medium"],["flush-element"],["text","\\n    "],["open-element","h5",[]],["static-attr","class","preserve-case"],["flush-element"],["append",["unknown",["tra","custom_game_champ_select_error_start_game"]],false],["close-element"],["text","\\n    "],["open-element","p",[]],["flush-element"],["append",["unknown",["customGameChampSelectErrorBody"]],false],["close-element"],["text","\\n    "],["open-element","ul",[]],["flush-element"],["text","\\n"],["block",["each"],[["get",["customGameChampSelectErrorPlayers"]]],null,1],["text","    "],["close-element"],["text","\\n"],["block",["if"],[["get",["showCustomGameMinorRestrictionDetails"]]],null,0],["text","  "],["close-element"],["text","\\n"],["close-element"],["text","\\n\\n"],["append",["helper",["matchmaking-errors"],null,[["_isTransitioningState"],[["get",["_isTransitioningState"]]]]],false],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","custom-games-minor-restriction-details"],["flush-element"],["text","\\n        "],["open-element","p",[]],["flush-element"],["append",["unknown",["tra","custom_game_minor_restriction_details_header"]],false],["close-element"],["text","\\n        "],["open-element","ul",[]],["flush-element"],["text","\\n          "],["open-element","li",[]],["flush-element"],["append",["unknown",["tra","custom_game_minor_restriction_details_real_name_auth"]],false],["close-element"],["text","\\n          "],["open-element","li",[]],["flush-element"],["append",["unknown",["tra","custom_game_minor_restriction_details_healthy_time"]],false],["close-element"],["text","\\n          "],["open-element","li",[]],["flush-element"],["append",["unknown",["tra","custom_game_minor_restriction_details_harmful_behavior"]],false],["close-element"],["text","\\n        "],["close-element"],["text","\\n        "],["open-element","p",[]],["flush-element"],["text","\\n          "],["append",["unknown",["tra","custom_game_minor_restriction_details_footer_text_before_link"]],false],["text","\\n          "],["open-element","a",[]],["static-attr","href","http://lol.qq.com/jksh"],["static-attr","target","_blank"],["flush-element"],["text","http://lol.qq.com/jksh"],["close-element"],["text","\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","li",[]],["flush-element"],["append",["get",["player"]],false],["close-element"],["text","\\n"]],"locals":["player"]},{"statements":[["text","        "],["open-element","li",[]],["flush-element"],["append",["get",["reason"]],false],["close-element"],["text","\\n"]],"locals":["reason"]},{"statements":[["text","      "],["open-element","h5",[]],["static-attr","class","preserve-case"],["flush-element"],["append",["unknown",["tra","custom_game_rewards_disabled_header"]],false],["close-element"],["text","\\n      "],["open-element","p",[]],["flush-element"],["append",["unknown",["tra","custom_game_rewards_disabled_question"]],false],["close-element"],["text","\\n      "],["open-element","p",[]],["flush-element"],["append",["unknown",["tra","custom_game_rewards_disabled_reasons_header"]],false],["close-element"],["text","\\n      "],["open-element","ul",[]],["flush-element"],["text","\\n"],["block",["each"],[["get",["customGameRewardsDisabledReasons"]]],null,2],["text","      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","ul",[]],["flush-element"],["text","\\n        "],["open-element","li",[]],["flush-element"],["append",["unknown",["tra","custom_game_training_content_warning"]],false],["close-element"],["text","\\n        "],["open-element","li",[]],["flush-element"],["append",["unknown",["tra","custom_game_training_rewards_warning"]],false],["close-element"],["text","\\n        "],["open-element","br",[]],["flush-element"],["close-element"],["text","\\n        "],["open-element","p",[]],["flush-element"],["append",["unknown",["tra","custom_game_training_question"]],false],["close-element"],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1),
          s = l(n(123)),
          o = l(n(94)),
          a = l(n(72)),
          r = l(n(19));
        function l(e) {
          return e && e.__esModule ? e : { default: e };
        }
        n(124);
        e.exports = i.Ember.Component.extend(
          s.default,
          o.default,
          a.default,
          r.default,
          {
            layout: n(125),
            classNames: ["parties-lower-section"],
            classNameBindings: [
              "haveCurrentPlayer:parties-lower-section-fade-in",
              "friendDropping:droppable-dropping",
              "friendDragging:droppable-available",
              "animationsEnabled:animations-enabled:animations-disabled",
            ],
            currentPlayer: null,
            haveCurrentPlayer: i.Ember.computed.notEmpty("currentPlayer"),
            lobbiesService: i.Ember.inject.service("lobbies"),
            matchmakingService: i.Ember.inject.service("matchmaking"),
            partySettingsService: i.Ember.inject.service("party-settings"),
            invitesService: i.Ember.inject.service("invites"),
            animationsEnabled: i.Ember.computed.alias(
              "partySettingsService.animationsEnabled",
            ),
            canInvite: i.Ember.computed.alias(
              "lobbiesService.currentPlayerCanInvite",
            ),
            tooltipText: i.Ember.computed(
              "tra.ready",
              "tra.metadata",
              "lobbiesService.currentPlayerCanInvite",
              function () {
                return this.get("lobbiesService.currentPlayerCanInvite")
                  ? this.get("tra.parties_drag_to_invite")
                  : "";
              },
            ),
            acceptMimes: ["application/riot.player+json"],
            isInQueue: i.Ember.computed.or(
              "matchmakingService.isSearching",
              "matchmakingService.isMatchFound",
            ),
            isNotInQueue: i.Ember.computed.not("isInQueue"),
            canReceiveDrops: i.Ember.computed.and("canInvite", "isNotInQueue"),
            friendDragging: i.Ember.computed.and(
              "canReceiveDrops",
              "dropAvailable",
            ),
            friendDropping: i.Ember.computed.and("canReceiveDrops", "dropping"),
            droppableDropped: function (e, t) {
              if (!this.get("canReceiveDrops")) return !1;
              const n = this.get("invitesService");
              t && t.summonerId
                ? n.invitePlayer(t.summonerId, t.name).then(
                    () => {
                      this.playSound("/fe/lol-parties/sfx-soc-ui-drop.ogg");
                    },
                    () => {
                      this.playNotEligibleSound();
                    },
                  )
                : this.playNotEligibleSound();
            },
            droppableDragEntered: function () {
              this.playSound("/fe/lol-parties/sfx-soc-ui-drag.ogg");
            },
            playNotEligibleSound: function () {
              this.playSound("/fe/lol-parties/sfx-lobby-notif-bad-invite.ogg");
            },
          },
        );
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        const s = ["dragenter", "dragleave", "dragover", "drop"],
          o = ["dragenter", "dragleave", "drop"];
        e.exports = i.Ember.Mixin.create({
          classNameBindings: [],
          droppable: !0,
          acceptMimes: [],
          dropEffect: "move",
          acceptedMime: "",
          canAcceptDrop: function (e) {
            return this.get("acceptMimes").some((t) => {
              if (-1 !== e.types.indexOf(t))
                return this.set("acceptedMime", t), !0;
            });
          },
          _initDroppable: i.Ember.on("didInsertElement", function () {
            this._attachListeners();
          }),
          _cleanupDroppable: i.Ember.on("willDestroyElement", function () {
            this._detachListeners();
          }),
          _attachListeners: function () {
            (this._droppableEvent = this._droppableEvent.bind(this)),
              s.forEach((e) => {
                this.element.addEventListener(e, this._droppableEvent);
              }),
              (this._droppableDocEvents = this._droppableDocEvents.bind(this)),
              o.forEach((e) => {
                document.addEventListener(e, this._droppableDocEvents);
              });
          },
          _detachListeners: function () {
            s.forEach((e) => {
              this.element.removeEventListener(e, this._droppableEvent);
            }),
              o.forEach((e) => {
                document.removeEventListener(e, this._droppableDocEvents);
              });
          },
          _checkDropEvent: function (e) {
            const t = e.dataTransfer,
              n = this.get("droppable"),
              i = this.canAcceptDrop(t);
            return n && i;
          },
          _updateDropState: i.Ember.observer("droppable", function () {
            this.get("droppable") ||
              (this.set("dropping", !1), this.set("dropAvailable", !1));
          }),
          _droppableEvent: function (e) {
            if (this._checkDropEvent(e))
              if ("dragover" === e.type)
                e.preventDefault(),
                  (e.dataTransfer.dropEffect = this.get("dropEffect"));
              else if ("dragenter" === e.type)
                this.get("dropping")
                  ? this.set("_ignoreNextDragLeave", !0)
                  : (e.preventDefault(),
                    this.set("dropping", !0),
                    this.trigger("droppableDragEntered")),
                  this.set("dropAvailable", !0);
              else if ("dragleave" === e.type)
                this.get("_ignoreNextDragLeave")
                  ? this.set("_ignoreNextDragLeave", !1)
                  : (this.set("dropping", !1),
                    this.trigger("droppableDragLeft"));
              else if ("drop" === e.type) {
                e.preventDefault(),
                  this.set("dropping", !1),
                  this.set("dropAvailable", !1);
                const { dataTransfer: t } = e,
                  n = this.get("acceptedMime");
                let s = t.getData(n);
                if (-1 !== n.indexOf("json"))
                  try {
                    s = JSON.parse(s);
                  } catch (e) {
                    i.logger.error("Error parsing JSON drop data:", {
                      data: s,
                      e,
                    });
                  }
                this.trigger("droppableDropped", n, s, t);
              }
          },
          _droppableDocEvents: function (e) {
            this._checkDropEvent(e) &&
              ("dragenter" === e.type
                ? this.get("dropAvailable")
                  ? this.set("_ignoreNextDocLeave", !0)
                  : this.set("dropAvailable", !0)
                : "dragleave" === e.type
                  ? this.get("_ignoreNextDocLeave")
                    ? this.set("_ignoreNextDocLeave", !1)
                    : this.set("dropAvailable", !1)
                  : "drop" === e.type &&
                    (this.set("_ignoreNextDocLeave", !1),
                    this.set("dropAvailable", !1)));
          },
        });
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "NsLPS+tq",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\lower-section-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\lower-section-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\lower-section-component\\\\index.js\\" "],["text","\\n"],["yield","default"],["text","\\n\\n"],["open-element","div",[]],["static-attr","class","parties-invite-dropzone"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","parties-invite-dropzone-icon"],["flush-element"],["close-element"],["text","\\n  "],["open-element","span",[]],["static-attr","class","parties-invite-dropzone-tooltip"],["flush-element"],["text","\\n    "],["append",["unknown",["tooltipText"]],false],["text","\\n  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":["default"],"blocks":[],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1),
          s = c(n(5)),
          o = c(n(7)),
          a = n(9);
        n(127);
        var r = c(n(72)),
          l = c(n(19));
        function c(e) {
          return e && e.__esModule ? e : { default: e };
        }
        const m = (0, i.emberDataBinding)({
          Ember: i.Ember,
          websocket: (0, i.getProvider)().getSocket(),
          logPrefix: "parties:player-banner:component",
          basePaths: { summoner: "/lol-summoner", chat: "/lol-chat" },
        });
        e.exports = i.Ember.Component.extend(m, r.default, l.default, {
          layout: n(128),
          classNames: ["player-party-controls"],
          classNameBindings: [
            "isMe:main-player-controls:other-player-controls",
          ],
          isLeader: !1,
          isMe: !1,
          playerNames: i.playerNames,
          chatService: i.Ember.inject.service("chat"),
          lobbiesService: i.Ember.inject.service("lobbies"),
          matchmakingService: i.Ember.inject.service("matchmaking"),
          partySettingsService: i.Ember.inject.service("party-settings"),
          eligibilitiesEntity: s.default,
          restrictions: i.Ember.computed.alias(
            "eligibilitiesEntity.playerRestrictions",
          ),
          observedRestrictions: [],
          memberRestrictions: null,
          contextMenuManager: i.UIKit.getContextMenuManager(),
          animationsEnabled: i.Ember.computed.alias(
            "partySettingsService.bannerAnimationsEnabled",
          ),
          isPlaceholder: i.Ember.computed.not("member"),
          isNotPlaceholder: i.Ember.computed.not("isPlaceholder"),
          currentTeamIsFull: i.Ember.computed.alias(
            "lobbiesService.currentTeamIsFull",
          ),
          summonerId: i.Ember.computed.alias("member.summonerId"),
          puuid: i.Ember.computed.alias("member.puuid"),
          showPartyOwnerTools: i.Ember.computed.and(
            "currentPlayerIsLeader",
            "isNotMe",
            "notQueued",
          ),
          isNotMe: i.Ember.computed.not("isMe"),
          showGhostedBanner: i.Ember.computed.alias("member.showGhostedBanner"),
          shouldShowGhostedBanner: i.Ember.computed.and(
            "isNotPlaceholder",
            "isNotMe",
            "showGhostedBanner",
          ),
          hasInvitePrivileges: i.Ember.computed.alias(
            "member.allowedInviteOthers",
          ),
          currentPlayerIsLeader: i.Ember.computed.alias(
            "lobbiesService.isCurrentPlayerPartyLeader",
          ),
          currentPlayerIsNotLeader: i.Ember.computed.not(
            "currentPlayerIsLeader",
          ),
          isMatchNotFound: i.Ember.computed.alias(
            "matchmakingService.isMatchNotFound",
          ),
          isNotSearching: i.Ember.computed.alias(
            "matchmakingService.isNotSearching",
          ),
          notQueued: i.Ember.computed.and("isMatchNotFound", "isNotSearching"),
          didReceiveAttrs: function () {
            this._super(...arguments);
            const e = this.get("queueId"),
              t = o.default.getQueueById(e);
            t &&
              t.isRanked &&
              e !== this.prevQueueId &&
              i.LeagueTierNames.getTiersForQueue(t.type).then((e) => {
                this.set("rankedQueueTiers", e || []);
              }),
              (this.prevQueueId = e);
          },
          showPositionSelector: i.Ember.computed(
            "member",
            "lobbiesService.showPositionSelector",
            function () {
              return (
                !!this.get("member") &&
                !!this.get("lobbiesService.showPositionSelector")
              );
            },
          ),
          groupMissingTokenRestrictions: function (e) {
            return this.get(
              "eligibilitiesEntity",
            ).groupMissingTokenRestrictions(e);
          },
          _updateMemberRestrictions: function () {
            const e = this.get("restrictions"),
              t = this.get("member.summonerId"),
              n = i.Ember.A();
            if (i.Ember.isArray(e)) {
              const i = this.groupMissingTokenRestrictions(e);
              for (let e = 0; e < i.length; e++) {
                const s = i[e];
                -1 !== s.summonerIds.indexOf(t) && n.pushObject(s);
              }
            }
            this.set("memberRestrictions", n);
          },
          _updateRestrictionObservers: function () {
            const e = [];
            this.get("observedRestrictions").forEach((e) => {
              e.removeObserver(
                "restrictionArgs.playerMinLevelRestriction",
                this,
                this._updateMemberRestrictions,
              );
            }),
              this.get("restrictions") &&
                this.get("restrictions").forEach((t) => {
                  t.addObserver(
                    "restrictionArgs.playerMinLevelRestriction",
                    this,
                    this._updateMemberRestrictions,
                  ),
                    e.push(t);
                }),
              this.set("observedRestrictions", e);
          },
          observeRestrictionArgs: i.Ember.on(
            "init",
            i.Ember.observer(
              "restrictions",
              "restrictions.@each.restrictionCode",
              "restrictions.@each.summonerIds",
              "member.summonerId",
              function () {
                this._updateRestrictionObservers(),
                  this._updateMemberRestrictions();
              },
            ),
          ),
          restrictionLeaderClass: i.Ember.computed(
            "currentPlayerIsLeader",
            function () {
              return this.get("currentPlayerIsLeader") ? "leader" : "";
            },
          ),
          hasMemberRestrictions: i.Ember.computed.gt(
            "memberRestrictions.length",
            0,
          ),
          shouldShowRestrictions: i.Ember.computed.and(
            "member",
            "hasMemberRestrictions",
          ),
          restrictionToolTipText: i.Ember.computed(
            "tra.ready",
            "memberRestrictions.@each.restrictionCode",
            "isMe",
            "rankedQueueTiers.[]",
            "lobbiesService.currentQueue",
            function () {
              const e = this.get("memberRestrictions"),
                t = i.Ember.A(),
                n = this.get("isMe");
              let o = !1;
              for (let i = 0; i < e.length; i++) {
                const r = e[i],
                  { restrictionCode: l } = r;
                let c = r.restrictionArgs;
                if (a.TENCENT_MINOR_RESTRICTIONS.includes(l)) {
                  if (o) continue;
                  o = !0;
                }
                let m = `game_select_queue_restriction_player_${l.toLowerCase()}`;
                if ("MissingToken" === l)
                  if (r.restrictionArgs.errorCodes.includes("3L"))
                    m =
                      "game_select_queue_restriction_player_leagues_missingtoken";
                  else {
                    m = `game_select_queue_restriction_${n ? "self" : "player"}_${l.toLowerCase()}`;
                  }
                else if ("PlayerRankSoloOnlyRestriction" === l) {
                  const e = this.get("rankedQueueTiers"),
                    t = s.default.getLocInfoForPlayerRankSoloOnlyRestriction(
                      r,
                      e,
                    );
                  (m = t.key), (c = t.args);
                } else if (l === a.TFT_NEW_PLAYER_RESTRICTION) {
                  const e = this.get("lobbiesService.currentQueue");
                  c = { gameMode: e ? e.description : "" };
                }
                t.pushObject(this.get("tra").formatString(m, c));
              }
              return t;
            },
          ),
          tooltipConfig: {
            targetAnchor: { x: "center", y: "bottom" },
            tooltipAnchor: { x: "center", y: "top" },
          },
          observeCurrentPlayerIsLeader: i.Ember.observer(
            "currentPlayerIsLeader",
            function () {
              i.Ember.run.once(this, this._onCurrentPlayerIsLeader);
            },
          ),
          _onCurrentPlayerIsLeader: function () {
            this.set("_transferringLeadership", !1);
          },
          isFriended: i.Ember.computed(
            "member",
            "member.summonerId",
            "chatService.friends.[]",
            function () {
              return this.get("chatService").isFriend(
                this.get("member.summonerId"),
              );
            },
          ),
          contextMenuModel: i.Ember.computed(
            "showPartyOwnerTools",
            "hasInvitePrivileges",
            "isMe",
            "member",
            "isFriended",
            "tra.ready",
            "tra.context_menu_promote_to_leader",
            "tra.context_menu_kick",
            "tra.context_menu_friend_request",
            "tra.context_menu_revoke_invite_privilege",
            "tra.context_menu_grant_invite_privilege",
            function () {
              const e = this.get("isFriended"),
                t = this.get("showPartyOwnerTools") || !e;
              return !this.get("isMe") && this.get("member") && t
                ? [
                    {
                      action: function () {
                        this.send("promoteToOwner");
                      },
                      class: "promote",
                      target: this,
                      label: this.get("tra.context_menu_promote_to_leader"),
                    },
                    {
                      action: function () {
                        this.send("kick");
                      },
                      class: "kick",
                      target: this,
                      label: this.get("tra.context_menu_kick"),
                    },
                    {
                      action: function () {
                        this.send("sendFriendRequest");
                      },
                      class: "add-friend",
                      target: this,
                      label: this.get("tra.context_menu_friend_request"),
                      hidden: e,
                    },
                    {
                      action: function () {
                        this.send("toggleInvitePrivilege");
                      },
                      class: this.get("hasInvitePrivileges")
                        ? "revoke-invite"
                        : "grant-invite",
                      target: this,
                      label: this.get("hasInvitePrivileges")
                        ? this.get("tra.context_menu_revoke_invite_privilege")
                        : this.get("tra.context_menu_grant_invite_privilege"),
                    },
                  ]
                : null;
            },
          ),
          promotePlayer: function () {
            const e = this.get("member");
            if (!e || !e.summonerId)
              throw new Error(
                "Attempting to act on invalid party member: " + e,
              );
            this.set("_transferringLeadership", !0),
              this.get("lobbiesService").transferLeadershipToPlayer(
                e.summonerId,
              );
          },
          blockPlayer: function (e) {
            this.get("api.chat").post("/v1/blocked-players", e);
          },
          sendFriendRequest: function (e) {
            this.get("api.chat").post("/v2/friend-requests", e);
          },
          actions: {
            openCaptainMenu: function () {
              this.get("contextMenuModel") &&
                (this.contextMenuManager.setMenuItems(
                  this.get("contextMenuModel"),
                ),
                this.contextMenuManager.openAtEvent(event));
            },
            sendFriendRequest: function () {
              if (this.get("member")) {
                const e = { direction: "out", puuid: this.get("puuid") };
                this.sendFriendRequest(e), this.set("isFriended", !0);
                const t = this.get("tra").formatString(
                  "context_menu_friend_request_sent_to",
                  {
                    summonerName: this.get("member.displayName.playerNameFull"),
                  },
                );
                this.showToast(t);
              }
            },
            kick: async function () {
              if (!this.get("member"))
                throw new ReferenceError(
                  "game-select-lobby-panel-teams-player component must have a member",
                );
              const { playerName: e } = await this.get(
                  "playerNames",
                ).getDisplayNameByPUUID(this.get("puuid")),
                t = this.get("tra").formatString(
                  "lobby_kick_confirmation_text",
                  { summonerName: e },
                ),
                n = this.$(
                  `<lol-uikit-content-block type="dialog-small">\n          <p>${t}</p>\n        </lol-uikit-content-block>`,
                ),
                i = this.get("member.summonerId");
              if (
                this.get("currentPlayerIsLeader") &&
                !this.get("_transferringLeadership")
              ) {
                this.showModal({
                  type: "DialogConfirm",
                  data: {
                    contents: n,
                    acceptText: this.get("tra.parties_button_kick"),
                    declineText: this.get("tra.parties_button_cancel"),
                    onAccept: () => {
                      this.get("lobbiesService").removePlayerFromParty(i);
                    },
                  },
                }).domNode.classList.add("parties-kick-player-modal");
              }
            },
            toggleInvitePrivilege: function () {
              const e = this.get("member"),
                t = this.get("currentPlayerIsLeader");
              if (
                !this.get("_transferringLeadership") &&
                t &&
                e &&
                !this.get("isMe")
              ) {
                const t = e.allowedInviteOthers
                    ? "revoke-invite"
                    : "grant-invite",
                  n = this.get("member.summonerId");
                this.get("lobbiesService").sendInvitePrivilegeAction(n, t);
              }
            },
            promoteToOwner: function () {
              this.get("member") && this.promotePlayer();
            },
            block: function () {
              if (this.get("member")) {
                const e = { summonerId: this.get("member.summonerId") };
                this.blockPlayer(e);
              }
            },
          },
        });
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "DnAUiro6",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\player-banners\\\\player-party-controls-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\player-banners\\\\player-party-controls-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\player-banners\\\\player-party-controls-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","parties-player-labels-wrapper"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","parties-player-name-container"],["flush-element"],["text","\\n"],["block",["if"],[["get",["isLeader"]]],null,12],["text","    "],["open-element","lol-uikit-resizing-text-field",[]],["static-attr","class","parties-player-name"],["static-attr","data-max-width","140"],["flush-element"],["text","\\n      "],["append",["helper",["player-name"],null,[["format","puuid","summonerName"],["tooltip",["get",["member","puuid"]],["get",["member","summonerName"]]]]],false],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n"],["close-element"],["text","\\n\\n"],["block",["if"],[["get",["isNotMe"]]],null,11],["text","\\n\\n\\n"],["open-element","div",[]],["static-attr","class","lol-not-ready-loader"],["flush-element"],["text","\\n"],["block",["if"],[["get",["shouldShowGhostedBanner"]]],null,4],["close-element"],["text","\\n"],["block",["if"],[["get",["shouldShowRestrictions"]]],null,3],["text","\\n\\n"],["block",["if"],[["get",["showPositionSelector"]]],null,0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["append",["helper",["player-positions"],null,[["member","isMe","currentTeamIsFull","animationsEnabled","positionSelectorEmberApp","positionSelectorData","cachePositionSelector"],[["get",["member"]],["get",["isMe"]],["get",["currentTeamIsFull"]],["get",["animationsEnabled"]],["get",["positionSelectorEmberApp"]],["get",["positionSelectorData"]],["helper",["action"],[["get",[null]],["get",["cachePositionSelector"]]],null]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["open-element","p",[]],["flush-element"],["append",["get",["restriction"]],false],["close-element"],["text","\\n"]],"locals":["restriction"]},{"statements":[["text","      "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n"],["block",["each"],[["get",["restrictionToolTipText"]]],null,1],["text","      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["dynamic-attr","class",["concat",["player-lobby-restrictions ",["unknown",["restrictionLeaderClass"]]]]],["flush-element"],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipConfig"],[["get",["tooltipConfig"]]]],2],["text","  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","lol-not-ready-loader-segment"],["flush-element"],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","lol-not-ready-loader-segment"],["flush-element"],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","lol-not-ready-loader-segment"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n          "],["open-element","p",[]],["flush-element"],["text","\\n            "],["append",["unknown",["tra","captain_controls_tooltip"]],false],["text","\\n          "],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["player-management-button"],null,[["type","action"],["options","openCaptainMenu"]],5]],"locals":[]},{"statements":[["text","        "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n          "],["open-element","p",[]],["flush-element"],["text","\\n            "],["append",["unknown",["tra","context_menu_friend_request"]],false],["text","\\n          "],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["player-management-button"],null,[["type","action"],["add-friend","sendFriendRequest"]],7]],"locals":[]},{"statements":[["text","        "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n          "],["open-element","p",[]],["flush-element"],["text","\\n            "],["append",["unknown",["tra","kick_tooltip"]],false],["text","\\n          "],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["comment"," kick button is for party owners only "],["text","\\n"],["block",["player-management-button"],null,[["type","action"],["kick","kick"]],9]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","player-party-tools"],["flush-element"],["text","\\n"],["block",["if"],[["get",["showPartyOwnerTools"]]],null,10],["text","\\n    "],["comment"," any party member can Add Friend "],["text","\\n"],["block",["unless"],[["get",["isFriended"]]],null,8],["text","\\n    "],["comment"," options menu button is for party owners only "],["text","\\n"],["block",["if"],[["get",["showPartyOwnerTools"]]],null,6],["text","  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","parties-player-leader-icon"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        e.exports = i.Ember.Component.extend({
          layout: n(130),
          classNames: ["parties-invite-button"],
          currentPlayerCanInvite: null,
          buttonsDisabled: null,
          currentPartyIsFull: null,
          isCurrentPlayerPartyLeader: null,
          isLobbyFull: null,
          partiesInviteButtonText: i.Ember.computed(
            "tra.ready",
            "tra.parties_invite_button",
            function () {
              return this.get("tra.parties_invite_button");
            },
          ),
          inviteButtonTooltip: i.Ember.computed(
            "currentPartyIsFull",
            "isCurrentPlayerPartyLeader",
            "tra.ready",
            "tra.parties_invite_full_party_tooltip",
            "tra.parties_invite_privileges_tooltip_none",
            "buttonsDisabled",
            "cannotInviteOthers",
            function () {
              return this.get("buttonsDisabled")
                ? this.get("tra.parties_matchmaking_searching_tooltip")
                : this.get("currentPartyIsFull") ||
                    this.get("cannotInviteOthers")
                  ? this.get("tra.parties_invite_full_party_tooltip")
                  : this.get("tra.parties_invite_privileges_tooltip_none");
            },
          ),
          cannotInviteOthers: i.Ember.computed.not("currentPlayerCanInvite"),
          inviteButtonDisabled: i.Ember.computed.or(
            "buttonsDisabled",
            "currentPartyIsFull",
            "cannotInviteOthers",
            "isLobbyFull",
          ),
          inviteButtonEnabled: i.Ember.computed.not("inviteButtonDisabled"),
          actions: {
            showInvite: function () {
              this.get("inviteButtonEnabled") &&
                this.sendAction("showInviteModal");
            },
          },
        });
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "sh2lvLiv",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\invite-button-component\\\\layout.hbs\\" style-path=\\"null\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\invite-button-component\\\\index.js\\" "],["text","\\n"],["open-element","lol-uikit-flat-button",[]],["static-attr","class","parties-invite-button"],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"showInvite"],null],null],["dynamic-attr","disabled",["unknown",["inviteButtonDisabled"]],null],["flush-element"],["text","\\n  "],["append",["unknown",["partiesInviteButtonText"]],false],["text","\\n"],["block",["if"],[["get",["cannotInviteOthers"]]],null,1],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n        "],["open-element","p",[]],["flush-element"],["text","\\n          "],["append",["unknown",["inviteButtonTooltip"]],false],["text","\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["uikit-tooltip"],null,[["tooltipPosition","type"],["bottom","system"]],0]],"locals":[]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i,
          s = n(1),
          o = (i = n(19)) && i.__esModule ? i : { default: i },
          a = n(12);
        n(132);
        e.exports = s.Ember.Component.extend(o.default, {
          layout: n(133),
          classNames: ["parties-invite-info-panel"],
          currentPlayerCanInvite: !1,
          isCustom: !1,
          isTFT: !1,
          isNotTFT: s.Ember.computed.not("isTFT"),
          lobbiesService: s.Ember.inject.service("lobbies"),
          tftService: s.Ember.inject.service("tft"),
          activeMilestonesProgress: s.Ember.computed.alias(
            "tftService.activeMilestonesProgress",
          ),
          invitedPlayerIds: s.Ember.computed.alias(
            "lobbiesService.invitedPlayerIds",
          ),
          invites: s.Ember.computed.alias("lobbiesService.invites"),
          hasInvites: s.Ember.computed.gt("invites.length", 0),
          isNotCustom: s.Ember.computed.not("isCustom"),
          _tryingToViewProgression: !0,
          viewingProgression: s.Ember.computed.and(
            "_tryingToViewProgression",
            "progressionEnabled",
            "isTFT",
            "showingState.isInViewport",
          ),
          progressionEnabled: !0,
          _tryingToViewSuggested: !0,
          viewingSuggested: s.Ember.computed.and(
            "_tryingToViewSuggested",
            "suggestedEnabled",
            "isNotTFT",
          ),
          suggestedPlayers: s.Ember.computed.alias(
            "lobbiesService.currentPartySuggestedPlayers",
          ),
          panelIsCollapsed: !1,
          suggestedInvites: s.Ember.computed(
            "suggestedPlayers.[]",
            "suggestedPlayers.@each.summonerId",
            "invitedPlayerIds.[]",
            function () {
              const e = this.get("suggestedPlayers") || [],
                t = this.get("invitedPlayerIds");
              let n = s.Ember.A(),
                i = s.Ember.A();
              return (
                e.forEach((e) => {
                  const s = e.get("summonerId");
                  (t && t.indexOf(s) >= 0) ||
                    (e.get("reason") === a.SUGGESTED_TYPES.FRIEND
                      ? n.push(e)
                      : i.push(e));
                }),
                (n = n.sortBy("summonerName")),
                (i = i.sortBy("summonerName")),
                i.forEach((e) => {
                  n.push(e);
                }),
                this.get("isTFT") && n.length > 4 && (n = n.slice(0, 3)),
                n
              );
            },
          ),
          noSuggestedInvites: s.Ember.computed.equal(
            "suggestedInvites.length",
            0,
          ),
          currentPlayerCannotInvite: s.Ember.computed.not(
            "currentPlayerCanInvite",
          ),
          suggestedDisabled: s.Ember.computed.or(
            "noSuggestedInvites",
            "currentPlayerCannotInvite",
            "isCustom",
          ),
          suggestedEnabled: s.Ember.computed.not("suggestedDisabled"),
          actions: {
            viewSuggested() {
              ((!this.get("suggestedDisabled") &&
                !this.get("_tryingToViewSuggested")) ||
                this.get("viewingProgression")) &&
                (this.set("_tryingToViewSuggested", !0),
                this.set("_tryingToViewProgression", !1),
                this.playSound("/fe/lol-uikit/sfx-uikit-text-click-small.ogg"));
            },
            viewInvited() {
              (this.get("_tryingToViewSuggested") ||
                this.get("viewingProgression")) &&
                (this.set("_tryingToViewSuggested", !1),
                this.set("_tryingToViewProgression", !1),
                this.playSound("/fe/lol-uikit/sfx-uikit-text-click-small.ogg"));
            },
            viewProgression() {
              this.set("_tryingToViewSuggested", !1),
                this.set("_tryingToViewProgression", !0),
                this.playSound("/fe/lol-uikit/sfx-uikit-text-click-small.ogg");
            },
            toggleCollapsed() {
              this.toggleProperty("panelIsCollapsed"),
                this.get("element").classList.toggle("collapsed"),
                this.playSound("/fe/lol-uikit/sfx-uikit-text-click-small.ogg");
            },
          },
        });
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "kT02/p+3",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\invite-info-panel\\\\component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\invite-info-panel\\\\component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\invite-info-panel\\\\component\\\\index.js\\" "],["text","\\n"],["block",["if"],[["get",["isTFT"]]],null,14,13],["text","\\n"],["open-element","div",[]],["dynamic-attr","class",["concat",["parties-invite-info-panel-body ",["helper",["if"],[["get",["panelIsCollapsed"]],"collapsed"],null]]]],["flush-element"],["text","\\n  "],["open-element","ul",[]],["dynamic-attr","class",["concat",["parties-invite-info-panel-list\\n  ",["helper",["if"],[["get",["viewingSuggested"]],"viewing-suggested"],null],"\\n  ",["helper",["if"],[["get",["isCustom"]],"parties-invite-info-is-custom"],null]]]],["flush-element"],["text","\\n"],["block",["if"],[["get",["viewingSuggested"]]],null,10,8],["text","  "],["close-element"],["text","\\n"],["close-element"],["text","\\n\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","        "],["open-element","li",[]],["static-attr","class","parties-invite-info-empty"],["flush-element"],["text","\\n          "],["open-element","span",[]],["static-attr","class","parties-invite-info-empty-text"],["flush-element"],["text","\\n            "],["append",["unknown",["tra","custom_game_invited_panel_no_invites"]],false],["text","\\n          "],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["append",["helper",["invite-info-panel-player"],null,[["currentPlayerCanInvite","invitedPlayer","isSuggested"],[["get",["currentPlayerCanInvite"]],["get",["invite"]],false]]],false],["text","\\n"]],"locals":["invite"]},{"statements":[["block",["each"],[["get",["invites"]]],null,1]],"locals":[]},{"statements":[["text","            "],["append",["helper",["invite-info-panel-player"],null,[["currentPlayerCanInvite","player","isSuggested"],[["get",["currentPlayerCanInvite"]],["get",["suggestedPlayer"]],true]]],false],["text","\\n"]],"locals":["suggestedPlayer"]},{"statements":[["block",["each"],[["get",["suggestedInvites"]]],null,3]],"locals":[]},{"statements":[["block",["unless"],[["get",["suggestedDisabled"]]],null,4]],"locals":[]},{"statements":[["block",["if"],[["get",["isTFT"]]],null,5],["block",["if"],[["get",["hasInvites"]]],null,2,0],["text","    "]],"locals":[]},{"statements":[["text","      "],["append",["helper",["invite-info-panel-tft-progression"],null,[["class","activeMilestonesProgress"],["tft-progression",["get",["activeMilestonesProgress"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["viewingProgression"]]],null,7,6]],"locals":[]},{"statements":[["text","        "],["append",["helper",["invite-info-panel-player"],null,[["currentPlayerCanInvite","player","isSuggested"],[["get",["currentPlayerCanInvite"]],["get",["suggestedPlayer"]],true]]],false],["text","\\n"]],"locals":["suggestedPlayer"]},{"statements":[["block",["each"],[["get",["suggestedInvites"]]],null,9]],"locals":[]},{"statements":[["text","  "],["comment"," Do not show tabbed header with suggested if invite info only "],["text","\\n  "],["comment"," Note: this file should be revised into parties-v2 "],["text","\\n  "],["open-element","div",[]],["static-attr","class","custom-invite-header"],["flush-element"],["text","\\n    "],["open-element","span",[]],["static-attr","class","custom-invite-header-text"],["flush-element"],["text","\\n      "],["append",["unknown",["tra","invited_panel_title"]],false],["text"," ("],["append",["unknown",["invites","length"]],false],["text",")\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["dynamic-attr","class",["concat",["split-panel-header ",["helper",["if"],[["get",["viewingSuggested"]],"left-tab-active","right-tab-active"],null]]]],["flush-element"],["text","\\n    "],["open-element","a",[]],["static-attr","id","invite-header-suggested"],["dynamic-attr","class",["concat",["split-panel-header-title\\n        ",["helper",["if"],[["get",["viewingSuggested"]],"active"],null],"\\n        ",["helper",["if"],[["get",["suggestedDisabled"]],"disabled"],null]]]],["modifier",["action"],[["get",[null]],"viewSuggested"]],["flush-element"],["text","\\n        "],["append",["unknown",["tra","suggested_panel_lobby_title"]],false],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","a",[]],["static-attr","id","invite-header-invited"],["dynamic-attr","class",["concat",["split-panel-header-title ",["helper",["if"],[["get",["viewingSuggested"]],"","active"],null]]]],["modifier",["action"],[["get",[null]],"viewInvited"]],["flush-element"],["text","\\n          "],["append",["unknown",["tra","invited_panel_title"]],false],["text"," ("],["append",["unknown",["invites","length"]],false],["text",")\\n    "],["close-element"],["text","\\n    "],["open-element","div",[]],["dynamic-attr","class",["concat",["split-panel-arrow ",["helper",["if"],[["get",["panelIsCollapsed"]],"collapsed"],null]]]],["modifier",["action"],[["get",[null]],"toggleCollapsed"]],["flush-element"],["close-element"],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["isNotCustom"]]],null,12,11]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["dynamic-attr","class",["concat",["split-panel-header ",["helper",["if"],[["get",["viewingProgression"]],"left-tab-active","right-tab-active"],null]]]],["flush-element"],["text","\\n    "],["open-element","a",[]],["static-attr","id","invite-header-progression"],["dynamic-attr","class",["concat",["split-panel-header-title\\n        ",["helper",["if"],[["get",["viewingProgression"]],"active"],null],"\\n        ",["helper",["unless"],[["get",["progressionEnabled"]],"disabled"],null]]]],["modifier",["action"],[["get",[null]],"viewProgression"]],["flush-element"],["text","\\n        "],["append",["unknown",["tra","tft_progression_panel_title"]],false],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","a",[]],["static-attr","id","invite-header-invited"],["dynamic-attr","class",["concat",["split-panel-header-title ",["helper",["if"],[["get",["viewingProgression"]],"","active"],null]]]],["modifier",["action"],[["get",[null]],"viewInvited"]],["flush-element"],["text","\\n          "],["append",["unknown",["tra","invited_panel_title"]],false],["text"," ("],["append",["unknown",["invites","length"]],false],["text",")\\n    "],["close-element"],["text","\\n    "],["open-element","div",[]],["dynamic-attr","class",["concat",["split-panel-arrow ",["helper",["if"],[["get",["panelIsCollapsed"]],"collapsed"],null]]]],["modifier",["action"],[["get",[null]],"toggleCollapsed"]],["flush-element"],["close-element"],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1),
          s = a(n(19)),
          o = a(n(72));
        function a(e) {
          return e && e.__esModule ? e : { default: e };
        }
        n(135);
        const r = (0, i.emberDataBinding)({
          Ember: i.Ember,
          websocket: (0, i.getProvider)().getSocket(),
          logPrefix: "parties:invite-info-panel-player:component",
          basePaths: { lobby: "/lol-lobby" },
        });
        e.exports = i.Ember.Component.extend(r, s.default, o.default, {
          tagName: "li",
          classNames: "parties-invite-info-panel-player",
          classNameBindings: [
            "isSuggested:parties-suggested-player",
            "showPendingIndicator:parties-pending-invite",
            "isKicked:parties-kicked-invite",
            "isDeclined:parties-declined-invite",
            "isAccepted:parties-accepted-invite",
            "isError:parties-error-invite",
            "currentPlayerCanInvite:enabled:disabled",
          ],
          attributeBindings: ["summonerId"],
          customGamesService: i.Ember.inject.service("custom-games"),
          lobbiesService: i.Ember.inject.service("lobbies"),
          invitesService: i.Ember.inject.service("invites"),
          disabled: !1,
          _invitedFromSuggested: !1,
          _previousSummonerId: null,
          isSuggested: null,
          player: null,
          invitedPlayer: null,
          summonerId: i.Ember.computed(
            "player.summonerId",
            "invitedPlayer.toSummonerId",
            function () {
              return (
                this.get("invitedPlayer.toSummonerId") ||
                this.get("player.summonerId")
              );
            },
          ),
          recycle: i.Ember.computed("summonerId", function () {
            const e = this.get("summonerId");
            e &&
              e !== this.get("_previousSummonerId") &&
              (this.set("_invitedFromSuggested", !1),
              this.set("_previousSummonerId", e));
          }),
          layout: n(136),
          name: i.Ember.computed(
            "player.summonerName",
            "invitedPlayer.toSummonerName",
            function () {
              return (
                this.get("player.summonerName") ||
                this.get("invitedPlayer.toSummonerName") ||
                ""
              );
            },
          ),
          isPending: i.Ember.computed.equal("invitedPlayer.state", "Pending"),
          isAccepted: i.Ember.computed.equal("invitedPlayer.state", "Accepted"),
          isDeclined: i.Ember.computed.equal("invitedPlayer.state", "Declined"),
          isKicked: i.Ember.computed.equal("invitedPlayer.state", "Kicked"),
          isError: i.Ember.computed.equal("invitedPlayer.state", "Error"),
          showPendingIndicator: i.Ember.computed.or("isPending", "isRequested"),
          errorObserver: i.Ember.computed("isError", "name", function () {
            this.get("isError") &&
              this.get("customGamesService.isCustomUI") &&
              this.get("name") &&
              this._showCustomBannedToast();
          }),
          _showCustomBannedToast: async function () {
            const e = this.get("lobbiesService.invitations") || [],
              t = this.get("summonerId");
            if (
              e.find(
                (e) =>
                  e.get("toSummonerId").toString() === t.toString() &&
                  e.get("errorType").match(/NotInvitableException/),
              )
            ) {
              const { playerNameFull: e } =
                  await this._playerNames.getDisplayNameBySummonerId(t),
                n = this.get("tra.formatString")(
                  "custom_game_invite_banned_error",
                  { summonerName: e },
                );
              this.showToast(n);
            }
          },
          init(...e) {
            this._super(...e), (this._playerNames = i.playerNames);
          },
          actions: {
            remove: function () {
              this.get("lobbiesService").removeSuggestedPlayer(
                this.get("player.summonerId"),
              );
            },
          },
          click: function () {
            if (
              this.get("isSuggested") &&
              this.get("currentPlayerCanInvite") &&
              !this.get("disabled") &&
              !this.get("_invitedFromSuggested")
            ) {
              this.set("_invitedFromSuggested", !0),
                this.playSound(
                  "/fe/lol-uikit/sfx-uikit-generic-click-small.ogg",
                );
              const e = this.get("summonerId");
              this.get("lobbiesService").removeSuggestedPlayer(e);
              const t = this.get("name");
              this.get("invitesService").invitePlayer(e, t);
            }
          },
        });
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "AappuxyE",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\invite-info-panel\\\\player-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\invite-info-panel\\\\player-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\invite-info-panel\\\\player-component\\\\index.js\\" "],["text","\\n"],["block",["if"],[["get",["showPendingIndicator"]]],null,1],["open-element","span",[]],["static-attr","class","invite-info-name"],["flush-element"],["text","\\n  "],["append",["helper",["player-name"],null,[["format","summonerId","summonerName"],["tooltip",["get",["summonerId"]],["get",["name"]]]]],false],["text","\\n"],["close-element"],["text","\\n"],["block",["if"],[["get",["isSuggested"]]],null,0],["comment"," Work around for Ember.computed to act like an observer. "],["text","\\n"],["open-element","div",[]],["static-attr","style","display: none;"],["flush-element"],["text","\\n  "],["append",["unknown",["recycle"]],false],["text"," "],["append",["unknown",["errorObserver"]],false],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["open-element","button",[]],["static-attr","class","parties-remove-suggested-player"],["modifier",["action"],[["get",[null]],"remove"],[["bubbles"],[false]]],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","lol-pending-loader"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","lol-pending-loader-segment"],["flush-element"],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","lol-pending-loader-segment"],["flush-element"],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","lol-pending-loader-segment"],["flush-element"],["close-element"],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        n(138);
        const { RunMixin: s } = i.EmberAddons.EmberLifeline;
        e.exports = i.Ember.Component.extend(s, {
          layout: n(139),
          classNames: ["parties-invite-panel-tft-progression"],
          tftService: i.Ember.inject.service("tft"),
          media: i.Ember.computed.alias("tftService.media"),
          previousMilestone: i.Ember.computed(
            "activeMilestonesProgress.0.{isPaid,isLocked,pointsEarnedForMilestone,milestoneId,status}",
            function () {
              return i.Ember.copy(this.get("activeMilestonesProgress.0"));
            },
          ),
          nextMilestone: i.Ember.computed(
            "activeMilestonesProgress.1.{isPaid,isLocked,pointsEarnedForMilestone,milestoneId,status}",
            function () {
              return i.Ember.copy(this.get("activeMilestonesProgress.1"));
            },
          ),
          actions: {
            navigateToTft() {
              i.Router.navigateTo("rcp-fe-lol-tft", { page: "battle-pass" });
            },
            claim(e) {
              if (this.get("loadingTimeoutId")) return;
              if ("CLAIMABLE" !== e.status)
                return void this.send("navigateToTft");
              const t = this.runTask(() => {
                this.set("loadingTimeoutId", null);
              }, 5e3);
              this.set("loadingTimeoutId", t);
              const n = this.get("tftService");
              i.Telemetry.sendEvent(
                "tft-claim-reward-button-clicked",
                e.milestoneId,
              ),
                n.claimRewards(e);
            },
          },
        });
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "9xU4MUg1",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\invite-info-panel\\\\tft-progression-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\invite-info-panel\\\\tft-progression-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\invite-info-panel\\\\tft-progression-component\\\\index.js\\" "],["text","\\n"],["block",["if"],[["get",["nextMilestone"]]],null,2,0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","progression-complete"],["modifier",["action"],[["get",[null]],"navigateToTft"]],["flush-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","progression-complete-title"],["flush-element"],["append",["unknown",["tra","tft_progression_complete_title"]],false],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","progression-complete-body"],["flush-element"],["append",["unknown",["tra","tft_progression_complete_body"]],false],["close-element"],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","              "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-small"],["flush-element"],["text","\\n                "],["open-element","p",[]],["flush-element"],["text","\\n                  "],["append",["unknown",["tra","tft_progression_description"]],false],["text","\\n                "],["close-element"],["text","\\n              "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","progression-milestone-container"],["flush-element"],["text","\\n        "],["append",["helper",["battlepass-milestone"],null,[["milestone","click","isSmall","displayIndex","media"],[["get",["previousMilestone"]],["helper",["action"],[["get",[null]],"claim",["get",["previousMilestone"]]],null],true,0,["get",["media"]]]]],false],["text","\\n\\n        "],["append",["helper",["battlepass-milestone"],null,[["milestone","click","isSmall","displayIndex","media"],[["get",["nextMilestone"]],["helper",["action"],[["get",[null]],"navigateToTft"],null],true,1,["get",["media"]]]]],false],["text","\\n        "],["open-element","div",[]],["static-attr","class","reward-container"],["modifier",["action"],[["get",[null]],"navigateToTft"]],["flush-element"],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipPosition","type"],["top","small"]],1],["text","            "],["open-element","div",[]],["static-attr","class","reward-label"],["flush-element"],["append",["unknown",["tra","tft_progression_next"]],false],["close-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","reward-title"],["flush-element"],["append",["unknown",["nextMilestone","title"]],false],["close-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","progress-container"],["flush-element"],["text","\\n                "],["open-element","div",[]],["static-attr","class","progress-current"],["flush-element"],["append",["unknown",["nextMilestone","pointsEarnedForMilestone"]],false],["close-element"],["text","\\n                "],["open-element","div",[]],["static-attr","class","progress-divider"],["flush-element"],["text","/"],["close-element"],["text","\\n                "],["open-element","div",[]],["static-attr","class","progress-total"],["flush-element"],["append",["unknown",["nextMilestone","pointsNeededForMilestone"]],false],["close-element"],["text","\\n            "],["close-element"],["text","\\n        "],["close-element"],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        n(141);
        var s,
          o = (s = n(19)) && s.__esModule ? s : { default: s };
        const { RunMixin: a } = i.EmberAddons.EmberLifeline;
        e.exports = i.Ember.Component.extend(a, o.default, {
          layout: n(142),
          tagName: "button",
          classNameBindings: ["typeClass"],
          disabled: !1,
          disabledAfterClickDelay: 0,
          typeClass: i.Ember.computed("type", function () {
            return "player-management-button-" + this.get("type");
          }),
          onDidInsertElement: i.Ember.on("didInsertElement", function () {
            this.addHoverClickSound(
              this.element,
              "/fe/lol-uikit/sfx-uikit-button-circlegold-hover.ogg",
              "/fe/lol-parties/sfx-lobby-button-banner-click.ogg",
            );
          }),
          enableInviteButton: function (e = 0) {
            this.runTask(() => this.set("disabled", !1), e);
          },
          click: function () {
            this.get("disabled") ||
              (this.sendAction("action"),
              this.set("disabled", !0),
              this.enableInviteButton(this.get("disabledAfterClickDelay")));
          },
        });
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "amNtpJD1",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\player-management-button-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\player-management-button-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\player-management-button-component\\\\index.js\\" "],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipPosition","type"],["top","system"]],0]],"locals":[],"named":[],"yields":["default"],"blocks":[{"statements":[["text","  "],["yield","default"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1),
          s = a(n(10)),
          o = a(n(19));
        function a(e) {
          return e && e.__esModule ? e : { default: e };
        }
        n(144),
          (e.exports = i.Ember.Component.extend(o.default, {
            layout: n(145),
            classNameBindings: [
              "isCustomGame:parties-point-eligibility-custom",
            ],
            platformConfig: s.default,
            platformEternalsEnabled: i.Ember.computed.alias(
              "platformConfig.eternalsEnabled",
            ),
            eternalsService: i.Ember.inject.service("eternals"),
            isCustomGame: !1,
            tooltipConfig: i.Ember.computed(
              "isCustomGame",
              "tooltipConfigCustom",
              "tooltipConfigParties",
              function () {
                return this.get("isCustomGame")
                  ? this.get("tooltipConfigCustom")
                  : this.get("tooltipConfigParties");
              },
            ),
            tooltipConfigParties: {
              targetAnchor: { x: "center", y: "bottom" },
              tooltipAnchor: { x: "center", y: "top" },
              offset: { x: 0, y: 5 },
            },
            tooltipConfigCustom: {
              targetAnchor: { x: "right", y: "center" },
              tooltipAnchor: { x: "left", y: "center" },
              offset: { x: 5, y: 0 },
            },
            xpEnabled: i.Ember.computed.alias(
              "selected.queue.queueRewards.isXpEnabled",
            ),
            xpDisabledClass: i.Ember.computed("xpEnabled", function () {
              return this.get("xpEnabled") ? "" : "disabled";
            }),
            championMasteryEnabled: i.Ember.computed.alias(
              "selected.queue.queueRewards.isChampionPointsEnabled",
            ),
            championMasteryDisabledClass: i.Ember.computed(
              "championMasteryEnabled",
              function () {
                return this.get("championMasteryEnabled") ? "" : "disabled";
              },
            ),
            eternalsEnabledForQueue: i.Ember.computed(
              "eternalsService.enabledQueues",
              "selected.queue.id",
              function () {
                const e = this.get("selected.queue.id"),
                  t = this.get("eternalsService.enabledQueues");
                return !(!t || null === t) && t.includes(e);
              },
            ),
            eternalsDisabledClass: i.Ember.computed(
              "eternalsEnabledForQueue",
              function () {
                return this.get("eternalsEnabledForQueue") ? "" : "disabled";
              },
            ),
          }));
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "T6RZ8qBR",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\point-eligibility-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\point-eligibility-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\point-eligibility-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","parties-point-eligibility-content"],["flush-element"],["text","\\n  "],["open-element","ul",[]],["static-attr","class","parties-point-eligibility-list"],["flush-element"],["text","\\n    "],["open-element","li",[]],["dynamic-attr","class",["concat",["parties-point-eligibility-experience ",["unknown",["xpDisabledClass"]]]]],["flush-element"],["close-element"],["text","\\n    "],["open-element","li",[]],["dynamic-attr","class",["concat",["parties-point-eligibility-mastery ",["unknown",["championMasteryDisabledClass"]]]]],["flush-element"],["close-element"],["text","\\n"],["block",["if"],[["get",["platformEternalsEnabled"]]],null,2],["text","  "],["close-element"],["text","\\n"],["close-element"],["text","\\n\\n"],["block",["uikit-tooltip"],null,[["tooltipConfig"],[["get",["tooltipConfig"]]]],1],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["open-element","li",[]],["dynamic-attr","class",["concat",["parties-point-eligibility-tooltip-content-eternals ",["unknown",["eternalsDisabledClass"]]]]],["flush-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","parties-point-eligibility-tooltip-content-eternals-icon"],["flush-element"],["text","\\n        "],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","parties-point-eligibility-tooltip-content-eternals-description"],["flush-element"],["text","\\n          "],["append",["unknown",["tra","parties_point_eligibility_tooltip_eternals"]],false],["text","\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","lol-uikit-content-block",[]],["static-attr","padding","medium"],["static-attr","class","parties-point-eligibility-tooltip-content"],["flush-element"],["text","\\n    "],["open-element","h6",[]],["static-attr","class","parties-point-eligibility-tooltip-content-title"],["flush-element"],["text","\\n      "],["append",["unknown",["tra","parties_point_eligibility_tooltip_title"]],false],["text","\\n    "],["close-element"],["text","\\n\\n    "],["open-element","ul",[]],["static-attr","class","parties-point-eligibility-tooltip-content-list"],["flush-element"],["text","\\n      "],["open-element","li",[]],["dynamic-attr","class",["concat",["parties-point-eligibility-tooltip-content-experience ",["unknown",["xpDisabledClass"]]]]],["flush-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","parties-point-eligibility-tooltip-content-experience-icon"],["flush-element"],["text","\\n        "],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","parties-point-eligibility-tooltip-content-experience-description"],["flush-element"],["text","\\n          "],["append",["unknown",["tra","parties_point_eligibility_tooltip_experience"]],false],["text","\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n      "],["open-element","li",[]],["dynamic-attr","class",["concat",["parties-point-eligibility-tooltip-content-mastery ",["unknown",["championMasteryDisabledClass"]]]]],["flush-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","parties-point-eligibility-tooltip-content-mastery-icon"],["flush-element"],["text","\\n        "],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","parties-point-eligibility-tooltip-content-mastery-description"],["flush-element"],["text","\\n          "],["append",["unknown",["tra","parties_point_eligibility_tooltip_masteries"]],false],["text","\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n      \\n"],["block",["if"],[["get",["platformEternalsEnabled"]]],null,0],["text","    "],["close-element"],["text","\\n    \\n  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","li",[]],["dynamic-attr","class",["concat",["parties-point-eligibility-eternals ",["unknown",["eternalsDisabledClass"]]]]],["flush-element"],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        n(147);
        const s = 6e5;
        e.exports = i.Ember.Component.extend({
          layout: n(148),
          classNames: ["parties-disband-countdown"],
          classNameBindings: [
            "shouldDisplayCountdown::hidden-countdown",
            "timerEnabled::timer-disabled",
          ],
          _haveLobbyTimer: !1,
          counter: 0,
          gameflowService: i.Ember.inject.service("gameflow"),
          lobbiesService: i.Ember.inject.service("lobbies"),
          timerEnabled: i.Ember.computed.alias(
            "lobbiesService.lobbyTimerEnabled",
          ),
          timerCountdown: i.Ember.computed.alias(
            "lobbiesService.lobbyTimerCountdown",
          ),
          shouldDisplayCountdown: i.Ember.computed.and(
            "gameflowService.isLobby",
            "_haveLobbyTimer",
          ),
          partiesCountdownObserver: i.Ember.computed(
            "timerCountdown",
            "timerEnabled",
            "gameflowService.isLobby",
            function () {
              if (
                this.get("gameflowService.isLobby") &&
                this.get("timerEnabled")
              ) {
                const e = 1e3 * this.get("timerCountdown"),
                  t = new Date().getTime(),
                  n = e - s;
                (this.mLobbyTimeout = t + e),
                  (this.mLobbyTimeoutNotification = t + n),
                  this.startCountdown();
              } else this.set("_haveLobbyTimer", !1), this._clearTimer();
            },
          ),
          toTimeString: function (e) {
            if (e >= 0) {
              e = Math.floor(e);
              const t = Math.floor(e / 60);
              let n = "" + (e % 60);
              return n.length < 2 && (n = `0${n}`), `${t}:${n}`;
            }
          },
          countdownInterval: 250,
          startCountdown: function () {
            this.timer ||
              (this.timer = setInterval(
                function () {
                  const e = new Date().getTime();
                  if (
                    e <= this.mLobbyTimeout &&
                    e >= this.mLobbyTimeoutNotification
                  ) {
                    this.set("_haveLobbyTimer", !0);
                    const t = (s - e + this.mLobbyTimeoutNotification) / 1e3;
                    this.set("countdown", this.toTimeString(Math.floor(t)));
                  }
                  e > this.mLobbyTimeout &&
                    (this.set("_haveLobbyTimer", !1), this._clearTimer());
                }.bind(this),
                this.get("countdownInterval"),
              ));
          },
          _clearTimer: function () {
            this.timer && (clearInterval(this.timer), (this.timer = null));
          },
        });
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "pLWFp5Po",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\disband-countdown-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\disband-countdown-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\disband-countdown-component\\\\index.js\\" "],["text","\\n"],["append",["unknown",["tra","parties_disbanded_countdown_title"]],false],["text"," "],["append",["unknown",["countdown"]],false],["text"," "],["append",["unknown",["partiesCountdownObserver"]],false],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i,
          s = n(1),
          o = (i = n(19)) && i.__esModule ? i : { default: i },
          a = n(12);
        n(150);
        const { RunMixin: r } = s.EmberAddons.EmberLifeline;
        e.exports = s.Ember.Component.extend(r, o.default, {
          layout: n(151),
          classNames: ["open-party-toggle"],
          lobbiesService: s.Ember.inject.service("lobbies"),
          gameflowService: s.Ember.inject.service("gameflow"),
          isPartyLeader: s.Ember.computed.alias(
            "lobbiesService.isCurrentPlayerPartyLeader",
          ),
          partyType: s.Ember.computed.alias("lobbiesService.partyType"),
          isInLobby: s.Ember.computed.alias("gameflowService.isLobby"),
          disabled: s.Ember.computed("isPartyLeader", "isInLobby", function () {
            return !this.get("isPartyLeader") || !this.get("isInLobby");
          }),
          requestedPartyType: null,
          tooltipDelayTime: 750,
          isToggleAnimating: !1,
          toggleDelayTime: 500,
          _firstExperienceContextualNotification: null,
          shownOpenPartyFirstExperience: !1,
          settingsService: s.Ember.inject.service("party-settings"),
          hasSeenOpenPartyFirstExperience: s.Ember.computed.alias(
            "settingsService.hasSeenOpenPartyFirstExperience",
          ),
          hoverSoundDisabled: s.Ember.computed.alias("disabled"),
          isOpenParty: s.Ember.computed("partyType", function () {
            return (
              this.runTask(function () {
                this._checkIfShowFirstExperience();
              }, 1),
              this.get("partyType") === a.PARTY_TYPES.OPEN
            );
          }),
          showPartyOpen: s.Ember.computed(
            "isOpenParty",
            "requestedPartyType",
            function () {
              return (
                this.get("requestedPartyType") !== a.PARTY_TYPES.CLOSED &&
                !(
                  this.get("requestedPartyType") !== a.PARTY_TYPES.OPEN &&
                  !this.get("isOpenParty")
                )
              );
            },
          ),
          initObserver: s.Ember.on("init", function () {
            s.Ember.run.once(this, function () {
              if (this.element) {
                const e = this._getToggleContainer();
                this.attachHoverSoundWithDisabledCheck(
                  e,
                  "/fe/lol-parties/sfx-uikit-button-circlegold-hover.ogg",
                );
              }
            });
          }),
          gameflowPhaseObserver: s.Ember.on(
            "init",
            s.Ember.observer("gameflowService.phase", function () {
              "Lobby" === this.get("gameflowService.phase")
                ? this._checkIfShowFirstExperience()
                : this._hideOpenFirstExperienceContextualNofication();
            }),
          ),
          isInViewportObserver: s.Ember.on(
            "init",
            s.Ember.observer("showingState.isInViewport", function () {
              this._checkIfShowFirstExperience();
            }),
          ),
          openPartyToggleTooltip: s.Ember.computed(
            "isOpenParty",
            "tra.ready",
            "tra.parties_toggle_open",
            "tra.parties_toggle_closed",
            "tra.parties_toggle_not_party_leader",
            "isPartyLeader",
            function () {
              return this.get("isPartyLeader")
                ? this.get("isOpenParty")
                  ? this.get("tra.parties_toggle_closed")
                  : this.get("tra.parties_toggle_open")
                : this.get("tra.parties_toggle_not_party_leader");
            },
          ),
          _setIsTogglingAnimationComplete: function () {
            setTimeout(() => {
              this.set("isToggleAnimating", !1);
            }, this.toggleDelayTime);
          },
          _toggle: function () {
            if (this.get("isPartyLeader") && !this.get("requestedPartyType"))
              return (
                this.playSound("/fe/lol-parties/sfx-parties-button-toggle.ogg"),
                this.set("isToggleAnimating", !0),
                this.get("isOpenParty")
                  ? (this.set("requestedPartyType", a.PARTY_TYPES.CLOSED),
                    this.get("lobbiesService")
                      .setPartyType(a.PARTY_TYPES.CLOSED)
                      .then(() => {
                        this.set("requestedPartyType", null);
                      })
                      .catch(() => {
                        this.set("requestedPartyType", null);
                      })
                      .finally(() => {
                        this._setIsTogglingAnimationComplete();
                      }))
                  : (this.set("requestedPartyType", a.PARTY_TYPES.OPEN),
                    this.get("lobbiesService")
                      .setPartyType(a.PARTY_TYPES.OPEN)
                      .then(() => {
                        this.set("requestedPartyType", null);
                      })
                      .catch(() => {
                        this.set("requestedPartyType", null);
                      })
                      .finally(() => {
                        this._setIsTogglingAnimationComplete();
                      }))
              );
          },
          _getToggleContainer: function () {
            return this.element
              ? this.element.querySelector(".toggle-container")
              : null;
          },
          _checkIfShowFirstExperience: function () {
            "Lobby" === this.get("gameflowService.phase") &&
              !this.get("hasSeenOpenPartyFirstExperience") &&
              this.get("isOpenParty") &&
              this.get("showingState.isInViewport") &&
              !this.get("shownOpenPartyFirstExperience") &&
              this._showOpenPartyFirstExperienceContextualNotification();
          },
          _showOpenPartyFirstExperienceContextualNotification: function () {
            if (this._getToggleContainer()) {
              let e;
              e = this.get("isPartyLeader")
                ? this.get("tra.parties_open_party_first_experience_owner")
                : this.get("tra.parties_open_party_first_experience_member");
              const t = this.get(
                  "tra.parties_open_party_first_experience_header",
                ),
                n = s.UIKit.getContextualNotificationManager(),
                i = s.UIKit.getTemplateHelper().contentBlockTooltip(
                  t,
                  e,
                  "tooltip-system",
                  "parties-first-experience-tooltip",
                );
              this.set("shownOpenPartyFirstExperience", !0),
                setTimeout(() => {
                  const e = this.get("settingsService");
                  e && e.set && e.set("hasSeenOpenPartyFirstExperience", !0);
                  const t = n.add(i, {
                    target: {
                      domNode: this.element,
                      anchor: { x: "center", y: "bottom" },
                    },
                    orientation: "bottom",
                    anchor: { x: "center", y: "top" },
                    offset: { x: 0, y: 15 },
                    dismissable: !0,
                  });
                  this.set("_firstExperienceContextualNotification", t);
                }, this.get("tooltipDelayTime"));
            }
          },
          _hideOpenFirstExperienceContextualNofication: function () {
            const e = this.get("_firstExperienceContextualNotification");
            if (e) {
              s.UIKit.getContextualNotificationManager().remove(e);
            }
          },
          actions: {
            toggle: function () {
              this.get("disabled") ||
                this.get("isToggleAnimating") ||
                this._toggle();
            },
          },
        });
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "VfKvoGqc",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\open-party-toggle-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\open-party-toggle-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\open-party-toggle-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","open-party-toggle-wrapper"],["dynamic-attr","class",["concat",[["unknown",["partyType"]]," ",["helper",["if"],[["get",["showPartyOpen"]],"right"],null]," ",["helper",["if"],[["get",["disabled"]],"disabled"],null]]]],["flush-element"],["text","\\n  "],["open-element","div",[]],["dynamic-attr","class",["concat",["toggle-container animated ",["helper",["if"],[["get",["isToggleAnimating"]],"is-animating"],null]," "]]],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"toggle"],null],null],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","open"],["flush-element"],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","toggle-button animated"],["flush-element"],["close-element"],["text","\\n  "],["close-element"],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipPosition","type"],["bottom","system"]],0],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-small"],["flush-element"],["text","\\n      "],["open-element","p",[]],["flush-element"],["text","\\n        "],["append",["unknown",["openPartyToggleTooltip"]],false],["text","\\n      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        n(153),
          (e.exports = i.Ember.Component.extend({
            classNames: ["parties-game-select-screen"],
            classNameBindings: ["isShowing:game-select-show:game-select-hide"],
            customGamesService: i.Ember.inject.service("custom-games"),
            layout: n(154),
            isCreatingCustomGame: i.Ember.computed.alias(
              "selected.isCreatingCustomGame",
            ),
            needsAdditionalGameConfig: i.Ember.computed.alias(
              "selected.needsAdditionalGameConfig",
            ),
            isJoiningCustomGame: i.Ember.computed.alias(
              "selected.isJoiningCustomGame",
            ),
            currentCategory: i.Ember.computed.alias("selected.category"),
            isShowing: i.Ember.computed.alias(
              "showingState.isShowingGameSelect",
            ),
            isShowingGameSelectObserver: i.Ember.observer(
              "isShowing",
              function () {
                this.get("isShowing") &&
                  i.PartyAPI._showFlexRestrictionModalIfNeeded();
              },
            ),
          }));
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "IuI/8okn",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\game-select-root-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\game-select-root-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\game-select-root-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","parties-game-select-wrapper"],["flush-element"],["text","\\n  "],["append",["helper",["category-select"],null,[["currentCategory","selected","queues"],[["get",["currentCategory"]],["get",["selected"]],["get",["queues"]]]]],false],["text","\\n"],["block",["if"],[["get",["needsAdditionalGameConfig"]]],null,3,2],["close-element"],["text","\\n"],["append",["helper",["game-select-footer"],null,[["showingState","selected"],[["get",["showingState"]],["get",["selected"]]]]],false],["text","\\n"],["open-element","div",[]],["static-attr","style","display: none"],["flush-element"],["text","\\n  "],["append",["unknown",["customGamesService","subcategoriesObserver"]],false],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["open-element","lol-uikit-scrollable",[]],["flush-element"],["text","\\n    "],["append",["helper",["game-type-select"],null,[["showingState","currentCategory","selected","queues"],[["get",["showingState"]],["get",["currentCategory"]],["get",["selected"]],["get",["queues"]]]]],false],["text","\\n    "],["close-element"],["text","\\n  "]],"locals":[]},{"statements":[["text","    "],["append",["unknown",["custom-game-list"]],false],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["isJoiningCustomGame"]]],null,1,0]],"locals":[]},{"statements":[["text","    "],["append",["helper",["custom-game-setup"],null,[["showingState","currentMode","selected","queues"],[["get",["showingState"]],["get",["currentMode"]],["get",["selected"]],["get",["queues"]]]]],false],["text","\\n"]],"locals":[]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1),
          s = u(n(19)),
          o = u(n(72)),
          a = u(n(94)),
          r = u(n(83)),
          l = n(57),
          c = n(9),
          m = u(n(22));
        function u(e) {
          return e && e.__esModule ? e : { default: e };
        }
        n(156),
          (e.exports = i.Ember.Component.extend(
            a.default,
            s.default,
            o.default,
            r.default,
            {
              classNames: ["game-select-footer-container"],
              layout: n(157),
              eligibilityService: i.Ember.inject.service("queue-eligibility"),
              lobbiesService: i.Ember.inject.service("lobbies"),
              customGamesService: i.Ember.inject.service("custom-games"),
              customGameListService: i.Ember.inject.service("custom-game-list"),
              patcherService: i.Ember.inject.service("patcher"),
              gameflowService: i.Ember.inject.service("gameflow"),
              partySettingsService: i.Ember.inject.service("party-settings"),
              inLobby: i.Ember.computed.alias("lobbiesService.inLobby"),
              animationLock: i.Ember.computed.alias("selected.animationLock"),
              animationsEnabled: i.Ember.computed.alias(
                "partySettingsService.animationsEnabled",
              ),
              hasQueueAvailabilityWarning: i.Ember.computed.alias(
                "lobbiesService.hasQueueAvailabilityWarning",
              ),
              queueAvailabilityWarningTooltip: i.Ember.computed.alias(
                "lobbiesService.queueAvailabilityWarningTooltip",
              ),
              closeButtonType: i.Ember.computed(
                "selected.isUpdatingSelection",
                "animationLock",
                "inLobby",
                function () {
                  return this.get("selected.isUpdatingSelection") ||
                    this.get("animationLock")
                    ? "close"
                    : this.get("inLobby")
                      ? "back"
                      : "close";
                },
              ),
              listenToViewport: function () {
                i.Viewport.main()
                  .getScreenRoot(
                    m.default.get("viewportApiKey"),
                    "rcp-fe-lol-parties",
                  )
                  .on("willHide", () => {
                    this.get("showingState.isShowingGameSelect") &&
                      this.restoreLastSelection();
                  });
              },
              listenToCustomGameListService: function () {
                this.get("customGameListService").on("showParty", () => {
                  this.set("selected.isJoiningCustomGame", !1),
                    this.showParty();
                });
              },
              insertListener: i.Ember.on("didInsertElement", function () {
                this.listenToViewport(), this.listenToCustomGameListService();
              }),
              showingPartyObserver: i.Ember.computed(
                "showingState.isShowingParty",
                function () {
                  if (!this.get("showingState.isShowingParty")) return;
                  !1 === this.get("justShowedParty") &&
                    this.restoreLastSelection(),
                    this.set("justShowedParty", !1);
                },
              ),
              practiceToolMinLevelEligible: i.Ember.computed(
                "customGamesService.localSummonerLevel",
                "customGameSubCategoryMinLevel",
                function () {
                  const e = c.TUTORIAL_TYPE_MAPS.PRACTICETOOL,
                    t = c.TRAINING_TYPES.PRACTICE_TOOL;
                  return (
                    this.get("customGamesService.localSummonerLevel") >=
                    this.get("customGamesService").getSubcategoryMinLevel(e, t)
                  );
                },
              ),
              creatingCustomGameAndHaveNameError: i.Ember.computed.and(
                "showingState.isShowingGameSelect",
                "selected.isCreatingCustomGame",
                "customGamesService.haveNameError",
              ),
              trainingGameModeIsEmpty: i.Ember.computed.empty(
                "selected.trainingGameMode",
              ),
              selectingTrainingGameButNoMode: i.Ember.computed.and(
                "showingState.isShowingGameSelect",
                "selected.isTrainingGame",
                "trainingGameModeIsEmpty",
              ),
              joiningCustomGameButNoneSelected: i.Ember.computed.and(
                "showingState.isShowingGameSelect",
                "selected.isJoiningCustomGame",
                "customGameListService.noSelectedGame",
              ),
              patcherDisconnected: i.Ember.computed.not(
                "patcherService.isConnected",
              ),
              confirmButtonDisabled: i.Ember.computed.or(
                "animationLock",
                "patcherDisconnected",
                "selected.isUpdatingSelection",
                "confirmDisabledByLobby",
                "creatingCustomGameAndHaveNameError",
                "selectingTrainingGameButNoMode",
                "joiningCustomGameButNoneSelected",
                "allQueuesForCategoryDisabled",
              ),
              allQueuesForCategoryDisabled: i.Ember.computed(
                "selected.category",
                "selected.queues.availableQueues",
                "eligibilityService.eligibilites.[]",
                function () {
                  const e = this.get("selected.category");
                  if (e) {
                    if ("Training" === e) {
                      return (
                        this.get("eligibilityService").getIneligibleQueues(
                          c.TUTORIAL_QUEUE_IDS,
                        ).length === c.TUTORIAL_QUEUE_IDS.length &&
                        !this.get("practiceToolMinLevelEligible")
                      );
                    }
                    const t = this.get("selected.queues.availableQueues");
                    if (t && t[e]) {
                      const n = t[e];
                      let i = 0,
                        s = 0;
                      for (const e in n) {
                        const t = n[e];
                        if (!t || !t.queues) return !1;
                        {
                          const e = t.queues;
                          (i +=
                            this.get("eligibilityService").getIneligibleQueues(
                              e,
                            ).length),
                            (s += e.length);
                        }
                      }
                      return i === s;
                    }
                    return !1;
                  }
                  return !1;
                },
              ),
              confirmButtonEnabled: i.Ember.computed.not(
                "confirmButtonDisabled",
              ),
              confirmButtonText: i.Ember.computed(
                "tra.ready",
                "selected.isJoiningCustomGame",
                "customGameListService.confirmButtonText",
                "tra.parties_button_confirm",
                function () {
                  return this.get("selected.isJoiningCustomGame")
                    ? this.get("customGameListService.confirmButtonText")
                    : this.get("tra.parties_button_confirm");
                },
              ),
              buttonSounds: {
                closeHover: "/fe/lol-parties/sfx-lobby-button-quit-hover.ogg",
                closeClick: "/fe/lol-parties/sfx-lobby-button-quit-click.ogg",
                confirmHover:
                  "/fe/lol-parties/sfx-gameselect-button-confirm-hover.ogg",
                confirmClick:
                  "/fe/lol-parties/sfx-gameselect-button-confirm-click.ogg",
              },
              confirmButtonShowTooltip: i.Ember.computed.or(
                "patcherDisconnected",
                "confirmDisabledByLobby",
              ),
              confirmButtonTooltipText: i.Ember.computed(
                "patcherDisconnected",
                "confirmDisabledByLobby",
                "tra.ready",
                "tra.parties_patcher_not_connected",
                function () {
                  let e = "";
                  return (
                    this.get("patcherDisconnected")
                      ? (e = i.tra.get("parties_patcher_not_connected"))
                      : this.get("confirmDisabledByLobby") &&
                        (e = this.get("queueAvailabilityWarningTooltip")),
                    e
                  );
                },
              ),
              confirmDisabledByLobby: i.Ember.computed.and(
                "hasQueueAvailabilityWarning",
                "selectedQueueIsLobbyQueue",
              ),
              selectedQueueIsLobbyQueue: i.Ember.computed(
                "selected.queueId",
                "lobbiesService.queueId",
                function () {
                  const e = this.get("selected.queueId"),
                    t = this.get("lobbiesService.queueId");
                  return !!e && !!t && e === t;
                },
              ),
              closeButtonDisabled: i.Ember.computed.or(
                "animationLock",
                "hasQueueAvailabilityWarning",
              ),
              closeButtonText: i.Ember.computed(
                "tra.ready",
                "tra.parties_button_cancel",
                function () {
                  return this.get("tra.parties_button_cancel");
                },
              ),
              closeButtonShowTooltip: i.Ember.computed.or(
                "hasQueueAvailabilityWarning",
              ),
              closeButtonTooltipText: i.Ember.computed(
                "selected.queueId",
                "hasQueueAvailabilityWarning",
                "queueAvailabilityWarningTooltip",
                "tra.ready",
                function () {
                  return this.get("hasQueueAvailabilityWarning")
                    ? this.get("queueAvailabilityWarningTooltip")
                    : "";
                },
              ),
              eligibilityObserver: i.Ember.computed(
                "eligibilityService.upToDate",
                function () {
                  if (!this.get("eligibilityService.upToDate")) return;
                  const e = this.get("selected.queueId"),
                    t = this.get("eligibilityService.eligibilities");
                  (t[e] && t[e].eligible) || this.restoreLastSelection();
                },
              ),
              changePartyGameConfig: function () {
                const e = this.get("selected"),
                  t = this.get("customGamesService.isCustomUI"),
                  n = this.get("lobbiesService.queueId"),
                  s = e.get("queueId");
                return !t && e.get("isCreatingCustomGame")
                  ? (e.set("animationLock", !0),
                    this.get("customGamesService").changeQueueToCustom())
                  : s !== n
                    ? (e.set("animationLock", !0),
                      (this._createLobbyTimer = i.Telemetry.startTimer(
                        "parties-create-new-lobby",
                      )),
                      this.get("lobbiesService").createLobbyWithQueueId(s))
                    : Promise.resolve();
              },
              lobbyTransitionTelemetryObserver: i.Ember.observer(
                "showingState.isShowingGameSelect",
                function () {
                  !this.get("showingState.isShowingGameSelect") &&
                    this._createLobbyTimer &&
                    window.requestAnimationFrame(() => {
                      this.isDestroying ||
                        this.isDestroyed ||
                        (i.Telemetry.stopAndRecordTimer(this._createLobbyTimer),
                        delete this._createLobbyTimer);
                    });
                },
              ),
              justShowedParty: null,
              showParty: function () {
                this.set("justShowedParty", !0),
                  this.get("showingState").showParty();
              },
              gameSelectErrorHandler: function (e) {
                let t;
                if (
                  (this.set("selected.isUpdatingSelection", !1),
                  this.set("selected.animationLock", !1),
                  this.get("selected.isCreatingCustomGame"))
                ) {
                  if (
                    ((t = this.getCustomGameErrorMessage(e)),
                    e === l.CUSTOM_GAME_ERROR_CODES[423])
                  )
                    return void this.showGameSelectErrorModal(
                      t,
                      this.leaveParty.bind(this),
                    );
                  if (!t) return;
                } else if (
                  ((t = this.get("tra.parties_game_select_confirm_error")),
                  e && e.data)
                ) {
                  const { httpStatus: n } = e.data;
                  if (n && 423 === n)
                    return (
                      (t = this.get("tra.parties_game_select_patching_error")),
                      void this.showGameSelectErrorModal(
                        t,
                        this.leaveParty.bind(this),
                      )
                    );
                  if (n && 503 === n)
                    return void i.logger.trace(
                      "gameSelectErrorHandler ignoring SERVICE_UNAVAILABLE error",
                    );
                  n &&
                    403 === n &&
                    (t = this.get(
                      "tra.parties_game_select_confirm_error_restricted",
                    ));
                }
                this.showGameSelectErrorModal(t);
              },
              getCustomGameErrorMessage: function (e) {
                if (e && "" !== e && 500 !== e.status) {
                  if ("GameNameNotUniqueException" === e || "nameError" === e)
                    return !1;
                  if ("InvalidCustomGameNameException" === e)
                    return this.get("tra.custom_game_setup_name_error_invalid");
                  if (e === l.CUSTOM_GAME_ERROR_CODES[423])
                    return this.get("tra.parties_game_select_patching_error");
                } else e = "UnknownException";
                return this.get(
                  `tra.custom_game_setup_error_${e.toLowerCase()}`,
                );
              },
              startTutorial: function () {
                switch (this.get("selected.trainingGameMode")) {
                  case "TUTORIAL_FLOW":
                    this.get("gameflowService").startTutorialFlow();
                    break;
                  case "BATTLE_TRAINING":
                    this.get("gameflowService").startBattleTraining();
                    break;
                  default:
                    this.get("gameflowService").startBasicTutorial();
                }
              },
              joinCustomGame: function () {
                const e = this.get(
                    "customGameListService.selectedCustomGame.id",
                  ),
                  t = this.get(
                    "customGameListService.selectedCustomGame.partyId",
                  ),
                  n = this.get(
                    "customGameListService.isSelectedCustomGameFull",
                  ),
                  i = this.get(
                    "customGameListService.isSelectedCustomGameSpectatorsFull",
                  ),
                  s = n && !i,
                  o = this.get(
                    "customGameListService.selectedCustomGame.hasPassword",
                  );
                this.set("selected.isUpdatingSelection", !0);
                const a = { spectator: s, hasPassword: o };
                e ? (a.id = e) : (a.partyId = t),
                  this.get("customGameListService")
                    .joinCustomGame(a)
                    .then(() => {
                      this.isDestroying ||
                        this.isDestroyed ||
                        (this.set("selected.isUpdatingSelection", !1),
                        this.set("selected.isJoiningCustomGame", !1),
                        this.showParty());
                    })
                    .catch(() => {
                      this.set("selected.isUpdatingSelection", !1);
                    });
              },
              confirmButtonClicked: function () {
                if (
                  this.get("selected.isTrainingGame") &&
                  !this.get("selected.isCreatingCustomGame")
                )
                  return this.startTutorial();
                if (!this.get("selected.isJoiningCustomGame")) {
                  const e = () => {
                    if (
                      (this.set("selected.isUpdatingSelection", !1),
                      !this.get("selected.isCreatingCustomGame"))
                    ) {
                      this.set("showingState.showVerticalAnimation", !0);
                      const e = "TFT" === this.get("selected.gameMode");
                      this.set("showingState.isShowingLeagueBanner", !e);
                    }
                    this.showParty();
                  };
                  return (
                    this.set("selected.isUpdatingSelection", !0),
                    this.changePartyGameConfig().then(e, (e) => {
                      this.gameSelectErrorHandler(e);
                    })
                  );
                }
                this.joinCustomGame();
              },
              closeButtonClicked: function () {
                if (
                  (this.restoreLastSelection(),
                  this.get("lobbiesService.inLobby"))
                )
                  return (
                    this.set("showingState.showVerticalAnimation", !0),
                    this.set("showingState.isShowingLeagueBanner", !1),
                    void this.showParty()
                  );
                this.hideOurselves();
              },
              restoreLastSelection() {
                const e = this.get("lobbiesService.queueId");
                null !== e && this.set("selected.queueId", e);
                const t = this.get("customGamesService.isCustomUI");
                this.set("selected.isCreatingCustomGame", t),
                  t || this.set("selected.needsAdditionalGameConfig", !1),
                  this.set("selected.isJoiningCustomGame", !1),
                  this.set("selected.isTrainingGame", !1);
              },
              actions: {
                confirmButton: function () {
                  this.confirmButtonClicked();
                },
                closeButton: function () {
                  this.closeButtonClicked();
                },
              },
            },
          ));
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "n/hDJgAU",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\footer-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\footer-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\footer-component\\\\index.js\\" "],["text","\\n"],["append",["helper",["arrow-footer"],null,[["animationsEnabled","confirmButtonDisabled","confirmButtonText","confirmButtonShowTooltip","confirmButtonTooltipText","confirmButtonHoverSound","confirmButtonClickSound","closeButtonDisabled","closeButtonText","closeButtonShowTooltip","closeButtonTooltipText","closeButtonHoverSound","closeButtonClickSound","closeButtonType","confirmButtonClicked","closeButtonClicked"],[["get",["animationsEnabled"]],["get",["confirmButtonDisabled"]],["get",["confirmButtonText"]],["get",["confirmButtonShowTooltip"]],["get",["confirmButtonTooltipText"]],["get",["buttonSounds","confirmHover"]],["get",["buttonSounds","confirmClick"]],["get",["closeButtonDisabled"]],["get",["closeButtonText"]],["get",["closeButtonShowTooltip"]],["get",["closeButtonTooltipText"]],["get",["buttonSounds","closeHover"]],["get",["buttonSounds","closeClick"]],["get",["closeButtonType"]],"confirmButton","closeButton"]]],false],["text","\\n"],["open-element","span",[]],["dynamic-attr","data-eligibility-observer",["concat",[["unknown",["eligibilityObserver"]]]]],["flush-element"],["close-element"],["text","\\n"],["open-element","span",[]],["dynamic-attr","data-showing-party-observer",["concat",[["unknown",["showingPartyObserver"]]]]],["flush-element"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        n(159),
          (e.exports = i.Ember.Component.extend({
            classNames: ["parties-game-type-select-wrapper"],
            customGamesService: i.Ember.inject.service("custom-games"),
            layout: n(160),
            showingState: null,
            currentCategory: null,
            selected: null,
            queues: null,
            gameTypes: i.Ember.computed(
              "currentCategory",
              "queues.queuesByCategory",
              function () {
                const e = this.get(
                  "queues",
                ).getAllAvailableGameTypesForCategory(
                  this.get("currentCategory"),
                );
                return i.Ember.A(e);
              },
            ),
            actions: {
              selectQueue: function (e) {
                e.queueId
                  ? this.set("selected.queueId", e.queueId)
                  : e.trainingGameMode &&
                    (this.set("selected.trainingGameMode", e.trainingGameMode),
                    this.get("customGamesService").subCategoryExists(
                      this.get("selected.mapId"),
                      this.get("selected.trainingGameMode"),
                    )
                      ? (this.set("selected.isCreatingCustomGame", !0),
                        this.get(
                          "customGamesService",
                        ).selectSubcategoryByMapMode(
                          this.get("selected.mapId"),
                          this.get("selected.trainingGameMode"),
                        ))
                      : (this.set("selected.isCreatingCustomGame", !1),
                        this.get(
                          "customGamesService",
                        ).resetSelectedSubcategory()));
              },
            },
          }));
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "lUDeXs66",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\game-type-select-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\game-type-select-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\game-type-select-component\\\\index.js\\" "],["text","\\n"],["open-element","hr",[]],["flush-element"],["close-element"],["text","\\n"],["block",["each"],[["get",["gameTypes"]]],null,0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["append",["helper",["game-type-card"],null,[["showingState","mapId","gameMode","assetMutator","requiresCustomGameSubCategory","queues","animationLock","selectedCategory","selectedMapId","selectedGameMode","selectedQueueId","selectedTrainingGameMode","selectQueue"],[["get",["showingState"]],["get",["gameType","mapId"]],["get",["gameType","gameMode"]],["get",["gameType","assetMutator"]],["get",["gameType","requiresCustomGameSubCategory"]],["get",["queues"]],["get",["selected","animationLock"]],["get",["selected","category"]],["get",["selected","mapId"]],["get",["selected","gameMode"]],["get",["selected","queueId"]],["get",["selected","trainingGameMode"]],"selectQueue"]]],false],["text","\\n"]],"locals":["gameType"]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1),
          s = l(n(94));
        n(162);
        var o = l(n(19)),
          a = n(9),
          r = l(n(10));
        function l(e) {
          return e && e.__esModule ? e : { default: e };
        }
        e.exports = i.Ember.Component.extend(s.default, o.default, {
          classNames: ["game-type-card"],
          classNameBindings: [
            "isDisabled:disabled",
            "isCurrentlySelected:selected",
            "animationLock:animation-lock",
          ],
          attributeBindings: ["mapId:data-map-id", "gameMode:data-game-mode"],
          layout: n(163),
          summonerService: i.Ember.inject.service("summoner"),
          eligibilityService: i.Ember.inject.service("queue-eligibility"),
          customGamesService: i.Ember.inject.service("custom-games"),
          tftNPEService: i.Ember.inject.service("tft-npe"),
          assets: i.Ember.inject.service("assets"),
          platformConfigSingleton: r.default,
          showingState: null,
          mapId: !1,
          gameMode: !1,
          assetMutator: !1,
          requiresCustomGameSubCategory: !1,
          queues: null,
          selectedCategory: !1,
          selectedMapId: !1,
          selectedGameMode: !1,
          selectedQueueId: !1,
          selectedTrainingGameMode: !1,
          animationLock: !1,
          isCurrentlySelected: i.Ember.computed(
            "mapId",
            "gameMode",
            "selectedMapId",
            "isTraining",
            "selectedGameMode",
            "selectedCategory",
            "selectedTrainingGameMode",
            function () {
              if (this.get("isTraining")) {
                this.get("eligibilityService").isTutorialRestricted() &&
                  this.set(
                    "selectedTrainingGameMode",
                    a.TRAINING_TYPES.PRACTICE_TOOL,
                  );
                return (
                  this.get("mapId") === this.get("selectedMapId") &&
                  this.get("gameMode") === this.get("selectedTrainingGameMode")
                );
              }
              return (
                this.get("mapId") === this.get("selectedMapId") &&
                this.get("gameMode") === this.get("selectedGameMode")
              );
            },
          ),
          gameTypeQueues: i.Ember.computed(
            "mapId",
            "gameMode",
            "selectedCategory",
            "queues.availableQueues",
            "queues.availableQueueIds",
            "eligiblityService.isSolo",
            "eligibilityService.shouldShowNPEQueue",
            function () {
              const e = this.get("queues"),
                t = this.get("selectedCategory"),
                n = this.get("mapId"),
                s = this.get("gameMode");
              let o = i.Ember.A(
                e.getAvailableQueuesForCategoryAndGameType(t, n, s),
              );
              return (
                this.get("eligibilityService.shouldShowNPEQueue") ||
                  (o = o.without(a.TFT_NPE_QUEUE_ID)),
                o
              );
            },
          ),
          mapTeamSizeGreedy: i.Ember.computed(
            "mapId",
            "gameMode",
            "selectedCategory",
            function () {
              const e = this.get("queues"),
                t = this.get("selectedCategory"),
                n = this.get("mapId"),
                i = this.get("gameMode"),
                s = e.getAvailableQueuesForCategoryAndGameType(t, n, i);
              let o = 0;
              return (
                s.forEach((t) => {
                  const n = e.getQueueById(t);
                  n.numPlayersPerTeam &&
                    n.numPlayersPerTeam > o &&
                    (o = n.numPlayersPerTeam);
                }),
                o
              );
            },
          ),
          mapTeamSize: i.Ember.computed(
            "mapId",
            "selectedCategory",
            "defaultQueue.numPlayersPerTeam",
            function () {
              let e = this.get("defaultQueue.numPlayersPerTeam");
              return e || (e = this.get("mapTeamSizeGreedy")), e;
            },
          ),
          queueEligibilities: i.Ember.computed(
            "gameTypeQueues",
            "eligibilityService.eligibilities.[]",
            function () {
              const e = this.get("gameTypeQueues");
              return this.get("eligibilityService").getQueueEligibilities(e);
            },
          ),
          teamQueueEligibilities: i.Ember.computed(
            "gameTypeQueues",
            "eligibilityService.eligibilities.[]",
            function () {
              const e = this.get("gameTypeQueues");
              return this.get("eligibilityService").getTeamQueueEligibilities(
                e,
              );
            },
          ),
          eligibleQueues: i.Ember.computed(
            "queueEligibilities.[]",
            function () {
              const e = this.get("queueEligibilities");
              if (!e) return i.Ember.A();
              return e.filterBy("eligible");
            },
          ),
          noQueues: i.Ember.computed.lt("gameTypeQueues.length", 1),
          noEligibleQueues: i.Ember.computed.lt("eligibleQueues.length", 1),
          customGameSubCategoryExists: i.Ember.computed(
            "mapId",
            "gameMode",
            function () {
              const e = this.get("mapId"),
                t = this.get("gameMode"),
                n = this.get("customGamesService").subCategoryExists(e, t);
              return (
                n
                  ? this.set(
                      "customGameSubCategoryMinLevel",
                      this.get("customGamesService").getSubcategoryMinLevel(
                        e,
                        t,
                      ),
                    )
                  : this.set("customGameSubCategoryMinLevel", 1),
                n
              );
            },
          ),
          customGameSubCategoryMinLevel: 1,
          customGameSubCategoryMinLevelEligible: i.Ember.computed(
            "customGamesService.localSummonerLevel",
            "customGameSubCategoryMinLevel",
            function () {
              return (
                this.get("customGamesService.localSummonerLevel") >=
                this.get("customGameSubCategoryMinLevel")
              );
            },
          ),
          isDisabled: i.Ember.computed(
            "noQueues",
            "noEligibleQueues",
            "isTraining",
            "customGameSubCategoryExists",
            "customGameSubCategoryMinLevelEligible",
            "hasSoloEligibilityWarning",
            function () {
              return this.get("requiresCustomGameSubCategory")
                ? !this.get("customGameSubCategoryExists") ||
                    !this.get("customGameSubCategoryMinLevelEligible")
                : this.get("isTraining")
                  ? this.get("eligibilityService").isTutorialRestricted()
                  : !!this.get("hasSoloEligibilityWarning") ||
                    this.get("noQueues");
            },
          ),
          shouldShowEligibilityWarning: i.Ember.computed.or(
            "hasTeamEligibilityWarning",
            "hasSoloEligibilityWarning",
          ),
          hasSoloEligibilityWarning: i.Ember.computed(
            "eligibilityService.isSolo",
            "gameTypeQueues.[]",
            "eligibilityService.eligibilities.@each.summoners",
            "customGameSubCategoryMinLevelEligible",
            "isTraining",
            function () {
              if (this.get("eligibilityService.isSolo")) {
                const e = this.get("gameTypeQueues");
                if (this.get("isTraining")) {
                  if (this.get("gameMode") === a.TRAINING_TYPES.PRACTICE_TOOL)
                    return !this.get("customGameSubCategoryMinLevelEligible");
                  if (this.get("gameMode") === a.TRAINING_TYPES.TUTORIAL)
                    return this.get(
                      "eligibilityService",
                    ).isTutorialRestricted();
                } else if (e.length > 0) {
                  return (
                    this.get("eligibilityService").getSoloIneligibleQueues(e)
                      .length === this.get("gameTypeQueues.length") &&
                    this.get("gameTypeQueues.length") > 0
                  );
                }
              }
              return !1;
            },
          ),
          soloEligibilityWarningText: i.Ember.computed(
            "hasSoloEligibilityWarning",
            function () {
              if (this.get("hasSoloEligibilityWarning")) {
                const e = this._getSoloEligibilities();
                return this.getEligibilityStrings(
                  e,
                  !0,
                  "player_solo_queue_restriction",
                );
              }
              return [];
            },
          ),
          _getSoloEligibilities: function () {
            const e = this.get("gameTypeQueues")[0];
            return this.get("eligibilityService").getSoloEligibilities(e);
          },
          hasTeamEligibilityWarning: i.Ember.computed(
            "teamQueueEligibilities.[]",
            "gameTypeQueues.[]",
            function () {
              const e = this.get("teamQueueEligibilities.length");
              return 0 !== e && e === this.get("gameTypeQueues.length");
            },
          ),
          _handleRestriction: function (e, t, n, i, s) {
            const { restrictionCode: o } = e;
            let r = !1;
            if (a.TENCENT_MINOR_RESTRICTIONS.includes(o) && i) return !0;
            a.TENCENT_MINOR_RESTRICTIONS.includes(o) && (r = !0);
            let l = `${s}_${o.toLowerCase()}`;
            "TeamMaxSizeRestriction" === o &&
              (l = "parties_premade_size_restriction");
            const c = this.get("tra").formatString(l, e.restrictionArgs);
            return t.push(o), n.push(c), r || i;
          },
          getEligibilityStrings: function (
            e,
            t = !1,
            n = "game_select_queue_restriction_party",
          ) {
            const i = [],
              s = [],
              o = (e && e.length) || 0;
            for (let a = 0; a < o; a++) {
              let { restrictions: o } = e[a];
              o =
                this.get("eligibilityService").groupMissingTokenRestrictions(o);
              const r = (o && o.length) || 0;
              let l = !1;
              for (let e = 0; e < r; e++) {
                const a = o[e];
                !a.restrictionCode ||
                  !a.restrictionArgs ||
                  (t && -1 !== s.indexOf(a.restrictionCode)) ||
                  (l = this._handleRestriction(a, s, i, l, n));
              }
            }
            return i;
          },
          gameTypeCardRestrictionsText: i.Ember.computed(
            "teamRestrictionsText",
            "soloEligibilityWarningText",
            function () {
              return this.get("teamRestrictionsText").concat(
                this.get("soloEligibilityWarningText"),
              );
            },
          ),
          teamRestrictionsText: i.Ember.computed(
            "tra.ready",
            "shouldShowEligibilityWarning",
            function () {
              return this.get("shouldShowEligibilityWarning")
                ? this.getEligibilityStrings(
                    this.get("teamQueueEligibilities"),
                    !0,
                  )
                : [];
            },
          ),
          disabledReasons: i.Ember.A(),
          computeDisabledReasons: i.Ember.computed(
            "isDisabledFeaturedGameMode",
            "noQueues",
            "tra.ready",
            "tra.game_select_category_not_available",
            "shouldShowEligibilityWarning",
            function () {
              if (this.get("requiresCustomGameSubCategory"))
                if (this.get("customGameSubCategoryMinLevelEligible"))
                  this.set(
                    "disabledReasons",
                    i.Ember.A([
                      this.get("tra.game_select_category_not_available"),
                    ]),
                  );
                else {
                  const e = {
                      playerMinLevelRestriction: this.get(
                        "customGameSubCategoryMinLevel",
                      ),
                    },
                    t = this.get("tra").formatString(
                      "parties_queue_restriction_player_playerminlevelrestriction",
                      e,
                    );
                  this.set("disabledReasons", i.Ember.A([t]));
                }
              else if (this.get("isDisabledFeaturedGameMode"))
                this.set(
                  "disabledReasons",
                  i.Ember.A([
                    this.get(
                      "tra.game_select_featured_game_mode_not_available",
                    ),
                  ]),
                );
              else if (this.get("shouldShowEligibilityWarning"))
                this.set(
                  "disabledReasons",
                  this.get("gameTypeCardRestrictionsText"),
                );
              else {
                if (!this.get("noQueues")) return "";
                this.set(
                  "disabledReasons",
                  i.Ember.A([
                    this.get("tra.game_select_category_not_available"),
                  ]),
                );
              }
            },
          ),
          tooltipConfig: {
            targetAnchor: { x: "center", y: "bottom" },
            tooltipAnchor: { x: "center", y: "top" },
            offset: { x: 0, y: 0 },
            caretPosition: "auto",
          },
          gameTypeName: i.Ember.computed(
            "selectedCategory",
            "mapId",
            "gameMode",
            "assetMutator",
            "tra.ready",
            "tra.game_select_game_type_name_11_CLASSIC",
            function () {
              const e = this.get("selectedCategory"),
                t = this.get("mapId");
              let n = this.get("gameMode");
              const i = this.get("assetMutator");
              let s;
              if (e === a.CATEGORY_NAMES.PVP) {
                const e = this.get("assets").getMap(t, n, i);
                e && e.gameModeName && (s = e.gameModeName);
              }
              if (!s) {
                n = n.toLowerCase();
                const e = `game_select_game_type_name_${t}_${n}`;
                s = this.get(`tra.${e}`);
              }
              return s;
            },
          ),
          gameTypeDescription: i.Ember.computed(
            "selectedCategory",
            "mapId",
            "tra.ready",
            "gameMode",
            "assetMutator",
            "tra.game_select_category_description_pvp_11_classic",
            function () {
              let e = this.get("selectedCategory");
              const t = this.get("mapId");
              let n = this.get("gameMode");
              const i = this.get("assetMutator");
              let s;
              if (e === a.CATEGORY_NAMES.PVP) {
                const e = this.get("assets").getMap(t, n, i);
                e && e.gameModeDescription && (s = e.gameModeDescription);
              }
              if (!s) {
                if (this.get("isDisabledFeaturedGameMode")) return "";
                (n = n.toLowerCase()), (e = e.toLowerCase());
                const i = `game_select_category_description_${e}_${t}_${n}`;
                s = this.get(`tra.${i}`);
              }
              return s;
            },
          ),
          isTraining: i.Ember.computed.equal("selectedCategory", "Training"),
          isDisabledFeaturedGameMode: i.Ember.computed(
            "mapId",
            "gameMode",
            function () {
              return (
                this.get("mapId") === a.DISABLED_RGM_GAME_TYPE.mapId &&
                this.get("gameMode") === a.DISABLED_RGM_GAME_TYPE.gameMode
              );
            },
          ),
          mapVersus: i.Ember.computed(
            "gameMode",
            "isTraining",
            "isDisabledFeaturedGameMode",
            "mapTeamSize",
            "tra.ready",
            "tra.game_select_team_size",
            function () {
              const e = this.get("gameMode");
              if ("TFT" === e)
                return this.get(
                  "tra.game_select_team_size_free_for_all_acronym",
                );
              if ("CHERRY" === e)
                return this.get("tra.game_select_team_size_multiteam");
              const t = this.get("mapTeamSize");
              return this.get("isTraining") ||
                this.get("isDisabledFeaturedGameMode") ||
                0 === t
                ? null
                : this.translate("game_select_team_size", { size: t });
            },
          ),
          defaultQueueId: i.Ember.computed(
            "gameTypeQueues.[]",
            "isTraining",
            function () {
              const e = this.get("gameTypeQueues"),
                t = this.get("isTraining");
              if (!e || e.length < 1 || t) return;
              return e[0];
            },
          ),
          defaultQueue: i.Ember.computed("defaultQueueId", function () {
            const e = this.get("defaultQueueId");
            return this.get("queues").getQueueById(e);
          }),
          shouldDisplayQueueSelect: i.Ember.computed(
            "isDisabled",
            "isTraining",
            function () {
              const e = this.get("isDisabled"),
                t = this.get("isTraining");
              return !e && !t;
            },
          ),
          hoverSoundDisabled: i.Ember.computed.or(
            "isDisabled",
            "isCurrentlySelected",
          ),
          onDidInsertElement: i.Ember.on(
            "didInsertElement",
            i.Ember.observer(
              "mapId",
              "gameMode",
              "assetMutator",
              "assets.availableMaps",
              function () {
                if (this.element) {
                  const e = this.element.querySelector(
                      ".parties-game-type-icon",
                    ),
                    t = this.getMapSoundUrl("gameselect-button-hover-sound");
                  this.attachHoverSoundWithDisabledCheck(e, t);
                }
              },
            ),
          ),
          gameServerRegionOptions: i.Ember.computed.alias(
            "customGamesService.gameServerRegionOptions",
          ),
          gameServerRegionsExist: i.Ember.computed.gt(
            "gameServerRegionOptions.length",
            0,
          ),
          shouldDisplayGameServerRegionOptions: i.Ember.computed.and(
            "gameServerRegionsExist",
            "isTraining",
            "customGameSubCategoryExists",
          ),
          updateGameServerRegionSelection: function (e) {
            if (e)
              this.set("customGamesService.playerInputs.gameServerRegion", e);
            else {
              const e = this.get("gameServerRegionOptions");
              for (let t = 0; t < e.length; t++)
                if (e[t].isSelected) {
                  this.set(
                    "customGamesService.playerInputs.gameServerRegion",
                    e[t].value,
                  );
                  break;
                }
            }
          },
          _selectQueue: function () {
            this.get("shouldDisplayGameServerRegionOptions")
              ? this.updateGameServerRegionSelection()
              : this.set(
                  "customGamesService.playerInputs.gameServerRegion",
                  "",
                );
            const e = this.get("isTraining"),
              t = this.get("defaultQueueId"),
              n = e ? this.get("gameMode") : null;
            (t || e) &&
              (this.playSound(
                "/fe/lol-parties/sfx-gameselect-button-map-click.ogg",
              ),
              this.sendAction("selectQueue", {
                queueId: t,
                trainingGameMode: n,
              }));
          },
          shouldShowTFTNPEQueueUnlock: i.Ember.computed(
            "tftNPEService.shouldShowTFTNPEQueueUnlock",
            "gameMode",
            "isCurrentlySelected",
            "eligibilityService.isTFTNPEEnabled",
            "eligibilityService.isNewTFTPlayer",
            function () {
              const e = this.get("tftNPEService.shouldShowTFTNPEQueueUnlock"),
                t = this.get("gameMode"),
                n = this.get("isCurrentlySelected"),
                i = this.get("eligibilityService.isTFTNPEEnabled"),
                s = this.get("eligibilityService.isNewTFTPlayer");
              return !!e && !("TFT" !== t || !n) && !(!i || s);
            },
          ),
          seedTFTNPEQueueUnlock: i.Ember.observer(
            "eligibilityService.isTFTNPEEnabled",
            "eligibilityService.isNewTFTPlayer",
            "tftNPEService.preferencesInitialized",
            "tftNPEService.shouldShowTFTNPEQueueUnlock",
            function () {
              const e = this.get("eligibilityService.isTFTNPEEnabled"),
                t = this.get("eligibilityService.isNewTFTPlayer"),
                n = this.get("tftNPEService.preferencesInitialized"),
                i = this.get("tftNPEService.shouldShowTFTNPEQueueUnlock");
              e &&
                t &&
                n &&
                !i &&
                this.get("tftNPEService").updateShouldShowTFTNPEQueueUnlock(!0);
            },
          ),
          didRender: function () {
            this._super(...arguments), this.updateTFTNPEUnlocking();
          },
          updateTFTNPEUnlocking: function () {
            const e = this.get("tftNPEService"),
              t = this.get("shouldShowTFTNPEQueueUnlock");
            if (e && t) {
              const t = this.element.querySelectorAll(
                ".parties-game-type-card-category-unlock-video",
              );
              for (const e of t) e.play();
              e.updateShouldShowTFTNPEQueueUnlock(!1);
            }
          },
          actions: {
            selectGameType: function () {
              this.get("animationLock") ||
                (this.get("isDisabled")
                  ? this.playSound(
                      "/fe/lol-uikit/sfx-uikit-button-locked-click.ogg",
                    )
                  : this.get("isCurrentlySelected") || this._selectQueue());
            },
            selectCategory: function (e) {
              this.get("isCurrentlySelected") &&
                !this.get("isDisabled") &&
                this.sendAction("selectQueue", { queueId: e });
            },
            gameServerRegionChange: function (e) {
              this.updateGameServerRegionSelection(e);
            },
          },
        });
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "8soHDUnx",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\game-type-select-component\\\\game-type-card\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\game-type-select-component\\\\game-type-card\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\game-type-select-component\\\\game-type-card\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","parties-game-type-upper-half"],["modifier",["action"],[["get",[null]],"selectGameType"]],["flush-element"],["text","\\n  "],["append",["helper",["game-type-icon"],null,[["mapId","currentlySelected","gameTypeName","mapSubtitle","isTraining","isDisabledFeaturedGameMode","gameMode","assetMutator"],[["get",["mapId"]],["get",["isCurrentlySelected"]],["get",["gameTypeName"]],["get",["mapVersus"]],["get",["isTraining"]],["get",["isDisabledFeaturedGameMode"]],["get",["gameMode"]],["get",["assetMutator"]]]]],false],["text","\\n"],["block",["if"],[["get",["shouldShowEligibilityWarning"]]],null,8],["close-element"],["text","\\n"],["open-element","div",[]],["static-attr","class","parties-game-type-lower-half"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","parties-game-type-card-intro"],["flush-element"],["append",["unknown",["gameTypeDescription"]],false],["close-element"],["text","\\n"],["block",["if"],[["get",["shouldDisplayGameServerRegionOptions"]]],null,5],["text","\\n"],["block",["if"],[["get",["shouldDisplayQueueSelect"]]],null,1],["close-element"],["text","\\n"],["append",["unknown",["computeDisabledReasons"]],false],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","        "],["append",["helper",["game-type-category-select"],null,[["queues","queueId","selectedQueueId","selectCategory"],[["get",["queues"]],["get",["queueId"]],["get",["selectedQueueId"]],"selectCategory"]]],false],["text","\\n"]],"locals":["queueId"]},{"statements":[["text","  "],["open-element","hr",[]],["flush-element"],["close-element"],["text","\\n  "],["open-element","lol-uikit-scrollable",[]],["static-attr","class","parties-game-type-card-categories"],["flush-element"],["text","\\n"],["block",["each"],[["get",["gameTypeQueues"]]],null,0],["text","  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["open-element","lol-uikit-dropdown-option",[]],["static-attr","slot","lol-uikit-dropdown-option"],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"gameServerRegionChange",["get",["option","value"]]],null],null],["flush-element"],["text","\\n            "],["append",["unknown",["option","value"]],false],["text","\\n          "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["open-element","lol-uikit-dropdown-option",[]],["static-attr","slot","lol-uikit-dropdown-option"],["static-attr","selected",""],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"gameServerRegionChange",["get",["option","value"]]],null],null],["flush-element"],["text","\\n            "],["append",["unknown",["option","value"]],false],["text","\\n          "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["option","isSelected"]]],null,3,2]],"locals":["option"]},{"statements":[["text","    "],["open-element","label",[]],["static-attr","for","custom-game-region"],["flush-element"],["append",["unknown",["tra","custom_game_setup_region_label"]],false],["close-element"],["text","\\n    "],["open-element","lol-uikit-framed-dropdown",[]],["static-attr","id","custom-game-region"],["flush-element"],["text","\\n"],["block",["each"],[["get",["gameServerRegionOptions"]]],null,4],["text","    "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","              "],["open-element","li",[]],["flush-element"],["append",["helper",["sanitize"],[["get",["reason"]]],null],false],["close-element"],["text","\\n"]],"locals":["reason"]},{"statements":[["text","        "],["open-element","lol-uikit-content-block",[]],["static-attr","class","game-type-category-disabled"],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n          "],["open-element","ul",[]],["flush-element"],["text","\\n"],["block",["each"],[["get",["disabledReasons"]]],null,6],["text","          "],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","parties-eligibility-error"],["flush-element"],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipConfig"],[["get",["tooltipConfig"]]]],7],["text","    "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i,
          s = n(1),
          o = n(51),
          a = (i = n(22)) && i.__esModule ? i : { default: i };
        n(165);
        const r = "hidden",
          l = "clicked",
          c = "active";
        e.exports = s.Ember.Component.extend({
          classNames: ["parties-game-type-icon"],
          classNameBindings: ["mapIdClassName"],
          layout: n(166),
          assets: s.Ember.inject.service("assets"),
          partySettingsService: s.Ember.inject.service("party-settings"),
          animationsEnabled: s.Ember.computed.alias(
            "partySettingsService.animationsEnabled",
          ),
          animationsDisabled: s.Ember.computed.not(
            "partySettingsService.animationsEnabled",
          ),
          mapId: null,
          gameMode: null,
          assetMutator: null,
          currentlySelected: !1,
          gameTypeName: "",
          mapSubtitle: !1,
          isTraining: !1,
          isDisabledFeaturedGameMode: !1,
          _initialLoad: !0,
          viewportStateIsShow: !0,
          mapIdClassName: s.Ember.computed("mapId", function () {
            return `map-${this.get("mapId")}`;
          }),
          videoState: s.Ember.computed(
            "currentlySelected",
            "animationsDisabled",
            "viewportStateIsShow",
            function () {
              if (!0 === this.get("viewportStateIsShow")) {
                const e = this.get("currentlySelected");
                let t, n;
                return (
                  !0 === this._initialLoad
                    ? ((t = !0), (this._initialLoad = !1))
                    : (t = !this.get("animationsDisabled")),
                  (n = e && t ? c : e ? l : r),
                  this.sendVideoEvent(n),
                  n
                );
              }
              return this.sendVideoEvent(r), r;
            },
          ),
          sendVideoEvent: function (e) {
            e = e || this.get("videoState");
            const t = this.videoWrapper(),
              n = this.get("haveVideoUrls");
            t && n && t.dispatchEvent(new Event(e));
          },
          _getTrainingAssetUrl: function (e) {
            const t = this.get("gameMode");
            return o.TUTORIAL_ASSETS[t][e];
          },
          activeVideoUrl: s.Ember.computed(
            "isTraining",
            "mapId",
            "assets.availableMaps",
            function () {
              return this._getAssetUrl("game-select-icon-active-video");
            },
          ),
          introVideoUrl: s.Ember.computed(
            "isTraining",
            "mapId",
            "assets.availableMaps",
            function () {
              return this._getAssetUrl("game-select-icon-intro-video");
            },
          ),
          backgroundDefaultUrl: s.Ember.computed(
            "isTraining",
            "mapId",
            "assets.availableMaps",
            function () {
              return this._getAssetUrl("game-select-icon-default");
            },
          ),
          backgroundHoverUrl: s.Ember.computed(
            "isTraining",
            "mapId",
            "assets.availableMaps",
            function () {
              return this._getAssetUrl("game-select-icon-hover");
            },
          ),
          backgroundDisabledUrl: s.Ember.computed(
            "isTraining",
            "mapId",
            "assets.availableMaps",
            function () {
              return this._getAssetUrl("game-select-icon-disabled");
            },
          ),
          backgroundActiveUrl: s.Ember.computed(
            "isTraining",
            "mapId",
            "assets.availableMaps",
            function () {
              return this._getAssetUrl("icon-victory");
            },
          ),
          backgroundFillerUrl: s.Ember.computed(
            "isTraining",
            "mapId",
            "assets.availableMaps",
            function () {
              return this._getAssetUrl("game-select-icon-active");
            },
          ),
          backgroundFillerImageClass: s.Ember.computed(
            "videoState",
            function () {
              return this.get("videoState") === l
                ? "icon-bg-filler-fade-in"
                : "icon-bg-filler-show";
            },
          ),
          mapSubtitleBreakClass: s.Ember.computed(
            "isDisabledFeaturedGameMode",
            function () {
              return this.get("isDisabledFeaturedGameMode")
                ? "parties-disabled-featured-game-mode-break"
                : "";
            },
          ),
          mapSubtitleText: s.Ember.computed("mapSubtitle", function () {
            return this.get("mapSubtitle") ? this.get("mapSubtitle") : "";
          }),
          haveVideoUrls: s.Ember.computed(
            "activeVideoUrl",
            "introVideoUrl",
            function () {
              const e = this.get("activeVideoUrl"),
                t = this.get("introVideoUrl");
              return e && "/" !== e && t && "/" !== t;
            },
          ),
          videoWrapper: function () {
            return this.element
              ? this.element.querySelector("#game-type-icon-state-machine")
              : null;
          },
          _getAssetUrl: function (e) {
            return this.get("isTraining")
              ? this._getTrainingAssetUrl(e)
              : this._getMapAssetUrl(e);
          },
          _getMapAssetUrl: function (e) {
            const t = this.get("assets").getMap(
              this.get("mapId"),
              this.get("gameMode"),
              this.get("assetMutator"),
            );
            return `/${t && t.assets ? t.assets[e] : ""}`;
          },
          videoURLObserver: s.Ember.computed("haveVideoUrls", function () {
            this.get("haveVideoUrls") && this.sendVideoEvent();
          }),
          _screenRootShowListener: null,
          _screenRootHideListener: null,
          _attachViewportListeners: function () {
            const e = s.Viewport.main().getScreenRoot(
              a.default.get("viewportApiKey"),
              "rcp-fe-lol-parties",
            );
            (this._screenRootShowListener = function () {
              (this._initialLoad = !0), this.set("viewportStateIsShow", !0);
            }.bind(this)),
              (this._screenRootHideListener = function () {
                this.set("viewportStateIsShow", !1);
              }.bind(this)),
              e.on("show", this._screenRootShowListener),
              e.on("hide", this._screenRootHideListener);
          },
          _detachViewportListeners: function () {
            const e = s.Viewport.main().getScreenRoot(
              a.default.get("viewportApiKey"),
              "rcp-fe-lol-parties",
            );
            this._screenRootShowListener &&
              (e.off("show", this._screenRootShowListener),
              (this._screenRootShowListener = null)),
              this._screenRootHideListener &&
                (e.off("hide", this._screenRootHideListener),
                (this._screenRootHideListener = null));
          },
          didInsertElement: function () {
            this._super(...arguments), this._attachViewportListeners();
          },
          willDestroyElement: function () {
            this._super(...arguments), this._detachViewportListeners();
          },
        });
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "2UeDrH9I",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\game-type-select-component\\\\game-type-card\\\\game-type-icon-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\game-type-select-component\\\\game-type-card\\\\game-type-icon-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\game-type-select-component\\\\game-type-card\\\\game-type-icon-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","parties-game-type-card-selected-glow"],["flush-element"],["close-element"],["text","\\n"],["open-element","div",[]],["static-attr","class","icon-frame"],["flush-element"],["text","\\n"],["block",["if"],[["get",["animationsEnabled"]]],null,2],["text","  "],["open-element","div",[]],["static-attr","class","icon-bg icon-bg-default"],["dynamic-attr","style",["concat",["background-image: url(\'",["unknown",["backgroundDefaultUrl"]],"\');"]]],["flush-element"],["close-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","icon-bg icon-bg-hover"],["dynamic-attr","style",["concat",["background-image: url(\'",["unknown",["backgroundHoverUrl"]],"\');"]]],["flush-element"],["close-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","icon-bg icon-bg-disabled"],["dynamic-attr","style",["concat",["background-image: url(\'",["unknown",["backgroundDisabledUrl"]],"\');"]]],["flush-element"],["close-element"],["text","\\n\\n"],["block",["if"],[["get",["animationsDisabled"]]],null,1,0],["close-element"],["text","\\n"],["open-element","div",[]],["dynamic-attr","class",["concat",["parties-game-type-card-break ",["unknown",["mapSubtitleBreakClass"]]]]],["flush-element"],["append",["unknown",["mapSubtitleText"]],false],["close-element"],["text","\\n"],["open-element","div",[]],["static-attr","class","parties-game-type-card-name"],["flush-element"],["append",["unknown",["gameTypeName"]],false],["close-element"],["text","\\n\\n"],["append",["unknown",["videoURLObserver"]],false],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["open-element","lol-uikit-video-state-machine",[]],["static-attr","id","game-type-icon-state-machine"],["dynamic-attr","data-map-id",["concat",[["unknown",["mapId"]]]]],["flush-element"],["text","\\n      "],["open-element","lol-uikit-video-group",[]],["flush-element"],["text","\\n        "],["open-element","lol-uikit-video-state",[]],["static-attr","state","active"],["flush-element"],["text","\\n          "],["open-element","lol-uikit-video",[]],["static-attr","type","idle"],["static-attr","class","icon-bg video-icon"],["dynamic-attr","src",["concat",[["unknown",["activeVideoUrl"]]]]],["static-attr","fade-in","0"],["static-attr","fade-out","333"],["flush-element"],["close-element"],["text","\\n        "],["close-element"],["text","\\n\\n        "],["open-element","lol-uikit-video-state",[]],["static-attr","state","clicked"],["flush-element"],["text","\\n          "],["open-element","lol-uikit-video",[]],["static-attr","type","intro"],["static-attr","class","icon-bg video-icon"],["dynamic-attr","src",["concat",[["unknown",["introVideoUrl"]]]]],["flush-element"],["close-element"],["text","\\n\\n          "],["open-element","lol-uikit-video",[]],["static-attr","type","idle"],["static-attr","class","icon-bg video-icon"],["dynamic-attr","src",["concat",[["unknown",["activeVideoUrl"]]]]],["static-attr","fade-out","333"],["flush-element"],["close-element"],["text","\\n        "],["close-element"],["text","\\n\\n        "],["open-element","lol-uikit-video-state",[]],["static-attr","state","hidden"],["static-attr","no-preserve-state",""],["flush-element"],["close-element"],["text","\\n      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","icon-bg icon-bg-active"],["dynamic-attr","style",["concat",["background-image: url(\'",["unknown",["backgroundActiveUrl"]],"\');"]]],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["dynamic-attr","class",["concat",["icon-bg icon-bg-filler ",["unknown",["backgroundFillerImageClass"]]]]],["dynamic-attr","style",["concat",["background-image: url(\'",["unknown",["backgroundFillerUrl"]],"\');"]]],["flush-element"],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1),
          s = r(n(19)),
          o = r(n(10)),
          a = n(9);
        function r(e) {
          return e && e.__esModule ? e : { default: e };
        }
        n(168);
        const l = [n(169), n(170), n(171), n(172)];
        e.exports = i.Ember.Component.extend(s.default, {
          classNames: ["parties-game-type-card-category-div"],
          classNameBindings: ["isSelected:selected", "isDisabled:disabled"],
          eligibilityService: i.Ember.inject.service("queue-eligibility"),
          summonerService: i.Ember.inject.service("summoner"),
          platformConfigSingleton: o.default,
          layout: n(173),
          summonerId: i.Ember.computed.alias("summonerService.localSummonerId"),
          isSelected: i.Ember.computed(
            "selectedQueueId",
            "queueId",
            "isDisabled",
            function () {
              return (
                this.get("selectedQueueId") === this.get("queueId") &&
                !this.get("isDisabled")
              );
            },
          ),
          queueObj: i.Ember.computed("queueId", function () {
            return this.get("queues").getQueueById(this.get("queueId"));
          }),
          eligibility: i.Ember.computed(
            "queueId",
            "eligibilityService.eligibilities",
            function () {
              const e = this.get("queueId"),
                t = this.get("eligibilityService.eligibilities");
              let n = {};
              return (
                t &&
                  t[e] &&
                  ((n = t[e]),
                  (n.restrictions = this.get(
                    "eligibilityService",
                  ).applyRestrictionGroupRules(n.restrictions))),
                n
              );
            },
          ),
          isDisabled: !1,
          isEligibilityRestricted: i.Ember.computed.not("eligibility.eligible"),
          gameTypeQueueName: i.Ember.computed(
            "queueId",
            "queues.platformJson",
            function () {
              const e = this.get("queueId"),
                t = this.get("queues.platformJson"),
                n = e && t ? t.find((t) => t.id === e) : null;
              return n ? n.description : "";
            },
          ),
          queueGameMode: i.Ember.computed(
            "queueId",
            "queues.platformJson",
            function () {
              const e = this.get("queueId"),
                t = this.get("queues.platformJson"),
                n = e && t ? t.find((t) => t.id === e) : null;
              return n ? n.gameMode : "";
            },
          ),
          tooltipConfig: {
            targetAnchor: { x: "center", y: "bottom" },
            tooltipAnchor: { x: "center", y: "top" },
            offset: { x: 0, y: 0 },
          },
          disabledReasons: i.Ember.A(),
          disabledReasonsObserver: i.Ember.on(
            "init",
            i.Ember.observer("eligibility", function () {
              i.Ember.run.once(this, function () {
                this.computeDisabledReasons();
              });
            }),
          ),
          computeDisabledReasons: function () {
            const e = this.get("eligibility");
            if (!e || !e.eligible) {
              const t = this.get("eligibilityService");
              return t.generateDisabledReasonForParty(e).then((n) => {
                this.set(
                  "isDisabled",
                  t.isSummonerRestricted(e, this.get("summonerId")),
                ),
                  this.set("disabledReasons", i.Ember.A(n));
              });
            }
            return this.set("isDisabled", !1), Promise.resolve();
          },
          click: function () {
            if (!this.get("isSelected") && !this.get("isDisabled")) {
              const e = this.get("queueId");
              this.sendAction("selectCategory", e),
                this.playSound("/fe/lol-uikit/sfx-uikit-radio-click.ogg");
            }
            return !1;
          },
          isSoloRewardsEnabled: i.Ember.computed.or(
            "soloIpIncentivesEnabled",
            "soloAutofillProtectionEnabled",
          ),
          soloIpIncentivesEnabled: i.Ember.computed.alias(
            "platformConfigSingleton.soloIpRewardsForQueueId440",
          ),
          soloAutofillProtectionEnabled: i.Ember.computed.alias(
            "platformConfigSingleton.soloAutoFillProtectionForQueueId440",
          ),
          shouldShowSoloRewards: i.Ember.computed(
            "queueId",
            "isSoloRewardsEnabled",
            "isDisabled",
            function () {
              return (
                440 === this.get("queueId") &&
                this.get("isSoloRewardsEnabled") &&
                !this.get("isDisabled")
              );
            },
          ),
          allowablePremadeSizesForQueue440: i.Ember.computed.alias(
            "platformConfigSingleton.allowablePremadeSizesForQueue440",
          ),
          shouldShowAllowablePremadeSizes: i.Ember.computed(
            "queueId",
            function () {
              return 440 === this.get("queueId");
            },
          ),
          allowablePremadeSizesString: i.Ember.computed(
            "tra",
            "tra.ready",
            "tra.game_select_flex_premade_size_any",
            "tra.game_select_flex_premade_size_fours_disabled",
            "tra.game_select_flex_premade_size_fives_only",
            "shouldShowAllowablePremadeSizes",
            "allowablePremadeSizesForQueue440",
            function () {
              if (
                !this.get("shouldShowAllowablePremadeSizes") ||
                !this.get("platformConfigSingleton")
              )
                return "";
              const e = this.get("allowablePremadeSizesForQueue440");
              return "1,2,3,4,5" === e
                ? this.get("tra.game_select_flex_premade_size_any")
                : "1,2,3,5" === e
                  ? this.get("tra.game_select_flex_premade_size_fours_disabled")
                  : "5" === e
                    ? this.get("tra.game_select_flex_premade_size_fives_only")
                    : "";
            },
          ),
          shouldShowUnlockVideo: i.Ember.computed(
            "queueId",
            "queueGameMode",
            function () {
              const e = this.get("queueId");
              return (
                "TFT" === this.get("queueGameMode") &&
                !a.TFT_AVAILABLE_NPE_QUEUE_IDS.includes(e)
              );
            },
          ),
          unlockVideo: i.Ember.computed("queueId", function () {
            const e = this.get("queueId");
            return l[e % l.length];
          }),
        });
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        "use strict";
        e.exports = n.p + "tft_npe_mode_unlock_1.webm";
      },
      (e, t, n) => {
        "use strict";
        e.exports = n.p + "tft_npe_mode_unlock_2.webm";
      },
      (e, t, n) => {
        "use strict";
        e.exports = n.p + "tft_npe_mode_unlock_3.webm";
      },
      (e, t, n) => {
        "use strict";
        e.exports = n.p + "tft_npe_mode_unlock_4.webm";
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "rj4goR6v",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\game-type-select-component\\\\game-type-card\\\\game-type-category-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\game-type-select-component\\\\game-type-card\\\\game-type-category-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\game-type-select-component\\\\game-type-card\\\\game-type-category-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","parties-game-type-card-category-radio-option"],["flush-element"],["close-element"],["text","\\n"],["open-element","div",[]],["dynamic-attr","class",["concat",["queue-eligibility-error queue-status-icon ",["helper",["if"],[["get",["isEligibilityRestricted"]],"queue-status-icon-visible"],null]]]],["flush-element"],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipConfig"],[["get",["tooltipConfig"]]]],6],["close-element"],["text","\\n"],["open-element","div",[]],["dynamic-attr","class",["concat",["solo-rewards-icon queue-status-icon ",["helper",["if"],[["get",["shouldShowSoloRewards"]],"queue-status-icon-visible"],null]]]],["flush-element"],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipConfig"],[["get",["tooltipConfig"]]]],4],["close-element"],["text","\\n"],["open-element","div",[]],["dynamic-attr","data-queue-id",["concat",[["unknown",["queueId"]]]]],["dynamic-attr","data-disabled-reason",["concat",[["unknown",["computeDisabledReasons"]]]]],["dynamic-attr","class",["concat",[["helper",["if"],[["get",["isSelected"]],"current"],null]," ",["helper",["if"],[["get",["isDisabled"]],"disabled"],null]," parties-game-type-card-category-btn"]]],["flush-element"],["text","\\n  "],["append",["unknown",["gameTypeQueueName"]],false],["text","\\n"],["block",["if"],[["get",["shouldShowAllowablePremadeSizes"]]],null,1],["close-element"],["text","\\n"],["block",["if"],[["get",["shouldShowUnlockVideo"]]],null,0],["append",["helper",["tft-event-countdown"],null,[["queueId"],[["get",["queueId"]]]]],false]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["open-element","uikit-video",[]],["static-attr","class","parties-game-type-card-category-unlock-video"],["static-attr","cache-name","rcp-fe-lol-parties"],["static-attr","preload",""],["dynamic-attr","src",["concat",[["unknown",["unlockVideo"]]]]],["flush-element"],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","span",[]],["static-attr","class","allowable-premade-sizes-text"],["flush-element"],["append",["unknown",["allowablePremadeSizesString"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","p",[]],["static-attr","class","game-select-solo-rewards-item"],["flush-element"],["append",["unknown",["tra","game_select_solo_rewards_ip_incentive"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","p",[]],["static-attr","class","game-select-solo-rewards-item"],["flush-element"],["append",["unknown",["tra","game_select_solo_rewards_autofill_protection"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-large"],["flush-element"],["text","\\n      "],["open-element","h5",[]],["flush-element"],["append",["unknown",["tra","game_select_solo_rewards_title"]],false],["close-element"],["text","\\n      "],["open-element","hr",[]],["flush-element"],["close-element"],["text","\\n"],["block",["if"],[["get",["soloAutofillProtectionEnabled"]]],null,3],["block",["if"],[["get",["soloIpIncentivesEnabled"]]],null,2],["text","    "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["open-element","li",[]],["flush-element"],["append",["helper",["sanitize"],[["get",["reason"]]],null],false],["close-element"],["text","\\n"]],"locals":["reason"]},{"statements":[["text","    "],["open-element","lol-uikit-content-block",[]],["static-attr","class","game-type-category-disabled"],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n      "],["open-element","ul",[]],["flush-element"],["text","\\n"],["block",["each"],[["get",["disabledReasons"]]],null,5],["text","      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i,
          s = n(1),
          o = (i = n(10)) && i.__esModule ? i : { default: i },
          a = n(9);
        e.exports = s.Ember.Component.extend({
          classNames: ["parties-game-navs"],
          classNameBindings: ["hasAlphaQueues"],
          layout: n(175),
          customGamesService: s.Ember.inject.service("custom-games"),
          eligibilityService: s.Ember.inject.service("queue-eligibility"),
          platformConfigSingleton: o.default,
          categories: s.Ember.computed("queues.queuesByCategory", function () {
            return this.convertCategories("primary");
          }),
          secondaryCategories: s.Ember.computed("queues", function () {
            return this.convertCategories("secondary");
          }),
          selectedIndex: s.Ember.computed(
            "categories",
            "selected.category",
            function () {
              const e = [].concat(
                  a.CATEGORIES_DISPLAY_ORDER.primary,
                  a.CATEGORIES_DISPLAY_ORDER.secondary,
                ),
                t = this.get("selected.category"),
                n = e.indexOf(t);
              return Math.max(n, 0);
            },
          ),
          actions: {
            selectCategory(e) {
              this.setCategory(e);
            },
          },
          setCategory: function (e) {
            if (
              (this.set("selected.category", e),
              this.set("selected.needsAdditionalGameConfig", !1),
              this.set("selected.isCreatingCustomGame", !1),
              this.set("selected.isJoiningCustomGame", !1),
              this.set("selected.isTrainingGame", !1),
              this.set("selected.queueId", null),
              "CreateCustom" === e)
            ) {
              this.get("customGamesService").resetSelectedSubcategory(),
                this.set("selected.isCreatingCustomGame", !0),
                this.set("selected.needsAdditionalGameConfig", !0);
              const e = this.get(
                "customGamesService.selectedSubcategory.mapId",
              );
              this.set("selected.mapId", e);
            } else if ("JoinCustom" === e)
              this.set("selected.isJoiningCustomGame", !0);
            else if ("Training" === e) {
              this.set("selected.isTrainingGame", !0);
              const e = this.get("queues").getTutorialQueues();
              e &&
                e.length > 0 &&
                (this.get("eligibilityService").isTutorialRestricted() &&
                e.length > 1
                  ? (this.set("selected.trainingGameMode", e[1].gameMode),
                    this.set("selected.isCreatingCustomGame", !0))
                  : this.set("selected.trainingGameMode", e[0].gameMode));
            } else {
              const t = this.getDefaultQueue(e);
              t && this.set("selected.queueId", t);
            }
          },
          getDefaultQueue: function (e) {
            const t = this.get("queues"),
              n = t.getAllAvailableGameTypesForCategory(e);
            for (const i of n) {
              const n = t.getAvailableQueuesForCategoryAndGameType(
                  e,
                  i.mapId,
                  i.gameMode,
                ),
                s = this.get("eligibilityService").getQueueEligibilities(n);
              for (let e = 0; e < n.length; e++) {
                const t = s[e];
                if (t && t.eligible) return n[e];
              }
            }
            return !1;
          },
          convertCategories: function (e) {
            const t = [],
              n = this.get("queues");
            return (
              a.CATEGORIES_DISPLAY_ORDER[e].forEach((e) => {
                const i = n.categoryHasQueues(e);
                t.push(s.Ember.Object.create({ name: e, hasQueues: i }));
              }),
              s.Ember.A(t)
            );
          },
        });
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "y0txhw2F",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\category-select-component\\\\layout.hbs\\" style-path=\\"null\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\category-select-component\\\\index.js\\" "],["text","\\n"],["open-element","lol-uikit-navigation-bar",[]],["dynamic-attr","selectedindex",["concat",[["unknown",["selectedIndex"]]]]],["static-attr","type","nav-bar-secondary"],["static-attr","class","parties-game-navs-list"],["flush-element"],["text","\\n"],["block",["each"],[["get",["categories"]]],null,1],["text","  "],["open-element","span",[]],["static-attr","class","parties-game-navs-break"],["flush-element"],["close-element"],["text","\\n"],["block",["each"],[["get",["secondaryCategories"]]],null,0],["close-element"],["text","\\n"],["append",["unknown",["custom-game-tournament-code"]],false]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["append",["helper",["playable-category"],null,[["category","selected","action"],[["get",["catObj"]],["get",["selected"]],"selectCategory"]]],false],["text","\\n"]],"locals":["catObj"]},{"statements":[["text","    "],["append",["helper",["playable-category"],null,[["category","selected","action"],[["get",["catObj"]],["get",["selected"]],"selectCategory"]]],false],["text","\\n"]],"locals":["catObj"]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i,
          s = n(1),
          o = (i = n(10)) && i.__esModule ? i : { default: i };
        e.exports = s.Ember.Component.extend({
          tagName: "lol-uikit-navigation-item",
          classNames: ["parties-game-navs-item"],
          customGamesService: s.Ember.inject.service("custom-games"),
          attributeBindings: [
            "disabled:disabled",
            "active:active",
            "category.name:data-category",
          ],
          layout: n(177),
          platformConfigSingleton: o.default,
          active: s.Ember.computed(
            "category.name",
            "selected.category",
            function () {
              return (
                this.get("category.name") === this.get("selected.category")
              );
            },
          ),
          isCreateCustom: s.Ember.computed.equal(
            "category.name",
            "CreateCustom",
          ),
          isJoinCustom: s.Ember.computed.equal("category.name", "JoinCustom"),
          isTraining: s.Ember.computed.equal("category.name", "Training"),
          disabled: s.Ember.computed(
            "category.hasQueues",
            "isCreateCustom",
            "isJoinCustom",
            "isTraining",
            "customGamesService.available",
            "platformConfigSingleton.tutorialEnabled",
            function () {
              return this.get("isTraining")
                ? !this.get("platformConfigSingleton.tutorialEnabled")
                : this.get("isCreateCustom") || this.get("isJoinCustom")
                  ? !this.get("customGamesService.available")
                  : !this.get("category.hasQueues");
            },
          ),
          name: s.Ember.computed(
            "category.name",
            "tra.ready",
            "tra.parties_game_category_pvp",
            function () {
              const e = this.get("category.name");
              return e
                ? this.get(`tra.parties_game_category_${e.toLowerCase()}`)
                : "";
            },
          ),
          tooltipConfig: {
            targetAnchor: { x: "center", y: "bottom" },
            tooltipAnchor: { x: "center", y: "top" },
            offset: { x: 0, y: 0 },
          },
          click: function () {
            this.get("disabled") ||
              this.get("active") ||
              this.sendAction("action", this.get("category.name"));
          },
        });
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "2Rm0Zbyn",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\category-select-component\\\\category-component\\\\layout.hbs\\" style-path=\\"null\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\category-select-component\\\\category-component\\\\index.js\\" "],["text","\\n"],["append",["unknown",["name"]],false],["text","\\n"],["block",["if"],[["get",["disabled"]]],null,1]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n      "],["open-element","p",[]],["flush-element"],["append",["unknown",["tra","game_select_category_nav_not_available"]],false],["close-element"],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["uikit-tooltip"],null,[["tooltipConfig"],[["get",["tooltipConfig"]]]],0]],"locals":[]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i,
          s = n(1),
          o = n(57),
          a = (i = n(72)) && i.__esModule ? i : { default: i };
        n(179);
        const r = s.UIKit.getTooltipManager(),
          l = s.UIKit.getTemplateHelper();
        e.exports = s.Ember.Component.extend(a.default, {
          classNames: ["parties-custom-game-setup"],
          classNameBindings: ["haveNameError:name-error"],
          customGamesService: s.Ember.inject.service("custom-games"),
          layout: n(180),
          showingState: null,
          selected: null,
          queues: null,
          playerInputs: s.Ember.computed.alias(
            "customGamesService.playerInputs",
          ),
          selectedSubcategory: s.Ember.computed.alias(
            "customGamesService.selectedSubcategory",
          ),
          subcategories: s.Ember.computed.alias(
            "customGamesService.shownCustomSubcategories",
          ),
          spectatorTypes: s.Ember.computed.alias(
            "customGamesService.spectatorTypes",
          ),
          onDidInsertListener: s.Ember.on("didInsertElement", function () {
            this.set("playerInputs.password", ""),
              this.set("playerInputs.name", this.get("defaultGameName"));
          }),
          maxTeamSize: s.Ember.computed(
            "selectedSubcategory.numPlayersPerTeam",
            "selectedSubcategory.mutators",
            "playerInputs.mutatorId",
            function () {
              const e = this.get("selectedSubcategory.numPlayersPerTeam"),
                t = this.get("selectedSubcategory.mutators"),
                n = this.get("playerInputs.mutatorId");
              if (t) {
                const e = t.find((e) => e.id === n);
                if (e && e.numPlayersPerTeamOverride)
                  return e.numPlayersPerTeamOverride;
              }
              return e;
            },
          ),
          teamSizeOptions: s.Ember.computed(
            "maxTeamSize",
            "minPlayersPerTeam",
            function () {
              const e = this.get("maxTeamSize");
              this.get("playerInputs.numPlayersPerTeam") > e &&
                this.set("playerInputs.numPlayersPerTeam", e);
              const t = this.get("playerInputs.numPlayersPerTeam"),
                n = [];
              for (let i = this.get("minPlayersPerTeam"); i <= e; i++) {
                const e = i === t;
                n.push({ value: i, isSelected: e });
              }
              return s.Ember.A(n);
            },
          ),
          minPlayersPerTeam: s.Ember.computed(
            "customGamesService.gameMapMinPlayers.[]",
            "customGamesService.gameMapMinPlayers.@each.minPlayers",
            "customGamesService.minPlayers",
            "selected.mapId",
            function () {
              let e = 1;
              const t = this.get("selected.mapId"),
                n = this.get("customGamesService.minPlayers");
              (e = this.get("customGamesService").findMinPlayersForMap(t)),
                n && n > e && (e = n);
              const i = Math.ceil(e / 2);
              return (
                this.get("playerInputs.numPlayersPerTeam") < i &&
                  this.send("teamSizeChange", i),
                i
              );
            },
          ),
          gameServerRegionOptions: s.Ember.computed.alias(
            "customGamesService.gameServerRegionOptions",
          ),
          mutatorOptions: s.Ember.computed(
            "tra.ready",
            "selectedSubcategory.mutators.@each.name",
            function () {
              const e = this.get("selectedSubcategory.mutators");
              if (!e || e.length < 1) return;
              this.resetMutatorOverrides(
                this.get("selectedSubcategory.mapId"),
                this.get("playerInputs.mutatorId"),
              );
              const t = [],
                n = this.get("playerInputs.mutatorId");
              for (let i = 0; i < e.length; i++) {
                const s = e[i].get("name");
                let a = e[i].get("id");
                a = parseInt(a, 10);
                const r = this.get("selectedSubcategory.mapId");
                if (
                  -1 === o.CUSTOM_GAME_NORMAL_MUTATORS.indexOf(a) &&
                  !this.isValidMutatorOverride(r, e[i])
                )
                  continue;
                let l = s;
                o.CUSTOM_GAME_MUTATOR_NAMES[s] &&
                  (l = this.get(
                    `tra.custom_game_mutator_type_${o.CUSTOM_GAME_MUTATOR_NAMES[s]}`,
                  ));
                const c = a === n;
                t.push({ value: a, label: l, isSelected: c });
              }
              return s.Ember.A(t);
            },
          ),
          spectatorOptions: s.Ember.computed(
            "tra.ready",
            "spectatorTypes",
            "selectedSubcategory.customSpectatorPolicies",
            function () {
              const e = this.get("playerInputs.spectatorType");
              let t = this.get("spectatorTypes");
              const n = this.get("selectedSubcategory.customSpectatorPolicies");
              (t && t.length) || (t = ["NotAllowed"]),
                n && n.length > 0 && (t = n);
              const i = [];
              let s = !1;
              return (
                t.forEach((t) => {
                  let n = t;
                  o.CUSTOM_GAME_SPECTATOR_TYPES[t] &&
                    (n = this.get(
                      `tra.custom_game_setup_spectator_type_${o.CUSTOM_GAME_SPECTATOR_TYPES[t]}`,
                    ));
                  const a = t === e;
                  a && (s = !0);
                  const r = { value: t, label: n, isSelected: a };
                  i.push(r);
                }),
                s ||
                  ((i[0].isSelected = !0),
                  this.set("playerInputs.spectatorType", i[0].value)),
                i
              );
            },
          ),
          spectatorDelayOptions: s.Ember.computed("tra.ready", function () {
            const e = this.get("playerInputs.spectatorDelay"),
              t = [];
            let n = !1;
            for (const i in o.CUSTOM_GAME_SPECTATOR_DELAY_OPTIONS) {
              const s = i === e;
              s && (n = !0);
              const a = {
                value: i,
                label: this.get(
                  `tra.custom_game_setup_spectator_delay_${o.CUSTOM_GAME_SPECTATOR_DELAY_OPTIONS[i]}`,
                ),
                isSelected: s,
              };
              t.push(a);
            }
            return (
              n ||
                ((t[0].isSelected = !0),
                this.set("playerInputs.spectatorDelay", t[0].value)),
              t
            );
          }),
          spectatorDelayConfigurable: s.Ember.computed.and(
            "customGamesService.spectatorV3Enabled",
            "customGamesService.spectatorV3DelayConfigurable",
          ),
          defaultGameName: s.Ember.computed.alias(
            "customGamesService.defaultGameName",
          ),
          nameError: s.Ember.computed.alias("customGamesService.nameError"),
          haveNameError: s.Ember.computed.alias(
            "customGamesService.haveNameError",
          ),
          nameErrorMessage: "",
          nameInput: function () {
            return this.element
              ? this.element.querySelector("input#custom-game-name")
              : null;
          },
          nameErrorObserver: s.Ember.computed(
            "tra.ready",
            "nameError",
            function () {
              const e = this.get("nameError");
              if (null === e) return;
              let t = "";
              switch (e) {
                case "length":
                  t = this.get("tra.custom_game_setup_name_error_length");
                  break;
                case "duplicate":
                  t = this.get("tra.formatString")(
                    "custom_game_setup_name_error_duplicate",
                    { name: this.get("playerInputs.name") },
                  );
              }
              t && this.set("nameErrorMessage", t);
            },
          ),
          nameErrorTooltipObserver: s.Ember.computed(
            "nameErrorMessage",
            function () {
              const e = this.nameInput();
              if (!e) return;
              const t = this.get("nameErrorMessage");
              if (!t) return void r.unassign(e);
              const n = this.createTooltip(t);
              r.assign(
                e,
                n,
                {},
                {
                  type: "info",
                  showDelay: 0,
                  targetAnchor: { x: "center", y: "top" },
                  tooltipAnchor: { x: "center", y: "bottom" },
                  showEvent: "nothing",
                  hideEvent: "nothing",
                },
              ),
                r.show(e);
            },
          ),
          createTooltip: function (e) {
            const t = document.createElement("lol-uikit-tooltip");
            t.classList.add("parties-custom-game-name-error-tooltip"),
              t.setAttribute("position", "bottom");
            const n = l.contentBlockDialogSimple(e);
            return n.setAttribute("padding", "small"), t.appendChild(n), t;
          },
          haveNameLengthError: function () {
            const e = this.nameInput();
            return (
              !e ||
              ((!e.value || e.value.trim().length < 3) &&
                (this.set("nameError", "length"), !0))
            );
          },
          clearNameError: function () {
            this.set("nameError", null), this.set("nameErrorMessage", null);
          },
          resetMutatorOverrides: function (e, t) {
            if (!this.get("selectedSubcategory.mutators")) return;
            const n = this.get("selectedSubcategory.mutators").find(
              (e) => e.id === t,
            );
            if (
              n &&
              -1 === o.CUSTOM_GAME_NORMAL_MUTATORS.indexOf(t) &&
              !this.isValidMutatorOverride(e, n)
            ) {
              const e = this.get("selectedSubcategory.mutators")[0].id;
              this.set("playerInputs.mutatorId", e),
                this.set(
                  "playerInputs.queueId",
                  this.get("customGamesService").getQueueId(e),
                );
            }
          },
          isValidMutatorOverride: function (e, t) {
            return (
              !(
                !o.CUSTOM_GAME_MAP_MUTATOR_OVERRIDES[e] ||
                -1 === o.CUSTOM_GAME_MAP_MUTATOR_OVERRIDES[e].indexOf(t.id)
              ) &&
              (t.gameModeOverride || t.numPlayersPerTeamOverride)
            );
          },
          actions: {
            nameKeyUp: function () {
              this.haveNameLengthError() || this.clearNameError();
            },
            nameChange: function () {
              const e = this.nameInput();
              if (!e || this.haveNameLengthError()) return;
              const t = e.value.trim();
              this.clearNameError(), this.set("playerInputs.name", t);
            },
            passwordChange: function () {
              const e = this.element.querySelector(
                "input#custom-game-password",
              );
              e && e.value && this.set("playerInputs.password", e.value);
            },
            teamSizeChange: function (e) {
              e >= this.get("minPlayersPerTeam") &&
                this.set("playerInputs.numPlayersPerTeam", e);
            },
            gameServerRegionChange: function (e) {
              this.set("playerInputs.gameServerRegion", e);
            },
            mutatorChanged: function () {
              const e = this.element.querySelector(
                "#custom-game-mutator lol-uikit-radio-input-option[selected]",
              );
              if (!e) return;
              let t = e.getAttribute("value");
              (t = parseInt(t, 10)),
                this.set("playerInputs.mutatorId", t),
                this.set(
                  "playerInputs.queueId",
                  this.get("customGamesService").getQueueId(t),
                );
            },
            spectatorChanged: function () {
              const e = this.element.querySelector(
                "#custom-game-spectator lol-uikit-radio-input-option[selected]",
              );
              e &&
                this.set("playerInputs.spectatorType", e.getAttribute("value"));
            },
            spectatorDelayChanged: function () {
              const e = this.element.querySelector(
                "#custom-game-spectator-delay lol-uikit-radio-input-option[selected]",
              );
              e &&
                this.set(
                  "playerInputs.spectatorDelay",
                  e.getAttribute("value"),
                );
            },
            selectSubcategory: function (e) {
              if (this.get("customGamesService").selectSubcategory(e)) {
                const e = this.get("selectedSubcategory.mapId");
                this.set("selected.mapId", e);
              }
            },
          },
        });
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "JlhgzedL",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\custom-game-setup-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\custom-game-setup-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\custom-game-setup-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","parties-custom-game-subcategory-select"],["flush-element"],["text","\\n"],["block",["each"],[["get",["subcategories"]]],null,18],["close-element"],["text","\\n"],["open-element","div",[]],["static-attr","class","parties-custom-game-lower-half"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","parties-custom-game-text-inputs"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","parties-custom-game-name-field"],["flush-element"],["text","\\n      "],["open-element","label",[]],["static-attr","for","custom-game-name"],["flush-element"],["append",["unknown",["tra","custom_game_setup_name_label"]],false],["close-element"],["text","\\n      "],["open-element","lol-uikit-flat-input",[]],["flush-element"],["text","\\n        "],["open-element","input",[]],["static-attr","type","text"],["static-attr","name","custom-game-name"],["static-attr","id","custom-game-name"],["dynamic-attr","value",["concat",[["unknown",["defaultGameName"]]]]],["static-attr","maxlength","30"],["modifier",["action"],[["get",[null]],"nameChange"],[["on"],["focusOut"]]],["modifier",["action"],[["get",[null]],"nameKeyUp"],[["on"],["keyUp"]]],["flush-element"],["close-element"],["text","\\n      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","ul",[]],["static-attr","class","parties-custom-game-dropdown-fields"],["flush-element"],["text","\\n      "],["open-element","li",[]],["static-attr","class","parties-custom-game-size-field"],["flush-element"],["text","\\n        "],["open-element","label",[]],["static-attr","for","custom-game-size"],["flush-element"],["append",["unknown",["tra","custom_game_setup_team_size_label"]],false],["close-element"],["text","\\n        "],["open-element","lol-uikit-framed-dropdown",[]],["static-attr","id","custom-game-size"],["flush-element"],["text","\\n"],["block",["each"],[["get",["teamSizeOptions"]]],null,17],["text","        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n"],["block",["if"],[["get",["gameServerRegionOptions"]]],null,14],["text","    "],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","parties-custom-game-password-field"],["flush-element"],["text","\\n      "],["open-element","label",[]],["static-attr","for","custom-game-password"],["flush-element"],["append",["unknown",["tra","custom_game_setup_password_label"]],false],["close-element"],["text","\\n      "],["open-element","lol-uikit-flat-input",[]],["flush-element"],["text","\\n        "],["open-element","input",[]],["static-attr","type","password"],["static-attr","name","custom-game-password"],["static-attr","id","custom-game-password"],["modifier",["action"],[["get",[null]],"passwordChange"],[["on"],["change"]]],["flush-element"],["close-element"],["text","\\n      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","parties-custom-game-radio-options"],["flush-element"],["text","\\n"],["block",["if"],[["get",["mutatorOptions","length"]]],null,10],["text","    "],["open-element","div",[]],["static-attr","class","parties-custom-game-spectator-field"],["flush-element"],["text","\\n      "],["open-element","label",[]],["static-attr","for","custom-game-spectator"],["flush-element"],["append",["unknown",["tra","custom_game_setup_spectator_label"]],false],["close-element"],["text","\\n      "],["open-element","lol-uikit-radio-input",[]],["static-attr","id","custom-game-spectator"],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"spectatorChanged"],null],null],["flush-element"],["text","\\n"],["block",["each"],[["get",["spectatorOptions"]]],null,6],["text","      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n"],["block",["if"],[["get",["spectatorDelayConfigurable"]]],null,3],["text","  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"],["open-element","div",[]],["static-attr","style","display: none;"],["flush-element"],["text","\\n  "],["append",["unknown",["nameErrorObserver"]],false],["text","\\n  "],["append",["unknown",["nameErrorTooltipObserver"]],false],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","          "],["open-element","lol-uikit-radio-input-option",[]],["dynamic-attr","value",["concat",[["unknown",["option","value"]]]]],["flush-element"],["text","\\n            "],["append",["unknown",["option","label"]],false],["text","\\n          "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["open-element","lol-uikit-radio-input-option",[]],["static-attr","selected",""],["dynamic-attr","value",["concat",[["unknown",["option","value"]]]]],["flush-element"],["text","\\n            "],["append",["unknown",["option","label"]],false],["text","\\n          "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["option","isSelected"]]],null,1,0]],"locals":["option"]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","parties-custom-game-spectator-delay-field"],["flush-element"],["text","\\n      "],["open-element","label",[]],["static-attr","for","custom-game-spectator-delay"],["flush-element"],["append",["unknown",["tra","custom_game_setup_spectator_delay_label"]],false],["close-element"],["text","\\n      "],["open-element","lol-uikit-radio-input",[]],["static-attr","id","custom-game-spectator-delay"],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"spectatorDelayChanged"],null],null],["flush-element"],["text","\\n"],["block",["each"],[["get",["spectatorDelayOptions"]]],null,2],["text","      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["open-element","lol-uikit-radio-input-option",[]],["dynamic-attr","value",["concat",[["unknown",["option","value"]]]]],["flush-element"],["text","\\n            "],["append",["unknown",["option","label"]],false],["text","\\n          "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["open-element","lol-uikit-radio-input-option",[]],["static-attr","selected",""],["dynamic-attr","value",["concat",[["unknown",["option","value"]]]]],["flush-element"],["text","\\n            "],["append",["unknown",["option","label"]],false],["text","\\n          "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["option","isSelected"]]],null,5,4]],"locals":["option"]},{"statements":[["text","          "],["open-element","lol-uikit-radio-input-option",[]],["dynamic-attr","value",["concat",[["unknown",["option","value"]]]]],["flush-element"],["text","\\n            "],["append",["unknown",["option","label"]],false],["text","\\n          "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["open-element","lol-uikit-radio-input-option",[]],["static-attr","selected",""],["dynamic-attr","value",["concat",[["unknown",["option","value"]]]]],["flush-element"],["text","\\n            "],["append",["unknown",["option","label"]],false],["text","\\n          "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["option","isSelected"]]],null,8,7]],"locals":["option"]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","parties-custom-game-type-field"],["flush-element"],["text","\\n      "],["open-element","label",[]],["static-attr","for","custom-game-mutator"],["flush-element"],["append",["unknown",["tra","custom_game_setup_type_label"]],false],["close-element"],["text","\\n      "],["open-element","lol-uikit-radio-input",[]],["static-attr","id","custom-game-mutator"],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"mutatorChanged"],null],null],["flush-element"],["text","\\n"],["block",["each"],[["get",["mutatorOptions"]]],null,9],["text","      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","                "],["open-element","lol-uikit-dropdown-option",[]],["static-attr","slot","lol-uikit-dropdown-option"],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"gameServerRegionChange",["get",["option","value"]]],null],null],["flush-element"],["text","\\n                  "],["append",["unknown",["option","value"]],false],["text","\\n                "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","                "],["open-element","lol-uikit-dropdown-option",[]],["static-attr","slot","lol-uikit-dropdown-option"],["static-attr","selected",""],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"gameServerRegionChange",["get",["option","value"]]],null],null],["flush-element"],["text","\\n                  "],["append",["unknown",["option","value"]],false],["text","\\n                "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["option","isSelected"]]],null,12,11]],"locals":["option"]},{"statements":[["text","        "],["open-element","li",[]],["static-attr","class","parties-custom-game-region-field"],["flush-element"],["text","\\n          "],["open-element","label",[]],["static-attr","for","custom-game-region"],["flush-element"],["append",["unknown",["tra","custom_game_setup_region_label"]],false],["close-element"],["text","\\n          "],["open-element","lol-uikit-framed-dropdown",[]],["static-attr","id","custom-game-region"],["flush-element"],["text","\\n"],["block",["each"],[["get",["gameServerRegionOptions"]]],null,13],["text","          "],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","              "],["open-element","lol-uikit-dropdown-option",[]],["static-attr","slot","lol-uikit-dropdown-option"],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"teamSizeChange",["get",["option","value"]]],null],null],["flush-element"],["text","\\n                "],["append",["unknown",["option","value"]],false],["text","\\n              "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","              "],["open-element","lol-uikit-dropdown-option",[]],["static-attr","slot","lol-uikit-dropdown-option"],["static-attr","selected",""],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"teamSizeChange",["get",["option","value"]]],null],null],["flush-element"],["text","\\n                "],["append",["unknown",["option","value"]],false],["text","\\n              "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["option","isSelected"]]],null,16,15]],"locals":["option"]},{"statements":[["text","    "],["append",["helper",["custom-game-subcategory-card"],null,[["index","animationLock","subcategory","selectedSubcategoryIndex","selected"],[["get",["index"]],["get",["selected","animationLock"]],["get",["subcategory"]],["get",["playerInputs","subcategoryIndex"]],"selectSubcategory"]]],false],["text","\\n"]],"locals":["subcategory","index"]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i,
          s = n(1),
          o = (i = n(19)) && i.__esModule ? i : { default: i },
          a = n(57);
        e.exports = s.Ember.Component.extend(o.default, {
          classNames: ["parties-custom-game-subcategory-card"],
          classNameBindings: [
            "currentlySelected:selected",
            "unavailable:disabled",
            "animationLock:animation-lock",
          ],
          attributeBindings: ["mapId:data-map-id"],
          index: null,
          subcategory: null,
          selectedSubcategoryIndex: null,
          animationLock: !1,
          layout: n(182),
          assets: s.Ember.inject.service(),
          mapId: s.Ember.computed.alias("subcategory.mapId"),
          availability: s.Ember.computed(
            "subcategory.queueAvailability",
            function () {
              const e = this.get("subcategory.queueAvailability");
              return (
                !!a.GAME_AVAILABILITY_TYPES[e] && a.GAME_AVAILABILITY_TYPES[e]
              );
            },
          ),
          available: s.Ember.computed.equal("availability", "available"),
          unavailable: s.Ember.computed.not("available"),
          unavailableTooltip: s.Ember.computed(
            "tra.ready",
            "tra.custom_game_setup_subcategory_unavailable_generic",
            function () {
              return this.get(
                "tra.custom_game_setup_subcategory_unavailable_generic",
              );
            },
          ),
          currentlySelected: s.Ember.computed(
            "index",
            "selectedSubcategoryIndex",
            function () {
              return this.get("index") === this.get("selectedSubcategoryIndex");
            },
          ),
          name: s.Ember.computed(
            "tra.ready",
            "subcategory.mapId",
            "subcategory.modifiers",
            "subcategory.gameMode",
            "assets",
            function () {
              const e = this.get("mapId"),
                t = this.get("gameMode"),
                n = this.get("assets").getMap(e, t);
              return n && n.name
                ? n.name
                : this.get(`tra.game_select_map_name_${e}`);
            },
          ),
          hoverSoundDisabled: s.Ember.computed.or(
            "currentlySelected",
            "unavailable",
          ),
          onDidInsertElement: s.Ember.on(
            "didInsertElement",
            s.Ember.observer("mapId", "assets.availableMaps", function () {
              const e = this.element.querySelector(".subcategory-map-icon"),
                t = this.getMapSoundUrl("gameselect-button-hover-sound");
              this.attachHoverSoundWithDisabledCheck(e, t);
            }),
          ),
          tooltipConfig: {
            targetAnchor: { x: "center", y: "bottom" },
            tooltipAnchor: { x: "center", y: "top" },
            offset: { x: 0, y: 0 },
          },
          actions: {
            selectSubcategory: function () {
              this.get("animationLock") ||
                (this.get("unavailable")
                  ? this.playSound(
                      "/fe/lol-parties/sfx-uikit-button-locked-click.ogg",
                    )
                  : this.get("currentlySelected") ||
                    (this.playSound(
                      "/fe/lol-parties/sfx-gameselect-button-map-click.ogg",
                    ),
                    this.sendAction("selected", this.get("index"))));
            },
          },
        });
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "E8F4CLSR",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\custom-game-setup-component\\\\subcategory-card-component\\\\layout.hbs\\" style-path=\\"null\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\custom-game-setup-component\\\\subcategory-card-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","subcategory-map-icon"],["modifier",["action"],[["get",[null]],"selectSubcategory"]],["flush-element"],["text","\\n  "],["append",["helper",["game-type-icon"],null,[["mapId","currentlySelected","gameTypeName"],[["get",["mapId"]],["get",["currentlySelected"]],["get",["name"]]]]],false],["text","\\n"],["block",["if"],[["get",["unavailable"]]],null,1],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","        "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n          "],["open-element","p",[]],["flush-element"],["append",["unknown",["unavailableTooltip"]],false],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","subcategory-tooltip-proxy"],["flush-element"],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipConfig"],[["get",["tooltipConfig"]]]],0],["text","    "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1),
          s = n(57);
        n(184),
          (e.exports = i.Ember.Component.extend({
            layout: n(185),
            classNames: ["custom-root"],
            classNameBindings: [
              "isShowingParty:custom-lobby-show:custom-lobby-hide",
            ],
            lobbiesService: i.Ember.inject.service("lobbies"),
            matchmakingService: i.Ember.inject.service("matchmaking"),
            customGameService: i.Ember.inject.service("custom-games"),
            selected: !1,
            isTFT: i.Ember.computed.alias("customGameService.isTFT"),
            isShowingParty: i.Ember.computed.alias(
              "showingState.isShowingParty",
            ),
            currentPlayer: i.Ember.computed.alias(
              "lobbiesService.currentPlayer",
            ),
            currentPlayerCanInvite: i.Ember.computed.alias(
              "lobbiesService.currentPlayerCanInvite",
            ),
            isCurrentPlayerPartyLeader: i.Ember.computed.alias(
              "lobbiesService.isCurrentPlayerPartyLeader",
            ),
            inviteButtonDisabled: i.Ember.computed.or(
              "matchmakingService.isSearching",
              "matchmakingService.isMatchFound",
            ),
            currentPartyIsFull: i.Ember.computed.alias(
              "lobbiesService.currentPartyIsFull",
            ),
            showSpectators: i.Ember.computed(
              "customGameService.spectatorPolicy",
              function () {
                const e = this.get("customGameService.spectatorPolicy");
                return !(
                  !e ||
                  !s.CUSTOM_GAME_SPECTATOR_TYPES[e] ||
                  "none" === s.CUSTOM_GAME_SPECTATOR_TYPES[e] ||
                  "dropin" === s.CUSTOM_GAME_SPECTATOR_TYPES[e]
                );
              },
            ),
            isLobbyFull: i.Ember.computed.alias(
              "customGameService.isLobbyFull",
            ),
            didInsertElementListener: i.Ember.on(
              "didInsertElement",
              function () {
                this.get("customGameService.isCustomUI") &&
                  this.set("selected.animationLock", !1);
              },
            ),
            actions: {
              showInviteModal: function () {
                this.sendAction("showInviteModal");
              },
            },
          }));
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "8zuYtYj+",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\custom-game\\\\custom-game-root-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\custom-game\\\\custom-game-root-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\custom-game\\\\custom-game-root-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","custom-game-invite-button-container"],["flush-element"],["text","\\n  "],["append",["helper",["invite-button"],null,[["currentPlayerCanInvite","buttonsDisabled","currentPartyIsFull","isCurrentPlayerPartyLeader","showInviteModal","isLobbyFull"],[["get",["currentPlayerCanInvite"]],["get",["inviteButtonDisabled"]],["get",["currentPartyIsFull"]],["get",["isCurrentPlayerPartyLeader"]],"showInviteModal",["get",["isLobbyFull"]]]]],false],["text","\\n"],["close-element"],["text","\\n\\n"],["block",["lower-section"],null,[["currentPlayer"],[["get",["currentPlayer"]]]],2],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["append",["unknown",["spectator-info"]],false],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["append",["helper",["point-eligibility"],null,[["selected","isCustomGame"],[["get",["selected"]],true]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","\\n"],["block",["unless"],[["get",["isTFT"]]],null,1],["text","\\n  "],["append",["helper",["custom-teams"],null,[["isTFT"],[["get",["isTFT"]]]]],false],["text","\\n\\n  "],["append",["helper",["invite-info-panel"],null,[["currentPlayerCanInvite","isCustom"],[["get",["currentPlayerCanInvite"]],true]]],false],["text","\\n\\n"],["block",["if"],[["get",["showSpectators"]]],null,0],["text","\\n  "],["append",["helper",["parties-footer"],null,[["showingState","selected"],[["get",["showingState"]],["get",["selected"]]]]],false],["text","\\n\\n  "],["open-element","div",[]],["static-attr","class","parties-chat-room-custom"],["flush-element"],["text","\\n    "],["open-element","lol-social-chat-room",[]],["static-attr","type","lobby"],["static-attr","disabled-when-connecting",""],["flush-element"],["close-element"],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i,
          s = n(1),
          o = (i = n(19)) && i.__esModule ? i : { default: i };
        n(187),
          (e.exports = s.Ember.Component.extend(o.default, {
            classNames: ["custom-game-spectator-info"],
            layout: n(188),
            customGamesService: s.Ember.inject.service("custom-games"),
            summonerService: s.Ember.inject.service("summoner"),
            _buttonClickSound:
              "/fe/lol-parties/sfx-lobby-button-banner-click.ogg",
            _spectatorSummoners: s.Ember.A(),
            spectateButtonDisabled: s.Ember.computed(
              "spectatorSlotsFull",
              "onlyOnePlayerOnTeams",
              "customGamesService.preventTeamChanges",
              "customGamesService.isSwitchingTeamsOrSpectating",
              "customGameService.isTFT",
              function () {
                return (
                  this.get("spectatorSlotsFull") ||
                  (!this.get("customGamesService.isTFT") &&
                    this.get("onlyOnePlayerOnTeams")) ||
                  this.get("customGamesService.preventTeamChanges") ||
                  this.get("customGamesService.isSwitchingTeamsOrSpectating")
                );
              },
            ),
            spectatorSlotsFull: s.Ember.computed(
              "spectators",
              "spectators.@each.summonerId",
              "spectatorSlotLimit",
              function () {
                const e = this.get("spectatorSlotLimit");
                if (!e) return !0;
                const t = this.get("spectators");
                return !t || t.length >= e;
              },
            ),
            currentPlayerIsSpectator: s.Ember.computed.alias(
              "customGamesService.currentPlayerIsSpectator",
            ),
            currentPlayerIsNotSpectator: s.Ember.computed.not(
              "currentPlayerIsSpectator",
            ),
            currentNumPlayers: s.Ember.computed.alias(
              "customGamesService.currentNumPlayers",
            ),
            onlyOnePlayerOnTeams: s.Ember.computed.equal(
              "currentNumPlayers",
              1,
            ),
            showSpectatorButton: s.Ember.computed.and(
              "currentPlayerIsNotSpectator",
            ),
            spectatorSlotLimit: s.Ember.computed.alias(
              "customGamesService.spectatorSlotLimit",
            ),
            spectators: s.Ember.computed.alias("customGamesService.spectators"),
            hasSpectators: s.Ember.computed.notEmpty("spectatorSummoners"),
            spectatorsCountText: s.Ember.computed(
              "tra.custom_game_spectators_count",
              "spectators",
              "spectatorSlotLimit",
              function () {
                const e = this.get("spectators"),
                  t = this.get("spectatorSlotLimit");
                return this.get("tra.formatString")(
                  "custom_game_spectators_count",
                  { currentNumber: e.length, maxNumber: t },
                );
              },
            ),
            spectateDisabledTooltip: s.Ember.computed(
              "tra.ready",
              "tra.custom_game_spectating_disabled",
              "spectateButtonDisabled",
              function () {
                return this.get("spectatorSlotsFull")
                  ? this.get("tra.custom_game_spectator_slots_full")
                  : this.get("onlyOnePlayerOnTeams")
                    ? this.get("tra.custom_game_spectator_need_players")
                    : this.get("tra.custom_game_spectating_disabled");
              },
            ),
            spectatorsObserver: s.Ember.computed("spectators.[]", function () {
              const e = this.get("spectators"),
                t = e.map((e) =>
                  this.get("summonerService").getSummoner(e.summonerId),
                );
              return (
                Promise.all(t).then((e) => {
                  if (e && e.length > 0) {
                    const t = s.Ember.A();
                    e.forEach((e) => {
                      e && e.summonerId && t.push(e);
                    }),
                      this.set("_spectatorSummoners", s.Ember.A(t));
                  }
                }),
                e
              );
            }),
            spectatorSummoners: s.Ember.computed(
              "spectators.[]",
              "_spectatorSummoners",
              "_spectatorSummoners.[]",
              function () {
                const e = this.get("_spectatorSummoners");
                if (!e) return s.Ember.A();
                const t = s.Ember.A();
                return (
                  this.get("spectators").forEach((n) => {
                    const i = e.findBy("summonerId", n.summonerId);
                    i && t.push(i);
                  }),
                  t
                );
              },
            ),
            actions: {
              currentPlayerToSpectator: function () {
                this.get("customGamesService.isSwitchingTeamsOrSpectating") ||
                  (this.playSound(this._buttonClickSound),
                  this.get("customGamesService").joinSpectators());
              },
            },
          }));
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "DhSYlgio",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\custom-game\\\\spectator-info-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\custom-game\\\\spectator-info-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\custom-game\\\\spectator-info-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","spectator-info-header-wrapper"],["flush-element"],["text","\\n  "],["open-element","span",[]],["static-attr","class","spectator-info-header"],["flush-element"],["text","\\n    "],["append",["unknown",["tra","custom_game_spectators"]],false],["text"," ("],["append",["unknown",["spectatorsCountText"]],false],["text",")\\n  "],["close-element"],["text","\\n"],["block",["if"],[["get",["showSpectatorButton"]]],null,5],["close-element"],["text","\\n\\n"],["open-element","div",[]],["static-attr","class","spectator-info-spectators"],["flush-element"],["text","\\n  "],["open-element","ul",[]],["static-attr","class","spectator-info-spectators-list"],["flush-element"],["text","\\n"],["block",["if"],[["get",["hasSpectators"]]],null,2,0],["text","  "],["close-element"],["text","\\n"],["close-element"],["text","\\n\\n"],["comment"," We need to include spectatorsObserver in the layout or Ember will not fire that computed, for shame. "],["text","\\n"],["open-element","div",[]],["static-attr","style","display: none"],["flush-element"],["append",["unknown",["spectatorsObserver"]],false],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["open-element","li",[]],["static-attr","class","spectator-info-spectators-list-item"],["flush-element"],["text","\\n        "],["open-element","span",[]],["static-attr","class","spectator-info-empty"],["flush-element"],["append",["unknown",["tra","custom_game_no_spectators"]],false],["close-element"],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["append",["helper",["spectator-member"],null,[["spectator"],[["get",["spectator"]]]]],false],["text","\\n"]],"locals":["spectator"]},{"statements":[["block",["each"],[["get",["spectatorSummoners"]]],null,1]],"locals":[]},{"statements":[["text","          "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n            "],["open-element","p",[]],["flush-element"],["text","\\n              "],["append",["unknown",["spectateDisabledTooltip"]],false],["text","\\n            "],["close-element"],["text","\\n          "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["uikit-tooltip"],null,[["tooltipPosition","type"],["top","system"]],3]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","custom-game-spectate-button-wrapper"],["flush-element"],["text","\\n      "],["open-element","lol-uikit-flat-button-secondary",[]],["static-attr","class","custom-game-spectate-button"],["dynamic-attr","disabled",["unknown",["spectateButtonDisabled"]],null],["dynamic-attr","onclick",["helper",["unless"],[["get",["spectateButtonDisabled"]],["helper",["action"],[["get",[null]],"currentPlayerToSpectator"],null]],null],null],["flush-element"],["text","\\n        "],["append",["unknown",["tra","custom_game_spectate"]],false],["text","\\n"],["block",["if"],[["get",["spectateButtonDisabled"]]],null,4],["text","      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i,
          s = n(1),
          o = (i = n(72)) && i.__esModule ? i : { default: i };
        n(190),
          (e.exports = s.Ember.Component.extend(o.default, {
            layout: n(191),
            tagName: "li",
            classNames: ["spectator-info-spectators-list-item"],
            lobbiesService: s.Ember.inject.service("lobbies"),
            chatService: s.Ember.inject.service("chat"),
            customGamesService: s.Ember.inject.service("custom-games"),
            contextMenuManager: s.UIKit.getContextMenuManager(),
            playerNames: s.playerNames,
            spectator: null,
            spectatorId: s.Ember.computed.alias("spectator.summonerId"),
            spectatorPuuid: s.Ember.computed.alias("spectator.puuid"),
            currentPlayer: s.Ember.computed.alias(
              "customGamesService.currentPlayer",
            ),
            currentPlayerId: s.Ember.computed.alias("currentPlayer.summonerId"),
            currentPlayerIsLeader: s.Ember.computed.alias(
              "lobbiesService.isCurrentPlayerPartyLeader",
            ),
            showManagementTools: s.Ember.computed.and(
              "currentPlayerIsLeader",
              "spectator",
            ),
            spectators: s.Ember.computed.alias("customGamesService.spectators"),
            isLeader: s.Ember.computed(
              "lobbiesService.currentPartyLeader.summonerId",
              "spectatorId",
              function () {
                return (
                  this.get("spectatorId") ===
                  this.get("lobbiesService.currentPartyLeader.summonerId")
                );
              },
            ),
            canInviteOthers: s.Ember.computed(
              "spectators.[]",
              "spectators.@each.allowedInviteOthers",
              "spectatorId",
              function () {
                const e = this.get("spectators").find(
                  (e) => e.summonerId === this.get("spectatorId"),
                );
                return !!e && e.allowedInviteOthers;
              },
            ),
            contextMenuModel: s.Ember.computed(
              "showManagementTools",
              "currentPlayerId",
              "spectatorId",
              "chatService.friends.[]",
              "canInviteOthers",
              "tra.ready",
              "tra.context_menu_kick",
              "tra.context_menu_friend_request",
              "tra.context_menu_revoke_invite_privilege",
              "tra.context_menu_grant_invite_privilege",
              function () {
                return this.get("currentPlayerId") === this.get("spectatorId")
                  ? null
                  : [
                      {
                        action: function () {
                          this.send("kick");
                        },
                        class: "kick",
                        target: this,
                        label: this.get("tra.context_menu_kick"),
                        hidden: !this.get("showManagementTools"),
                      },
                      {
                        action: function () {
                          this.send("sendFriendRequest");
                        },
                        class: "add-friend",
                        target: this,
                        label: this.get("tra.context_menu_friend_request"),
                        hidden: this.get("chatService").isFriend(
                          this.get("spectatorId"),
                        ),
                      },
                      {
                        action: function () {
                          this.send("toggleInvitePrivilege");
                        },
                        class: this.get("canInviteOthers")
                          ? "revoke-invite"
                          : "grant-invite",
                        target: this,
                        label: this.get("canInviteOthers")
                          ? this.get("tra.context_menu_revoke_invite_privilege")
                          : this.get("tra.context_menu_grant_invite_privilege"),
                        hidden: !this.get("showManagementTools"),
                      },
                    ];
              },
            ),
            contextMenu: function (e) {
              this.contextMenuManager.setMenuItems(
                this.get("contextMenuModel"),
              ),
                this.contextMenuManager.openAtEvent(e);
            },
            actions: {
              sendFriendRequest: function () {
                if (this.get("spectator")) {
                  const e = {
                    direction: "out",
                    puuid: this.get("spectatorPuuid"),
                  };
                  this.get("chatService").sendFriendRequest(e);
                }
              },
              kick: async function () {
                if (!this.get("spectator")) return;
                const { playerName: e } = await this.get(
                    "playerNames",
                  ).getDisplayNameByPUUID(this.get("spectatorPuuid")),
                  t = this.get("tra").formatString(
                    "lobby_kick_confirmation_text",
                    { summonerName: e },
                  ),
                  n = this.$(
                    `<lol-uikit-content-block type="dialog-small">\n          <p>${t}</p>\n        </<lol-uikit-content-block>`,
                  );
                if (this.get("currentPlayerIsLeader")) {
                  this.showModal({
                    type: "DialogConfirm",
                    data: {
                      contents: n,
                      acceptText: this.get("tra.parties_button_kick"),
                      declineText: this.get("tra.parties_button_cancel"),
                      onAccept: () => {
                        this.get("lobbiesService").removePlayerFromParty(
                          this.get("spectator.summonerId"),
                        );
                      },
                    },
                  }).domNode.classList.add("parties-kick-player-modal");
                }
              },
              toggleInvitePrivilege: function () {
                if (this.get("showManagementTools")) {
                  const e = this.get("canInviteOthers")
                    ? "revoke-invite"
                    : "grant-invite";
                  this.get("lobbiesService").sendInvitePrivilegeAction(
                    this.get("spectatorId"),
                    e,
                  );
                }
              },
            },
          }));
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "T9NVNmi7",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\custom-game\\\\spectator-info-component\\\\spectator-member-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\custom-game\\\\spectator-info-component\\\\spectator-member-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\custom-game\\\\spectator-info-component\\\\spectator-member-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","spectator-info-container"],["flush-element"],["text","\\n  "],["open-element","span",[]],["static-attr","class","spectator-info-name"],["flush-element"],["text","\\n    "],["append",["helper",["player-name"],null,[["format","gameName","tagLine","summonerName"],["tooltip",["get",["spectator","gameName"]],["get",["spectator","tagLine"]],["get",["spectator","summonerName"]]]]],false],["text","\\n  "],["close-element"],["text","\\n  "],["open-element","span",[]],["flush-element"],["text","\\n"],["block",["if"],[["get",["isLeader"]]],null,1],["text","  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","          "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n            "],["open-element","p",[]],["flush-element"],["text","\\n              "],["append",["unknown",["tra","custom_game_is_leader"]],false],["text","\\n            "],["close-element"],["text","\\n          "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","custom-leader-icon"],["flush-element"],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipPosition","type"],["top","system"]],0],["text","      "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1),
          s = n(193);
        n(194),
          (e.exports = i.Ember.Component.extend({
            classNames: ["custom-game-teams"],
            layout: n(195),
            customGameService: i.Ember.inject.service("custom-games"),
            playbook: i.Ember.inject.service("tft-playbook"),
            teamSize: i.Ember.computed.alias("customGameService.teamSize"),
            currentPlayer: i.Ember.computed.alias(
              "customGameService.currentPlayer",
            ),
            currentPlayersTeam: i.Ember.computed.alias(
              "customGameService.currentPlayersTeam",
            ),
            riotscriptInCustoms: i.Ember.computed.alias(
              "customGameService.riotscriptInCustoms",
            ),
            init() {
              this._super(...arguments),
                this.set("playbook", i.Ember.inject.service("tft-playbook")),
                this.set(
                  "playbookEnabled",
                  i.Ember.computed.alias("playbook.playbookEnabled"),
                );
            },
            team100: i.Ember.computed(
              "customGameService.team100",
              "customGameService.team100.[]",
              "customGameService.team100.@each.id",
              "customGameService.team100.@each.isBotLoading",
              "teamSize",
              function () {
                const e = this.get("customGameService.team100");
                return this._addTeamMembers(e);
              },
            ),
            team200: i.Ember.computed(
              "customGameService.team200",
              "customGameService.team200.[]",
              "customGameService.team200.@each.id",
              "customGameService.team200.@each.isBotLoading",
              "teamSize",
              function () {
                const e = this.get("customGameService.team200");
                return this._addTeamMembers(e);
              },
            ),
            availableBotsForTeam100: i.Ember.computed(
              "customGameService.availableBotDetails",
              "customGameService.availableBotDetails.[]",
              "customGameService.team100",
              "customGameService.team100.[]",
              "customGameService.team100.@each.id",
              function () {
                return this._getAvailableBotsForTeam(
                  this.get("customGameService.team100"),
                );
              },
            ),
            availableBotsForTeam200: i.Ember.computed(
              "customGameService.availableBotDetails",
              "customGameService.availableBotDetails.[]",
              "customGameService.team200",
              "customGameService.team200.[]",
              "customGameService.team200.@each.id",
              function () {
                return this._getAvailableBotsForTeam(
                  this.get("customGameService.team200"),
                );
              },
            ),
            hasDuplicateChampions: i.Ember.computed(
              "team100.[]",
              "team200.[]",
              "riotscriptInCustoms",
              function () {
                const e = this.get("team100"),
                  t = this.get("team200"),
                  n = this.get("riotscriptInCustoms"),
                  {
                    botIds: i,
                    hasDuplicates: o,
                    duplicateBotIds: a,
                  } = (0, s.getBotIdsAndCheckDuplicates)(e),
                  {
                    botIds: r,
                    hasDuplicates: l,
                    duplicateBotIds: c,
                  } = (0, s.getBotIdsAndCheckDuplicates)(t);
                return (
                  this.set("team100DupBots", a),
                  this.set("team200DupBots", c),
                  n && (o || l)
                );
              },
            ),
            _getAvailableBotsForTeam: function (e) {
              const t = this.get("customGameService.availableBotDetails");
              if (!t) return i.Ember.A();
              const n = t.map((e) => ({ ...e }));
              return i.Ember.A(n);
            },
            _addTeamMembers: function (e) {
              const t = this.get("teamSize"),
                n = i.Ember.A();
              return this._addPlayers(n, e), this._addPlaceholders(n, t), n;
            },
            _addPlaceholders: function (e, t) {
              if (e.length >= t) return;
              let n = !0;
              for (let s = 0; s < t; s++)
                if (!e[s]) {
                  const t = i.Ember.Object.create({
                    isPlaceholder: !0,
                    isFirstPlaceholder: n,
                  });
                  (e[s] = t), (n = !1);
                }
            },
            _addPlayers: function (e, t) {
              t &&
                t.length > 0 &&
                t.forEach(function (t) {
                  e.push(t);
                });
            },
          }));
      },
      (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.getBotIdsAndCheckDuplicates = t.createPositionObject = void 0);
        t.createPositionObject = (e, t, n, i) => ({
          positionName: e,
          selected: e === i ? "selected" : null,
          positionIcon: `/fe/lol-parties/icon-position-button-${e.toLowerCase()}.png`,
          recFirst: n && 0 === t,
          nonRecFirst: !n && 0 === t,
          translationString: `custom_game_position_${e.toLowerCase()}`,
        });
        t.getBotIdsAndCheckDuplicates = (e) => {
          const t = e.reduce(
              (e, t) => (
                (t.botChampionId || t.botId) &&
                  e.push(t.botChampionId || t.botId),
                e
              ),
              [],
            ),
            n = [...new Set(t)],
            i = t.length !== n.length,
            s = {};
          for (const e of t) s[e] = (s[e] || 0) + 1;
          return {
            botIds: t,
            hasDuplicates: i,
            duplicateBotIds: n.filter((e) => s[e] > 1),
          };
        };
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "E3W/UQsN",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\custom-game\\\\custom-teams-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\custom-game\\\\custom-teams-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\custom-game\\\\custom-teams-component\\\\index.js\\" "],["text","\\n"],["block",["unless"],[["get",["isTFT"]]],null,6,1]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["append",["helper",["custom-team-member"],null,[["id","member","currentPlayersTeam","team","availableBotsForTeam","isTFT"],[["get",["team100Member","summonerId"]],["get",["team100Member"]],["get",["currentPlayersTeam"]],1,["get",["availableBotsForTeam100"]],["get",["isTFT"]]]]],false],["text","\\n"]],"locals":["team100Member"]},{"statements":[["open-element","div",[]],["static-attr","class","custom-game-team custom-game-team-tft"],["flush-element"],["text","\\n  "],["open-element","ul",[]],["static-attr","class","custom-game-team-members"],["flush-element"],["text","\\n"],["block",["each"],[["get",["team100"]]],null,0],["text","  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","lol-uikit-content-block",[]],["static-attr","class","custom-game-team-warning-tooltip"],["flush-element"],["text","\\n          "],["open-element","p",[]],["flush-element"],["text","\\n            "],["append",["unknown",["tra","custom_game_duplicate_champion_warning_tooltip"]],false],["text","\\n          "],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","custom-game-team-warning-container"],["flush-element"],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipPosition","type"],["top","system"]],2],["text","      "],["open-element","div",[]],["static-attr","class","custom-game-team-warning"],["flush-element"],["text","\\n        "],["open-element","img",[]],["static-attr","class","custom-game-team-warning-icon"],["static-attr","src","/fe/lol-parties/custom-team-warning.png"],["flush-element"],["close-element"],["text","\\n        "],["append",["unknown",["tra","custom_game_duplicate_champion_warning"]],false],["text","\\n      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["append",["helper",["custom-team-member"],null,[["key","id","member","currentPlayersTeam","team","availableBotsForTeam","isTFT","dupBots"],[["get",["team200Member","botId"]],["get",["team200Member","summonerId"]],["get",["team200Member"]],["get",["currentPlayersTeam"]],2,["get",["availableBotsForTeam200"]],["get",["isTFT"]],["get",["team200DupBots"]]]]],false],["text","\\n"]],"locals":["team200Member"]},{"statements":[["text","          "],["append",["helper",["custom-team-member"],null,[["key","id","member","currentPlayersTeam","team","availableBotsForTeam","isTFT","dupBots"],[["get",["team100Member","botId"]],["get",["team100Member","summonerId"]],["get",["team100Member"]],["get",["currentPlayersTeam"]],1,["get",["availableBotsForTeam100"]],["get",["isTFT"]],["get",["team100DupBots"]]]]],false],["text","\\n"]],"locals":["team100Member"]},{"statements":[["open-element","div",[]],["static-attr","class","custom-game-team-container"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","custom-game-team-selection-container"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","custom-game-team custom-game-team-one"],["flush-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","team-header"],["flush-element"],["append",["unknown",["tra","custom_game_team_one"]],false],["close-element"],["text","\\n      "],["open-element","ul",[]],["static-attr","class","custom-game-team-members"],["flush-element"],["text","\\n"],["block",["each"],[["get",["team100"]]],null,5],["text","      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","custom-game-team custom-game-team-two"],["flush-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","team-header"],["flush-element"],["append",["unknown",["tra","custom_game_team_two"]],false],["close-element"],["text","\\n      "],["open-element","ul",[]],["static-attr","class","custom-game-team-members"],["flush-element"],["text","\\n"],["block",["each"],[["get",["team200"]]],null,4],["text","      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n"],["block",["if"],[["get",["hasDuplicateChampions"]]],null,3],["close-element"],["text","\\n\\n"]],"locals":[]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1),
          s = c(n(72)),
          o = c(n(19)),
          a = c(n(197));
        n(198);
        var r = n(57),
          l = n(193);
        function c(e) {
          return e && e.__esModule ? e : { default: e };
        }
        const { RunMixin: m } = i.EmberAddons.EmberLifeline,
          u = (0, i.emberDataBinding)({
            Ember: i.Ember,
            websocket: (0, i.getProvider)().getSocket(),
            logPrefix: "parties:player-banner:component",
            basePaths: { gameData: "/lol-game-data", ranked: "/lol-ranked" },
            boundProperties: {
              _botChampionDetails: {
                api: "gameData",
                path: "/assets/v1/champions/{{botChampionId}}.json",
              },
              _rankedData: {
                api: "ranked",
                path: "/v1/ranked-stats/{{member.puuid}}",
              },
              _profileIcons: {
                api: "gameData",
                path: "/assets/v1/summoner-icons.json",
              },
            },
          });
        e.exports = i.Ember.Component.extend(
          m,
          u,
          s.default,
          o.default,
          a.default,
          {
            playerNames: i.playerNames,
            tagName: "li",
            classNames: ["custom-game-team-member"],
            classNameBindings: [
              "isCurrentPlayer:is-current-custom-player",
              "canHover:is-other-player",
              "currentPlayerIsLeader:can-moderate",
              "isLeader:is-custom-leader",
              "isFriend:is-custom-friend:is-not-custom-friend",
              "isBot:is-bot",
            ],
            attributeBindings: [
              "memberType:data-custom-member-type",
              "id:data-custom-member-summoner-id",
              "botChampionId:data-bot-champion",
            ],
            layout: n(199),
            id: null,
            member: null,
            currentPlayersTeam: null,
            team: null,
            availableBotsForTeam: null,
            inviteDisabled: !1,
            _friendRequestSent: !1,
            _buttonClickSound:
              "/fe/lol-parties/sfx-lobby-button-banner-click.ogg",
            _joinLocked: !1,
            joinDisabled: i.Ember.computed.or(
              "_joinLocked",
              "customGameService.preventTeamChanges",
              "customGameService.isSwitchingTeamsOrSpectating",
            ),
            _isUpdatingBot: !1,
            _isBotLoading: i.Ember.computed("id", "member.isBot", function () {
              return this.get("member.isBot") && -1 === this.get("id");
            }),
            updatingBotDisabled: i.Ember.computed.or(
              "_isUpdatingBot",
              "_isBotLoading",
              "customGameService.preventTeamChanges",
            ),
            customGameService: i.Ember.inject.service("custom-games"),
            chatService: i.Ember.inject.service("chat"),
            lobbiesService: i.Ember.inject.service("lobbies"),
            tftCosmeticsService: i.Ember.inject.service("tft-cosmetics"),
            playbook: i.Ember.inject.service("tft-playbook"),
            puuid: i.Ember.computed.alias("member.puuid"),
            summonerName: i.Ember.computed.alias("member.summonerName"),
            summonerLevel: i.Ember.computed.alias("member.summonerLevel"),
            accountId: i.Ember.computed.alias("member.accountId"),
            internalName: i.Ember.computed.alias("member.summonerInternalName"),
            botId: i.Ember.computed.alias("member.botId"),
            rankedWins: i.Ember.computed.alias("_rankedStats.wins"),
            rankedTier: i.Ember.computed.alias("_rankedStats.tier"),
            rankedDivision: i.Ember.computed.alias("_rankedStats.division"),
            currentPlayer: i.Ember.computed.alias(
              "customGameService.currentPlayer",
            ),
            isPlaybookEnabled: i.Ember.computed.alias(
              "playbook.playbookEnabled",
            ),
            disableDropDownChanges: i.Ember.computed.or(
              "updatingBotDisabled",
              "currentPlayerIsNotLeader",
            ),
            currentPlayerIsLeader: i.Ember.computed.alias(
              "currentPlayer.isLeader",
            ),
            currentPlayerIsNotLeader: i.Ember.computed.not(
              "currentPlayerIsLeader",
            ),
            isNotCurrentPlayersTeam: i.Ember.computed.not(
              "isCurrentPlayersTeam",
            ),
            isNotCurrentPlayer: i.Ember.computed.not("isCurrentPlayer"),
            isBotOrPlaceholder: i.Ember.computed.or("isBot", "isPlaceholder"),
            isPlayer: i.Ember.computed.not("isBotOrPlaceholder"),
            isPlaceholder: i.Ember.computed.alias("member.isPlaceholder"),
            isFirstPlaceholder: i.Ember.computed.alias(
              "member.isFirstPlaceholder",
            ),
            isRanked: i.Ember.computed.notEmpty("_rankedStats"),
            isLeader: i.Ember.computed.alias("member.isLeader"),
            hasInvitePrivileges: i.Ember.computed.alias(
              "member.allowedInviteOthers",
            ),
            canHover: i.Ember.computed.and("isPlayer", "isNotCurrentPlayer"),
            isNotFriend: i.Ember.computed.not("isFriend"),
            isBot: i.Ember.computed.alias("member.isBot"),
            botChampionId: i.Ember.computed.alias("member.botChampionId"),
            botDifficulty: i.Ember.computed.alias("member.botDifficulty"),
            botPosition: i.Ember.computed.alias("member.botPosition"),
            botsButtonDisabled: i.Ember.computed.or(
              "customGameService.customBotsDisabled",
              "customGameService.preventTeamChanges",
              "_availableBotsForCurrentTeamEmpty",
            ),
            _availableBotsForCurrentTeamEmpty: i.Ember.computed.empty(
              "availableBotsForCurrentTeam",
            ),
            riotscriptInCustoms: i.Ember.computed.alias(
              "customGameService.riotscriptInCustoms",
            ),
            currentBot: i.Ember.computed(
              "botChampionId",
              "botDifficulty",
              "customGameService.availableBotDetails",
              "customGameService.availableBotDetails.[]",
              function () {
                this.set("_isUpdatingBot", !1);
                const e = this.get("customGameService.availableBotDetails");
                return e ? e.findBy("id", this.get("botChampionId")) : null;
              },
            ),
            isDuplicatedChampion: i.Ember.computed(
              "currentBot",
              "dupBots",
              function () {
                const e = this.get("currentBot"),
                  t = this.get("dupBots");
                if (!e || !t) return !1;
                const n = e.botChampionId || e.botId || e.id;
                return t.includes(n);
              },
            ),
            currentPositions: i.Ember.computed(
              "botPosition",
              "currentBot",
              function () {
                let e = this.get("botPosition");
                const t = this.get("currentBot"),
                  n = t ? t.recommendedPositions : [],
                  i = [],
                  s = Object.values(r.CUSTOM_GAME_BOT_POSITIONS).filter(
                    (e) => !n.includes(e),
                  );
                return (
                  (e && "NONE" !== e) ||
                    ((e = n[0] || s[0] || r.CUSTOM_GAME_BOT_POSITIONS.TOP),
                    this.set("botPosition", e)),
                  n.forEach((t, n) => {
                    i.push((0, l.createPositionObject)(t, n, !0, e));
                  }),
                  s.forEach((t, n) => {
                    i.push((0, l.createPositionObject)(t, n, !1, e));
                  }),
                  i
                );
              },
            ),
            currentBotDifficulties: i.Ember.computed(
              "botDifficulty",
              "currentBot",
              "currentBot.botDifficulties",
              "currentBot.botDifficulties.[]",
              function () {
                const e = this.get("currentBot.botDifficulties");
                return e
                  ? (e.forEach((e) => {
                      e.difficulty === this.get("botDifficulty")
                        ? i.Ember.set(e, "selected", "selected")
                        : i.Ember.set(e, "selected", null);
                    }),
                    e)
                  : i.Ember.A();
              },
            ),
            availableBotsForCurrentTeam: i.Ember.computed(
              "currentBot",
              "availableBotsForTeam",
              "availableBotsForTeam.[]",
              function () {
                const e = i.Ember.A(),
                  t = this.get("currentBot");
                return (
                  t &&
                    (i.Ember.set(t, "selected", "selected"), e.pushObject(t)),
                  this.get("availableBotsForTeam").forEach((n) => {
                    i.Ember.set(n, "selected", null),
                      t ? n.id !== t.id && e.pushObject(n) : e.pushObject(n);
                  }),
                  e.sortBy("name")
                );
              },
            ),
            memberType: i.Ember.computed(
              "isPlayer",
              "isBot",
              "isPlaceholder",
              function () {
                let e = "";
                return (
                  this.get("isPlayer")
                    ? (e = "player")
                    : this.get("isBot")
                      ? (e = "bot")
                      : this.get("isPlaceholder") && (e = "placeholder"),
                  e
                );
              },
            ),
            isCurrentPlayer: i.Ember.computed(
              "currentPlayer",
              "id",
              function () {
                return this.get("currentPlayer.summonerId") === this.get("id");
              },
            ),
            isCurrentPlayersTeam: i.Ember.computed(
              "team",
              "currentPlayersTeam",
              function () {
                const e = this.get("currentPlayersTeam");
                return null !== e && e === this.get("team");
              },
            ),
            isFriend: i.Ember.computed(
              "chatService.friends.[]",
              "id",
              function () {
                const e = this.get("chatService").get("friends");
                return (
                  !!(e && e.length > 0) && e.isAny("summonerId", this.get("id"))
                );
              },
            ),
            rankedTierAndDivisionText: i.Ember.computed(
              "rankedTier",
              "rankedDivision",
              function () {
                const e = this.get("rankedTier"),
                  t = this.get("rankedDivision");
                return i.LeagueTierNames.getFullTierDivisionName(e, t);
              },
            ),
            botName: i.Ember.computed.alias("_botChampionDetails.name"),
            botProfileIconUrl: i.Ember.computed.alias(
              "_botChampionDetails.squarePortraitPath",
            ),
            botDifficultyString: i.Ember.computed("botDifficulty", function () {
              return this.get("customGameService").getDifficultyDisplayName(
                this.get("botDifficulty"),
              );
            }),
            hasNotSuggestedPosition: i.Ember.computed(
              "currentBot",
              "botPosition",
              function () {
                const e = this.get("currentBot"),
                  t = this.get("botPosition");
                return !!e && !e.recommendedPositions.includes(t);
              },
            ),
            availableTFTCosmeticTypes: i.Ember.computed(function () {
              return ["companions", "tft_map_skins", "tft_damage_skins"];
            }),
            disableInviteButton: function () {
              this.set("inviteDisabled", !0);
            },
            enableInviteButton: function (e = 0) {
              this.runTask(() => this.set("inviteDisabled", !1), e);
            },
            companionIconUrl: i.Ember.computed("companionIconId", function () {
              return this.get("tftCosmeticsService.companionIconUrls")[
                this.get("companionIconId")
              ];
            }),
            _rankedStats: i.Ember.computed(
              "_rankedData.highestRankedEntrySR",
              function () {
                return this.get("_rankedData.highestRankedEntrySR") || null;
              },
            ),
            actions: {
              joinOtherTeam: function () {
                if (this.get("joinDisabled")) return;
                this.set("_joinLocked", !0),
                  this.playSound(this._buttonClickSound);
                const e = this.get("team");
                e && this.get("customGameService").switchTeams(e);
              },
              addBot: function () {
                const e = this.get("availableBotsForCurrentTeam");
                if (
                  this.get("updatingBotDisabled") ||
                  this.get("botsButtonDisabled") ||
                  e.length < 1
                )
                  return;
                this.playSound(this._buttonClickSound);
                const t = Math.floor(Math.random() * e.length),
                  n = e.objectAt(t);
                let i;
                (i = this.get("botPosition")
                  ? this.get("botPosition")
                  : n.recommendedPositions
                    ? n.recommendedPositions[0]
                    : r.CUSTOM_GAME_BOT_POSITIONS.TOP),
                  this.get("customGameService").addBot(
                    this.get("team"),
                    n.id,
                    n.botDifficulties[0].difficulty,
                    i,
                  );
              },
              changeBotChampion: function (e) {
                e &&
                  e.id !== this.get("botChampionId") &&
                  !this.get("updatingBotDisabled") &&
                  (this.set("_isUpdatingBot", !0),
                  this.get("customGameService").changeBot({
                    botId: this.get("botId"),
                    team: this.get("team"),
                    championId: e.id,
                    botDifficulty: e.botDifficulties[0].difficulty,
                    botPosition: this.get("botPosition"),
                    botToDeletePosition: this.get("botPosition"),
                  }));
              },
              changeBotDifficulty: function (e) {
                this.get("updatingBotDisabled") ||
                  e === this.get("botDifficulty") ||
                  this.get("_isUpdatingBot") ||
                  (this.set("_isUpdatingBot", !0),
                  this.get("customGameService").changeBot({
                    botId: this.get("botId"),
                    team: this.get("team"),
                    championId: this.get("botChampionId"),
                    botDifficulty: e,
                    botPosition: this.get("botPosition"),
                    botToDeletePosition: this.get("botPosition"),
                  }));
              },
              changeBotPosition: function (e) {
                this.get("updatingBotDisabled") ||
                  e === this.get("botPosition") ||
                  this.get("_isUpdatingBot") ||
                  (this.set("_isUpdatingBot", !0),
                  this.get("customGameService").changeBot({
                    botId: this.get("botId"),
                    team: this.get("team"),
                    championId: this.get("botChampionId"),
                    botDifficulty: this.get("botDifficulty"),
                    botPosition: e,
                    botToDeletePosition: this.get("botPosition"),
                  }));
              },
              toggleInvite: function () {
                this.playSound(this._buttonClickSound);
                const e = this.get("member");
                if (
                  this.get("currentPlayerIsLeader") &&
                  !this.get("inviteDisabled")
                ) {
                  this.disableInviteButton();
                  const t = e.allowedInviteOthers
                    ? "revoke-invite"
                    : "grant-invite";
                  this.get("lobbiesService").sendInvitePrivilegeAction(
                    this.get("id"),
                    t,
                  ),
                    this.enableInviteButton(1e3);
                }
              },
              addFriend: function () {
                if (
                  (this.playSound(this._buttonClickSound), this.get("member"))
                ) {
                  const e = { direction: "out", puuid: this.get("puuid") };
                  this.get("chatService").sendFriendRequest(e),
                    this.set("_friendRequestSent", !0);
                }
              },
              kick: async function () {
                if (this.get("updatingBotDisabled")) return;
                this.playSound(this._buttonClickSound);
                const { playerName: e } = await this.get(
                    "playerNames",
                  ).getDisplayNameByPUUID(this.get("puuid")),
                  t = this.get("tra").formatString(
                    "lobby_kick_confirmation_text",
                    { summonerName: e },
                  ),
                  n = this.$(
                    `<lol-uikit-content-block type="dialog-small">\n          <p>${t}</p>\n        </lol-uikit-content-block>`,
                  );
                this.get("currentPlayerIsLeader") &&
                  this.showModal({
                    type: "DialogConfirm",
                    data: {
                      contents: n,
                      acceptText: this.get("tra.parties_button_kick"),
                      declineText: this.get("tra.parties_button_cancel"),
                      onAccept: () => {
                        this.get("lobbiesService").removePlayerFromParty(
                          this.get("id"),
                        );
                      },
                    },
                  });
              },
              removeBot: function () {
                this.get("updatingBotDisabled") ||
                  (this.playSound(this._buttonClickSound),
                  this.get("customGameService").removeBot(this.get("botId")));
              },
              openLoadoutsModal: function () {
                this.set("showLoadoutsModal", !0);
              },
              closeLoadoutsModal: function () {
                this.set("showLoadoutsModal", !1);
              },
            },
          },
        );
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        e.exports = i.Ember.Mixin.create({
          chatParticipants: i.Ember.computed.alias(
            "lobbiesService.chatParticipantsObserver",
          ),
          myChatParticipant: i.Ember.computed(
            "chatParticipants.[]",
            "chatParticipants.@each.id",
            "chatParticipants.@each.availability",
            "chatParticipants.@each.icon",
            "chatParticipants.@each.lol.companionId",
            function () {
              const e = this.get("chatParticipants");
              return e
                ? e.findBy("summonerId", this.get("member.summonerId"))
                : null;
            },
          ),
          _chatIcon: i.Ember.computed.alias("myChatParticipant.icon"),
          _chatAvailability: i.Ember.computed.alias(
            "myChatParticipant.availability",
          ),
          profileIconId: i.Ember.computed(
            "member.summonerIconId",
            "_chatIcon",
            function () {
              const e = this.get("_chatIcon");
              return Number.isInteger(e)
                ? e
                : this.get("member.summonerIconId");
            },
          ),
          companionIconId: i.Ember.computed(
            "chatParticipants",
            "lobbiesService.me.lol.companionId",
            "myChatParticipant.lol.companionId",
            function () {
              const e = this.get("chatParticipants");
              return Number(
                e
                  ? this.get("myChatParticipant.lol.companionId")
                  : this.get("lobbiesService.me.lol.companionId"),
              );
            },
          ),
          mapSkinIconId: i.Ember.computed(
            "chatParticipants",
            "lobbiesService.me.lol.mapSkinId",
            "myChatParticipant.lol.mapSkinId",
            function () {
              const e = this.get("chatParticipants");
              return Number(
                e
                  ? this.get("myChatParticipant.lol.mapSkinId")
                  : this.get("lobbiesService.me.lol.mapSkinId"),
              );
            },
          ),
          damageSkinIconId: i.Ember.computed(
            "chatParticipants",
            "lobbiesService.me.lol.damageSkinId",
            "myChatParticipant.lol.damageSkinId",
            function () {
              const e = this.get("chatParticipants");
              return Number(
                e
                  ? this.get("myChatParticipant.lol.damageSkinId")
                  : this.get("lobbiesService.me.lol.damageSkinId"),
              );
            },
          ),
          chatIconOverride: i.Ember.computed(
            "myChatParticipant.lol.iconOverride",
            function () {
              return this.get("myChatParticipant.lol.iconOverride");
            },
          ),
          profileIconUrl: i.Ember.computed(
            "profileIconId",
            "_profileIcons",
            function () {
              const e = "src/images/lobby/player-object-ring-obfuscated.png",
                t = this.get("_profileIcons"),
                n = this.get("profileIconId");
              if (!t || !Number.isInteger(n)) return e;
              for (const e of t) if (e.id === n) return e.imagePath;
              return e;
            },
          ),
        });
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "hAahTJoZ",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\custom-game\\\\custom-teams-component\\\\custom-team-member-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\custom-game\\\\custom-teams-component\\\\custom-team-member-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\custom-game\\\\custom-teams-component\\\\custom-team-member-component\\\\index.js\\" "],["text","\\n"],["comment"," PLACEHOLDER MEMBER "],["text","\\n"],["block",["if"],[["get",["isPlaceholder"]]],null,38],["text","\\n"],["comment"," PLAYER MEMBER "],["text","\\n"],["block",["if"],[["get",["isPlayer"]]],null,32],["text","\\n"],["comment"," BOTS "],["text","\\n"],["block",["if"],[["get",["isBot"]]],null,9]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","              "],["open-element","lol-uikit-dropdown-option",[]],["static-attr","slot","lol-uikit-dropdown-option"],["dynamic-attr","selected",["unknown",["botDifficulty","selected"]],null],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"changeBotDifficulty",["get",["botDifficulty","difficulty"]]],[["on"],["click"]]],null],["flush-element"],["text","\\n                "],["append",["unknown",["botDifficulty","difficultyDisplayName"]],false],["text","\\n              "],["close-element"],["text","\\n"]],"locals":["botDifficulty"]},{"statements":[["text","                "],["open-element","div",[]],["static-attr","class","custom-member-position-header"],["flush-element"],["text","\\n                  "],["append",["unknown",["tra","custom_game_other_roles_header"]],false],["text","\\n                "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","                "],["open-element","div",[]],["static-attr","class","custom-member-position-header"],["flush-element"],["text","\\n                  "],["append",["unknown",["tra","custom_game_recommended_position_header"]],false],["text","\\n                "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","            "],["open-element","lol-uikit-dropdown-option",[]],["static-attr","slot","lol-uikit-dropdown-option"],["static-attr","class","custom-member-position-dropdown-option"],["dynamic-attr","selected",["unknown",["position","selected"]],null],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"changeBotPosition",["get",["position","positionName"]]],[["on"],["click"]]],null],["flush-element"],["text","\\n"],["block",["if"],[["get",["position","recFirst"]]],null,2],["block",["if"],[["get",["position","nonRecFirst"]]],null,1],["text","              "],["open-element","div",[]],["static-attr","class","custom-member-position-option"],["flush-element"],["text","\\n                "],["open-element","img",[]],["dynamic-attr","src",["unknown",["position","positionIcon"]],null],["static-attr","class","custom-team-member-position-image"],["flush-element"],["close-element"],["text","\\n                "],["open-element","div",[]],["static-attr","class","custom-team-member-position-text"],["flush-element"],["append",["helper",["get"],[["get",["tra"]],["get",["position","translationString"]]],null],false],["close-element"],["text","\\n              "],["close-element"],["text","\\n            "],["close-element"],["text","\\n"]],"locals":["position","index"]},{"statements":[["text","              "],["open-element","lol-uikit-content-block",[]],["static-attr","class","custom-member-position-warning-tooltip"],["flush-element"],["text","\\n                "],["open-element","p",[]],["flush-element"],["text","\\n                  "],["append",["unknown",["tra","custom_game_non_suggested_role_warning_tooltip"]],false],["text","\\n                "],["close-element"],["text","\\n              "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["open-element","div",[]],["flush-element"],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipPosition","type"],["top","system"]],4],["text","            "],["open-element","img",[]],["static-attr","class","custom-member-position-warning"],["static-attr","src","/fe/lol-parties/custom-team-position-warning.png"],["flush-element"],["close-element"],["text","\\n          "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["hasNotSuggestedPosition"]]],null,5],["text","        "],["open-element","lol-uikit-framed-dropdown",[]],["static-attr","stylablecontent",""],["static-attr","class","custom-member-position"],["dynamic-attr","disabled",["unknown",["disableDropDownChanges"]],null],["flush-element"],["text","\\n"],["block",["each"],[["get",["currentPositions"]]],null,3],["text","      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","            "],["open-element","lol-uikit-dropdown-option",[]],["static-attr","slot","lol-uikit-dropdown-option"],["static-attr","class","custom-bot-champions-dropdown-option"],["dynamic-attr","selected",["unknown",["availableBot","selected"]],null],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"changeBotChampion",["get",["availableBot"]]],[["on"],["click"]]],null],["flush-element"],["text","\\n                "],["open-element","div",[]],["static-attr","class","custom-bot-champions-dropdown-option-content"],["flush-element"],["text","\\n                  "],["open-element","div",[]],["static-attr","class","custom-member-icon ui-dropdown-option-only"],["flush-element"],["text","\\n                    "],["open-element","div",[]],["static-attr","class","custom-member-bot-icon"],["flush-element"],["text","\\n                      "],["open-element","img",[]],["static-attr","class","custom-member-bot-icon-img"],["dynamic-attr","src",["concat",[["unknown",["availableBot","botIconUrl"]]]]],["flush-element"],["close-element"],["text","\\n                      "],["open-element","div",[]],["static-attr","class","ring"],["flush-element"],["close-element"],["text","\\n                    "],["close-element"],["text","\\n                  "],["close-element"],["text","\\n                  "],["open-element","div",[]],["static-attr","class","custom-bot-champion-name"],["flush-element"],["text","\\n                    "],["append",["unknown",["availableBot","name"]],false],["text","\\n                  "],["close-element"],["text","\\n                "],["close-element"],["text","\\n            "],["close-element"],["text","\\n"]],"locals":["availableBot"]},{"statements":[["text","            "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n              "],["open-element","p",[]],["flush-element"],["text","\\n                "],["append",["unknown",["tra","custom_game_bot_remove"]],false],["text","\\n              "],["close-element"],["text","\\n            "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","custom-member-info-left"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","custom-info-left-first"],["flush-element"],["text","\\n        "],["open-element","span",[]],["static-attr","class","custom-summoner-level"],["flush-element"],["open-element","hr",[]],["flush-element"],["close-element"],["close-element"],["text","\\n        "],["open-element","span",[]],["static-attr","class","custom-kick-member-button"],["modifier",["action"],[["get",[null]],"removeBot"]],["flush-element"],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipPosition","type"],["top","system"]],8],["text","        "],["close-element"],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","custom-member-icon"],["flush-element"],["text","\\n      "],["comment"," TODO: This is a hacky copy of lol-social-avatar since it does not support champion icons as of this writing, but should just use lol-social-avatar if we can "],["text","\\n      "],["open-element","div",[]],["static-attr","class","custom-member-bot-icon"],["flush-element"],["text","\\n        "],["open-element","img",[]],["static-attr","class","custom-member-bot-icon-img"],["dynamic-attr","data-bot-icon-id",["unknown",["botChampionId"]],null],["dynamic-attr","src",["unknown",["botProfileIconUrl"]],null],["static-attr","draggable","false"],["flush-element"],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","ring"],["flush-element"],["close-element"],["text","\\n      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","lol-uikit-framed-dropdown",[]],["static-attr","direction","downward"],["dynamic-attr","class",["concat",[["helper",["if"],[["get",["isDuplicatedChampion"]],"custom-bot-champion-duplicated-champion"],null]," custom-bot-champions-dropdown"]]],["dynamic-attr","disabled",["unknown",["disableDropDownChanges"]],null],["flush-element"],["text","\\n"],["block",["each"],[["get",["availableBotsForCurrentTeam"]]],null,7],["text","        "],["close-element"],["text","\\n  "],["close-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","custom-member-info-right"],["flush-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","custom-bot-options"],["flush-element"],["text","\\n"],["block",["if"],[["get",["riotscriptInCustoms"]]],null,6],["text","          "],["open-element","lol-uikit-framed-dropdown",[]],["static-attr","class","custom-bot-difficulties-dropdown"],["dynamic-attr","disabled",["unknown",["disableDropDownChanges"]],null],["flush-element"],["text","\\n"],["block",["each"],[["get",["currentBotDifficulties"]]],null,0],["text","          "],["close-element"],["text","\\n      "],["close-element"],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","                      "],["append",["unknown",["tra","context_menu_friend_request"]],false],["text","\\n"]],"locals":[]},{"statements":[["text","                      "],["append",["unknown",["tra","custom_game_friend_request_sent"]],false],["text","\\n"]],"locals":[]},{"statements":[["text","                "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n                  "],["open-element","p",[]],["flush-element"],["text","\\n"],["block",["if"],[["get",["_friendRequestSent"]]],null,11,10],["text","                  "],["close-element"],["text","\\n                "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","custom-add-friend"],["flush-element"],["text","\\n        "],["open-element","button",[]],["static-attr","class","custom-add-friend-button"],["dynamic-attr","disabled",["unknown",["_friendRequestSent"]],null],["modifier",["action"],[["get",[null]],"addFriend"]],["flush-element"],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipPosition","type"],["top","system"]],12],["text","        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","                "],["append",["unknown",["tra","grant_invite_privileges_tooltip"]],false],["text","\\n"]],"locals":[]},{"statements":[["text","                "],["append",["unknown",["tra","revoke_invite_privileges_tooltip"]],false],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n            "],["open-element","p",[]],["flush-element"],["text","\\n"],["block",["if"],[["get",["hasInvitePrivileges"]]],null,15,14],["text","            "],["close-element"],["text","\\n          "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","            "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n              "],["open-element","p",[]],["flush-element"],["text","\\n                "],["append",["unknown",["tra","kick_tooltip"]],false],["text","\\n              "],["close-element"],["text","\\n            "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","span",[]],["static-attr","class","custom-kick-member-button custom-kick-member-button-tft"],["modifier",["action"],[["get",[null]],"kick"]],["flush-element"],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipPosition","type"],["top","system"]],17],["text","        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","            "],["append",["helper",["loadouts-modal-root"],null,[["activeType","setName","types"],["companions","tft",["get",["availableTFTCosmeticTypes"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["block",["uikit-modal"],null,[["show","type","dismissible","dismissibleType","onClose"],[["get",["showLoadoutsModal"]],"DialogAlert",true,"inside",["helper",["action"],[["get",[null]],"closeLoadoutsModal"],null]]],19]],"locals":[]},{"statements":[["text","          "],["append",["helper",["tft-playbook-icon"],null,[["class"],["custom-member-playbook-container"]]],false],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["isPlaybookEnabled"]]],null,21],["text","        "],["open-element","lol-uikit-flat-button-secondary",[]],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"openLoadoutsModal"],null],null],["static-attr","class","custom-loadouts-button"],["flush-element"],["text","\\n          "],["append",["unknown",["tra","custom_game_loadouts_button"]],false],["text","\\n        "],["close-element"],["text","\\n"],["block",["if"],[["get",["showLoadoutsModal"]]],null,20]],"locals":[]},{"statements":[["block",["if"],[["get",["isCurrentPlayer"]]],null,22]],"locals":[]},{"statements":[["text","          "],["comment"," TODO: normal wins here "],["text","\\n          "],["open-element","span",[]],["static-attr","class","custom-member-info-wins"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["open-element","span",[]],["static-attr","class","custom-member-info-ranked-tier"],["flush-element"],["text","\\n            "],["append",["unknown",["rankedTierAndDivisionText"]],false],["text","\\n          "],["close-element"],["text","\\n          "],["open-element","span",[]],["static-attr","class","custom-member-info-ranked-wins"],["flush-element"],["text","\\n            "],["append",["unknown",["tra","custom_game_wins"]],false],["text"," "],["append",["unknown",["rankedWins"]],false],["text"," "],["append",["unknown",["tra","custom_game_ranked"]],false],["text","\\n          "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","custom-member-info-stats"],["flush-element"],["text","\\n"],["block",["if"],[["get",["isRanked"]]],null,25,24],["text","      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n          "],["open-element","p",[]],["flush-element"],["text","\\n            "],["append",["unknown",["tra","custom_game_is_leader"]],false],["text","\\n          "],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","lol-social-avatar-icon",[]],["dynamic-attr","icon-url",["unknown",["companionIconUrl"]],null],["dynamic-attr","availability",["concat",[["unknown",["_chatAvailability"]]]]],["static-attr","show-availability","true"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","lol-social-avatar-icon",[]],["dynamic-attr","icon-id",["unknown",["profileIconId"]],null],["dynamic-attr","availability",["concat",[["unknown",["_chatAvailability"]]]]],["static-attr","show-availability","true"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","            "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n              "],["open-element","p",[]],["flush-element"],["text","\\n                "],["append",["unknown",["tra","kick_tooltip"]],false],["text","\\n              "],["close-element"],["text","\\n            "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","custom-info-left-first"],["flush-element"],["text","\\n        "],["open-element","span",[]],["static-attr","class","custom-summoner-level"],["flush-element"],["append",["unknown",["summonerLevel"]],false],["close-element"],["text","\\n        "],["open-element","span",[]],["static-attr","class","custom-kick-member-button"],["modifier",["action"],[["get",[null]],"kick"]],["flush-element"],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipPosition","type"],["top","system"]],30],["text","        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["comment"," items in this list are hidden and displayed on hover in styles "],["text","\\n  "],["open-element","div",[]],["static-attr","class","custom-member-info-left"],["flush-element"],["text","\\n"],["block",["unless"],[["get",["isTFT"]]],null,31],["text","    "],["open-element","div",[]],["static-attr","class","custom-member-icon"],["flush-element"],["text","\\n"],["block",["unless"],[["get",["isTFT"]]],null,29,28],["text","    "],["close-element"],["text","    \\n    "],["open-element","div",[]],["static-attr","class","custom-leader-icon"],["flush-element"],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipPosition","type"],["top","system"]],27],["text","    "],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","custom-member-name"],["flush-element"],["text","\\n      "],["append",["helper",["player-name"],null,[["format","puuid","summonerName"],["short",["get",["puuid"]],["get",["summonerName"]]]]],false],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","custom-member-info-right"],["flush-element"],["text","\\n"],["block",["unless"],[["get",["isTFT"]]],null,26,23],["text","    "],["open-element","div",[]],["static-attr","class","custom-invite-privileges"],["flush-element"],["text","\\n"],["block",["if"],[["get",["isTFT"]]],null,18],["text","      "],["open-element","button",[]],["dynamic-attr","class",["concat",["custom-invite-privilege-button ",["helper",["if"],[["get",["hasInvitePrivileges"]],"privileges-granted"],null]]]],["modifier",["action"],[["get",[null]],"toggleInvite"]],["flush-element"],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipPosition","type"],["top","system"]],16],["text","      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n"],["block",["if"],[["get",["isNotFriend"]]],null,13],["text","  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","                "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n                  "],["open-element","p",[]],["flush-element"],["text","\\n                    "],["append",["unknown",["tra","custom_game_bot_add_disabled_no_available_bots"]],false],["text","\\n                  "],["close-element"],["text","\\n                "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["uikit-tooltip"],null,[["tooltipPosition","type"],["bottom","system"]],33]],"locals":[]},{"statements":[["text","        "],["open-element","div",[]],["static-attr","class","member-add-bot"],["flush-element"],["text","\\n          "],["open-element","lol-uikit-flat-button-secondary",[]],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"addBot"],null],null],["dynamic-attr","disabled",["unknown",["botsButtonDisabled"]],null],["flush-element"],["text","\\n            "],["append",["unknown",["tra","custom_game_bot_add"]],false],["text","\\n"],["block",["if"],[["get",["botsButtonDisabled"]]],null,34],["text","          "],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","div",[]],["static-attr","class","member-join-other-team"],["flush-element"],["text","\\n          "],["open-element","lol-uikit-flat-button-secondary",[]],["static-attr","class","member-join-other-team-button"],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"joinOtherTeam"],null],null],["dynamic-attr","disabled",["unknown",["joinDisabled"]],null],["flush-element"],["text","\\n            "],["append",["unknown",["tra","custom_game_join"]],false],["text","\\n          "],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","custom-member-info-right custom-placeholder-buttons"],["flush-element"],["text","\\n      "],["comment"," JOIN OTHER TEAM "],["text","\\n"],["block",["if"],[["get",["isNotCurrentPlayersTeam"]]],null,36],["text","      "],["comment"," ADD BOT "],["text","\\n"],["block",["unless"],[["get",["isTFT"]]],null,35],["text","    "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","custom-member-info-left"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","custom-team-member-placeholder member-info-left"],["flush-element"],["text","\\n      "],["append",["unknown",["tra","custom_game_empty"]],false],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n\\n"],["block",["if"],[["get",["isFirstPlaceholder"]]],null,37]],"locals":[]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1),
          s = a(n(19)),
          o = a(n(201));
        function a(e) {
          return e && e.__esModule ? e : { default: e };
        }
        n(202);
        const r = new o.default([], {
          keys: [
            { name: "lobbyName", weight: "1" },
            { name: "ownerDisplayName", weight: "0.5" },
          ],
        });
        e.exports = i.Ember.Component.extend(s.default, {
          layout: n(203),
          classNames: ["custom-game-list"],
          classNameBindings: ["searchString:custom-game-list-searched"],
          customGameListService: i.Ember.inject.service("custom-game-list"),
          customGames: i.Ember.computed.readOnly(
            "customGameListService.customGames",
          ),
          refreshEnabled: !0,
          refreshDisabled: i.Ember.computed.not("refreshEnabled"),
          sortBy: "lobbyName",
          selectedCustomGame: null,
          isSortReversed: !1,
          lobbyNameSorted: !0,
          ownerDisplayNameSorted: !1,
          mapNameSorted: !1,
          _isSelectingCustomGame: !1,
          isNotSearched: i.Ember.computed.empty("searchString"),
          showLobbyNameSorted: i.Ember.computed.and(
            "lobbyNameSorted",
            "isNotSearched",
          ),
          showOwnerDisplayNameSorted: i.Ember.computed.and(
            "ownerDisplayNameSorted",
            "isNotSearched",
          ),
          showMapNameSorted: i.Ember.computed.and(
            "mapNameSorted",
            "isNotSearched",
          ),
          handleWillDestroyElement: i.Ember.on(
            "willDestroyElement",
            function () {
              this.set("customGameListService.selectedCustomGame", null);
            },
          ),
          sortOrder: i.Ember.computed("isSortReversed", function () {
            return this.get("isSortReversed") ? "desc" : "asc";
          }),
          sortOrderClass: i.Ember.computed("sortOrder", function () {
            return `custom-game-header-${this.get("sortOrder")}`;
          }),
          sortDefinition: i.Ember.computed(
            "sortBy",
            "isSortReversed",
            function () {
              return [`${this.get("sortBy")}:${this.get("sortOrder")}`];
            },
          ),
          filteredCustomGames: i.Ember.computed(
            "customGames.@each.{lobbyName,ownerDisplayName,maxSpectatorSlots,hasPassword}",
            "shouldShowSpectators",
            "shouldShowPrivateOnly",
            "searchString",
            function () {
              const e = this.get("shouldShowSpectators"),
                t = this.get("shouldShowPrivateOnly"),
                n = this.get("customGames");
              if (!n) return;
              const s = n.filter(
                  (n) =>
                    !(t && !n.get("hasPassword")) &&
                    !(e && !n.get("maxSpectatorSlots")),
                ),
                o = this.get("searchString");
              return o
                ? (r.list !== s && r.set(s), i.Ember.A(r.search(o)))
                : i.Ember.A(s);
            },
          ),
          sortedFilteredCustomGames: i.Ember.computed.sort(
            "filteredCustomGames",
            "sortDefinition",
          ),
          customGameRenderList: i.Ember.computed(
            "filteredCustomGames",
            "sortedFilteredCustomGames",
            "searchString",
            function () {
              return this.get("searchString")
                ? this.get("filteredCustomGames")
                : this.get("sortedFilteredCustomGames");
            },
          ),
          clearHeaderFlags: function () {
            this.set("lobbyNameSorted", !1),
              this.set("ownerDisplayNameSorted", !1),
              this.set("mapNameSorted", !1);
          },
          setHeaderFlag: function (e) {
            const t = this.get("sortOrder");
            this.clearHeaderFlags(), this.set(`${e}Sorted`, t);
          },
          handleDidInsertElement: i.Ember.on("didInsertElement", function () {
            this.get("customGameListService").refreshGameList();
          }),
          actions: {
            sort: function (e) {
              this.get("sortBy") === e
                ? this.toggleProperty("isSortReversed")
                : this.set("isSortReversed", !1),
                this.set("sortBy", e),
                this.setHeaderFlag(e);
            },
            selectCustomGame: function (e) {
              this.get("_isSelectingCustomGame") ||
                (this.set("_isSelectingCustomGame", !0),
                this.set("selectedCustomGame", e),
                this.set("customGameListService.selectedCustomGame", e),
                this.set("_isSelectingCustomGame", !1));
            },
            joinSelectedCustomGame: function (e = { spectator: !1 }) {
              if (this.get("_isSelectingCustomGame")) return;
              const t = this.get("selectedCustomGame.id"),
                n = this.get("selectedCustomGame.partyId"),
                i = this.get("selectedCustomGame.hasPassword"),
                s = { spectator: e.spectator, hasPassword: i };
              t ? (s.id = t) : (s.partyId = n),
                this.get("customGameListService")
                  .joinCustomGame(s)
                  .then(() => {
                    this.isDestroying ||
                      this.isDestroyed ||
                      this.get("customGameListService").triggerShowParty();
                  });
            },
            refresh: function () {
              this.get("refreshEnabled") &&
                (this.playSound("/fe/lol-uikit/sfx-uikit-text-click-small.ogg"),
                this.set("refreshEnabled", !1),
                i.bluebird
                  .all([
                    this.get("customGameListService").refreshGameList(),
                    i.bluebird.delay(500),
                  ])
                  .then(() => {
                    this.isDestroying ||
                      this.isDestroyed ||
                      this.set("refreshEnabled", !0);
                  }));
            },
          },
        });
      },
      function (e) {
        !(function (t) {
          "use strict";
          function n() {
            console.log.apply(console, arguments);
          }
          var i = {
            id: null,
            caseSensitive: !1,
            include: [],
            shouldSort: !0,
            searchFn: a,
            sortFn: function (e, t) {
              return e.score - t.score;
            },
            getFn: function e(t, n, i) {
              var s, a, r, l, c, m;
              if (n) {
                if (
                  (-1 !== (r = n.indexOf("."))
                    ? ((s = n.slice(0, r)), (a = n.slice(r + 1)))
                    : (s = n),
                  null != (l = t[s]))
                )
                  if (a || ("string" != typeof l && "number" != typeof l))
                    if (o(l))
                      for (c = 0, m = l.length; c < m; c++) e(l[c], a, i);
                    else a && e(l, a, i);
                  else i.push(l);
              } else i.push(t);
              return i;
            },
            keys: [],
            verbose: !1,
            tokenize: !1,
            matchAllTokens: !1,
            tokenSeparator: / +/g,
            minMatchCharLength: 1,
            findAllMatches: !1,
          };
          function s(e, t) {
            var n;
            for (n in ((this.list = e), (this.options = t = t || {}), i))
              i.hasOwnProperty(n) &&
                ("boolean" == typeof i[n]
                  ? (this.options[n] = n in t ? t[n] : i[n])
                  : (this.options[n] = t[n] || i[n]));
          }
          function o(e) {
            return "[object Array]" === Object.prototype.toString.call(e);
          }
          function a(e, t) {
            (t = t || {}),
              (this.options = t),
              (this.options.location = t.location || a.defaultOptions.location),
              (this.options.distance =
                "distance" in t ? t.distance : a.defaultOptions.distance),
              (this.options.threshold =
                "threshold" in t ? t.threshold : a.defaultOptions.threshold),
              (this.options.maxPatternLength =
                t.maxPatternLength || a.defaultOptions.maxPatternLength),
              (this.pattern = t.caseSensitive ? e : e.toLowerCase()),
              (this.patternLen = e.length),
              this.patternLen <= this.options.maxPatternLength &&
                ((this.matchmask = 1 << (this.patternLen - 1)),
                (this.patternAlphabet = this._calculatePatternAlphabet()));
          }
          (s.VERSION = "2.7.3"),
            (s.prototype.set = function (e) {
              return (this.list = e), e;
            }),
            (s.prototype.search = function (e) {
              return (
                this.options.verbose && n("\nSearch term:", e, "\n"),
                (this.pattern = e),
                (this.results = []),
                (this.resultMap = {}),
                (this._keyMap = null),
                this._prepareSearchers(),
                this._startSearch(),
                this._computeScore(),
                this._sort(),
                this._format()
              );
            }),
            (s.prototype._prepareSearchers = function () {
              var e = this.options,
                t = this.pattern,
                n = e.searchFn,
                i = t.split(e.tokenSeparator),
                s = 0,
                o = i.length;
              if (this.options.tokenize)
                for (this.tokenSearchers = []; s < o; s++)
                  this.tokenSearchers.push(new n(i[s], e));
              this.fullSeacher = new n(t, e);
            }),
            (s.prototype._startSearch = function () {
              var e,
                t,
                n,
                i,
                s = this.options.getFn,
                o = this.list,
                a = o.length,
                r = this.options.keys,
                l = r.length,
                c = null;
              if ("string" == typeof o[0])
                for (n = 0; n < a; n++) this._analyze("", o[n], n, n);
              else
                for (this._keyMap = {}, n = 0; n < a; n++)
                  for (c = o[n], i = 0; i < l; i++) {
                    if ("string" != typeof (e = r[i])) {
                      if (
                        ((t = 1 - e.weight || 1),
                        (this._keyMap[e.name] = { weight: t }),
                        e.weight <= 0 || e.weight > 1)
                      )
                        throw new Error("Key weight has to be > 0 and <= 1");
                      e = e.name;
                    } else this._keyMap[e] = { weight: 1 };
                    this._analyze(e, s(c, e, []), c, n);
                  }
            }),
            (s.prototype._analyze = function (e, t, i, s) {
              var a,
                r,
                l,
                c,
                m,
                u,
                d,
                p,
                h,
                g,
                b,
                f,
                _,
                y,
                v,
                S = this.options,
                x = !1;
              if (null != t) {
                r = [];
                var E = 0;
                if ("string" == typeof t) {
                  if (
                    ((a = t.split(S.tokenSeparator)),
                    S.verbose && n("---------\nKey:", e),
                    this.options.tokenize)
                  ) {
                    for (y = 0; y < this.tokenSearchers.length; y++) {
                      for (
                        p = this.tokenSearchers[y],
                          S.verbose && n("Pattern:", p.pattern),
                          h = [],
                          f = !1,
                          v = 0;
                        v < a.length;
                        v++
                      ) {
                        g = a[v];
                        var k = {};
                        (b = p.search(g)).isMatch
                          ? ((k[g] = b.score),
                            (x = !0),
                            (f = !0),
                            r.push(b.score))
                          : ((k[g] = 1),
                            this.options.matchAllTokens || r.push(1)),
                          h.push(k);
                      }
                      f && E++, S.verbose && n("Token scores:", h);
                    }
                    for (c = r[0], u = r.length, y = 1; y < u; y++) c += r[y];
                    (c /= u), S.verbose && n("Token score average:", c);
                  }
                  (d = this.fullSeacher.search(t)),
                    S.verbose && n("Full text score:", d.score),
                    (m = d.score),
                    void 0 !== c && (m = (m + c) / 2),
                    S.verbose && n("Score average:", m),
                    (_ =
                      !this.options.tokenize ||
                      !this.options.matchAllTokens ||
                      E >= this.tokenSearchers.length),
                    S.verbose && n("Check Matches", _),
                    (x || d.isMatch) &&
                      _ &&
                      ((l = this.resultMap[s])
                        ? l.output.push({
                            key: e,
                            score: m,
                            matchedIndices: d.matchedIndices,
                          })
                        : ((this.resultMap[s] = {
                            item: i,
                            output: [
                              {
                                key: e,
                                score: m,
                                matchedIndices: d.matchedIndices,
                              },
                            ],
                          }),
                          this.results.push(this.resultMap[s])));
                } else if (o(t))
                  for (y = 0; y < t.length; y++) this._analyze(e, t[y], i, s);
              }
            }),
            (s.prototype._computeScore = function () {
              var e,
                t,
                i,
                s,
                o,
                a,
                r,
                l,
                c = this._keyMap,
                m = this.results;
              for (
                this.options.verbose && n("\n\nComputing score:\n"), e = 0;
                e < m.length;
                e++
              ) {
                for (
                  i = 0, o = (s = m[e].output).length, r = 1, t = 0;
                  t < o;
                  t++
                )
                  (l = s[t].score * (a = c ? c[s[t].key].weight : 1)),
                    1 !== a
                      ? (r = Math.min(r, l))
                      : ((i += l), (s[t].nScore = l));
                (m[e].score = 1 === r ? i / o : r),
                  this.options.verbose && n(m[e]);
              }
            }),
            (s.prototype._sort = function () {
              var e = this.options;
              e.shouldSort &&
                (e.verbose && n("\n\nSorting...."),
                this.results.sort(e.sortFn));
            }),
            (s.prototype._format = function () {
              var e,
                t,
                i,
                s,
                o = this.options,
                a = o.getFn,
                r = [],
                l = this.results,
                c = o.include;
              for (
                o.verbose && n("\n\nOutput:\n\n", l),
                  i = o.id
                    ? function (e) {
                        l[e].item = a(l[e].item, o.id, [])[0];
                      }
                    : function () {},
                  s = function (e) {
                    var t,
                      n,
                      i,
                      s,
                      o,
                      a = l[e];
                    if (c.length > 0) {
                      if (((t = { item: a.item }), -1 !== c.indexOf("matches")))
                        for (
                          i = a.output, t.matches = [], n = 0;
                          n < i.length;
                          n++
                        )
                          (o = { indices: (s = i[n]).matchedIndices }),
                            s.key && (o.key = s.key),
                            t.matches.push(o);
                      -1 !== c.indexOf("score") && (t.score = l[e].score);
                    } else t = a.item;
                    return t;
                  },
                  e = 0,
                  t = l.length;
                e < t;
                e++
              )
                i(e), r.push(s(e));
              return r;
            }),
            (a.defaultOptions = {
              location: 0,
              distance: 100,
              threshold: 0.6,
              maxPatternLength: 32,
            }),
            (a.prototype._calculatePatternAlphabet = function () {
              var e = {},
                t = 0;
              for (t = 0; t < this.patternLen; t++)
                e[this.pattern.charAt(t)] = 0;
              for (t = 0; t < this.patternLen; t++)
                e[this.pattern.charAt(t)] |= 1 << (this.pattern.length - t - 1);
              return e;
            }),
            (a.prototype._bitapScore = function (e, t) {
              var n = e / this.patternLen,
                i = Math.abs(this.options.location - t);
              return this.options.distance
                ? n + i / this.options.distance
                : i
                  ? 1
                  : n;
            }),
            (a.prototype.search = function (e) {
              var t,
                n,
                i,
                s,
                o,
                a,
                r,
                l,
                c,
                m,
                u,
                d,
                p,
                h,
                g,
                b,
                f,
                _,
                y,
                v,
                S,
                x,
                E,
                k = this.options;
              if (
                ((e = k.caseSensitive ? e : e.toLowerCase()),
                this.pattern === e)
              )
                return {
                  isMatch: !0,
                  score: 0,
                  matchedIndices: [[0, e.length - 1]],
                };
              if (this.patternLen > k.maxPatternLength) {
                if (
                  (y = !!(_ = e.match(
                    new RegExp(this.pattern.replace(k.tokenSeparator, "|")),
                  )))
                )
                  for (S = [], t = 0, x = _.length; t < x; t++)
                    (E = _[t]), S.push([e.indexOf(E), E.length - 1]);
                return { isMatch: y, score: y ? 0.5 : 1, matchedIndices: S };
              }
              for (
                s = k.findAllMatches,
                  o = k.location,
                  i = e.length,
                  a = k.threshold,
                  r = e.indexOf(this.pattern, o),
                  v = [],
                  t = 0;
                t < i;
                t++
              )
                v[t] = 0;
              for (
                -1 != r &&
                  ((a = Math.min(this._bitapScore(0, r), a)),
                  -1 !=
                    (r = e.lastIndexOf(this.pattern, o + this.patternLen)) &&
                    (a = Math.min(this._bitapScore(0, r), a))),
                  r = -1,
                  b = 1,
                  f = [],
                  m = this.patternLen + i,
                  t = 0;
                t < this.patternLen;
                t++
              ) {
                for (l = 0, c = m; l < c; )
                  this._bitapScore(t, o + c) <= a ? (l = c) : (m = c),
                    (c = Math.floor((m - l) / 2 + l));
                for (
                  m = c,
                    u = Math.max(1, o - c + 1),
                    d = s ? i : Math.min(o + c, i) + this.patternLen,
                    (p = Array(d + 2))[d + 1] = (1 << t) - 1,
                    n = d;
                  n >= u;
                  n--
                )
                  if (
                    ((g = this.patternAlphabet[e.charAt(n - 1)]) &&
                      (v[n - 1] = 1),
                    (p[n] = ((p[n + 1] << 1) | 1) & g),
                    0 !== t &&
                      (p[n] |= ((h[n + 1] | h[n]) << 1) | 1 | h[n + 1]),
                    p[n] & this.matchmask &&
                      (b = this._bitapScore(t, n - 1)) <= a)
                  ) {
                    if (((a = b), (r = n - 1), f.push(r), r <= o)) break;
                    u = Math.max(1, 2 * o - r);
                  }
                if (this._bitapScore(t + 1, o) > a) break;
                h = p;
              }
              return {
                isMatch: r >= 0,
                score: 0 === b ? 0.001 : b,
                matchedIndices: (S = this._getMatchedIndices(v)),
              };
            }),
            (a.prototype._getMatchedIndices = function (e) {
              for (
                var t, n = [], i = -1, s = -1, o = 0, a = e.length;
                o < a;
                o++
              )
                (t = e[o]) && -1 === i
                  ? (i = o)
                  : t ||
                    -1 === i ||
                    ((s = o - 1) - i + 1 >= this.options.minMatchCharLength &&
                      n.push([i, s]),
                    (i = -1));
              return (
                e[o - 1] &&
                  o - 1 - i + 1 >= this.options.minMatchCharLength &&
                  n.push([i, o - 1]),
                n
              );
            }),
            (e.exports = s);
        })();
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "V9gNRidd",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\custom-game-list\\\\custom-game-list-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\custom-game-list\\\\custom-game-list-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\custom-game-list\\\\custom-game-list-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","custom-game-list-header"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","custom-game-list-title"],["flush-element"],["append",["unknown",["tra","custom_game_list_title"]],false],["close-element"],["text","\\n"],["close-element"],["text","\\n"],["open-element","div",[]],["static-attr","class","custom-game-list-subheader"],["flush-element"],["text","\\n"],["block",["uikit-framed-icon"],null,[["onclick","class","borderWidth","disabled"],[["helper",["action"],[["get",[null]],"refresh"],null],"custom-game-list-button-refresh",2,["get",["refreshDisabled"]]]],1],["text","  "],["open-element","div",[]],["static-attr","class","custom-game-list-filters"],["flush-element"],["text","\\n    "],["open-element","lol-uikit-flat-input",[]],["static-attr","class","custom-game-list-search"],["flush-element"],["text","\\n      "],["append",["helper",["input"],null,[["type","name","maxlength","placeholder","disabled","value","autocomplete","autocorrect","autocapitalize","spellcheck"],["search","search","48",["get",["tra","custom_game_list_search_placeholder"]],false,["get",["searchString"]],"off","off","off",false]]],false],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","lol-uikit-flat-checkbox",[]],["static-attr","class","custom-game-list-filters-checkbox"],["flush-element"],["text","\\n      "],["append",["helper",["input"],null,[["slot","id","type","checked"],["input","custom-game-filter-spectators","checkbox",["get",["shouldShowSpectators"]]]]],false],["text","\\n      "],["open-element","label",[]],["static-attr","slot","label"],["static-attr","for","custom-game-filter-spectators"],["flush-element"],["append",["unknown",["tra","custom_game_list_spectators_allowed"]],false],["close-element"],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","lol-uikit-flat-checkbox",[]],["static-attr","class","custom-game-list-filters-checkbox"],["flush-element"],["text","\\n      "],["append",["helper",["input"],null,[["slot","id","type","checked"],["input","custom-game-filter-private","checkbox",["get",["shouldShowPrivateOnly"]]]]],false],["text","\\n      "],["open-element","label",[]],["static-attr","slot","label"],["static-attr","for","custom-game-filter-private"],["flush-element"],["append",["unknown",["tra","custom_game_list_private_only"]],false],["close-element"],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n"],["close-element"],["text","\\n\\n"],["open-element","div",[]],["static-attr","class","custom-game-list-body"],["flush-element"],["text","\\n  "],["open-element","table",[]],["static-attr","class","custom-game-list-table"],["flush-element"],["text","\\n    "],["open-element","thead",[]],["static-attr","class","custom-game-list-table-header"],["flush-element"],["text","\\n      "],["open-element","tr",[]],["static-attr","class","custom-game-list-table-header-row"],["flush-element"],["text","\\n        "],["open-element","th",[]],["static-attr","class","custom-game-list-table-header-private"],["flush-element"],["close-element"],["text","\\n"],["text","        "],["open-element","th",[]],["dynamic-attr","class",["concat",["custom-game-list-table-header-name ",["helper",["if"],[["get",["showLobbyNameSorted"]],["get",["sortOrderClass"]],""],null]]]],["modifier",["action"],[["get",[null]],"sort","lobbyName"]],["flush-element"],["append",["unknown",["tra","custom_game_list_header_lobby_name"]],false],["close-element"],["text","\\n        "],["open-element","th",[]],["dynamic-attr","class",["concat",["custom-game-list-table-header-owner ",["helper",["if"],[["get",["showOwnerDisplayNameSorted"]],["get",["sortOrderClass"]],""],null]]]],["modifier",["action"],[["get",[null]],"sort","ownerDisplayName"]],["flush-element"],["append",["unknown",["tra","custom_game_list_header_owner"]],false],["close-element"],["text","\\n        "],["open-element","th",[]],["dynamic-attr","class",["concat",["custom-game-list-table-header-map ",["helper",["if"],[["get",["showMapNameSorted"]],["get",["sortOrderClass"]],""],null]]]],["modifier",["action"],[["get",[null]],"sort","mapName"]],["flush-element"],["append",["unknown",["tra","custom_game_list_header_map"]],false],["close-element"],["text","\\n        "],["open-element","th",[]],["static-attr","class","custom-game-list-table-header-slots"],["flush-element"],["close-element"],["text","\\n        "],["open-element","th",[]],["static-attr","class","custom-game-list-table-header-spectators"],["flush-element"],["close-element"],["text","\\n      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n\\n    "],["open-element","lol-uikit-scrollable",[]],["static-attr","class","custom-game-list-table-scroll"],["static-attr","overflow-masks","enabled"],["flush-element"],["text","\\n      "],["open-element","tbody",[]],["static-attr","class","custom-game-list-table-body"],["flush-element"],["text","\\n"],["block",["each"],[["get",["customGameRenderList"]]],null,0],["text","      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","          "],["append",["helper",["custom-game-row"],null,[["customGame","selectedCustomGame","joinSelectedCustomGame","selectCustomGame"],[["get",["customGame"]],["get",["selectedCustomGame"]],"joinSelectedCustomGame","selectCustomGame"]]],false],["text","\\n"]],"locals":["customGame"]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","custom-game-list-button-icon"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1),
          s = a(n(19)),
          o = a(n(67));
        function a(e) {
          return e && e.__esModule ? e : { default: e };
        }
        n(205),
          (e.exports = i.Ember.Component.extend(s.default, {
            layout: n(206),
            classNames: ["custom-game-tournament-code-container"],
            customGameListService: i.Ember.inject.service("custom-game-list"),
            tournamentCodeInput: null,
            tournamentCodeFlatInput: null,
            tournamentCodeInputListener: null,
            tournamentCodeReadyToSubmit: !0,
            tournamentCodeEnabled: i.Ember.computed.and(
              "customGameListService.tournamentShortCodesEnabled",
              "tournamentCodeReadyToSubmit",
            ),
            tournamentCodeDisabled: i.Ember.computed.not(
              "tournamentCodeEnabled",
            ),
            handleDidInsertElement: i.Ember.on("didInsertElement", function () {
              const e = this.element.querySelector(
                "lol-uikit-flat-input.custom-game-list-tournament-code",
              );
              this.set("tournamentCodeFlatInput", e);
              const t = e.querySelector("input");
              this.set("tournamentCodeInput", t);
              const n = () => {
                this.checkForValidValue();
              };
              t.addEventListener("keyup", n),
                this.set("tournamentCodeInputListener", n),
                this.element.removeChild(e);
            }),
            handleWillDestroyElement: i.Ember.on(
              "willDestroyElement",
              function () {
                const e = this.get("tournamentCodeInput"),
                  t = this.get("tournamentCodeInputListener");
                e && t && e.removeEventListener("keyup", t);
              },
            ),
            tooltipText: i.Ember.computed(
              "tournamentCodeEnabled",
              "tra.custom_game_list_tournament_code_tooltip",
              "tra.custom_game_list_tournament_code_disabled_tooltip",
              function () {
                return this.get("tournamentCodeEnabled")
                  ? this.get("tra.custom_game_list_tournament_code_tooltip")
                  : this.get(
                      "tra.custom_game_list_tournament_code_disabled_tooltip",
                    );
              },
            ),
            click: function () {
              if (
                (this.playSound("/fe/lol-uikit/sfx-uikit-text-click-small.ogg"),
                this.get("tournamentCodeDisabled"))
              )
                return;
              const e = this.get("tournamentCodeFlatInput"),
                t = document.createElement("lol-uikit-content-block");
              t.setAttribute("type", "dialog-small"),
                (t.innerHTML = `<h4>${this.get("tra.custom_game_list_tournament_code_header")}</h4>\n       <hr class="heading-spacer">`),
                t.appendChild(e);
              const n = i.UIKit.getModalManager().add({
                type: "DialogConfirm",
                data: {
                  contents: t,
                  acceptText: this.get(
                    "tra.custom_game_list_tournament_code_join",
                  ),
                  declineText: this.get(
                    "tra.custom_game_list_tournament_code_cancel",
                  ),
                  closeButton: !1,
                },
              });
              return (
                n.domNode.classList.add("custom-game-tournament-code-modal"),
                this.set("tournamentCodeModal", n),
                this.checkForValidValue(),
                n.acceptPromise.then(
                  () => {
                    this.joinWithTournamentCode(),
                      this.set("tournamentCodeModal", !1);
                  },
                  () => {
                    this.resetInputValue(), this.set("tournamentCodeModal", !1);
                  },
                )
              );
            },
            inputValue: function () {
              const e = this.get("tournamentCodeInput");
              return !(!e || !e.value) && e.value;
            },
            resetInputValue: function () {
              const e = this.get("tournamentCodeInput");
              e && (e.value = "");
            },
            checkForValidValue: function () {
              const e = this.get("tournamentCodeModal");
              if (!e) return;
              this.inputValue()
                ? e.enableAcceptButton()
                : e.disableAcceptButton();
            },
            joinWithTournamentCode: function () {
              const e = this.inputValue();
              this.set("tournamentCodeReadyToSubmit", !1),
                this.get("customGameListService")
                  .joinWithTournamentCode(e)
                  .then(() => {
                    this.isDestroying ||
                      this.isDestroyed ||
                      (this.set("tournamentCodeReadyToSubmit", !0),
                      this.get("customGameListService").triggerShowParty());
                  })
                  .catch((e) => {
                    this.isDestroying ||
                      this.isDestroyed ||
                      (this.set("tournamentCodeReadyToSubmit", !0),
                      this.showTournamentCodeError(e));
                  });
            },
            showTournamentCodeError: function (e) {
              this.resetInputValue();
              const t =
                438 === e.status
                  ? this.get("tra.custom_game_list_error_438")
                  : this.get("tra.custom_game_list_tournament_code_error_body");
              o.default.promptJoinErrorModal(t);
            },
          }));
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "JZ0pg18u",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\custom-game-tournament-code-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\custom-game-tournament-code-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\custom-game-tournament-code-component\\\\index.js\\" "],["text","\\n"],["open-element","button",[]],["static-attr","class","show-tournament-code-entry-modal"],["dynamic-attr","disabled",["unknown",["tournamentCodeDisabled"]],null],["flush-element"],["text"," "],["close-element"],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipPosition","type"],["bottom","system"]],0],["open-element","lol-uikit-flat-input",[]],["static-attr","class","custom-game-list-tournament-code"],["flush-element"],["text","\\n  "],["open-element","input",[]],["static-attr","class","custom-game-list-tournament-code-input"],["static-attr","type","text"],["static-attr","name","search"],["static-attr","maxlength","48"],["static-attr","autocomplete","off"],["static-attr","autocorrect","off"],["static-attr","autocapitalize","off"],["static-attr","spellcheck","false"],["flush-element"],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n    "],["open-element","p",[]],["flush-element"],["text","\\n      "],["append",["unknown",["tooltipText"]],false],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        e.exports = i.Ember.Component.extend({
          customGame: null,
          layout: n(208),
          classNames: ["custom-game-list-table-body-row"],
          classNameBindings: ["isSelected:custom-list-row-selected"],
          tagName: "tr",
          contextMenuManager: i.UIKit.getContextMenuManager(),
          isSelected: i.Ember.computed(
            "selectedCustomGame",
            "selectedCustomGame.id",
            "customGame.id",
            function () {
              return (
                this.get("selectedCustomGame.id") === this.get("customGame.id")
              );
            },
          ),
          slotString: i.Ember.computed(
            "customGame.filledPlayerSlots",
            "customGame.maxPlayerSlots",
            function () {
              return (
                this.get("customGame.filledPlayerSlots") +
                "/" +
                this.get("customGame.maxPlayerSlots")
              );
            },
          ),
          spectatorString: i.Ember.computed(
            "customGame.filledSpectatorSlots",
            "customGame.maxSpectatorSlots",
            function () {
              const e = this.get("customGame.maxSpectatorSlots");
              return e
                ? this.get("customGame.filledSpectatorSlots") + "/" + e
                : "-";
            },
          ),
          isJoinable: i.Ember.computed(
            "customGame.filledPlayerSlots",
            "customGame.maxPlayerSlots",
            function () {
              return (
                this.get("customGame.filledPlayerSlots") <
                this.get("customGame.maxPlayerSlots")
              );
            },
          ),
          isSpectateable: i.Ember.computed(
            "customGame.filledSpectatorSlots",
            "customGame.maxSpectatorSlots",
            function () {
              return (
                this.get("customGame.filledSpectatorSlots") <
                this.get("customGame.maxSpectatorSlots")
              );
            },
          ),
          click: function () {
            this.sendAction("selectCustomGame", this.get("customGame"));
          },
          doubleClick: function () {
            this.sendAction("selectCustomGame", this.get("customGame")),
              this.joinGame();
          },
          spectateGame: function () {
            this.sendAction("joinSelectedCustomGame", { spectator: !0 });
          },
          joinGame: function () {
            this.sendAction("joinSelectedCustomGame");
          },
          contextMenu: function (e) {
            this.sendAction("selectCustomGame", this.get("customGame")),
              this.contextMenuManager.setMenuItems([
                {
                  label: this.get("tra.custom_game_join"),
                  action: "joinGame",
                  class: "custom-game-join-game",
                  target: this,
                  disabled: !this.get("isJoinable"),
                },
                {
                  label: this.get("tra.custom_game_spectate"),
                  action: "spectateGame",
                  class: "custom-game-spectate-game",
                  target: this,
                  disabled: !this.get("isSpectateable"),
                },
              ]),
              this.contextMenuManager.openAtEvent(e);
          },
        });
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "M7JaaxpV",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\custom-game-list\\\\custom-game-row-component\\\\layout.hbs\\" style-path=\\"null\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\custom-game-list\\\\custom-game-row-component\\\\index.js\\" "],["text","\\n"],["open-element","td",[]],["dynamic-attr","class",["concat",["custom-game-list-table-body-private ",["helper",["if"],[["get",["customGame","hasPassword"]],"","custom-lock-hidden"],null]]]],["flush-element"],["close-element"],["text","\\n"],["open-element","td",[]],["static-attr","class","custom-game-list-table-body-name"],["flush-element"],["append",["unknown",["customGame","lobbyName"]],false],["close-element"],["text","\\n"],["open-element","td",[]],["static-attr","class","custom-game-list-table-body-owner"],["flush-element"],["append",["unknown",["customGame","ownerDisplayName"]],false],["close-element"],["text","\\n"],["open-element","td",[]],["static-attr","class","custom-game-list-table-body-map"],["flush-element"],["append",["unknown",["customGame","mapName"]],false],["close-element"],["text","\\n"],["open-element","td",[]],["static-attr","class","custom-game-list-table-body-slots"],["flush-element"],["append",["unknown",["slotString"]],false],["close-element"],["text","\\n"],["open-element","td",[]],["static-attr","class","custom-game-list-table-body-spectators"],["flush-element"],["append",["unknown",["spectatorString"]],false],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1),
          s = r(n(116)),
          o = (n(12), n(9)),
          a = r(n(10));
        function r(e) {
          return e && e.__esModule ? e : { default: e };
        }
        n(210),
          (e.exports = s.default.extend({
            classNames: ["tft-lobby"],
            classNameBindings: ["isPair:tft-lobby-pair"],
            layout: n(211),
            platformConfigSingleton: a.default,
            playbookEnabled: !1,
            init() {
              this._super(...arguments),
                this.set("playbook", i.Ember.inject.service("tft-playbook")),
                this.set(
                  "playbookEnabled",
                  i.Ember.computed.alias("playbook.playbookEnabled"),
                ),
                this.checkForNormalSwap();
            },
            lobbiesService: i.Ember.inject.service("lobbies"),
            eligibilityService: i.Ember.inject.service("queue-eligibility"),
            pendingInviteCount: i.Ember.computed.alias(
              "lobbiesService.pendingInvites.length",
            ),
            queueId: i.Ember.computed.alias("lobbiesService.queueId"),
            patchNotesUrl: i.Ember.computed.alias(
              "platformConfigSingleton.TftPatchNotesUrl",
            ),
            hasNoPatchNotes: i.Ember.computed.empty("patchNotesUrl"),
            isPair: i.Ember.computed("lobbiesService.queueId", function () {
              return o.PAIRS_QUEUE_IDS.includes(
                this.get("lobbiesService.queueId"),
              );
            }),
            checkForNormalSwap: function () {
              if (
                this.get("eligibilityService.isTFTNPEEnabled") &&
                this.get("lobbiesService.isCurrentPlayerPartyLeader") &&
                [o.TFT_NORMAL_QUEUE_ID, o.TFT_NPE_QUEUE_ID].includes(
                  this.get("queueId"),
                )
              ) {
                const e = this.get(
                  "eligibilityService.partyHasNewTFTPlayerWithoutBypass",
                )
                  ? o.TFT_NPE_QUEUE_ID
                  : o.TFT_NORMAL_QUEUE_ID;
                this.get("queueId") !== e &&
                  this.get("eligibilityService").isQueueAvailable(e) &&
                  this.get("lobbiesService").createLobbyWithQueueId(e);
              }
            },
            observePartiesCompositionChange: i.Ember.observer(
              "eligibilityService.partyHasNewTFTPlayerWithoutBypass",
              "lobbiesService.isCurrentPlayerPartyLeader",
              function () {
                this.checkForNormalSwap();
              },
            ),
            nonSelfCards: i.Ember.computed(
              "otherPartyMembers.[]",
              "playerPlaceholders.[]",
              "pendingInviteCount",
              "isPair",
              function () {
                const e = this.get("otherPartyMembers"),
                  t = this.get("playerPlaceholders"),
                  n = i.Ember.Object.create({
                    left: i.Ember.A(),
                    right: i.Ember.A(),
                    bottom: i.Ember.A(),
                  });
                let s = this.get("isPair") ? 1 : 0;
                function o(e) {
                  s > 3
                    ? n.get("bottom").push(e)
                    : s % 2 == 0
                      ? n.get("left").push(e)
                      : n.get("right").push(e),
                    s++;
                }
                if (e && e.length > 0)
                  for (let t = 0; t < e.length; t++) o(e[t]);
                let a = this.get("pendingInviteCount");
                if ((i.lodash.isNumber(a) || (a = 0), t && t.length > 0))
                  for (let e = 0; e < t.length; e++)
                    a > 0
                      ? (o(i.Ember.Object.create({ isInvited: !0 })), a--)
                      : o(t[e]);
                return n;
              },
            ),
          }));
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "p22douss",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-lobby-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-lobby-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-lobby-component\\\\index.js\\" "],["text","\\n"],["block",["lower-section"],null,[["currentPlayer"],[["get",["currentPlayer"]]]],8],["text","\\n"],["open-element","div",[]],["static-attr","style","display: none;"],["flush-element"],["text","\\n  "],["append",["unknown",["invitationsObserver"]],false],["text","\\n"],["close-element"],["text","\\n\\n"],["append",["unknown",["tft-emerald-rank-modal"]],false]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","            "],["append",["helper",["tft-player-card"],null,[["isPlaceholder","isInvited","partyInvitesAllowed","member","isInQueue","selected","showInviteModal","isFullCard"],[["get",["member","isPlaceholder"]],["get",["member","isInvited"]],["get",["partyInvitesAllowed"]],["get",["member"]],["get",["isInQueue"]],["get",["selected"]],"showInviteModal",["get",["isPair"]]]]],false],["text","\\n"]],"locals":["member"]},{"statements":[["text","        "],["open-element","div",[]],["static-attr","class","tft-cards-second-row"],["flush-element"],["text","\\n"],["block",["each"],[["get",["nonSelfCards","bottom"]]],[["key"],["puuid"]],0],["text","        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","            "],["append",["helper",["tft-player-card"],null,[["isPlaceholder","isInvited","partyInvitesAllowed","member","isInQueue","selected","showInviteModal","isFullCard"],[["get",["member","isPlaceholder"]],["get",["member","isInvited"]],["get",["partyInvitesAllowed"]],["get",["member"]],["get",["isInQueue"]],["get",["selected"]],"showInviteModal",["get",["isPair"]]]]],false],["text","\\n"]],"locals":["member"]},{"statements":[["text","              "],["append",["helper",["tft-playbook-icon"],null,[["queueId"],[["get",["queueId"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","            "],["append",["helper",["tft-player-card"],null,[["member","isMe","isInQueue","selected","isFullCard"],[["get",["currentPlayer"]],true,["get",["isInQueue"]],["get",["selected"]],["get",["isPair"]]]]],false],["text","\\n"],["block",["if"],[["get",["playbookEnabled"]]],null,3]],"locals":[]},{"statements":[["text","              "],["append",["helper",["tft-player-card"],null,[["isInvited","isPlaceholder","partyInvitesAllowed","member","isInQueue","selected","showInviteModal","isFullCard"],[["get",["member","isInvited"]],["get",["member","isPlaceholder"]],["get",["partyInvitesAllowed"]],["get",["member"]],["get",["isInQueue"]],["get",["selected"]],"showInviteModal",["get",["isPair"]]]]],false],["text","\\n"]],"locals":["member"]},{"statements":[["text","          "],["open-element","div",[]],["static-attr","class","tft-cards-first-row-left"],["flush-element"],["text","\\n"],["block",["each"],[["get",["nonSelfCards","left"]]],[["key"],["puuid"]],5],["text","          "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","tft-cards-container"],["flush-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","tft-cards-first-row"],["flush-element"],["text","\\n"],["block",["unless"],[["get",["isPair"]]],null,6],["text","        "],["open-element","div",[]],["static-attr","class","tft-cards-first-row-middle"],["flush-element"],["text","\\n"],["block",["if"],[["get",["currentPlayer"]]],null,4],["text","        "],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","tft-cards-first-row-right"],["flush-element"],["text","\\n"],["block",["each"],[["get",["nonSelfCards","right"]]],[["key"],["puuid"]],2],["text","        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n"],["block",["unless"],[["get",["isPair"]]],null,1],["text","    "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","\\n  "],["open-element","div",[]],["static-attr","class","upper-right-container"],["flush-element"],["text","\\n    "],["append",["unknown",["disband-countdown"]],false],["text","\\n  "],["close-element"],["text","\\n\\n"],["block",["if"],[["get",["inParty"]]],null,7],["text","\\n  "],["append",["helper",["parties-footer-notifications"],null,[["positionError","positionWarning","readyWarning","readyWarningTooltip","premadeSizeAllowed","allowablePremadeSizes","currentPartySize","isCurrentPlayerPartyLeader","shouldShowBetaWatermark"],[["get",["positionError"]],["get",["positionWarning"]],["get",["readyWarning"]],["get",["readyWarningTooltip"]],["get",["lobbiesService","premadeSizeAllowed"]],["get",["lobbiesService","allowablePremadeSizes"]],["get",["lobbiesService","currentPartySize"]],["get",["isCurrentPlayerPartyLeader"]],false]]],false],["text","\\n\\n  "],["append",["helper",["tft-footer"],null,[["showingState","selected","readyWarning"],[["get",["showingState"]],["get",["selected"]],["get",["readyWarning"]]]]],false],["text","\\n\\n  "],["append",["helper",["invite-info-panel"],null,[["showingState","currentPlayerCanInvite","isTFT"],[["get",["showingState"]],["get",["currentPlayerCanInvite"]],true]]],false],["text","\\n\\n  "],["open-element","div",[]],["static-attr","class","parties-chat-room"],["flush-element"],["text","\\n    "],["open-element","lol-social-chat-room",[]],["static-attr","type","lobby"],["static-attr","disabled-when-connecting",""],["flush-element"],["close-element"],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1),
          s = m(n(19)),
          o = m(n(72)),
          a = m(n(94)),
          r = m(n(83)),
          l = m(n(10)),
          c = m(n(119));
        function m(e) {
          return e && e.__esModule ? e : { default: e };
        }
        n(213);
        const { RunMixin: u } = i.EmberAddons.EmberLifeline,
          d = "QUEUE_DODGER",
          p = "LEAVER_BUSTED",
          h = "LEAVER_BUSTER_QUEUE_LOCKOUT",
          g = i.Ember.Object.extend(i.Ember.PromiseProxyMixin);
        e.exports = i.Ember.Component.extend(
          u,
          a.default,
          s.default,
          o.default,
          r.default,
          {
            classNames: ["tft-footer-container"],
            layout: n(214),
            _notifiedSearchErrorIds: i.Ember.A(),
            matchmakingService: i.Ember.inject.service("matchmaking"),
            lobbiesService: i.Ember.inject.service("lobbies"),
            summonerService: i.Ember.inject.service("summoner"),
            customGamesService: i.Ember.inject.service("custom-games"),
            customGameListService: i.Ember.inject.service("custom-game-list"),
            gameflowService: i.Ember.inject.service("gameflow"),
            patcherService: i.Ember.inject.service("patcher"),
            partySettingsService: i.Ember.inject.service("party-settings"),
            queueEligibilityService:
              i.Ember.inject.service("queue-eligibility"),
            assetsService: i.Ember.inject.service("assets"),
            platformConfig: l.default,
            animationsEnabled: !1,
            inLobby: i.Ember.computed.alias("lobbiesService.inLobby"),
            currentPartyMembers: i.Ember.computed.alias(
              "lobbiesService.currentPartyMembers",
            ),
            currentPartySize: i.Ember.computed.alias(
              "lobbiesService.currentPartySize",
            ),
            isPremadeRestrictedFives: i.Ember.computed.alias(
              "lobbiesService.isPremadeRestrictedFives",
            ),
            isLeader: i.Ember.computed.alias(
              "lobbiesService.isCurrentPlayerPartyLeader",
            ),
            isNotLeader: i.Ember.computed.not("isLeader"),
            isMember: i.Ember.computed.alias(
              "lobbiesService.isCurrentPlayerPartyMember",
            ),
            displayNotLeaderTooltip: i.Ember.computed.and(
              "inLobby",
              "isMember",
              "isNotSearching",
              "isMatchNotFound",
            ),
            searchState: i.Ember.computed.alias(
              "matchmakingService.searchState",
            ),
            isSearching: i.Ember.computed.alias(
              "matchmakingService.isSearching",
            ),
            isNotSearching: i.Ember.computed.alias(
              "matchmakingService.isNotSearching",
            ),
            isMatchFound: i.Ember.computed.alias(
              "matchmakingService.isMatchFound",
            ),
            isMatchNotFound: i.Ember.computed.alias(
              "matchmakingService.isMatchNotFound",
            ),
            isInQueue: i.Ember.computed.or("isSearching", "isMatchFound"),
            animationLock: i.Ember.computed.alias("selected.animationLock"),
            currentMapId: i.Ember.computed.alias("selected.mapId"),
            searchError: i.Ember.computed.readOnly(
              "matchmakingService.longestSearchError",
            ),
            searchErrorType: i.Ember.computed.readOnly("searchError.errorType"),
            isSearchError: i.Ember.computed.bool("searchError"),
            searchErrorHasTimeRemaining: i.Ember.computed.gt(
              "matchmakingService.longestSearchErrorPenaltyTimeRemaining",
              0,
            ),
            hasPenaltyTime: i.Ember.computed.and(
              "isSearchError",
              "searchErrorHasTimeRemaining",
            ),
            timeRemaining: i.Ember.computed.readOnly(
              "matchmakingService.longestSearchErrorPenaltyTimeRemainingFormatted",
            ),
            customGameRewardsDisabledModalElement: null,
            customGameRewardsDisabledReasons: i.Ember.A(),
            customGameChampSelectErrorElement: null,
            customGameChampSelectErrorBody: "",
            customGameChampSelectErrorPlayers: i.Ember.A(),
            hasQueueAvailabilityWarning: i.Ember.computed.alias(
              "lobbiesService.hasQueueAvailabilityWarning",
            ),
            queueAvailabilityWarningTooltip: i.Ember.computed.alias(
              "lobbiesService.queueAvailabilityWarningTooltip",
            ),
            showCustomGameContentWarning: i.Ember.computed(
              "selected.isTrainingGame",
              "selected.isCreatingCustomGame",
              "tra.ready",
              function () {
                return (
                  this.get("selected.isTrainingGame") &&
                  this.get("selected.isCreatingCustomGame") &&
                  this.get("tra").exists(
                    "custom_game_training_content_warning",
                  ) &&
                  this.get("tra").exists(
                    "custom_game_training_rewards_warning",
                  ) &&
                  this.get("tra").exists("custom_game_training_question")
                );
              },
            ),
            hideCustomGameRewardsModal: !0,
            insertListener: i.Ember.on("didInsertElement", function () {
              const e = this.element.querySelector(
                "lol-uikit-content-block#custom-games-disabled-reasons",
              );
              this.set("customGameRewardsDisabledModalElement", e);
              const t = this.element.querySelector(
                "lol-uikit-content-block#custom-games-champ-select-error",
              );
              this.set("customGameChampSelectErrorElement", t);
            }),
            penalizedSummonerNameProxy: i.Ember.computed(
              "searchError.penalizedSummonerId",
              function () {
                const e = this.get("searchError.penalizedSummonerId");
                return (
                  e &&
                  g.create({
                    promise: i.playerNames.getDisplayNameBySummonerId(e),
                  })
                );
              },
            ),
            penalizedSummonerDisplayName: i.Ember.computed.alias(
              "penalizedSummonerNameProxy.content.playerNameFull",
            ),
            queueErrorMessage: i.Ember.computed(
              "searchErrorType",
              "penalizedSummonerDisplayName",
              "tra.ready",
              "tra.parties_queue_error_queue_dodge_myself_body",
              "tra.parties_queue_error_queue_dodge_other_body",
              "tra.parties_queue_error_generic_body",
              function () {
                const e = this.get("searchErrorType"),
                  t = this.get("searchError.penalizedSummonerId"),
                  n = this.get("matchmakingService.currentSummoner.summonerId");
                switch (e) {
                  case d:
                    return t === n
                      ? this.get(
                          "tra.parties_queue_error_queue_dodge_myself_body",
                        )
                      : this.translate(
                          "parties_queue_error_queue_dodge_other_body",
                          { player: this.get("penalizedSummonerDisplayName") },
                        );
                  case h:
                    return t === n
                      ? this.get(
                          "tra.parties_queue_error_leaver_buster_lockout_restriction_tooltip_myself_body",
                        )
                      : this.translate(
                          "parties_queue_error_leaver_buster_lockout_restriction_tooltip_other_body",
                          { player: this.get("penalizedSummonerDisplayName") },
                        );
                  default:
                    return this.get(
                      "tra.parties_queue_error_generic_body$html",
                    );
                }
              },
            ),
            patcherDisconnected: i.Ember.computed.not(
              "patcherService.isConnected",
            ),
            showingPartyButNotLeader: i.Ember.computed.and(
              "showingState.isShowingParty",
              "isNotLeader",
            ),
            confirmButtonThrottled: !1,
            confirmButtonNotThrottled: i.Ember.computed.not(
              "confirmButtonThrottled",
            ),
            showingPartyButThrottled: i.Ember.computed.and(
              "showingState.isShowingParty",
              "isLeader",
              "confirmButtonThrottled",
            ),
            showingPartyAndInQueue: i.Ember.computed.and(
              "showingState.isShowingParty",
              "isInQueue",
            ),
            showingPartyAndPenaltyTime: i.Ember.computed(
              "showingState.isShowingParty",
              "hasPenaltyTime",
              "customGamesService.isCustomUI",
              function () {
                return (
                  this.get("showingState.isShowingParty") &&
                  this.get("hasPenaltyTime") &&
                  !this.get("customGamesService.isCustomUI")
                );
              },
            ),
            hasRankedDivisionRestriction: i.Ember.computed.alias(
              "queueEligibilityService.hasRankedDivisionRestriction",
            ),
            showingPartyAndRankedDivisionRestriction: i.Ember.computed.and(
              "showingState.isShowingParty",
              "hasRankedDivisionRestriction",
            ),
            cannotStartMatchmaking: i.Ember.computed.not(
              "lobbiesService.canStartMatchmaking",
            ),
            showingPartyButCannotStartMatchmaking: i.Ember.computed.and(
              "showingState.isShowingParty",
              "isLeader",
              "cannotStartMatchmaking",
            ),
            confirmButtonDisabled: i.Ember.computed.or(
              "animationLock",
              "patcherDisconnected",
              "selected.isUpdatingSelection",
              "lobbiesService.hasLobbyRestrictions",
              "showingPartyButNotLeader",
              "showingPartyButThrottled",
              "showingPartyAndRankedDivisionRestriction",
              "showingPartyAndInQueue",
              "showingPartyAndPenaltyTime",
              "showingPartyButCannotStartMatchmaking",
              "hasQueueAvailabilityWarning",
            ),
            confirmButtonEnabled: i.Ember.computed.not("confirmButtonDisabled"),
            confirmButtonText: i.Ember.computed(
              "tra.ready",
              "hasPenaltyTime",
              "isInQueue",
              "customGamesService.isCustomUI",
              "customGameListService.confirmButtonText",
              "tra.parties_button_in_queue",
              "tra.parties_button_find_match",
              "tra.parties_button_start_game",
              function () {
                if (this.get("isInQueue"))
                  return this.get("tra.parties_button_in_queue");
                if (this.get("customGamesService.isCustomUI"))
                  return this.get("tra.parties_button_start_game");
                if (this.get("hasPenaltyTime")) {
                  this.get("tra.parties_button_blocked");
                  return `${this.get("timeRemaining")}`;
                }
                return this.get("tra.parties_button_find_match");
              },
            ),
            buttonSounds: {
              closeHover: "/fe/lol-parties/sfx-lobby-button-quit-hover.ogg",
              closeClick: "/fe/lol-parties/sfx-lobby-button-quit-click.ogg",
              confirmHover:
                "/fe/lol-parties/sfx-lobby-button-find-match-hover.ogg",
              confirmClick:
                "/fe/lol-parties/sfx-lobby-button-find-match-click.ogg",
              teamPlannerClick:
                "/fe/lol-static-assets/sounds/sfx-uikit-grid-click.ogg",
              teamPlannerHover:
                "/fe/lol-static-assets/sounds/sfx-uikit-button-circlegold-hover.ogg",
            },
            searchErrorLeaverBusterQueueDelay: i.Ember.computed.equal(
              "searchErrorType",
              p,
            ),
            searchErrorLeaverBusterQueueLockout: i.Ember.computed.equal(
              "searchErrorType",
              h,
            ),
            confirmButtonShowTooltip: i.Ember.computed(
              "displayNotLeaderTooltip",
              "hasPenaltyTime",
              "searchErrorLeaverBusterQueueDelay",
              "isPremadeRestrictedFives",
              "isInQueue",
              "patcherService.isConnected",
              "hasQueueAvailabilityWarning",
              "showingState.isShowingGameSelect",
              "lobbiesService.canStartMatchmaking",
              "lobbiesService.premadeSizeAllowed",
              "lobbiesService.hasLobbyRestrictions",
              "customGamesService.isCustomUI",
              function () {
                return (
                  !(
                    !this.get("displayNotLeaderTooltip") &&
                    !this.get("isPremadeRestrictedFives") &&
                    this.get("patcherService.isConnected")
                  ) ||
                  !(
                    !this.get("hasPenaltyTime") ||
                    this.get("searchErrorLeaverBusterQueueDelay") ||
                    this.get("showingState.isShowingGameSelect") ||
                    this.get("customGamesService.isCustomUI")
                  ) ||
                  !(
                    this.get("isInQueue") ||
                    this.get("lobbiesService.canStartMatchmaking") ||
                    !this.get("lobbiesService.premadeSizeAllowed")
                  ) ||
                  !!this.get("hasQueueAvailabilityWarning")
                );
              },
            ),
            confirmButtonTooltipText: i.Ember.computed(
              "displayNotLeaderTooltip",
              "hasPenaltyTime",
              "queueErrorMessage",
              "customGamesService.isCustomUI",
              "isPremadeRestrictedFives",
              "patcherService.isConnected",
              "lobbiesService.canStartMatchmaking",
              "hasQueueAvailabilityWarning",
              "tra.metadata",
              "tra.ready",
              "tra.parties_find_match_wait_for_captain",
              "tra.parties_start_game_wait_for_captain",
              "tra.parties_position_select_members_required_tooltip",
              "tra.parties_patcher_not_connected",
              "tra.parties_premade_size_five_restriction",
              "lobbiesService.hasLobbyRestrictions",
              function () {
                let e = "";
                return (
                  this.get("patcherService.isConnected") ||
                    (e = i.tra.get("parties_patcher_not_connected")),
                  this.get("hasRankedDivisionRestriction")
                    ? (e = this.get(
                        "tra.game_select_queue_restriction_party_teamdivisionrestriction",
                      ))
                    : this.get("isPremadeRestrictedFives")
                      ? (e = this.get(
                          "tra.parties_premade_size_five_restriction",
                        ))
                      : this.get("lobbiesService.canStartMatchmaking") ||
                        (e = this.get("readyWarning")
                          ? this.get("readyWarning")
                          : this.get(
                              "tra.parties_position_select_members_required_tooltip",
                            )),
                  this.get("displayNotLeaderTooltip")
                    ? (e = this.get("customGamesService.isCustomUI")
                        ? this.get("tra.parties_start_game_wait_for_captain")
                        : this.get("tra.parties_find_match_wait_for_captain"))
                    : this.get("hasPenaltyTime") &&
                      (e = this.get("queueErrorMessage")),
                  this.get("hasQueueAvailabilityWarning")
                    ? this.get("queueAvailabilityWarningTooltip")
                    : e.replace(/\n/, "<br>")
                );
              },
            ),
            closeButtonDisabled: i.Ember.computed.or("animationLock"),
            closeButtonText: i.Ember.computed(
              "tra.ready",
              "tra.parties_button_quit",
              "tra.parties_button_quit_matchmaking",
              "isInQueue",
              function () {
                return this.get("isInQueue")
                  ? this.get("tra.parties_button_quit_matchmaking")
                  : this.get("tra.parties_button_quit");
              },
            ),
            startMatchmaking: function () {
              this.get("confirmButtonNotThrottled") &&
                (this.set("confirmButtonThrottled", !0),
                (this.enterQueueTimer = i.Telemetry.startTimer(
                  "parties-enter-queue",
                )),
                this.get("lobbiesService")
                  .startMatchmakingSearch()
                  .then(
                    () => {
                      this.set("confirmButtonThrottled", !1);
                    },
                    (e) => {
                      c.default.sendTelemetryEvent("feature_error", {
                        id: "PARTIES_START_MATCHMAKING_ATTEMPT_FAILED",
                        severity: "blocker",
                        message:
                          "failed http post request to /lol-lobby/v2/lobby/matchmaking/search",
                      }),
                        this.set("confirmButtonThrottled", !1),
                        this.set("_isTransitioningState", !1),
                        i.logger.warning(
                          `Start matchmaking search failed: ${e}`,
                        );
                    },
                  ));
            },
            enterQueueTelemetryObserver: i.Ember.observer(
              "isInQueue",
              function () {
                this.get("isInQueue") &&
                  this.enterQueueTimer &&
                  (i.Telemetry.stopAndRecordTimer(this.enterQueueTimer),
                  delete this.enterQueueTimer);
              },
            ),
            cancelMatchmaking: function () {
              this.get("isSearching") &&
                this.get("lobbiesService").cancelMatchmakingSearch();
            },
            customTryToEnterChampSelect: function () {
              return this.checkCustomTeamSizeRestrictions()
                .then(() => this.checkCustomRewards())
                .then(() => this.customEnterChampSelect())
                .catch(() => {
                  this.set("_isTransitioningState", !1);
                });
            },
            checkCustomTeamSizeRestrictions: function () {
              const e = this.get("customGamesService"),
                t = this.get("currentMapId"),
                n = e.findMinPlayersForMap(t),
                s = e.get("minPlayers"),
                o = e.get("currentNumPlayers"),
                a = n > s ? n : s;
              let r = "";
              o < n &&
                (r = this.translate(
                  "custom_game_champ_select_error_min_map_player",
                  { numPlayers: o, minRequired: n },
                )),
                o < s &&
                  (r = this.translate(
                    "custom_game_champ_select_error_min_player",
                    { minPlayers: a },
                  ));
              const l = i.tra.get("parties_kicked_confirmation_ok");
              return o < a
                ? (this.showModal({
                    type: "DialogAlert",
                    data: { contents: r, okText: l },
                  }),
                  Promise.reject())
                : Promise.resolve();
            },
            checkCustomRewards: function () {
              return this.get("hideCustomGameRewardsModal")
                ? Promise.resolve()
                : new Promise((e, t) => {
                    document.activeElement.blur();
                    const n =
                      this.get(
                        "customGamesService",
                      ).getRewardsDisabledReasons();
                    if (!n || 0 === n.length) return void e();
                    const s = [];
                    n.forEach((e) => {
                      const t = `tra.custom_game_rewards_disabled_reason_${e.toLowerCase()}`,
                        n = this.get(t);
                      n && n.length > 0 && s.push(n);
                    }),
                      this.set(
                        "customGameRewardsDisabledReasons",
                        i.Ember.A(s),
                      );
                    const o = this.showModal({
                      type: "DialogConfirm",
                      data: {
                        contents: this.get(
                          "customGameRewardsDisabledModalElement",
                        ),
                        acceptText: this.get(
                          "tra.custom_game_rewards_disabled_confirm_yes",
                        ),
                        declineText: this.get(
                          "tra.custom_game_rewards_disabled_confirm_no",
                        ),
                        onAccept: () => {
                          e();
                        },
                        onDecline: () => {
                          t();
                        },
                      },
                    });
                    o.domNode.classList.add(
                      "parties-custom-game-rewards-disabled-modal",
                    );
                    const a = o.domNode.querySelector(".button-accept");
                    a && a.focus();
                  });
            },
            enterChampSelectLockTime: 300,
            customEnterChampSelect: function () {
              return (
                this.set("confirmButtonThrottled", !0),
                this.get("customGamesService")
                  .enterChampSelect()
                  .then(
                    () => {
                      this.set("_isTransitioningState", !1),
                        this.runTask(() => {
                          this.set("confirmButtonThrottled", !1);
                        }, this.get("enterChampSelectLockTime"));
                    },
                    (e) => {
                      this.set("confirmButtonThrottled", !1),
                        this.handleCustomGameChampSelectError(e);
                    },
                  )
              );
            },
            handleCustomGameChampSelectError: function (e) {
              i.logger.warning(
                `Custom game encountered error when entering champ select: ${e}`,
              );
              const t = this.determineCustomGameErrorBody(e);
              this.set("customGameChampSelectErrorBody", t);
              const n = i.tra.get("parties_kicked_confirmation_ok");
              this.showModal({
                type: "DialogAlert",
                data: {
                  contents: this.get("customGameChampSelectErrorElement"),
                  okText: n,
                },
              }).domNode.classList.add(
                "parties-custom-game-champ-select-errors-modal",
              ),
                this.set("_isTransitioningState", !1),
                this.set("customGamesService.preventTeamChanges", !1);
            },
            aggregateCustomChampSelectErrorReasons: function (e) {
              if (!e.data) return {};
              let t = {};
              if (e.data.failedPlayers && e.data.failedPlayers.length)
                for (let n = 0; n < e.data.failedPlayers.length; n++) {
                  const i = e.data.failedPlayers[n];
                  t[i.reason] || (t[i.reason] = []),
                    t[i.reason].push(i.summonerName);
                }
              return (
                (t = this.aggregateCustomChampSelectErrorByStatus(e, t)), t
              );
            },
            aggregateCustomChampSelectErrorByStatus: function (e, t) {
              if (e.data.httpStatus)
                switch (e.data.httpStatus) {
                  case 435:
                    t.GAME_MODE_NOT_SUPPORTED = !0;
                    break;
                  case 436:
                    let n = !0;
                    if (e.data.message) {
                      const t = e.data.message.match(/([0-9]+) required/);
                      t && (n = t[1]);
                    }
                    t.NOT_ENOUGH_PLAYERS_FOR_MAP = n;
                }
              return t;
            },
            determineCustomGameErrorBody: function (e) {
              let t = "";
              const n = this.aggregateCustomChampSelectErrorReasons(e);
              if (
                (this.set("customGameChampSelectErrorPlayers", i.Ember.A()),
                this.set("showCustomGameMinorRestrictionDetails", !1),
                n.RANKED_NUM_CHAMPS)
              )
                (t = this.get(
                  "tra.custom_game_champ_select_error_min_champions",
                )),
                  this.set(
                    "customGameChampSelectErrorPlayers",
                    i.Ember.A(n.RANKED_NUM_CHAMPS),
                  );
              else if (
                n.MINOR_RESTRICTED ||
                n.PARENTAL_CONTROL_RESTRICTION ||
                n.TIME_PLAYED_RESTRICTION
              ) {
                t = this.get(
                  "tra.custom_game_champ_select_error_generic_player_restriction",
                );
                const e = i.tra.metadata().locale.id.substr(0, 2).toLowerCase(),
                  s = i.lodash
                    .union(
                      n.MINOR_RESTRICTED,
                      n.PARENTAL_CONTROL_RESTRICTION,
                      n.TIME_PLAYED_RESTRICTION,
                    )
                    .sort((t, n) => t.localeCompare(n, e));
                this.set("customGameChampSelectErrorPlayers", i.Ember.A(s)),
                  this.set("showCustomGameMinorRestrictionDetails", !0);
              } else if (n.NOT_ENOUGH_PLAYERS_FOR_MAP)
                if (!0 === n.NOT_ENOUGH_PLAYERS_FOR_MAP)
                  t = this.get(
                    "tra.custom_game_champ_select_error_min_player_unknown_required",
                  );
                else {
                  const e =
                    this.get("customGamesService").get("currentNumPlayers");
                  t = this.translate(
                    "custom_game_champ_select_error_min_map_player",
                    {
                      numPlayers: e,
                      minRequired: n.NOT_ENOUGH_PLAYERS_FOR_MAP,
                    },
                  );
                }
              else
                t = n.GAME_MODE_NOT_SUPPORTED
                  ? this.get(
                      "tra.custom_game_champ_select_error_game_mode_unsupported",
                    )
                  : this.get("tra.custom_game_champ_select_error_unknown");
              return t;
            },
            leavePartyModal: function () {
              if (this.get("currentPartySize") > 1) {
                this.showModal({
                  type: "DialogConfirm",
                  data: {
                    contents: this.get("tra.parties_leave_confirmation_text"),
                    acceptText: this.get("tra.parties_leave_confirmation_yes"),
                    declineText: this.get("tra.parties_leave_confirmation_no"),
                    onAccept: () => {
                      this.leaveParty();
                    },
                  },
                }).domNode.classList.add("parties-leave-party-modal");
              } else this.leaveParty();
            },
            confirmButtonClicked: function () {
              this.set("_isTransitioningState", !0),
                this.get("customGamesService.isCustom")
                  ? this.customTryToEnterChampSelect()
                  : this.startMatchmaking();
            },
            _hasClickedCloseDuringTransition: !1,
            handleCloseDuringTransition: i.Ember.computed(
              "_hasClickedCloseDuringTransition",
              "isSearching",
              "isMatchFound",
              "hasPenaltyTime",
              function () {
                (this.get("isSearching") ||
                  this.get("isMatchFound") ||
                  this.get("hasPenaltyTime")) &&
                  (this.set("_isTransitioningState", !1),
                  this.get("_hasClickedCloseDuringTransition") &&
                    (this.set("_hasClickedCloseDuringTransition", !1),
                    this.cancelMatchmaking()));
              },
            ),
            lobbyAvailabilityMatchmakingObserver: i.Ember.observer(
              "hasQueueAvailabilityWarning",
              "isSearching",
              function () {
                this.get("hasQueueAvailabilityWarning") &&
                  this.get("isSearching") &&
                  this.get("lobbiesService").cancelMatchmakingSearch();
              },
            ),
            closeButtonClicked: function () {
              this.blurCloseButton(),
                this.get("isSearching") || this.get("isMatchFound")
                  ? this.cancelMatchmaking()
                  : this.get("_isTransitioningState")
                    ? (this.set("_hasClickedCloseDuringTransition", !0),
                      this.get("lobbiesService")
                        .leaveLobby()
                        .catch((e) => {
                          i.logger.warning(`Leaving lobby failed: ${e}`),
                            this.set("_isTransitioningState", !1);
                        }))
                    : this.leavePartyModal();
            },
            blurCloseButton: function () {
              const e = this.element.querySelector("button.close");
              e && e.blur();
            },
            teamPlannerEnabled: i.Ember.computed(
              "TeamPlanner",
              () => i.TeamPlanner && i.TeamPlanner.getEnabled(),
            ),
            teamPlannerButtonAssets: i.Ember.computed.alias(
              "assetsService.teamPlannerButtonAssets",
            ),
            actions: {
              confirmButton: function () {
                this.confirmButtonClicked();
              },
              closeButton: function () {
                this.closeButtonClicked();
              },
              showTeamPlanner: function () {
                i.TeamPlanner && i.TeamPlanner.show("tft-lobby");
              },
            },
          },
        );
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "vjUay/Hy",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-footer-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-footer-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-footer-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","tft-center-container"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","tft-close-button-container"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","tft-close-button"],["flush-element"],["text","\\n      "],["append",["helper",["generic-button"],null,[["onClick","baseImgPath","overImgPath","downImgPath","onClickSound","onHoverSound"],[["helper",["action"],[["get",[null]],"closeButton"],null],"/fe/lol-parties/button-x.png","/fe/lol-parties/button-x-over.png","/fe/lol-parties/button-x-down.png",["get",["buttonSounds","closeClick"]],["get",["buttonSounds","closeHover"]]]]],false],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","tft-find-match-button-container"],["flush-element"],["text","\\n"],["block",["unless"],[["get",["animationsEnabled"]]],null,9,8],["text","    "],["open-element","div",[]],["static-attr","class","left-wing"],["flush-element"],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","right-wing"],["flush-element"],["close-element"],["text","\\n"],["block",["if"],[["get",["confirmButtonShowTooltip"]]],null,7],["text","  "],["close-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","team-planner-button-container"],["flush-element"],["text","\\n"],["block",["if"],[["get",["teamPlannerEnabled"]]],null,5],["text","  "],["close-element"],["text","\\n"],["close-element"],["text","\\n\\n"],["open-element","span",[]],["dynamic-attr","data-eligibility-observer",["concat",[["unknown",["eligibilityObserver"]]]]],["flush-element"],["close-element"],["text","\\n"],["open-element","span",[]],["dynamic-attr","data-showing-party-observer",["concat",[["unknown",["showingPartyObserver"]]]]],["flush-element"],["close-element"],["text","\\n"],["open-element","span",[]],["dynamic-attr","data-close-transition-observer",["concat",[["unknown",["handleCloseDuringTransition"]]]]],["flush-element"],["close-element"],["text","\\n"],["open-element","div",[]],["static-attr","style","display:none;"],["flush-element"],["text","\\n  "],["open-element","lol-uikit-content-block",[]],["static-attr","class","custom-games-error"],["static-attr","id","custom-games-disabled-reasons"],["static-attr","type","dialog-medium"],["flush-element"],["text","\\n"],["block",["if"],[["get",["showCustomGameContentWarning"]]],null,4,3],["text","  "],["close-element"],["text","\\n  "],["open-element","lol-uikit-content-block",[]],["static-attr","class","custom-games-error"],["static-attr","id","custom-games-champ-select-error"],["static-attr","type","dialog-medium"],["flush-element"],["text","\\n    "],["open-element","h5",[]],["static-attr","class","preserve-case"],["flush-element"],["append",["unknown",["tra","custom_game_champ_select_error_start_game"]],false],["close-element"],["text","\\n    "],["open-element","p",[]],["flush-element"],["append",["unknown",["customGameChampSelectErrorBody"]],false],["close-element"],["text","\\n    "],["open-element","ul",[]],["flush-element"],["text","\\n"],["block",["each"],[["get",["customGameChampSelectErrorPlayers"]]],null,1],["text","    "],["close-element"],["text","\\n"],["block",["if"],[["get",["showCustomGameMinorRestrictionDetails"]]],null,0],["text","  "],["close-element"],["text","\\n"],["close-element"],["text","\\n\\n"],["append",["helper",["matchmaking-errors"],null,[["_isTransitioningState"],[["get",["_isTransitioningState"]]]]],false],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","custom-games-minor-restriction-details"],["flush-element"],["text","\\n        "],["open-element","p",[]],["flush-element"],["append",["unknown",["tra","custom_game_minor_restriction_details_header"]],false],["close-element"],["text","\\n        "],["open-element","ul",[]],["flush-element"],["text","\\n          "],["open-element","li",[]],["flush-element"],["append",["unknown",["tra","custom_game_minor_restriction_details_real_name_auth"]],false],["close-element"],["text","\\n          "],["open-element","li",[]],["flush-element"],["append",["unknown",["tra","custom_game_minor_restriction_details_healthy_time"]],false],["close-element"],["text","\\n          "],["open-element","li",[]],["flush-element"],["append",["unknown",["tra","custom_game_minor_restriction_details_harmful_behavior"]],false],["close-element"],["text","\\n        "],["close-element"],["text","\\n        "],["open-element","p",[]],["flush-element"],["text","\\n          "],["append",["unknown",["tra","custom_game_minor_restriction_details_footer_text_before_link"]],false],["text","\\n          "],["open-element","a",[]],["static-attr","href","http://lol.qq.com/jksh"],["static-attr","target","_blank"],["flush-element"],["text","http://lol.qq.com/jksh"],["close-element"],["text","\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","li",[]],["flush-element"],["append",["get",["player"]],false],["close-element"],["text","\\n"]],"locals":["player"]},{"statements":[["text","        "],["open-element","li",[]],["flush-element"],["append",["get",["reason"]],false],["close-element"],["text","\\n"]],"locals":["reason"]},{"statements":[["text","      "],["open-element","h5",[]],["static-attr","class","preserve-case"],["flush-element"],["append",["unknown",["tra","custom_game_rewards_disabled_header"]],false],["close-element"],["text","\\n      "],["open-element","p",[]],["flush-element"],["append",["unknown",["tra","custom_game_rewards_disabled_question"]],false],["close-element"],["text","\\n      "],["open-element","p",[]],["flush-element"],["append",["unknown",["tra","custom_game_rewards_disabled_reasons_header"]],false],["close-element"],["text","\\n      "],["open-element","ul",[]],["flush-element"],["text","\\n"],["block",["each"],[["get",["customGameRewardsDisabledReasons"]]],null,2],["text","      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","ul",[]],["flush-element"],["text","\\n        "],["open-element","li",[]],["flush-element"],["append",["unknown",["tra","custom_game_training_content_warning"]],false],["close-element"],["text","\\n        "],["open-element","li",[]],["flush-element"],["append",["unknown",["tra","custom_game_training_rewards_warning"]],false],["close-element"],["text","\\n        "],["open-element","br",[]],["flush-element"],["close-element"],["text","\\n        "],["open-element","p",[]],["flush-element"],["append",["unknown",["tra","custom_game_training_question"]],false],["close-element"],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","team-planner-button"],["flush-element"],["text","\\n      "],["append",["helper",["generic-button"],null,[["onClick","baseBgPath","overBgPath","downBgPath","disabledBgPath","baseImgPath","downImgPath","disabledImgPath","onClickSound","onHoverSound"],[["helper",["action"],[["get",[null]],"showTeamPlanner"],null],"/fe/lol-parties/button-bg.png","/fe/lol-parties/button-bg-over.png","/fe/lol-parties/button-bg-down.png","/fe/lol-parties/button-bg-disabled.png",["get",["teamPlannerButtonAssets","team-planner-icon-lobby"]],["get",["teamPlannerButtonAssets","team-planner-icon-clicked"]],["get",["teamPlannerButtonAssets","team-planner-icon-disabled"]],["get",["buttonSounds","teamPlannerClick"]],["get",["buttonSounds","teamPlannerHover"]]]]],false],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n          "],["open-element","p",[]],["flush-element"],["text","\\n            "],["append",["unknown",["confirmButtonTooltipText"]],false],["text","\\n          "],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["uikit-tooltip"],null,[["tooltipPosition","type"],["top","system"]],6]],"locals":[]},{"statements":[["text","      "],["append",["helper",["animated-find-match-button"],null,[["confirmButton","baseImgPath","overImgPath","downImgPath","disabledImgPath","buttonText","onClickSound","onHoverSound","disabledStyle","clickedStyle","isEnabled"],["confirmButton","/fe/lol-static-assets/images/buttons/find_match_default.png","/fe/lol-static-assets/images/buttons/find_match_hover.png","/fe/lol-static-assets/images/buttons/find_match_active.png","/fe/lol-parties/button-find-match-disabled.png",["get",["confirmButtonText"]],["get",["buttonSounds","confirmClick"]],["get",["buttonSounds","confirmHover"]],"color: grey","color: #005A82",["get",["confirmButtonEnabled"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["append",["helper",["generic-button"],null,[["onClick","baseImgPath","overImgPath","downImgPath","disabledImgPath","upText","overText","downText","disabledText","onClickSound","onHoverSound","disabledStyle","isEnabled"],[["helper",["action"],[["get",[null]],"confirmButton"],null],"/fe/lol-parties/button-find-match.png","/fe/lol-parties/button-find-match-over.png","/fe/lol-parties/button-find-match-down.png","/fe/lol-parties/button-find-match-disabled.png",["get",["confirmButtonText"]],["get",["confirmButtonText"]],["get",["confirmButtonText"]],["get",["confirmButtonText"]],["get",["buttonSounds","confirmClick"]],["get",["buttonSounds","confirmHover"]],"color: grey",["get",["confirmButtonEnabled"]]]]],false],["text","\\n"]],"locals":[]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1),
          s = n(216),
          o = r(n(197));
        n(234);
        var a = r(n(95));
        function r(e) {
          return e && e.__esModule ? e : { default: e };
        }
        const l = "companion",
          c = "summonerIcon",
          m = (0, i.emberDataBinding)({
            Ember: i.Ember,
            websocket: (0, i.getProvider)().getSocket(),
            logPrefix: "party:tft-player-card",
            basePaths: {
              regalia: "/lol-regalia",
              gameData: "/lol-game-data",
              ranked: "/lol-ranked",
              cosmetics: "/lol-cosmetics",
              riotclient: "/riotclient",
            },
            boundProperties: {
              regaliaHash: {
                api: "regalia",
                path: "/v2/summoners/{{summonerId}}/regalia/async",
              },
              _rankedData: {
                api: "ranked",
                path: "/v1/ranked-stats/{{puuid}}",
              },
              _profileIcons: {
                api: "gameData",
                path: "/assets/v1/summoner-icons.json",
              },
              _companions: {
                api: "cosmetics",
                path: "/v1/inventories/tft/companions",
              },
              region: { api: "riotclient", path: "/region-locale" },
            },
          }),
          u = 1e4;
        e.exports = i.Ember.Component.extend(m, o.default, {
          layout: n(235),
          classNames: ["tft-player-card"],
          classNameBindings: [
            "isMe:tft-player-card-self",
            "isPlaceholder:tft-player-placeholder",
            "isInvited:tft-player-invited",
            "isNotReady:tft-player-not-ready",
            "isFullCard:tft-player-card-full",
          ],
          member: null,
          isMe: !1,
          isInQueue: !1,
          isInvited: !1,
          isPlaceholder: !1,
          lobbiesService: i.Ember.inject.service("lobbies"),
          matchmakingService: i.Ember.inject.service("matchmaking"),
          tftCosmeticsService: i.Ember.inject.service("tft-cosmetics"),
          summonerId: i.Ember.computed.alias("member.summonerId"),
          puuid: i.Ember.computed.alias("member.puuid"),
          summonerLevel: i.Ember.computed.alias("member.summonerLevel"),
          queueType: i.Ember.computed.alias("selected.queue.type"),
          settingsService: i.Ember.inject.service("party-settings"),
          myIconOverride: i.Ember.computed.alias(
            "settingsService.iconOverride",
          ),
          currentQueue: i.Ember.computed(
            "_rankedData.queues.@each.queueType",
            function () {
              const e = this.get("_rankedData.queues"),
                t = this.get("queueType");
              if (e && t)
                for (let n = 0; n < e.length; n++)
                  if (e[n].queueType === t) return e[n];
              return {};
            },
          ),
          highestRankedQueue: i.Ember.computed(
            "_rankedData.queues.@each.queueType",
            function () {
              return (
                (this.get("_rankedData.queues") || []).find((e) =>
                  s.QUEUES.RANKED_TFT_QUEUE_TYPES.includes(e.queueType),
                ) || {}
              );
            },
          ),
          isReady: i.Ember.computed.equal("member.ready", !0),
          isSearching: i.Ember.computed.alias("matchmakingService.isSearching"),
          isReadyOrSearching: i.Ember.computed.or("isReady", "isSearching"),
          isNotReady: i.Ember.computed.not("isReady"),
          rankedTier: i.Ember.computed(
            "currentQueue.tier",
            "isRatedQueue",
            "highestRankedQueue.tier",
            function () {
              return this.get("isRatedQueue")
                ? this.get("highestRankedQueue.tier")
                : this.get("currentQueue.tier");
            },
          ),
          isRanked: i.Ember.computed(
            "rankedTier",
            "queueType",
            "isRatedQueue",
            "highestRankedQueue",
            function () {
              const e = this.get("rankedTier");
              return (
                (this.get("isRatedQueue") ||
                  s.QUEUES.RANKED_TFT_QUEUE_TYPES.includes(
                    this.get("queueType"),
                  )) &&
                e &&
                e !== i.LeagueTierNames.getConstants().TIER_NAME_NONE
              );
            },
          ),
          isRatedQueue: i.Ember.computed("queueType", function () {
            return s.QUEUES.RATED_TFT_QUEUE_TYPES.includes(
              this.get("queueType"),
            );
          }),
          isRated: i.Ember.computed(
            "currentQueue",
            "isRatedQueue",
            "queueType",
            function () {
              return (
                this.get("isRatedQueue") &&
                "NONE" !== this.get("currentQueue").ratedTier
              );
            },
          ),
          showRanked: i.Ember.computed.and("isRanked", "isReadyOrSearching"),
          showRankedOrRated: i.Ember.computed.or("isRanked", "isRated"),
          rankedDivision: i.Ember.computed(
            "currentQueue.division",
            "isRatedQueue",
            "highestRankedQueue.division",
            function () {
              return this.get("isRatedQueue")
                ? this.get("highestRankedQueue.division")
                : this.get("currentQueue.division");
            },
          ),
          rankedLeaguePoints: i.Ember.computed(
            "currentQueue.leaguePoints",
            "isRatedQueue",
            "highestRankedQueue.leaguePoints",
            function () {
              return this.get("isRatedQueue")
                ? this.get("highestRankedQueue.leaguePoints")
                : this.get("currentQueue.leaguePoints");
            },
          ),
          rankedTierAndDivisionText: i.Ember.computed(
            "rankedTier",
            "rankedDivision",
            function () {
              const e = this.get("rankedTier"),
                t = this.get("rankedDivision");
              return "NONE" === e
                ? ""
                : i.LeagueTierNames.getFullTierDivisionName(e, t);
            },
          ),
          rankedIcon: i.Ember.computed("rankedTier", function () {
            const e = this.get("rankedTier");
            return i.LeagueTierNames.getRankedMiniRegaliaSvg(e);
          }),
          rankedLeaguePointsText: i.Ember.computed(
            "rankedLeaguePoints",
            "rankedTier",
            function () {
              if ("NONE" === this.get("rankedTier")) return "";
              const e = this.get("rankedLeaguePoints");
              return this.get("tra.formatString")("ranked_lp", {
                num_points: e,
              });
            },
          ),
          showRated: i.Ember.computed.and("isRated", "isReadyOrSearching"),
          ratedRating: i.Ember.computed.alias("currentQueue.ratedRating"),
          ratedTier: i.Ember.computed.alias("currentQueue.ratedTier"),
          ratiedTierIcon: i.Ember.computed(
            "ratedTier",
            "queueType",
            function () {
              const e = this.get("ratedTier"),
                t = this.get("queueType");
              return i.LeagueTierNames.getTFTRatedMiniBadge(e, t);
            },
          ),
          iconOverride: i.Ember.computed(
            "chatIconOverride",
            "myIconOverride",
            function () {
              return this.get("isMe")
                ? this.get("myIconOverride")
                : this.get("chatIconOverride");
            },
          ),
          hasSummonerIcon: i.Ember.computed("profileIconId", function () {
            return (
              this.get("profileIconId") !== s.SOCIAL.DEFAULT_SUMMONER_ICON_ID
            );
          }),
          showIconToggle: i.Ember.computed.and("hasSummonerIcon", "isMe"),
          allIconUrls: i.Ember.computed.alias(
            "tftCosmeticsService.companionIconUrls",
          ),
          hasCompanion: i.Ember.computed(
            "companionIconId",
            "_companions.defaultItemId",
            function () {
              const e = this.get("_companions.defaultItemId"),
                t = this.get("companionIconId");
              return t && t !== e;
            },
          ),
          shouldShowSummonerIcon: i.Ember.computed(
            "hasCompanion",
            "hasSummonerIcon",
            "iconOverride",
            function () {
              const e = this.get("iconOverride");
              return (
                !(e === l || !this.get("hasSummonerIcon")) &&
                (e === c || !this.get("hasCompanion"))
              );
            },
          ),
          shouldShowSummonerLevel: i.Ember.computed(
            "shouldShowSummonerIcon",
            "isMe",
            "isFullCard",
            function () {
              return (
                this.get("shouldShowSummonerIcon") &&
                (this.get("isMe") || this.get("isFullCard"))
              );
            },
          ),
          equippedCompanionIconId: i.Ember.computed.alias(
            "tftCosmeticsService.equippedCompanion.itemId",
          ),
          displayedIcon: i.Ember.computed(
            "shouldShowSummonerIcon",
            "allIconUrls",
            "profileIconUrl",
            "equippedCompanionIconId",
            "companionIconId",
            "isMe",
            function () {
              const e = this.get("profileIconUrl"),
                t =
                  this.get("allIconUrls")[
                    this.get("isMe")
                      ? this.get("equippedCompanionIconId")
                      : this.get("companionIconId")
                  ];
              return this.get("shouldShowSummonerIcon") ? e : t;
            },
          ),
          showCosmetics: i.Ember.computed.or("isMe", "isFullCard"),
          shouldEnableRandomize: !0,
          shouldShowRandomize: i.Ember.computed.and(
            "isMe",
            "tftCosmeticsService.isTFTRandomizeLoadoutsEnabled",
          ),
          isLeader: i.Ember.computed(
            "member.isLeader",
            "lobbiesService.otherCurrentPartyMembers.@each.isLeader",
            function () {
              const e = this.get("member");
              return !!e && e.isLeader;
            },
          ),
          setIconOverride: function (e) {
            this.set("myIconOverride", e);
          },
          randomizerCooldownPercentage: 0,
          shouldShowRandomizerCooldown: i.Ember.computed.gt(
            "randomizerCooldownPercentage",
            0,
          ),
          updateRandomizerCooldownPercentage: function () {
            const e = new Date() - this.get("randomizeCooldownStart"),
              t = u - e;
            t > 0
              ? (this.set("randomizerCooldownPercentage", 100 - (t / u) * 100),
                i.Ember.run.later(
                  () => this.updateRandomizerCooldownPercentage(),
                  50,
                ))
              : this.set("randomizerCooldownPercentage", 0);
          },
          actions: {
            showInviteModal: function () {
              this.get("partyInvitesAllowed") &&
                this.sendAction("showInviteModal");
            },
            handleMouseOver: function () {
              this.get("hasSummonerIcon") &&
                this.get("isMe") &&
                i.Audio.getChannel(a.default.SFX_CHANNEL).playSound(
                  a.default.SFX_URLS.SFX_COMPANION_PICKER_HOVER,
                );
            },
            iconClick: function () {
              if (this.get("hasSummonerIcon") && this.get("isMe")) {
                const e = this.get("iconOverride");
                switch (
                  (i.Audio.getChannel(a.default.SFX_CHANNEL).playSound(
                    a.default.SFX_URLS.SFX_COMPANION_PICKER_CLICK,
                  ),
                  e)
                ) {
                  case l:
                    this.setIconOverride(c);
                    break;
                  case c:
                    this.setIconOverride(l);
                    break;
                  default:
                    this.setIconOverride(this.get("hasCompanion") ? c : l);
                }
              }
            },
            randomizeLoadout: function () {
              this.get("shouldEnableRandomize") &&
                (this.get("tftCosmeticsService").randomizeAll(),
                this.set("shouldEnableRandomize", !1),
                i.Telemetry.sendCustomData("TFT_randomize_loadouts", {
                  party_id: this.get("lobbiesService.partyId"),
                  shard_id: this.get("region.region"),
                  queue_id: this.get("selected.queue.id"),
                }),
                this.set("randomizeCooldownStart", new Date()),
                i.Ember.run.later(
                  () => this.updateRandomizerCooldownPercentage(),
                  50,
                ),
                i.Ember.run.later(
                  () => this.set("shouldEnableRandomize", !0),
                  u,
                ));
            },
          },
        });
      },
      (e, t, n) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          Object.defineProperty(t, "PAW", {
            enumerable: !0,
            get: function () {
              return i.default;
            },
          }),
          Object.defineProperty(t, "PROFILE_PRIVACY", {
            enumerable: !0,
            get: function () {
              return l.default;
            },
          }),
          Object.defineProperty(t, "QUEUES", {
            enumerable: !0,
            get: function () {
              return s.default;
            },
          }),
          Object.defineProperty(t, "REWARD_TRACKER", {
            enumerable: !0,
            get: function () {
              return o.default;
            },
          }),
          Object.defineProperty(t, "SETTINGS", {
            enumerable: !0,
            get: function () {
              return r.default;
            },
          }),
          Object.defineProperty(t, "SOCIAL", {
            enumerable: !0,
            get: function () {
              return a.default;
            },
          }),
          Object.defineProperty(t, "TIME", {
            enumerable: !0,
            get: function () {
              return c.default;
            },
          });
        var i = m(n(217)),
          s = m(n(228)),
          o = m(n(229)),
          a = m(n(230)),
          r = m(n(231)),
          l = m(n(232)),
          c = m(n(233));
        function m(e) {
          return e && e.__esModule ? e : { default: e };
        }
      },
      (e, t, n) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.default = void 0);
        var i = p(n(218)),
          s = p(n(219)),
          o = p(n(220)),
          a = p(n(221)),
          r = p(n(222)),
          l = p(n(223)),
          c = p(n(224)),
          m = p(n(225)),
          u = p(n(226)),
          d = p(n(227));
        function p(e) {
          return e && e.__esModule ? e : { default: e };
        }
        var h = {
          COMPONENT_TYPES: i.default,
          CURRENCY_TYPES: s.default,
          INVENTORY_TYPES: o.default,
          MEDIA_TYPES: a.default,
          MEDIA_LOAD_TYPES: r.default,
          MODAL_TYPES: l.default,
          OFFER_PURCHASE_STATES: c.default,
          OFFER_VALIDATION_STATES: m.default,
          SCROLL_LIST_DISPLAY_TYPES: u.default,
          TEMPLATE_TYPES: d.default,
        };
        t.default = h;
      },
      (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.default = void 0);
        var n = {
          TEXT: "TEXT",
          TITLE_SUBTITLE: "TITLE_SUBTITLE",
          PURCHASE: "PURCHASE",
          MEDIA: "MEDIA",
          IMAGE_CAROUSEL: "IMAGE_CAROUSEL",
          SCROLL_LIST: "SCROLL_LIST",
          VERTICAL_LIST: "VERTICAL_LIST",
        };
        t.default = n;
      },
      (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.default = void 0);
        var n = { RP: "RP", IP: "IP", BE: "lol_blue_essence" };
        t.default = n;
      },
      (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.default = void 0);
        var n = {
          CHAMPION: "CHAMPION",
          CHAMPION_SKIN: "CHAMPION_SKIN",
          WARD_SKIN: "WARD_SKIN",
          BATTLE_BOOST: "BATTLE_BOOST",
          GIFT: "GIFT",
          MYSTERY: "MYSTERY",
          BUNDLES: "BUNDLES",
          SUMMONER_ICON: "SUMMONER_ICON",
          STATSTONE: "STATSTONE",
        };
        t.default = n;
      },
      (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.default = void 0);
        var n = { SVG: "SVG", IMAGE: "IMAGE", VIDEO: "VIDEO" };
        t.default = n;
      },
      (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.default = void 0);
        var n = {
          LOCAL_ASSET: "LOCAL_ASSET",
          EXTERNAL_URL: "EXTERNAL_URL",
          GAME_DATA: "GAME_DATA",
        };
        t.default = n;
      },
      (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.default = void 0);
        var n = {
          CHAMPION_MODAL: "CHAMPION_MODAL",
          SKIN_VIEWER_MODAL: "SKIN_VIEWER_MODAL",
          MULTIPLE_PURCHASE_MODAL: "MULTIPLE_PURCHASE_MODAL",
          CHROMA_MODAL: "CHROMA_MODAL",
          CHROMA_BUNDLE_MODAL: "CHROMA_BUNDLE_MODAL",
          SUMMONER_ICON_MODAL: "SUMMONER_ICON_MODAL",
          WARD_SKIN_MODAL: "WARD_SKIN_MODAL",
          SKIN_WITH_DEPENDENCY_MODAL: "SKIN_WITH_DEPENDENCY_MODAL",
          PAW_GENERIC_MODAL: "PAW_GENERIC_MODAL",
        };
        t.default = n;
      },
      (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.default = void 0);
        var n = {
          NOT_STARTED: "NOT_STARTED",
          IN_PROGRESS: "IN_PROGRESS",
          SUCCESS: "SUCCESS",
          FAIL: "FAIL",
        };
        t.default = n;
      },
      (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.default = void 0);
        var n = {
          NOT_STARTED: "NOT_STARTED",
          IN_PROGRESS: "IN_PROGRESS",
          COMPLETED: "COMPLETED",
        };
        t.default = n;
      },
      (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.default = void 0);
        var n = {
          EXPANDED: "EXPANDED",
          COMPACT: "COMPACT",
          DETAILED: "DETAILED",
        };
        t.default = n;
      },
      (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.default = void 0);
        var n = { LARGE_TWO_COLUMN_LANDSCAPE: "LARGE_TWO_COLUMN_LANDSCAPE" };
        t.default = n;
      },
      (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.default = void 0);
        const n = "RANKED_SOLO_5x5",
          i = "RANKED_FLEX_SR",
          s = "RANKED_FLEX_TT",
          o = "CHERRY",
          a = "RANKED_TFT",
          r = "RANKED_TFT_DOUBLE_UP",
          l = "RANKED_TFT_TURBO",
          c = "RANKED_TFT_PAIRS",
          m = [n, i],
          u = [...m, s],
          d = [o],
          p = [a, r],
          h = [l, c],
          g = [...p, ...h],
          b = [...u, ...p],
          f = [...h, ...d];
        var _ = {
          RANKED_SOLO_5x5_QUEUE_TYPE: n,
          RANKED_FLEX_SR_QUEUE_TYPE: i,
          RANKED_FLEX_TT_QUEUE_TYPE: s,
          RANKED_CHERRY_QUEUE_TYPE: o,
          RANKED_TFT_QUEUE_TYPE: a,
          RANKED_TFT_DOUBLE_UP_QUEUE_TYPE: r,
          RANKED_TFT_TURBO_QUEUE_TYPE: l,
          RANKED_TFT_PAIRS_QUEUE_TYPE: c,
          RANKED_LOL_QUEUE_TYPES: u,
          RANKED_SR_QUEUE_TYPES: m,
          RANKED_TFT_QUEUE_TYPES: p,
          RATED_TFT_QUEUE_TYPES: h,
          RANKED_AND_RATED_TFT_QUEUE_TYPES: g,
          ALL_RANKED_QUEUE_TYPES: b,
          ALL_RATED_QUEUE_TYPES: f,
          ALL_RANKED_AND_RATED_QUEUE_TYPES: [...b, ...f],
        };
        t.default = _;
      },
      (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.default = void 0);
        var n = {
          REWARD_TAGS: {
            INSTANT: "Instant",
            RARE: "Rare",
            CHOICE: "Choice",
            MULTIPLE: "Multiple",
          },
          MILESTONE_STAGES: {
            COMPLETED: "completed",
            CURRENT: "current",
            FUTURE: "future",
            HOVERING_COMPLETED: "future-completed",
          },
          REWARD_STATE: {
            LOCKED: "Locked",
            UNLOCKED: "Unlocked",
            UNSELECTED: "Unselected",
            SELECTED: "Selected",
          },
          TRACKER_SIZE: {
            SMALL: "tracker-size-small",
            MEDIUM: "tracker-size-medium",
          },
          REWARD_OPTION_HEADER_TYPE: {
            FREE: "FREE",
            PREMIUM: "PREMIUM",
            NONE: "NONE",
          },
        };
        t.default = n;
      },
      (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.default = void 0);
        var n = { DEFAULT_SUMMONER_ICON_ID: 29 };
        t.default = n;
      },
      (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.default = void 0);
        var n = { AUTO: "auto", ALWAYS: "always", NEVER: "never" };
        t.default = n;
      },
      (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.default = void 0);
        const n = {
            UNKNOWN: "UNKNOWN",
            ENABLED: "ENABLED",
            DISABLED: "DISABLED",
          },
          i = { PRIVATE: "PRIVATE", PUBLIC: "PUBLIC" };
        var s = {
          ProfilePrivacyEnabledState: n,
          ProfilePrivacySetting: i,
          DEFAULT_PROFILE_PRIVACY: {
            enabledState: n.UNKNOWN,
            setting: i.PUBLIC,
          },
        };
        t.default = s;
      },
      (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.default = t.TIME_UNITS = t.TIME_CONVERSIONS = void 0);
        const n = {
          MILLISECONDS: "milliseconds",
          SECONDS: "seconds",
          MINUTES: "minutes",
          HOURS: "hours",
          DAYS: "days",
          WEEKS: "weeks",
          MONTHS: "months",
          YEARS: "years",
        };
        t.TIME_UNITS = n;
        const i = 36e5,
          s = 864e5,
          o = 6048e5,
          a = {
            MILLISECONDS_IN_A_SECOND: 1e3,
            MILLISECONDS_IN_A_MINUTE: 6e4,
            MILLISECONDS_IN_A_HOUR: i,
            MILLISECONDS_IN_A_DAY: s,
            MILLISECONDS_IN_A_WEEK: o,
            MILLISECONDS_IN_A_YEAR: 314496e5,
          };
        t.TIME_CONVERSIONS = a;
        var r = { TIME_UNITS: n, TIME_CONVERSIONS: a };
        t.default = r;
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "JdKp1PJc",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-player-card-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-player-card-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-player-card-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","inner-border-1"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","inner-border-2"],["flush-element"],["text","\\n"],["block",["if"],[["get",["isInvited"]]],null,15,14],["text","  "],["close-element"],["text","\\n"],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","        "],["append",["helper",["tft-player-card-cosmetics"],null,[["isMe","companionIconId","mapSkinIconId","damageSkinIconId","isFullCard"],[["get",["isMe"]],["get",["companionIconId"]],["get",["mapSkinIconId"]],["get",["damageSkinIconId"]],["get",["isFullCard"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["open-element","div",[]],["static-attr","class","rank-wrapper"],["flush-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","rated-tier-icon"],["dynamic-attr","style",["concat",["background-image: url(",["unknown",["ratiedTierIcon"]],");"]]],["flush-element"],["close-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","rated-rating"],["flush-element"],["append",["unknown",["ratedRating"]],false],["close-element"],["text","\\n          "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["open-element","span",[]],["static-attr","class","rank-rated-divider"],["flush-element"],["text","/ "],["close-element"]],"locals":[]},{"statements":[["text","          "],["open-element","div",[]],["static-attr","class","rank-wrapper"],["flush-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","rank-icon"],["dynamic-attr","style",["concat",["background-image: url(",["unknown",["rankedIcon"]],");"]]],["flush-element"],["close-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","rank-name"],["flush-element"],["append",["unknown",["rankedTierAndDivisionText"]],false],["text"," "],["append",["unknown",["rankedLeaguePointsText"]],false],["text"," "],["block",["if"],[["get",["showRated"]]],null,2],["close-element"],["text","\\n          "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","            "],["open-element","div",[]],["static-attr","class","randomize-button__cooldown-overlay"],["dynamic-attr","style",["concat",["-webkit-mask: conic-gradient(rgba(255,255,255,0) ",["unknown",["randomizerCooldownPercentage"]],"%, 0, rgba(255,255,255,1));"]]],["flush-element"],["text","\\n            "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","div",[]],["static-attr","class","randomize-button"],["flush-element"],["text","\\n          "],["append",["helper",["generic-button"],null,[["onClick","isEnabled","baseBgPath","overBgPath","downBgPath","disabledBgPath","baseImgPath","downImgPath","disabledImgPath"],[["helper",["action"],[["get",[null]],"randomizeLoadout"],null],["get",["shouldEnableRandomize"]],"/fe/lol-parties/button-bg.png","/fe/lol-parties/button-bg-over.png","/fe/lol-parties/button-bg-down.png","/fe/lol-parties/button-bg.png","/fe/lol-parties/dice.png","/fe/lol-parties/Dice-Pressed.png","/fe/lol-parties/dice.png"]]],false],["text","\\n"],["block",["if"],[["get",["shouldShowRandomizerCooldown"]]],null,4],["text","        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["open-element","div",[]],["static-attr","class","level-label"],["flush-element"],["append",["unknown",["summonerLevel"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","                "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n                  "],["open-element","p",[]],["flush-element"],["append",["unknown",["tra","tft_icon_tooltip"]],false],["close-element"],["text","\\n                "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["uikit-tooltip"],null,[["tooltipPosition"],["bottom"]],7]],"locals":[]},{"statements":[["block",["if"],[["get",["isMe"]]],null,8]],"locals":[]},{"statements":[["text","      "],["append",["helper",["player-party-controls"],null,[["member","isLeader","isMe","queueId"],[["get",["member"]],["get",["isLeader"]],["get",["isMe"]],["get",["selected","queueId"]]]]],false],["text","\\n\\n      "],["open-element","div",[]],["static-attr","class","icon-wrapper"],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"iconClick"],null],null],["flush-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","icon-image"],["dynamic-attr","style",["concat",["background-image:url(",["unknown",["displayedIcon"]],");"]]],["flush-element"],["text","\\n        "],["close-element"],["text","\\n        "],["open-element","div",[]],["dynamic-attr","onmouseover",["helper",["action"],[["get",[null]],"handleMouseOver"],null],null],["dynamic-attr","class",["concat",["icon-frame ",["helper",["if"],[["get",["showIconToggle"]],"has-toggle",""],null]," ",["helper",["if"],[["get",["shouldShowSummonerIcon"]],"","no-level"],null]]]],["flush-element"],["text","\\n"],["block",["if"],[["get",["hasSummonerIcon"]]],null,9],["text","        "],["close-element"],["text","\\n                \\n"],["block",["if"],[["get",["shouldShowSummonerLevel"]]],null,6],["text","      "],["close-element"],["text","\\n\\n"],["block",["if"],[["get",["shouldShowRandomize"]]],null,5],["text","\\n      "],["open-element","div",[]],["static-attr","class","current-rank"],["flush-element"],["text","\\n"],["block",["if"],[["get",["showRanked"]]],null,3],["block",["if"],[["get",["showRated"]]],null,1],["text","      "],["close-element"],["text","\\n\\n"],["block",["if"],[["get",["showCosmetics"]]],null,0],["text","    "]],"locals":[]},{"statements":[["text","            "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n              "],["open-element","p",[]],["flush-element"],["text","\\n                "],["append",["unknown",["tra","invite_tooltip"]],false],["text","\\n              "],["close-element"],["text","\\n            "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","div",[]],["static-attr","class","placeholder-invite-button"],["flush-element"],["text","\\n"],["block",["player-management-button"],null,[["type","action"],["invite","showInviteModal"]],11],["text","        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["partyInvitesAllowed"]]],null,12]],"locals":[]},{"statements":[["block",["if"],[["get",["isPlaceholder"]]],null,13,10]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","invited-spinner"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        n(237),
          (e.exports = i.Ember.Component.extend({
            layout: n(238),
            classNames: ["cosmetics-section"],
            classNameBindings: [
              "isMe:cosmetics-section-self",
              "isFullCard:cosmetics-section-full",
            ],
            tftCosmeticsService: i.Ember.inject.service("tft-cosmetics"),
            companionIcon: i.Ember.computed(
              "tftCosmeticsService.companionIconUrls",
              "companionIconId",
              function () {
                return this.get("tftCosmeticsService.companionIconUrls")[
                  this.get("companionIconId") || 1
                ];
              },
            ),
            mapSkinIcon: i.Ember.computed(
              "tftCosmeticsService.mapSkinIconUrls",
              "mapSkinIconId",
              function () {
                return this.get("tftCosmeticsService.mapSkinIconUrls")[
                  this.get("mapSkinIconId") || 1
                ];
              },
            ),
            damageSkinIcon: i.Ember.computed(
              "tftCosmeticsService.damageSkinIconUrls",
              "damageSkinIconId",
              function () {
                return this.get("tftCosmeticsService.damageSkinIconUrls")[
                  this.get("damageSkinIconId") || 1
                ];
              },
            ),
          }));
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "rZr+Vjlk",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-player-card-cosmetics-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-player-card-cosmetics-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-player-card-cosmetics-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","cosmetics-wrapper"],["flush-element"],["text","\\n    "],["open-element","div",[]],["flush-element"],["append",["unknown",["tra","tft_companions_label"]],false],["close-element"],["text","\\n"],["block",["if"],[["get",["isMe"]]],null,5,4],["close-element"],["text","\\n"],["open-element","div",[]],["static-attr","class","cosmetics-wrapper"],["flush-element"],["text","\\n    "],["open-element","div",[]],["flush-element"],["append",["unknown",["tra","tft_map_skins_label"]],false],["close-element"],["text","\\n"],["block",["if"],[["get",["isMe"]]],null,3,2],["close-element"],["text","\\n"],["open-element","div",[]],["static-attr","class","cosmetics-wrapper"],["flush-element"],["text","\\n    "],["open-element","div",[]],["flush-element"],["append",["unknown",["tra","tft_damage_skins_label"]],false],["close-element"],["text","\\n"],["block",["if"],[["get",["isMe"]]],null,1,0],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","        "],["open-element","div",[]],["static-attr","class","loadouts-icon-container"],["dynamic-attr","style",["concat",["background-image: url(",["unknown",["damageSkinIcon"]],");"]]],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["append",["helper",["tft-cosmetics-picker"],null,[["type","setName"],["tft_damage_skins","tft"]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","div",[]],["static-attr","class","loadouts-icon-container"],["dynamic-attr","style",["concat",["background-image: url(",["unknown",["mapSkinIcon"]],");"]]],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["append",["helper",["tft-cosmetics-picker"],null,[["type","setName"],["tft_map_skins","tft"]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","div",[]],["static-attr","class","loadouts-icon-container"],["dynamic-attr","style",["concat",["background-image: url(",["unknown",["companionIcon"]],");"]]],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["append",["helper",["tft-cosmetics-picker"],null,[["type","setName"],["companions","tft"]]],false],["text","\\n"]],"locals":[]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        e.exports = i.Ember.Component.extend({
          classNames: ["parties-tft-event-countdown-component"],
          layout: n(240),
          style: n(241),
          activeEventIcon: n(242),
          activeEventBackground: n(243),
          queueId: null,
          tftEventService: i.Ember.inject.service("tft-events"),
          tftEventEnabled: i.Ember.computed.alias(
            "tftEventService.eventEnabled",
          ),
          isTftEventQueue: i.Ember.computed(
            "tftEventService",
            "tftEventService.eventQueues",
            "queueId",
            function () {
              return this.get("tftEventService").isTftEventQueue(
                this.get("queueId"),
              );
            },
          ),
          isActiveEventQueue: i.Ember.computed(
            "isTftEventQueue",
            "tftEventEnabled",
            function () {
              return this.get("isTftEventQueue") && this.get("tftEventEnabled");
            },
          ),
        });
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "+4fKR135",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-event-countdown-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-event-countdown-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-event-countdown-component\\\\index.js\\" "],["text","\\n"],["block",["if"],[["get",["isActiveEventQueue"]]],null,0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","parties-tft-event-countdown-component_iconBackground"],["dynamic-attr","style",["concat",["background-image: url(\'",["unknown",["activeEventBackground"]],"\')"]]],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","parties-tft-event-countdown-component_icon"],["dynamic-attr","style",["concat",["background-image: url(\'",["unknown",["activeEventIcon"]],"\')"]]],["flush-element"],["close-element"],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        "use strict";
        e.exports = n.p + "time-remaining-clock.svg";
      },
      (e, t, n) => {
        "use strict";
        e.exports = n.p + "time-remaining-icon-background.svg";
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        n(245),
          (e.exports = i.Ember.Component.extend({
            layout: n(246),
            classNames: ["tft-emerald-rank-modal"],
            lobbiesService: i.Ember.inject.service("lobbies"),
            shouldDisplay: i.Ember.computed.alias(
              "lobbiesService.shouldShowTFTEmeraldModal",
            ),
            actions: {
              markTFTEmeraldModalAsSeen: function () {
                this.get("lobbiesService").markTFTEmeraldModalAsSeen();
              },
            },
          }));
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "rLTw2RnH",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-emerald-rank-modal\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-emerald-rank-modal\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-emerald-rank-modal\\\\index.js\\" "],["text","\\n"],["block",["if"],[["get",["shouldDisplay"]]],null,1]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","tft-emerald-rank-modal__contents"],["flush-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","tft-emerald-rank-modal__text-container"],["flush-element"],["text","\\n            "],["open-element","h2",[]],["static-attr","class","tft-emerald-rank-modal__subtitle"],["flush-element"],["append",["unknown",["tra","tft_emerald_rank_modal_subtitle"]],false],["close-element"],["text","\\n            "],["open-element","h1",[]],["static-attr","class","tft-emerald-rank-modal__title"],["flush-element"],["append",["unknown",["tra","tft_emerald_rank_modal_title"]],false],["close-element"],["text","\\n            "],["open-element","p",[]],["static-attr","class","tft-emerald-rank-modal__description"],["flush-element"],["append",["unknown",["tra","tft_emerald_rank_modal_description"]],false],["close-element"],["text","\\n            "],["open-element","a",[]],["dynamic-attr","href",["unknown",["tra","tft_emerald_rank_modal_url"]],null],["static-attr","class","tft-emerald-rank-modal__link"],["static-attr","target","_blank"],["flush-element"],["append",["unknown",["tra","tft_emerald_rank_modal_faq"]],false],["close-element"],["text","\\n        "],["close-element"],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["uikit-modal"],null,[["type","closeButton","dismissible","dismissibleType","onClose","primaryButton","okText"],["DialogAlert",true,true,"inside",["helper",["action"],[["get",[null]],"markTFTEmeraldModalAsSeen"],null],true,["get",["tra","tft_emerald_rank_modal_button"]]]],0]],"locals":[]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1),
          s = a(n(19)),
          o = a(n(95));
        function a(e) {
          return e && e.__esModule ? e : { default: e };
        }
        n(248);
        const r = "companions",
          l = "tft_map_skins",
          c = "tft_damage_skins",
          m = { default: [r], tft: [r, l, c] };
        e.exports = i.Ember.Component.extend(s.default, {
          layout: n(249),
          classNames: ["lol-parties-cosmetics-picker"],
          tftCosmeticsService: i.Ember.inject.service("tft-cosmetics"),
          _modal: null,
          showLoadoutsModal: !1,
          selectedItem: i.Ember.computed(
            "setName",
            "type",
            "tftCosmeticsService.equippedCompanion.itemId",
            "tftCosmeticsService.equippedMapSkin.itemId",
            "tftCosmeticsService.equippedDamageSkin.itemId",
            function () {
              if (this.get("setName") === m.default)
                return this.get("tftCosmeticsService.equippedCompanion");
              switch (this.get("type")) {
                case r:
                  return this.get("tftCosmeticsService.equippedCompanion");
                case l:
                  return this.get("tftCosmeticsService.equippedMapSkin");
                case c:
                  return this.get("tftCosmeticsService.equippedDamageSkin");
              }
            },
          ),
          availableCosmeticTypes: i.Ember.computed("setName", function () {
            return m[this.get("setName")];
          }),
          hasIcon: i.Ember.computed("selectedItem.itemId", function () {
            return 0 !== this.get("selectedItem.itemId");
          }),
          icon: i.Ember.computed("selectedItem.itemId", function () {
            return 0 === this.get("selectedItem.itemId")
              ? "../../images/loadouts/companion_icon.svg"
              : this.get("selectedItem.loadoutsIcon");
          }),
          actions: {
            onClick: function () {
              this.set("showLoadoutsModal", !0),
                this.playSound(o.default.SFX_URLS.SFX_COMPANION_PICKER_CLICK);
            },
            onMouseEnter: function () {
              this.playSound(o.default.SFX_URLS.SFX_COMPANION_PICKER_HOVER);
            },
            closeLoadoutsModal: function () {
              this.set("showLoadoutsModal", !1);
            },
          },
        });
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "iY5ZvUOG",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-cosmetics-picker\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-cosmetics-picker\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-cosmetics-picker\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["dynamic-attr","class","loadouts-icon",null],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"onClick"],null],null],["dynamic-attr","onmouseenter",["helper",["action"],[["get",[null]],"onMouseEnter"],null],null],["dynamic-attr","style",["concat",["background-image: url(\'",["unknown",["icon"]],"\')"]]],["flush-element"],["text","\\n"],["close-element"],["text","\\n\\n"],["block",["if"],[["get",["showLoadoutsModal"]]],null,1]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["append",["helper",["loadouts-modal-root"],null,[["activeType","setName","types"],[["get",["type"]],["get",["setName"]],["get",["availableCosmeticTypes"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["block",["uikit-modal"],null,[["show","type","dismissible","dismissibleType","onClose"],[["get",["showLoadoutsModal"]],"DialogAlert",true,"inside",["helper",["action"],[["get",[null]],"closeLoadoutsModal"],null]]],0]],"locals":[]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i,
          s = n(1),
          o = (i = n(251)) && i.__esModule ? i : { default: i },
          a = n(9),
          r = n(252);
        n(253);
        const { RunMixin: l } = s.EmberAddons.EmberLifeline;
        e.exports = s.Ember.Component.extend(l, o.default, {
          classNames: ["social-leaderboard-button"],
          layout: n(254),
          isPipShown: !1,
          socialLeaderboardService: s.Ember.inject.service("socialLeaderboard"),
          numFriends: s.Ember.computed("friendsList", function () {
            const e = this.get("friendsList");
            return (0, r.friendsWithSummonerNamesCount)(e);
          }),
          isButtonShown: s.Ember.computed(
            "isSocialLeaderboardEnabled",
            "queueType",
            function () {
              const e = this.get("isSocialLeaderboardEnabled"),
                t = this.get("queueType");
              return e && this.isQueueEnabledForSocialLeaderboard(t);
            },
          ),
          createFlyout() {
            const e = this.element,
              t = {
                showEvent: "show",
                hideEvent: "hide",
                targetAnchor: { x: "center", y: "bottom" },
                tooltipAnchor: { x: "center", y: "top" },
                offset: { x: -1, y: 15 },
                orientation: "bottom",
                animated: "true",
                ComponentFactory: s.ComponentFactory,
              },
              n = {
                caller: this.element,
                selected: this.get("selected"),
                currentSummonerName: this.get("currentPlayer.summonerName"),
                onResetNextUpdateTime: (e) => {
                  this.setPipTimer(e);
                },
                numFriends: this.get("numFriends"),
                minFriendCount: this.get("minFriendCount"),
                closeSocialLeaderboard: () => {
                  this.closeSocialLeaderboard();
                },
              };
            e.addEventListener("willHide", this.handleHideEvent),
              s.FlyoutManager.assignFlyout(
                e,
                "SocialLeaderboardFeatureFlyoutComponent",
                n,
                t,
              );
          },
          init() {
            this._super(...arguments),
              (this.handleHideEvent = this.handleHideEvent.bind(this));
          },
          willDestroyElement() {
            this._super(...arguments),
              this.element.removeEventListener(
                "willHide",
                this.handleHideEvent,
              ),
              this.cancelTimer();
          },
          didReceiveAttrs() {
            this._super(...arguments);
            const e = this.get("queueType");
            if (this.isQueueEnabledForSocialLeaderboard(e)) {
              this.get("socialLeaderboardService")
                .getSocialLeaderboardNextUpdateTime(e)
                .then((e, t) => {
                  t || this.handleGetSocialLeaderboardNextUpdateTime(1e3 * e);
                });
            }
          },
          handleGetSocialLeaderboardNextUpdateTime(e) {
            const t = e;
            0 !== t &&
              (t < Date.now() ? this.setPipToShow() : this.setPipTimer(t));
          },
          handleHideEvent() {
            this.set("isFlyoutOpen", !1);
          },
          setPipTimer(e) {
            this.cancelTimer();
            const t = e - Date.now();
            this.set(
              "timer",
              s.Ember.run.later(
                this,
                () => {
                  this.setPipToShow();
                },
                t,
              ),
            );
          },
          setPipToShow() {
            this.get("isFlyoutOpen") || this.set("isPipShown", !0);
          },
          cancelTimer() {
            const e = this.get("timer");
            e && (s.Ember.run.cancel(e), this.set("timer", null));
          },
          isQueueEnabledForSocialLeaderboard: (e) =>
            e === a.QUEUE_TYPE.RANKED_FLEX_SR ||
            e === a.QUEUE_TYPE.RANKED_SOLO_5x5,
          toggleSocialLeaderboardFlyoutHelper() {
            this.get("isFlyoutOpen")
              ? this.closeSocialLeaderboard()
              : (s.Telemetry.sendEvent(
                  "social-leaderboard-open-on-button-click",
                ),
                this.set("isPipShown", !1),
                this.createFlyout(),
                s.FlyoutManager.sendEvent(this.element, "show"),
                this.set("isFlyoutOpen", !0));
          },
          closeSocialLeaderboard() {
            s.FlyoutManager.sendEvent(this.element, "hide"),
              this.runTask(() => {
                s.FlyoutManager.unassignFlyout(this.element);
              }, 133),
              this.set("isFlyoutOpen", !1);
          },
          actions: {
            toggleSocialLeaderboardFlyout() {
              this.toggleSocialLeaderboardFlyoutHelper();
            },
          },
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        const s = (0, i.emberDataBinding)({
          Ember: i.Ember,
          websocket: (0, i.getProvider)().getSocket(),
          basePaths: {
            platformConfig: "/lol-platform-config",
            chat: "/lol-chat",
          },
          boundProperties: {
            isSocialLeaderboardEnabled: {
              api: "platformConfig",
              path: "/v1/namespaces/SocialLeaderboard/IsSocialLeaderboardEnabled",
              default: !0,
            },
            minFriendCount: {
              api: "platformConfig",
              path: "/v1/namespaces/SocialLeaderboard/MinFriendCount",
              default: 3,
            },
            friendsList: { api: "chat", path: "/v1/friends", default: [] },
          },
        });
        e.exports = s;
      },
      (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.friendsWithSummonerNamesCount = void 0);
        t.friendsWithSummonerNamesCount = (e) =>
          e.filter((e) => !(!e || ("" === e.gameName && "" === e.name))).length;
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "jF2Fnqz0",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\button-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\button-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\button-component\\\\index.js\\" "],["text","\\n"],["block",["if"],[["get",["isButtonShown"]]],null,1]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","social-leaderboard-pip-cta"],["flush-element"],["text","\\n        "],["append",["unknown",["call-to-action-pip"]],false],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","social-leaderboard-button-container"],["flush-element"],["text","\\n    "],["open-element","lol-uikit-flat-button",[]],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"toggleSocialLeaderboardFlyout"],null],null],["static-attr","remove-padding",""],["flush-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","social-leaderboard-button-icon"],["flush-element"],["close-element"],["text","\\n    "],["close-element"],["text","\\n"],["block",["if"],[["get",["isPipShown"]]],null,0],["text","  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1),
          s = n(56),
          o = n(256);
        n(257);
        var a,
          r = (a = n(10)) && a.__esModule ? a : { default: a };
        const l = Object.freeze({
            NONE: "none",
            PRESTIGE: "prestige",
            RANKED: "ranked",
          }),
          c = (0, i.emberDataBinding)({
            Ember: i.Ember,
            websocket: (0, i.getProvider)().getSocket(),
            logPrefix: "parties:player-banner:component",
            basePaths: { ranked: "/lol-ranked" },
            boundProperties: {
              rankedData: { api: "ranked", path: "/v1/ranked-stats/{{puuid}}" },
            },
          });
        e.exports = i.Ember.Component.extend(c, {
          layout: n(258),
          classNames: ["v2-banner-component"],
          classNameBindings: [
            "lobbyChallengesEnabled:challenges-enabled:challenges-disabled",
          ],
          selected: null,
          puuid: null,
          summonerId: null,
          member: null,
          isLocalPlayer: !1,
          rankedData: null,
          crestType: null,
          animationsEnabled: !1,
          showQuickPlaySelections: !1,
          isPlayerPartyControlsDisabled: !1,
          lobbiesService: i.Ember.inject.service("lobbies"),
          matchmakingService: i.Ember.inject.service("matchmaking"),
          isNotLocalPlayer: i.Ember.computed.not("isLocalPlayer"),
          isEmpty: i.Ember.computed.empty("member"),
          queueType: i.Ember.computed.alias("selected.queue.type"),
          isRanked: i.Ember.computed.alias("selected.queue.isRanked"),
          isSearching: i.Ember.computed.alias("matchmakingService.isSearching"),
          isMatchFound: i.Ember.computed.alias(
            "matchmakingService.isMatchFound",
          ),
          isRankedCrestEquipped: i.Ember.computed.equal("crestType", l.RANKED),
          waitingInPostgame: i.Ember.computed.and("member.showGhostedBanner"),
          returnedFromPostgame: i.Ember.computed.not("waitingInPostgame"),
          isCherry: i.Ember.computed.equal("queueType", "CHERRY"),
          isMap21: i.Ember.computed.alias("lobbiesService.isMap21"),
          showPositionSelector: i.Ember.computed.and(
            "lobbiesService.showPositionSelector",
            "returnedFromPostgame",
          ),
          primaryPosition: i.Ember.computed.alias(
            "member.firstPositionPreference",
          ),
          secondaryPosition: i.Ember.computed.alias(
            "member.secondPositionPreference",
          ),
          isPrimaryFill: i.Ember.computed.equal(
            "primaryPosition",
            s.POSITIONS.FILL,
          ),
          currentTeamIsFull: i.Ember.computed.alias(
            "lobbiesService.currentTeamIsFull",
          ),
          playerTitle: i.Ember.computed.alias("challengesSummary.title.name"),
          scarcePositions: i.Ember.computed.alias(
            "lobbiesService.scarcePositions",
          ),
          shouldForceScarcePositionSelection: i.Ember.computed.alias(
            "lobbiesService.shouldForceScarcePositionSelection",
          ),
          shouldHideSecondaryPosition: i.Ember.computed(
            "primaryPosition",
            "currentTeamIsFull",
            "shouldForceScarcePositionSelection",
            "scarcePositions",
            "lobbiesService",
            function () {
              const e = this.get("lobbiesService");
              return (
                !!e &&
                e.shouldHideSecondaryPosition(this.get("primaryPosition"))
              );
            },
          ),
          quickPlayViewSlots: i.Ember.computed(
            "member.playerSlots.@each.championId",
            "member.playerSlots.@each.positionPreference",
            "member.playerSlots.@each.perks",
            "member.playerSlots.@each.spell1",
            "member.playerSlots.@each.spell2",
            "member.playerSlots.@each.skinId",
            "shouldHideSecondaryPosition",
            function () {
              return (this.get("member.playerSlots") || []).map((e, t) => ({
                championId: e.championId,
                positionPreference: e.positionPreference,
                spell1: e.spell1,
                spell2: e.spell2,
                skinId: e.skinId,
                isPrimary: 0 === t,
                hide: 0 !== t && this.get("shouldHideSecondaryPosition"),
                perks: e.perks,
              }));
            },
          ),
          platformConfigSingleton: r.default,
          lobbyChallengesEnabled: i.Ember.computed.alias(
            "platformConfigSingleton.lobbyChallengesEnabled",
          ),
          overallChallengeLevel: i.Ember.computed.alias(
            "challengesSummary.overallChallengeLevel",
          ),
          crystalImagePath: i.Ember.computed(
            "overallChallengeLevel",
            function () {
              const e = this.get("overallChallengeLevel");
              return e
                ? `/fe/lol-static-assets/images/challenges-shared/crystal_${e.toLowerCase()}.png`
                : "";
            },
          ),
          isLeader: i.Ember.computed(
            "member.isLeader",
            "lobbiesService.otherCurrentPartyMembers.@each.isLeader",
            function () {
              const e = this.get("member");
              return !!e && e.isLeader;
            },
          ),
          memberType: i.Ember.computed("isLocalPlayer", function () {
            return this.get("isLocalPlayer")
              ? o.BANNER_TYPES.CURRENT_PLAYER
              : o.BANNER_TYPES.OTHER_PLAYER;
          }),
          primaryTooltipConfig: {
            targetAnchor: { x: "left", y: "center" },
            tooltipAnchor: { x: "right", y: "center" },
            offset: { x: 0, y: 0 },
          },
          secondaryTooltipConfig: {
            targetAnchor: { x: "right", y: "center" },
            tooltipAnchor: { x: "left", y: "center" },
            offset: { x: 0, y: 0 },
          },
          primaryPositionLabelText: i.Ember.computed(
            "isPrimaryFill",
            "tra.parties_primary_position",
            "tra.parties_primary_fill",
            function () {
              return this.get("isPrimaryFill")
                ? this.get("tra.parties_primary_fill")
                : this.get("tra.parties_primary_position");
            },
          ),
          primaryPositionText: i.Ember.computed(
            "isPrimaryFill",
            "primaryPosition",
            function () {
              if (this.get("isPrimaryFill")) return "";
              if (
                this.get("isMap21") &&
                this.get("primaryPosition") === s.POSITIONS.BOTTOM
              ) {
                const e = s.MAP21_LANE_ROLE.toLowerCase();
                return this.get(`tra.parties_position_${e}`);
              }
              {
                const e = (this.get("primaryPosition") || "").toLowerCase();
                return this.get(`tra.parties_position_${e}`);
              }
            },
          ),
          secondaryPositionText: i.Ember.computed(
            "secondaryPosition",
            function () {
              if (
                this.get("isMap21") &&
                this.get("secondaryPosition") === s.POSITIONS.BOTTOM
              ) {
                const e = s.MAP21_LANE_ROLE.toLowerCase();
                return this.get(`tra.parties_position_${e}`);
              }
              {
                const e = (this.get("secondaryPosition") || "").toLowerCase();
                return this.get(`tra.parties_position_${e}`);
              }
            },
          ),
          showRankTooltip: i.Ember.computed(
            "rankedData.queueMap",
            "queueType",
            "isRanked",
            "isRankedCrestEquipped",
            function () {
              if (!this.get("isRankedCrestEquipped")) return !1;
              if (!this.get("isRanked")) return !0;
              const e = this.get("rankedData.queueMap"),
                t = this.get("queueType");
              if (e && t) {
                const n = e[t];
                if (!n || "NONE" === n.tier) return !1;
              }
              return !0;
            },
          ),
          init() {
            this._super(...arguments),
              (this.challengesBinding = (0, i.dataBinding)(
                "/lol-challenges",
                (0, i.getProvider)().getSocket(),
              )),
              (this.regaliaBinding = (0, i.dataBinding)(
                "/lol-regalia",
                (0, i.getProvider)().getSocket(),
              )),
              (this.chatBinding = (0, i.dataBinding)(
                "/lol-chat",
                (0, i.getProvider)().getSocket(),
              ));
          },
          didReceiveAttrs() {
            this._super(...arguments);
            const e = this.get("summonerId");
            if ((this.getRegaliaCached(e), !this.get("lobbyChallengesEnabled")))
              return;
            const t = this.get("puuid"),
              n =
                (t && this._prevPuuid && t !== this._prevPuuid) ||
                (!t && this._prevPuuid),
              i = t && t !== this._prevPuuid;
            n &&
              this.challengesBinding.unobserve(this.challengesDataPath, this),
              i &&
                ((this.challengesDataPath = `v1/summary-player-data/player/${t}`),
                this.challengesBinding.observe(
                  this.challengesDataPath,
                  this,
                  this.handleSummaryPlayerData,
                ));
          },
          willDestroyElement() {
            this._super(...arguments),
              this.challengesBinding.unobserve(this.challengesDataPath, this),
              this.regaliaBinding.unobserve(this.regaliaSummonerPath, this),
              this.chatBinding.unobserve(this.chatParticipantsPath);
          },
          handleSummaryPlayerData(e) {
            this.set("challengesSummary", e);
          },
          getRegaliaCached(e) {
            e &&
              this._prevSummonerId !== e &&
              (this.getRegalia(e, !1),
              this._prevSummonerId &&
                this.regaliaSummonerPath &&
                this.regaliaBinding.unobserve(this.regaliaSummonerPath, this),
              (this.regaliaSummonerPath = `/v2/summoners/${e}/regalia/async`),
              this.regaliaBinding.observe(
                this.regaliaSummonerPath,
                this,
                this.handleRegaliaAsync,
              )),
              (this._prevSummonerId = e);
          },
          handleRegaliaAsync(e) {
            const t = this.get("summonerId");
            e &&
              e.md5 !== this._regaliaMd5 &&
              t &&
              (this.getRegalia(t, !0), (this._regaliaMd5 = e.md5));
          },
          getRegalia(e, t) {
            const n = `/v2/summoners/${e}/regalia`;
            return this.regaliaBinding.get(n, { skipCache: t }).then((e) => {
              e &&
                (this.set("crestType", e.crestType),
                this.set("summonerRegalia", e));
            });
          },
          actions: {
            quickPlayPrefsSelect(e) {
              this.sendAction("onQuickPlaySelectButtonClick", !0, e);
            },
            showInvite() {
              this.get("isEmpty") && this.sendAction("showInviteModal");
            },
            onTokenHover(e) {
              i.Telemetry.sendEvent("challenges-lobby-token-hover", e);
            },
          },
        });
      },
      (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.BANNER_VIDEO_STATES = t.BANNER_TYPES = void 0);
        t.BANNER_TYPES = {
          CURRENT_PLAYER: "current-player",
          OTHER_PLAYER: "other-player",
          INVITED_PLACEHOLDER: "invited-placeholder",
          EMPTY_PLACEHOLDER: "empty-placeholder",
        };
        t.BANNER_VIDEO_STATES = {
          INTRO: "intro",
          IDLE: "idle",
          INVITED: "invited",
          OWNER_INTRO: "ownerIntro",
          EMPTY: "empty",
          LEFT: "left",
        };
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "Sy/qL35t",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\banner-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\banner-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\banner-component\\\\index.js\\" "],["text","\\n"],["block",["unless"],[["get",["isEmpty"]]],null,12]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","          "],["append",["helper",["v2-player-party-controls"],null,[["member","isLeader","isMe"],[["get",["member"]],["get",["isLeader"]],["get",["isLocalPlayer"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","                    "],["open-element","h5",[]],["static-attr","class","position-text"],["flush-element"],["append",["unknown",["primaryPositionText"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","                "],["open-element","lol-uikit-content-block",[]],["static-attr","class","position-tooltip"],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n                  "],["open-element","h5",[]],["static-attr","class","position-label"],["flush-element"],["append",["unknown",["primaryPositionLabelText"]],false],["close-element"],["text","\\n"],["block",["if"],[["get",["primaryPositionText"]]],null,1],["text","                "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","                    "],["open-element","h5",[]],["static-attr","class","position-text"],["flush-element"],["append",["unknown",["secondaryPositionText"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","                "],["open-element","lol-uikit-content-block",[]],["static-attr","class","position-tooltip"],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n                  "],["open-element","h5",[]],["static-attr","class","position-label"],["flush-element"],["append",["unknown",["tra","parties_secondary_position"]],false],["close-element"],["text","\\n"],["block",["if"],[["get",["secondaryPositionText"]]],null,3],["text","                "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["open-element","div",[]],["dynamic-attr","class",["concat",["position-icons-container ",["helper",["if"],[["get",["shouldHideSecondaryPosition"]],"single-selector"],null]]]],["flush-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","position-element secondary"],["flush-element"],["text","\\n              "],["append",["helper",["v2-banner-position-icon"],null,[["position","isPrimary"],[["get",["secondaryPosition"]],false]]],false],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipConfig"],[["get",["secondaryTooltipConfig"]]]],4],["text","            "],["close-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","position-element primary"],["flush-element"],["text","\\n              "],["append",["helper",["v2-banner-position-icon"],null,[["position","isPrimary"],[["get",["primaryPosition"]],true]]],false],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipConfig"],[["get",["primaryTooltipConfig"]]]],2],["text","            "],["close-element"],["text","\\n          "],["close-element"],["text","\\n        "]],"locals":[]},{"statements":[["block",["if"],[["get",["showPositionSelector"]]],null,5]],"locals":[]},{"statements":[["text","          "],["open-element","div",[]],["static-attr","class","quick-play-spacer"],["flush-element"],["close-element"],["text","\\n          "],["append",["helper",["quick-play-selections-container"],null,[["quickPlayViewSlots","isLocalPlayer","quickPlaySelectSlotAction"],[["get",["quickPlayViewSlots"]],["get",["isLocalPlayer"]],"quickPlayPrefsSelect"]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","            "],["open-element","div",[]],["static-attr","class","leader-icon"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["append",["helper",["cherry-rating"],null,[["rankedData","queueType","tooltipEnabled"],[["get",["rankedData"]],["get",["queueType"]],true]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["open-element","div",[]],["static-attr","class","player-restriction-info-container"],["flush-element"],["text","\\n            "],["append",["unknown",["player-restriction-info"]],false],["text","\\n          "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","            "],["append",["helper",["identity-tooltip"],null,[["rankedData","selectedQueue","player","showRank","challengesSummary","crystalImagePath","lobbyChallengesEnabled","summonerRegalia"],[["get",["rankedData"]],["get",["selected","queue"]],["get",["member"]],["get",["showRankTooltip"]],["get",["challengesSummary"]],["get",["crystalImagePath"]],["get",["lobbyChallengesEnabled"]],["get",["summonerRegalia"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","lobby-banner-animation-container"],["flush-element"],["text","\\n    "],["open-element","lol-uikit-lottie",[]],["static-attr","src","/fe/lol-parties/lottie/parties-v2/intro-banner.json"],["static-attr","autoplay","false"],["flush-element"],["close-element"],["text","\\n  "],["close-element"],["text","\\n\\n  "],["open-element","div",[]],["dynamic-attr","class",["concat",["lobby-banner ",["helper",["if"],[["get",["isLocalPlayer"]],"local"],null]," ",["helper",["if"],[["get",["isEmpty"]],"empty"],null]," ",["helper",["if"],[["get",["showQuickPlaySelections"]],"quick-play"],null]]]],["flush-element"],["text","\\n    "],["open-element","lol-regalia-parties-v2-element",[]],["dynamic-attr","summoner-id",["unknown",["member","summonerId"]],null],["dynamic-attr","puuid",["unknown",["member","puuid"]],null],["dynamic-attr","queue",["unknown",["queueType"]],null],["dynamic-attr","member-type",["unknown",["memberType"]],null],["dynamic-attr","waiting-in-postgame",["unknown",["waitingInPostgame"]],null],["dynamic-attr","animations",["unknown",["animationsEnabled"]],null],["dynamic-attr","is-quick-play",["unknown",["showQuickPlaySelections"]],null],["flush-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","lobby-banner-contents"],["flush-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","banner-highlight"],["flush-element"],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","banner-spacer"],["flush-element"],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","player-identity-container"],["flush-element"],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipPosition","type"],["right","system"]],11],["text","        "],["close-element"],["text","\\n"],["block",["if"],[["get",["isLocalPlayer"]]],null,10],["block",["if"],[["get",["isCherry"]]],null,9],["text","        "],["open-element","div",[]],["static-attr","class","player-name-container"],["flush-element"],["text","\\n"],["block",["if"],[["get",["isLeader"]]],null,8],["text","          "],["open-element","div",[]],["static-attr","class","player-name"],["flush-element"],["text","\\n            "],["append",["helper",["player-name"],null,[["format","puuid","summonerName"],["tooltip",["get",["member","puuid"]],["get",["member","summonerName"]]]]],false],["text","\\n          "],["close-element"],["text","\\n        "],["close-element"],["text","\\n        "],["open-element","div",[]],["dynamic-attr","class",["concat",["player-achievements-container ",["helper",["if"],[["get",["isEmpty"]],"hide"],null]]]],["flush-element"],["text","\\n          "],["append",["helper",["challenge-banner-token-container"],null,[["puuid","isLocalPlayer","chatConversationId","allowPresenceUpdates","showTitleOnly"],[["get",["puuid"]],["get",["isLocalPlayer"]],["get",["chatConversationId"]],["get",["allowPresenceUpdates"]],["get",["waitingInPostgame"]]]]],false],["text","\\n        "],["close-element"],["text","\\n"],["block",["if"],[["get",["showQuickPlaySelections"]]],null,7,6],["block",["unless"],[["get",["isPlayerPartyControlsDisabled"]]],null,0],["text","      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n\\n  "],["open-element","div",[]],["dynamic-attr","class",["concat",["player-identity-animation-container ",["helper",["if"],[["get",["isLocalPlayer"]],"local"],null]," ",["helper",["if"],[["get",["showQuickPlaySelections"]],"quick-play"],null]," ",["helper",["if"],[["get",["isNotLocalPlayer"]],"member"],null]]]],["flush-element"],["text","\\n    "],["open-element","lol-uikit-video",[]],["static-attr","class","player-identity-gem-animation"],["static-attr","fade-in","0"],["static-attr","fade-out","0"],["dynamic-attr","src",["concat",[["unknown",["gemAnimVideoPath"]]]]],["static-attr","preload",""],["flush-element"],["close-element"],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        n(260);
        var s = n(56),
          o = n(95),
          a = c(n(119)),
          r = c(n(72)),
          l = c(n(83));
        function c(e) {
          return e && e.__esModule ? e : { default: e };
        }
        const m = (0, i.emberDataBinding)({
            Ember: i.Ember,
            websocket: (0, i.getProvider)().getSocket(),
            boundProperties: {
              uxSettings: "/lol-settings/v2/local/lol-user-experience",
            },
          }),
          u = i.Ember.Object.extend(i.Ember.PromiseProxyMixin),
          d = "QUEUE_DODGER",
          p = "LEAVER_BUSTED",
          h = "LEAVER_BUSTER_QUEUE_LOCKOUT";
        e.exports = i.Ember.Component.extend(r.default, l.default, m, {
          layout: n(261),
          classNames: ["v2-footer-component"],
          init(...e) {
            this._super(...e), (this._playerNames = i.playerNames);
          },
          currentPlayerCanInvite: !1,
          penalizedSummonerNameProxy: i.Ember.computed(
            "searchError.penalizedSummonerId",
            function () {
              const e = this.get("searchError.penalizedSummonerId");
              return (
                e &&
                u.create({
                  promise: this._playerNames.getDisplayNameBySummonerId(e),
                })
              );
            },
          ),
          penalizedSummonerDisplayName: i.Ember.computed.alias(
            "penalizedSummonerNameProxy.content.playerNameFull",
          ),
          buttonSounds: {
            closeHover: o.SFX_URLS.SFX_LOBBY_QUIT_HOVER,
            closeClick: o.SFX_URLS.SFX_LOBBY_QUIT_CLICK,
            confirmHover: o.SFX_URLS.SFX_FIND_MATCH_HOVER,
            confirmClick: o.SFX_URLS.SFX_FIND_MATCH_CLICK,
          },
          lobbiesService: i.Ember.inject.service("lobbies"),
          gameflowService: i.Ember.inject.service("gameflow"),
          customGamesService: i.Ember.inject.service("custom-games"),
          patcherService: i.Ember.inject.service("patcher"),
          queueEligibilityService: i.Ember.inject.service("queue-eligibility"),
          matchmakingService: i.Ember.inject.service("matchmaking"),
          partySettingsService: i.Ember.inject.service("party-settings"),
          animationLock: i.Ember.computed.alias("selected.animationLock"),
          hasRankedDivisionRestriction: i.Ember.computed.alias(
            "queueEligibilityService.hasRankedDivisionRestriction",
          ),
          currentPartyMembers: i.Ember.computed.alias(
            "lobbiesService.currentPartyMembers",
          ),
          currentPartyIsFull: i.Ember.computed.alias(
            "lobbiesService.currentPartyIsFull",
          ),
          currentTeamIsFull: i.Ember.computed.alias(
            "lobbiesService.currentTeamIsFull",
          ),
          isPremadeRestrictedFives: i.Ember.computed.alias(
            "lobbiesService.isPremadeRestrictedFives",
          ),
          currentPlayer: i.Ember.computed.alias("lobbiesService.currentPlayer"),
          primaryPosition: i.Ember.computed.alias(
            "currentPlayer.firstPositionPreference",
          ),
          secondaryPosition: i.Ember.computed.alias(
            "currentPlayer.secondPositionPreference",
          ),
          isInQueue: i.Ember.computed.or("isSearching", "isMatchFound"),
          hasQueueAvailabilityWarning: i.Ember.computed.alias(
            "lobbiesService.hasQueueAvailabilityWarning",
          ),
          canStartMatchmaking: i.Ember.computed.alias(
            "lobbiesService.canStartMatchmaking",
          ),
          isCurrentPlayerPartyLeader: i.Ember.computed.alias(
            "lobbiesService.isCurrentPlayerPartyLeader",
          ),
          inLobby: i.Ember.computed.alias("lobbiesService.inLobby"),
          isMember: i.Ember.computed.alias(
            "lobbiesService.isCurrentPlayerPartyMember",
          ),
          isLeader: i.Ember.computed.alias(
            "lobbiesService.isCurrentPlayerPartyLeader",
          ),
          isNotLeader: i.Ember.computed.not("isLeader"),
          isSearching: i.Ember.computed.alias("matchmakingService.isSearching"),
          isNotSearching: i.Ember.computed.alias(
            "matchmakingService.isNotSearching",
          ),
          isMatchFound: i.Ember.computed.alias(
            "matchmakingService.isMatchFound",
          ),
          isMatchNotFound: i.Ember.computed.alias(
            "matchmakingService.isMatchNotFound",
          ),
          searchError: i.Ember.computed.readOnly(
            "matchmakingService.longestSearchError",
          ),
          searchErrorType: i.Ember.computed.readOnly("searchError.errorType"),
          isSearchError: i.Ember.computed.bool("searchError"),
          searchErrorHasTimeRemaining: i.Ember.computed.gt(
            "matchmakingService.longestSearchErrorPenaltyTimeRemaining",
            0,
          ),
          hasPenaltyTime: i.Ember.computed.and(
            "isSearchError",
            "searchErrorHasTimeRemaining",
          ),
          timeRemaining: i.Ember.computed.readOnly(
            "matchmakingService.longestSearchErrorPenaltyTimeRemainingFormatted",
          ),
          shouldForceScarcePositionSelection: i.Ember.computed.alias(
            "lobbiesService.shouldForceScarcePositionSelection",
          ),
          showPositionSelector: i.Ember.computed.alias(
            "lobbiesService.showPositionSelector",
          ),
          scarcePositions: i.Ember.computed.alias(
            "lobbiesService.scarcePositions",
          ),
          currentPartySize: i.Ember.computed.alias(
            "lobbiesService.currentPartySize",
          ),
          animationsEnabled: i.Ember.computed.alias(
            "partySettingsService.animationsEnabled",
          ),
          displayNotLeaderTooltip: i.Ember.computed.and(
            "inLobby",
            "isMember",
            "isNotSearching",
            "isMatchNotFound",
          ),
          notInParty: i.Ember.computed.not("inParty"),
          hideReadyWarning: i.Ember.computed.or(
            "notInParty",
            "canStartMatchmaking",
            "matchmakingService.isInQueue",
            "_isTransitioningState",
          ),
          allMembersHaveSelectedPositions: i.Ember.computed(
            "currentTeamIsFull",
            "currentPartyMembers.@each.firstPositionPreference",
            "currentPartyMembers.@each.secondPositionPreference",
            "lobbiesService",
            "lobbiesService.isPositionAScarcePosition",
            "shouldForceScarcePositionSelection",
            function () {
              const e = this.get("lobbiesService"),
                t = this.get("currentPartyMembers") || [],
                n = this.get("currentTeamIsFull"),
                i = this.get("shouldForceScarcePositionSelection");
              return !t.some(function (t) {
                const o = t.firstPositionPreference,
                  a = !o || o === s.POSITIONS.UNSELECTED;
                let r = !1;
                if (!n && o !== s.POSITIONS.FILL) {
                  const n = t.secondPositionPreference,
                    a = !n || n === s.POSITIONS.UNSELECTED;
                  if (i) {
                    r = !e.isPositionAScarcePosition(o) && a;
                  } else r = a;
                }
                return a || r;
              });
            },
          ),
          readyWarning: i.Ember.computed(
            "readyWarningTooltip",
            "tra.ready",
            "tra.parties_ready_warning",
            function () {
              const e = this.get("readyWarningTooltip");
              if (e && e.length > 0)
                return this.get("tra.parties_ready_warning");
            },
          ),
          readyWarningTooltip: i.Ember.computed(
            "currentPartyMembers.[]",
            "currentPartyMembers.@each.ready",
            "hideReadyWarning",
            "tra.ready",
            "tra.parties_ready_warning_tooltip",
            function () {
              if (this.get("hideReadyWarning")) return;
              const e = [],
                t = this.get("currentPartyMembers");
              for (let n = 0; n < t.length; n++) {
                const i = t[n];
                i.ready ||
                  (this._playerNames.isUsingAlias
                    ? e.push(i?.displayName?.playerNameFull)
                    : e.push(i.summonerName));
              }
              if (!e.length) return;
              return this.get("tra.formatString")(
                "parties_ready_warning_tooltip",
                { notReadyMemberNames: e.join(", ") },
              );
            },
          ),
          positionError: i.Ember.computed(
            "matchmakingService.isInQueue",
            "canStartMatchmaking",
            "showPositionSelector",
            "_isTransitioningState",
            "tra.ready",
            "tra.game_select_queue_restriction_party_canStartMatchmaking",
            "tra.game_select_queue_restriction_party_uniqueprimarypositionrestriction",
            "allMembersHaveSelectedPositions",
            "shouldForceScarcePositionSelection",
            function () {
              return !this.get("showPositionSelector") ||
                this.get("matchmakingService.isInQueue") ||
                this.get("canStartMatchmaking") ||
                this.get("_isTransitioningState") ||
                !this.get("allMembersHaveSelectedPositions")
                ? ""
                : this.get("shouldForceScarcePositionSelection")
                  ? this.get(
                      "tra.game_select_queue_restriction_party_uniqueprimarypositionrestriction",
                    )
                  : this.get(
                      "tra.game_select_queue_restriction_party_canStartMatchmaking",
                    );
            },
          ),
          searchErrorLeaverBusterQueueDelay: i.Ember.computed.equal(
            "searchErrorType",
            p,
          ),
          searchErrorLeaverBusterQueueLockout: i.Ember.computed.equal(
            "searchErrorType",
            h,
          ),
          queueErrorMessage: i.Ember.computed(
            "searchErrorType",
            "penalizedSummonerDisplayName",
            "tra.ready",
            "tra.parties_queue_error_queue_dodge_myself_body",
            "tra.parties_queue_error_queue_dodge_other_body",
            "tra.parties_queue_error_generic_body",
            function () {
              const e = this.get("searchErrorType"),
                t = this.get("searchError.penalizedSummonerId"),
                n = this.get("matchmakingService.currentSummoner.summonerId"),
                i = this.get("penalizedSummonerDisplayName");
              switch (e) {
                case d:
                  return t === n
                    ? this.get(
                        "tra.parties_queue_error_queue_dodge_myself_body",
                      )
                    : this.get("tra").formatString(
                        "parties_queue_error_queue_dodge_other_body",
                        { player: i },
                      );
                case h:
                  return t === n
                    ? this.get(
                        "tra.parties_queue_error_leaver_buster_lockout_restriction_tooltip_myself_body",
                      )
                    : this.get("tra").formatString(
                        "parties_queue_error_leaver_buster_lockout_restriction_tooltip_other_body",
                        { player: i },
                      );
                default:
                  return this.get("tra.parties_queue_error_generic_body$html");
              }
            },
          ),
          patcherDisconnected: i.Ember.computed.not(
            "patcherService.isConnected",
          ),
          showingPartyButNotLeader: i.Ember.computed.and(
            "showingState.isShowingParty",
            "isNotLeader",
          ),
          confirmButtonThrottled: !1,
          confirmButtonNotThrottled: i.Ember.computed.not(
            "confirmButtonThrottled",
          ),
          showingPartyButThrottled: i.Ember.computed.and(
            "showingState.isShowingParty",
            "isLeader",
            "confirmButtonThrottled",
          ),
          showingPartyAndInQueue: i.Ember.computed.and(
            "showingState.isShowingParty",
            "isInQueue",
          ),
          showingPartyAndPenaltyTime: i.Ember.computed(
            "showingState.isShowingParty",
            "hasPenaltyTime",
            "customGamesService.isCustomUI",
            function () {
              return (
                this.get("showingState.isShowingParty") &&
                this.get("hasPenaltyTime") &&
                !this.get("customGamesService.isCustomUI")
              );
            },
          ),
          showingPartyAndRankedDivisionRestriction: i.Ember.computed.and(
            "showingState.isShowingParty",
            "hasRankedDivisionRestriction",
          ),
          cannotStartMatchmaking: i.Ember.computed.not(
            "lobbiesService.canStartMatchmaking",
          ),
          showingPartyButCannotStartMatchmaking: i.Ember.computed.and(
            "showingState.isShowingParty",
            "isLeader",
            "cannotStartMatchmaking",
          ),
          confirmButtonDisabled: i.Ember.computed.or(
            "animationLock",
            "patcherDisconnected",
            "selected.isUpdatingSelection",
            "lobbiesService.hasLobbyRestrictions",
            "showingPartyButNotLeader",
            "showingPartyButThrottled",
            "showingPartyAndRankedDivisionRestriction",
            "showingPartyAndInQueue",
            "showingPartyAndPenaltyTime",
            "showingPartyButCannotStartMatchmaking",
            "hasQueueAvailabilityWarning",
          ),
          confirmButtonEnabled: i.Ember.computed.not("confirmButtonDisabled"),
          confirmButtonText: i.Ember.computed(
            "tra.ready",
            "hasPenaltyTime",
            "isInQueue",
            "customGamesService.isCustomUI",
            "customGameListService.confirmButtonText",
            "tra.parties_button_in_queue",
            "tra.parties_button_find_match",
            "tra.parties_button_start_game",
            function () {
              if (this.get("isInQueue"))
                return this.get("tra.parties_button_in_queue");
              if (this.get("customGamesService.isCustomUI"))
                return this.get("tra.parties_button_start_game");
              if (this.get("hasPenaltyTime")) {
                return `${this.get("timeRemaining")}`;
              }
              return this.get("tra.parties_button_find_match");
            },
          ),
          confirmButtonTooltipText: i.Ember.computed(
            "displayNotLeaderTooltip",
            "hasPenaltyTime",
            "queueErrorMessage",
            "customGamesService.isCustomUI",
            "isPremadeRestrictedFives",
            "patcherService.isConnected",
            "lobbiesService.canStartMatchmaking",
            "hasQueueAvailabilityWarning",
            "hasRankedDivisionRestriction",
            "readyWarning",
            "positionError",
            "tra.metadata",
            "tra.ready",
            "tra.parties_find_match_wait_for_captain",
            "tra.parties_start_game_wait_for_captain",
            "tra.parties_position_select_members_required_tooltip",
            "tra.parties_patcher_not_connected",
            "tra.parties_premade_size_five_restriction",
            "lobbiesService.hasLobbyRestrictions",
            function () {
              let e = "";
              return (
                this.get("patcherService.isConnected") ||
                  (e = this.get("tra.parties_patcher_not_connected")),
                this.get("hasRankedDivisionRestriction")
                  ? (e = this.get(
                      "tra.game_select_queue_restriction_party_teamdivisionrestriction",
                    ))
                  : this.get("isPremadeRestrictedFives")
                    ? (e = this.get(
                        "tra.parties_premade_size_five_restriction",
                      ))
                    : this.get("lobbiesService.canStartMatchmaking") ||
                      (e = this.get("readyWarning")
                        ? this.get("readyWarning")
                        : this.get("positionError")
                          ? this.get("positionError")
                          : this.get(
                              "tra.parties_position_select_members_required_tooltip",
                            )),
                this.get("displayNotLeaderTooltip")
                  ? (e = this.get("customGamesService.isCustomUI")
                      ? this.get("tra.parties_start_game_wait_for_captain")
                      : this.get("tra.parties_find_match_wait_for_captain"))
                  : this.get("hasPenaltyTime") &&
                    (e = this.get("queueErrorMessage")),
                this.get("hasQueueAvailabilityWarning")
                  ? this.get("queueAvailabilityWarningTooltip")
                  : e.replace(/\n/, "<br>")
              );
            },
          ),
          confirmButtonShowTooltip: i.Ember.computed(
            "displayNotLeaderTooltip",
            "hasPenaltyTime",
            "searchErrorLeaverBusterQueueDelay",
            "isPremadeRestrictedFives",
            "isInQueue",
            "hasRankedDivisionRestriction",
            "patcherService.isConnected",
            "hasQueueAvailabilityWarning",
            "showingState.isShowingGameSelect",
            "lobbiesService.canStartMatchmaking",
            "lobbiesService.premadeSizeAllowed",
            "lobbiesService.hasLobbyRestrictions",
            "customGamesService.isCustomUI",
            function () {
              return (
                !!this.get("hasRankedDivisionRestriction") ||
                !(
                  !this.get("displayNotLeaderTooltip") &&
                  !this.get("isPremadeRestrictedFives") &&
                  this.get("patcherService.isConnected")
                ) ||
                !(
                  !this.get("hasPenaltyTime") ||
                  this.get("searchErrorLeaverBusterQueueDelay") ||
                  this.get("showingState.isShowingGameSelect") ||
                  this.get("customGamesService.isCustomUI")
                ) ||
                !(
                  this.get("isInQueue") ||
                  this.get("lobbiesService.canStartMatchmaking") ||
                  !this.get("lobbiesService.premadeSizeAllowed")
                ) ||
                !!this.get("hasQueueAvailabilityWarning")
              );
            },
          ),
          _hasClickedCloseDuringTransition: !1,
          handleCloseDuringTransitionObserver: i.Ember.observer(
            "_hasClickedCloseDuringTransition",
            "isSearching",
            "isMatchFound",
            "hasPenaltyTime",
            function () {
              (this.get("isSearching") ||
                this.get("isMatchFound") ||
                this.get("hasPenaltyTime")) &&
                (this.set("_isTransitioningState", !1),
                this.get("_hasClickedCloseDuringTransition") &&
                  (this.set("_hasClickedCloseDuringTransition", !1),
                  this.cancelMatchmaking()));
            },
          ),
          lobbyAvailabilityMatchmakingObserver: i.Ember.observer(
            "hasQueueAvailabilityWarning",
            "isSearching",
            function () {
              this.get("hasQueueAvailabilityWarning") &&
                this.get("isSearching") &&
                this.get("lobbiesService").cancelMatchmakingSearch();
            },
          ),
          startMatchmaking: function () {
            this.get("confirmButtonNotThrottled") &&
              (this.set("confirmButtonThrottled", !0),
              (this.enterQueueTimer = i.Telemetry.startTimer(
                "parties-enter-queue",
              )),
              this.get("lobbiesService")
                .startMatchmakingSearch()
                .then(
                  () => {
                    this.set("confirmButtonThrottled", !1);
                  },
                  (e) => {
                    a.default.sendTelemetryEvent("feature_error", {
                      id: "PARTIES_START_MATCHMAKING_ATTEMPT_FAILED",
                      severity: "blocker",
                      message:
                        "failed http post request to /lol-lobby/v2/lobby/matchmaking/search",
                    }),
                      this.set("confirmButtonThrottled", !1),
                      this.set("_isTransitioningState", !1),
                      i.logger.warning(`Start matchmaking search failed: ${e}`);
                  },
                ));
          },
          cancelMatchmaking: function () {
            this.get("isSearching") &&
              this.get("lobbiesService").cancelMatchmakingSearch();
          },
          confirmButtonClicked: function () {
            this.set("_isTransitioningState", !0), this.startMatchmaking();
          },
          closeButtonClicked: function () {
            this.blurCloseButton(),
              this.get("isSearching") || this.get("isMatchFound")
                ? this.cancelMatchmaking()
                : this.get("_isTransitioningState")
                  ? (this.set("_hasClickedCloseDuringTransition", !0),
                    this.get("lobbiesService")
                      .leaveLobby()
                      .catch((e) => {
                        i.logger.warning(`Leaving lobby failed: ${e}`),
                          this.set("_isTransitioningState", !1);
                      }))
                  : this.leavePartyModal();
          },
          blurCloseButton: function () {
            const e = this.element.querySelector("button.close");
            e && e.blur();
          },
          leavePartyModal: function () {
            if (this.get("currentPartySize") > 1) {
              this.showModal({
                type: "DialogConfirm",
                data: {
                  contents: this.get("tra.parties_leave_confirmation_text"),
                  acceptText: this.get("tra.parties_leave_confirmation_yes"),
                  declineText: this.get("tra.parties_leave_confirmation_no"),
                  onAccept: () => {
                    this.leaveParty();
                  },
                },
              }).domNode.classList.add("parties-leave-party-modal");
            } else this.leaveParty();
          },
          enterQueueTelemetryObserver: i.Ember.observer(
            "isInQueue",
            function () {
              this.get("isInQueue") &&
                this.enterQueueTimer &&
                (i.Telemetry.stopAndRecordTimer(this.enterQueueTimer),
                delete this.enterQueueTimer);
            },
          ),
          actions: {
            confirmButton() {
              this.confirmButtonClicked();
            },
            closeButton() {
              this.closeButtonClicked();
            },
            openOverlay(e, t) {
              this.sendAction("openOverlay", e, t);
            },
          },
        });
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "7CKOJNx1",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\footer-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\footer-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\footer-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","left-container"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","chat-container"],["flush-element"],["text","\\n    "],["open-element","lol-social-chat-room",[]],["static-attr","type","lobby"],["static-attr","disabled-when-connecting",""],["flush-element"],["close-element"],["text","\\n  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"],["open-element","div",[]],["static-attr","class","center-container"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","close-button-container"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","close-button"],["flush-element"],["text","\\n      "],["append",["helper",["generic-button"],null,[["onClick","baseImgPath","overImgPath","downImgPath","onClickSound","onHoverSound"],[["helper",["action"],[["get",[null]],"closeButton"],null],"/fe/lol-parties/button-x.png","/fe/lol-parties/button-x-over.png","/fe/lol-parties/button-x-down.png",["get",["buttonSounds","closeClick"]],["get",["buttonSounds","closeHover"]]]]],false],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","find-match-button-container"],["flush-element"],["text","\\n"],["block",["unless"],[["get",["animationsEnabled"]]],null,4,3],["text","    "],["open-element","div",[]],["static-attr","class","left-wing"],["flush-element"],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","right-wing"],["flush-element"],["close-element"],["text","\\n"],["block",["if"],[["get",["confirmButtonShowTooltip"]]],null,2],["text","  "],["close-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","role-selectors-container"],["flush-element"],["text","\\n"],["block",["if"],[["get",["showPositionSelector"]]],null,0],["text","  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"],["open-element","div",[]],["static-attr","class","right-container"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","invite-info-panel-container"],["flush-element"],["text","\\n    "],["append",["helper",["v2-invite-info-panel"],null,[["currentPlayerCanInvite"],[["get",["currentPlayerCanInvite"]]]]],false],["text","\\n  "],["close-element"],["text","\\n"],["close-element"],["text","\\n\\n"],["append",["helper",["v2-footer-notifications"],null,[["readyWarning","readyWarningTooltip","positionError"],[["get",["readyWarning"]],["get",["readyWarningTooltip"]],["get",["positionError"]]]]],false],["text","\\n\\n"],["append",["helper",["matchmaking-errors"],null,[["_isTransitioningState"],[["get",["_isTransitioningState"]]]]],false],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["append",["helper",["v2-position-selector"],null,[["primaryPosition","secondaryPosition","shouldHideSecondaryPosition","isInQueue","currentPartyIsFull","openOverlay"],[["get",["primaryPosition"]],["get",["secondaryPosition"]],["get",["shouldHideSecondaryPosition"]],["get",["isInQueue"]],["get",["currentPartyIsFull"]],["helper",["action"],[["get",[null]],"openOverlay"],null]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n          "],["open-element","p",[]],["flush-element"],["text","\\n            "],["append",["unknown",["confirmButtonTooltipText"]],false],["text","\\n          "],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["uikit-tooltip"],null,[["tooltipPosition","type"],["top","system"]],1]],"locals":[]},{"statements":[["text","      "],["append",["helper",["animated-find-match-button"],null,[["confirmButton","baseImgPath","overImgPath","downImgPath","disabledImgPath","buttonText","onClickSound","onHoverSound","disabledStyle","clickedStyle","isEnabled"],["confirmButton","/fe/lol-static-assets/images/buttons/find_match_default.png","/fe/lol-static-assets/images/buttons/find_match_hover.png","/fe/lol-static-assets/images/buttons/find_match_active.png","/fe/lol-parties/button-find-match-disabled.png",["get",["confirmButtonText"]],["get",["buttonSounds","confirmClick"]],["get",["buttonSounds","confirmHover"]],"color: grey","color: #005A82",["get",["confirmButtonEnabled"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["append",["helper",["generic-button"],null,[["onClick","baseImgPath","overImgPath","downImgPath","disabledImgPath","upText","overText","downText","disabledText","onClickSound","onHoverSound","disabledStyle","isEnabled"],[["helper",["action"],[["get",[null]],"confirmButton"],null],"/fe/lol-parties/button-find-match.png","/fe/lol-parties/button-find-match-over.png","/fe/lol-parties/button-find-match-down.png","/fe/lol-parties/button-find-match-disabled.png",["get",["confirmButtonText"]],["get",["confirmButtonText"]],["get",["confirmButtonText"]],["get",["confirmButtonText"]],["get",["buttonSounds","confirmClick"]],["get",["buttonSounds","confirmHover"]],"color: grey",["get",["confirmButtonEnabled"]]]]],false],["text","\\n"]],"locals":[]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1),
          s = r(n(5));
        n(263);
        var o = r(n(7)),
          a = n(12);
        function r(e) {
          return e && e.__esModule ? e : { default: e };
        }
        const { RunMixin: l } = i.EmberAddons.EmberLifeline,
          c = i.UIKit.getTooltipManager(),
          m = i.UIKit.getTemplateHelper(),
          u = "QPPlayerScarcePositionCoverageRestriction",
          d = "QPNonUniquePrimarySlotRestriction",
          p = "QPPartyChampionCoverageRestriction";
        e.exports = i.Ember.Component.extend(l, {
          layout: n(264),
          classNames: ["v2-footer-notifications"],
          disabledReasons: i.Ember.A(),
          isQuickPlayModal: !1,
          lobbiesService: i.Ember.inject.service("lobbies"),
          matchmakingService: i.Ember.inject.service("matchmaking"),
          eligibilityService: i.Ember.inject.service("queue-eligibility"),
          eligibilitiesEntity: s.default,
          queuesEntity: o.default,
          restrictions: i.Ember.computed.alias(
            "eligibilitiesEntity.restrictions",
          ),
          warnings: i.Ember.computed.alias("eligibilitiesEntity.warnings"),
          currentPlayer: i.Ember.computed.alias("lobbiesService.currentPlayer"),
          scarcePositions: i.Ember.computed.alias(
            "lobbiesService.scarcePositions",
          ),
          canStartMatchmaking: i.Ember.computed.alias(
            "lobbiesService.canStartMatchmaking",
          ),
          currentTeamIsFull: i.Ember.computed.alias(
            "lobbiesService.currentTeamIsFull",
          ),
          currentPartyMembers: i.Ember.computed.alias(
            "lobbiesService.currentPartyMembers",
          ),
          currentPartySize: i.Ember.computed.alias(
            "lobbiesService.currentPartySize",
          ),
          hasQueueAvailabilityWarning: i.Ember.computed.alias(
            "lobbiesService.hasQueueAvailabilityWarning",
          ),
          queueAvailabilityWarningTooltip: i.Ember.computed.alias(
            "lobbiesService.queueAvailabilityWarningTooltip",
          ),
          allowablePremadeSizes: i.Ember.computed.alias(
            "lobbiesService.allowablePremadeSizes",
          ),
          premadeSizeAllowed: i.Ember.computed.alias(
            "lobbiesService.premadeSizeAllowed",
          ),
          shouldShowPremadeSizeError:
            i.Ember.computed.not("premadeSizeAllowed"),
          isCurrentPlayerPartyLeader: i.Ember.computed.alias(
            "lobbiesService.isCurrentPlayerPartyLeader",
          ),
          showPositionSelector: i.Ember.computed.alias(
            "lobbiesService.showPositionSelector",
          ),
          autoFillDisabled: i.Ember.computed.alias(
            "lobbiesService.shouldForceScarcePositionSelection",
          ),
          autoFillEligible: i.Ember.computed.alias(
            "currentPlayer.autoFillEligible",
          ),
          autoFillProtectedForStreaking: i.Ember.computed.alias(
            "currentPlayer.autoFillProtectedForStreaking",
          ),
          autoFillProtectedForPromos: i.Ember.computed.alias(
            "currentPlayer.autoFillProtectedForPromos",
          ),
          autoFillProtectedForSoloing: i.Ember.computed.alias(
            "currentPlayer.autoFillProtectedForSoloing",
          ),
          autoFillProtectedForRemedy: i.Ember.computed.alias(
            "currentPlayer.autoFillProtectedForRemedy",
          ),
          autoFillProtectedForScarcePosition: i.Ember.computed(
            "scarcePositions",
            "currentPlayer.firstPositionPreference",
            "currentPlayer.secondPositionPreference",
            function () {
              const e = [
                this.get("currentPlayer.firstPositionPreference"),
                this.get("currentPlayer.secondPositionPreference"),
              ];
              if (this.get("scarcePositions"))
                return e.some((e) => this.get("scarcePositions").includes(e));
            },
          ),
          autoFillProtected: i.Ember.computed.or(
            "autoFillProtectedForPromos",
            "autoFillProtectedForSoloing",
            "autoFillProtectedForStreaking",
            "autoFillProtectedForScarcePosition",
            "autoFillProtectedForRemedy",
          ),
          notDraftPick: i.Ember.computed.not("showPositionSelector"),
          hasLobbyRestrictions: i.Ember.computed.or(
            "eligibilitiesEntity.hasLobbyRestrictions",
            "eligibilitiesEntity.playerRestrictions",
            "shouldShowPremadeSizeError",
          ),
          hidePositionWarning: i.Ember.computed.or(
            "matchmakingService.isInQueue",
            "currentTeamIsFull",
            "notDraftPick",
          ),
          hideAutofillStatus: i.Ember.computed.alias("hidePositionWarning"),
          positionWarning: i.Ember.computed(
            "autoFillEligible",
            "autoFillProtected",
            "hidePositionWarning",
            "autoFillProtectedForScarcePosition",
            "autoFillProtectedForRemedy",
            "autoFillDisabled",
            "tra.ready",
            "tra.parties_autofill_activated",
            "tra.parties_autofill_disabled",
            "tra.parties_autofill_protected",
            function () {
              if (!this.get("hidePositionWarning"))
                return this.get("autoFillDisabled")
                  ? this.get("tra.parties_autofill_disabled")
                  : this.get("autoFillProtectedForRemedy") ||
                      this.get("autoFillProtectedForScarcePosition")
                    ? this.get("tra.parties_autofill_protected")
                    : this.get("autoFillEligible")
                      ? this.get("tra.parties_autofill_activated")
                      : this.get("autoFillProtected")
                        ? this.get("tra.parties_autofill_protected")
                        : void 0;
            },
          ),
          teamSizeRestrictionMembers: i.Ember.computed(
            "restrictions",
            "restrictions.[]",
            function () {
              const e = this.get("restrictions");
              if (e)
                for (let t = 0; t < e.length; t++)
                  if ("TeamSizeRestriction" === e[t].restrictionCode)
                    return e[t].summonerIds.length;
              return 0;
            },
          ),
          QPLobbyRestrictions: i.Ember.computed(
            "restrictions",
            "restrictions.[]",
            "currentPlayer.summonerId",
            "tra.ready",
            function () {
              const e = this.get("restrictions");
              if (!Boolean(e)) return;
              const t = e.find(
                (e) =>
                  "QPScarcePositionsNotAvailableRestriction" ===
                  e.restrictionCode,
              );
              if (Boolean(t))
                return this.get(
                  "tra.game_select_queue_restriction_party_qpscarcepositionsnotavailablerestriction",
                );
              const n = e.find((e) => e.restrictionCode === u);
              if (
                Boolean(n) &&
                n.summonerIds.includes(this.get("currentPlayer.summonerId"))
              )
                return this.get(
                  "tra.game_select_queue_restriction_party_qpplayerscarcepositioncoveragerestriction_self",
                );
              if (
                Boolean(n) &&
                !n.summonerIds.includes(this.get("currentPlayer.summonerId"))
              )
                return this.get(
                  "tra.game_select_queue_restriction_party_qpplayerscarcepositioncoveragerestriction",
                );
              const i = e.find((e) => e.restrictionCode === d);
              if (Boolean(i))
                return this.get(
                  "game_select_queue_restriction_party_qpnonuniqueprimaryslotrestriction",
                );
              const s = e.find((e) => e.restrictionCode === p);
              return Boolean(s)
                ? this.get(
                    "game_select_queue_restriction_party_qppartychampioncoveragerestriction",
                  )
                : void 0;
            },
          ),
          QPModalRestrictions: i.Ember.computed(
            "restrictions",
            "restrictions.[]",
            "currentPlayer.summonerId",
            "tra.ready",
            "isQuickPlayModal",
            function () {
              const e = this.get("restrictions");
              if (!Boolean(e)) return;
              const t = e.find((e) => e.restrictionCode === u);
              if (
                Boolean(t) &&
                t.summonerIds.includes(this.get("currentPlayer.summonerId"))
              )
                return this.get(
                  "tra.game_select_queue_restriction_party_qpplayerscarcepositioncoveragerestriction_self",
                );
              const n = e.find((e) => e.restrictionCode === d);
              if (
                Boolean(n) &&
                n.summonerIds.includes(this.get("currentPlayer.summonerId"))
              )
                return this.get(
                  "tra.game_select_queue_restriction_party_qpnonuniqueprimaryslotrestriction",
                );
              const i = e.find(
                (e) =>
                  "QPPartyPositionCoverageRestriction" === e.restrictionCode,
              );
              if (
                Boolean(i) &&
                i.summonerIds.includes(this.get("currentPlayer.summonerId"))
              )
                return this.get(
                  "tra.game_select_queue_restriction_party_qppartypositioncoveragerestriction",
                );
              const s = e.find((e) => e.restrictionCode === p);
              if (
                Boolean(s) &&
                s.summonerIds.includes(this.get("currentPlayer.summonerId"))
              )
                return this.get(
                  "tra.game_select_queue_restriction_party_qppartychampioncoveragerestriction",
                );
              const o = e.find(
                (e) =>
                  "QPInvalidChampionSelectionRestriction" === e.restrictionCode,
              );
              return Boolean(o) &&
                o.summonerIds.includes(this.get("currentPlayer.summonerId"))
                ? this.get(
                    "tra.game_select_queue_restriction_party_qpinvalidchampionselectionrestriction",
                  )
                : void 0;
            },
          ),
          mmrStandardDeviationWarning: i.Ember.computed.alias(
            "tra.parties_large_skill_gap_warning",
          ),
          mmrStandardDeviationWarningTooltip: i.Ember.computed.alias(
            "tra.parties_large_skill_gap_warning_tooltip",
          ),
          hasMmrStandardDeviationWarning: i.Ember.computed(
            "warnings.[]",
            function () {
              const e = this.get("warnings");
              if (e)
                for (let t = 0; t < e.length; t++) {
                  if ("MmrStandardDeviationTooLarge" === e[t].restrictionCode)
                    return !0;
                }
              return !1;
            },
          ),
          shouldShowAutoFillStatus: i.Ember.computed(
            "autoFillEligible",
            "autoFillProtectedForScarcePosition",
            "autoFillProtectedForStreaking",
            "autoFillProtectedForPromos",
            "autoFillProtectedForSoloing",
            "autoFillProtectedForRemedy",
            "autoFillDisabled",
            "hideAutofillStatus",
            function () {
              return (
                !this.get("hideAutofillStatus") &&
                (this.get("autoFillEligible") ||
                  this.get("autoFillDisabled") ||
                  this.get("autoFillProtectedForStreaking") ||
                  this.get("autoFillProtectedForPromos") ||
                  this.get("autoFillProtectedForSoloing") ||
                  this.get("autoFillProtectedForScarcePosition") ||
                  this.get("autoFillProtectedForRemedy"))
              );
            },
          ),
          premadeSizeErrorText: i.Ember.computed(
            "premadeSizeAllowed",
            "tra.game_select_queue_restriction_party_teamsizerestriction",
            "tra.ready",
            "teamSizeRestrictionMembers",
            "tra.parties_premade_size_restriction",
            "tra.parties_premade_size_restriction_singular",
            "tra.parties_premade_size_fives",
            "allowablePremadeSizes",
            "restrictions",
            "restrictions.[]",
            "restrictions.@each.summonerIdsString",
            function () {
              const e = this.get("teamSizeRestrictionMembers"),
                t = this.get("allowablePremadeSizes");
              if (t && 1 === t.length && 5 === t[0])
                return this.get("tra.parties_premade_size_fives");
              if (e > 1) {
                const t = { teamSizeRestriction: e };
                return this.get("tra").formatString(
                  "game_select_queue_restriction_party_teamsizerestriction",
                  t,
                );
              }
              if (1 === e)
                return this.get(
                  "tra.parties_premade_size_restriction_singular",
                );
              const n = { num: e };
              return this.get("tra").formatString(
                "parties_premade_size_restriction",
                n,
              );
            },
          ),
          shouldShowAutoFillProtection: i.Ember.computed(
            "autoFillDisabled",
            "autoFillProtectedForStreaking",
            "autoFillProtectedForPromos",
            "autoFillProtectedForSoloing",
            "autoFillProtectedForScarcePosition",
            "autoFillProtectedForRemedy",
            function () {
              return (
                this.get("autoFillDisabled") ||
                this.get("autoFillProtectedForStreaking") ||
                this.get("autoFillProtectedForPromos") ||
                this.get("autoFillProtectedForSoloing") ||
                this.get("autoFillProtectedForScarcePosition") ||
                this.get("autoFillProtectedForRemedy")
              );
            },
          ),
          warningTooltipText: i.Ember.computed(
            "tra.parties_autofill_tooltip",
            "tra.parties_autofill_streak_protection",
            "tra.parties_autofill_promo_protection",
            "tra.parties_autofill_solo_protection",
            "autoFillDisabled",
            "autoFillEligible",
            "autoFillProtectedForStreaking",
            "autoFillProtectedForScarcePosition",
            "autoFillProtectedForPromos",
            "autoFillProtectedForSoloing",
            "autoFillProtectedForRemedy",
            function () {
              return this.get("autoFillDisabled")
                ? this.get(
                    "tra.parties_autofill_force_scarce_position_protection",
                  )
                : this.get("autoFillProtectedForRemedy")
                  ? this.get("tra.parties_autofill_remedy_protection")
                  : this.get("autoFillProtectedForScarcePosition")
                    ? this.get(
                        "tra.parties_autofill_scarce_position_protection",
                      )
                    : this.get("autoFillEligible")
                      ? this.get("tra.parties_autofill_tooltip")
                      : this.get("autoFillProtectedForSoloing")
                        ? this.get("tra.parties_autofill_solo_protection")
                        : this.get("autoFillProtectedForPromos")
                          ? this.get("tra.parties_autofill_promo_protection")
                          : this.get("autoFillProtectedForStreaking")
                            ? this.get("tra.parties_autofill_streak_protection")
                            : void 0;
            },
          ),
          tooltipConfig: {
            targetAnchor: { x: "center", y: "top" },
            tooltipAnchor: { x: "center", y: "bottom" },
            offset: { x: 0, y: 0 },
          },
          restrictionsText: i.Ember.computed(
            "shouldShowPremadeSizeError",
            "hasLobbyRestrictions",
            "teamSizeRestrictionMembers",
            "restrictions.@each.summonerIdsString",
            "tra.ready",
            "tra.game_select_queue_restriction_party_notification",
            "disabledReasons",
            "QPLobbyRestrictions",
            "queuesEntity",
            "lobbiesService.queueId",
            function () {
              const e = this.get("QPLobbyRestrictions");
              if (Boolean(e)) return e;
              if (this.get("shouldShowPremadeSizeError"))
                return this.get("premadeSizeErrorText");
              if (this.get("teamSizeRestrictionMembers") > 0) {
                const e = this.get("queuesEntity"),
                  t = this.get("lobbiesService.queueId"),
                  n = e.getQueueById(t);
                return n && n.gameMode === a.CHERRY_GAME_MODE
                  ? this.get(
                      "tra.game_select_queue_restriction_party_cherrypartyineligiblesize",
                    )
                  : this.get(
                      "tra.game_select_queue_restriction_party_notification",
                    );
              }
              const t = this.get("disabledReasons");
              return t && t.length > 0 ? t.find((e) => e[0]) : "";
            },
          ),
          restrictionsTooltipTextObserver: i.Ember.on(
            "init",
            i.Ember.observer(
              "hasLobbyRestrictions",
              "restrictions.@each.restrictionCode",
              "restrictions.@each.summonerIdsString",
              "restrictions",
              "lobbiesService.currentPartyMembers.@each.summonerId",
              "lobbiesService.queueId",
              "tra.ready",
              function () {
                i.Ember.run.once(this, () => {
                  this.generateRestrictionStringsForParty();
                });
              },
            ),
          ),
          generateRestrictionStringsForParty: function () {
            if (this.get("hasLobbyRestrictions")) {
              const e = this.get(
                  "eligibilitiesEntity",
                ).applyRestrictionGroupRules(this.get("restrictions")),
                t = [];
              if (e) {
                const n = this.get("lobbiesService.queueId"),
                  s = this.get("eligibilityService");
                return s && s.generateRestrictionForParty
                  ? (e.forEach((e) => {
                      (e.queueId = n), t.push(s.generateRestrictionForParty(e));
                    }),
                    Promise.all(t).then((e) => {
                      this.set("disabledReasons", i.Ember.A(e));
                    }))
                  : Promise.resolve();
              }
            }
            return Promise.resolve();
          },
          restrictionClass: i.Ember.computed(
            "eligibilitiesEntity.restrictions",
            "restrictions.[]",
            function () {
              return this.get("eligibilitiesEntity.restrictions") &&
                this.get("eligibilitiesEntity.restrictions").length > 0
                ? "high-severity"
                : "";
            },
          ),
          showQueueAvailabilityTooltip: i.Ember.on(
            "didInsertElement",
            i.Ember.observer("hasQueueAvailabilityWarning", function () {
              this.runTask(
                () => this.updateQueueAvailabilityWarningTooltip(),
                250,
              );
            }),
          ),
          updateQueueAvailabilityWarningTooltip: function () {
            const e = this.element.querySelector(
              ".parties-queue-warning-error",
            );
            if (this.get("hasQueueAvailabilityWarning")) {
              let t = this.get("_queueAvailabilityWarningTooltipDOM");
              if (!t) {
                (t = document.createElement("lol-uikit-tooltip")),
                  t.classList.add("parties-footer-tooltip");
                const e = m.contentBlockDialogSimple(
                  this.get("queueAvailabilityWarningTooltip"),
                );
                e.setAttribute("type", "tooltip-large"),
                  t.appendChild(e),
                  this.set("_queueAvailabilityWarningTooltipDOM", t);
              }
              c.assign(e, t, {}, this.get("tooltipConfig")), c.show(e);
            } else c.unassign(e);
          },
        });
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "hVhdJNrt",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\footer-notifications-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\footer-notifications-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\footer-notifications-component\\\\index.js\\" "],["text","\\n"],["block",["if"],[["get",["isQuickPlayModal"]]],null,19,17]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","        "],["open-element","lol-uikit-content-block",[]],["static-attr","class","parties-footer-tooltip"],["static-attr","type","tooltip-large"],["flush-element"],["text","\\n          "],["append",["unknown",["warningTooltipText"]],false],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["open-element","svg",[]],["static-attr","class","parties-autofill-warning-icon"],["static-attr","width","21"],["static-attr","height","20"],["static-attr","viewBox","0 0 21 20"],["static-attr","fill","none"],["static-attr","xmlns","http://www.w3.org/2000/svg","http://www.w3.org/2000/xmlns/"],["flush-element"],["text","\\n            "],["open-element","path",[]],["static-attr","fill-rule","evenodd"],["static-attr","clip-rule","evenodd"],["static-attr","d","M11.3889 3L18.5 15.25L17.6111 17H3.38889L2.5 15.25L9.61111 3H11.3889ZM9.61111 11.75L8.72222 7.375L10.5 6.5L12.2778 7.375L11.3889 11.75H9.61111ZM12.2778 14.375L10.5 16.125L8.72222 14.375L10.5 12.625L12.2778 14.375Z"],["flush-element"],["close-element"],["text","\\n          "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["open-element","div",[]],["static-attr","class","parties-autofill-protection-icon"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["shouldShowAutoFillProtection"]]],null,2,1],["text","        "],["append",["unknown",["positionWarning"]],false],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","parties-footer-warning"],["flush-element"],["text","\\n"],["block",["if"],[["get",["positionWarning"]]],null,3],["block",["uikit-tooltip"],null,[["tooltipConfig"],[["get",["tooltipConfig"]]]],0],["text","    "],["close-element"],["text","\\n  "]],"locals":[]},{"statements":[["block",["if"],[["get",["shouldShowAutoFillStatus"]]],null,4]],"locals":[]},{"statements":[["text","        "],["open-element","lol-uikit-content-block",[]],["static-attr","class","parties-footer-tooltip"],["static-attr","type","tooltip-large"],["flush-element"],["text","\\n          "],["append",["unknown",["mmrStandardDeviationWarningTooltip"]],false],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","parties-footer-warning"],["flush-element"],["text","\\n      "],["open-element","svg",[]],["static-attr","class","parties-mmr-warning-icon"],["static-attr","width","21"],["static-attr","height","20"],["static-attr","viewBox","0 0 21 20"],["static-attr","fill","none"],["static-attr","xmlns","http://www.w3.org/2000/svg","http://www.w3.org/2000/xmlns/"],["flush-element"],["text","\\n        "],["open-element","path",[]],["static-attr","fill-rule","evenodd"],["static-attr","clip-rule","evenodd"],["static-attr","d","M11.3889 3L18.5 15.25L17.6111 17H3.38889L2.5 15.25L9.61111 3H11.3889ZM9.61111 11.75L8.72222 7.375L10.5 6.5L12.2778 7.375L11.3889 11.75H9.61111ZM12.2778 14.375L10.5 16.125L8.72222 14.375L10.5 12.625L12.2778 14.375Z"],["flush-element"],["close-element"],["text","\\n      "],["close-element"],["text","\\n      "],["append",["unknown",["mmrStandardDeviationWarning"]],false],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipConfig"],[["get",["tooltipConfig"]]]],6],["text","    "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["hasMmrStandardDeviationWarning"]]],null,7,5]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["dynamic-attr","class",["concat",["parties-footer-error ",["unknown",["restrictionClass"]]]]],["flush-element"],["text","\\n      "],["open-element","svg",[]],["static-attr","class","parties-notification-warning-icon"],["static-attr","width","21"],["static-attr","height","20"],["static-attr","viewBox","0 0 21 20"],["static-attr","fill","none"],["static-attr","xmlns","http://www.w3.org/2000/svg","http://www.w3.org/2000/xmlns/"],["flush-element"],["text","\\n        "],["open-element","path",[]],["static-attr","fill-rule","evenodd"],["static-attr","clip-rule","evenodd"],["static-attr","d","M11.3889 3L18.5 15.25L17.6111 17H3.38889L2.5 15.25L9.61111 3H11.3889ZM9.61111 11.75L8.72222 7.375L10.5 6.5L12.2778 7.375L11.3889 11.75H9.61111ZM12.2778 14.375L10.5 16.125L8.72222 14.375L10.5 12.625L12.2778 14.375Z"],["flush-element"],["close-element"],["text","\\n      "],["close-element"],["text","\\n      "],["append",["unknown",["positionError"]],false],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["positionError"]]],null,9,8]],"locals":[]},{"statements":[["text","        "],["open-element","lol-uikit-content-block",[]],["static-attr","class","parties-footer-tooltip"],["static-attr","type","tooltip-large"],["flush-element"],["text","\\n          "],["append",["unknown",["readyWarningTooltip"]],false],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","parties-footer-warning parties-ready-warning"],["flush-element"],["text","\\n      "],["open-element","svg",[]],["static-attr","class","parties-ready-warning-icon"],["static-attr","width","21"],["static-attr","height","20"],["static-attr","viewBox","0 0 21 20"],["static-attr","fill","none"],["static-attr","xmlns","http://www.w3.org/2000/svg","http://www.w3.org/2000/xmlns/"],["flush-element"],["text","\\n        "],["open-element","path",[]],["static-attr","fill-rule","evenodd"],["static-attr","clip-rule","evenodd"],["static-attr","d","M11.3889 3L18.5 15.25L17.6111 17H3.38889L2.5 15.25L9.61111 3H11.3889ZM9.61111 11.75L8.72222 7.375L10.5 6.5L12.2778 7.375L11.3889 11.75H9.61111ZM12.2778 14.375L10.5 16.125L8.72222 14.375L10.5 12.625L12.2778 14.375Z"],["flush-element"],["close-element"],["text","\\n      "],["close-element"],["text","\\n      "],["append",["unknown",["readyWarning"]],false],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipConfig"],[["get",["tooltipConfig"]]]],11],["text","    "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["readyWarning"]]],null,12,10]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["dynamic-attr","class",["concat",["parties-restrictions-warning-error ",["unknown",["restrictionClass"]]]]],["flush-element"],["text","\\n      "],["open-element","svg",[]],["static-attr","class","parties-notification-warning-icon"],["static-attr","width","21"],["static-attr","height","20"],["static-attr","viewBox","0 0 21 20"],["static-attr","fill","none"],["static-attr","xmlns","http://www.w3.org/2000/svg","http://www.w3.org/2000/xmlns/"],["flush-element"],["text","\\n        "],["open-element","path",[]],["static-attr","fill-rule","evenodd"],["static-attr","clip-rule","evenodd"],["static-attr","d","M11.3889 3L18.5 15.25L17.6111 17H3.38889L2.5 15.25L9.61111 3H11.3889ZM9.61111 11.75L8.72222 7.375L10.5 6.5L12.2778 7.375L11.3889 11.75H9.61111ZM12.2778 14.375L10.5 16.125L8.72222 14.375L10.5 12.625L12.2778 14.375Z"],["flush-element"],["close-element"],["text","\\n      "],["close-element"],["text","\\n      "],["append",["helper",["sanitize"],[["get",["restrictionsText"]]],null],false],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["hasLobbyRestrictions"]]],null,14,13]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["dynamic-attr","class",["concat",["parties-queue-warning-error ",["unknown",["restrictionClass"]]]]],["flush-element"],["text","\\n      "],["open-element","svg",[]],["static-attr","class","parties-notification-warning-icon"],["static-attr","width","21"],["static-attr","height","20"],["static-attr","viewBox","0 0 21 20"],["static-attr","fill","none"],["static-attr","xmlns","http://www.w3.org/2000/svg","http://www.w3.org/2000/xmlns/"],["flush-element"],["text","\\n        "],["open-element","path",[]],["static-attr","fill-rule","evenodd"],["static-attr","clip-rule","evenodd"],["static-attr","d","M11.3889 3L18.5 15.25L17.6111 17H3.38889L2.5 15.25L9.61111 3H11.3889ZM9.61111 11.75L8.72222 7.375L10.5 6.5L12.2778 7.375L11.3889 11.75H9.61111ZM12.2778 14.375L10.5 16.125L8.72222 14.375L10.5 12.625L12.2778 14.375Z"],["flush-element"],["close-element"],["text","\\n      "],["close-element"],["text","\\n      "],["append",["unknown",["tra","parties_roster_invite_disabled_eligibility_disabled"]],false],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["hasQueueAvailabilityWarning"]]],null,16,15]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["dynamic-attr","class",["concat",["parties-restrictions-quick-play ",["unknown",["restrictionClass"]]]]],["flush-element"],["text","\\n      "],["open-element","svg",[]],["static-attr","class","parties-notification-warning-icon parties-notification-warning-icon-tooltip"],["static-attr","width","21"],["static-attr","height","20"],["static-attr","viewBox","0 0 21 20"],["static-attr","fill","none"],["static-attr","xmlns","http://www.w3.org/2000/svg","http://www.w3.org/2000/xmlns/"],["flush-element"],["text","\\n        "],["open-element","path",[]],["static-attr","fill-rule","evenodd"],["static-attr","clip-rule","evenodd"],["static-attr","d","M11.3889 3L18.5 15.25L17.6111 17H3.38889L2.5 15.25L9.61111 3H11.3889ZM9.61111 11.75L8.72222 7.375L10.5 6.5L12.2778 7.375L11.3889 11.75H9.61111ZM12.2778 14.375L10.5 16.125L8.72222 14.375L10.5 12.625L12.2778 14.375Z"],["flush-element"],["close-element"],["text","\\n      "],["close-element"],["text","\\n      "],["append",["unknown",["QPModalRestrictions"]],false],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["QPModalRestrictions"]]],null,18]],"locals":[]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1),
          s = l(n(19)),
          o = l(n(96)),
          a = l(n(10)),
          r = n(95);
        function l(e) {
          return e && e.__esModule ? e : { default: e };
        }
        n(266),
          (e.exports = i.Ember.Component.extend(s.default, {
            layout: n(267),
            classNames: ["v2-header-component"],
            classNameBindings: ["willAnimate:hidden"],
            platformConfigSingleton: a.default,
            lobbiesService: i.Ember.inject.service("lobbies"),
            assets: i.Ember.inject.service("assets"),
            mapId: i.Ember.computed.alias("selected.mapId"),
            gameMode: i.Ember.computed.alias("selected.queue.gameMode"),
            assetMutator: i.Ember.computed.alias("selected.queue.assetMutator"),
            category: i.Ember.computed.alias("selected.queue.category"),
            pickType: i.Ember.computed.alias("selected.pickType"),
            queueId: i.Ember.computed.alias("selected.queueId"),
            currentPlayer: i.Ember.computed.alias(
              "lobbiesService.currentPlayer",
            ),
            notInQueue: i.Ember.computed.not("isInQueue"),
            isGameModeSelectionEnabled: i.Ember.computed.and(
              "currentPlayer.isLeader",
              "notInQueue",
            ),
            isTFT: i.Ember.computed.alias("lobbiesService.isTFT"),
            patchNotesUrl: i.Ember.computed(
              "isTFT",
              "platformConfigSingleton.TftPatchNotesUrl",
              function () {
                return this.get("isTFT")
                  ? this.get("platformConfigSingleton.TftPatchNotesUrl")
                  : "";
              },
            ),
            mapName: i.Ember.computed(
              "mapId",
              "assets.availableMaps",
              function () {
                const e = this.get("mapId"),
                  t = this.get("assetMutator");
                return this.get("assets").getMap(e, this.get("gameMode"), t)
                  .name;
              },
            ),
            mapNameShorthand: i.Ember.computed(
              "mapId",
              "assets.availableMaps",
              "tra",
              function () {
                const e = this.get("mapId"),
                  t = this.get("assetMutator"),
                  n = this.get("assets").getMap(e, this.get("gameMode"), t);
                return this.get(`tra.map_name_short_${n.mapStringId}`);
              },
            ),
            queueName: i.Ember.computed(
              "lobbiesService.currentQueue",
              function () {
                const e = this.get("lobbiesService.currentQueue");
                return e ? e.shortName : "";
              },
            ),
            pickTypeName: i.Ember.computed(
              "pickType",
              "tra.ready",
              "lobbiesService.isMap21",
              "tra.game_select_pick_type_name_blind",
              function () {
                if (this.get("lobbiesService.isMap21"))
                  return this.get("tra.game_select_pick_type_name_blind");
                const e = this.get("pickType");
                return e ? this.get(`tra.game_select_pick_type_name_${e}`) : "";
              },
            ),
            mapBackgroundClass: i.Ember.computed(
              "mapId",
              "gameMode",
              "assets.availableMaps",
              "assetMutator",
              function () {
                const e = this.get("assets").getMap(
                  this.get("mapId"),
                  this.get("gameMode"),
                  this.get("assetMutator"),
                );
                return e
                  ? o.default.mapKey({ mapId: e.id, gameMode: e.gameMode })
                  : "";
              },
            ),
            tutorialData: i.Ember.computed(
              "assets.availableMaps",
              "mapId",
              "gameMode",
              "assetMutator",
              function () {
                const e = { tutorialCards: [], title: null, subheader: null },
                  t = this.get("assets").getMap(
                    this.get("mapId"),
                    this.get("gameMode"),
                    this.get("assetMutator"),
                  );
                return (
                  t &&
                    (Array.isArray(t.tutorialCards) &&
                      (e.tutorialCards = t.tutorialCards),
                    (e.title = t.locStrings.tutorial_title),
                    (e.subheader = t.locStrings.tutorial_subheader),
                    (e.tutorialBg = t.assets["tutorial-bg"] || ""),
                    (e.iconV2 = t.assets["icon-v2"] || "")),
                  e
                );
              },
            ),
            hasGameModeTutorial: i.Ember.computed.alias(
              "tutorialData.tutorialCards.length",
            ),
            didInsertElement() {
              this._super(...arguments);
              if (this.get("tutorialData").tutorialCards.length > 0) {
                const e = this.get("mapId"),
                  t = this.get("gameMode"),
                  n = this.get("tutorialData"),
                  s = this.get("assetMutator");
                i.PartyAPI._showGameModeTutorialIfNeeded(
                  e,
                  t,
                  n.tutorialCards,
                  s,
                  n.title,
                  n.subheader,
                  n.tutorialBg,
                  n.iconV2,
                );
              }
            },
            actions: {
              cancelFlow() {
                this.sendAction("cancelFlow");
              },
              showGameModeTutorial: function () {
                this.playSound(r.SFX_URLS.SFX_SOC_UI_CLICK_GENERIC);
                const e = this.get("gameMode"),
                  t = this.get("tutorialData");
                i.PartyAPI._showGameModeTutorial(
                  e,
                  t.tutorialCards,
                  t.title,
                  t.subheader,
                  t.tutorialBg,
                  t.iconV2,
                );
              },
            },
          }));
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "OraPGvLn",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\header-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\header-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\header-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","lobby-header-overlay"],["flush-element"],["close-element"],["text","\\n"],["open-element","div",[]],["static-attr","class","lobby-header-content"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","lobby-back-button-container"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","lobby-back-button"],["flush-element"],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipPosition","type"],["right","system"]],10],["text","      "],["append",["helper",["generic-button"],null,[["baseImgPath","overImgPath","downImgPath","disabledImgPath","onClickSound","onHoverSound","onClick","isEnabled"],["/fe/lol-parties/button-back-arrow.png","/fe/lol-parties/button-back-arrow-over.png","/fe/lol-parties/button-back-arrow-down.png","/fe/lol-parties/button-back-arrow-disabled.png","/fe/lol-uikit/sfx-uikit-button-gold-click.ogg","/fe/lol-uikit/sfx-uikit-button-gold-hover.ogg",["helper",["action"],[["get",[null]],"cancelFlow"],null],["get",["isGameModeSelectionEnabled"]]]]],false],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","lobby-header-vertical-line"],["flush-element"],["close-element"],["text","\\n  "],["close-element"],["text","\\n  "],["open-element","div",[]],["dynamic-attr","class",["concat",["lobby-header-map-icon ",["unknown",["mapBackgroundClass"]]]]],["flush-element"],["close-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","lobby-header-description"],["flush-element"],["text","\\n"],["block",["unless"],[["get",["isTFT"]]],null,5],["text","    "],["open-element","div",[]],["static-attr","class","lobby-header-detail"],["flush-element"],["append",["unknown",["queueName"]],false],["close-element"],["text","\\n"],["block",["unless"],[["get",["isTFT"]]],null,4],["text","  "],["close-element"],["text","\\n"],["block",["unless"],[["get",["isTFT"]]],null,3],["block",["if"],[["get",["hasGameModeTutorial"]]],null,2],["text","  "],["open-element","div",[]],["static-attr","class","lobby-header-buttons-container"],["flush-element"],["text","\\n"],["block",["if"],[["get",["patchNotesUrl"]]],null,1],["text","    "],["append",["helper",["social-leaderboard-button"],null,[["selected","queueType","currentPlayer"],[["get",["selected"]],["get",["selected","queue","type"]],["get",["currentPlayer"]]]]],false],["text","\\n"],["block",["if"],[["get",["lobbiesService","isOpenPartyEnabled"]]],null,0],["text","  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["append",["helper",["open-party-toggle"],null,[["showingState"],[["get",["showingState"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","a",[]],["dynamic-attr","href",["concat",[["unknown",["tftPatchNotesUrl"]]]]],["static-attr","target","_new"],["static-attr","class","patch-notes-button"],["flush-element"],["text","\\n        "],["append",["unknown",["tra","tft_patch_notes"]],false],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","lol-uikit-info-icon",[]],["static-attr","class","show-tutorial-button lobby-header-interactable"],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"showGameModeTutorial"],null],null],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","lobby-header-tooltip"],["flush-element"],["text","\\n      "],["append",["helper",["v2-point-eligibility"],null,[["selected","mapBackgroundClass","mapName","queueName","pickTypeName"],[["get",["selected"]],["get",["mapBackgroundClass"]],["get",["mapName"]],["get",["queueName"]],["get",["pickTypeName"]]]]],false],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","lobby-header-separator"],["flush-element"],["close-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","lobby-header-detail"],["flush-element"],["append",["unknown",["pickTypeName"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","lobby-header-detail"],["flush-element"],["append",["unknown",["mapNameShorthand"]],false],["close-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","lobby-header-separator"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","              "],["append",["unknown",["tra","parties_button_change_mode_in_queue"]],false],["text","\\n"]],"locals":[]},{"statements":[["text","                "],["append",["unknown",["tra","parties_button_change_mode_disabled"]],false],["text","\\n"]],"locals":[]},{"statements":[["text","                "],["append",["unknown",["tra","parties_button_change_mode"]],false],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["isGameModeSelectionEnabled"]]],null,8,7]],"locals":[]},{"statements":[["text","        "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n          "],["open-element","p",[]],["flush-element"],["text","\\n"],["block",["if"],[["get",["notInQueue"]]],null,9,6],["text","          "],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1),
          s = r(n(19)),
          o = r(n(72));
        n(269);
        var a = n(56);
        function r(e) {
          return e && e.__esModule ? e : { default: e };
        }
        const { RunMixin: l } = i.EmberAddons.EmberLifeline;
        e.exports = i.Ember.Component.extend(l, s.default, o.default, {
          layout: n(270),
          classNames: ["v2-lobby-root-component"],
          classNameBindings: ["willAnimate:hidden"],
          init(...e) {
            this._super(...e), (this._playerNames = i.playerNames);
          },
          queues: null,
          selected: null,
          showingState: null,
          prevPartyId: null,
          introAnimationComplete: !0,
          lobbiesService: i.Ember.inject.service("lobbies"),
          gameflowService: i.Ember.inject.service("gameflow"),
          chatService: i.Ember.inject.service("chat"),
          partySettings: i.Ember.inject.service("partySettings"),
          matchmakingService: i.Ember.inject.service("matchmaking"),
          quickPlayService: i.Ember.inject.service("quick-play"),
          partyId: i.Ember.computed.alias("lobbiesService.partyId"),
          scarcePositions: i.Ember.computed.alias(
            "lobbiesService.scarcePositions",
          ),
          isShowingParty: i.Ember.computed.alias("showingState.isShowingParty"),
          inParty: i.Ember.computed.and(
            "lobbiesService.inLobby",
            "isShowingParty",
          ),
          otherPartyMembers: i.Ember.computed.alias(
            "lobbiesService.otherCurrentPartyMembers",
          ),
          currentPartyMembers: i.Ember.computed.alias(
            "lobbiesService.currentPartyMembers",
          ),
          maxTeamSize: i.Ember.computed.alias("lobbiesService.maxTeamSize"),
          canStartMatchmaking: i.Ember.computed.alias(
            "lobbiesService.canStartMatchmaking",
          ),
          isSearching: i.Ember.computed.alias("matchmakingService.isSearching"),
          isMatchFound: i.Ember.computed.alias(
            "matchmakingService.isMatchFound",
          ),
          isInQueue: i.Ember.computed.or("isSearching", "isMatchFound"),
          isCurrentPlayerPartyLeader: i.Ember.computed.alias(
            "lobbiesService.isCurrentPlayerPartyLeader",
          ),
          currentPartyLeader: i.Ember.computed.alias(
            "lobbiesService.currentPartyLeader",
          ),
          chatConversationId: i.Ember.computed.alias(
            "lobbiesService.chatConversationId",
          ),
          currentPartyIsFull: i.Ember.computed.alias(
            "lobbiesService.currentPartyIsFull",
          ),
          currentPlayerCanInvite: i.Ember.computed.alias(
            "lobbiesService.currentPlayerCanInvite",
          ),
          autoFillEligible: i.Ember.computed.alias(
            "currentPlayer.autoFillEligible",
          ),
          shouldForceScarcePositionSelection: i.Ember.computed.alias(
            "lobbiesService.shouldForceScarcePositionSelection",
          ),
          buttonsDisabled: i.Ember.computed.or(
            "matchmakingService.isSearching",
            "matchmakingService.isMatchFound",
          ),
          buttonsEnabled: i.Ember.computed.not("buttonsDisabled"),
          currentPlayer: i.Ember.computed.alias("lobbiesService.currentPlayer"),
          currentPlayerHasInvitePrivileges: i.Ember.computed.alias(
            "currentPlayer.allowedInviteOthers",
          ),
          primaryPosition: i.Ember.computed.alias(
            "currentPlayer.firstPositionPreference",
          ),
          secondaryPosition: i.Ember.computed.alias(
            "currentPlayer.secondPositionPreference",
          ),
          animationsEnabled: i.Ember.computed.alias(
            "partySettings.largeAreaAnimationsEnabled",
          ),
          showAnimations: i.Ember.computed.and(
            "animationsEnabled",
            "isShowingParty",
          ),
          hasNotAnimatedForPartyId: i.Ember.computed.not(
            "hasAnimatedForPartyId",
          ),
          willAnimateIntro: i.Ember.computed.and(
            "showAnimations",
            "hasNotAnimatedForPartyId",
          ),
          willAnimateIdle: i.Ember.computed.and(
            "showAnimations",
            "hasAnimatedForPartyId",
            "introAnimationComplete",
          ),
          currentTeamIsFull: i.Ember.computed.alias(
            "lobbiesService.currentTeamIsFull",
          ),
          hasAnimatedForPartyId: i.Ember.computed(
            "prevPartyId",
            "partyId",
            function () {
              return (
                this.get("prevPartyId") &&
                this.get("prevPartyId") === this.get("partyId")
              );
            },
          ),
          positionSelectorOverlayPrimaryVisible: !1,
          positionSelectorOverlaySecondaryVisible: !1,
          initializeObservedObjects: i.Ember.on(
            "didInsertElement",
            function () {
              this.get("matchmakingService.isSearching"),
                this.get("matchmakingService.isLowPriorityQueue"),
                this.get(
                  "matchmakingService.hasLowPriorityPenaltyTimeRemaining",
                ),
                this.autoFillEligibleObserver();
            },
          ),
          showingPartyObserver: i.Ember.on(
            "didInsertElement",
            i.Ember.observer("isShowingParty", function () {
              this.get("willAnimateIdle") &&
                this.runTask(() => {
                  this._startBannerIdleAnimations();
                }, 100);
            }),
          ),
          animationObserver: i.Ember.on(
            "didInsertElement",
            i.Ember.observer("willAnimateIntro", function () {
              this.get("willAnimateIntro") &&
                (this.set("introAnimationComplete", !1),
                this.runTask(() => {
                  this._startAnimations();
                }, 100));
            }),
          ),
          _startBannerIdleAnimations() {
            const e = this.element.querySelectorAll(
                ".lobby-banner > lol-regalia-parties-v2-element",
              ),
              t = new i.gsap.TimelineMax({ paused: !0 });
            e &&
              e.forEach((e) => {
                const n = e.querySelector(".lobby-banner-contents");
                e.setAttribute("show-intro", !1),
                  t.add(() => {
                    e.setAttribute("animations", !0);
                  }, "start"),
                  n &&
                    t.fromTo(
                      n,
                      0.2,
                      { opacity: 0 },
                      { opacity: 1 },
                      "start+=0.7",
                    );
              }),
              t.play();
          },
          _startAnimations() {
            const e = this.element.querySelectorAll(
                ".lobby-banner > lol-regalia-parties-v2-element",
              ),
              t = this.element.querySelectorAll(".invite-button-container"),
              n = this.element.querySelector(".footer-container"),
              s = this.element.querySelector(
                ".lobby-footer-notifications-container",
              ),
              o = this.element.querySelector("#lottie-intro-anim"),
              a = this.element.querySelector("#player-banner-gem-intro"),
              r = new i.gsap.TimelineMax({ paused: !0 });
            r.add("start", "+=0.1"),
              r.add(() => {
                this.set("prevPartyId", this.get("partyId"));
              }, "start"),
              r.add(() => {
                this.set("introAnimationComplete", !0);
              }, "start+=2.5"),
              o &&
                r.add(() => {
                  o.animation.play();
                }, "start+=0.75"),
              a &&
                r.add(() => {
                  a && a.play(),
                    this.playSound(
                      "/fe/lol-parties/sfx-lobby-banner-intro-flare.ogg",
                    );
                }, "start"),
              e &&
                e.forEach((e) => {
                  const t = e.querySelector(".lobby-banner-contents");
                  r.add(() => {
                    e.setAttribute("hide-crest", !0),
                      e.setAttribute("hide-banner", !0);
                  }, "start"),
                    r.add(() => {
                      e.removeAttribute("hide-banner"),
                        e.setAttribute("animations", !0),
                        e.setAttribute("show-intro", !0);
                    }, "start+=0.3"),
                    r.add(() => {
                      e.removeAttribute("hide-crest");
                    }, "start+=0.7"),
                    t &&
                      r.fromTo(
                        t,
                        0.2,
                        { opacity: 0 },
                        { opacity: 1 },
                        "start+=0.7",
                      );
                }),
              t &&
                t.forEach((e) => {
                  r.fromTo(
                    e,
                    0.2,
                    { opacity: 0 },
                    { opacity: 1 },
                    "start+=0.7",
                  );
                }),
              n &&
                r.fromTo(n, 0.1, { opacity: 0 }, { opacity: 1 }, "start+=1.2"),
              s &&
                r.fromTo(s, 0.1, { opacity: 0 }, { opacity: 1 }, "start+=1.2"),
              r.play();
          },
          partyInvitesAllowed: i.Ember.computed(
            "currentPlayerCanInvite",
            "currentPartyIsFull",
            "buttonsEnabled",
            function () {
              const e = this.get("buttonsEnabled"),
                t = this.get("currentPlayerCanInvite"),
                n = this.get("currentPartyIsFull");
              return e && t && !n;
            },
          ),
          playerPlaceholders: i.Ember.computed(
            "currentPartyMembers.[]",
            "otherPartyMembers.[]",
            "maxTeamSize",
            "lobbiesService.isCherry",
            "lobbiesService.maxLobbySize",
            function () {
              if (0 === (this.get("currentPartyMembers.length") || 0))
                return i.Ember.A();
              let e = this.get("lobbiesService.isCherry")
                ? this.get("lobbiesService.maxLobbySize")
                : this.get("maxTeamSize");
              e || (e = 0);
              const t = this.get("otherPartyMembers.length") || 0,
                n = Math.max(e - t - 1, 0),
                s = [];
              for (let e = 0; e < n; e++)
                s.push(i.Ember.Object.create({ isPlaceholder: !0 }));
              return i.Ember.A(s);
            },
          ),
          observeInvitePrivilegesChange: i.Ember.observer(
            "currentPlayerHasInvitePrivileges",
            function () {
              i.Ember.run.once(this, this._handleInviteGrantedRevoked);
            },
          ),
          _handleInviteGrantedRevoked: function () {
            const e = this.get("currentPlayerHasInvitePrivileges"),
              t = this.get("_previousCanInvite"),
              n = this.get("isCurrentPlayerPartyLeader");
            t !== e &&
              null !== t &&
              (!e || this.get("_hasPlayedInviteGranted") || n
                ? e ||
                  !this.get("_hasPlayedInviteGranted") ||
                  n ||
                  (this.get("chatService").sendChatMessage(
                    this.get(
                      "tra.parties_invite_privileges_chat_notification_revoked",
                    ),
                    this.get("chatConversationId"),
                  ),
                  this.playSound("/fe/lol-parties/sfx-lobby-notif-revoke.ogg"),
                  this.set("_hasPlayedInviteGranted", !1))
                : (this.playSound(
                    "/fe/lol-parties/sfx-lobby-notif-invite-granted.ogg",
                  ),
                  this.get("chatService").sendChatMessage(
                    this.get(
                      "tra.parties_invite_privileges_chat_notification_granted",
                    ),
                    this.get("chatConversationId"),
                  ),
                  this.set("_hasPlayedInviteGranted", !0))),
              this.set("_previousCanInvite", e);
          },
          observePartyLeaderChange: i.Ember.observer(
            "isCurrentPlayerPartyLeader",
            function () {
              i.Ember.run.once(this, this._handlePartyLeaderGranted);
            },
          ),
          _handlePartyLeaderGranted: function () {
            const e = this.get("currentPartyLeader.summonerId"),
              t = this.get("currentPlayer.summonerId"),
              n = this.get("isCurrentPlayerPartyLeader"),
              i = this.get("_previousPartyLeaderId");
            n && i !== t && !!i && !this.get("_hasPlayedLeaderSound")
              ? (this.get("chatService").sendChatMessage(
                  this.get("tra.parties_promoted_to_leader_chat_notification"),
                  this.get("chatConversationId"),
                ),
                this.playSound(
                  "/fe/lol-parties/sfx-lobby-notif-captain-granted.ogg",
                ),
                this.set("_hasPlayedLeaderSound", !0))
              : n || this.set("_hasPlayedLeaderSound", !1),
              this.set("_previousPartyLeaderId", e);
          },
          autoFillEligibleObserver: i.Ember.observer(
            "autoFillEligible",
            "shouldForceScarcePositionSelection",
            function () {
              i.Ember.run.once(this, function () {
                this.get("_showingAutofillModal") ||
                  !this.get("autoFillEligible") ||
                  this.get("shouldForceScarcePositionSelection") ||
                  (this.set("_showingAutofillModal", !0),
                  this.get("partySettings")
                    .shouldHideAutofillModal()
                    .then((e) => {
                      e
                        ? this.set("_showingAutofillModal", !1)
                        : this.showAutoFillSettingModal();
                    }));
              });
            },
          ),
          showAutoFillSettingModal: function () {
            const e = i.ComponentFactory.create("AutofillSettingComponent", {
                partySettings: this.get("partySettings"),
              }),
              { domNode: t } = e,
              n = this.get("ModalManager").add({
                type: "DialogAlert",
                data: {
                  contents: t,
                  okText: this.get(
                    "tra.parties_autofill_settings_dialog_confirm",
                  ),
                },
              });
            return (
              n.domNode.classList.add("parties-autofill-eligible-modal"),
              n.okPromise.then(() => {
                this.get("partySettings").set("sessionHideAutofillModal", !0),
                  this.set("_showingAutofillModal", !1);
              }),
              n
            );
          },
          lowPriorityNotificationObserver: i.Ember.observer(
            "matchmakingService.isSearching",
            function () {
              const e = this.get("selfLowPriorityModal");
              this.get("matchmakingService.isSearching") &&
              this.get("matchmakingService.isLowPriorityQueue")
                ? this.showLowPriorityNotification()
                : e &&
                  (this.removeModal(e),
                  this.set("selfLowPriorityModal", void 0));
            },
          ),
          lowPriorityNotificationRemovalObserver: i.Ember.observer(
            "matchmakingService.hasLowPriorityPenaltyTimeRemaining",
            function () {
              const e = this.get("selfLowPriorityModal"),
                t = this.get(
                  "matchmakingService.hasLowPriorityPenaltyTimeRemaining",
                );
              e && !t && this.removeModal(e);
            },
          ),
          showLowPriorityNotification: function () {
            this.get("matchmakingService.isQueueDelay") &&
            this.get("isCurrentPlayerPartyLeader")
              ? this.showQueueDelayToast()
              : this.get("matchmakingService.isSelfInLowPriorityQueue")
                ? this.get("selfLowPriorityModal") ||
                  this.showSelfLowPriorityModal()
                : this.get(
                    "matchmakingService.lowPriorityData.penaltyTimeRemaining",
                  ) > 0 && this.showLowPriorityToast();
          },
          showLowPriorityToast: function () {
            const e = this.get(
              "matchmakingService.lowPriorityData.penalizedSummonerIds",
            );
            if (!e || e.length < 1) return;
            const t = e.map((e) =>
              this._playerNames.getDisplayNameBySummonerId(e),
            );
            Promise.all(t).then((e) => {
              const t = i.ComponentFactory.create(
                "LowPriorityQueueToastComponent",
                { penalizedPlayerNames: i.lodash.map(e, "playerNameFull") },
              );
              this.get("ToastManager").add({
                type: "DialogToast",
                data: { contents: t.domNode },
                onRemove: () => t.onRemove(),
              });
            });
          },
          showSelfLowPriorityModal: function () {
            const e = i.ComponentFactory.create(
                "LowPriorityQueueModalComponent",
              ),
              t = this.showModal({
                type: "DialogAlert",
                data: {
                  contents: e.domNode,
                  okText: this.get("tra.low_priority_queue_modal_leave_queue"),
                  onOk: () => {
                    this.get("lobbiesService").cancelMatchmakingSearch(),
                      this.set("selfLowPriorityModal", void 0),
                      e.onRemove();
                  },
                },
              });
            this.set("selfLowPriorityModal", t);
          },
          showQueueDelayToast: function () {
            const e = i.UIKit.getTemplateHelper().contentBlockTooltip(
              this.get("tra.low_priority_queue_delay_warning_header"),
              this.get("tra.low_priority_queue_delay_warning_body"),
              "notification",
            );
            this.get("ToastManager").add({
              type: "DialogToast",
              data: { contents: e },
            });
          },
          _setPositionPreferences(e, t) {
            const n = this.get("primaryPosition"),
              i = this.get("secondaryPosition");
            let s = e === a.POSITION_ROLES.PRIMARY ? t : n,
              o = e === a.POSITION_ROLES.SECONDARY ? t : i;
            if (s !== n || o !== i)
              return (
                (n !== t && i !== t) ||
                  ((s = i),
                  (o = i === a.POSITIONS.FILL ? a.POSITIONS.UNSELECTED : n)),
                this.get("lobbiesService").shouldHideSecondaryPosition(s) &&
                  (o = a.POSITIONS.UNSELECTED),
                this.get("lobbiesService").setPositionPreferences({
                  firstPreference: s,
                  secondPreference: o,
                })
              );
          },
          visibleSecondaryPosition: i.Ember.computed(
            "shouldHideSecondaryPositionForLocalPlayer",
            "secondaryPosition",
            function () {
              return this.get("shouldHideSecondaryPositionForLocalPlayer")
                ? a.POSITIONS.UNSELECTED
                : this.get("secondaryPosition");
            },
          ),
          shouldHideSecondaryPositionForLocalPlayer: i.Ember.computed(
            "primaryPosition",
            "scarcePositions",
            "shouldForceScarcePositionSelection",
            "currentTeamIsFull",
            "lobbiesService",
            function () {
              const e = this.get("lobbiesService");
              if (!e) return !1;
              const t = this.get("primaryPosition");
              return e.shouldHideSecondaryPosition(t);
            },
          ),
          shouldSecondaryButtonHideNonScarcePositions: i.Ember.computed(
            "primaryPosition",
            "scarcePositions",
            "shouldForceScarcePositionSelection",
            "lobbiesService",
            function () {
              const e = this.get("lobbiesService");
              if (!e) return !1;
              const t = this.get("primaryPosition");
              return e.shouldSecondaryButtonHideNonScarcePositions(t);
            },
          ),
          showQuickPlaySelections: i.Ember.computed(
            "lobbiesService.lobby.gameConfig.showQuickPlaySlotSelection",
            function () {
              return this.get(
                "lobbiesService.lobby.gameConfig.showQuickPlaySlotSelection",
              );
            },
          ),
          _setQuickPlaySelectingSlotIndex(e, t) {
            const n = e ? t : null;
            this.set("selectingSlotIndex", n);
          },
          actions: {
            setShowQuickPlayModal(e, t) {
              this._setQuickPlaySelectingSlotIndex(e, t),
                this.set("showQuickPlayModal", e);
            },
            setQuickPlaySelectingSlotIndex(e) {
              this._setQuickPlaySelectingSlotIndex(!0, e);
            },
            showInviteModal: function () {
              this.sendAction("showInviteModal");
            },
            openOverlay(e, t) {
              e === a.POSITION_ROLES.PRIMARY
                ? (this.set("positionSelectorOverlayPrimaryPosition", t),
                  this.set("positionSelectorOverlayPrimaryVisible", !0))
                : e === a.POSITION_ROLES.SECONDARY &&
                  (this.set("positionSelectorOverlaySecondaryPosition", t),
                  this.set("positionSelectorOverlaySecondaryVisible", !0));
            },
            closeOverlay(e) {
              e === a.POSITION_ROLES.PRIMARY
                ? this.set("positionSelectorOverlayPrimaryVisible", !1)
                : e === a.POSITION_ROLES.SECONDARY &&
                  this.set("positionSelectorOverlaySecondaryVisible", !1);
            },
            setPositionPreferences(e, t) {
              this._setPositionPreferences(e, t);
            },
          },
        });
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "5cGRZ1dg",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\parties-root-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\parties-root-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\parties-root-component\\\\index.js\\" "],["text","\\n"],["block",["if"],[["get",["inParty"]]],null,6]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["append",["helper",["v2-position-selector-modal"],null,[["animationsEnabled","childrenPositionStyle","selectingOrdinal","scarcePositions","primaryPosition","secondaryPosition","currentPartyIsFull","shouldHideNonScarcePositions","openOverlay","closeOverlay","setPositionPreferences"],[["get",["animationsEnabled"]],["get",["positionSelectorOverlaySecondaryPosition"]],"SECONDARY",["get",["scarcePositions"]],["get",["primaryPosition"]],["get",["visibleSecondaryPosition"]],["get",["currentPartyIsFull"]],["get",["shouldSecondaryButtonHideNonScarcePositions"]],["helper",["action"],[["get",[null]],"openOverlay"],null],["helper",["action"],[["get",[null]],"closeOverlay"],null],["helper",["action"],[["get",[null]],"setPositionPreferences"],null]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["append",["helper",["v2-position-selector-modal"],null,[["animationsEnabled","childrenPositionStyle","selectingOrdinal","scarcePositions","primaryPosition","secondaryPosition","currentPartyIsFull","openOverlay","closeOverlay","setPositionPreferences"],[["get",["animationsEnabled"]],["get",["positionSelectorOverlayPrimaryPosition"]],"PRIMARY",["get",["scarcePositions"]],["get",["primaryPosition"]],["get",["visibleSecondaryPosition"]],["get",["currentPartyIsFull"]],["helper",["action"],[["get",[null]],"openOverlay"],null],["helper",["action"],[["get",[null]],"closeOverlay"],null],["helper",["action"],[["get",[null]],"setPositionPreferences"],null]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["append",["helper",["v2-banner-placeholder"],null,[["placeholder","isInQueue","partyInvitesAllowed","showInviteModal"],[["get",["placeholder"]],["get",["isInQueue"]],["get",["partyInvitesAllowed"]],"showInviteModal"]]],false],["text","\\n"]],"locals":["placeholder"]},{"statements":[["text","      "],["append",["helper",["v2-banner"],null,[["selected","member","puuid","summonerId","chatConversationId","allowPresenceUpdates","animationsEnabled","showQuickPlaySelections"],[["get",["selected"]],["get",["member"]],["get",["member","puuid"]],["get",["member","summonerId"]],["get",["chatConversationId"]],true,["get",["animationsEnabled"]],["get",["showQuickPlaySelections"]]]]],false],["text","\\n"]],"locals":["member"]},{"statements":[["text","      "],["append",["helper",["v2-banner"],null,[["selected","member","puuid","isLocalPlayer","summonerId","chatConversationId","animationsEnabled","showQuickPlaySelections","onQuickPlaySelectButtonClick"],[["get",["selected"]],["get",["currentPlayer"]],["get",["currentPlayer","puuid"]],true,["get",["currentPlayer","summonerId"]],["get",["chatConversationId"]],["get",["animationsEnabled"]],["get",["showQuickPlaySelections"]],"setShowQuickPlayModal"]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","party-members-container"],["flush-element"],["text","\\n"],["block",["if"],[["get",["currentPlayer"]]],null,4],["block",["each"],[["get",["otherPartyMembers"]]],[["key"],["puuid"]],3],["block",["each"],[["get",["playerPlaceholders"]]],[["key"],["index"]],2],["text","  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["lower-section"],null,[["currentPlayer"],[["get",["currentPlayer"]]]],5],["text","  "],["open-element","div",[]],["static-attr","class","footer-container"],["flush-element"],["text","\\n    "],["append",["helper",["v2-footer"],null,[["showingState","selected","currentPlayerCanInvite","shouldHideSecondaryPosition","openOverlay","closeOverlay","inParty"],[["get",["showingState"]],["get",["selected"]],["get",["currentPlayerCanInvite"]],["get",["shouldHideSecondaryPositionForLocalPlayer"]],["helper",["action"],[["get",[null]],"openOverlay"],null],["helper",["action"],[["get",[null]],"closeOverlay"],null],["get",["inParty"]]]]],false],["text","\\n  "],["close-element"],["text","\\n\\n  "],["open-element","div",[]],["static-attr","class","navbar-blur"],["flush-element"],["close-element"],["text","\\n\\n  "],["open-element","div",[]],["static-attr","class","lobby-intro-animation-container"],["flush-element"],["text","\\n    "],["open-element","lol-uikit-lottie",[]],["static-attr","id","lottie-intro-anim"],["static-attr","src","/fe/lol-parties/lottie/parties-v2/intro-party.json"],["static-attr","autoplay","false"],["flush-element"],["close-element"],["text","\\n    "],["open-element","lol-uikit-video",[]],["static-attr","id","player-banner-gem-intro"],["static-attr","fade-in","0"],["static-attr","fade-out","0"],["static-attr","src","/fe/lol-static-assets/videos/lobby-crystal-intro-player.webm"],["flush-element"],["close-element"],["text","\\n  "],["close-element"],["text","\\n\\n  "],["open-element","lc-modal",[]],["dynamic-attr","onHide",["helper",["action"],[["get",[null]],"setShowQuickPlayModal",false],null],null],["dynamic-attr","open",["unknown",["showQuickPlayModal"]],null],["flush-element"],["text","\\n    "],["open-element","lc-modal-content",[]],["flush-element"],["text","\\n      "],["open-element","lol-uikit-dialog-frame",[]],["static-attr","orientation","bottom"],["static-attr","dismissable",""],["static-attr","dismissable-type","inside"],["flush-element"],["text","\\n        "],["append",["helper",["quick-play-loadout-selector"],null,[["showQuickPlaySelections","defaultSelections","localPlayer","selectingSlotIndex","shouldHideSecondaryPosition","setSelectingSlotIndex","setShowQuickPlayModal"],[["get",["lobbiesService","lobby","gameConfig","showQuickPlaySlotSelection"]],["get",["quickPlayService","quickPlayDefaultSelections"]],["get",["currentPlayer"]],["get",["selectingSlotIndex"]],["get",["shouldHideSecondaryPositionForLocalPlayer"]],"setQuickPlaySelectingSlotIndex","setShowQuickPlayModal"]]],false],["text","\\n      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n\\n"],["block",["if"],[["get",["positionSelectorOverlayPrimaryVisible"]]],null,1],["block",["if"],[["get",["positionSelectorOverlaySecondaryVisible"]]],null,0]],"locals":[]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i,
          s = n(1),
          o = (i = n(19)) && i.__esModule ? i : { default: i };
        n(272);
        const { RunMixin: a } = s.EmberAddons.EmberLifeline;
        e.exports = s.Ember.Component.extend(a, o.default, {
          layout: n(273),
          classNames: ["v2-player-management-button-component"],
          tagName: "button",
          classNameBindings: ["typeClass"],
          disabled: !1,
          disabledAfterClickDelay: 0,
          typeClass: s.Ember.computed("type", function () {
            return "v2-player-management-button-" + this.get("type");
          }),
          onDidInsertElement: s.Ember.on("didInsertElement", function () {
            this.addHoverClickSound(
              this.element,
              "/fe/lol-uikit/sfx-uikit-button-circlegold-hover.ogg",
              "/fe/lol-parties/sfx-lobby-button-banner-click.ogg",
            );
          }),
          enableInviteButton: function (e = 0) {
            this.runTask(() => this.set("disabled", !1), e);
          },
          click: function () {
            this.get("disabled") ||
              (this.sendAction("action"),
              this.set("disabled", !0),
              this.enableInviteButton(this.get("disabledAfterClickDelay")));
          },
        });
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "4yniM95D",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\player-management-button-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\player-management-button-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\player-management-button-component\\\\index.js\\" "],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipPosition","type"],["top","system"]],0]],"locals":[],"named":[],"yields":["default"],"blocks":[{"statements":[["text","  "],["yield","default"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1),
          s = a(n(72)),
          o = a(n(19));
        function a(e) {
          return e && e.__esModule ? e : { default: e };
        }
        n(275);
        const r = (0, i.emberDataBinding)({
          Ember: i.Ember,
          websocket: (0, i.getProvider)().getSocket(),
          logPrefix: "parties:player-banner:component",
          basePaths: { summoner: "/lol-summoner", chat: "/lol-chat" },
        });
        e.exports = i.Ember.Component.extend(r, s.default, o.default, {
          layout: n(276),
          classNames: ["v2-player-party-controls"],
          classNameBindings: [
            "isMe:main-player-controls:other-player-controls",
          ],
          isLeader: !1,
          isMe: !1,
          isMultiteamLobby: !1,
          chatService: i.Ember.inject.service("chat"),
          lobbiesService: i.Ember.inject.service("lobbies"),
          matchmakingService: i.Ember.inject.service("matchmaking"),
          partySettingsService: i.Ember.inject.service("party-settings"),
          contextMenuManager: i.UIKit.getContextMenuManager(),
          playerNames: i.playerNames,
          animationsEnabled: i.Ember.computed.alias(
            "partySettingsService.bannerAnimationsEnabled",
          ),
          isPlaceholder: i.Ember.computed.not("member"),
          isNotPlaceholder: i.Ember.computed.not("isPlaceholder"),
          currentTeamIsFull: i.Ember.computed.alias(
            "lobbiesService.currentTeamIsFull",
          ),
          summonerId: i.Ember.computed.alias("member.summonerId"),
          puuid: i.Ember.computed.alias("member.puuid"),
          showPartyOwnerTools: i.Ember.computed.and(
            "currentPlayerIsLeader",
            "isNotMe",
            "notQueued",
          ),
          showPartyMemberTools: i.Ember.computed.and("isNotMe", "notQueued"),
          showPlayerOptionsTools: i.Ember.computed.or(
            "showPartyOwnerTools",
            "showPartyMemberTools",
          ),
          isNotMe: i.Ember.computed.not("isMe"),
          showGhostedBanner: i.Ember.computed.alias("member.showGhostedBanner"),
          shouldShowGhostedBanner: i.Ember.computed.and(
            "isNotPlaceholder",
            "isNotMe",
            "showGhostedBanner",
          ),
          hasInvitePrivileges: i.Ember.computed.alias(
            "member.allowedInviteOthers",
          ),
          currentPlayerIsLeader: i.Ember.computed.alias(
            "lobbiesService.isCurrentPlayerPartyLeader",
          ),
          currentPlayerIsNotLeader: i.Ember.computed.not(
            "currentPlayerIsLeader",
          ),
          isMatchNotFound: i.Ember.computed.alias(
            "matchmakingService.isMatchNotFound",
          ),
          isNotSearching: i.Ember.computed.alias(
            "matchmakingService.isNotSearching",
          ),
          notQueued: i.Ember.computed.and("isMatchNotFound", "isNotSearching"),
          playerControlTooltipText: i.Ember.computed(
            "showPartyOwnerTools",
            "showPartyOwnerTools",
            "tra",
            "tra.captain_controls_tooltip",
            "tra.player_controls_tooltip",
            function () {
              return this.get("showPartyOwnerTools")
                ? this.get("tra.captain_controls_tooltip")
                : this.get("tra.player_controls_tooltip");
            },
          ),
          showPositionSelector: i.Ember.computed(
            "member",
            "lobbiesService.showPositionSelector",
            function () {
              return (
                !!this.get("member") &&
                !!this.get("lobbiesService.showPositionSelector")
              );
            },
          ),
          observeCurrentPlayerIsLeader: i.Ember.observer(
            "currentPlayerIsLeader",
            function () {
              i.Ember.run.once(this, this._onCurrentPlayerIsLeader);
            },
          ),
          _onCurrentPlayerIsLeader: function () {
            this.set("_transferringLeadership", !1);
          },
          isFriended: i.Ember.computed(
            "member",
            "member.summonerId",
            "chatService.friends.[]",
            function () {
              return this.get("chatService").isFriend(
                this.get("member.summonerId"),
              );
            },
          ),
          contextMenuModel: i.Ember.computed(
            "showPartyOwnerTools",
            "showPlayerOptionsTools",
            "showPartyMemberTools",
            "hasInvitePrivileges",
            "isMe",
            "member",
            "isFriended",
            "tra.ready",
            "tra.context_menu_promote_to_leader",
            "tra.context_menu_kick",
            "tra.context_menu_friend_request",
            "tra.context_menu_block",
            "tra.context_menu_revoke_invite_privilege",
            "tra.context_menu_grant_invite_privilege",
            "tra.context_menu_view_profile",
            function () {
              const e = this.get("isFriended"),
                t = this.get("showPartyOwnerTools"),
                n =
                  this.get("showPartyOwnerTools") ||
                  !e ||
                  this.get("showPartyMemberTools");
              return !this.get("isMe") && this.get("member") && n
                ? t
                  ? [
                      {
                        action: function () {
                          this.send("promoteToOwner");
                        },
                        class: "promote",
                        target: this,
                        label: this.get("tra.context_menu_promote_to_leader"),
                      },
                      {
                        action: function () {
                          this.send("kick");
                        },
                        class: "kick",
                        target: this,
                        label: this.get("tra.context_menu_kick"),
                      },
                      {
                        action: function () {
                          this.send("sendFriendRequest");
                        },
                        class: "add-friend",
                        target: this,
                        label: this.get("tra.context_menu_friend_request"),
                        hidden: e,
                      },
                      {
                        action: function () {
                          this.send("toggleInvitePrivilege");
                        },
                        class: this.get("hasInvitePrivileges")
                          ? "revoke-invite"
                          : "grant-invite",
                        target: this,
                        label: this.get("hasInvitePrivileges")
                          ? this.get("tra.context_menu_revoke_invite_privilege")
                          : this.get("tra.context_menu_grant_invite_privilege"),
                      },
                      {
                        action: function () {
                          this.send("viewProfile");
                        },
                        class: "view-profile",
                        target: this,
                        label: this.get("tra.context_menu_view_profile"),
                      },
                    ]
                  : [
                      {
                        action: function () {
                          this.send("sendFriendRequest");
                        },
                        class: "add-friend",
                        target: this,
                        label: this.get("tra.context_menu_friend_request"),
                        hidden: e,
                      },
                      {
                        action: function () {
                          this.send("block");
                        },
                        class: "block",
                        target: this,
                        label: this.get("tra.context_menu_block"),
                      },
                      {
                        action: function () {
                          this.send("viewProfile");
                        },
                        class: "view-profile",
                        target: this,
                        label: this.get("tra.context_menu_view_profile"),
                      },
                    ]
                : null;
            },
          ),
          promotePlayer: function () {
            const e = this.get("member");
            if (!e || !e.summonerId)
              throw new Error(
                "Attempting to act on invalid party member: " + e,
              );
            this.set("_transferringLeadership", !0),
              this.get("lobbiesService").transferLeadershipToPlayer(
                e.summonerId,
              );
          },
          blockPlayer: function (e) {
            this.get("api.chat").post("/v1/blocked-players", e);
          },
          sendFriendRequest: function (e) {
            this.get("api.chat").post("/v2/friend-requests", e);
          },
          viewProfile: function (e) {
            return (0, i.getProvider)()
              .getOptional("rcp-fe-lol-profiles")
              .then(
                (t) => {
                  t.showOverlay({ summonerId: e.summonerId });
                },
                (e) => {
                  i.logger.error("Provider getOptional failure");
                },
              );
          },
          actions: {
            openPlayerMenu: function () {
              this.get("contextMenuModel") &&
                (this.contextMenuManager.setMenuItems(
                  this.get("contextMenuModel"),
                ),
                this.contextMenuManager.openAtEvent(event));
            },
            sendFriendRequest: function () {
              if (this.get("member")) {
                const e = { direction: "out", puuid: this.get("puuid") };
                this.sendFriendRequest(e), this.set("isFriended", !0);
                const t = this.get("tra").formatString(
                  "context_menu_friend_request_sent_to",
                  {
                    summonerName: this.get("member.displayName.playerNameFull"),
                  },
                );
                this.showToast(t);
              }
            },
            kick: async function () {
              if (!this.get("member"))
                throw new ReferenceError(
                  "game-select-lobby-panel-teams-player component must have a member",
                );
              const { playerName: e } = await this.get(
                  "playerNames",
                ).getDisplayNameByPUUID(this.get("puuid")),
                t = this.get("tra").formatString(
                  "lobby_kick_confirmation_text",
                  { summonerName: e },
                ),
                n = this.$(
                  `<lol-uikit-content-block type="dialog-small">\n          <p>${t}</p>\n        </lol-uikit-content-block>`,
                ),
                i = this.get("member.summonerId");
              if (
                this.get("currentPlayerIsLeader") &&
                !this.get("_transferringLeadership")
              ) {
                this.showModal({
                  type: "DialogConfirm",
                  data: {
                    contents: n,
                    acceptText: this.get("tra.parties_button_kick"),
                    declineText: this.get("tra.parties_button_cancel"),
                    onAccept: () => {
                      this.get("lobbiesService").removePlayerFromParty(i);
                    },
                  },
                }).domNode.classList.add("parties-kick-player-modal");
              }
            },
            toggleInvitePrivilege: function () {
              const e = this.get("member"),
                t = this.get("currentPlayerIsLeader");
              if (
                !this.get("_transferringLeadership") &&
                t &&
                e &&
                !this.get("isMe")
              ) {
                const t = e.allowedInviteOthers
                    ? "revoke-invite"
                    : "grant-invite",
                  n = this.get("member.summonerId");
                this.get("lobbiesService").sendInvitePrivilegeAction(n, t);
              }
            },
            promoteToOwner: function () {
              this.get("member") && this.promotePlayer();
            },
            block: function () {
              if (this.get("member")) {
                const e = { summonerId: this.get("member.summonerId") };
                this.blockPlayer(e);
              }
            },
            viewProfile: function () {
              if (this.get("member")) {
                const e = { summonerId: this.get("member.summonerId") };
                return this.viewProfile(e);
              }
            },
          },
        });
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "HNgtLqy2",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\player-party-controls-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\player-party-controls-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\player-party-controls-component\\\\index.js\\" "],["text","\\n"],["block",["if"],[["get",["isNotMe"]]],null,3],["text","\\n"],["block",["if"],[["get",["shouldShowGhostedBanner"]]],null,0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","lol-not-ready-loader"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","lol-not-ready-loader-segment"],["flush-element"],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","lol-not-ready-loader-segment"],["flush-element"],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","lol-not-ready-loader-segment"],["flush-element"],["close-element"],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n          "],["open-element","p",[]],["flush-element"],["text","\\n            "],["append",["unknown",["playerControlTooltipText"]],false],["text","\\n          "],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["v2-player-management-button"],null,[["type","action"],["options","openPlayerMenu"]],1]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["dynamic-attr","class",["concat",["player-party-tools ",["helper",["if"],[["get",["isMultiteamLobby"]],"player-party-tools__is-multiteam-lobby"],null]]]],["flush-element"],["text","\\n"],["block",["if"],[["get",["showPlayerOptionsTools"]]],null,2],["text","  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1),
          s = r(n(10)),
          o = r(n(19));
        n(278);
        var a = n(9);
        function r(e) {
          return e && e.__esModule ? e : { default: e };
        }
        e.exports = i.Ember.Component.extend(o.default, {
          layout: n(279),
          classNames: ["v2-point-eligibility-component"],
          classNameBindings: ["isCustomGame:parties-point-eligibility-custom"],
          platformConfig: s.default,
          clientConfig: i.Ember.inject.service("client-config"),
          isLegendaryChampionMasteryEnabled: i.Ember.computed.oneWay(
            "clientConfig.isLegendaryChampionMasteryEnabled",
          ),
          platformEternalsEnabled: i.Ember.computed.alias(
            "platformConfig.eternalsEnabled",
          ),
          lobbyChallengesEnabled: i.Ember.computed.alias(
            "platformConfig.lobbyChallengesEnabled",
          ),
          eternalsService: i.Ember.inject.service("eternals"),
          challengesService: i.Ember.inject.service("challenges"),
          isCustomGame: !1,
          tooltipConfig: i.Ember.computed(
            "isCustomGame",
            "tooltipConfigCustom",
            "tooltipConfigParties",
            function () {
              return this.get("isCustomGame")
                ? this.get("tooltipConfigCustom")
                : this.get("tooltipConfigParties");
            },
          ),
          tooltipConfigParties: {
            targetAnchor: { x: "center", y: "bottom" },
            tooltipAnchor: { x: "center", y: "top" },
            offset: { x: 0, y: 5 },
          },
          tooltipConfigCustom: {
            targetAnchor: { x: "right", y: "center" },
            tooltipAnchor: { x: "left", y: "center" },
            offset: { x: 5, y: 0 },
          },
          teamSize: i.Ember.computed("selected.maxPlaying", function () {
            if (a.MULTI_TEAM_GAME_MODES.includes(this.get("selected.gameMode")))
              return this.get("tra.game_select_team_size_multiteam_lowercase");
            const e = this.get("selected.maxPlaying");
            return this.get("tra").formatString("game_select_team_size", {
              size: e,
            });
          }),
          xpEnabled: i.Ember.computed.alias(
            "selected.queue.queueRewards.isXpEnabled",
          ),
          xpDisabledClass: i.Ember.computed("xpEnabled", function () {
            return this.get("xpEnabled") ? "" : "disabled";
          }),
          championMasteryEnabled: i.Ember.computed.alias(
            "selected.queue.queueRewards.isChampionPointsEnabled",
          ),
          championMasteryDisabledClass: i.Ember.computed(
            "championMasteryEnabled",
            function () {
              return this.get("championMasteryEnabled") ? "" : "disabled";
            },
          ),
          eternalsEnabledForQueue: i.Ember.computed(
            "eternalsService.enabledQueues",
            "selected.queue.id",
            function () {
              const e = this.get("selected.queue.id"),
                t = this.get("eternalsService.enabledQueues");
              return !(!t || null === t) && t.includes(e);
            },
          ),
          eternalsDisabledClass: i.Ember.computed(
            "eternalsEnabledForQueue",
            function () {
              return this.get("eternalsEnabledForQueue") ? "" : "disabled";
            },
          ),
          challengesEnabledForQueue: i.Ember.computed(
            "challengesService.enabledQueues",
            "selected.queue.id",
            function () {
              const e = this.get("selected.queue.id"),
                t = this.get("challengesService.enabledQueues");
              return !!t && t.includes(e);
            },
          ),
          challengesDisabledClass: i.Ember.computed(
            "challengesEnabledForQueue",
            function () {
              return this.get("challengesEnabledForQueue") ? "" : "disabled";
            },
          ),
        });
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "mUcvbSg6",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\point-eligibility-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\point-eligibility-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\point-eligibility-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","lobby-point-eligibility-content"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","point-eligibility-icon"],["flush-element"],["close-element"],["text","\\n"],["close-element"],["text","\\n\\n"],["block",["uikit-tooltip"],null,[["tooltipConfig"],[["get",["tooltipConfig"]]]],2],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["open-element","li",[]],["dynamic-attr","class",["concat",["lobby-point-eligibility-tooltip-content-challenges ",["unknown",["challengesDisabledClass"]]]]],["flush-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","lobby-point-eligibility-tooltip-content-challenges-icon"],["flush-element"],["text","\\n        "],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","lobby-point-eligibility-tooltip-content-description"],["flush-element"],["text","\\n          "],["append",["unknown",["tra","challenges_point_eligibility_tooltip_challenges"]],false],["text","\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","li",[]],["dynamic-attr","class",["concat",["lobby-point-eligibility-tooltip-content-eternals ",["unknown",["eternalsDisabledClass"]]]]],["flush-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","lobby-point-eligibility-tooltip-content-eternals-icon"],["flush-element"],["text","\\n        "],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","lobby-point-eligibility-tooltip-content-description"],["flush-element"],["text","\\n          "],["append",["unknown",["tra","parties_point_eligibility_tooltip_eternals"]],false],["text","\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","lol-uikit-content-block",[]],["static-attr","padding","medium"],["static-attr","class","lobby-point-eligibility-tooltip-content"],["flush-element"],["text","\\n\\n    "],["open-element","div",[]],["static-attr","class","lobby-point-eligibility-tooltip-content-header"],["flush-element"],["text","\\n      "],["open-element","div",[]],["dynamic-attr","class",["concat",["lobby-header-map-icon ",["unknown",["mapBackgroundClass"]]]]],["flush-element"],["close-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","lobby-point-eligibility-tooltip-content-header-title"],["flush-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","lobby-point-eligibility-tooltip-content-header-map"],["flush-element"],["append",["unknown",["mapName"]],false],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","lobby-point-eligibility-tooltip-content-header-mode"],["flush-element"],["append",["unknown",["queueName"]],false],["text"," "],["append",["unknown",["pickTypeName"]],false],["text"," ("],["append",["unknown",["teamSize"]],false],["text",")"],["close-element"],["text","\\n      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n\\n    "],["open-element","div",[]],["static-attr","class","lobby-point-eligibility-tooltip-content-divider-container"],["flush-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","lobby-point-eligibility-tooltip-content-divider"],["flush-element"],["close-element"],["text","\\n    "],["close-element"],["text","\\n\\n    "],["open-element","h6",[]],["static-attr","class","lobby-point-eligibility-tooltip-content-title"],["flush-element"],["text","\\n      "],["append",["unknown",["tra","parties_point_eligibility_tooltip_title"]],false],["text","\\n    "],["close-element"],["text","\\n\\n    "],["open-element","ul",[]],["static-attr","class","lobby-point-eligibility-tooltip-content-list"],["flush-element"],["text","\\n      "],["open-element","li",[]],["dynamic-attr","class",["concat",["lobby-point-eligibility-tooltip-content-experience ",["unknown",["xpDisabledClass"]]]]],["flush-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","lobby-point-eligibility-tooltip-content-experience-icon"],["flush-element"],["text","\\n        "],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","lobby-point-eligibility-tooltip-content-description"],["flush-element"],["text","\\n          "],["append",["unknown",["tra","parties_point_eligibility_tooltip_experience"]],false],["text","\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n      "],["open-element","li",[]],["dynamic-attr","class",["concat",["lobby-point-eligibility-tooltip-content-mastery ",["unknown",["championMasteryDisabledClass"]]]]],["flush-element"],["text","\\n        "],["open-element","div",[]],["dynamic-attr","class",["concat",["lobby-point-eligibility-tooltip-content-mastery-icon ",["helper",["if"],[["get",["isLegendaryChampionMasteryEnabled"]],"lcm-mastery"],null]]]],["flush-element"],["text","\\n        "],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","lobby-point-eligibility-tooltip-content-description"],["flush-element"],["text","\\n          "],["append",["unknown",["tra","parties_point_eligibility_tooltip_masteries"]],false],["text","\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n\\n"],["block",["if"],[["get",["platformEternalsEnabled"]]],null,1],["text","\\n"],["block",["if"],[["get",["lobbyChallengesEnabled"]]],null,0],["text","    "],["close-element"],["text","\\n\\n  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1),
          s = n(56);
        n(281);
        e.exports = i.Ember.Component.extend({
          layout: n(282),
          classNames: ["v2-position-selector-component"],
          isInQueue: !1,
          lobbiesService: i.Ember.inject.service("lobbies"),
          partySettingsService: i.Ember.inject.service("party-settings"),
          currentTeamIsFull: i.Ember.computed.alias(
            "lobbiesService.currentTeamIsFull",
          ),
          currentPartyMembers: i.Ember.computed.alias(
            "lobbiesService.currentPartyMembers",
          ),
          currentPartySize: i.Ember.computed.alias(
            "lobbiesService.currentPartySize",
          ),
          scarcePositions: i.Ember.computed.alias(
            "lobbiesService.scarcePositions",
          ),
          getPositionStyles(e) {
            const t = this.element.querySelector(
              `.position-selector-button.${e}`,
            );
            if (!t) return "";
            const n = t.getBoundingClientRect();
            return `position: absolute; top: ${n.top - 102}px; left: ${n.left + n.width / 2 - 178}px;`;
          },
          isPrimaryDisabled: i.Ember.computed("isInQueue", function () {
            return this.get("isInQueue");
          }),
          isSecondaryDisabled: i.Ember.computed(
            "primaryPosition",
            "secondaryPosition",
            "isInQueue",
            function () {
              const e = this.get("primaryPosition"),
                t = this.get("secondaryPosition");
              return (
                (e === s.POSITIONS.UNSELECTED &&
                  t === s.POSITIONS.UNSELECTED) ||
                this.get("isInQueue")
              );
            },
          ),
          actions: {
            openOverlay(e) {
              const t = this.getPositionStyles(e);
              this.sendAction("openOverlay", e, t);
            },
          },
        });
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "gdrau6ud",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\position-selector\\\\v2-position-selector\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\position-selector\\\\v2-position-selector\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\position-selector\\\\v2-position-selector\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","position-selector-buttons-container"],["flush-element"],["text","\\n  "],["append",["helper",["v2-position-selector-button"],null,[["ordinal","position","disabled","handleClick"],["PRIMARY",["get",["primaryPosition"]],["get",["isPrimaryDisabled"]],["helper",["action"],[["get",[null]],"openOverlay"],null]]]],false],["text","\\n  "],["append",["helper",["v2-position-selector-button"],null,[["ordinal","position","disabled","hidden","handleClick"],["SECONDARY",["get",["secondaryPosition"]],["get",["isSecondaryDisabled"]],["get",["shouldHideSecondaryPosition"]],["helper",["action"],[["get",[null]],"openOverlay"],null]]]],false],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i,
          s = n(1),
          o = (i = n(19)) && i.__esModule ? i : { default: i };
        n(284);
        var a = n(56),
          r = n(95);
        const l = [
            a.POSITIONS.TOP,
            a.POSITIONS.JUNGLE,
            a.POSITIONS.MIDDLE,
            a.POSITIONS.BOTTOM,
            a.POSITIONS.UTILITY,
          ],
          c = [a.POSITIONS.JUNGLE, a.POSITIONS.BOTTOM];
        e.exports = s.Ember.Component.extend(o.default, {
          layout: n(285),
          classNames: ["horizontal-options-showcase"],
          classNameBindings: ["isQuickPlayModal:quick-play"],
          isQuickPlayModal: !1,
          isAnyPositionHovered: !1,
          lobbiesService: s.Ember.inject.service("lobbies"),
          isMap21: s.Ember.computed.alias("lobbiesService.isMap21"),
          init() {
            this._super(...arguments);
            const e = this.get("scarcePositions") || [];
            this.get("isMap21")
              ? this.set(
                  "positionOptions",
                  c.map((e) => ({ position: e })),
                )
              : this.set(
                  "positionOptions",
                  l.map((t) => ({ position: t, inDemand: e.includes(t) })),
                );
          },
          selectedPosition: s.Ember.computed(
            "selectingOrdinal",
            "primaryPosition",
            "secondaryPosition",
            function () {
              const e = this.get("selectingOrdinal");
              return e === a.POSITION_ROLES.PRIMARY
                ? this.get("primaryPosition")
                : e === a.POSITION_ROLES.SECONDARY
                  ? this.get("secondaryPosition")
                  : null;
            },
          ),
          isPrimaryCentered: s.Ember.computed(
            "selectingOrdinal",
            "primaryPosition",
            "currentPartyIsFull",
            function () {
              return (
                this.get("currentPartyIsFull") ||
                (this.get("selectingOrdinal") === a.POSITION_ROLES.PRIMARY &&
                  this.get("primaryPosition") === a.POSITIONS.FILL)
              );
            },
          ),
          isAnimatingIntroObserver: s.Ember.on(
            "didInsertElement",
            s.Ember.observer("isAnimatingIntro", function () {
              this.get("isAnimatingIntro") && this._startIntroAnimation();
            }),
          ),
          isAnimatingOutroObserver: s.Ember.on(
            "didInsertElement",
            s.Ember.observer("isAnimatingOutro", function () {
              this.get("isAnimatingOutro") && this._startOutroAnimation();
            }),
          ),
          _initIntroAnimation() {
            const e = this.element.querySelector("#lottie-intro-animation"),
              t = this.element.querySelectorAll(
                ".position-selector-option-container",
              ),
              n = this.element.querySelector(
                ".horizontal-options-showcase-content",
              ),
              i = new s.gsap.TimelineMax({ paused: !0 });
            i.add("start", "+=0"),
              e &&
                (i.add(() => {
                  e && e.play();
                }, "start"),
                i.fromTo(e, 0.1, { opacity: 0 }, { opacity: 1 }, "start"),
                i.fromTo(e, 0.5, { opacity: 1 }, { opacity: 0 }, "start+=0.1"),
                i.add(() => {
                  e && e.stop();
                }, "start+=0.7")),
              n && i.add(() => n.classList.add("no-overflow"), "start");
            for (let e = 0; e < t.length; e++) {
              const n = t[e];
              i.fromTo(
                n,
                0.12,
                { y: 25 },
                { y: 0 },
                "start+=" + (0.0175 * e + 0.03),
              );
            }
            i.add(() => {
              this.sendAction("completeIntroAnimation");
            }, "start+=0.7"),
              i.eventCallback("onComplete", () => {
                n.classList.remove("no-overflow");
              }),
              this.set("introAnimation", i);
          },
          _initOutroAnimation() {
            const e = this.get("selectingOrdinal"),
              t = this.element.querySelector("#outro-base"),
              n = this.element.querySelector("#outro-magic"),
              i = this.element.querySelector(
                ".horizontal-options-showcase-content",
              ),
              o = this.element.querySelector(
                ".horizontal-options-showcase-background",
              ),
              l = new s.gsap.TimelineMax({ paused: !0 });
            l.add("start", "+=0"),
              t &&
                l.add(() => {
                  t && t.play();
                }, "start"),
              n &&
                l.add(() => {
                  n && n.play();
                }, "start"),
              i && l.to(i, 0.2, { opacity: 0 }, "start"),
              o && l.to(o, 0.2, { opacity: 0 }, "start"),
              l.add(() => {
                t.pause(), n.pause(), this.sendAction("completeOutroAnimation");
              }, "start+=0.5"),
              l.eventCallback("onComplete", () => {
                i.removeAttribute("style"), o.removeAttribute("style");
              });
            const c =
              e === a.POSITION_ROLES.PRIMARY
                ? r.SFX_URLS.SFX_RADIALMENU_PRIMARY_CLOSE
                : r.SFX_URLS.SFX_RADIALMENU_SECONDARY_CLOSE;
            l.add(() => {
              this.playSound(c);
            }, "start"),
              this.set("outroAnimation", l);
          },
          _startIntroAnimation() {
            this.get("introAnimation") || this._initIntroAnimation();
            const e = this.get("introAnimation");
            e && e.restart();
          },
          _startOutroAnimation() {
            this.get("outroAnimation") || this._initOutroAnimation();
            const e = this.get("outroAnimation");
            e && e.restart();
          },
          actions: {
            selectPosition(e, t) {
              this.sendAction("selectPosition", e, t);
            },
            setIsPositionHovered(e) {
              this.set("isAnyPositionHovered", e);
            },
          },
        });
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "aaQmNdvl",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\position-selector\\\\v2-horizontal-options-showcase\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\position-selector\\\\v2-horizontal-options-showcase\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\position-selector\\\\v2-horizontal-options-showcase\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","horizontal-options-showcase-background"],["flush-element"],["text","\\n"],["close-element"],["text","\\n"],["open-element","div",[]],["static-attr","class","horizontal-options-showcase-content"],["flush-element"],["text","\\n"],["block",["each"],[["get",["positionOptions"]]],null,2],["block",["unless"],[["get",["isQuickPlayModal"]]],null,1],["close-element"],["text","\\n\\n"],["block",["unless"],[["get",["isQuickPlayModal"]]],null,0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["comment"," animation elements "],["text","\\n  "],["open-element","div",[]],["static-attr","class","animations-wrapper"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","animation-intro-container"],["flush-element"],["text","\\n      "],["open-element","lol-uikit-lottie",[]],["static-attr","id","lottie-intro-animation"],["static-attr","src","/fe/lol-parties/lottie/parties-v2/intro-role-selector.json"],["static-attr","autoplay","false"],["static-attr","loop","true"],["flush-element"],["close-element"],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","animation-outro-base-container"],["flush-element"],["text","\\n      "],["open-element","lol-uikit-video",[]],["static-attr","class","animation-outro"],["static-attr","id","outro-base"],["static-attr","fade-in","0"],["static-attr","fade-out","0"],["static-attr","preload",""],["static-attr","src","/fe/lol-parties/parties-v2/outro-role-selector.webm"],["flush-element"],["close-element"],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","div",[]],["dynamic-attr","class",["concat",["animation-outro-magic-container ",["helper",["if"],[["get",["isPrimaryCentered"]],"centered"],null]]]],["flush-element"],["text","\\n      "],["open-element","lol-uikit-video",[]],["static-attr","class","animation-outro"],["static-attr","id","outro-magic"],["static-attr","fade-in","0"],["static-attr","fade-out","0"],["static-attr","preload",""],["static-attr","src","/fe/lol-parties/parties-v2/outro-role-selector-magic.webm"],["flush-element"],["close-element"],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","animation-button-icon"],["flush-element"],["text","\\n      "],["append",["helper",["v2-position-selector-button"],null,[["ordinal","position"],["PRIMARY",["get",["selectedPosition"]]]]],false],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","horizontal-options-showcase-vertical-divider"],["flush-element"],["close-element"],["text","\\n    "],["append",["helper",["v2-position-selector-option"],null,[["position","primaryPosition","secondaryPosition","ordinal","isAnyPositionHovered","selectPosition","setIsPositionHovered","useGenerousHitbox"],["FILL",["get",["primaryPosition"]],["get",["secondaryPosition"]],["get",["selectingOrdinal"]],["get",["isAnyPositionHovered"]],["helper",["action"],[["get",[null]],"selectPosition"],null],["helper",["action"],[["get",[null]],"setIsPositionHovered"],null],true]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["append",["helper",["v2-position-selector-option"],null,[["position","inDemand","primaryPosition","secondaryPosition","shouldHideNonScarcePositions","ordinal","isQuickPlayModal","isAnyPositionHovered","selectPosition","setIsPositionHovered","useGenerousHitbox"],[["get",["positionOption","position"]],["get",["positionOption","inDemand"]],["get",["primaryPosition"]],["get",["secondaryPosition"]],["get",["shouldHideNonScarcePositions"]],["get",["selectingOrdinal"]],["get",["isQuickPlayModal"]],["get",["isAnyPositionHovered"]],["helper",["action"],[["get",[null]],"selectPosition"],null],["helper",["action"],[["get",[null]],"setIsPositionHovered"],null],true]]],false],["text","\\n"]],"locals":["positionOption"]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        n(287),
          (e.exports = i.Ember.Component.extend({
            layout: n(288),
            classNames: ["v2-position-icon-component"],
            classNameBindings: [
              "position",
              "selected",
              "hovered",
              "inDemand",
              "isQuickPlayModal:quick-play",
            ],
          }));
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "qT4+mMif",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\position-selector\\\\v2-position-icon\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\position-selector\\\\v2-position-icon\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\position-selector\\\\v2-position-icon\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["dynamic-attr","class",["concat",["position-image-container ",["unknown",["size"]]]]],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","position-image"],["flush-element"],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        n(290),
          (e.exports = i.Ember.Component.extend({
            layout: n(291),
            classNames: ["v2-banner-position-icon-component"],
            isPrimary: !1,
            isQuickplayModal: !1,
            positionImagePath: i.Ember.computed(
              "isQuickplayModal",
              "imagePath",
              "imagePathBlue",
              function () {
                return this.get("isQuickplayModal")
                  ? this.get("imagePathBlue")
                  : this.get("imagePath");
              },
            ),
            imagePath: i.Ember.computed("position", "isPrimary", function () {
              const e = (this.get("position") || "").toLowerCase();
              return `/fe/lol-parties/icon-position-banner-${this.get("isPrimary") ? "primary" : "secondary"}-${e}.png`;
            }),
            imagePathBlue: i.Ember.computed(
              "position",
              "isPrimary",
              function () {
                const e = (this.get("position") || "").toLowerCase();
                this.get("isPrimary");
                return `/fe/lol-parties/icon-position-button-${e}.png`;
              },
            ),
          }));
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "eadmmsTE",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\position-selector\\\\v2-banner-position-icon\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\position-selector\\\\v2-banner-position-icon\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\position-selector\\\\v2-banner-position-icon\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","position-image-container"],["flush-element"],["text","\\n  "],["open-element","img",[]],["static-attr","class","position-image"],["dynamic-attr","src",["unknown",["positionImagePath"]],null],["flush-element"],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i,
          s = n(1),
          o = (i = n(19)) && i.__esModule ? i : { default: i },
          a = n(95);
        n(293);
        var r = n(56);
        const { RunMixin: l } = s.EmberAddons.EmberLifeline;
        e.exports = s.Ember.Component.extend(l, o.default, {
          layout: n(294),
          classNames: ["position-selector-button"],
          classNameBindings: [
            "ordinal",
            "position",
            "disabled:disabled",
            "hidden:hidden",
          ],
          disabled: !1,
          hidden: !1,
          isHintAnimationVisible: s.Ember.computed(
            "position",
            "disabled",
            function () {
              return (
                this.get("position") === r.POSITIONS.UNSELECTED &&
                !this.get("disabled")
              );
            },
          ),
          didInsertElement() {
            this._super(...arguments),
              this.runTask(() => {
                const e = this.element.querySelector("#lottie-intro-animation");
                e && e.play();
              }, 100);
          },
          positionImagePath: s.Ember.computed("position", function () {
            return `/fe/lol-parties/icon-position-button-${(this.get("position") || "").toLowerCase()}.png`;
          }),
          actions: {
            openOverlay: function (e) {
              this.get("handleClick")(e),
                this.playSound(a.SFX_URLS.SFX_RADIALMENU_OPEN);
            },
            onHover() {
              this.playSound(a.SFX_URLS.SFX_GOLD_HOVER);
            },
          },
        });
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "0jd4s+eQ",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\position-selector\\\\v2-position-selector-button\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\position-selector\\\\v2-position-selector-button\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\position-selector\\\\v2-position-selector-button\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","position-selector-button-background"],["dynamic-attr","onmousedown",["helper",["action"],[["get",[null]],"openOverlay",["get",["ordinal"]]],null],null],["dynamic-attr","onmouseenter",["helper",["action"],[["get",[null]],"onHover"],null],null],["flush-element"],["text","\\n  "],["open-element","img",[]],["static-attr","class","position-image"],["dynamic-attr","src",["unknown",["positionImagePath"]],null],["flush-element"],["close-element"],["text","\\n"],["close-element"],["text","\\n"],["open-element","div",[]],["dynamic-attr","class",["concat",["position-selector-button-animation-container ",["helper",["if"],[["get",["isHintAnimationVisible"]],"visible"],null]]]],["flush-element"],["text","\\n  "],["open-element","lol-uikit-lottie",[]],["static-attr","id","lottie-intro-animation"],["static-attr","src","/fe/lol-parties/lottie/parties-v2/intro-role-selector-button.json"],["static-attr","autoplay","false"],["static-attr","loop","true"],["flush-element"],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        n(296);
        var s,
          o = (s = n(19)) && s.__esModule ? s : { default: s },
          a = n(95),
          r = n(56);
        e.exports = i.Ember.Component.extend(o.default, {
          layout: n(297),
          classNames: ["v2-position-selector-option"],
          classNameBindings: [
            "position",
            "isPositionAlreadySelected:already-selected",
            "inDemand",
            "hovered",
            "showPositionText:show-text",
            "isFill:fill",
            "isQuickPlayModal:quick-play",
          ],
          useGenerousHitbox: !1,
          hovered: !1,
          isAnyPositionHovered: !1,
          isFill: i.Ember.computed.equal("position", r.POSITIONS.FILL),
          lobbiesService: i.Ember.inject.service("lobbies"),
          isMap21: i.Ember.computed.alias("lobbiesService.isMap21"),
          isPositionAlreadySelected: i.Ember.computed(
            "primaryPosition",
            "secondaryPosition",
            "position",
            function () {
              const e = this.get("position");
              return (
                this.get("primaryPosition") === e ||
                this.get("secondaryPosition") === e
              );
            },
          ),
          showPositionSelectedText: i.Ember.computed(
            "isPositionAlreadySelected",
            "isAnyPositionHovered",
            "isQuickPlayModal",
            function () {
              return (
                !!this.get("isQuickPlayModal") &&
                this.get("isPositionAlreadySelected") &&
                !this.get("isAnyPositionHovered")
              );
            },
          ),
          showPositionText: i.Ember.computed.or(
            "showPositionSelectedText",
            "hovered",
          ),
          runPriorityAnimation: i.Ember.computed(
            "showPositionText",
            "isAnimationRunning",
            function () {
              return this.get("showPositionText") && this.get("inDemand");
            },
          ),
          positionText: i.Ember.computed("tra", "position", function () {
            const e = this.get("position");
            return this.get("isMap21") && e === r.POSITIONS.BOTTOM
              ? e
                ? this.get(
                    `tra.parties_position_${r.MAP21_LANE_ROLE.toLowerCase()}`,
                  )
                : ""
              : e
                ? this.get(`tra.parties_position_${e.toLowerCase()}`)
                : "";
          }),
          shouldShow: i.Ember.computed(
            "shouldHideNonScarcePositions",
            "inDemand",
            "isFill",
            function () {
              const e = this.get("shouldHideNonScarcePositions"),
                t = this.get("inDemand"),
                n = this.get("isFill");
              return !e || t || n;
            },
          ),
          actions: {
            handlePositionSelected(e, t) {
              this.get("selectPosition")(e, t),
                this.playSound(a.SFX_URLS.SFX_RADIALMENU_ROLE_SELECT);
            },
            onHoverIn() {
              this.playSound(a.SFX_URLS.SFX_RADIALMENU_ROLE_HOVER),
                this.set("hovered", !0),
                this.sendAction("setIsPositionHovered", !0);
            },
            onHoverOut() {
              this.set("hovered", !1),
                this.sendAction("setIsPositionHovered", !1);
            },
          },
        });
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "n7j7QV8S",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\position-selector\\\\v2-position-selector-option\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\position-selector\\\\v2-position-selector-option\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\position-selector\\\\v2-position-selector-option\\\\index.js\\" "],["text","\\n"],["block",["if"],[["get",["shouldShow"]]],null,0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","position-selector-option-container"],["flush-element"],["text","\\n    "],["open-element","div",[]],["dynamic-attr","class",["concat",["position-selector-text position ",["helper",["if"],[["get",["showPositionText"]],"in-demand-position"],null]]]],["flush-element"],["text","\\n      "],["append",["unknown",["positionText"]],false],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","div",[]],["dynamic-attr","class",["concat",["position-selector-text in-demand ",["helper",["if"],[["get",["inDemand"]],"visible"],null]," ",["helper",["if"],[["get",["runPriorityAnimation"]],"in-demand-priority-animation"],null]]]],["flush-element"],["text","\\n      "],["append",["unknown",["tra","parties_position_in_demand"]],false],["text","\\n    "],["close-element"],["text","\\n    "],["append",["helper",["v2-position-icon"],null,[["position","selected","hovered","inDemand","isQuickPlayModal"],[["get",["position"]],["get",["isPositionAlreadySelected"]],["get",["hovered"]],["get",["inDemand"]],["get",["isQuickPlayModal"]]]]],false],["text","\\n  "],["close-element"],["text","\\n  "],["open-element","div",[]],["dynamic-attr","class",["concat",["position-selector-wrapper ",["helper",["if"],[["get",["useGenerousHitbox"]],"visible"],null]]]],["dynamic-attr","onmouseup",["helper",["action"],[["get",[null]],"handlePositionSelected",["get",["ordinal"]],["get",["position"]]],null],null],["dynamic-attr","onmouseenter",["helper",["action"],[["get",[null]],"onHoverIn"],null],null],["dynamic-attr","onmouseleave",["helper",["action"],[["get",[null]],"onHoverOut"],null],null],["flush-element"],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        n(299);
        e.exports = i.Ember.Component.extend({
          layout: n(300),
          classNames: ["selection-modal"],
          classNameBindings: [
            "isAnimatingOutro:is-closing",
            "isQuickPlayModal:quick-play",
          ],
          selectingOrdinal: null,
          childrenPositionStyle: null,
          isQuickPlayModal: !1,
          init() {
            this._super(...arguments),
              (this.keypressEventHandler =
                this.keypressEventHandler.bind(this));
          },
          didInsertElement() {
            this._super(...arguments),
              this.get("animationsEnabled") && this.set("isAnimatingIntro", !0),
              document.addEventListener("keyup", this.keypressEventHandler);
          },
          keypressEventHandler(e) {
            27 === e.which && this._closeSelectionModal();
          },
          willDestroy() {
            this._super(...arguments),
              document.removeEventListener("keyup", this.keypressEventHandler),
              this._closeSelectionModal();
          },
          _closeSelectionModal() {
            if (this.get("isAnimatingOutro")) return;
            this.set("isAnimatingIntro", !1), this.set("isAnimatingOutro", !1);
            const e = this.get("selectingOrdinal");
            this.sendAction("closeOverlay", e);
          },
          actions: {
            selectPosition(e, t) {
              this.sendAction("setPositionPreferences", e, t),
                this.get("animationsEnabled")
                  ? this.set("isAnimatingOutro", !0)
                  : this.sendAction("closeOverlay", e);
            },
            handleClick() {
              this._closeSelectionModal();
            },
            onIntroAnimationComplete() {
              this.set("isAnimatingIntro", !1);
            },
            onOutroAnimationComplete() {
              this.set("isAnimatingOutro", !1), this._closeSelectionModal();
            },
          },
        });
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "D4O64cAU",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\position-selector\\\\v2-position-selector-modal\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\position-selector\\\\v2-position-selector-modal\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\position-selector\\\\v2-position-selector-modal\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","selection-modal-wrapper"],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"handleClick"],null],null],["flush-element"],["close-element"],["text","\\n"],["open-element","div",[]],["static-attr","class","selection-modal-content"],["dynamic-attr","style",["unknown",["childrenPositionStyle"]],null],["flush-element"],["text","\\n  "],["append",["helper",["v2-horizontal-options-showcase"],null,[["isAnimatingIntro","isAnimatingOutro","scarcePositions","completeIntroAnimation","completeOutroAnimation","selectingOrdinal","primaryPosition","secondaryPosition","currentPartyIsFull","shouldHideNonScarcePositions","isQuickPlayModal","selectPosition"],[["get",["isAnimatingIntro"]],["get",["isAnimatingOutro"]],["get",["scarcePositions"]],["helper",["action"],[["get",[null]],"onIntroAnimationComplete"],null],["helper",["action"],[["get",[null]],"onOutroAnimationComplete"],null],["get",["selectingOrdinal"]],["get",["primaryPosition"]],["get",["secondaryPosition"]],["get",["currentPartyIsFull"]],["get",["shouldHideNonScarcePositions"]],["get",["isQuickPlayModal"]],"selectPosition"]]],false],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i,
          s = n(1),
          o = (i = n(19)) && i.__esModule ? i : { default: i },
          a = n(12);
        n(302);
        e.exports = s.Ember.Component.extend(o.default, {
          layout: n(303),
          classNames: ["v2-parties-invite-info-panel"],
          currentPlayerCanInvite: !1,
          isCustom: !1,
          isTFT: !1,
          isNotTFT: s.Ember.computed.not("isTFT"),
          lobbiesService: s.Ember.inject.service("lobbies"),
          tftService: s.Ember.inject.service("tft"),
          activeMilestonesProgress: s.Ember.computed.alias(
            "tftService.activeMilestonesProgress",
          ),
          honorSuggestionsEnabled: s.Ember.computed.alias(
            "lobbiesService.honorSuggestionsEnabled",
          ),
          invitedPlayerIds: s.Ember.computed.alias(
            "lobbiesService.invitedPlayerIds",
          ),
          hasInvites: s.Ember.computed.gt("invites.length", 0),
          isNotCustom: s.Ember.computed.not("isCustom"),
          _tryingToViewProgression: !0,
          viewingProgression: s.Ember.computed.and(
            "_tryingToViewProgression",
            "progressionEnabled",
            "isTFT",
            "showingState.isInViewport",
          ),
          progressionEnabled: !0,
          _tryingToViewSuggested: !0,
          viewingSuggested: s.Ember.computed.and(
            "_tryingToViewSuggested",
            "suggestedEnabled",
            "isNotTFT",
          ),
          suggestedPlayers: s.Ember.computed.alias(
            "lobbiesService.currentPartySuggestedPlayers",
          ),
          panelIsCollapsed: !1,
          invites: s.Ember.computed(
            "lobbiesService.invites.[]",
            "lobbiesService.currentPartyLeader",
            function () {
              const e = this.get("lobbiesService.invites"),
                t = this.get("lobbiesService.currentPartyLeader");
              return e.filter((e) => e.toSummonerId !== t.summonerId);
            },
          ),
          suggestedInvites: s.Ember.computed(
            "suggestedPlayers.[]",
            "suggestedPlayers.@each.summonerId",
            "invitedPlayerIds.[]",
            function () {
              const e = this.get("suggestedPlayers") || [],
                t = this.get("invitedPlayerIds");
              let n = s.Ember.A(),
                i = s.Ember.A(),
                o = s.Ember.A();
              return (
                e.forEach((e) => {
                  const s = e.get("summonerId");
                  (t && t.indexOf(s) >= 0) ||
                    (e.get("reason") === a.SUGGESTED_TYPES.FRIEND
                      ? n.push(e)
                      : e.get("reason") === a.SUGGESTED_TYPES.HONORED
                        ? o.push(e)
                        : i.push(e));
                }),
                (n = n.sortBy("summonerName")),
                (i = i.sortBy("summonerName")),
                (o = o.sortBy("gameId").reverse().slice(0, 2)),
                i.forEach((e) => {
                  n.push(e);
                }),
                n.forEach((e) => {
                  o.push(e);
                }),
                this.get("isTFT") ? (n.length > 4 && (n = n.slice(0, 3)), n) : o
              );
            },
          ),
          noSuggestedInvites: s.Ember.computed.equal(
            "suggestedInvites.length",
            0,
          ),
          currentPlayerCannotInvite: s.Ember.computed.not(
            "currentPlayerCanInvite",
          ),
          suggestedDisabled: s.Ember.computed.or(
            "noSuggestedInvites",
            "currentPlayerCannotInvite",
            "isCustom",
          ),
          suggestedEnabled: s.Ember.computed.not("suggestedDisabled"),
          suggestedTooltipDescription: s.Ember.computed(
            "tra.suggested_info_tooltip_description",
            function () {
              return this.get("tra.suggested_info_tooltip_description");
            },
          ),
          suggestedTooltipRecentlyHonoredText: s.Ember.computed(
            "tra.suggested_info_tooltip_recently_honored",
            function () {
              return this.get("tra.suggested_info_tooltip_recently_honored");
            },
          ),
          suggestedTooltipRecentlyPlayedText: s.Ember.computed(
            "tra.suggested_info_tooltip_recently_played",
            function () {
              return this.get("tra.suggested_info_tooltip_recently_played");
            },
          ),
          suggestedTooltipFriendText: s.Ember.computed(
            "tra.suggested_info_tooltip_friend",
            function () {
              return this.get("tra.suggested_info_tooltip_friend");
            },
          ),
          actions: {
            viewSuggested() {
              ((!this.get("suggestedDisabled") &&
                !this.get("_tryingToViewSuggested")) ||
                this.get("viewingProgression")) &&
                (this.set("_tryingToViewSuggested", !0),
                this.set("_tryingToViewProgression", !1),
                this.playSound("/fe/lol-uikit/sfx-uikit-text-click-small.ogg"));
            },
            viewInvited() {
              (this.get("_tryingToViewSuggested") ||
                this.get("viewingProgression")) &&
                (this.set("_tryingToViewSuggested", !1),
                this.set("_tryingToViewProgression", !1),
                this.playSound("/fe/lol-uikit/sfx-uikit-text-click-small.ogg"));
            },
            viewProgression() {
              this.set("_tryingToViewSuggested", !1),
                this.set("_tryingToViewProgression", !0),
                this.playSound("/fe/lol-uikit/sfx-uikit-text-click-small.ogg");
            },
            toggleCollapsed() {
              this.toggleProperty("panelIsCollapsed"),
                this.get("element").classList.toggle("collapsed"),
                this.playSound("/fe/lol-uikit/sfx-uikit-text-click-small.ogg");
            },
          },
        });
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "awYcd7Q3",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\invite-info-panel\\\\component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\invite-info-panel\\\\component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\invite-info-panel\\\\component\\\\index.js\\" "],["text","\\n"],["block",["if"],[["get",["isTFT"]]],null,16,15],["text","\\n"],["open-element","div",[]],["dynamic-attr","class",["concat",["parties-invite-info-panel-body ",["helper",["if"],[["get",["panelIsCollapsed"]],"collapsed"],null]]]],["flush-element"],["text","\\n  "],["open-element","ul",[]],["dynamic-attr","class",["concat",["parties-invite-info-panel-list\\n  ",["helper",["if"],[["get",["viewingSuggested"]],"viewing-suggested"],null],"\\n  ",["helper",["if"],[["get",["isCustom"]],"parties-invite-info-is-custom"],null]]]],["flush-element"],["text","\\n"],["block",["if"],[["get",["viewingSuggested"]]],null,10,8],["text","  "],["close-element"],["text","\\n"],["close-element"],["text","\\n\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","        "],["open-element","li",[]],["static-attr","class","parties-invite-info-empty"],["flush-element"],["text","\\n          "],["open-element","span",[]],["static-attr","class","parties-invite-info-empty-text"],["flush-element"],["text","\\n            "],["append",["unknown",["tra","custom_game_invited_panel_no_invites"]],false],["text","\\n          "],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["append",["helper",["v2-invite-info-panel-player"],null,[["currentPlayerCanInvite","invitedPlayer","isSuggested","isTFT"],[["get",["currentPlayerCanInvite"]],["get",["invite"]],false,["get",["isTFT"]]]]],false],["text","\\n"]],"locals":["invite"]},{"statements":[["block",["each"],[["get",["invites"]]],[["key"],["toSummonerId"]],1]],"locals":[]},{"statements":[["text","            "],["append",["helper",["v2-invite-info-panel-player"],null,[["currentPlayerCanInvite","player","isSuggested","isTFT"],[["get",["currentPlayerCanInvite"]],["get",["suggestedPlayer"]],true,["get",["isTFT"]]]]],false],["text","\\n"]],"locals":["suggestedPlayer"]},{"statements":[["block",["each"],[["get",["suggestedInvites"]]],null,3]],"locals":[]},{"statements":[["block",["unless"],[["get",["suggestedDisabled"]]],null,4]],"locals":[]},{"statements":[["block",["if"],[["get",["isTFT"]]],null,5],["block",["if"],[["get",["hasInvites"]]],null,2,0],["text","    "]],"locals":[]},{"statements":[["text","      "],["append",["helper",["invite-info-panel-tft-progression"],null,[["class","activeMilestonesProgress"],["tft-progression",["get",["activeMilestonesProgress"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["viewingProgression"]]],null,7,6]],"locals":[]},{"statements":[["text","        "],["append",["helper",["v2-invite-info-panel-player"],null,[["currentPlayerCanInvite","player","isSuggested","isTFT"],[["get",["currentPlayerCanInvite"]],["get",["suggestedPlayer"]],true,["get",["isTFT"]]]]],false],["text","\\n"]],"locals":["suggestedPlayer"]},{"statements":[["block",["each"],[["get",["suggestedInvites"]]],null,9]],"locals":[]},{"statements":[["text","  "],["comment"," Do not show tabbed header with suggested if invite info only "],["text","\\n  "],["open-element","div",[]],["static-attr","class","custom-invite-header"],["flush-element"],["text","\\n    "],["open-element","span",[]],["static-attr","class","custom-invite-header-text"],["flush-element"],["text","\\n      "],["append",["unknown",["tra","custom_game_invited_panel_title"]],false],["text"," ("],["append",["unknown",["invites","length"]],false],["text",")\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","            "],["open-element","lol-uikit-content-block",[]],["static-attr","class","invite-header-suggested-tooltip-content"],["flush-element"],["text","\\n              "],["open-element","p",[]],["static-attr","class","invite-header-suggested-tooltip-content-title"],["flush-element"],["text","\\n                "],["append",["unknown",["suggestedTooltipDescription"]],false],["text","\\n              "],["close-element"],["text","\\n\\n              "],["open-element","div",[]],["static-attr","class","invite-header-suggested-tooltip-content-divider-container"],["flush-element"],["text","\\n                "],["open-element","div",[]],["static-attr","class","invite-header-suggested-tooltip-content-divider"],["flush-element"],["close-element"],["text","\\n              "],["close-element"],["text","\\n\\n              "],["open-element","ul",[]],["static-attr","class","invite-header-suggested-tooltip-content-list"],["flush-element"],["text","\\n                "],["open-element","li",[]],["static-attr","class","invite-header-suggested-tooltip-content-honors"],["flush-element"],["text","\\n                  "],["open-element","img",[]],["static-attr","src","/fe/lol-parties/recently-honored-tooltip-icon.png"],["static-attr","class","invite-header-suggested-tooltip-content-honors-icon"],["flush-element"],["close-element"],["text","\\n                  "],["open-element","div",[]],["static-attr","class","invite-header-suggested-tooltip-content-description"],["flush-element"],["text","\\n                    "],["append",["unknown",["suggestedTooltipRecentlyHonoredText"]],false],["text","\\n                  "],["close-element"],["text","\\n                "],["close-element"],["text","\\n                "],["open-element","li",[]],["static-attr","class","invite-header-suggested-tooltip-content-friends"],["flush-element"],["text","\\n                  "],["open-element","img",[]],["static-attr","src","/fe/lol-parties/friend-tooltip-icon.png"],["static-attr","class","invite-header-suggested-tooltip-content-friend-icon"],["flush-element"],["close-element"],["text","\\n                  "],["open-element","div",[]],["static-attr","class","invite-header-suggested-tooltip-content-description"],["flush-element"],["text","\\n                    "],["append",["unknown",["suggestedTooltipFriendText"]],false],["text","\\n                  "],["close-element"],["text","\\n                "],["close-element"],["text","\\n                "],["open-element","li",[]],["static-attr","class","invite-header-suggested-tooltip-content-recently-played"],["flush-element"],["text","\\n                  "],["open-element","img",[]],["static-attr","src","/fe/lol-parties/recently-played-tooltip-icon.png"],["static-attr","class","invite-header-suggested-tooltip-content-recently-played-icon"],["flush-element"],["close-element"],["text","\\n                  "],["open-element","div",[]],["static-attr","class","invite-header-suggested-tooltip-content-description"],["flush-element"],["text","\\n                    "],["append",["unknown",["suggestedTooltipRecentlyPlayedText"]],false],["text","\\n                  "],["close-element"],["text","\\n                "],["close-element"],["text","\\n              "],["close-element"],["text","\\n            "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["open-element","div",[]],["static-attr","class","invite-header-suggested-info-icon"],["flush-element"],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipPosition","padding"],["top","large"]],12],["text","          "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["dynamic-attr","class",["concat",["split-panel-header ",["helper",["if"],[["get",["viewingSuggested"]],"left-tab-active","right-tab-active"],null]]]],["flush-element"],["text","\\n    "],["open-element","a",[]],["static-attr","id","invite-header-suggested"],["dynamic-attr","class",["concat",["split-panel-header-title\\n        ",["helper",["if"],[["get",["viewingSuggested"]],"active"],null],"\\n        ",["helper",["if"],[["get",["suggestedDisabled"]],"disabled"],null]]]],["modifier",["action"],[["get",[null]],"viewSuggested"]],["flush-element"],["text","\\n        "],["append",["unknown",["tra","suggested_panel_lobby_title"]],false],["text","\\n\\n"],["block",["if"],[["get",["honorSuggestionsEnabled"]]],null,13],["text","    "],["close-element"],["text","\\n    "],["open-element","a",[]],["static-attr","id","invite-header-invited"],["dynamic-attr","class",["concat",["split-panel-header-title ",["helper",["if"],[["get",["viewingSuggested"]],"","active"],null]]]],["modifier",["action"],[["get",[null]],"viewInvited"]],["flush-element"],["text","\\n          "],["append",["unknown",["tra","invited_panel_title"]],false],["text"," ("],["append",["unknown",["invites","length"]],false],["text",")\\n    "],["close-element"],["text","\\n    "],["open-element","div",[]],["dynamic-attr","class",["concat",["split-panel-arrow ",["helper",["if"],[["get",["panelIsCollapsed"]],"collapsed"],null]]]],["modifier",["action"],[["get",[null]],"toggleCollapsed"]],["flush-element"],["close-element"],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["isNotCustom"]]],null,14,11]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["dynamic-attr","class",["concat",["split-panel-header ",["helper",["if"],[["get",["viewingProgression"]],"left-tab-active","right-tab-active"],null]]]],["flush-element"],["text","\\n    "],["open-element","a",[]],["static-attr","id","invite-header-progression"],["dynamic-attr","class",["concat",["split-panel-header-title\\n        ",["helper",["if"],[["get",["viewingProgression"]],"active"],null],"\\n        ",["helper",["unless"],[["get",["progressionEnabled"]],"disabled"],null]]]],["modifier",["action"],[["get",[null]],"viewProgression"]],["flush-element"],["text","\\n        "],["append",["unknown",["tra","tft_progression_panel_title"]],false],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","a",[]],["static-attr","id","invite-header-invited"],["dynamic-attr","class",["concat",["split-panel-header-title ",["helper",["if"],[["get",["viewingProgression"]],"","active"],null]]]],["modifier",["action"],[["get",[null]],"viewInvited"]],["flush-element"],["text","\\n          "],["append",["unknown",["tra","invited_panel_title"]],false],["text"," ("],["append",["unknown",["invites","length"]],false],["text",")\\n    "],["close-element"],["text","\\n    "],["open-element","div",[]],["dynamic-attr","class",["concat",["split-panel-arrow ",["helper",["if"],[["get",["panelIsCollapsed"]],"collapsed"],null]]]],["modifier",["action"],[["get",[null]],"toggleCollapsed"]],["flush-element"],["close-element"],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1),
          s = r(n(19)),
          o = r(n(72)),
          a = n(12);
        function r(e) {
          return e && e.__esModule ? e : { default: e };
        }
        n(305);
        const l = (0, i.emberDataBinding)({
          Ember: i.Ember,
          websocket: (0, i.getProvider)().getSocket(),
          logPrefix: "parties:invite-info-panel-player:component",
          basePaths: { lobby: "/lol-lobby" },
        });
        e.exports = i.Ember.Component.extend(l, s.default, o.default, {
          tagName: "li",
          classNames: "v2-parties-invite-info-panel-player",
          classNameBindings: [
            "isSuggested:parties-suggested-player",
            "showPendingIndicator:parties-pending-invite",
            "isKicked:parties-kicked-invite",
            "isDeclined:parties-declined-invite",
            "isAccepted:parties-accepted-invite",
            "isError:parties-error-invite",
            "currentPlayerCanInvite:enabled:disabled",
          ],
          attributeBindings: ["summonerId"],
          customGamesService: i.Ember.inject.service("custom-games"),
          lobbiesService: i.Ember.inject.service("lobbies"),
          invitesService: i.Ember.inject.service("invites"),
          disabled: !1,
          _invitedFromSuggested: !1,
          _previousSummonerId: null,
          isSuggested: null,
          player: null,
          invitedPlayer: null,
          isTFT: null,
          summonerId: i.Ember.computed(
            "player.summonerId",
            "invitedPlayer.toSummonerId",
            function () {
              return (
                this.get("invitedPlayer.toSummonerId") ||
                this.get("player.summonerId")
              );
            },
          ),
          isNotTFT: i.Ember.computed.not("isTFT"),
          recycle: i.Ember.computed("summonerId", function () {
            const e = this.get("summonerId");
            e &&
              e !== this.get("_previousSummonerId") &&
              (this.set("_invitedFromSuggested", !1),
              this.set("_previousSummonerId", e));
          }),
          layout: n(306),
          name: i.Ember.computed(
            "player.summonerName",
            "invitedPlayer.toSummonerName",
            function () {
              return (
                this.get("player.summonerName") ||
                this.get("invitedPlayer.toSummonerName") ||
                ""
              );
            },
          ),
          isRecentlyHonored: i.Ember.computed.equal(
            "player.reason",
            a.SUGGESTED_TYPES.HONORED,
          ),
          isFriend: i.Ember.computed.equal(
            "player.reason",
            a.SUGGESTED_TYPES.FRIEND,
          ),
          isVictorious: i.Ember.computed.equal(
            "player.reason",
            a.SUGGESTED_TYPES.VICTORIOUS,
          ),
          isPremade: i.Ember.computed.equal(
            "player.reason",
            a.SUGGESTED_TYPES.PREMADE,
          ),
          isRecentlyPlayed: i.Ember.computed.or("isVictorious", "isPremade"),
          isPending: i.Ember.computed.equal("invitedPlayer.state", "Pending"),
          isAccepted: i.Ember.computed.equal("invitedPlayer.state", "Accepted"),
          isDeclined: i.Ember.computed.equal("invitedPlayer.state", "Declined"),
          isKicked: i.Ember.computed.equal("invitedPlayer.state", "Kicked"),
          isError: i.Ember.computed.equal("invitedPlayer.state", "Error"),
          showPendingIndicator: i.Ember.computed.or("isPending", "isRequested"),
          errorObserver: i.Ember.computed("isError", "name", function () {
            this.get("isError") &&
              this.get("customGamesService.isCustomUI") &&
              this.get("name") &&
              this._showCustomBannedToast();
          }),
          _showCustomBannedToast: async function () {
            const e = this.get("lobbiesService.invitations") || [],
              t = this.get("summonerId");
            if (
              e.find(
                (e) =>
                  e.get("toSummonerId").toString() === t.toString() &&
                  e.get("errorType").match(/NotInvitableException/),
              )
            ) {
              const { playerNameFull: e } =
                  await this._playerNames.getDisplayNameBySummonerId(t),
                n = this.get("tra.formatString")(
                  "custom_game_invite_banned_error",
                  { summonerName: e },
                );
              this.showToast(n);
            }
          },
          init(...e) {
            this._super(...e), (this._playerNames = i.playerNames);
          },
          actions: {
            remove: function () {
              this.get("lobbiesService").removeSuggestedPlayer(
                this.get("player.summonerId"),
              );
            },
          },
          click: function () {
            if (
              this.get("isSuggested") &&
              this.get("currentPlayerCanInvite") &&
              !this.get("disabled") &&
              !this.get("_invitedFromSuggested")
            ) {
              this.set("_invitedFromSuggested", !0),
                this.playSound(
                  "/fe/lol-uikit/sfx-uikit-generic-click-small.ogg",
                );
              const e = this.get("summonerId");
              this.get("lobbiesService").removeSuggestedPlayer(e);
              const t = this.get("name");
              this.get("invitesService").invitePlayer(e, t);
            }
          },
        });
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "GCq4Wg/h",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\invite-info-panel\\\\player-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\invite-info-panel\\\\player-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\invite-info-panel\\\\player-component\\\\index.js\\" "],["text","\\n"],["block",["if"],[["get",["showPendingIndicator"]]],null,7],["open-element","span",[]],["static-attr","class","invite-info-name"],["flush-element"],["text","\\n"],["block",["if"],[["get",["isNotTFT"]]],null,6],["text","  "],["append",["helper",["player-name"],null,[["format","summonerId"],["tooltip",["get",["summonerId"]]]]],false],["text","\\n"],["close-element"],["text","\\n"],["block",["if"],[["get",["isSuggested"]]],null,0],["comment"," Work around for Ember.computed to act like an observer. "],["text","\\n"],["open-element","div",[]],["static-attr","style","display: none;"],["flush-element"],["text","\\n  "],["append",["unknown",["recycle"]],false],["text"," "],["append",["unknown",["errorObserver"]],false],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["open-element","button",[]],["static-attr","class","parties-remove-suggested-player"],["modifier",["action"],[["get",[null]],"remove"],[["bubbles"],[false]]],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","img",[]],["static-attr","src","/fe/lol-parties/recently-played-default-icon.png"],["static-attr","class","invite-info-recently-played-icon"],["flush-element"],["close-element"],["text","\\n      "],["open-element","img",[]],["static-attr","src","/fe/lol-parties/recently-played-hover-icon.png"],["static-attr","class","invite-info-recently-played-hover-icon"],["flush-element"],["close-element"],["text","\\n    "]],"locals":[]},{"statements":[["block",["if"],[["get",["isRecentlyPlayed"]]],null,1]],"locals":[]},{"statements":[["text","      "],["open-element","img",[]],["static-attr","src","/fe/lol-parties/friend-default-icon.png"],["static-attr","class","invite-info-friend-icon"],["flush-element"],["close-element"],["text","\\n      "],["open-element","img",[]],["static-attr","src","/fe/lol-parties/friend-hover-icon.png"],["static-attr","class","invite-info-friend-hover-icon"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["isFriend"]]],null,3,2]],"locals":[]},{"statements":[["text","      "],["open-element","img",[]],["static-attr","src","/fe/lol-parties/recently-honored-default-icon.png"],["static-attr","class","invite-info-recently-honored-icon"],["flush-element"],["close-element"],["text","\\n      "],["open-element","img",[]],["static-attr","src","/fe/lol-parties/recently-honored-hover-icon.png"],["static-attr","class","invite-info-recently-honored-hover-icon"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["isRecentlyHonored"]]],null,5,4]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","lol-pending-loader"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","lol-pending-loader-segment"],["flush-element"],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","lol-pending-loader-segment"],["flush-element"],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","lol-pending-loader-segment"],["flush-element"],["close-element"],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        n(308);
        const { RunMixin: s } = i.EmberAddons.EmberLifeline;
        e.exports = i.Ember.Component.extend(s, {
          layout: n(309),
          classNames: ["v2-parties-invite-panel-tft-progression"],
          tftService: i.Ember.inject.service("tft"),
          media: i.Ember.computed.alias("tftService.media"),
          previousMilestone: i.Ember.computed(
            "activeMilestonesProgress.0.{isPaid,isLocked,pointsEarnedForMilestone,milestoneId,status}",
            function () {
              return i.Ember.copy(this.get("activeMilestonesProgress.0"));
            },
          ),
          nextMilestone: i.Ember.computed(
            "activeMilestonesProgress.1.{isPaid,isLocked,pointsEarnedForMilestone,milestoneId,status}",
            function () {
              return i.Ember.copy(this.get("activeMilestonesProgress.1"));
            },
          ),
          actions: {
            navigateToTft() {
              i.Router.navigateTo("rcp-fe-lol-tft", { page: "battle-pass" });
            },
            claim(e) {
              if (this.get("loadingTimeoutId")) return;
              if ("CLAIMABLE" !== e.status)
                return void this.send("navigateToTft");
              const t = this.runTask(() => {
                this.set("loadingTimeoutId", null);
              }, 5e3);
              this.set("loadingTimeoutId", t);
              const n = this.get("tftService");
              i.Telemetry.sendEvent(
                "tft-claim-reward-button-clicked",
                e.milestoneId,
              ),
                n.claimRewards(e);
            },
          },
        });
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "w6g3W2I2",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\invite-info-panel\\\\tft-progression-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\invite-info-panel\\\\tft-progression-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\invite-info-panel\\\\tft-progression-component\\\\index.js\\" "],["text","\\n"],["block",["if"],[["get",["nextMilestone"]]],null,2,0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","progression-complete"],["modifier",["action"],[["get",[null]],"navigateToTft"]],["flush-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","progression-complete-title"],["flush-element"],["append",["unknown",["tra","tft_progression_complete_title"]],false],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","progression-complete-body"],["flush-element"],["append",["unknown",["tra","tft_progression_complete_body"]],false],["close-element"],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","              "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-small"],["flush-element"],["text","\\n                "],["open-element","p",[]],["flush-element"],["text","\\n                  "],["append",["unknown",["tra","tft_progression_description"]],false],["text","\\n                "],["close-element"],["text","\\n              "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","progression-milestone-container"],["flush-element"],["text","\\n        "],["open-element","lol-tft-battlepass-milestone",[]],["static-attr","size","small"],["static-attr","class","progression-milestone"],["dynamic-attr","milestone",["unknown",["previousMilestone"]],null],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"claim",["get",["previousMilestone"]]],null],null],["static-attr","is-smooth-progress","true"],["dynamic-attr","media",["unknown",["media"]],null],["flush-element"],["close-element"],["text","\\n        "],["open-element","lol-tft-battlepass-milestone",[]],["static-attr","size","small"],["static-attr","isSelected","false"],["static-attr","class","progression-milestone"],["dynamic-attr","milestone",["unknown",["nextMilestone"]],null],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"navigateToTft"],null],null],["static-attr","is-smooth-progress","true"],["dynamic-attr","media",["unknown",["media"]],null],["flush-element"],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","reward-container"],["modifier",["action"],[["get",[null]],"navigateToTft"]],["flush-element"],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipPosition","type"],["top","small"]],1],["text","            "],["open-element","div",[]],["static-attr","class","reward-label"],["flush-element"],["append",["unknown",["tra","tft_progression_next"]],false],["close-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","reward-title"],["flush-element"],["append",["unknown",["nextMilestone","title"]],false],["close-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","progress-container"],["flush-element"],["text","\\n                "],["open-element","div",[]],["static-attr","class","progress-current"],["flush-element"],["append",["unknown",["nextMilestone","pointsEarnedForMilestone"]],false],["close-element"],["text","\\n                "],["open-element","div",[]],["static-attr","class","progress-divider"],["flush-element"],["text","/"],["close-element"],["text","\\n                "],["open-element","div",[]],["static-attr","class","progress-total"],["flush-element"],["append",["unknown",["nextMilestone","pointsNeededForMilestone"]],false],["close-element"],["text","\\n            "],["close-element"],["text","\\n        "],["close-element"],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        n(311);
        const s = "NONE";
        e.exports = i.Ember.Component.extend({
          layout: n(312),
          classNames: ["banner-crystal-tooltip-component"],
          challengesSummary: null,
          crystalImagePath: "",
          categoryProgress: i.Ember.computed.alias(
            "challengesSummary.categoryProgress",
          ),
          positionPercentile: i.Ember.computed.alias(
            "challengesSummary.positionPercentile",
          ),
          overallChallengeLevel: i.Ember.computed.alias(
            "challengesSummary.overallChallengeLevel",
          ),
          totalChallengeScore: i.Ember.computed.alias(
            "challengesSummary.totalChallengeScore",
          ),
          pointsUntilNextRank: i.Ember.computed.alias(
            "challengesSummary.pointsUntilNextRank",
          ),
          isApex: i.Ember.computed.alias("challengesSummary.isApex"),
          apexLeaderboardPosition: i.Ember.computed.alias(
            "challengesSummary.apexLeaderboardPosition",
          ),
          progressTowardsNextChallengeLevel: i.Ember.computed(
            "totalChallengeScore",
            "pointsUntilNextRank",
            function () {
              return (
                this.get("totalChallengeScore") /
                this.get("pointsUntilNextRank")
              );
            },
          ),
          localizedChallengeLevel: i.Ember.computed(
            "tra",
            "overallChallengeLevel",
            function () {
              const e = this.get("overallChallengeLevel") || s;
              return this.get(`tra.challenge_level_${e.toLowerCase()}`);
            },
          ),
          topPercentileText: i.Ember.computed(
            "tra.challenge_percentile_players",
            "positionPercentile",
            function () {
              const e = this.get("positionPercentile");
              return e ? e.toFixed(2) : "";
            },
          ),
          toolTipPositionText: i.Ember.computed(
            "isApex",
            "topPercentileText",
            "apexLeaderboardPosition",
            function () {
              if (this.get("isApex") || !1) {
                return `#${this.get("apexLeaderboardPosition")}`;
              }
              return `${this.get("topPercentileText")}%`;
            },
          ),
          categories: i.Ember.computed("categoryProgress", function () {
            return (this.get("categoryProgress") || [])
              .filter((e) => "LEGACY" !== e.category)
              .map((e) => {
                const t = e.level || s;
                return {
                  category: e.category,
                  level: t,
                  percentage: e.percentage,
                  localizedCategory: this.get(
                    `tra.challenge_category_${e.category}`,
                  ),
                  localizedLevel: this.get(`tra.challenge_level_${t}`),
                };
              });
          }),
        });
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "cWsX2Dvw",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\banner-crystal-tooltip-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\banner-crystal-tooltip-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\banner-crystal-tooltip-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","overall-progress-container"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","overall-challenge-level-image-container"],["flush-element"],["text","\\n    "],["open-element","img",[]],["static-attr","class","overall-challenge-level-image"],["dynamic-attr","src",["concat",[["unknown",["crystalImagePath"]]]]],["flush-element"],["close-element"],["text","\\n  "],["close-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","overall-challenge-details-container"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","overall-header-container"],["flush-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","overall-title"],["flush-element"],["append",["unknown",["localizedChallengeLevel"]],false],["close-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","overall-header-separator"],["flush-element"],["close-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","overall-percentile"],["flush-element"],["append",["unknown",["toolTipPositionText"]],false],["close-element"],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","per-category-progress-container"],["flush-element"],["text","\\n"],["block",["each"],[["get",["categories"]]],null,0],["text","    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","        "],["open-element","div",[]],["static-attr","class","category-progress-radial-container"],["flush-element"],["text","\\n          "],["open-element","div",[]],["static-attr","class","category-progress-border"],["flush-element"],["close-element"],["text","\\n          "],["open-element","div",[]],["dynamic-attr","class",["concat",["category-icon ",["unknown",["categoryProgress","category"]]," color-",["unknown",["categoryProgress","level"]]]]],["flush-element"],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":["categoryProgress"]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i,
          s = n(1),
          o = (i = n(22)) && i.__esModule ? i : { default: i };
        n(314),
          (e.exports = s.Ember.Component.extend({
            layout: n(315),
            classNames: ["v2-banner-placeholder"],
            lobbiesService: s.Ember.inject.service("lobbies"),
            partySettingsService: s.Ember.inject.service("party-settings"),
            animationsEnabled: s.Ember.computed.alias(
              "partySettingsService.bannerAnimationsEnabled",
            ),
            pendingInvites: s.Ember.computed.alias(
              "lobbiesService.pendingInvites",
            ),
            partiesViewport: o.default,
            partiesViewportIsShowing: s.Ember.computed.alias(
              "partiesViewport.isShowing",
            ),
            placeholder: null,
            isInQueue: !1,
            partyInvitesAllowed: !1,
            invitedVideoSrc: "/fe/lol-parties/parties-v2/invited-banner.webm",
            videoPausedObserver: s.Ember.on(
              "init",
              s.Ember.observer("partiesViewportIsShowing", function () {
                if (
                  this.element &&
                  this.get("isInvitedBanner") &&
                  this.get("animationsEnabled")
                ) {
                  const e = this.element.querySelector(
                    ".placeholder-invited-video",
                  );
                  if (e) {
                    const t = this.get("partiesViewportIsShowing");
                    e.paused && t && e.play();
                  }
                }
              }),
            ),
            isInvitedBanner: s.Ember.computed(
              "isInQueue",
              "placeholder",
              "pendingInvites.[]",
              function () {
                if (this.get("isInQueue")) return !0;
                const e = this.get("placeholder") || 0;
                return this.get("pendingInvites").length > e;
              },
            ),
            actions: {
              showInviteModal: function () {
                this.get("partyInvitesAllowed") &&
                  this.sendAction("showInviteModal");
              },
            },
          }));
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "VmLFf2YN",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\banner-placeholder-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\banner-placeholder-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\banner-placeholder-component\\\\index.js\\" "],["text","\\n"],["block",["if"],[["get",["isInvitedBanner"]]],null,3],["text","\\n"],["block",["if"],[["get",["partyInvitesAllowed"]]],null,0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","invite-button-container"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","invite-button"],["flush-element"],["text","\\n      "],["append",["helper",["generic-button"],null,[["baseImgPath","overImgPath","downImgPath","onClick"],["/fe/lol-parties/banner-invite.png","/fe/lol-parties/banner-invite-hover.png","/fe/lol-parties/banner-invite-click.png",["helper",["action"],[["get",[null]],"showInviteModal"],null]]]],false],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","placeholder-invited-image"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","video",[]],["static-attr","class","placeholder-invited-video"],["static-attr","autoplay","true"],["static-attr","preload","auto"],["static-attr","loop","true"],["dynamic-attr","src",["unknown",["invitedVideoSrc"]],null],["flush-element"],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","placeholder-invited-container"],["flush-element"],["text","\\n"],["block",["if"],[["get",["animationsEnabled"]]],null,2,1],["text","  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        n(317),
          (e.exports = i.Ember.Component.extend({
            layout: n(318),
            classNames: ["identity-tooltip-component"],
            challengesSummary: null,
            lobbyChallengesEnabled: !0,
            rankedData: null,
            selectedQueue: null,
            player: null,
            showRank: !1,
            crystalImagePath: "",
            summonerRegalia: null,
            summonerIconId: i.Ember.computed.alias("player.summonerIconId"),
          }));
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "4ycMdl0M",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\identity-tooltip-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\identity-tooltip-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\identity-tooltip-component\\\\index.js\\" "],["text","\\n"],["block",["if"],[["get",["showRank"]]],null,3,2],["text","\\n"],["append",["helper",["summoner-icon-identity-tooltip"],null,[["player"],[["get",["player"]]]]],false],["text","\\n\\n"],["block",["if"],[["get",["lobbyChallengesEnabled"]]],null,0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","identity-tooltip-divider"],["flush-element"],["close-element"],["text","\\n\\n  "],["append",["helper",["v2-banner-crystal-tooltip"],null,[["challengesSummary","crystalImagePath"],[["get",["challengesSummary"]],["get",["crystalImagePath"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["append",["helper",["prestige-identity-tooltip"],null,[["player","summonerRegalia"],[["get",["player"]],["get",["summonerRegalia"]]]]],false],["text","\\n    "],["open-element","div",[]],["static-attr","class","identity-tooltip-divider"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["lobbyChallengesEnabled"]]],null,1]],"locals":[]},{"statements":[["text","  "],["append",["helper",["rank-identity-tooltip"],null,[["rankedData","selectedQueue","player"],[["get",["rankedData"]],["get",["selectedQueue"]],["get",["player"]]]]],false],["text","\\n  "],["open-element","div",[]],["static-attr","class","identity-tooltip-divider"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        n(320),
          (e.exports = i.Ember.Component.extend({
            layout: n(321),
            classNames: ["rank-identity-tooltip-component"],
            rankedData: null,
            selectedQueue: null,
            player: null,
            useRankFromQueue: i.Ember.computed.alias("selectedQueue.isRanked"),
            highestRankTier: i.Ember.computed.alias(
              "rankedData.highestRankedEntry.tier",
            ),
            highestRankDivision: i.Ember.computed.alias(
              "rankedData.highestRankedEntry.division",
            ),
            highestRankLeaguePoints: i.Ember.computed.alias(
              "rankedData.highestRankedEntry.leaguePoints",
            ),
            highestRankTierUnranked: i.Ember.computed.equal(
              "highestRankTier",
              "NONE",
            ),
            highestRankTierDivisionText: i.Ember.computed(
              "highestRankTier",
              "highestRankDivision",
              "selectedQueue",
              "tra.ready",
              function () {
                const e = this.get("highestRankTier"),
                  t = this.get("highestRankDivision"),
                  n = this.get("selectedQueue"),
                  s =
                    (i.LeagueTierNames.getFullTierDivisionName(e, t),
                    n && n.isProvisional);
                return this.formatDivisionText(e, t, s);
              },
            ),
            highestRankLeaguePointsText: i.Ember.computed(
              "highestRankLeaguePoints",
              "tra.ready",
              function () {
                return this.formatLeaguePointsText(
                  this.get("highestRankLeaguePoints"),
                );
              },
            ),
            rankedQueue: i.Ember.computed(
              "rankedData.queueMap",
              "selectedQueue.type",
              function () {
                const e = this.get("rankedData.queueMap"),
                  t = this.get("selectedQueue");
                if (!t || !e) return null;
                return e[t.type] || null;
              },
            ),
            rankedQueueTierDivisionText: i.Ember.computed(
              "rankedQueue.tier",
              "rankedQueue.division",
              "rankedQueue.isProvisional",
              function () {
                const e = this.get("rankedQueue.tier"),
                  t = this.get("rankedQueue.division"),
                  n = this.get("rankedQueue.isProvisional");
                return this.formatDivisionText(e, t, n);
              },
            ),
            rankedQueueDivision: i.Ember.computed.alias("rankedQueue.division"),
            rankedQueueLeaguePointsText: i.Ember.computed(
              "rankedQueue.leaguePoints",
              "tra.ready",
              function () {
                return this.formatLeaguePointsText(
                  this.get("rankedQueue.leaguePoints"),
                );
              },
            ),
            pastRankTierUnranked: i.Ember.computed.equal(
              "rankedData.highestPreviousSeasonEndTier",
              "NONE",
            ),
            hasPastRank: i.Ember.computed.not("pastRankTierUnranked"),
            pastMiniRegaliaIconPath: i.Ember.computed(
              "rankedData.highestPreviousSeasonEndTier",
              function () {
                const e = this.get("rankedData.highestPreviousSeasonEndTier");
                return i.LeagueTierNames.getRankedMiniRegaliaSvg(e);
              },
            ),
            pastRankedTierText: i.Ember.computed(
              "rankedData.highestPreviousSeasonEndTier",
              "tra.ready",
              function () {
                const e = this.get("rankedData.highestPreviousSeasonEndTier");
                return this.get("tra.formatString")("parties_past_rank", {
                  rankedTier: i.LeagueTierNames.getTierName(e),
                });
              },
            ),
            formatLeaguePointsText: function (e) {
              return this.get("tra.formatString")("ranked_lp", {
                num_points: e,
              });
            },
            formatDivisionText: function (e, t, n) {
              const s = i.LeagueTierNames.getFullTierDivisionName(e, t);
              if (n) {
                return this.get("tra.formatString")(
                  "parties_provisional_rank",
                  { tierDivisionLoc: s },
                );
              }
              return s;
            },
          }));
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "aBD9Nr4L",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\identity-tooltip-component\\\\rank\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\identity-tooltip-component\\\\rank\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\identity-tooltip-component\\\\rank\\\\index.js\\" "],["text","\\n"],["block",["if"],[["get",["rankedData"]]],null,3]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","rank-identity-tooltip-past-rank"],["flush-element"],["text","\\n        "],["open-element","img",[]],["static-attr","class","rank-identity-tooltip-past-rank-icon"],["dynamic-attr","src",["concat",[["unknown",["pastMiniRegaliaIconPath"]]]]],["flush-element"],["close-element"],["text","\\n        "],["append",["unknown",["pastRankedTierText"]],false],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","rank-identity-tooltip-rank"],["flush-element"],["append",["unknown",["highestRankTierDivisionText"]],false],["open-element","span",[]],["flush-element"],["text"," - "],["append",["unknown",["highestRankLeaguePointsText"]],false],["close-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","rank-identity-tooltip-rank"],["flush-element"],["append",["unknown",["rankedQueueTierDivisionText"]],false],["open-element","span",[]],["flush-element"],["text"," - "],["append",["unknown",["rankedQueueLeaguePointsText"]],false],["close-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","lol-regalia-emblem-element",[]],["static-attr","class","rank-identity-tooltip-rank-icon"],["dynamic-attr","ranked-tier",["concat",[["helper",["if"],[["get",["useRankFromQueue"]],["get",["rankedQueue","tier"]],["get",["highestRankTier"]]],null]]]],["flush-element"],["text","\\n  "],["close-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","rank-identity-tooltip-details"],["flush-element"],["text","\\n"],["block",["if"],[["get",["useRankFromQueue"]]],null,2,1],["block",["if"],[["get",["hasPastRank"]]],null,0],["text","  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        n(323);
        const s = {
          1: {
            traKey: "tra.parties_tooltip_icon_rare",
            gemIcon:
              "/fe/lol-static-assets/images/summoner-icon/summoner-icon-rare.png",
          },
          2: {
            traKey: "tra.parties_tooltip_icon_epic",
            gemIcon: "/lol-game-data/assets/v1/rarity-gem-icons/epic.png",
          },
          3: {
            traKey: "tra.parties_tooltip_icon_legendary",
            gemIcon: "/lol-game-data/assets/v1/rarity-gem-icons/legendary.png",
          },
          4: {
            traKey: "tra.parties_tooltip_icon_mythic",
            gemIcon: "/lol-game-data/assets/v1/rarity-gem-icons/mythic.png",
          },
          5: {
            traKey: "tra.parties_tooltip_icon_ultimate",
            gemIcon: "/lol-game-data/assets/v1/rarity-gem-icons/ultimate.png",
          },
        };
        e.exports = i.Ember.Component.extend({
          layout: n(324),
          classNames: ["icon-identity-tooltip-component"],
          assets: i.Ember.inject.service(),
          player: null,
          regionLocale: i.Ember.computed.alias("assets.regionLocale"),
          summonerIcons: i.Ember.computed.alias("assets.summonerIcons"),
          summonerIconId: i.Ember.computed.alias("player.summonerIconId"),
          summonerIcon: i.Ember.computed(
            "summonerIcons",
            "summonerIconId",
            function () {
              const e = this.get("summonerIcons"),
                t = this.get("summonerIconId");
              return e && e.length > 0 && (t || 0 === t)
                ? e.findBy("id", t)
                : {};
            },
          ),
          iconRarity: i.Ember.computed(
            "regionLocale",
            "summonerIcon.rarities.[]",
            function () {
              const e = this.get("regionLocale.region"),
                t = this.get("summonerIcon.rarities") || [];
              let n = 0;
              if (Array.isArray(t)) {
                let i = t.find((t) => t.region === e);
                i
                  ? (n = i.rarity)
                  : ((i = t.find((e) => "riot" === e.region)),
                    (n = i ? i.rarity : 0));
              }
              return s[n];
            },
          ),
          iconRarityText: i.Ember.computed(
            "tra.ready",
            "iconRarity",
            function () {
              const e = this.get("iconRarity");
              return e ? this.get(e.traKey) : "";
            },
          ),
        });
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "gMbYjra2",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\identity-tooltip-component\\\\summoner-icon\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\identity-tooltip-component\\\\summoner-icon\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\identity-tooltip-component\\\\summoner-icon\\\\index.js\\" "],["text","\\n"],["block",["if"],[["get",["summonerIcon"]]],null,1]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","        "],["open-element","div",[]],["static-attr","class","icon-identity-tooltip-desc"],["flush-element"],["text","\\n          "],["open-element","img",[]],["static-attr","class","icon-identity-tooltip-rarity-icon"],["dynamic-attr","src",["concat",[["unknown",["iconRarity","gemIcon"]]]]],["flush-element"],["close-element"],["text","\\n          "],["open-element","div",[]],["static-attr","class","icon-identity-tooltip-rarity-desc"],["flush-element"],["append",["unknown",["iconRarityText"]],false],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","lol-social-avatar-icon",[]],["static-attr","class","icon-identity-tooltip-icon"],["dynamic-attr","icon-id",["unknown",["summonerIcon","id"]],null],["static-attr","availability","online"],["flush-element"],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","icon-identity-tooltip-details"],["flush-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","icon-identity-tooltip-name"],["flush-element"],["append",["unknown",["summonerIcon","title"]],false],["close-element"],["text","\\n"],["block",["if"],[["get",["iconRarity"]]],null,0],["text","    "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        n(326),
          (e.exports = i.Ember.Component.extend({
            layout: n(327),
            classNames: ["prestige-identity-tooltip-component"],
            player: null,
            summonerRegalia: null,
            showPrestige: !1,
            playerLevel: i.Ember.computed.alias("player.summonerLevel"),
            selectedPrestigeBorder: i.Ember.computed.alias(
              "summonerRegalia.selectedPrestigeCrest",
            ),
            playerLevelText: i.Ember.computed(
              "playerLevel",
              "tra.ready",
              function () {
                return this.get("tra.formatString")(
                  "parties_tooltip_prestige_level",
                  { level: this.get("playerLevel") },
                );
              },
            ),
            prestigeEarnedAtLevel: i.Ember.computed(
              "selectedPrestigeBorder",
              "tra.ready",
              function () {
                const e = this.get("selectedPrestigeBorder"),
                  t = this.calcPrestigeEarnedAtLevel(e);
                return this.get(`tra.parties_tooltip_prestige_${t}`);
              },
            ),
            calcPrestigeEarnedAtLevel: function (e) {
              return e ? i.SharedChallengesConstants.PRESTIGE_LEVELS[e - 1] : 1;
            },
          }));
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "awPmSnmk",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\identity-tooltip-component\\\\prestige\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\identity-tooltip-component\\\\prestige\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\identity-tooltip-component\\\\prestige\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","level-ring-wrapper"],["flush-element"],["text","\\n  "],["open-element","lol-uikit-themed-level-ring-v2",[]],["dynamic-attr","prestige-crest-id",["concat",[["unknown",["selectedPrestigeBorder"]]]]],["static-attr","size","fill"],["static-attr","class","prestige-identity-tooltip-icon"],["flush-element"],["text","\\n  "],["close-element"],["text","\\n"],["close-element"],["text","\\n\\n"],["open-element","div",[]],["static-attr","class","prestige-identity-tooltip-details"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","prestige-identity-tooltip-level"],["flush-element"],["append",["unknown",["playerLevelText"]],false],["close-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","prestige-identity-tooltip-desc"],["flush-element"],["append",["unknown",["prestigeEarnedAtLevel"]],false],["close-element"],["text","\\n"],["close-element"],["text","\\n\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1),
          s = n(329);
        n(330);
        const o = "sfx-ui",
          a = i.Ember.Component.extend({
            classNames: ["generic-button"],
            classNameBindings: [
              "matchHeight:match-h",
              "matchWidth:match-w",
              "isImgFlippedX:flip-x",
              "isImgFlippedY:flip-y",
            ],
            layout: n(331),
            canBeSelected: !1,
            triggerSelected: !1,
            selectionGroup: null,
            isEnabled: !0,
            text: null,
            baseBgPath: null,
            upBgPath: null,
            overBgPath: null,
            downBgPath: null,
            disabledBgPath: null,
            baseImgPath: null,
            upImgPath: null,
            overImgPath: null,
            downImgPath: null,
            disabledImgPath: null,
            noDisabledBg: !1,
            isImgFlippedX: !1,
            isImgFlippedY: !1,
            useCustomContent: !1,
            iconSizeModifier: 1,
            matchHeight: !0,
            matchWidth: !0,
            tooltipText: null,
            tooltipPosition: "bottom",
            tooltipType: "system",
            disabledTooltipText: null,
            disabledTooltipPosition: "bottom",
            disabledTooltipType: "system",
            onHoverSound: null,
            onClickSound: null,
            onClickReleaseSound: null,
            currentState: null,
            isClickTarget: !1,
            isSelected: !1,
            onInit: i.Ember.on("init", function () {
              this._changeState(s.ButtonState.UP);
            }),
            upBgPathInternal: i.Ember.computed.or("upBgPath", "baseBgPath"),
            overBgPathInternal: i.Ember.computed.or("overBgPath", "baseBgPath"),
            downBgPathInternal: i.Ember.computed.or("downBgPath", "baseBgPath"),
            disabledBgPathInternal: i.Ember.computed(
              "disabledBgPath",
              "baseBgPath",
              "noDisabledBg",
              function () {
                return this.get("noDisabledBg")
                  ? ""
                  : this.get("disabledBgPath") || this.get("baseBgPath");
              },
            ),
            upImgPathInternal: i.Ember.computed.or("upImgPath", "baseImgPath"),
            overImgPathInternal: i.Ember.computed.or(
              "overImgPath",
              "baseImgPath",
            ),
            downImgPathInternal: i.Ember.computed.or(
              "downImgPath",
              "baseImgPath",
            ),
            disabledImgPathInternal: i.Ember.computed.or(
              "disabledImgPath",
              "baseImgPath",
            ),
            customContentUp: { isUp: !0, isAny: !0 },
            customContentOver: { isOver: !0, isAny: !0 },
            customContentDown: { isDown: !0, isAny: !0 },
            customContentDisabled: { isDisabled: !0, isAny: !0 },
            iconSizeModifierStyle: i.Ember.computed(
              "iconSizeModifier",
              function () {
                const e = this.get("iconSizeModifier");
                if (1 === e) return null;
                const t = 100 * Math.max(e, 0),
                  n = this.get("matchHeight");
                let i = "";
                return (
                  this.get("matchWidth") && (i += `width: ${t}%;`),
                  n && (i += `height: ${t}%`),
                  i
                );
              },
            ),
            triggerSelectedObserver: i.Ember.computed(
              "triggerSelected",
              function () {
                this.get("triggerSelected") &&
                  (this._setSelected(!0),
                  i.Ember.run.next(() => {
                    this.set("triggerSelected", !1);
                  }));
              },
            ),
            isEnabledObserver: i.Ember.computed("isEnabled", function () {
              const e = this.get("currentState") !== s.ButtonState.DISABLED,
                t = this.get("isEnabled");
              e && !t
                ? this._changeState(s.ButtonState.DISABLED)
                : !e && t && this._changeState(s.ButtonState.UP);
            }),
            _changeState(e) {
              const t = this.get("currentState"),
                n = this.get("isClickTarget");
              e === s.ButtonState.OVER &&
                (this.get("onHoverSound") &&
                  i.Audio.getChannel(o).playSound(this.get("onHoverSound")),
                n && (e = s.ButtonState.DOWN)),
                this.set("isState_" + t, !1),
                this.set("isState_" + e, !0),
                this.set("currentState", e);
            },
            _processClick() {
              this.attrs.onClick && this.attrs.onClick();
              const e = this.get("selectionGroup"),
                t = this.get("isSelected");
              (e && t) || this._setSelected(!t);
            },
            _setSelected(e) {
              if (!this.get("canBeSelected")) return;
              const t = this.get("isSelected");
              if (t !== e) {
                if (e) {
                  const e = this.get("selectionGroup");
                  a.setSelection(e, this);
                }
                t && this.attrs.onDeselected
                  ? this.attrs.onDeselected()
                  : e && this.attrs.onSelected && this.attrs.onSelected(),
                  this.set("isSelected", e);
              }
            },
            actions: {
              changeState(e) {
                this.get("currentState") !== s.ButtonState.DISABLED &&
                  this._changeState(e);
              },
              beginClick() {
                if (this.get("currentState") === s.ButtonState.DISABLED) return;
                this.get("onClickSound") &&
                  i.Audio.getChannel(o).playSound(this.get("onClickSound")),
                  this._changeState(s.ButtonState.DOWN),
                  this.set("isClickTarget", !0);
                const e = () => {
                  this.set("isClickTarget", !1),
                    document.removeEventListener("mouseup", e);
                };
                document.addEventListener("mouseup", e);
              },
              endClick() {
                if (this.get("currentState") === s.ButtonState.DISABLED) return;
                this.get("isClickTarget") &&
                  (this.get("onClickReleaseSound") &&
                    i.Audio.getChannel(o).playSound(
                      this.get("onClickReleaseSound"),
                    ),
                  this._processClick(),
                  this.set("isClickTarget", !1),
                  this._changeState(s.ButtonState.OVER));
              },
              onHover() {
                this.get("currentState") !== s.ButtonState.DISABLED &&
                  (this._changeState(s.ButtonState.OVER),
                  this.attrs.onHover && this.attrs.onHover());
              },
              onHoverLeave() {
                this.get("currentState") !== s.ButtonState.DISABLED &&
                  (this._changeState(s.ButtonState.UP),
                  this.attrs.onHoverLeave && this.attrs.onHoverLeave());
              },
            },
          });
        a.reopenClass({
          currentSelectionMap: {},
          setSelection(e, t) {
            if (!e || !t || !t.get("canBeSelected")) return;
            const n = a.currentSelectionMap[e];
            n && n._setSelected(!1), (a.currentSelectionMap[e] = t);
          },
        }),
          (e.exports = a);
      },
      (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.ButtonState = void 0);
        const n = Object.freeze({
          UP: "up",
          OVER: "over",
          DOWN: "down",
          DISABLED: "disabled",
        });
        t.ButtonState = n;
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "Xqjl9BkW",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\generic-button-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\generic-button-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\generic-button-component\\\\index.js\\" "],["text","\\n"],["append",["unknown",["isEnabledObserver"]],false],["text","\\n"],["append",["unknown",["triggerSelectedObserver"]],false],["text","\\n"],["open-element","div",[]],["static-attr","class","generic-button-root"],["modifier",["action"],[["get",[null]],"onHoverLeave"],[["on"],["mouseLeave"]]],["modifier",["action"],[["get",[null]],"onHover"],[["on"],["mouseEnter"]]],["modifier",["action"],[["get",[null]],"beginClick"],[["on"],["mouseDown"]]],["modifier",["action"],[["get",[null]],"endClick"],[["on"],["mouseUp"]]],["flush-element"],["text","\\n\\n"],["text","  "],["open-element","div",[]],["dynamic-attr","class",["concat",["generic-button-state up ",["helper",["if"],[["get",["isSelected"]],"selected"],null]," ",["helper",["if"],[["get",["isState_up"]],"active"],null]]]],["dynamic-attr","style",["unknown",["upStyle"]],null],["flush-element"],["text","\\n    "],["block",["if"],[["get",["upBgPathInternal"]]],null,27],["text","\\n    "],["open-element","div",[]],["dynamic-attr","class",["concat",["generic-button-primary-img-container ",["helper",["if"],[["get",["upBgPathInternal"]],"has-bg"],null]]]],["flush-element"],["text","\\n      "],["block",["if"],[["get",["upImgPathInternal"]]],null,26],["text","\\n    "],["close-element"],["text","\\n"],["block",["if"],[["get",["text"]]],null,25,24],["text","    "],["block",["if"],[["get",["useCustomContent"]]],null,22],["text","\\n  "],["close-element"],["text","\\n\\n"],["text","  "],["open-element","div",[]],["dynamic-attr","class",["concat",["generic-button-state over ",["helper",["if"],[["get",["isSelected"]],"selected"],null]," ",["helper",["if"],[["get",["isState_over"]],"active"],null]]]],["dynamic-attr","style",["unknown",["overStyle"]],null],["flush-element"],["text","\\n    "],["block",["if"],[["get",["overBgPathInternal"]]],null,21],["text","\\n    "],["open-element","div",[]],["dynamic-attr","class",["concat",["generic-button-primary-img-container ",["helper",["if"],[["get",["overBgPathInternal"]],"has-bg"],null]]]],["flush-element"],["text","\\n      "],["block",["if"],[["get",["overImgPathInternal"]]],null,20],["text","\\n    "],["close-element"],["text","\\n"],["block",["if"],[["get",["text"]]],null,19,18],["text","    "],["block",["if"],[["get",["useCustomContent"]]],null,16],["text","\\n"],["block",["if"],[["get",["tooltipText"]]],null,15],["text","  "],["close-element"],["text","\\n\\n"],["text","  "],["open-element","div",[]],["dynamic-attr","class",["concat",["generic-button-state down ",["helper",["if"],[["get",["isSelected"]],"selected"],null]," ",["helper",["if"],[["get",["isState_down"]],"active"],null]]]],["dynamic-attr","style",["unknown",["downStyle"]],null],["flush-element"],["text","\\n    "],["block",["if"],[["get",["downBgPathInternal"]]],null,13],["text","\\n    "],["open-element","div",[]],["dynamic-attr","class",["concat",["generic-button-primary-img-container ",["helper",["if"],[["get",["downBgPathInternal"]],"has-bg"],null]]]],["flush-element"],["text","\\n      "],["block",["if"],[["get",["downImgPathInternal"]]],null,12],["text","\\n    "],["close-element"],["text","\\n"],["block",["if"],[["get",["text"]]],null,11,10],["text","    "],["block",["if"],[["get",["useCustomContent"]]],null,8],["text","\\n  "],["close-element"],["text","\\n\\n"],["text","  "],["open-element","div",[]],["dynamic-attr","class",["concat",["generic-button-state disabled ",["helper",["if"],[["get",["isSelected"]],"selected"],null]," ",["helper",["if"],[["get",["isState_disabled"]],"active"],null]]]],["dynamic-attr","style",["unknown",["disabledStyle"]],null],["flush-element"],["text","\\n    "],["block",["if"],[["get",["disabledBgPathInternal"]]],null,7],["text","\\n    "],["open-element","div",[]],["dynamic-attr","class",["concat",["generic-button-primary-img-container ",["helper",["if"],[["get",["disabledBgPathInternal"]],"has-bg"],null]]]],["flush-element"],["text","\\n      "],["block",["if"],[["get",["disabledImgPathInternal"]]],null,6],["text","\\n    "],["close-element"],["text","\\n"],["block",["if"],[["get",["text"]]],null,5,4],["text","    "],["block",["if"],[["get",["useCustomContent"]]],null,2],["text","\\n"],["block",["if"],[["get",["disabledTooltipText"]]],null,1],["text","  "],["close-element"],["text","\\n\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":["default"],"blocks":[{"statements":[["text","        "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n          "],["open-element","p",[]],["flush-element"],["append",["unknown",["disabledTooltipText"]],false],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["uikit-tooltip"],null,[["tooltipPosition","type"],[["get",["disabledTooltipPosition"]],["get",["disabledTooltipType"]]]],0]],"locals":[]},{"statements":[["open-element","div",[]],["static-attr","class","generic-button-custom-content"],["flush-element"],["yield","default",[["get",["customContentDisabled"]]]],["close-element"]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","generic-button-text"],["flush-element"],["append",["unknown",["disabledText"]],false],["close-element"],["text","\\n    "]],"locals":[]},{"statements":[["block",["if"],[["get",["disabledText"]]],null,3]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","generic-button-text"],["flush-element"],["append",["unknown",["text"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["open-element","img",[]],["dynamic-attr","src",["concat",[["unknown",["disabledImgPathInternal"]]]]],["dynamic-attr","style",["unknown",["iconSizeModifierStyle"]],null],["flush-element"],["close-element"]],"locals":[]},{"statements":[["open-element","img",[]],["dynamic-attr","src",["concat",[["unknown",["disabledBgPathInternal"]]]]],["flush-element"],["close-element"]],"locals":[]},{"statements":[["open-element","div",[]],["static-attr","class","generic-button-custom-content"],["flush-element"],["yield","default",[["get",["customContentDown"]]]],["close-element"]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","generic-button-text"],["flush-element"],["append",["unknown",["downText"]],false],["close-element"],["text","\\n    "]],"locals":[]},{"statements":[["block",["if"],[["get",["downText"]]],null,9]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","generic-button-text"],["flush-element"],["append",["unknown",["text"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["open-element","img",[]],["dynamic-attr","src",["concat",[["unknown",["downImgPathInternal"]]]]],["dynamic-attr","style",["unknown",["iconSizeModifierStyle"]],null],["flush-element"],["close-element"]],"locals":[]},{"statements":[["open-element","img",[]],["dynamic-attr","src",["concat",[["unknown",["downBgPathInternal"]]]]],["flush-element"],["close-element"]],"locals":[]},{"statements":[["text","        "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n          "],["open-element","p",[]],["flush-element"],["append",["unknown",["tooltipText"]],false],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["uikit-tooltip"],null,[["tooltipPosition","type"],[["get",["tooltipPosition"]],["get",["tooltipType"]]]],14]],"locals":[]},{"statements":[["open-element","div",[]],["static-attr","class","generic-button-custom-content"],["flush-element"],["yield","default",[["get",["customContentOver"]]]],["close-element"]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","generic-button-text"],["flush-element"],["append",["unknown",["overText"]],false],["close-element"],["text","\\n    "]],"locals":[]},{"statements":[["block",["if"],[["get",["overText"]]],null,17]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","generic-button-text"],["flush-element"],["append",["unknown",["text"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["open-element","img",[]],["dynamic-attr","src",["concat",[["unknown",["overImgPathInternal"]]]]],["dynamic-attr","style",["unknown",["iconSizeModifierStyle"]],null],["flush-element"],["close-element"]],"locals":[]},{"statements":[["open-element","img",[]],["dynamic-attr","src",["concat",[["unknown",["overBgPathInternal"]]]]],["flush-element"],["close-element"]],"locals":[]},{"statements":[["open-element","div",[]],["static-attr","class","generic-button-custom-content"],["flush-element"],["yield","default",[["get",["customContentUp"]]]],["close-element"]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","generic-button-text"],["flush-element"],["append",["unknown",["upText"]],false],["close-element"],["text","\\n    "]],"locals":[]},{"statements":[["block",["if"],[["get",["upText"]]],null,23]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","generic-button-text"],["flush-element"],["append",["unknown",["text"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["open-element","img",[]],["dynamic-attr","src",["concat",[["unknown",["upImgPathInternal"]]]]],["dynamic-attr","style",["unknown",["iconSizeModifierStyle"]],null],["flush-element"],["close-element"]],"locals":[]},{"statements":[["open-element","img",[]],["dynamic-attr","src",["concat",[["unknown",["upBgPathInternal"]]]]],["flush-element"],["close-element"]],"locals":[]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i,
          s = n(1),
          o = (i = n(333)) && i.__esModule ? i : { default: i };
        n(334);
        var a = n(329);
        const r = "/fe/lol-static-assets/videos",
          l = "sfx-ui",
          c = "intro",
          m = "hover",
          u = "active",
          d = "idle",
          p = "disabled";
        e.exports = s.Ember.Component.extend({
          layout: o.default,
          classNames: ["find-match-button-wrapper"],
          videoSource: {
            intro: `${r}/find-match-button-intro.webm`,
            active: `${r}/find-match-button-active.webm`,
            idle: `${r}/find-match-button-idle.webm`,
            hover: `${r}/find-match-button-hover.webm`,
          },
          partySettingsService: s.Ember.inject.service("party-settings"),
          videoStateMachine: null,
          currentState: a.ButtonState.UP,
          isState_down: s.Ember.computed.equal(
            "currentState",
            a.ButtonState.DOWN,
          ),
          isState_up: s.Ember.computed.equal("currentState", a.ButtonState.UP),
          isState_over: s.Ember.computed.equal(
            "currentState",
            a.ButtonState.OVER,
          ),
          isState_disabled: s.Ember.computed.equal(
            "currentState",
            a.ButtonState.DISABLED,
          ),
          animationsEnabled: s.Ember.computed.alias(
            "partySettingsService.animationsEnabled",
          ),
          hasPlayedIntroAnimation: !1,
          currentImgPath: s.Ember.computed(
            "currentState",
            "animationsEnabled",
            function () {
              const e = this.get("animationsEnabled");
              switch (this.get("currentState")) {
                case a.ButtonState.UP:
                  return this.get("baseImgPath");
                case a.ButtonState.DOWN:
                  return this.get("downImgPath");
                case a.ButtonState.OVER:
                  return e ? this.get("baseImgPath") : this.get("overImgPath");
                case a.ButtonState.DISABLED:
                  return this.get("disabledImgPath");
                default:
                  return this.get("baseImgPath");
              }
            },
          ),
          didReceiveAttrs() {
            this._super(...arguments);
            this.get("currentState"), a.ButtonState.DISABLED;
            this.get("isEnabled")
              ? this._changeState(a.ButtonState.UP)
              : this._changeState(a.ButtonState.DISABLED);
          },
          didInsertElement() {
            this._super(...arguments);
            const e = this.element.querySelector(
              "lol-uikit-video-state-machine",
            );
            this.set("videoStateMachine", e);
            this.get("isEnabled") &&
              (this._dispatchButtonEvent(),
              this.set("hasPlayedIntroAnimation", !0),
              this._dispatchButtonEvent(a.ButtonState.UP));
          },
          didUpdateAttrs() {
            this._super(...arguments);
            const e = this.get("currentState") !== a.ButtonState.DISABLED,
              t = this.get("isEnabled");
            e && !t
              ? this._changeState(a.ButtonState.DISABLED)
              : !e &&
                t &&
                (this.get("hasPlayedIntroAnimation")
                  ? this._changeState(a.ButtonState.UP)
                  : this._dispatchButtonEvent());
          },
          mouseUp: function (e) {
            e.preventDefault();
            const t = this.get("currentState"),
              n = this.get("isEnabled"),
              i = this.get("onClickReleaseSound");
            t !== a.ButtonState.DISABLED &&
              (i && s.Audio.getChannel(l).playSound(i),
              n && this.sendAction("confirmButton"),
              this.set("isClickTarget", !1));
          },
          mouseDown: function (e) {
            e.preventDefault();
            const t = this.get("currentState"),
              n = this.get("onClickSound");
            t !== a.ButtonState.DISABLED &&
              (n && s.Audio.getChannel(l).playSound(n),
              this._changeState(a.ButtonState.DOWN),
              this.set("isClickTarget", !0));
          },
          mouseEnter() {
            if (this.get("currentState") === a.ButtonState.DISABLED) return;
            const e = this.get("onHoverSound");
            e && s.Audio.getChannel(l).playSound(e),
              this._changeState(a.ButtonState.OVER);
          },
          mouseLeave() {
            this.get("currentState") !== a.ButtonState.DISABLED &&
              this._changeState(a.ButtonState.UP);
          },
          _changeState(e) {
            e
              ? (this.set("currentState", e), this._dispatchButtonEvent(e))
              : this._dispatchButtonEvent(e);
          },
          _dispatchButtonEvent(e) {
            const t = this.get("videoStateMachine");
            t &&
              (e
                ? e === a.ButtonState.UP
                  ? t.dispatchEvent(new Event(d))
                  : e === a.ButtonState.OVER
                    ? t.dispatchEvent(new Event(m))
                    : e === a.ButtonState.DOWN
                      ? t.dispatchEvent(new Event(u))
                      : e === a.ButtonState.DISABLED &&
                        t.dispatchEvent(new Event(p))
                : t.dispatchEvent(new Event(c)));
          },
        });
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "oZRpYS/q",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\animated-find-match-button\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\animated-find-match-button\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\animated-find-match-button\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","find-match-button"],["flush-element"],["text","\\n  "],["open-element","div",[]],["dynamic-attr","class",["concat",["find-match-state ",["unknown",["currentState"]]]]],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","img-container"],["flush-element"],["open-element","img",[]],["dynamic-attr","src",["concat",[["unknown",["currentImgPath"]]]]],["flush-element"],["close-element"],["close-element"],["text","\\n  "],["close-element"],["text","\\n  "],["open-element","lol-uikit-video-state-machine",[]],["flush-element"],["text","\\n    "],["open-element","lol-uikit-video-group",[]],["static-attr","class","find-match-button-video"],["flush-element"],["text","\\n      "],["open-element","lol-uikit-video-state",[]],["static-attr","state","disabled"],["flush-element"],["close-element"],["text","\\n      "],["open-element","lol-uikit-video-state",[]],["static-attr","state","intro"],["static-attr","wait-for-end",""],["flush-element"],["text","\\n        "],["open-element","lol-uikit-video",[]],["static-attr","fade-in","0"],["static-attr","type","intro"],["dynamic-attr","src",["unknown",["videoSource","intro"]],null],["static-attr","preload",""],["flush-element"],["text","\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n      "],["open-element","lol-uikit-video-state",[]],["static-attr","state","idle"],["flush-element"],["text","\\n        "],["open-element","lol-uikit-video",[]],["static-attr","fade-in","0"],["static-attr","fade-out","0"],["static-attr","type","idle"],["dynamic-attr","src",["unknown",["videoSource","idle"]],null],["flush-element"],["text","\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n      "],["open-element","lol-uikit-video-state",[]],["static-attr","state","active"],["static-attr","wait-for-end",""],["flush-element"],["text","\\n        "],["open-element","lol-uikit-video",[]],["static-attr","fade-in","0"],["static-attr","fade-out","0"],["static-attr","type","outro"],["dynamic-attr","src",["unknown",["videoSource","active"]],null],["flush-element"],["text","\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n      "],["open-element","lol-uikit-video-state",[]],["static-attr","state","hover"],["static-attr","no-preserve-state",""],["flush-element"],["text","\\n        "],["open-element","lol-uikit-video",[]],["static-attr","fade-in","0"],["static-attr","fade-out","0"],["static-attr","type","idle"],["dynamic-attr","src",["unknown",["videoSource","hover"]],null],["flush-element"],["text","\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n  "],["open-element","div",[]],["dynamic-attr","class",["concat",["button-text ",["unknown",["currentState"]]]]],["flush-element"],["append",["unknown",["buttonText"]],false],["close-element"],["text","\\n"],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        n(336);
        e.exports = i.Ember.Component.extend({
          layout: n(337),
          classNames: ["cherry-rating-component"],
          tooltipEnabled: !1,
          ratedRating: i.Ember.computed.alias("currentQueue.ratedRating"),
          ratedTier: i.Ember.computed.alias("currentQueue.ratedTier"),
          currentQueue: i.Ember.computed(
            "rankedData.queueMap",
            "queueType",
            function () {
              const e = this.get("rankedData.queueMap"),
                t = this.get("queueType");
              if (e && t) return e[t];
            },
          ),
          isCherryRatingShown: i.Ember.computed("currentQueue", function () {
            const e = this.get("currentQueue");
            return e && (e.wins || e.losses);
          }),
          cherryRatedTierNameLoc: i.Ember.computed("ratedTier", function () {
            const e = this.get("ratedTier");
            return i.LeagueTierNames.getCherryRatedTierNameLoc(e);
          }),
          cherryRatedIcon: i.Ember.computed("ratedTier", function () {
            const e = this.get("ratedTier");
            return i.LeagueTierNames.getCherryRatedMiniCrest(e);
          }),
          cherryRatedMedallion: i.Ember.computed("ratedTier", function () {
            const e = this.get("ratedTier");
            return i.LeagueTierNames.getCherryRatedMedallion(e);
          }),
          cherryTooltipRatedRatingText: i.Ember.computed(
            "ratedRating",
            function () {
              const e = this.get("tra"),
                t = this.get("ratedRating");
              return t
                ? e.formatString("cherry_tooltip_rated_rating_text", {
                    cherry_rated_rating: t,
                  })
                : e.formatString("cherry_tooltip_rated_rating_text", {
                    cherry_rated_rating: 0,
                  });
            },
          ),
        });
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "CUJKUnuk",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\cherry-rating\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\cherry-rating\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\cherry-rating\\\\index.js\\" "],["text","\\n"],["block",["if"],[["get",["isCherryRatingShown"]]],null,2]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","        "],["open-element","div",[]],["static-attr","class","cherry-rating-tooltip-container"],["flush-element"],["text","\\n          "],["open-element","img",[]],["static-attr","class","cherry-rating-medallion"],["dynamic-attr","src",["unknown",["cherryRatedMedallion"]],null],["flush-element"],["close-element"],["text","\\n          "],["open-element","div",[]],["static-attr","class","rating-text-container"],["flush-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","rating-text-inner-container"],["flush-element"],["text","\\n              "],["open-element","div",[]],["static-attr","class","rated-rating-tier"],["flush-element"],["append",["unknown",["cherryRatedTierNameLoc"]],false],["close-element"],["text","\\n              "],["open-element","div",[]],["static-attr","class","rated-rating-points"],["flush-element"],["append",["unknown",["cherryTooltipRatedRatingText"]],false],["close-element"],["text","\\n            "],["close-element"],["text","\\n          "],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["uikit-tooltip"],null,[["type","tooltipPosition"],["system","right"]],0]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","cherry-rating-container"],["flush-element"],["text","\\n    "],["open-element","img",[]],["static-attr","class","cherry-rating-icon"],["dynamic-attr","src",["unknown",["cherryRatedIcon"]],null],["flush-element"],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","cherry-rating-text"],["flush-element"],["append",["unknown",["ratedRating"]],false],["close-element"],["text","\\n"],["block",["if"],[["get",["tooltipEnabled"]]],null,1],["text","  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1),
          s = n(56);
        n(339);
        var o = n(75),
          a = n(340);
        const { RunMixin: r } = i.EmberAddons.EmberLifeline,
          l = { CHAMP_SELECT: "CHAMP_SELECT", COSMETICS: "COSMETICS" };
        e.exports = i.Ember.Component.extend(r, {
          layout: n(341),
          classNames: ["quick-play-loadout-selector-component"],
          quickPlayService: i.Ember.inject.service("quick-play"),
          matchmakingService: i.Ember.inject.service("matchmaking"),
          selectingSlotIndex: null,
          selectingNavItemId: l.CHAMP_SELECT,
          localPlayer: null,
          shouldHideSecondaryPosition: !1,
          navItems: l,
          didUpdateAttrs: function () {
            this._super(...arguments),
              this.shouldAutoSetQuickPlaySlots() &&
                this.autoSelectQuickPlaySlots();
          },
          shouldAutoSetQuickPlaySlots() {
            const e = this.get("defaultSelections.length"),
              t = this.get("showQuickPlaySelections"),
              n = this.get("localPlayer.playerSlots") || [],
              i = 0 === n.length,
              s = n.filter(this.isDefaultSlotState).length === n.length,
              o = Boolean(this.get("ongoingRequestedSlots"));
            return t && (i || s) && !o && 2 === e;
          },
          isDefaultSlotState: (e) =>
            0 === e.championId &&
            e.positionPreference === s.POSITIONS.UNSELECTED,
          autoSelectQuickPlaySlots() {
            const e = (this.get("defaultSelections") || []).map((e) => ({
              ...e,
            }));
            return Promise.allSettled(
              e.map((e) =>
                Boolean(e.perks)
                  ? Promise.resolve(e.perks)
                  : this.getLastUsedQuickPlayPageForChampPosition(
                      e.championId,
                      e.positionPreference,
                    ),
              ),
            ).then(
              (t) => (
                t.forEach((t, n) => {
                  t.value
                    ? (e[n].perks = t.value)
                    : i.logger.error(
                        `Failed to get perks page for champId: ${e[n].championId} position: \n            ${e[n].positionPreference} error: ${t.reason}`,
                      );
                }),
                this.putQuickPlaySlots(e)
              ),
            );
          },
          isChampionNavSelected: i.Ember.computed(
            "selectingNavItemId",
            function () {
              return this.get("selectingNavItemId") === l.CHAMP_SELECT;
            },
          ),
          skins: i.Ember.computed(
            "quickPlayService.championByChampId",
            "selectingSlotIndex",
            "quickPlayViewSlots",
            "localPlayer.playerSlots.@each.championId",
            function () {
              const e = this.get("selectingSlotIndex");
              if (!Number.isInteger(e)) return [];
              const t = this.get("quickPlayViewSlots") || [],
                n = this.get("quickPlayService"),
                i = t[e].championId,
                s = n.getChampionData(i);
              return (
                s?.skins
                  ?.filter((e) => Boolean(e.name))
                  ?.map((e) =>
                    "kTieredSkin" === e.questSkinInfo.productType
                      ? this.getMostProgressedSkin(e)
                      : e,
                  ) ?? []
              );
            },
          ),
          selectingSlot: i.Ember.computed(
            "localPlayer.playerSlots.[]",
            "selectingSlotIndex",
            function () {
              return (
                (this.get("localPlayer.playerSlots") || [])[
                  this.get("selectingSlotIndex") || 0
                ] || {}
              );
            },
          ),
          quickPlayViewSlots: i.Ember.computed(
            "localPlayer.playerSlots.@each.championId",
            "localPlayer.playerSlots.@each.positionPreference",
            "localPlayer.playerSlots.@each.perks",
            "localPlayer.playerSlots.@each.spell1",
            "localPlayer.playerSlots.@each.spell2",
            "localPlayer.playerSlots.@each.skinId",
            "selectingSlotIndex",
            "shouldHideSecondaryPosition",
            function () {
              return (this.get("localPlayer.playerSlots") || []).map(
                (e, t) => ({
                  championId: e.championId,
                  positionPreference: e.positionPreference,
                  spell1: e.spell1,
                  spell2: e.spell2,
                  skinId: e.skinId,
                  isPrimary: 0 === t,
                  hide: 0 !== t && this.get("shouldHideSecondaryPosition"),
                  perks: e.perks,
                  isSelected: this.get("selectingSlotIndex") === t,
                  playerSlotKey: t.toString() + e.championId.toString(),
                }),
              );
            },
          ),
          hideSlotSwapButton: i.Ember.computed.alias(
            "shouldHideSecondaryPosition",
          ),
          perksPageForSelectingChampion: i.Ember.computed(
            "selectingSlot.championId",
            "quickPlayService.perksPages.@each.quickPlayChampionIds",
            function () {
              const e = this.get("selectingSlot.championId") || 0,
                t = this.get("quickPlayService.perksPages") || [];
              return (
                t.find(
                  (t) => t && (t.quickPlayChampionIds || []).includes(e),
                ) || t[0]
              );
            },
          ),
          isSearching: i.Ember.computed(
            "matchmakingService.isNotSearching",
            function () {
              return !(this.get("matchmakingService.isNotSearching") || !1);
            },
          ),
          getLastUsedQuickPlayPageForChampPosition(e, t) {
            const n = `/v1/quick-play-selections/champion/${e}/position/${t}`;
            return (0, i.dataBinding)("/lol-perks").get(n, { skipCache: !0 });
          },
          updateQuickPlayPerksPage: function (e, t) {
            const n = this.getPlayerSlotsSetRequestBase();
            return n[t]
              ? ((n[t].perks = JSON.stringify(
                  (0, a.getPerkSettingsFromPage)(e),
                )),
                this.putQuickPlaySlots(n))
              : Promise.reject(
                  `Unable to set perks page for Quickplay slotIndex: ${t} pageId: ${e.id}.`,
                );
          },
          _setCurrentSelectedSkin(e) {
            if (!e) return;
            const t = this.get("selectingSlotIndex"),
              n = this.getPlayerSlotsSetRequestBase();
            if (n[t].skinId !== e) {
              n[t].skinId = e;
              const i = n[t].championId;
              return this.putQuickPlaySlots(n).then(() =>
                this.get("quickPlayService").saveLastSelectedSkinForChampion(
                  i,
                  e,
                ),
              );
            }
          },
          putQuickPlaySlots(e) {
            const t = this.get("localPlayer.playerSlots") || [],
              n = this.get("ongoingRequestedSlots") || [],
              s = (0, a.areQuickPlaySlotArraysEqual)(e, t),
              o = (0, a.areQuickPlaySlotArraysEqual)(e, n);
            return s || o
              ? Promise.reject(
                  `Put slots request matches ${s ? "current" : "ongoing requested"} slots`,
                )
              : (this.set("ongoingRequestedSlots", e),
                (0, i.dataBinding)("/lol-lobby")
                  .put("/v1/lobby/members/localMember/player-slots", e)
                  .then(() =>
                    this.get("quickPlayService").saveQuickPlaySelections(e),
                  )
                  .finally(() => {
                    this.set("ongoingRequestedSlots", void 0);
                  }));
          },
          getMostProgressedSkin: function (e) {
            const t =
              e?.questSkinInfo.tiers
                ?.filter?.((e) => e?.ownership?.owned)
                .pop() ?? e?.questSkinInfo?.tiers?.[0];
            return (t.isTieredSkin = !0), t;
          },
          _setCurrentSelectedChampion(e) {
            if (!Boolean(e)) return;
            const t = this.get("selectingSlotIndex"),
              n = this.getPlayerSlotsSetRequestBase(),
              i = n.map((e) => e.championId).includes(e),
              s = n[t];
            if (s.championId !== e) {
              if (i) return this._handleSwapSlots();
              {
                const t = this.get("quickPlayService");
                (s.championId = e), (s.skinId = t.getDefaultSkinForChampion(e));
              }
              return this.getLastUsedQuickPlayPageForChampPosition(
                e,
                s.positionPreference,
              ).then((e) => ((s.perks = e), this.putQuickPlaySlots(n)));
            }
          },
          _setPositionPreferences(e) {
            if (!Boolean(e)) return;
            const t = this.get("selectingSlotIndex"),
              n = this.getPlayerSlotsSetRequestBase(),
              i = n.map((e) => e.positionPreference).includes(e),
              a = n[t],
              r = 0 === t;
            let l = !1;
            if (a.positionPreference === e) return;
            if (i) {
              const e = a.positionPreference;
              (n[r ? 0 : 1].positionPreference =
                n[r ? 1 : 0].positionPreference),
                (n[r ? 1 : 0].positionPreference = e),
                (l = !0);
            } else
              (n[t].positionPreference = e), (l = e !== s.POSITIONS.JUNGLE);
            const c = this.get("quickPlayService.gameModeSummonerSpells") || [];
            return (
              (n || []).forEach((e) => {
                const t = [e.spell1, e.spell2],
                  n = (0, o.getSpellIdsWithSmiteAssignedIfAppropriate)(
                    t,
                    e.positionPreference,
                    c,
                    l,
                  );
                (e.spell1 = n[0]), (e.spell2 = n[1]);
              }),
              this.putQuickPlaySlots(n)
            );
          },
          getPlayerSlotsSetRequestBase() {
            const e = this.get("localPlayer.playerSlots") || [];
            return (0, a.copyArrayOfObjects)(e);
          },
          _handleSwapSlots() {
            const e = this.getPlayerSlotsSetRequestBase();
            return this.putQuickPlaySlots(e.reverse());
          },
          persistFlashPreferenceSetting(e) {
            const t = {};
            return (
              (t.playerFlashOnFPreference = e),
              (0, i.dataBinding)("/lol-settings").patch(
                "/v2/account/LCUPreferences/lol-perks",
                { data: t, schemaVersion: 1 },
              )
            );
          },
          actions: {
            handleSelectedNavTab(e) {
              this.set("selectingNavItemId", e);
            },
            openPositionSelector(e) {
              this.set("positionSelectorOpenIndex", e);
            },
            closePositionSelector(e) {
              this.get("positionSelectorOpenIndex") === e &&
                this.set("positionSelectorOpenIndex", -1);
            },
            handleChampionSelected(e) {
              return this.debounceTask("_setCurrentSelectedChampion", e, 500);
            },
            handleSkinSelected(e) {
              return this.debounceTask("_setCurrentSelectedSkin", e, 500);
            },
            handleQuickPlaySlotChange(e) {
              this.sendAction("setSelectingSlotIndex", e);
            },
            handleQPModalClose(e, t) {
              this.sendAction("setShowQuickPlayModal", e, t);
            },
            handlePerksPageSelected(e, t) {
              return this.updateQuickPlayPerksPage(e, t);
            },
            handleSpellsSelected(e) {
              const t = this.getPlayerSlotsSetRequestBase(),
                n = this.get("selectingSlotIndex");
              return (
                (t[n].spell1 = e[0]),
                (t[n].spell2 = e[1]),
                4 === e[0] && this.persistFlashPreferenceSetting(!1),
                4 === e[1] && this.persistFlashPreferenceSetting(!0),
                this.putQuickPlaySlots(t)
              );
            },
            handleSwapSlots() {
              return this.debounceTask("_handleSwapSlots", 500);
            },
            setPositionPreferences(e, t) {
              this._setPositionPreferences(t);
            },
            putQuickPlaySlotsAction(e) {
              return this.putQuickPlaySlots(e);
            },
          },
        });
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.areQuickPlaySlotArraysEqual = function (e = [], t = [], s = n) {
            if (e.length === t.length) {
              for (let n = 0; n < e.length; n++) {
                if (!i(e[n], t[n], s)) return !1;
              }
              return !0;
            }
            return !1;
          }),
          (t.copyArrayOfObjects = function (e) {
            return e.map((e) => ({ ...e }));
          }),
          (t.getPerkSettingsFromPage = function (e) {
            return {
              perkIds: e.selectedPerkIds,
              perkStyle: e.primaryStyleId,
              perkSubStyle: e.subStyleId,
            };
          });
        const n = [
          "championId",
          "positionPreference",
          "skinId",
          "spell1",
          "spell2",
          "perks",
        ];
        function i(e, t, n) {
          for (let i = 0; i < n.length; i++) {
            const s = n[i];
            if (e[s] !== t[s]) return !1;
          }
          return !0;
        }
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "G+he6AmF",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-loadout-selector\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-loadout-selector\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-loadout-selector\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","quick-play-loadout-container"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","quick-play-data-container"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","quick-play-loadout-slots-container"],["flush-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","quick-play-loadout-title"],["flush-element"],["append",["unknown",["tra","quick_play_modal_title"]],false],["close-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","quick-play-loadout-selections-container"],["flush-element"],["text","\\n"],["block",["each"],[["get",["quickPlayViewSlots"]]],[["key"],["playerSlotKey"]],4],["block",["unless"],[["get",["hideSlotSwapButton"]]],null,2],["text","      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","quick-play-info-container"],["flush-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","quick-play-error-tooltip"],["flush-element"],["text","\\n        "],["append",["helper",["v2-footer-notifications"],null,[["isQuickPlayModal"],[true]]],false],["text","\\n      "],["close-element"],["text","\\n      "],["append",["unknown",["quick-play-selection-rules-tooltip"]],false],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","quick-play-customization-container"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","quick-play-customization-nav"],["flush-element"],["text","\\n      "],["open-element","button",[]],["dynamic-attr","onclick",["helper",["unless"],[["get",["isChampionNavSelected"]],["helper",["action"],[["get",[null]],"handleSelectedNavTab",["get",["navItems","CHAMP_SELECT"]]],null]],null],null],["dynamic-attr","class",["concat",["quick-play-customization-nav-item ",["helper",["if"],[["get",["isChampionNavSelected"]],"active"],null]]]],["flush-element"],["text","\\n        "],["append",["unknown",["tra","quick_play_modal_nav_champion"]],false],["text","\\n      "],["close-element"],["text","\\n      "],["open-element","button",[]],["dynamic-attr","onclick",["helper",["if"],[["get",["isChampionNavSelected"]],["helper",["action"],[["get",[null]],"handleSelectedNavTab",["get",["navItems","COSMETICS"]]],null]],null],null],["dynamic-attr","class",["concat",["quick-play-customization-nav-item ",["helper",["unless"],[["get",["isChampionNavSelected"]],"active"],null]]]],["flush-element"],["text","\\n        "],["append",["unknown",["tra","quick_play_modal_nav_cosmetics"]],false],["text","\\n      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n"],["block",["if"],[["get",["isChampionNavSelected"]]],null,1,0],["text","  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["append",["helper",["quick-play-skin-select"],null,[["skins","selectingSlot","setSkin"],[["get",["skins"]],["get",["selectingSlot"]],"handleSkinSelected"]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","quick-play-loadout-grid-container"],["flush-element"],["text","\\n        "],["append",["helper",["quick-play-champion-selector"],null,[["champions","playerSlots","selectChampion"],[["get",["quickPlayService","champs"]],["get",["quickPlayViewSlots"]],"handleChampionSelected"]]],false],["text","\\n      "],["close-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","quick-play-loadout-customization-group"],["flush-element"],["text","\\n        "],["append",["helper",["quick-play-perks-selector"],null,[["perksPages","selectingPerksPage","selectingSlotIndex","playerSlots","setShowQuickPlayModal","setPerksPage","setQuickPlaySlots"],[["get",["quickPlayService","perksPages"]],["get",["perksPageForSelectingChampion"]],["get",["selectingSlotIndex"]],["get",["localPlayer","playerSlots"]],"handleQPModalClose",["helper",["action"],[["get",[null]],"handlePerksPageSelected"],null],["helper",["action"],[["get",[null]],"putQuickPlaySlotsAction"],null]]]],false],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["append",["helper",["framed-icon-button"],null,[["disabled","isDiamond","iconPath","clickSfxPath","hoverSfxPath","onButtonClick"],[["get",["isSearching"]],true,"/fe/lol-static-assets/images/left-right-arrows.svg","/fe/lol-champ-select/sounds/sfx-uikit-edit-click.ogg","/fe/lol-champ-select/sounds/sfx-uikit-grid-hover.ogg",["helper",["action"],[["get",[null]],"handleSwapSlots"],null]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","            "],["open-element","div",[]],["dynamic-attr","class",["concat",["quick-play-loadout-selection-hitbox ",["helper",["if"],[["get",["playerSlot","isSelected"]],"selected"],null]]]],["flush-element"],["text","\\n              "],["append",["helper",["quick-play-selection-renderer"],null,[["isLocalPlayer","position","playerSlot","championId","disabled","isQuickplayModal","isPositionOverlayOpen","onClick","setPositionPreferences","handleSpellsSelected","closePositionSelector","openPositionSelector"],[true,["get",["playerSlot","positionPreference"]],["get",["playerSlot"]],["get",["playerSlot","championId"]],false,true,["helper",["eq"],[["get",["positionSelectorOpenIndex"]],["get",["index"]]],null],["helper",["action"],[["get",[null]],"handleQuickPlaySlotChange",["get",["index"]]],null],"setPositionPreferences","handleSpellsSelected",["helper",["action"],[["get",[null]],"closePositionSelector",["get",["index"]]],null],["helper",["action"],[["get",[null]],"openPositionSelector",["get",["index"]]],null]]]],false],["text","\\n              "],["open-element","div",[]],["static-attr","class","quick-play-loadout-selection-title"],["flush-element"],["text","\\n                "],["append",["helper",["if"],[["get",["playerSlot","isPrimary"]],["get",["tra","quick_play_position_primary"]],["get",["tra","quick_play_position_secondary"]]],null],false],["text","\\n              "],["close-element"],["text","\\n            "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["unless"],[["get",["playerSlot","hide"]]],null,3]],"locals":["playerSlot","index"]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1),
          s = n(56);
        n(343),
          (e.exports = i.Ember.Component.extend({
            layout: n(344),
            classNames: ["quick-play-selection-renderer-component"],
            classNameBindings: ["isLocalPlayer", "isClickable", "disabled"],
            lobbiesService: i.Ember.inject.service("lobbies"),
            quickPlayService: i.Ember.inject.service("quick-play"),
            isQuickplayModal: !1,
            championId: 0,
            playerSlot: {},
            isLocalPlayer: !1,
            isClickable: !1,
            isPartyMatchmaking: i.Ember.computed(
              "isLocalPlayer, isClickable",
              function () {
                const e = !this.get("isLocalPlayer"),
                  t = !this.get("isClickable");
                return e && t;
              },
            ),
            scarcePositions: i.Ember.computed.alias(
              "lobbiesService.scarcePositions",
            ),
            selectedSlot: i.Ember.computed("playerSlot.isPrimary", function () {
              return this.get("playerSlot.isPrimary")
                ? s.POSITION_ROLES.PRIMARY
                : s.POSITION_ROLES.SECONDARY;
            }),
            secondaryPosition: i.Ember.computed("playerSlot", function () {
              const e = this.get("playerSlot");
              return e.isPrimary
                ? s.POSITIONS.UNSELECTED
                : e.positionPreference;
            }),
            selectedPerkPage: i.Ember.computed(
              "playerSlot.championId",
              "quickPlayService.perksPages.@each.quickPlayChampionIds",
              function () {
                const e = this.get("playerSlot.championId") || 0,
                  t = (this.get("quickPlayService.perksPages") || []).find(
                    (t) => t && (t.quickPlayChampionIds || []).includes(e),
                  );
                return Boolean(t) && t.isValid ? t : null;
              },
            ),
            secondaryStyleIconStyle: i.Ember.computed(
              "selectedPerkPage.secondaryStyleIconPath",
              function () {
                return `-webkit-mask-image: url(${this.get("selectedPerkPage.secondaryStyleIconPath")});`;
              },
            ),
            _handleSetPositionPreferences(e, t) {
              this.sendAction("setPositionPreferences", e, t);
            },
            actions: {
              selectChampionSlot() {
                this.get("disabled") || this.sendAction("onClick");
              },
              openOverlay() {
                this.sendAction("onClick"),
                  this.sendAction("openPositionSelector");
              },
              closeOverlay() {
                this.sendAction("closePositionSelector");
              },
              handleSpellsSelected(e) {
                this.sendAction("handleSpellsSelected", e);
              },
              setPositionPreferences(e, t) {
                this._handleSetPositionPreferences(e, t);
              },
            },
          }));
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "vBYjoI4W",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-selection-renderer\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-selection-renderer\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-selection-renderer\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","quick-play-selected-champion-renderer"],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"selectChampionSlot"],null],null],["flush-element"],["text","\\n"],["block",["if"],[["get",["isQuickplayModal"]]],null,5,4],["text","  "],["open-element","div",[]],["static-attr","class","quick-play-selected-position-container"],["dynamic-attr","onmousedown",["helper",["action"],[["get",[null]],"openOverlay"],null],null],["flush-element"],["text","\\n    "],["append",["helper",["v2-banner-position-icon"],null,[["position","isPrimary","isQuickplayModal"],[["get",["position"]],["get",["playerSlot","isPrimary"]],["get",["isQuickplayModal"]]]]],false],["text","\\n  "],["close-element"],["text","\\n"],["block",["if"],[["get",["isPositionOverlayOpen"]]],null,3],["block",["if"],[["get",["isQuickplayModal"]]],null,2],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","          "],["open-element","div",[]],["static-attr","class","quick-play-loadout-rune-page-perk-frame"],["flush-element"],["text","\\n            "],["open-element","svg",[]],["static-attr","class","quick-play-keystone-warning-icon"],["static-attr","width","21"],["static-attr","height","20"],["static-attr","viewBox","0 0 21 20"],["static-attr","fill","none"],["static-attr","xmlns","http://www.w3.org/2000/svg","http://www.w3.org/2000/xmlns/"],["flush-element"],["text","\\n              "],["open-element","path",[]],["static-attr","fill-rule","evenodd"],["static-attr","clip-rule","evenodd"],["static-attr","d","M11.3889 3L18.5 15.25L17.6111 17H3.38889L2.5 15.25L9.61111 3H11.3889ZM9.61111 11.75L8.72222 7.375L10.5 6.5L12.2778 7.375L11.3889 11.75H9.61111ZM12.2778 14.375L10.5 16.125L8.72222 14.375L10.5 12.625L12.2778 14.375Z"],["flush-element"],["close-element"],["text","\\n            "],["close-element"],["text","\\n          "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["open-element","div",[]],["static-attr","class","quick-play-loadout-rune-page-perk-frame keystone"],["flush-element"],["text","\\n            "],["open-element","img",[]],["static-attr","class","quick-play-loadout-rune-page-keystone-icon"],["dynamic-attr","src",["unknown",["selectedPerkPage","pageKeystone","iconPath"]],null],["flush-element"],["close-element"],["text","\\n          "],["close-element"],["text","\\n          "],["open-element","div",[]],["dynamic-attr","class",["concat",["quick-play-loadout-rune-page-perk-frame secondary style-",["unknown",["selectedPerkPage","subStyleId"]]]]],["flush-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","quick-play-loadout-rune-page-secondary-style-icon"],["dynamic-attr","style",["unknown",["secondaryStyleIconStyle"]],null],["flush-element"],["close-element"],["text","\\n          "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","quick-play-spells-and-runes-container"],["flush-element"],["text","\\n      "],["append",["helper",["quick-play-summoner-spell-select"],null,[["selectingSlot","handleSpellsSelected"],[["get",["playerSlot"]],"handleSpellsSelected"]]],false],["text","\\n      "],["open-element","div",[]],["static-attr","class","quick-play-loadout-rune-page-icons"],["flush-element"],["text","\\n"],["block",["if"],[["get",["selectedPerkPage"]]],null,1,0],["text","      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["append",["helper",["v2-position-selector-modal"],null,[["animationsEnabled","selectingOrdinal","scarcePositions","primaryPosition","secondaryPosition","isQuickPlayModal","shouldHideNonScarcePositions","closeOverlay","setPositionPreferences"],[["get",["animationsEnabled"]],["get",["selectedSlot"]],["get",["scarcePositions"]],["get",["position"]],["get",["secondaryPosition"]],true,false,"closeOverlay","setPositionPreferences"]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","quick-play-selected-champion-container"],["flush-element"],["text","\\n      "],["open-element","div",[]],["dynamic-attr","class",["concat",["quick-play-selected-champion-frame ",["helper",["if"],[["get",["isPartyMatchmaking"]],"matchmaking"],null]]]],["flush-element"],["text","\\n        "],["append",["helper",["quick-play-champion-square"],null,[["championId"],[["get",["championId"]]]]],false],["text","\\n      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","quick-play-selected-champion-tile-container"],["flush-element"],["text","\\n      "],["append",["helper",["quick-play-champion-square"],null,[["championId","isQuickplayModal","selectedSkinId"],[["get",["championId"]],["get",["isQuickplayModal"]],["get",["playerSlot","skinId"]]]]],false],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        n(346),
          (e.exports = i.Ember.Component.extend({
            layout: n(347),
            classNames: ["champion-square-component"],
            isQuickplayModal: !1,
            selectedSkinId: null,
            quickPlayService: i.Ember.inject.service("quick-play"),
            championData: i.Ember.computed(
              "quickPlayService.championByChampId",
              "championId",
              function () {
                const e = this.get("quickPlayService"),
                  t = this.get("championId");
                return e.getChampionData(t);
              },
            ),
            skinTilePath: i.Ember.computed(
              "championData",
              "selectedSkinId",
              function () {
                const e = this.get("selectedSkinId");
                return this._getSkinPath(e);
              },
            ),
            _getSkinPath(e) {
              const t = this.get("championData"),
                n = this.get("championData.skins");
              for (const i of n) {
                if (!i) return t.squarePortraitPath;
                const n = (i.questSkinInfo.tiers || []).find((t) => t.id === e),
                  s = (i.chromas || []).find((t) => t.id === e);
                if ("kTieredSkin" === i?.questSkinInfo.productType)
                  return n.splashPath;
                if (n?.id || i.id === e || s?.id) return i.splashPath;
              }
              return t.squarePortraitPath;
            },
          }));
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "ogLC3JaX",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-champion-square-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-champion-square-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-champion-square-component\\\\index.js\\" "],["text","\\n"],["block",["if"],[["get",["isQuickplayModal"]]],null,1,0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["open-element","img",[]],["static-attr","class","champion-square-portrait"],["dynamic-attr","src",["unknown",["championData","squarePortraitPath"]],null],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","img",[]],["static-attr","class","champion-slot-tile"],["dynamic-attr","src",["unknown",["skinTilePath"]],null],["flush-element"],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i,
          s = n(1),
          o = (i = n(349)) && i.__esModule ? i : { default: i };
        n(350);
        e.exports = s.Ember.Component.extend({
          layout: n(351),
          classNames: ["quick-play-champion-grid-component"],
          playerSlots: [],
          init: function () {
            this._super(...arguments);
            const e = this.get("gridCellWidth") || 96,
              t = this.get("gridCellHeight") || 125,
              n = this.get("gridEstimatedWidth") || 570,
              i = this.get("gridEstimatedHeight") || 400;
            this.set("gridChampionLayout", new o.default(e, t)),
              this.set("gridEstimatedClientWidth", n),
              this.set("gridEstimatedClientHeight", i);
          },
          actions: {
            handleItemClick(e) {
              this.sendAction("handleItemClick", e);
            },
          },
        });
      },
      (e, t, n) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.default = void 0);
        const i =
          n(1).SharedEmberComponents.EmberCollectionApi.Layouts.GridLayout;
        t.default = class extends i {
          constructor(e, t) {
            super(e, t),
              (this._csCellWidth = e),
              (this._csCellHeight = t),
              (this._animationEnabled = !1);
          }
          widthAt(e) {
            return this._csCellWidth;
          }
          heightAt(e) {
            return this._csCellHeight;
          }
        };
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "fCyvM/lN",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-champion-grid\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-champion-grid\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-champion-grid\\\\index.js\\" "],["text","\\n"],["block",["ember-collection"],null,[["class","estimated-width","estimated-height","scroll-top","items","cell-layout"],["quick-play-champions-container",["get",["gridEstimatedClientWidth"]],["get",["gridEstimatedClientHeight"]],["get",["gridScrollTop"]],["get",["items"]],["get",["gridChampionLayout"]]]],0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["append",["helper",["component"],[["get",["itemRendererComponentName"]]],[["handleItemClick","data","playerSlots"],["handleItemClick",["get",["item"]],["get",["playerSlots"]]]]],false],["text","\\n"]],"locals":["item","index"]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        n(353);
        var s = n(95);
        e.exports = i.Ember.Component.extend({
          layout: n(354),
          classNames: ["quick-play-grid-champion-component"],
          classNameBindings: [
            "isChampionSelected:selected",
            "isChampionPrimary:primary",
            "isChampionSecondary:secondary",
            "champion.disabled:disabled",
          ],
          playerSlots: [],
          champion: i.Ember.computed.alias("data"),
          isChampionSelected: !1,
          isChampionPrimary: !1,
          isChampionSecondary: !1,
          init() {
            this._super(...arguments), this.initChampionGridSelections();
          },
          didUpdateAttrs() {
            this._super(...arguments), this.initChampionGridSelections();
          },
          initChampionGridSelections() {
            const e = this.get("playerSlots");
            if (!Boolean(e.length)) return;
            const t = this.get("champion.id"),
              n = e.find((e) => e.isSelected),
              i = e.find((e) => e.isPrimary),
              s = e.find((e) => !e.isPrimary);
            this.set("isChampionSelected", !!n && n.championId === t),
              this.set("isChampionPrimary", i.championId === t),
              this.set("isChampionSecondary", s.championId === t);
          },
          playSound: function (e) {
            return i.Audio.getChannel(s.SFX_CHANNEL).playSound(e);
          },
          actions: {
            handleClick: function (e) {
              this.get("champion.disabled") ||
                (this.playSound(
                  "/fe/lol-static-assets/sounds/sfx-uikit-grid-click.ogg",
                ),
                this.get("handleItemClick") &&
                  this.sendAction("handleItemClick", e));
            },
            handleMouseOver: function () {
              this.get("champion.disabled") ||
                this.playSound(
                  "/fe/lol-static-assets/sounds/sfx-uikit-grid-hover.ogg",
                );
            },
          },
        });
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "JT9g4/0s",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-grid-champion\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-grid-champion\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-grid-champion\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","quick-play-grid-champion-champion-container"],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"handleClick",["get",["champion","id"]]],null],null],["flush-element"],["text","\\n"],["block",["if"],[["get",["champion","disabled"]]],null,1],["text","  "],["open-element","div",[]],["static-attr","class","quick-play-grid-champion-frame"],["flush-element"],["text","\\n    "],["append",["helper",["quick-play-champion-square"],null,[["championId"],[["get",["champion","id"]]]]],false],["text","\\n  "],["close-element"],["text","\\n  "],["open-element","div",[]],["dynamic-attr","class",["concat",["quick-play-grid-champion-overlay ",["unknown",["champion","selectedPosition"]]]]],["flush-element"],["close-element"],["text","\\n  "],["open-element","div",[]],["dynamic-attr","class",["concat",["quick-play-grid-champion-inventory-flag ",["unknown",["champion","ownershipType"]]]]],["flush-element"],["close-element"],["text","\\n"],["close-element"],["text","\\n"],["open-element","lol-uikit-resizing-text-field",[]],["static-attr","class","quick-play-grid-champion-name"],["static-attr","data-max-width","100"],["flush-element"],["append",["unknown",["champion","name"]],false],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n        "],["open-element","p",[]],["flush-element"],["text","\\n          "],["append",["unknown",["tra","quick_play_champion_disabled"]],false],["text","\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["uikit-tooltip"],null,[["tooltipPosition","type"],["bottom","system"]],0]],"locals":[]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        n(356);
        var s = n(56);
        const { RunMixin: o } = i.EmberAddons.EmberLifeline,
          a = i.ChampionStatistics.getPlayRates(),
          r = [
            s.POSITIONS.TOP,
            s.POSITIONS.JUNGLE,
            s.POSITIONS.MIDDLE,
            s.POSITIONS.BOTTOM,
            s.POSITIONS.UTILITY,
          ],
          l = document.documentElement.lang,
          c = [{ field: "name", traKey: "quick_play_sort_by_name" }];
        e.exports = i.Ember.Component.extend(o, {
          layout: n(357),
          classNames: ["quick-play-champion-selector-component"],
          playerSlots: [],
          activeSort: null,
          didInsertElement() {
            this._super(...arguments),
              this.send("sort", this.get("sortOptions.0"));
          },
          lobbiesService: i.Ember.inject.service("lobbies"),
          scarcePositions: i.Ember.computed.alias(
            "lobbiesService.scarcePositions",
          ),
          championPositionFilters: i.Ember.computed(
            "playablePositions",
            "activeFilter.name",
            "scarcePositions",
            function () {
              const e = this.get("scarcePositions"),
                t = this.get("activeFilter.name");
              return (this.get("playablePositions") || r).map((n) => {
                const i =
                  n === s.POSITIONS.UTILITY
                    ? s.CHAMP_STATS_POSITION_UTILITY
                    : n;
                return {
                  name: n,
                  iconPath: `/fe/lol-parties/icon-position-${n.toLowerCase()}.png`,
                  isSelected: t === n,
                  matches: (e) => a[i].hasOwnProperty(e.id),
                  scarce: e.includes(n),
                };
              });
            },
          ),
          sortOptions: i.Ember.computed("tra", function () {
            return c.map((e) =>
              i.Ember.Object.create(
                Object.assign(
                  { displayName: this.get("tra").get(e.traKey), selected: !1 },
                  e,
                ),
              ),
            );
          }),
          sanitizedSearchText: i.Ember.computed(
            "searchInputValue",
            function () {
              return (this.get("searchInputValue") || "")
                .toLocaleLowerCase(l)
                .trim();
            },
          ),
          filterAndSortedChampions: i.Ember.computed(
            "champions",
            "activeFilter",
            "sanitizedSearchText",
            "activeSort",
            function () {
              const e = this.get("activeFilter"),
                t = this.get("activeSort");
              let n = this.get("champions");
              Boolean(e) && (n = n.filter(e.matches)),
                Boolean(t) && (n = n.sort((e, n) => e[t.field] - n[t.field]));
              const i = this.get("sanitizedSearchText") || "";
              return (
                i &&
                  (n = n.filter((e) =>
                    (e.searchMatchingTerms || "").includes(i),
                  )),
                n
              );
            },
          ),
          actions: {
            sort(e) {
              if (!e) return;
              const t = this.get("activeSort");
              t && t.set("selected", !1),
                e.set("selected", !0),
                this.set("activeSort", e);
            },
            handleInputChanged(e) {
              const t = e.target.value;
              this.set("searchInputValue", t);
            },
            handleChampionClicked(e) {
              this.sendAction("selectChampion", e);
            },
            handleFilterClick(e) {
              const t = this.get("activeFilter.name");
              e.name === t
                ? this.set("activeFilter", void 0)
                : this.set("activeFilter", e);
            },
          },
        });
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "0QFdtJWR",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-champion-selector\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-champion-selector\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-champion-selector\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","quick-play-champion-grid-header"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","quick-play-champion-grid-filters-container"],["flush-element"],["text","\\n"],["block",["each"],[["get",["championPositionFilters"]]],null,1],["text","  "],["close-element"],["text","\\n\\n  "],["open-element","div",[]],["static-attr","class","quick-play-sort-and-filter-container"],["flush-element"],["text","\\n    "],["open-element","lol-uikit-framed-dropdown",[]],["static-attr","class","quick-play-grid-sort-dropdown"],["flush-element"],["text","\\n"],["block",["each"],[["get",["sortOptions"]]],null,0],["text","    "],["close-element"],["text","\\n\\n    "],["open-element","lol-uikit-flat-input",[]],["static-attr","class","quick-play-champion-selector-filter-input"],["flush-element"],["text","\\n      "],["open-element","input",[]],["static-attr","type","search"],["static-attr","maxlength","50"],["dynamic-attr","placeholder",["unknown",["tra","quick_play_search"]],null],["dynamic-attr","oninput",["helper",["action"],[["get",[null]],"handleInputChanged"],null],null],["flush-element"],["close-element"],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"],["append",["helper",["quick-play-champion-grid"],null,[["itemRendererComponentName","items","playerSlots","handleItemClick"],["quick-play-grid-champion",["get",["filterAndSortedChampions"]],["get",["playerSlots"]],"handleChampionClicked"]]],false]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","        "],["open-element","lol-uikit-dropdown-option",[]],["static-attr","slot","lol-uikit-dropdown-option"],["dynamic-attr","selected",["unknown",["sort","selected"]],null],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"sort",["get",["sort"]]],null],null],["flush-element"],["text","\\n          "],["append",["unknown",["sort","displayName"]],false],["text","\\n        "],["close-element"],["text","\\n"]],"locals":["sort"]},{"statements":[["text","      "],["open-element","div",[]],["dynamic-attr","class",["concat",["quick-play-champion-grid-filter ",["helper",["if"],[["get",["filterData","isSelected"]],"selected"],null]," ",["helper",["if"],[["get",["filterData","scarce"]],"scarce"],null]]]],["flush-element"],["text","\\n        "],["append",["helper",["clickable-icon-button"],null,[["widthStyleOverride","heightStyleOverride","selected","handleClick","iconPath"],["24px","24px",["get",["filterData","isSelected"]],["helper",["action"],[["get",[null]],"handleFilterClick",["get",["filterData"]]],null],["get",["filterData","iconPath"]]]]],false],["text","\\n        "],["open-element","div",[]],["static-attr","class","quick-play-grid-filter-selected-underline"],["flush-element"],["close-element"],["text","\\n      "],["close-element"],["text","\\n"]],"locals":["filterData"]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        n(359);
        var s = n(360),
          o = n(340);
        e.exports = i.Ember.Component.extend({
          layout: n(361),
          classNames: ["quick-play-perks-selector-component"],
          matchmakingService: i.Ember.inject.service("matchmaking"),
          isPerkSelectionDisabled: i.Ember.computed(
            "matchmakingService.isNotSearching",
            function () {
              return !(this.get("matchmakingService.isNotSearching") || !1);
            },
          ),
          hidePerksModal(e) {
            return new Promise((e, t) => {
              (0, s.usePerksApi)((e) => e.hide()), e();
            }).then(() => {
              this.sendAction("setShowQuickPlayModal", !0, e);
            });
          },
          getRuneRecommenderContext(e) {
            const t = (this.get("playerSlots") || [])[e];
            return t
              ? {
                  champId: t.championId,
                  position: t.positionPreference,
                  mapId: 11,
                  spellIds: [t.spell1, t.spell2],
                  setRecommendedPage: (t, n) =>
                    this._setRecommendedPage(t, n, e),
                  setPerksPage: (t) => this._setPerksPage(t, e),
                }
              : {};
          },
          _setPerksPage(e, t) {
            return this.get("setPerksPage")(e, t).catch((n) => {
              i.logger.error(
                `Error setting Quickplay perks page: ${JSON.stringify(e)} for slot: ${t}. ${n}`,
              );
            });
          },
          _setRecommendedPage(e, t, n) {
            const i = (0, o.copyArrayOfObjects)(this.get("playerSlots") || []);
            t && 2 === t.length && ((i[n].spell1 = t[0]), (i[n].spell2 = t[1]));
            const s = JSON.stringify(e);
            return (i[n].perks = s), this.get("setQuickPlaySlots")(i);
          },
          actions: {
            showPerksModal() {
              const e = this.get("selectingSlotIndex"),
                t = this.getRuneRecommenderContext(e),
                n = this.get("selectingPerksPage.id");
              return new Promise((t, n) => {
                this.sendAction("setShowQuickPlayModal", !1, e), t();
              }).then(() => {
                (0, s.usePerksApi)((i) =>
                  i.edit(n, !0, () => this.hidePerksModal(e), t),
                );
              });
            },
            showRuneRecommenderModal() {
              const e = this.get("selectingSlotIndex"),
                t = this.getRuneRecommenderContext(e);
              return new Promise((t, n) => {
                this.sendAction("setShowQuickPlayModal", !1, e), t();
              }).then(() => {
                (0, s.usePerksApi)((n) =>
                  n.runeRecommender(!0, () => this.hidePerksModal(e), t),
                );
              });
            },
            selectPerksPage(e, t) {
              this.sendAction("setPerksPage", e, t);
            },
          },
        });
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.usePerksApi = function (e) {
            return i.default
              .getProvider()
              .getOptional("rcp-fe-lol-collections")
              .then(
                (t) => e(t.perksApi()),
                (e) => i.logger.error("Provider getOptional failure", e),
              );
          });
        var i = (function (e, t) {
          if (!t && e && e.__esModule) return e;
          if (null === e || ("object" != typeof e && "function" != typeof e))
            return { default: e };
          var n = s(t);
          if (n && n.has(e)) return n.get(e);
          var i = {},
            o = Object.defineProperty && Object.getOwnPropertyDescriptor;
          for (var a in e)
            if ("default" !== a && Object.prototype.hasOwnProperty.call(e, a)) {
              var r = o ? Object.getOwnPropertyDescriptor(e, a) : null;
              r && (r.get || r.set)
                ? Object.defineProperty(i, a, r)
                : (i[a] = e[a]);
            }
          (i.default = e), n && n.set(e, i);
          return i;
        })(n(1));
        function s(e) {
          if ("function" != typeof WeakMap) return null;
          var t = new WeakMap(),
            n = new WeakMap();
          return (s = function (e) {
            return e ? n : t;
          })(e);
        }
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "D6MEVQ6Z",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-perks-selector\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-perks-selector\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-perks-selector\\\\index.js\\" "],["text","\\n"],["append",["helper",["framed-icon-button"],null,[["disabled","disabledTooltipText","iconPath","clickSfxPath","hoverSfxPath","onButtonClick"],[["get",["isPerkSelectionDisabled"]],["get",["disabledTooltipText"]],"/fe/lol-champ-select/images/perks/rune-recommender-icon.png","/fe/lol-champ-select/sounds/sfx-uikit-edit-click.ogg","/fe/lol-champ-select/sounds/sfx-uikit-grid-hover.ogg",["helper",["action"],[["get",[null]],"showRuneRecommenderModal"],null]]]],false],["text","\\n\\n"],["append",["helper",["framed-icon-button"],null,[["disabled","iconPath","clickSfxPath","hoverSfxPath","onButtonClick"],[["get",["isPerkSelectionDisabled"]],"/fe/lol-champ-select/images/config/edit-perks-button.png","/fe/lol-champ-select/sounds/sfx-uikit-edit-click.ogg","/fe/lol-champ-select/sounds/sfx-uikit-grid-hover.ogg",["helper",["action"],[["get",[null]],"showPerksModal"],null]]]],false],["text","\\n\\n"],["append",["helper",["quick-play-perks-page-dropdown"],null,[["perksPages","selectingPerksPage","playerSlots","selectingSlotIndex","handleDropdownOptionSelected"],[["get",["perksPages"]],["get",["selectingPerksPage"]],["get",["playerSlots"]],["get",["selectingSlotIndex"]],"selectPerksPage"]]],false],["text","\\n "]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        n(363);
        e.exports = i.Ember.Component.extend({
          layout: n(364),
          classNames: ["quick-play-perks-page-dropdown-component"],
          tooltipConfig: {
            targetAnchor: { x: "right", y: "center" },
            tooltipAnchor: { x: "left", y: "center" },
            showDelay: 175,
          },
          matchmakingService: i.Ember.inject.service("matchmaking"),
          disabled: i.Ember.computed(
            "matchmakingService.isNotSearching",
            function () {
              return !(this.get("matchmakingService.isNotSearching") || !1);
            },
          ),
          actions: {
            selectPerksPage(e, t) {
              this.sendAction("handleDropdownOptionSelected", e, t);
            },
          },
        });
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "Ro5G6SPO",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-perks-page-dropdown\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-perks-page-dropdown\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-perks-page-dropdown\\\\index.js\\" "],["text","\\n"],["open-element","lol-uikit-framed-dropdown",[]],["static-attr","stylablecontent",""],["static-attr","direction","upward"],["dynamic-attr","disabled",["unknown",["disabled"]],null],["static-attr","class","quick-play-perks-page-dropdown"],["flush-element"],["text","\\n"],["block",["each"],[["get",["perksPages"]]],[["key"],["id"]],2],["close-element"],["text","\\n"],["block",["if"],[["get",["selectingPerksPage"]]],null,1]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["append",["helper",["perk-page-tooltip"],null,[["page"],[["get",["selectingPerksPage"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["block",["uikit-tooltip"],null,[["tooltipConfig"],[["get",["tooltipConfig"]]]],0]],"locals":[]},{"statements":[["text","    "],["open-element","lol-uikit-dropdown-option",[]],["static-attr","slot","lol-uikit-dropdown-option"],["dynamic-attr","selected",["helper",["eq"],[["get",["page","id"]],["get",["selectingPerksPage","id"]]],null],null],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"selectPerksPage",["get",["page"]],["get",["selectingSlotIndex"]]],null],null],["flush-element"],["text","\\n      "],["append",["helper",["quick-play-perks-page-dropdown-option"],null,[["tooltipConfig","page"],[["get",["tooltipConfig"]],["get",["page"]]]]],false],["text","\\n    "],["close-element"],["text","\\n"]],"locals":["page"]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        n(366),
          (e.exports = i.Ember.Component.extend({
            layout: n(367),
            classNames: ["quick-play-perks-page-dropdown-option-component"],
            iconClassName: i.Ember.computed(
              "page.isValid",
              "page.isTemporary",
              "page.autoModifiedSelections.length",
              function () {
                return this.get("page.isValid")
                  ? this.get("page.isTemporary")
                    ? "recommended-page"
                    : this.get("page.autoModifiedSelections.length")
                      ? "modified"
                      : "removed"
                  : "invalid";
              },
            ),
          }));
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "9R+TZeX3",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-perks-page-dropdown-option\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-perks-page-dropdown-option\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-perks-page-dropdown-option\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","perks-page-dropdown-option-content"],["flush-element"],["text","\\n  "],["open-element","div",[]],["dynamic-attr","class",["concat",["perks-page-dropdown-option-icon ",["unknown",["iconClassName"]]]]],["flush-element"],["text","\\n    "],["open-element","lol-perks-glowing-dot",[]],["static-attr","class","perks-page-dropdown-option-dot"],["flush-element"],["close-element"],["text","\\n  "],["close-element"],["text","\\n\\n  "],["open-element","div",[]],["static-attr","class","perks-page-name"],["flush-element"],["text","\\n    "],["append",["unknown",["page","name"]],false],["text","\\n  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipConfig"],[["get",["tooltipConfig"]]]],0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["append",["helper",["perk-page-tooltip"],null,[["page"],[["get",["page"]]]]],false],["text","\\n"]],"locals":[]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1),
          s = n(216);
        n(369);
        const { RunMixin: o } = i.EmberAddons.EmberLifeline,
          a = "skinsViewer",
          r = "quest-skin";
        e.exports = i.Ember.Component.extend(o, {
          layout: n(370),
          classNames: ["quick-play-skin-carousel-component"],
          selectingSkinIndex: 0,
          selectedSkin: null,
          selectedChroma: null,
          selectedForm: null,
          skins: [],
          carouselOffset: 0,
          initialOffset: 5,
          thumbnailWidth: 100,
          selectedThumbnailWidth: 128,
          thumbnailAnimationCacheSize: 1,
          maxThumbnailsVisible: 5,
          didUpdateAttrs() {
            this._super(...arguments);
            const e = this.get("selectedSkin.id"),
              t = this.get("selectedChroma.id"),
              n = this.get("selectedForm.id");
            if (e !== this._prevSelectedSkinId) {
              const i = this.get("skins").indexOf(this.get("selectedSkin"));
              this.set("selectingSkinIndex", i),
                (this._prevSelectedSkinId = e),
                t !== this._prevSelectedChromaId
                  ? ((this._prevSelectedChromaId = t),
                    this._setCarouselOffset(i))
                  : n !== this._prevSelectedFormId
                    ? ((this._prevSelectedFormId = n),
                      this._setCarouselOffset(i))
                    : this._switchSkin(i);
            }
          },
          showArrows: i.Ember.computed(
            "skins.length",
            "maxThumbnailsVisible",
            function () {
              return (
                this.get("skins.length") > this.get("maxThumbnailsVisible")
              );
            },
          ),
          carouselWidth: i.Ember.computed(
            "skins.length",
            "maxThumbnailsVisible",
            function () {
              const e = this.get("skins.length"),
                t = this.get("maxThumbnailsVisible");
              return e > t
                ? this.get("thumbnailWidth") * (t + 1) +
                    this.get("selectedThumbnailWidth")
                : this.get("selectedThumbnailWidth") +
                    (e - 1) * this.get("thumbnailWidth");
            },
          ),
          _getSkinPurchaseCallback(e, t) {
            if (t) {
              const t = (this.get("selectedSkin").chromas || []).find(
                (t) => t.id === e,
              );
              if (!Boolean(t)) return;
              i.Ember.set(t, "ownership.owned", !0),
                i.Ember.set(t, "unlocked", !0);
            } else {
              const t = this.get("skins").find((t) => t.id === e);
              if (!Boolean(t)) return;
              i.Ember.set(t, "ownership.owned", !0),
                i.Ember.set(t, "unlocked", !0);
            }
            this.sendAction("setSkin", e);
          },
          _createTemplatePaw(e) {
            const t = {
                templateType: s.PAW.TEMPLATE_TYPES.LARGE_TWO_COLUMN_LANDSCAPE,
              },
              n = () =>
                this._getSkinPurchaseCallback(e && (e.itemId || e.id), !1);
            return i.pawApi
              .createPawTemplateModalAsync(e.offerId, t, a)
              .then(() => {
                i.pawApi.getBaseSkinLineData(e.offerId).then((e) => {
                  (e.onPurchaseComplete = n),
                    i.pawApi.populatePawTemplateModal(e);
                });
              });
          },
          _openPawModal(e) {
            const {
              item: t,
              inventoryType: n,
              modalType: o,
              ownerElement: l,
            } = e;
            let c = !1;
            const m = o === s.PAW.MODAL_TYPES.CHROMA_MODAL,
              u = () =>
                this._getSkinPurchaseCallback(t && (t.itemId || t.id), m);
            (c =
              t.tags && t.tags.includes(r)
                ? this._createTemplatePaw(t)
                : i.pawApi.createPAWModal(
                    { itemId: t.itemId || t.id, inventoryType: n },
                    a,
                    o,
                    l,
                    u,
                  )),
              c && this.set("pawModalOpening", !0);
          },
          _setCarouselOffset(e) {
            if (this.get("showArrows")) {
              const t =
                this.get("initialOffset") +
                this.get("thumbnailWidth") -
                this.get("thumbnailWidth") * (e - 1);
              this.set("carouselOffset", t);
            } else this.set("carouselOffset", 0);
          },
          _switchSkin(e) {
            this._setCarouselOffset(e);
            const t = this.get("skins");
            if ((this.set("selectingSkinIndex", e), Boolean(t[e]))) {
              const n = t[e].id;
              this.sendAction("setSkin", n);
            }
          },
          _onSkinThumbnailClick(e) {
            const t = this.get("selectingSkinIndex"),
              n =
                e - t <= 0
                  ? "/fe/lol-collections/audio/sfx-collection-browse-left-click.ogg"
                  : "/fe/lol-collections/audio/sfx-collection-browse-right-click.ogg";
            this._switchSkin(e),
              t !== e && i.Audio.getChannel("sfx-ui").playSound(n);
          },
          _onChildSkinSelect(e, t) {
            e && this.sendAction("setSkin", e.id, t);
          },
          actions: {
            moveSkinSelection(e) {
              let t = this.get("selectingSkinIndex");
              const n = this.get("skins");
              (t =
                -1 === e ? Math.max(0, t - 1) : Math.min(n.length - 1, t + 1)),
                this._switchSkin(t);
            },
            showSkinPurchaseModal(e) {
              this._openPawModal(e);
            },
            skinThumbnailClicked(e) {
              this._onSkinThumbnailClick(e);
            },
            setChildSkin(e) {
              this._onChildSkinSelect(e, !0);
            },
          },
        });
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "PCCvma9B",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-skin-carousel\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-skin-carousel\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-skin-carousel\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","quick-play-skin-carousel"],["flush-element"],["text","\\n"],["block",["if"],[["get",["showArrows"]]],null,7],["text","\\n  "],["open-element","div",[]],["static-attr","class","carousel-track-container"],["dynamic-attr","style",["concat",["width:",["unknown",["carouselWidth"]],"px"]]],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","carousel-track"],["dynamic-attr","style",["concat",["transform: translateX(",["unknown",["carouselOffset"]],"px)"]]],["flush-element"],["text","\\n"],["block",["each"],[["get",["skins"]]],[["key"],["id"]],6],["text","    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n\\n"],["block",["if"],[["get",["showArrows"]]],null,1],["close-element"],["text","\\n\\n"],["open-element","div",[]],["static-attr","class","quick-play-skin-selection-indicator"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","line line-left"],["flush-element"],["close-element"],["text","\\n  "],["open-element","ul",[]],["static-attr","class","skin-selection-indicator-list"],["flush-element"],["text","\\n"],["block",["each"],[["get",["skins"]]],null,0],["text","  "],["close-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","line line-right"],["flush-element"],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["open-element","li",[]],["dynamic-attr","class",["concat",["skin-pip ",["helper",["if"],[["helper",["eq"],[["get",["selectingSkinIndex"]],["get",["index"]]],null],"skin-pip-selected"],null]]]],["dynamic-attr","onClick",["helper",["action"],[["get",[null]],"skinThumbnailClicked",["get",["index"]]],null],null],["flush-element"],["close-element"],["text","\\n"]],"locals":["skin","index"]},{"statements":[["text","    "],["open-element","lol-uikit-arrow-button",[]],["static-attr","direction","right"],["static-attr","class","next-button"],["dynamic-attr","onClick",["helper",["action"],[["get",[null]],"moveSkinSelection",1],null],null],["static-attr","click-sfx-src","/fe/lol-collections/audio/sfx-collection-browse-right-click.ogg"],["flush-element"],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","              "],["append",["helper",["skin-quest-form-modal"],null,[["baseSkin","questForms","selectedForm","skinIsOwned","enabled","setSkin","openPawModal"],[["get",["skin"]],["get",["skin","questSkinInfo","tiers"]],["get",["selectedForm"]],["get",["skin","unlocked"]],["helper",["eq"],[["get",["index"]],["get",["selectingSkinIndex"]]],null],"setChildSkin",["helper",["action"],[["get",[null]],"showSkinPurchaseModal"],null]]]],false],["text","\\n              "],["append",["helper",["skin-chroma-modal"],null,[["baseSkin","chromas","selectedChroma","skinIsOwned","enabled","setSkin","openPawModal"],[["get",["skin"]],["get",["skin","chromas"]],["get",["selectedChroma"]],["get",["skin","unlocked"]],["helper",["eq"],[["get",["index"]],["get",["selectingSkinIndex"]]],null],"setChildSkin",["helper",["action"],[["get",[null]],"showSkinPurchaseModal"],null]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","            "],["open-element","div",[]],["static-attr","class","gem-overlay"],["flush-element"],["text","\\n              "],["open-element","img",[]],["dynamic-attr","src",["concat",[["unknown",["skin","rarityGemPath"]]]]],["flush-element"],["close-element"],["text","\\n            "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","            "],["open-element","div",[]],["static-attr","class","skin-thumbnail-img"],["dynamic-attr","style",["concat",["background-image:url(",["helper",["if"],[["get",["skin","questSkinInfo","tilePath"]],["get",["skin","questSkinInfo","tilePath"]],["get",["skin","tilePath"]]],null],")"]]],["dynamic-attr","onClick",["helper",["action"],[["get",[null]],"skinThumbnailClicked",["get",["index"]]],null],null],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","            "],["open-element","div",[]],["static-attr","class","skin-thumbnail-img"],["dynamic-attr","style",["concat",["background-image:url(",["helper",["if"],[["get",["skin","questSkinInfo","tilePath"]],["get",["selectedForm","tilePath"]],["get",["skin","tilePath"]]],null],")"]]],["dynamic-attr","onClick",["helper",["action"],[["get",[null]],"skinThumbnailClicked",["get",["index"]]],null],null],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","div",[]],["dynamic-attr","class",["concat",["thumbnail-wrapper\\n          ",["helper",["if"],[["get",["skin","purchaseEnabled"]],"purchase-available"],null],"\\n          ",["helper",["if"],[["helper",["eq"],[["get",["index"]],["get",["selectingSkinIndex"]]],null],"active-skin"],null],"\\n          ",["helper",["unless"],[["get",["skin","unlocked"]],"unowned"],null],"\\n          ",["helper",["if"],[["get",["skin","ownership","loyaltyReward"]],"loyalty-reward"],null],"\\n          ",["helper",["if"],[["get",["skin","ownership","rental","rented"]],"rental"],null]]]],["flush-element"],["text","\\n          "],["open-element","div",[]],["dynamic-attr","class",["concat",["skin-purchase-button-container ",["helper",["if"],[["helper",["eq"],[["get",["index"]],["get",["selectingSkinIndex"]]],null],"visible"],null]]]],["flush-element"],["text","\\n            "],["append",["helper",["skin-purchase-button"],null,[["skin","openPawModal"],[["get",["skin"]],["helper",["action"],[["get",[null]],"showSkinPurchaseModal"],null]]]],false],["text","\\n          "],["close-element"],["text","\\n"],["block",["if"],[["helper",["eq"],[["get",["index"]],["get",["selectingSkinIndex"]]],null]],null,5,4],["block",["if"],[["get",["skin","rarityGemPath"]]],null,3],["text","\\n          "],["open-element","div",[]],["static-attr","class","related"],["flush-element"],["text","\\n"],["block",["if"],[["get",["skin","unlocked"]]],null,2],["text","          "],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":["skin","index"]},{"statements":[["text","    "],["open-element","lol-uikit-arrow-button",[]],["static-attr","direction","left"],["static-attr","class","prev-button"],["dynamic-attr","onClick",["helper",["action"],[["get",[null]],"moveSkinSelection",-1],null],null],["static-attr","click-sfx-src","/fe/lol-collections/audio/sfx-collection-browse-left-click.ogg"],["flush-element"],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        n(372),
          (e.exports = i.Ember.Component.extend({
            layout: n(373),
            classNames: ["quick-play-skin-select-component"],
            selectingSlot: {},
            skins: [],
            viewSkin: null,
            viewChroma: null,
            viewForm: null,
            savedSkinSelections: new Map(),
            isChromaModalSelection: !1,
            inventoryService: i.Ember.inject.service("inventory"),
            shouldShowVideoForSkin: i.Ember.computed.and(
              "animationsEnabled",
              "currentSkinSplashVideoPath",
            ),
            hasQuestForms: i.Ember.computed.bool(
              "viewSkin.questSkinInfo.tiers.length",
            ),
            animationsEnabled: i.Ember.computed.alias(
              "uxSettings.largeAreaAnimationsEnabled",
            ),
            displayedSkin: i.Ember.computed(
              "viewChroma",
              "viewSkin",
              "viewForm",
              function () {
                const e = this.get("viewChroma"),
                  t = this.get("viewSkin");
                return this.get("viewForm") || e || t || null;
              },
            ),
            currentSkinSplashVideoPath: i.Ember.computed(
              "viewSkin.splashVideoPath",
              "viewSkin.skinSplashVideoOverride",
              "viewForm.splashVideoPath",
              "hasQuestForms",
              function () {
                const e = this.get("viewSkin.splashVideoPath"),
                  t = this.get("hasQuestForms"),
                  n = this.get("viewSkin.skinSplashVideoOverride");
                return (
                  n ||
                  (t && Boolean(this.get("viewForm"))
                    ? this.get("viewForm.splashVideoPath") || null
                    : e)
                );
              },
            ),
            skinSplashPath: i.Ember.computed(
              "viewSkin",
              "viewSkin.splashPath",
              "viewSkin.skinSplashOverride",
              "currentSkinSplashVideoPath",
              "shouldShowVideoForSkin",
              "hasQuestForms",
              "viewForm",
              "viewForm.splashPath",
              function () {
                if (this.get("shouldShowVideoForSkin"))
                  return this.get("currentSkinSplashVideoPath");
                {
                  const e = this.get("viewSkin.skinSplashOverride");
                  return (
                    e ||
                    (this.get("hasQuestForms") && Boolean(this.get("viewForm"))
                      ? this.get("viewForm.splashPath") || null
                      : this.get("viewSkin.splashPath"))
                  );
                }
              },
            ),
            ownedSkinAugments: i.Ember.computed(
              "inventoryService.ownedSkinAugments",
              "viewSkin",
              function () {
                const e = this.get("inventoryService.ownedSkinAugments"),
                  t = this.get("viewSkin.skinAugments") || [];
                return t?.augments
                  ?.filter((t) => e[t.contentId])
                  ?.map((e) => e.overlays?.[0]?.centeredLCOverlayPath);
              },
            ),
            init() {
              this._super(...arguments),
                (this._uxSettingsListener =
                  this._uxSettingsObserver.bind(this)),
                i.UXSettings.addObserver(this._uxSettingsListener);
            },
            didInsertElement() {
              this._initSkin();
            },
            willDestroy() {
              this._super(...arguments),
                i.UXSettings.removeObserver(this._uxSettingsListener);
            },
            didUpdateAttrs() {
              this._super(...arguments), this._initSkin();
            },
            _initSkin() {
              const e = this.get("selectingSlot.skinId"),
                t = this.get("displayedSkin"),
                n = this.get("selectingSlot.championId");
              ((0 !== e &&
                (!Boolean(t) || (Boolean(t) && t.championId !== n))) ||
                n !== this._currentSlotChampId) &&
                (this._getSelectedSkin(e), (this._currentSlotChampId = n));
            },
            _uxSettingsObserver(e) {
              this.set("uxSettings", e);
            },
            _getSelectedSkin(e) {
              const t = this.get("skins");
              for (const n of t) {
                if (!n) return;
                if (n.isTieredSkin)
                  return (
                    this.set("viewSkin", n),
                    this.set("viewChroma", n),
                    this.set("viewForm", n),
                    n
                  );
                const t = (n.questSkinInfo.tiers || []).find((t) => t.id === e);
                if (t && t.id)
                  return (
                    this.set("viewSkin", n),
                    this.set("viewChroma", n),
                    this.set("viewForm", t),
                    this._updateSavedSkinSelectionList(t, n),
                    t
                  );
                if (n.id === e) {
                  this.set("viewSkin", n),
                    this.get("isChromaModalSelection") &&
                      (this._updateSavedSkinSelectionList(n, n),
                      this.set("isChromaModalSelection", !1));
                  const e = this._getSavedSkinSelection(n);
                  return (
                    this.set("viewChroma", e), this.set("viewForm", null), n
                  );
                }
                const i = (n.chromas || []).find((t) => t.id === e);
                if (i && i.id)
                  return (
                    this.set("viewSkin", n),
                    this.set("viewChroma", i),
                    this.set("viewForm", null),
                    this._updateSavedSkinSelectionList(i, n),
                    i
                  );
              }
            },
            _getSavedSkinSelection(e) {
              if (!Boolean(e)) return;
              const t = this.get("savedSkinSelections").get(e.id),
                n = (e.chromas || []).find((e) => e.id === t);
              return Boolean(n) ? n : e;
            },
            _updateSavedSkinSelectionList(e, t) {
              if (!Boolean(e) && !Boolean(t)) return;
              const n = this.get("savedSkinSelections").set(t.id, e.id);
              return this.set("savedSkinSelections", n);
            },
            _setSkin(e) {
              const t = this._getSelectedSkin(e);
              Boolean(t) && t.unlocked && this.sendAction("setSkin", e);
            },
            actions: {
              setSkin(e, t) {
                this.set("isChromaModalSelection", t), this._setSkin(e);
              },
            },
          }));
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "Ngu2usGC",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-skin-select\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-skin-select\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-skin-select\\\\index.js\\" "],["text","\\n\\n"],["append",["helper",["uikit-background-switcher"],null,[["src","overlays"],[["get",["skinSplashPath"]],["get",["ownedSkinAugments"]]]]],false],["text","\\n"],["open-element","lol-uikit-section-controller",[]],["static-attr","animation","crossfade"],["static-attr","selected-item","showcase-view"],["static-attr","class","section-controller"],["flush-element"],["text","\\n  "],["open-element","lol-uikit-section",[]],["static-attr","section-id","showcase-view"],["static-attr","class","showcase-section"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","background-shader"],["flush-element"],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","showcase-wrapper"],["flush-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","top-part"],["flush-element"],["text","\\n      "],["close-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","bottom-part"],["flush-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","skin-title"],["flush-element"],["text","\\n"],["block",["if"],[["get",["viewSkin","rarity","gemIcon"]]],null,2],["text","          "],["open-element","div",[]],["static-attr","class","skin-name"],["flush-element"],["append",["unknown",["viewSkin","name"]],false],["close-element"],["text","\\n        "],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","quick-play-skin-carousel-visibility-wrapper"],["flush-element"],["text","\\n          "],["append",["helper",["quick-play-skin-carousel"],null,[["selectedSkin","selectedChroma","selectedForm","skins","setSkin"],[["get",["viewSkin"]],["get",["viewChroma"]],["get",["viewForm"]],["get",["skins"]],"setSkin"]]],false],["text","\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n\\n  "],["open-element","lol-uikit-section",[]],["static-attr","section-id","splash-view"],["static-attr","class","splash-view-section"],["flush-element"],["text","\\n  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"],["block",["if"],[["get",["viewSkin","emblems"]]],null,1]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["open-element","img",[]],["dynamic-attr","src",["concat",[["unknown",["emblem","emblemPath","large"]]]]],["flush-element"],["close-element"],["text","\\n"]],"locals":["emblem"]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","emblem-overlay"],["flush-element"],["text","\\n"],["block",["each"],[["get",["viewSkin","emblems"]]],null,0],["text","  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","            "],["open-element","div",[]],["static-attr","class","tier-icon"],["flush-element"],["text","\\n              "],["open-element","img",[]],["dynamic-attr","src",["concat",[["unknown",["viewSkin","rarity","gemIcon"]]]]],["flush-element"],["close-element"],["text","\\n            "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        n(375),
          (e.exports = i.Ember.Component.extend({
            layout: n(376),
            classNames: ["quick-play-summoner-spell-popup-component"],
            contextSpellLockedDescription: i.Ember.computed(
              "contextSpell.isEligibleToUseSpell",
              "contextSpell.isSpellDisabledForMode",
              "tra.quick_play_spell_modal_spell_requires_level",
              "tra.quick_play_spell_modal_spell_disabled",
              function () {
                const e = this.get("contextSpell.isEligibleToUseSpell"),
                  t = this.get("contextSpell.isSpellDisabledForMode");
                return e
                  ? t
                    ? this.get("tra.quick_play_spell_modal_spell_disabled")
                    : ""
                  : this.get("tra").formatString(
                      "quick_play_spell_modal_spell_requires_level",
                      { level: this.get("contextSpell.summonerLevel") },
                    );
              },
            ),
            contextSpellCooldownDescription: i.Ember.computed(
              "contextSpell.cooldown",
              "tra.quick_play_spell_modal_spell_cooldown",
              function () {
                const e = this.get("contextSpell.cooldown");
                if (e)
                  return this.get("tra").formatString(
                    "quick_play_spell_modal_spell_cooldown",
                    { cooldown: e },
                  );
              },
            ),
            contextSpell: i.Ember.computed(
              "hoveredSpell",
              "changingSpell",
              function () {
                const e = this.get("hoveredSpell"),
                  t = this.get("changingSpell");
                return e || t;
              },
            ),
            actions: {
              onFlyoutSpellHover(e) {
                this.set("hoveredSpell", e);
              },
              onSummonerSpellClicked(e) {
                this.sendAction("handleSpellSelected", e);
              },
            },
          }));
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "HB2cwyK6",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-summoner-spell-popup\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-summoner-spell-popup\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-summoner-spell-popup\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","spell-information"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","spell-title"],["flush-element"],["text","\\n    "],["append",["unknown",["contextSpell","name"]],false],["text","\\n  "],["close-element"],["text","\\n"],["block",["if"],[["get",["contextSpell","isDisabled"]]],null,1],["text","  "],["open-element","div",[]],["static-attr","class","spell-description"],["flush-element"],["text","\\n    "],["append",["unknown",["contextSpell","description"]],false],["text","\\n  "],["close-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","spell-cooldown"],["flush-element"],["text","\\n    "],["append",["unknown",["contextSpellCooldownDescription"]],false],["text","\\n  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"],["open-element","div",[]],["static-attr","class","spell-divider"],["flush-element"],["close-element"],["text","\\n"],["open-element","lol-uikit-scrollable",[]],["static-attr","class","summoner-spells"],["flush-element"],["text","\\n"],["block",["each"],[["get",["spells"]]],null,0],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","summoner-spell-container"],["flush-element"],["text","\\n      "],["append",["helper",["quick-play-summoner-spell-renderer"],null,[["isDisabled","spell","onRendererMouseOver","onRendererClicked"],[["get",["spell","isDisabled"]],["get",["spell"]],"onFlyoutSpellHover",["helper",["action"],[["get",[null]],"onSummonerSpellClicked",["get",["spell"]]],null]]]],false],["text","\\n      "],["open-element","div",[]],["dynamic-attr","class",["concat",["quick-play-summoner-spell-selected-border-overlay ",["helper",["if"],[["helper",["eq"],[["get",["spell","id"]],["get",["changingSpell","id"]]],null],"","hidden"],null]]]],["flush-element"],["close-element"],["text","\\n    "],["close-element"],["text","\\n"]],"locals":["spell"]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","spell-locked-description"],["flush-element"],["text","\\n    "],["append",["unknown",["contextSpellLockedDescription"]],false],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        n(378),
          (e.exports = i.Ember.Component.extend({
            layout: n(379),
            classNames: ["quick-play-summoner-spell-renderer-component"],
            classNameBindings: ["isDisabled:is-disabled"],
            actions: {
              handleSummonerSpellMouseOver(e) {
                this.sendAction("onRendererMouseOver", e);
              },
              handleSummonerSpellClick() {
                this.get("isDisabled") || this.onRendererClicked();
              },
            },
          }));
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "kpOzmcLn",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-summoner-spell-renderer\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-summoner-spell-renderer\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-summoner-spell-renderer\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","summoner-spell-renderer-frame"],["dynamic-attr","onmouseover",["helper",["action"],[["get",[null]],"handleSummonerSpellMouseOver",["get",["spell"]]],null],null],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"handleSummonerSpellClick",["get",["spell"]]],null],null],["flush-element"],["text","\\n  "],["open-element","img",[]],["static-attr","class","summoner-spell-renderer-icon"],["dynamic-attr","src",["unknown",["spell","iconPath"]],null],["flush-element"],["close-element"],["text","\\n"],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i,
          s = n(1),
          o = (i = n(95)) && i.__esModule ? i : { default: i };
        n(381);
        e.exports = s.Ember.Component.extend({
          layout: n(382),
          classNames: ["quick-play-summoner-spell-select-component"],
          classNameBindings: [],
          flyoutOptions: {
            targetAnchor: { x: "center", y: "left" },
            tooltipAnchor: { x: "center", y: "right" },
            offset: { x: 195, y: 0 },
            backdropCutout: null,
            orientation: "right",
            animated: !1,
          },
          quickPlayService: s.Ember.inject.service("quick-play"),
          selectingSlotSummonerSpells: s.Ember.computed(
            "selectingSlot.spell1",
            "selectingSlot.spell2",
            "quickPlayService.gameModeSummonerSpells.[]",
            function () {
              const e = this.get("selectingSlot.spell1") || 0,
                t = this.get("selectingSlot.spell2") || 0,
                n = this.get("quickPlayService.gameModeSummonerSpells") || [];
              return [e, t].map((e) => n.find((t) => t.id === e));
            },
          ),
          _toggleFlyout(e) {
            void 0 !== e
              ? this.set("isFlyoutOpen", e)
              : this.set("isFlyoutOpen", !this.get("isFlyoutOpen"));
          },
          playSpellSelectSound(e) {
            s.Audio.getChannel(o.default.SFX_CHANNEL).playSound(e.sfxPath);
          },
          actions: {
            toggleFlyout: function (e) {
              this._toggleFlyout(e);
            },
            handleSummonerSpellFlyoutTrigger: function (e, t) {
              this.set("changingSpell", e),
                this.set("summonerSpellFlyoutIndex", t),
                this.set("isFlyoutOpen", !0);
            },
            handleSummonerSpellSelected: function (e) {
              this._toggleFlyout(!1);
              const t = this.get("summonerSpellFlyoutIndex"),
                n = [
                  this.get("selectingSlot.spell1"),
                  this.get("selectingSlot.spell2"),
                ],
                i = n.findIndex((t) => t === e.id);
              if (t !== i && i >= 0) n.reverse();
              else {
                if (-1 !== i) return;
                (n[t] = e.id), this.playSpellSelectSound(e);
              }
              this.sendAction("handleSpellsSelected", n);
            },
            repositionCaret() {
              const e = this.get("selectingSlot.isPrimary") ? -37 : 55;
              s.FlyoutManager.repositionCaret(e);
            },
          },
        });
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "jj6B3aHy",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-summoner-spell-select\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-summoner-spell-select\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-summoner-spell-select\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","quick-play-summoner-spells-container"],["flush-element"],["text","\\n"],["block",["each"],[["get",["selectingSlotSummonerSpells"]]],null,0],["close-element"],["text","\\n"],["open-element","lc-flyout",[]],["dynamic-attr","open",["unknown",["isFlyoutOpen"]],null],["dynamic-attr","onHide",["helper",["action"],[["get",[null]],"toggleFlyout",false],null],null],["dynamic-attr","didShow",["helper",["action"],[["get",[null]],"repositionCaret"],null],null],["dynamic-attr","uiKitOptionOverrides",["unknown",["flyoutOptions"]],null],["flush-element"],["text","\\n  "],["open-element","lc-flyout-content",[]],["flush-element"],["text","\\n    "],["append",["helper",["quick-play-summoner-spell-popup"],null,[["changingSpell","spells","handleSpellSelected"],[["get",["changingSpell"]],["get",["quickPlayService","gameModeSummonerSpells"]],"handleSummonerSpellSelected"]]],false],["text","\\n  "],["close-element"],["text","\\n"],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["append",["helper",["quick-play-summoner-spell-renderer"],null,[["spell","onRendererClicked"],[["get",["spell"]],["helper",["action"],[["get",[null]],"handleSummonerSpellFlyoutTrigger",["get",["spell"]],["get",["index"]]],null]]]],false],["text","\\n"]],"locals":["spell","index"]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        n(384),
          (e.exports = i.Ember.Component.extend({
            layout: n(385),
            classNames: ["quick-play-loadout-tootip-component"],
            inventoryService: i.Ember.inject.service("inventory"),
            quickPlayService: i.Ember.inject.service("quick-play"),
            getSpellData(e) {
              return (
                this.get("quickPlayService.gameModeSummonerSpells") || []
              ).find((t) => t.id === e);
            },
            spell1: i.Ember.computed(
              "playerSlot.spell1",
              "quickPlayService.gameModeSummonerSpells",
              function () {
                const e = this.get("playerSlot.spell1");
                return this.getSpellData(e);
              },
            ),
            spell2: i.Ember.computed(
              "playerSlot.spell2",
              "quickPlayService.gameModeSummonerSpells",
              function () {
                const e = this.get("playerSlot.spell2");
                return this.getSpellData(e);
              },
            ),
            selectedSkin: i.Ember.computed(
              "playerSlot",
              "playerSlot.championId",
              "playerSlot.skinId",
              "quickPlayService.getLastSelectedSkinForChampion",
              function () {
                const e = this.get("playerSlot.championId"),
                  t = this.get("quickPlayService"),
                  n = this.get("playerSlot.skinId"),
                  i = t.getChampionData(e).skins || [];
                for (let e = 0; e < i.length; e++) {
                  const t = i[e];
                  if (t.id === n) return t;
                  const s = t.questSkinInfo?.tiers.find((e) => e.id === n);
                  if (s) return s;
                  const o = t.chromas.find((e) => e.id === n);
                  if (o)
                    return { name: o.name || t.name, splashPath: t.splashPath };
                }
              },
            ),
            selectedPerkPage: i.Ember.computed(
              "playerSlot.championId",
              "quickPlayService.perksPages.@each.quickPlayChampionIds",
              function () {
                const e = this.get("playerSlot.championId") || 0;
                return (this.get("quickPlayService.perksPages") || []).find(
                  (t) => t && (t.quickPlayChampionIds || []).includes(e),
                );
              },
            ),
            secondaryStyleIconStyle: i.Ember.computed(
              "selectedPerkPage.secondaryStyleIconPath",
              function () {
                return `-webkit-mask-image: url(${this.get("selectedPerkPage.secondaryStyleIconPath")});`;
              },
            ),
            ownedSkinAugments: i.Ember.computed(
              "inventoryService.ownedSkinAugments",
              "selectedSkin",
              function () {
                const e = this.get("inventoryService.ownedSkinAugments"),
                  t = this.get("selectedSkin.skinAugments") || [];
                return t?.augments
                  ?.filter((t) => e[t.contentId])
                  ?.map((e) => e.overlays?.[0]?.centeredLCOverlayPath);
              },
            ),
          }));
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "jgaO6quu",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-loadout-tooltip-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-loadout-tooltip-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-loadout-tooltip-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","quick-play-loadout-tooltip"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","quick-play-loadout-selected-skin-container"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","quick-play-loadout-selected-skin-image-container"],["flush-element"],["text","\\n      "],["open-element","img",[]],["static-attr","class","quick-play-loadout-selected-skin-image"],["dynamic-attr","src",["unknown",["selectedSkin","splashPath"]],null],["flush-element"],["close-element"],["text","\\n"],["block",["each"],[["get",["ownedSkinAugments"]]],null,3],["text","    "],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","quick-play-loadout-skin-overlay-container"],["flush-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","quick-play-loadout-skin-name-and-summoner-spells"],["flush-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","quick-play-loadout-skin-name"],["flush-element"],["text","\\n          "],["append",["unknown",["selectedSkin","name"]],false],["text","\\n        "],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","quick-play-loadout-summoner-spells-container"],["flush-element"],["text","\\n          "],["append",["helper",["quick-play-summoner-spell-renderer"],null,[["spell"],[["get",["spell1"]]]]],false],["text","\\n          "],["append",["helper",["quick-play-summoner-spell-renderer"],null,[["spell"],[["get",["spell2"]]]]],false],["text","\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n"],["block",["if"],[["get",["selectedPerkPage"]]],null,2],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","          "],["open-element","div",[]],["static-attr","class","quick-play-loadout-rune-page-perk-frame"],["flush-element"],["text","\\n            "],["open-element","svg",[]],["static-attr","class","quick-play-keystone-warning-icon"],["static-attr","width","21"],["static-attr","height","20"],["static-attr","viewBox","0 0 21 20"],["static-attr","fill","none"],["static-attr","xmlns","http://www.w3.org/2000/svg","http://www.w3.org/2000/xmlns/"],["flush-element"],["text","\\n              "],["open-element","path",[]],["static-attr","fill-rule","evenodd"],["static-attr","clip-rule","evenodd"],["static-attr","d","M11.3889 3L18.5 15.25L17.6111 17H3.38889L2.5 15.25L9.61111 3H11.3889ZM9.61111 11.75L8.72222 7.375L10.5 6.5L12.2778 7.375L11.3889 11.75H9.61111ZM12.2778 14.375L10.5 16.125L8.72222 14.375L10.5 12.625L12.2778 14.375Z"],["flush-element"],["close-element"],["text","\\n            "],["close-element"],["text","\\n          "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["open-element","div",[]],["static-attr","class","quick-play-loadout-rune-page-perk-frame keystone"],["flush-element"],["text","\\n            "],["open-element","img",[]],["static-attr","class","quick-play-loadout-rune-page-keystone-icon"],["dynamic-attr","src",["unknown",["selectedPerkPage","pageKeystone","iconPath"]],null],["flush-element"],["close-element"],["text","\\n          "],["close-element"],["text","\\n          "],["open-element","div",[]],["dynamic-attr","class",["concat",["quick-play-loadout-rune-page-perk-frame secondary style-",["unknown",["selectedPerkPage","subStyleId"]]]]],["flush-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","quick-play-loadout-rune-page-secondary-style-icon"],["dynamic-attr","style",["unknown",["secondaryStyleIconStyle"]],null],["flush-element"],["close-element"],["text","\\n          "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","quick-play-loadout-rune-page-name-and-icons"],["flush-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","quick-play-loadout-rune-page-name"],["flush-element"],["text","\\n        "],["append",["unknown",["selectedPerkPage","name"]],false],["text","\\n      "],["close-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","quick-play-loadout-rune-page-icons"],["flush-element"],["text","\\n"],["block",["if"],[["get",["selectedPerkPage","pageKeystone","iconPath"]]],null,1,0],["text","      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["open-element","div",[]],["static-attr","class","quick-play-loadout-skin-augment"],["dynamic-attr","style",["concat",["background-image: url(",["get",["augment"]],")"]]],["flush-element"],["close-element"],["text","\\n"]],"locals":["augment"]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        n(387);
        e.exports = i.Ember.Component.extend({
          layout: n(388),
          classNames: ["quick-play-selections-container-component"],
          quickPlayViewSlots: [],
          isLocalPlayer: !1,
          isNotLocalPlayer: i.Ember.computed.not("isLocalPlayer"),
          matchmakingService: i.Ember.inject.service("matchmaking"),
          _exitToEditContextualNotification: null,
          contextualNotificationActive: !1,
          isClickable: i.Ember.computed(
            "matchmakingService.isNotSearching",
            function () {
              return this.get("matchmakingService.isNotSearching");
            },
          ),
          primarySlot: i.Ember.computed("quickPlayViewSlots", function () {
            return this.get("quickPlayViewSlots")[0];
          }),
          secondarySlot: i.Ember.computed("quickPlayViewSlots", function () {
            return this.get("quickPlayViewSlots")[1];
          }),
          shouldHideSecondaryTooltip: i.Ember.computed(
            "quickPlayViewSlots",
            function () {
              return this.get("quickPlayViewSlots")[1].hide;
            },
          ),
          _getToggleContainer: function () {
            return this.element
              ? document.querySelectorAll(".close-button")
              : null;
          },
          _showExitQueueToEditContextualNotification: function () {
            const e = this._getToggleContainer(),
              t = !this.get("matchmakingService.isNotSearching"),
              n = !this.get("contextualNotificationActive");
            if (e && t && n) {
              const e = "",
                t = this.get("tra.quick_play_tooltip_exit_queue_close_button"),
                n = i.UIKit.getContextualNotificationManager(),
                s = i.UIKit.getTemplateHelper().contentBlockTooltip(
                  e,
                  t,
                  "tooltip-system",
                  "exit-queue-to-edit-loadout-quick-play-tooltip",
                ),
                o = n.add(s, {
                  target: {
                    domNode: document.querySelector(".close-button"),
                    anchor: { x: "center", y: "top" },
                  },
                  orientation: "top",
                  anchor: { x: "center", y: "bottom" },
                  offset: { x: 0, y: -15 },
                  dismissable: !1,
                });
              this.set("_exitToEditContextualNotification", o),
                this.set("contextualNotificationActive", !0),
                setTimeout(() => {
                  this._hideExitQueueToEditContextualNofication();
                }, 3e3);
            }
          },
          _hideExitQueueToEditContextualNofication: function () {
            const e = this.get("_exitToEditContextualNotification");
            if (e) {
              i.UIKit.getContextualNotificationManager().remove(e),
                this.set("_exitToEditContextualNotification", null),
                this.set("contextualNotificationActive", !1);
            }
          },
          _handleOpenSlot(e) {
            this.get("matchmakingService.isNotSearching") || !1
              ? this.sendAction("quickPlaySelectSlotAction", e)
              : this._showExitQueueToEditContextualNotification();
          },
          actions: {
            openQuickPlayLoadout(e) {
              this._handleOpenSlot(e);
            },
          },
        });
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "EnVcNAtC",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-selections-container\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-selections-container\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-selections-container\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","quick-play-selections-container-component"],["flush-element"],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipConfig","tooltipPosition"],[["get",["tooltipConfig"]],"top"]],3],["block",["each"],[["get",["quickPlayViewSlots"]]],null,1],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["append",["helper",["quick-play-selection-renderer"],null,[["isLocalPlayer","isClickable","position","playerSlot","isPrimary","championId","disabled","onClick"],[["get",["isLocalPlayer"]],["get",["isClickable"]],["get",["playerSlot","positionPreference"]],["get",["playerSlot"]],["get",["playerSlot","isPrimary"]],["get",["playerSlot","championId"]],["get",["isNotLocalPlayer"]],["helper",["action"],[["get",[null]],"openQuickPlayLoadout",["get",["index"]]],null]]]],false],["text","\\n"]],"locals":[]},{"statements":[["block",["unless"],[["get",["playerSlot","hide"]]],null,0]],"locals":["playerSlot","index"]},{"statements":[["text","        "],["append",["helper",["quick-play-loadout-tooltip"],null,[["playerSlot"],[["get",["secondarySlot"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","quick-play-loadout-tooltip-container"],["flush-element"],["text","\\n      "],["append",["helper",["quick-play-loadout-tooltip"],null,[["playerSlot"],[["get",["primarySlot"]]]]],false],["text","\\n"],["block",["unless"],[["get",["shouldHideSecondaryTooltip"]]],null,2],["text","    "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        n(390),
          (e.exports = i.Ember.Component.extend({
            layout: n(391),
            classNames: ["quick-play-selection-rules-tooltip-component"],
            lobbiesService: i.Ember.inject.service("lobbies"),
            isSoloParty: i.Ember.computed(
              "lobbiesService.currentPartySize",
              function () {
                return 1 === this.get("lobbiesService.currentPartySize");
              },
            ),
            isFullParty: i.Ember.computed(
              "lobbiesService.currentPartySize",
              function () {
                return 5 === this.get("lobbiesService.currentPartySize");
              },
            ),
            is2To4Party: i.Ember.computed(
              "lobbiesService.currentPartySize",
              function () {
                const e = this.get("lobbiesService.currentPartySize");
                return e > 1 && e < 5;
              },
            ),
          }));
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "D/3ln/WU",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-selection-rules-tooltip\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-selection-rules-tooltip\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-selection-rules-tooltip\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","quick-play-selection-rules-tooltip"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","quick-play-selection-rules-tooltip-icon"],["flush-element"],["close-element"],["text","\\n  "],["append",["unknown",["tra","quick_play_lobby_rules"]],false],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipPosition","type"],["bottom","system"]],3],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","        "],["open-element","h4",[]],["static-attr","class","quick-play-selection-rules-tooltip-header"],["flush-element"],["append",["unknown",["tra","quick_play_tooltip_5_player_header"]],false],["close-element"],["text","\\n        "],["open-element","ul",[]],["static-attr","class","quick-play-selection-rules-tooltip-list"],["flush-element"],["text","\\n          "],["open-element","li",[]],["flush-element"],["append",["unknown",["tra","quick_play_tooltip_5_rule_1"]],false],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","h4",[]],["static-attr","class","quick-play-selection-rules-tooltip-header"],["flush-element"],["append",["unknown",["tra","quick_play_tooltip_2_4_player_header"]],false],["close-element"],["text","\\n        "],["open-element","ul",[]],["static-attr","class","quick-play-selection-rules-tooltip-list"],["flush-element"],["text","\\n          "],["open-element","li",[]],["flush-element"],["append",["unknown",["tra","quick_play_tooltip_2_4_rule_1"]],false],["close-element"],["text","\\n          "],["open-element","li",[]],["flush-element"],["append",["unknown",["tra","quick_play_tooltip_2_4_rule_2"]],false],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","h4",[]],["static-attr","class","quick-play-selection-rules-tooltip-header"],["flush-element"],["append",["unknown",["tra","quick_play_tooltip_solo_header"]],false],["close-element"],["text","\\n        "],["open-element","ul",[]],["static-attr","class","quick-play-selection-rules-tooltip-list"],["flush-element"],["text","\\n          "],["open-element","li",[]],["flush-element"],["append",["unknown",["tra","quick_play_tooltip_solo_rule_1"]],false],["close-element"],["text","\\n          "],["open-element","li",[]],["flush-element"],["append",["unknown",["tra","quick_play_tooltip_solo_rule_2"]],false],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","lol-uikit-content-block",[]],["static-attr","class","quick-play-selection-rules-tooltip-content"],["flush-element"],["text","\\n      "],["open-element","h3",[]],["static-attr","class","quick-play-selection-rules-tooltip-title"],["flush-element"],["append",["unknown",["tra","quick_play_tooltip_title"]],false],["close-element"],["text","\\n"],["block",["if"],[["get",["isSoloParty"]]],null,2],["block",["if"],[["get",["is2To4Party"]]],null,1],["block",["if"],[["get",["isFullParty"]]],null,0],["text","    "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.default = void 0);
        var i,
          s = n(1),
          o = (i = n(268)) && i.__esModule ? i : { default: i };
        n(393);
        const a = s.Audio.getChannel("sfx-ui");
        var r = o.default.extend({
          layout: n(394),
          classNames: ["multiteam-lobby-root-component"],
          classNameBindings: ["useCompactGridLayout:compact-layout:"],
          selected: null,
          showingState: null,
          lobbiesService: s.Ember.inject.service("lobbies"),
          inParty: s.Ember.computed.and(
            "lobbiesService.inLobby",
            "isShowingParty",
          ),
          isSwapSoundPlaying: !1,
          subteamIndexes: s.Ember.computed(
            "lobbiesService.multiteamLobbySubteamCount",
            function () {
              const e = this.get("lobbiesService.multiteamLobbySubteamCount");
              if (!e || e <= 0) return [];
              const t = new Array(e);
              for (let n = 1; n <= e; n++) t[n - 1] = n;
              return t;
            },
          ),
          useCompactGridLayout: s.Ember.computed(
            "lobbiesService.multiteamLobbySubteamCount",
            function () {
              return this.get("lobbiesService.multiteamLobbySubteamCount") > 4;
            },
          ),
          setSwapButtonOnCooldown: function () {
            this.set("isSwapButtonOnCooldown", !0),
              this.runTask(() => {
                this.set("isSwapButtonOnCooldown", !1);
              }, 4e3);
          },
          isSameAsCurrentBannerTooltip: function (e, t) {
            return (
              this._currentBannerTooltip &&
              this._currentBannerTooltip.subteamIndex === e &&
              this._currentBannerTooltip.intraSubteamPosition === t
            );
          },
          hideCurrentBannerTooltipIfExists: function () {
            this._currentBannerTooltip &&
              (this._currentBannerTooltip.hideCallback &&
                this._currentBannerTooltip.hideCallback(),
              (this._currentBannerTooltip = null));
          },
          showNewBannerTooltip(e, t, n, i) {
            n && n(),
              (this._currentBannerTooltip = {
                subteamIndex: e,
                intraSubteamPosition: t,
                hideCallback: i,
              });
          },
          actions: {
            bannerTooltipTriggered: function (e, t, n, i) {
              this.isSameAsCurrentBannerTooltip(e, t) ||
                (this.hideCurrentBannerTooltipIfExists(),
                this.showNewBannerTooltip(e, t, n, i));
            },
            bannerTooltipExited: function (e, t) {
              this.isSameAsCurrentBannerTooltip(e, t) &&
                this.hideCurrentBannerTooltipIfExists();
            },
            showInviteModal: function () {
              this.sendAction("showInviteModal");
            },
            onSwapButtonClicked: function (e, t) {
              this.get("isSwapButtonOnCooldown") ||
                (this.get("lobbiesService").setSubteamData(e, t),
                a.playSound(
                  "/fe/lol-static-assets/sounds/sfx-uikit-button-generic-click.ogg",
                ),
                this.setSwapButtonOnCooldown());
            },
            onAnySwapOccurred: function (e) {
              e &&
                !this.get("isLocalPlayerSwapSoundPlaying") &&
                (this.set("isLocalPlayerSwapSoundPlaying", !0),
                a.on("end", () => {
                  this.set("isLocalPlayerSwapSoundPlaying", !1);
                }),
                a.playSound(
                  "/fe/lol-static-assets/sounds/sfx-lobby-arena-player-swap.ogg",
                )),
                this.get("isSwapSoundPlaying") ||
                  (this.set("isSwapSoundPlaying", !0),
                  a.on("end", () => {
                    this.set("isSwapSoundPlaying", !1);
                  }),
                  a.playSound(
                    "/fe/lol-static-assets/sounds/sfx-parties-member-banner-invited.ogg",
                  ));
            },
          },
        });
        t.default = r;
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "+Hs8UPvM",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\multiteam-lobby\\\\multiteam-lobby-root-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\multiteam-lobby\\\\multiteam-lobby-root-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\multiteam-lobby\\\\multiteam-lobby-root-component\\\\index.js\\" "],["text","\\n"],["block",["if"],[["get",["inParty"]]],null,2]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","            "],["append",["helper",["multiteam-lobby-subteam"],null,[["subteamIndex","selected","bannerTooltipTriggered","bannerTooltipExited","showInviteModal","isSwapButtonOnCooldown","onSwapButtonClicked","onAnySwapOccurred"],[["get",["subteamIndex"]],["get",["selected"]],"bannerTooltipTriggered","bannerTooltipExited","showInviteModal",["get",["isSwapButtonOnCooldown"]],"onSwapButtonClicked","onAnySwapOccurred"]]],false],["text","\\n"]],"locals":["subteamIndex"]},{"statements":[["text","      "],["open-element","lol-uikit-scrollable",[]],["static-attr","class","multiteam-lobby-root__scrollable"],["flush-element"],["text","\\n        "],["open-element","div",[]],["dynamic-attr","class",["concat",["multiteam-lobby-root__subteam-table ",["helper",["if"],[["get",["isSwapButtonOnCooldown"]],"multiteam-lobby-root__subteam-table-swap-button-cooldown"],null]]]],["flush-element"],["text","\\n"],["block",["each"],[["get",["subteamIndexes"]]],null,0],["text","        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","multiteam-lobby-root__scrollable-wrapper"],["flush-element"],["text","\\n"],["block",["lower-section"],null,[["currentPlayer"],[["get",["currentPlayer"]]]],1],["text","  "],["close-element"],["text","\\n\\n  "],["open-element","div",[]],["static-attr","class","footer-container"],["flush-element"],["text","\\n    "],["append",["helper",["v2-footer"],null,[["showingState","inParty","selected"],[["get",["showingState"]],["get",["inParty"]],["get",["selected"]]]]],false],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.default = void 0);
        var i = n(1);
        n(396);
        var s = i.Ember.Component.extend({
          layout: n(397),
          classNames: ["multiteam-lobby-subteam-component"],
          classNameBindings: [
            "hasAnyPlayer::no-players",
            "isSearching:is-in-queue",
          ],
          selected: null,
          subteamIndex: null,
          isSwapButtonOnCooldown: !1,
          lobbiesService: i.Ember.inject.service("lobbies"),
          matchmakingService: i.Ember.inject.service("matchmaking"),
          isSearching: i.Ember.computed.alias("matchmakingService.isSearching"),
          intraSubteamPositions: i.Ember.computed(
            "lobbiesService.multiteamLobbySubteamPlayerSlotCount",
            function () {
              const e = this.get(
                "lobbiesService.multiteamLobbySubteamPlayerSlotCount",
              );
              if (e <= 0) return [];
              const t = new Array(e);
              for (let n = 1; n <= e; n++) t[n - 1] = n;
              return t;
            },
          ),
          hasAnyPlayer: i.Ember.computed(
            "subteamIndex",
            "lobbiesService.subteamDataToSummonerIdMap",
            "intraSubteamPositions",
            function () {
              const e = this.get("intraSubteamPositions") || [];
              for (let t = 0; t < e.length; ++t) {
                const n = [this.get("subteamIndex"), e[t]];
                if (
                  (this.get("lobbiesService.subteamDataToSummonerIdMap") || {})[
                    n
                  ]
                )
                  return !0;
              }
              return !1;
            },
          ),
          init() {
            this._super(...arguments);
          },
          actions: {
            bannerTooltipTriggered: function (e, t, n, i) {
              this.sendAction("bannerTooltipTriggered", e, t, n, i);
            },
            bannerTooltipExited: function (e, t) {
              this.sendAction("bannerTooltipExited", e, t);
            },
            showInviteModal: function () {
              this.sendAction("showInviteModal");
            },
            onSwapButtonClicked: function (e, t) {
              this.sendAction("onSwapButtonClicked", e, t);
            },
            onAnySwapOccurred: function (e) {
              this.sendAction("onAnySwapOccurred", e);
            },
          },
        });
        t.default = s;
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "xEd9DfIO",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\multiteam-lobby\\\\multiteam-lobby-subteam-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\multiteam-lobby\\\\multiteam-lobby-subteam-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\multiteam-lobby\\\\multiteam-lobby-subteam-component\\\\index.js\\" "],["text","\\n"],["block",["each"],[["get",["intraSubteamPositions"]]],null,0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["append",["helper",["multiteam-lobby-subteam-player-slot"],null,[["subteamIndex","intraSubteamPosition","selected","bannerTooltipTriggered","bannerTooltipExited","showInviteModal","isSwapButtonOnCooldown","onSwapButtonClicked","onAnySwapOccurred"],[["get",["subteamIndex"]],["get",["intraSubteamPosition"]],["get",["selected"]],"bannerTooltipTriggered","bannerTooltipExited","showInviteModal",["get",["isSwapButtonOnCooldown"]],"onSwapButtonClicked","onAnySwapOccurred"]]],false],["text","\\n"]],"locals":["intraSubteamPosition"]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.default = void 0);
        var i = n(1);
        n(399);
        const s = ".player-slot__container",
          o = "lol-uikit-tooltip",
          a = ":hover",
          r = [
            [20, 103],
            [1200, 600],
          ],
          l = i.Audio.getChannel("sfx-ui"),
          { RunMixin: c } = i.EmberAddons.EmberLifeline,
          m = (0, i.emberDataBinding)({
            Ember: i.Ember,
            websocket: (0, i.getProvider)().getSocket(),
            basePaths: { ranked: "/lol-ranked" },
            boundProperties: {
              rankedData: { api: "ranked", path: "/v1/ranked-stats/{{puuid}}" },
            },
          });
        var u = i.Ember.Component.extend(c, m, {
          layout: n(400),
          classNames: ["multiteam-lobby-subteam-player-slot-component"],
          classNameBindings: [
            "isReadyOrSearching::multiteam-lobby-subteam-player-slot-component__not-ready",
            "shouldShowInviteButton:showing-invite-button",
            "isSearching::showing-swap-button",
          ],
          selected: null,
          subteamIndex: null,
          intraSubteamPosition: null,
          isSwapButtonOnCooldown: !1,
          lobbiesService: i.Ember.inject.service("lobbies"),
          matchmakingService: i.Ember.inject.service("matchmaking"),
          localPlayer: i.Ember.computed.alias("lobbiesService.currentPlayer"),
          hasPlayer: i.Ember.computed.notEmpty("playerSlotSummonerId"),
          isLeader: i.Ember.computed.alias("playerSlotData.isLeader"),
          isReady: i.Ember.computed.alias("playerSlotData.ready"),
          isSearching: i.Ember.computed.alias("matchmakingService.isSearching"),
          isReadyOrSearching: i.Ember.computed.or("isReady", "isSearching"),
          queueType: i.Ember.computed.alias("selected.queue.type"),
          puuid: i.Ember.computed.alias("playerSlotData.puuid"),
          isLocalPlayer: i.Ember.computed(
            "localPlayer",
            "playerSlotSummonerId",
            function () {
              const e = this.get("localPlayer"),
                t = this.get("playerSlotSummonerId");
              return e && e.summonerId && t && t === e.summonerId;
            },
          ),
          playerSlotData: i.Ember.computed(
            "playerSlotSummonerId",
            "lobbiesService.currentPartyMembers",
            function () {
              const e = this.get("lobbiesService.currentPartyMembers"),
                t = this.get("playerSlotSummonerId");
              if (!e || !t) return null;
              return e.find((e) => e.summonerId === t);
            },
          ),
          playerSlotSummonerId: i.Ember.computed(
            "lobbiesService.subteamDataToSummonerIdMap",
            "subteamIndex",
            "intraSubteamPosition",
            function () {
              const e = this.get("subteamIndex"),
                t = this.get("intraSubteamPosition"),
                n = [e, t],
                i = this.get("lobbiesService.subteamDataToSummonerIdMap");
              return e && t && i && i[n] ? i[n] : null;
            },
          ),
          playerSlotSummonerIdObserver: i.Ember.observer(
            "playerSlotSummonerId",
            function () {
              const e = this.get("playerSlotSummonerId");
              this._lastSummonerId &&
                !e &&
                (this.exitedBannerTooltip(
                  this.get("subteamIndex"),
                  this.get("intraSubteamPosition"),
                ),
                this.removeCurrentRegaliaObserver()),
                e &&
                  this._lastSummonerId !== e &&
                  (this.animateSwap(),
                  this.sendAction(
                    "onAnySwapOccurred",
                    this.get("isLocalPlayer"),
                  ),
                  this.setUpRegaliaForSummonerId(e)),
                this.cacheSummonerId();
            },
          ),
          shouldShowInviteButton: i.Ember.computed(
            "hasPlayer",
            "isSearching",
            function () {
              return !this.get("hasPlayer") && !this.get("isSearching");
            },
          ),
          isSwapButtonClickable: i.Ember.computed(
            "hasPlayer",
            "isLocalPlayer",
            "isSearching",
            "isReady",
            "isSwapButtonOnCooldown",
            function () {
              return (
                !this.get("isSearching") &&
                !this.get("isLocalPlayer") &&
                !this.get("isSwapButtonOnCooldown") &&
                (this.get("isReady") || !this.get("hasPlayer"))
              );
            },
          ),
          init() {
            this._super(...arguments),
              (this.regaliaBinding = (0, i.dataBinding)(
                "/lol-regalia",
                (0, i.getProvider)().getSocket(),
              ));
          },
          willDestroyElement() {
            this._super(...arguments), this.removeCurrentRegaliaObserver();
          },
          didInsertElement() {
            this._super(...arguments), this.initBannerTooltip();
            const e = this.get("playerSlotSummonerId");
            e && this.setUpRegaliaForSummonerId(e),
              this.get("isLocalPlayer") || this.cacheSummonerId();
          },
          setUpRegaliaForSummonerId: function (e) {
            e &&
              (this._lastSummonerId &&
                this._lastSummonerId !== e &&
                this.removeCurrentRegaliaObserver(),
              this.getRegalia(e, !1),
              this.regaliaSummonerPath ||
                ((this.regaliaSummonerPath = `/v2/summoners/${e}/regalia/async`),
                this.regaliaBinding.observe(
                  this.regaliaSummonerPath,
                  this,
                  this.handleRegaliaAsync,
                )));
          },
          handleRegaliaAsync: function (e) {
            const t = this.get("playerSlotSummonerId");
            t &&
              e &&
              e.md5 !== this._regaliaMd5 &&
              (this.getRegalia(t, !0), (this._regaliaMd5 = e.md5));
          },
          getRegalia: function (e, t) {
            const n = `/v2/summoners/${e}/regalia`;
            return this.regaliaBinding.get(n, { skipCache: t }).then((e) => {
              e &&
                e.profileIconId &&
                this.set("profileIconId", e.profileIconId);
            });
          },
          removeCurrentRegaliaObserver: function () {
            this.regaliaSummonerPath &&
              (this.regaliaBinding.unobserve(this.regaliaSummonerPath, this),
              (this.regaliaSummonerPath = null));
          },
          cacheSummonerId: function () {
            this._lastSummonerId = this.get("playerSlotSummonerId");
          },
          animateSwap: function () {
            this.set("isSwapSummonerDetailsAnimating", !0),
              this.runTask(() => {
                this.set("isSwapSummonerDetailsAnimating", !1);
              }, 400),
              this.get("isLocalPlayer")
                ? (this.set("isSwapLocalPlayerGlowAnimating", !0),
                  this.runTask(() => {
                    this.set("isSwapLocalPlayerGlowAnimating", !1);
                  }, 2300))
                : (this.set("isSwapGlowAnimating", !0),
                  this.runTask(() => {
                    this.set("isSwapGlowAnimating", !1);
                  }, 1300));
          },
          initBannerTooltip: function () {
            const e = this.element.querySelector(s),
              t = this.element.querySelector(".player-slot__banner-container");
            if (!e || !t) return;
            const n = document.createElement(o);
            n.appendChild(t);
            let a = "right",
              l = 216;
            const c = this.get("subteamIndex") || 1;
            this.get("lobbiesService.multiteamLobbySubteamCount") > 4 &&
              c % 3 == 0 &&
              ((a = "left"), (l = -216)),
              i.UIKit.getTooltipManager().assign(e, n, null, {
                type: "banner",
                targetAnchor: { x: a, y: "center" },
                tooltipAnchor: { x: a, y: "center" },
                offset: { x: l, y: 0 },
                restrictArea: r,
              }),
              i.UIKit.getTooltipManager().hide(e),
              this.set("playerSlotElement", e);
          },
          triggerBannerTooltip: function () {
            if (this.get("hasPlayer")) {
              const e = () => {
                  this.showBannerTooltip();
                },
                t = () => {
                  this.hideBannerTooltip();
                };
              this.sendAction(
                "bannerTooltipTriggered",
                this.get("subteamIndex"),
                this.get("intraSubteamPosition"),
                e,
                t,
              );
            }
          },
          exitedBannerTooltip: function () {
            this.sendAction(
              "bannerTooltipExited",
              this.get("subteamIndex"),
              this.get("intraSubteamPosition"),
            );
          },
          showBannerTooltip: function () {
            const e = this.get("playerSlotElement");
            e && this.get("hasPlayer") && i.UIKit.getTooltipManager().show(e);
          },
          hideBannerTooltip: function () {
            const e = this.get("playerSlotElement");
            e && i.UIKit.getTooltipManager().hide(e);
          },
          isHoveringPlayerSlot: function () {
            return !!this.element.querySelector(s + a);
          },
          isHoveringBannerTooltip: function () {
            return !!document.querySelector(o + a);
          },
          actions: {
            onSwapButtonClicked: function () {
              this.get("isSwapButtonClickable") &&
                this.sendAction(
                  "onSwapButtonClicked",
                  this.get("subteamIndex"),
                  this.get("intraSubteamPosition"),
                );
            },
            onHoverButton: function () {
              l.playSound(
                "/fe/lol-static-assets/sounds/sfx-uikit-button-circlegold-hover.ogg",
              );
            },
            showInviteModal: function () {
              l.playSound("/fe/lol-parties/sfx-lobby-button-banner-click.ogg"),
                this.sendAction("showInviteModal");
            },
            onMouseEnterBannerTooltipTrigger: function () {
              this.triggerBannerTooltip();
            },
            onMouseLeaveBannerTooltipTrigger: function () {
              this.isHoveringPlayerSlot() ||
                this.isHoveringBannerTooltip() ||
                this.exitedBannerTooltip();
            },
          },
        });
        t.default = u;
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "jqc2e7si",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\multiteam-lobby\\\\multiteam-lobby-subteam-player-slot-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\multiteam-lobby\\\\multiteam-lobby-subteam-player-slot-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\multiteam-lobby\\\\multiteam-lobby-subteam-player-slot-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["dynamic-attr","class",["concat",["player-slot__container ",["helper",["if"],[["get",["hasPlayer"]],"player-slot__container-has-player"],null]," ",["helper",["if"],[["get",["isSearching"]],"player-slot__container-is-searching"],null]]]],["dynamic-attr","onmouseenter",["helper",["action"],[["get",[null]],"onMouseEnterBannerTooltipTrigger"],null],null],["dynamic-attr","onmouseleave",["helper",["action"],[["get",[null]],"onMouseLeaveBannerTooltipTrigger"],null],null],["flush-element"],["text","\\n"],["block",["if"],[["get",["isLocalPlayer"]]],null,6],["text","  "],["open-element","div",[]],["dynamic-attr","class",["concat",["player-slot__swap-local-player-glow ",["helper",["if"],[["get",["isSwapLocalPlayerGlowAnimating"]],"player-slot__swap-local-player-glow-animation"],null]]]],["flush-element"],["close-element"],["text","\\n  "],["open-element","div",[]],["dynamic-attr","class",["concat",["player-slot__swap-glow ",["helper",["if"],[["get",["isSwapGlowAnimating"]],"player-slot__swap-glow-animation"],null]]]],["flush-element"],["close-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","player-slot__hover-glow"],["flush-element"],["close-element"],["text","\\n"],["block",["if"],[["get",["hasPlayer"]]],null,5],["text","  "],["open-element","div",[]],["static-attr","class","player-slot__banner-container"],["dynamic-attr","onmouseenter",["helper",["action"],[["get",[null]],"onMouseEnterBannerTooltipTrigger"],null],null],["dynamic-attr","onmouseleave",["helper",["action"],[["get",[null]],"onMouseLeaveBannerTooltipTrigger"],null],null],["flush-element"],["text","\\n    "],["append",["helper",["v2-banner"],null,[["member","puuid","summonerId","animationsEnabled","selected","isPlayerPartyControlsDisabled"],[["get",["playerSlotData"]],["get",["playerSlotData","puuid"]],["get",["playerSlotData","summonerId"]],"false",["get",["selected"]],"true"]]],false],["text","\\n  "],["close-element"],["text","\\n  "],["open-element","button",[]],["static-attr","class","player-slot__invite-button"],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"showInviteModal"],null],null],["dynamic-attr","onmouseenter",["helper",["action"],[["get",[null]],"onHoverButton"],null],null],["flush-element"],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipPosition","type"],["top","system"]],2],["text","    "],["open-element","div",[]],["static-attr","class","player-slot__invite-icon"],["flush-element"],["close-element"],["text","\\n  "],["close-element"],["text","\\n  "],["open-element","div",[]],["dynamic-attr","class",["concat",["player-slot__side-buttons-container ",["helper",["if"],[["get",["isLocalPlayer"]],"player-slot__side-buttons-container-is-local-player"],null]," ",["helper",["if"],[["get",["hasPlayer"]],"player-slot__side-buttons-container-has-player"],null]]]],["flush-element"],["text","\\n"],["block",["if"],[["get",["hasPlayer"]]],null,1],["text","    "],["open-element","button",[]],["dynamic-attr","class",["concat",["player-slot__swap-button ",["helper",["unless"],[["get",["isSwapButtonClickable"]],"player-slot__swap-button-disabled"],null]]]],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"onSwapButtonClicked"],null],null],["dynamic-attr","onmouseenter",["helper",["action"],[["get",[null]],"onHoverButton"],null],null],["flush-element"],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipPosition","type"],["top","system"]],0],["text","      "],["open-element","div",[]],["static-attr","class","player-slot__swap-icon"],["flush-element"],["close-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","player-slot__swap-button-cooldown"],["flush-element"],["text","\\n          "],["open-element","div",[]],["static-attr","class","player-slot__swap-button-cooldown-left-half-mask"],["flush-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","player-slot__swap-button-cooldown-left-half"],["flush-element"],["close-element"],["text","\\n          "],["close-element"],["text","\\n          "],["open-element","div",[]],["static-attr","class","player-slot__swap-button-cooldown-right-half"],["flush-element"],["close-element"],["text","\\n        "],["close-element"],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","        "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n          "],["open-element","p",[]],["flush-element"],["append",["unknown",["tra","parties_swap_button"]],false],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","player-slot__player-party-controls-wrapper"],["flush-element"],["text","\\n        "],["append",["helper",["v2-player-party-controls"],null,[["member","isLeader","isMe","isMultiteamLobby"],[["get",["playerSlotData"]],["get",["isLeader"]],["get",["isLocalPlayer"]],"true"]]],false],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n        "],["open-element","p",[]],["flush-element"],["append",["unknown",["tra","parties_invite_button"]],false],["close-element"],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","lol-not-ready-loader"],["flush-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","lol-not-ready-loader-segment"],["flush-element"],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","lol-not-ready-loader-segment"],["flush-element"],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","lol-not-ready-loader-segment"],["flush-element"],["close-element"],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","              "],["open-element","img",[]],["static-attr","src","/fe/lol-parties/icon-crown.png"],["static-attr","class","player-slot__leader-icon"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","player-slot__summoner-container"],["flush-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","player-slot__crest-wrapper"],["flush-element"],["text","\\n        "],["open-element","lol-regalia-crest-v2-element",[]],["dynamic-attr","voice-puuid",["unknown",["playerSlotData","puuid"]],null],["dynamic-attr","profile-icon",["unknown",["profileIconId"]],null],["static-attr","crest-sizing","small"],["static-attr","crest-type","none"],["flush-element"],["close-element"],["text","\\n      "],["close-element"],["text","\\n      "],["open-element","div",[]],["dynamic-attr","class",["concat",["player-slot__summoner-details-container ",["helper",["if"],[["get",["isSwapSummonerDetailsAnimating"]],"player-slot__swap-summoner-details-animation"],null]]]],["flush-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","player-slot__summoner-header-row"],["flush-element"],["text","\\n"],["block",["if"],[["get",["isLeader"]]],null,4],["text","            "],["open-element","div",[]],["dynamic-attr","class",["concat",["player-slot__summoner-name ",["helper",["if"],[["get",["isLocalPlayer"]],"player-slot__summoner-name-local-player"],null]]]],["flush-element"],["text","\\n              "],["append",["helper",["player-name"],null,[["format","puuid","summonerName"],["short",["get",["playerSlotData","puuid"]],["get",["playerSlotData","summonerName"]]]]],false],["text","\\n            "],["close-element"],["text","\\n        "],["close-element"],["text","\\n        "],["append",["helper",["cherry-rating"],null,[["rankedData","queueType","tooltipEnabled"],[["get",["rankedData"]],["get",["queueType"]],false]]],false],["text","\\n      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n"],["block",["unless"],[["get",["isReadyOrSearching"]]],null,3]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","player-slot__local-player-highlight"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.default = void 0);
        var i,
          s = n(1),
          o = (i = n(268)) && i.__esModule ? i : { default: i };
        n(402);
        var a = o.default.extend({
          layout: n(403),
          classNames: ["strawberry-lobby-root-component"],
          selected: null,
          showingState: null,
          lobbiesService: s.Ember.inject.service("lobbies"),
          inParty: s.Ember.computed.and(
            "lobbiesService.inLobby",
            "isShowingParty",
          ),
          actions: {
            showInviteModal: function () {
              this.sendAction("showInviteModal");
            },
          },
        });
        t.default = a;
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "5aHWWd9Z",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\strawberry-lobby-root-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\strawberry-lobby-root-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\strawberry-lobby-root-component\\\\index.js\\" "],["text","\\n"],["block",["if"],[["get",["inParty"]]],null,1]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["append",["helper",["strawberry-party-hub"],null,[["showInviteModal"],["showInviteModal"]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","   "],["open-element","div",[]],["static-attr","class","strawberry-lobby-root-main-content"],["flush-element"],["text","\\n"],["block",["if"],[["helper",["riot-future"],null,null]],null,0],["text","  "],["close-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","footer-container"],["flush-element"],["text","\\n    "],["append",["helper",["v2-footer"],null,[["showingState","inParty","selected"],[["get",["showingState"]],["get",["inParty"]],["get",["selected"]]]]],false],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        const s = "Map23_Playbook_TutorialSeen",
          o = "Playbook_CTASeen_TFT9",
          a = "/lol-cosmetics/v1/inventories/tft/playbooks",
          r = "/lol-cosmetics/v1/selection/playbook",
          l = "/lol-game-data/assets/v1/generic-assets.json",
          c = "/lol-settings/v1/account/lol-tutorial";
        e.exports = i.Ember.Service.extend({
          displayPlaybookMenu: !1,
          displayItemDetails: !1,
          shouldDisplayPlaybookTutorial: !1,
          playbookEnabled: !1,
          playbookAssets: null,
          playbookData: {},
          defaultPlaybookIcon: "",
          playbookSelectedItem: {},
          playbookViewItem: {},
          autoShowTutorial: !1,
          shouldShowCta: !1,
          init: function () {
            this._super(...arguments),
              (this._binding = i.db),
              this._initObservers();
          },
          willDestroy: function () {
            this.get("playbookEnabled") &&
              this._binding.removeObserver(a, this),
              this._binding.removeObserver(l, this),
              this._super(...arguments);
          },
          _initObservers() {
            this.set("playbookEnabled", Boolean(!1)),
              this._binding.addObserver(l, this, (e) => {
                e && this.set("playbookAssets", e["lcu-assets-tft-playbook"]);
              });
          },
          showPlaybookMenu: function () {
            this.set("displayPlaybookMenu", !0);
          },
          hidePlaybookMenu: function () {
            this.set("displayPlaybookMenu", !1), this.hideItemDetailsMenu();
          },
          showTutorialModal: function () {
            this.set("shouldDisplayPlaybookTutorial", !0);
          },
          hideTutorialModal: function () {
            this.set("shouldDisplayPlaybookTutorial", !1),
              this.setTutorialSeen();
          },
          showItemDetailsMenu: function () {
            this.set("displayItemDetails", !0);
          },
          hideItemDetailsMenu: function () {
            this.set("displayItemDetails", !1);
          },
          updateSelectedItem: function (e) {
            this._binding
              .put(r, e.itemId)
              .then(() => {
                this.set("playbookSelectedItem", e),
                  this.hidePlaybookMenu(),
                  this.hideItemDetailsMenu();
              })
              .catch(() => {
                i.logger.error("Unable to update playbook item", r);
              });
          },
          checkForFirstViewing: function () {
            const e = (e = {}, t) => e.data && e.data[t];
            this._binding.get(c).then((t) => {
              if (
                (e(t, s) ||
                  (this.set("autoShowTutorial", !0),
                  this.set("shouldDisplayPlaybookTutorial", !0)),
                !e(t, o))
              ) {
                if (1 !== (this.get("playbookSelectedItem") || {}).itemId)
                  return void this._updateSeenKey(o);
                this.set("shouldShowCta", !0);
              }
            });
          },
          setTutorialSeen: function () {
            this.get("autoShowTutorial") && this._updateSeenKey(s),
              this.set("autoShowTutorial", !1);
          },
          _updateSeenKey: function (e) {
            const t = c;
            this._binding.get(t).then((n) => {
              if (!n) return;
              const i = n.data || {};
              (i[e] = !0),
                this._binding.patch(t, {
                  data: i,
                  schemaVersion: n.schemaVersion,
                });
            });
          },
          closeCta: function () {
            this.set("shouldShowCta", !1);
          },
          markCtaAsSeen: function () {
            this.get("shouldShowCta") && this._updateSeenKey(o),
              this.closeCta();
          },
          sortPlaybookItems: function () {
            this.get("playbookData.items").sort(function (e, t) {
              return i.lodash.isEmpty(e.earlyAugments) &&
                !i.lodash.isEmpty(t.earlyAugments)
                ? 1
                : (!i.lodash.isEmpty(e.earlyAugments) &&
                      i.lodash.isEmpty(t.earlyAugments)) ||
                    e.name < t.name
                  ? -1
                  : e.name > t.name
                    ? 1
                    : 0;
            });
          },
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1),
          s = n(9);
        n(406);
        const o = i.Audio.getChannel("sfx-ui").createSound(
            "/fe/lol-static-assets/sounds/sfx-uikit-button-generic-hover.ogg",
          ),
          a = i.Audio.getChannel("sfx-ui").createSound(
            "/fe/lol-static-assets/sounds/sfx-uikit-button-generic-click.ogg",
          );
        e.exports = i.Ember.Component.extend({
          layout: n(407),
          classNames: ["tft-playbook-icon"],
          playbook: i.Ember.inject.service("tft-playbook"),
          queueId: 0,
          showQueueDisabledTooltip: !1,
          isEnabled: i.Ember.computed(
            "playbook.playbookEnabled",
            "queueId",
            function () {
              return (
                this.get("playbook.playbookEnabled") &&
                !s.TFT_HYPER_ROLL_QUEUE_IDS.includes(this.get("queueId"))
              );
            },
          ),
          isEquippedPlaybookDisabledForQueue: i.Ember.computed(
            "queueId",
            "playbook.playbookSelectedItem",
            function () {
              const e = this.get("queueId");
              return (
                !(
                  !s.PAIRS_QUEUE_IDS.includes(e) ||
                  !this.get(
                    "playbook.playbookSelectedItem.isDisabledInDoubleUp",
                  )
                ) && (this.set("showQueueDisabledTooltip", !0), !0)
              );
            },
          ),
          playbookSelectedItem: i.Ember.computed.alias(
            "playbook.playbookSelectedItem",
          ),
          displayPlaybookMenu: i.Ember.computed.alias(
            "playbook.displayPlaybookMenu",
          ),
          shouldShowCTA: i.Ember.computed.alias("playbook.shouldShowCta"),
          selectedIcon: i.Ember.computed(
            "playbookSelectedItem",
            "isEquippedPlaybookDisabledForQueue",
            "playbook.defaultPlaybookIcon",
            function () {
              const e = this.get("playbookSelectedItem");
              return !e || this.get("isEquippedPlaybookDisabledForQueue")
                ? this.get("playbook.defaultPlaybookIcon")
                : e.iconPathSmall;
            },
          ),
          actions: {
            showPlaybook: function () {
              this.get("playbook").showPlaybookMenu(), a.play();
            },
            hover: function () {
              o.play();
            },
            hideCta: function () {
              this.get("playbook").closeCta();
            },
            closeButtonClick: function () {
              this.get("playbook").hidePlaybookMenu();
            },
            closeQueueDisabledTooltip: function () {
              this.set("showQueueDisabledTooltip", !1);
            },
          },
        });
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "yEmMGBK5",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-playbook-icon-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-playbook-icon-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-playbook-icon-component\\\\index.js\\" "],["text","\\n"],["block",["if"],[["get",["isEnabled"]]],null,5],["text","\\n"],["block",["if"],[["get",["displayPlaybookMenu"]]],null,1]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["append",["helper",["tft-playbook-menu"],null,[["queueId"],[["get",["queueId"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["block",["uikit-modal"],null,[["type","dismissible","dismissibleType","onClose"],["DialogAlert","true","inside",["helper",["action"],[["get",[null]],"closeButtonClick"],null]]],0]],"locals":[]},{"statements":[["text","      "],["open-element","lol-uikit-flyout-frame",[]],["static-attr","dismissable","true"],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"closeQueueDisabledTooltip"],null],null],["static-attr","class","playbook-tooltip-container"],["flush-element"],["text","\\n        "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-small"],["flush-element"],["text","\\n          "],["open-element","p",[]],["flush-element"],["append",["unknown",["tra","tft_playbook_queue_disabled_body"]],false],["close-element"],["text","\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n    "]],"locals":[]},{"statements":[["block",["if"],[["get",["showQueueDisabledTooltip"]]],null,2]],"locals":[]},{"statements":[["text","      "],["open-element","lol-uikit-flyout-frame",[]],["static-attr","class","playbook-tooltip-container"],["static-attr","orientation","bottom"],["flush-element"],["text","\\n        "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-small"],["flush-element"],["text","\\n          "],["open-element","h4",[]],["flush-element"],["append",["unknown",["tra","tft_playbook_cta_title"]],false],["close-element"],["text","\\n          "],["open-element","hr",[]],["flush-element"],["close-element"],["text","\\n          "],["open-element","p",[]],["flush-element"],["append",["unknown",["tra","tft_playbook_cta_body"]],false],["close-element"],["text","\\n          "],["open-element","lol-uikit-flat-button",[]],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"hideCta"],null],null],["static-attr","class","button glow"],["flush-element"],["append",["unknown",["tra","tft_playbook_cta_button"]],false],["close-element"],["text","\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["open-element","div",[]],["static-attr","class","button-container"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","button-inner-container"],["flush-element"],["text","\\n  "],["open-element","button",[]],["static-attr","class","playbook-button"],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"showPlaybook"],null],null],["dynamic-attr","onmouseover",["helper",["action"],[["get",[null]],"hover"],null],null],["flush-element"],["text","\\n    "],["open-element","img",[]],["dynamic-attr","src",["concat",[["unknown",["selectedIcon"]]]]],["static-attr","class","icon"],["flush-element"],["close-element"],["text","\\n  "],["close-element"],["text","\\n"],["block",["if"],[["get",["shouldShowCTA"]]],null,4,3],["text","    "],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        n(409);
        var s = n(9);
        e.exports = i.Ember.Component.extend({
          layout: n(410),
          classNames: ["tft-playbook-menu"],
          playbook: i.Ember.inject.service("tft-playbook"),
          isEnabled: i.Ember.computed.alias("playbook.playbookEnabled"),
          playbookData: i.Ember.computed.alias("playbook.playbookData"),
          selectedItem: i.Ember.computed.alias("playbook.playbookSelectedItem"),
          selectedItemId: i.Ember.computed.alias("selectedItem.itemId"),
          viewItem: i.Ember.computed.alias("playbook.playbookViewItem"),
          viewItemId: i.Ember.computed.alias("viewItem.itemId"),
          itemData: i.Ember.computed.alias("playbookData.items"),
          shouldDisplayPlaybookTutorial: i.Ember.computed.alias(
            "playbook.shouldDisplayPlaybookTutorial",
          ),
          displayPlaybookItemDetails: i.Ember.computed.alias(
            "playbook.displayItemDetails",
          ),
          queueId: 0,
          detailsDisabled: i.Ember.computed("viewItem", function () {
            const e = this.get("viewItem");
            return !!(
              i.lodash.isEmpty(e.earlyAugments) &&
              i.lodash.isEmpty(e.midAugments) &&
              i.lodash.isEmpty(e.lateAugments)
            );
          }),
          equipDisabled: i.Ember.computed("viewItem", "queueId", function () {
            const e = this.get("viewItem"),
              t = this.get("queueId");
            return s.PAIRS_QUEUE_IDS.includes(t) && e.isDisabledInDoubleUp;
          }),
          name: i.Ember.computed("viewItem.name", function () {
            return this.get("viewItem.name").replace(/: .*/, "");
          }),
          subName: i.Ember.computed("viewItem.name", function () {
            return this.get("viewItem.name").replace(/^[^:]+: /, "");
          }),
          sidePanelBackgroundStyle: i.Ember.computed(
            "viewItem.splashPath",
            function () {
              return `background-image: url(${this.get("viewItem.splashPath")});`;
            },
          ),
          actions: {
            selectItem: function (e) {
              this.set("playbook.playbookViewItem", e);
            },
            equip: function () {
              const e = this.get("viewItem"),
                t = this.get("playbook");
              t.markCtaAsSeen(), t.updateSelectedItem(e);
            },
            showDetails: function () {
              if (this.get("detailsDisabled")) return;
              this.get("playbook").showItemDetailsMenu();
            },
            showPlaybookTutorial: function () {
              this.get("playbook").showTutorialModal();
            },
            back: function () {
              this.get("playbook").hideItemDetailsMenu();
            },
          },
        });
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "UY5T55VG",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-playbook-menu-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-playbook-menu-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-playbook-menu-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","playbook-text-container"],["flush-element"],["text","\\n    "],["open-element","span",[]],["static-attr","class","title"],["flush-element"],["append",["unknown",["tra","tft_playbook_title"]],false],["close-element"],["open-element","br",[]],["flush-element"],["close-element"],["text","\\n    "],["open-element","lol-uikit-info-icon",[]],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"showPlaybookTutorial"],null],null],["flush-element"],["close-element"],["text","\\n"],["close-element"],["text","\\n"],["open-element","div",[]],["static-attr","class","playbook-bottom-container"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","left-container"],["flush-element"],["text","\\n        "],["open-element","lol-uikit-scrollable",[]],["static-attr","class","scroller"],["static-attr","overflow-masks","enabled"],["flush-element"],["text","\\n            "],["open-element","ul",[]],["static-attr","class","selection-display"],["flush-element"],["text","\\n"],["block",["each"],[["get",["itemData"]]],null,3],["text","            "],["close-element"],["text","\\n        "],["close-element"],["text","\\n        "],["append",["helper",["tft-playbook-item-details"],null,[["isShown"],[["get",["displayPlaybookItemDetails"]]]]],false],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","playbook-right-container"],["dynamic-attr","style",["unknown",["sidePanelBackgroundStyle"]],null],["flush-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","description-container"],["flush-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","name-text"],["flush-element"],["append",["unknown",["name"]],false],["close-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","name-divider"],["flush-element"],["close-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","sub-name-text"],["flush-element"],["append",["unknown",["subName"]],false],["close-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","description-text"],["flush-element"],["append",["unknown",["viewItem","description"]],false],["close-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","button-divider"],["flush-element"],["close-element"],["text","\\n        "],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","playbook-button-container"],["flush-element"],["text","\\n"],["block",["if"],[["get",["displayPlaybookItemDetails"]]],null,2,1],["text","        "],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","playbook-button-container"],["flush-element"],["text","\\n            "],["open-element","lol-uikit-flat-button",[]],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"equip"],null],null],["static-attr","class","button glow"],["static-attr","primary","true"],["dynamic-attr","disabled",["unknown",["equipDisabled"]],null],["flush-element"],["append",["unknown",["tra","tft_playbook_button_equip"]],false],["close-element"],["text","\\n        "],["close-element"],["text","\\n    "],["close-element"],["text","\\n"],["close-element"],["text","\\n"],["block",["if"],[["get",["shouldDisplayPlaybookTutorial"]]],null,0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["append",["unknown",["tft-playbook-tutorial"]],false],["text","\\n"]],"locals":[]},{"statements":[["text","                "],["open-element","lol-uikit-flat-button",[]],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"showDetails"],null],null],["static-attr","class","button glow"],["static-attr","primary","false"],["dynamic-attr","disabled",["unknown",["detailsDisabled"]],null],["flush-element"],["append",["unknown",["tra","tft_playbook_button_details"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","                "],["open-element","lol-uikit-flat-button",[]],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"back"],null],null],["static-attr","class","button glow"],["static-attr","primary","false"],["flush-element"],["append",["unknown",["tra","tft_playbook_button_back"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","                    "],["append",["helper",["tft-playbook-item"],null,[["item","onSelectItem","selectedItemId","viewItemId","queueId"],[["get",["currItem"]],["helper",["action"],[["get",[null]],"selectItem"],null],["get",["selectedItemId"]],["get",["viewItemId"]],["get",["queueId"]]]]],false],["text","\\n"]],"locals":["currItem"]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        n(412);
        var s = n(9);
        const o = "playbook-equipped-icon",
          a = i.Audio.getChannel("sfx-ui").createSound(
            "/fe/lol-static-assets/sounds/sfx-uikit-button-generic-hover.ogg",
          ),
          r = i.Audio.getChannel("sfx-ui").createSound(
            "/fe/lol-static-assets/sounds/sfx-uikit-button-generic-click.ogg",
          );
        e.exports = i.Ember.Component.extend({
          layout: n(413),
          classNames: ["tft-playbook-item"],
          playbook: i.Ember.inject.service("tft-playbook"),
          item: {},
          selectedItemId: -1,
          viewItemId: -1,
          queueId: 0,
          isDisabled: i.Ember.computed(
            "queueId",
            "item.isDisabledInDoubleUp",
            function () {
              const e = this.get("queueId");
              return (
                s.PAIRS_QUEUE_IDS.includes(e) &&
                this.get("item.isDisabledInDoubleUp")
              );
            },
          ),
          name: i.Ember.computed("item.name", function () {
            return this.get("item.name").replace(/: .*/, "");
          }),
          equippedIcon: i.Ember.computed(
            "playbook.playbookAssets",
            function () {
              const e = this.get("playbook.playbookAssets");
              return e && e[o] ? e[o] : "";
            },
          ),
          isSelected: i.Ember.computed("item", "viewItemId", function () {
            const e = this.get("item"),
              t = this.get("viewItemId");
            return e.itemId === t;
          }),
          isEquipped: i.Ember.computed("item", "selectedItemId", function () {
            const e = this.get("item"),
              t = this.get("selectedItemId");
            return e.itemId === t;
          }),
          actions: {
            select: function () {
              const e = this.get("item");
              this.get("onSelectItem")(e), r.play();
            },
            hover: function () {
              a.play();
            },
          },
        });
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "nIZacad/",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-playbook-item-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-playbook-item-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-playbook-item-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["dynamic-attr","class",["helper",["if"],[["get",["isDisabled"]],"tft-playbook-item-container disabled","tft-playbook-item-container"],null],null],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"select"],null],null],["dynamic-attr","onmouseover",["helper",["action"],[["get",[null]],"hover"],null],null],["dynamic-attr","selected",["unknown",["isSelected"]],null],["flush-element"],["text","\\n    "],["open-element","img",[]],["dynamic-attr","src",["concat",[["unknown",["item","iconPath"]]]]],["static-attr","class","image-container"],["flush-element"],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","image-background"],["flush-element"],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","name-container"],["flush-element"],["append",["unknown",["name"]],false],["close-element"],["text","\\n"],["block",["if"],[["get",["isEquipped"]]],null,0],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","        "],["open-element","img",[]],["dynamic-attr","src",["unknown",["equippedIcon"]],null],["static-attr","class","equipped-icon"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        n(415),
          (e.exports = i.Ember.Component.extend({
            layout: n(416),
            classNames: ["tft-playbook-item-details"],
            classNameBindings: ["isShown"],
            playbook: i.Ember.inject.service("tft-playbook"),
            viewItem: i.Ember.computed.alias("playbook.playbookViewItem"),
            scrollObserver: i.Ember.on(
              "DidInsertElement",
              i.Ember.observer("playbook.displayItemDetails", function () {
                if (this.get("playbook.displayItemDetails")) {
                  this.$("#playbook-selection-scroller").get(0).scrollTop = 0;
                }
              }),
            ),
          }));
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "yxBzmskh",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-playbook-item-details-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-playbook-item-details-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-playbook-item-details-component\\\\index.js\\" "],["text","\\n\\n"],["open-element","lol-uikit-scrollable",[]],["static-attr","class","scroller"],["static-attr","overflow-masks","enabled"],["static-attr","id","playbook-selection-scroller"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","divider-text"],["flush-element"],["append",["unknown",["tra","tft_playbook_section1_text"]],false],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","divider-line"],["flush-element"],["close-element"],["text","\\n    "],["open-element","ul",[]],["static-attr","class","card-container"],["flush-element"],["text","\\n"],["block",["each"],[["get",["viewItem","earlyAugments"]]],null,2],["text","    "],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","divider-text"],["flush-element"],["append",["unknown",["tra","tft_playbook_section2_text"]],false],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","divider-line"],["flush-element"],["close-element"],["text","\\n    "],["open-element","ul",[]],["static-attr","class","card-container"],["flush-element"],["text","\\n"],["block",["each"],[["get",["viewItem","midAugments"]]],null,1],["text","    "],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","divider-text"],["flush-element"],["append",["unknown",["tra","tft_playbook_section3_text"]],false],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","divider-line"],["flush-element"],["close-element"],["text","\\n    "],["open-element","ul",[]],["static-attr","class","card-container"],["flush-element"],["text","\\n"],["block",["each"],[["get",["viewItem","lateAugments"]]],null,0],["text","    "],["close-element"],["text","\\n"],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","            "],["append",["helper",["tft-playbook-card"],null,[["name","rawDescription","iconPath","effectAmounts"],[["get",["currAugment","name"]],["get",["currAugment","description"]],["get",["currAugment","iconPath"]],["get",["currAugment","effectAmounts"]]]]],false],["text","\\n"]],"locals":["currAugment"]},{"statements":[["text","            "],["append",["helper",["tft-playbook-card"],null,[["name","rawDescription","iconPath","effectAmounts"],[["get",["currAugment","name"]],["get",["currAugment","description"]],["get",["currAugment","iconPath"]],["get",["currAugment","effectAmounts"]]]]],false],["text","\\n"]],"locals":["currAugment"]},{"statements":[["text","            "],["append",["helper",["tft-playbook-card"],null,[["name","rawDescription","iconPath","effectAmounts"],[["get",["currAugment","name"]],["get",["currAugment","description"]],["get",["currAugment","iconPath"]],["get",["currAugment","effectAmounts"]]]]],false],["text","\\n"]],"locals":["currAugment"]}],"hasPartials":false}',
          meta: {},
        });
      },
      (module, __unused_webpack_exports, __webpack_require__) => {
        "use strict";
        var _riotclientAsyncProviderProxy = __webpack_require__(1);
        __webpack_require__(418);
        const GDS_PLAYBOOK_ASSET_AUGMENT_CARD_HOLDER_KEY =
          "playbook-augment-card-holder";
        module.exports = _riotclientAsyncProviderProxy.Ember.Component.extend({
          layout: __webpack_require__(419),
          classNames: ["tft-playbook-card"],
          playbook:
            _riotclientAsyncProviderProxy.Ember.inject.service("tft-playbook"),
          name: "",
          rawDescription: "",
          iconPath: "",
          effectAmounts: [],
          cardHolderBackgroundStyle:
            _riotclientAsyncProviderProxy.Ember.computed(
              "playbook.playbookAssets",
              function () {
                const e = this.get("playbook.playbookAssets");
                if (!e || !e[GDS_PLAYBOOK_ASSET_AUGMENT_CARD_HOLDER_KEY])
                  return "";
                return `background-image: url(${e[GDS_PLAYBOOK_ASSET_AUGMENT_CARD_HOLDER_KEY]});`;
              },
            ),
          description: _riotclientAsyncProviderProxy.Ember.computed(
            "rawDescription",
            "effectAmounts",
            function () {
              const rawDescription = this.get("rawDescription"),
                effectAmounts = this.get("effectAmounts").sort(
                  (e, t) => t.name.length - e.name.length,
                );
              return rawDescription
                .replaceAll(
                  /\@([^@]+)\@/g,
                  function (match, rawExpr, offset, string) {
                    if (rawExpr.startsWith("TFTUnitProperty")) return "";
                    let expr = rawExpr.toLowerCase();
                    effectAmounts.forEach((e) => {
                      expr = expr.replaceAll(
                        e.name.toLowerCase(),
                        e.value.toString(),
                      );
                    });
                    let exprResult = null;
                    try {
                      exprResult = eval(
                        expr.replace(/[^0-9\(\)\+\-\*\/\.]/g, ""),
                      );
                    } catch {
                      return match;
                    }
                    return exprResult
                      ? exprResult
                          .toFixed(2)
                          .toString()
                          .replace(/\.?0*$/, "")
                      : match;
                  },
                )
                .trim();
            },
          ),
        });
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "+LUbuAXC",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-playbook-card-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-playbook-card-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-playbook-card-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","holder"],["dynamic-attr","style",["unknown",["cardHolderBackgroundStyle"]],null],["flush-element"],["text","\\n    "],["open-element","img",[]],["dynamic-attr","src",["concat",[["unknown",["iconPath"]]]]],["static-attr","class","playbook-augment-icon"],["flush-element"],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","name-container"],["flush-element"],["append",["unknown",["name"]],false],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","description-container"],["flush-element"],["append",["unknown",["description"]],true],["close-element"],["text","\\n"],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        n(421),
          (e.exports = i.Ember.Component.extend({
            layout: n(422),
            classNames: ["tft-playbook-tutorial"],
            playbook: i.Ember.inject.service("tft-playbook"),
            actions: {
              closeButtonClick: function () {
                this.get("playbook").hideTutorialModal();
              },
            },
          }));
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "XLlTVDaT",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-playbook-tutorial-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-playbook-tutorial-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-playbook-tutorial-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","playbook-tutorial-inner"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","playbook-tutorial-splash-art"],["flush-element"],["close-element"],["text","\\n    "],["open-element","h4",[]],["static-attr","class","playbook-tutorial-subtitle"],["flush-element"],["append",["unknown",["tra","tft_playbook_tutorial_subtitle"]],false],["close-element"],["text","\\n    "],["open-element","h3",[]],["static-attr","class","playbook-tutorial-title"],["flush-element"],["append",["unknown",["tra","tft_playbook_tutorial_title"]],false],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","playbook-tutorial-divider"],["flush-element"],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","playbook-tutorial-body"],["flush-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","playbook-tutorial-right-col"],["flush-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","playbook-tutorial-paragraph playbook-tutorial-paragraph-1"],["flush-element"],["text","\\n                "],["open-element","div",[]],["static-attr","class","playbook-tutorial-paragraph-icon"],["flush-element"],["close-element"],["text","\\n                "],["open-element","h4",[]],["static-attr","class","playbook-tutorial-paragraph-header"],["flush-element"],["append",["unknown",["tra","tft_playbook_tutorial_paragraph_header_1"]],false],["close-element"],["text","\\n                "],["open-element","p",[]],["static-attr","class","playbook-tutorial-paragraph-body"],["flush-element"],["append",["unknown",["tra","tft_playbook_tutorial_paragraph_body_1"]],false],["close-element"],["text","\\n            "],["close-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","playbook-tutorial-paragraph playbook-tutorial-paragraph-2"],["flush-element"],["text","\\n                "],["open-element","div",[]],["static-attr","class","playbook-tutorial-paragraph-icon"],["flush-element"],["close-element"],["text","\\n                "],["open-element","h4",[]],["static-attr","class","playbook-tutorial-paragraph-header"],["flush-element"],["append",["unknown",["tra","tft_playbook_tutorial_paragraph_header_2"]],false],["close-element"],["text","\\n                "],["open-element","p",[]],["static-attr","class","playbook-tutorial-paragraph-body"],["flush-element"],["append",["unknown",["tra","tft_playbook_tutorial_paragraph_body_2"]],false],["close-element"],["text","\\n            "],["close-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","playbook-tutorial-paragraph playbook-tutorial-paragraph-3"],["flush-element"],["text","\\n                "],["open-element","div",[]],["static-attr","class","playbook-tutorial-paragraph-icon"],["flush-element"],["close-element"],["text","\\n                "],["open-element","h4",[]],["static-attr","class","playbook-tutorial-paragraph-header"],["flush-element"],["append",["unknown",["tra","tft_playbook_tutorial_paragraph_header_3"]],false],["close-element"],["text","\\n                "],["open-element","p",[]],["static-attr","class","playbook-tutorial-paragraph-body"],["flush-element"],["append",["unknown",["tra","tft_playbook_tutorial_paragraph_body_3"]],false],["close-element"],["text","\\n            "],["close-element"],["text","\\n        "],["close-element"],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","playbook-tutorial-footer"],["flush-element"],["text","\\n        "],["open-element","lol-uikit-flat-button-group",[]],["static-attr","type","dialog-frame"],["flush-element"],["text","\\n                "],["open-element","lol-uikit-flat-button",[]],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"closeButtonClick"],null],null],["static-attr","class","button glow"],["static-attr","primary","true"],["flush-element"],["append",["unknown",["tra","tft_playbook_tutorial_close"]],false],["close-element"],["text","\\n        "],["close-element"],["text","\\n    "],["close-element"],["text","\\n"],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.default = void 0);
        var i = n(1);
        n(424);
        const s = i.UIKit.getVignetteCelebrationManager();
        var o = i.Ember.Component.extend({
          classNames: ["rcp-fe-lol-parties-reward-celebration"],
          layout: n(425),
          selectedReward: null,
          softSelectionMade: !1,
          didDestroyElement() {
            null !== this.get("selectedReward") &&
              this.set("selectedReward", null);
          },
          actions: {
            selectReward(e, t) {
              t.target.disabled ||
                (null !== this.get("selectedReward") &&
                  this.set("selectedReward.isSelected", !1),
                this.set("selectedReward", e),
                this.set("selectedReward.isSelected", !0),
                this.set("softSelectionMade", !0),
                s.update({ id: this.id, data: { nextButtonEnabled: !0 } }));
            },
          },
        });
        t.default = o;
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "XcCTp1Ia",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-reward-celebration-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-reward-celebration-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-reward-celebration-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","rewards-container"],["flush-element"],["text","\\n"],["block",["each"],[["get",["rewards"]]],null,2],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","reward"],["flush-element"],["text","\\n        "],["open-element","div",[]],["dynamic-attr","class",["concat",["reward-icon ",["unknown",["reward","rewardType"]]]]],["flush-element"],["text","\\n          "],["open-element","img",[]],["dynamic-attr","src",["unknown",["reward","iconUrl"]],null],["flush-element"],["close-element"],["text","\\n        "],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","reward-description-wrapper"],["flush-element"],["text","\\n          "],["open-element","div",[]],["static-attr","class","reward-description"],["flush-element"],["append",["unknown",["reward","description"]],false],["close-element"],["text","\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"selectReward",["get",["reward"]]],null],null],["dynamic-attr","class",["concat",["reward selectable \\n          ",["helper",["if"],[["get",["reward","isSelected"]],"selected"],null]," \\n          ",["helper",["if"],[["get",["softSelectionMade"]],"selection-made"],null]]]],["flush-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","brightener-bg"],["flush-element"],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","dimmer-bg"],["flush-element"],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","radial-glow"],["flush-element"],["close-element"],["text","\\n        "],["open-element","div",[]],["dynamic-attr","class",["concat",["reward-icon ",["unknown",["reward","rewardType"]]]]],["flush-element"],["text","\\n          "],["open-element","img",[]],["dynamic-attr","src",["unknown",["reward","iconUrl"]],null],["flush-element"],["close-element"],["text","\\n        "],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","reward-description-wrapper"],["flush-element"],["text","\\n          "],["open-element","div",[]],["static-attr","class","reward-description"],["flush-element"],["append",["unknown",["reward","description"]],false],["close-element"],["text","\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["selectable"]]],null,1,0]],"locals":["reward"]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1),
          s = n(59);
        const o = i.Ember.Component.extend({
          layout: n(427),
          classNames: ["parties-queue-error-dialog"],
          lobbiesService: i.Ember.inject.service("lobbies"),
          currentPlayer: i.Ember.computed.alias("lobbiesService.currentPlayer"),
          showError: i.Ember.computed.notEmpty("dialogSubComponent"),
          dialogSubComponent: i.Ember.computed("errorType", function () {
            switch (this.get("errorType")) {
              case s.SEARCH_ERROR_TYPES.QUEUE_DODGER:
                return "party-queue-error-dialog-queue-dodge";
              case s.SEARCH_ERROR_TYPES.LEAVER_BUSTER_QUEUE_DELAY:
                return "party-queue-error-dialog-leaver-busted";
              case s.SEARCH_ERROR_TYPES.LEAVER_BUSTER_QUEUE_LOCKOUT:
                return "party-queue-error-dialog-leaver-buster-lockout";
              case s.SEARCH_ERROR_TYPES.LEAVER_BUSTER_TAINTED_WARNING:
                return this.get("currentPlayer.summonerId") ===
                  this.get("errorData.penalizedSummonerId")
                  ? ""
                  : "party-queue-error-dialog-leaver-buster-tainted-warning";
              case s.SEARCH_ERROR_TYPES.RANKED_MIN_LEVEL:
                return "party-queue-error-dialog-min-level";
              case s.SEARCH_ERROR_TYPES.PREREQUISITE_QUEUES_NOT_PLAYED:
                return "party-queue-error-dialog-prerequisite-queues-not-played";
              default:
                return "party-queue-error-dialog-generic";
            }
          }),
        });
        e.exports = o;
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "CBY3bfuw",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\queue-error-dialog-component\\\\layout.hbs\\" style-path=\\"null\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\queue-error-dialog-component\\\\index.js\\" "],["text","\\n"],["block",["if"],[["get",["showError"]]],null,0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","parties-queue-error-content"],["flush-element"],["text","\\n    "],["append",["helper",["component"],[["get",["dialogSubComponent"]]],[["errorData"],[["get",["errorData"]]]]],false],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        e.exports = i.Ember.Component.extend({ layout: n(429) });
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "xJFHKfxm",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\queue-error-dialog-component\\\\generic\\\\layout.hbs\\" style-path=\\"null\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\queue-error-dialog-component\\\\generic\\\\index.js\\" "],["text","\\n"],["open-element","lol-uikit-content-block",[]],["static-attr","type","dialog-large"],["flush-element"],["text","\\n  "],["open-element","h4",[]],["flush-element"],["append",["unknown",["tra","parties_queue_error_generic_header"]],false],["close-element"],["text","\\n  "],["open-element","hr",[]],["static-attr","class","heading-spacer"],["flush-element"],["close-element"],["text","\\n  "],["open-element","p",[]],["flush-element"],["append",["helper",["sanitize"],[["get",["tra","parties_queue_error_generic_body$html"]]],null],false],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        e.exports = i.Ember.Component.extend({ layout: n(431) });
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "plYxyER7",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\queue-error-dialog-component\\\\min-level\\\\layout.hbs\\" style-path=\\"null\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\queue-error-dialog-component\\\\min-level\\\\index.js\\" "],["text","\\n"],["open-element","lol-uikit-content-block",[]],["static-attr","type","dialog-large"],["flush-element"],["text","\\n  "],["open-element","h4",[]],["flush-element"],["append",["unknown",["tra","parties_queue_error_min_level_header"]],false],["close-element"],["text","\\n  "],["open-element","hr",[]],["static-attr","class","heading-spacer"],["flush-element"],["close-element"],["text","\\n  "],["open-element","p",[]],["flush-element"],["append",["unknown",["tra","parties_queue_error_min_level_body"]],false],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        e.exports = i.Ember.Component.extend({ layout: n(433) });
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "olgatSdu",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\queue-error-dialog-component\\\\leaver-busted\\\\layout.hbs\\" style-path=\\"null\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\queue-error-dialog-component\\\\leaver-busted\\\\index.js\\" "],["text","\\n"],["open-element","lol-uikit-content-block",[]],["static-attr","type","dialog-large"],["flush-element"],["text","\\n  "],["open-element","h4",[]],["flush-element"],["append",["unknown",["tra","parties_queue_error_leaver_busted_header"]],false],["close-element"],["text","\\n  "],["open-element","hr",[]],["static-attr","class","heading-spacer"],["flush-element"],["close-element"],["text","\\n  "],["open-element","p",[]],["flush-element"],["append",["unknown",["tra","parties_queue_error_leaver_busted_body"]],false],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1),
          s = n(60);
        n(435);
        const o = i.Ember.Object.extend(i.Ember.PromiseProxyMixin),
          a = i.Ember.Object.extend({
            penalizedSummonerId: 0,
            penaltyTimeRemaining: 0,
            formattedTimeRemaining: i.Ember.computed(
              "penaltyTimeRemaining",
              function () {
                return (0, s.formatThreeLargestUnits)(
                  this.get("penaltyTimeRemaining"),
                );
              },
            ),
          }),
          r = i.Ember.Object.extend({
            penalizedSummonerId: 0,
            playerNameFull: "",
          });
        e.exports = i.Ember.Component.extend({
          layout: n(436),
          classNames: ["leaver-buster-lockout-error-dialog"],
          init(...e) {
            this._super(...e),
              (this._playerNames = i.playerNames),
              this.set("penalizedSummoners", i.Ember.A()),
              (this.binding = i.dataBinding.bindTo(
                (0, i.getProvider)().getSocket(),
              )),
              this.binding.observe(
                "/lol-matchmaking/v1/search",
                this,
                this.handleMatchMakingSearch,
              );
          },
          willDestroyElement() {
            this.binding.unobserve("/lol-matchmaking/v1/search", this);
          },
          penalizedAliases: i.Ember.computed.alias(
            "penalizedAliasesProxy.content",
          ),
          penalizedAliasesProxy: i.Ember.computed(
            "penalizedSummoners.@each.penalizedSummonerId",
            function () {
              const e = this.get("penalizedSummoners");
              return (
                e.length &&
                o.create({
                  promise: Promise.all(
                    e.map(async (e) => {
                      const t = e.get("penalizedSummonerId"),
                        { playerNameFull: n } =
                          await this._playerNames.getDisplayNameBySummonerId(t);
                      return r.create({
                        penalizedSummonerId: t,
                        playerNameFull: n,
                      });
                    }),
                  ),
                })
              );
            },
          ),
          handleMatchMakingSearch(e = {}) {
            const t = this.get("penalizedSummoners"),
              { errors: n = [] } = e;
            for (const {
              errorType: e,
              penalizedSummonerId: i,
              penaltyTimeRemaining: s,
            } of n) {
              if ("LEAVER_BUSTER_QUEUE_LOCKOUT" !== e) continue;
              const n = t.findBy("penalizedSummonerId", i);
              n
                ? n.set("penaltyTimeRemaining", s)
                : t.addObject(
                    a.create({
                      penalizedSummonerId: i,
                      penaltyTimeRemaining: s,
                    }),
                  ),
                t.sortBy("penaltyTimeRemaining").reverseObjects();
            }
          },
          punishedPlayers: i.Ember.computed(
            "penalizedAliases",
            "penalizedSummoners.@each.formattedTimeRemaining",
            function () {
              const e = i.Ember.A(this.get("penalizedAliases"));
              return this.get("penalizedSummoners")
                .map((t) => {
                  const n = e.findBy(
                    "penalizedSummonerId",
                    t.get("penalizedSummonerId"),
                  );
                  return {
                    displayName: n?.get("playerNameFull"),
                    penaltyTimeRemaining: t.get("formattedTimeRemaining"),
                  };
                })
                .filter(({ displayName: e }) => e);
            },
          ),
        });
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "mOc98/To",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\queue-error-dialog-component\\\\leaver-buster-lockout\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\queue-error-dialog-component\\\\leaver-buster-lockout\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\queue-error-dialog-component\\\\leaver-buster-lockout\\\\index.js\\" "],["text","\\n"],["open-element","lol-uikit-content-block",[]],["static-attr","type","dialog-large"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","leaver-buster-lockout-modal"],["flush-element"],["text","\\n    "],["open-element","h3",[]],["flush-element"],["append",["unknown",["tra","parties_queue_error_leaver_buster_lockout_header"]],false],["close-element"],["text","\\n    "],["open-element","hr",[]],["static-attr","class","heading-spacer"],["flush-element"],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","lockout-error-body"],["flush-element"],["text","\\n      "],["open-element","p",[]],["flush-element"],["append",["helper",["sanitize"],[["get",["tra","parties_queue_error_leaver_buster_lockout_general_body"]]],null],false],["close-element"],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","br",[]],["flush-element"],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","lockout-queue-lockout-timer"],["flush-element"],["text","\\n      "],["open-element","p",[]],["flush-element"],["text","\\n      "],["open-element","h5",[]],["static-attr","class","lockout-timer-label subhead"],["flush-element"],["append",["unknown",["tra","parties_queue_error_leaver_buster_lockout_timer"]],false],["close-element"],["text","\\n      "],["close-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","lockout-player-table"],["flush-element"],["text","\\n"],["block",["each"],[["get",["punishedPlayers"]]],null,0],["text","      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n"],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","        "],["open-element","div",[]],["static-attr","class","lockout-player-row"],["flush-element"],["text","\\n          "],["open-element","div",[]],["static-attr","class","lockout-player-name"],["flush-element"],["text","\\n            "],["append",["unknown",["punishedPlayer","displayName"]],false],["text","\\n          "],["close-element"],["text","\\n          "],["open-element","div",[]],["static-attr","class","lockout-player-punishment-timer"],["flush-element"],["text","\\n            "],["append",["unknown",["punishedPlayer","penaltyTimeRemaining"]],false],["text","\\n          "],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":["punishedPlayer"]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        const s = i.Ember.Object.extend(i.Ember.PromiseProxyMixin);
        e.exports = i.Ember.Component.extend({
          layout: n(438),
          penalizedSummonerNameProxy: i.Ember.computed(
            "errorData.penalizedSummonerId",
            function () {
              const e = this.get("searchError.penalizedSummonerId");
              return (
                e &&
                s.create({
                  promise: i.playerNames.getDisplayNameBySummonerId(e),
                })
              );
            },
          ),
          penalizedSummonerDisplayName: i.Ember.computed.alias(
            "penalizedSummonerNameProxy.content.playerNameFull",
          ),
          leaverBusterWarningTextHeader: i.Ember.computed(function () {
            return this.get("tra").formatString(
              "parties_queue_error_leaver_buster_party_has_member_warning_not_accepted_header",
            );
          }),
          leaverBusterWarningTextBody: i.Ember.computed(
            "penalizedSummonerDisplayName",
            function () {
              return this.get("tra").formatString(
                "parties_queue_error_leaver_buster_party_has_member_warning_not_accepted_body",
                {
                  penalizedSummonerName: this.get(
                    "penalizedSummonerDisplayName",
                  ),
                },
              );
            },
          ),
        });
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "kzEKVV5q",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\queue-error-dialog-component\\\\leaver-buster-tainted-warning\\\\layout.hbs\\" style-path=\\"null\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\queue-error-dialog-component\\\\leaver-buster-tainted-warning\\\\index.js\\" "],["text","\\n"],["open-element","lol-uikit-content-block",[]],["static-attr","type","dialog-large"],["flush-element"],["text","\\n  "],["open-element","h4",[]],["flush-element"],["append",["unknown",["leaverBusterWarningTextHeader"]],false],["close-element"],["text","\\n  "],["open-element","hr",[]],["static-attr","class","heading-spacer"],["flush-element"],["close-element"],["text","\\n  "],["open-element","p",[]],["flush-element"],["append",["unknown",["leaverBusterWarningTextBody"]],false],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i,
          s = n(1),
          o = (i = n(60)) && i.__esModule ? i : { default: i };
        n(440);
        const a = s.Ember.Object.extend(s.Ember.PromiseProxyMixin),
          r = (0, s.emberDataBinding)({
            Ember: s.Ember,
            websocket: (0, s.getProvider)().getSocket(),
            logPrefix: "party:queue-error-dialog:queue-dodge:component",
            basePaths: {
              matchmaking: "/lol-matchmaking",
              summoner: "/lol-summoner",
            },
            boundProperties: {
              currentSummoner: {
                api: "summoner",
                path: "/v1/current-summoner",
              },
              search: { api: "matchmaking", path: "/v1/search" },
            },
          });
        e.exports = s.Ember.Component.extend(r, {
          layout: n(441),
          classNames: ["queue-dodge-error-dialog"],
          init(...e) {
            this._super(...e), (this._playerNames = s.playerNames);
          },
          searchError: s.Ember.computed(
            "search.errors",
            "search.errors.[].penaltyTimeRemaining",
            function () {
              const e = this.get("search.errors");
              if (!e) return null;
              const t = e.find(function (e) {
                return "QUEUE_DODGER" === e.errorType;
              }, this);
              return t || e[0];
            },
          ),
          timeRemaining: s.Ember.computed.readOnly(
            "searchError.penaltyTimeRemaining",
          ),
          hasTimeRemaining: s.Ember.computed.gt("timeRemaining", 0),
          timeRemainingFormatted: s.Ember.computed(
            "timeRemaining",
            function () {
              return o.default.formatSeconds(this.get("timeRemaining"));
            },
          ),
          penalizedSummonerIsMe: s.Ember.computed(
            "searchError.penalizedSummonerId",
            "currentSummoner.summonerId",
            function () {
              return (
                this.get("searchError.penalizedSummonerId") ===
                this.get("currentSummoner.summonerId")
              );
            },
          ),
          penalizedSummonerDisplayName: s.Ember.computed.alias(
            "penalizedSummonerNameProxy.content.playerNameFull",
          ),
          penalizedSummonerNameProxy: s.Ember.computed(
            "searchError.penalizedSummonerId",
            function () {
              const e = this.get("searchError.penalizedSummonerId");
              return (
                e &&
                a.create({
                  promise: this._playerNames.getDisplayNameBySummonerId(e),
                })
              );
            },
          ),
          queueErrorMessage: s.Ember.computed(
            "penalizedSummonerDisplayName",
            "penalizedSummonerIsMe",
            "tra.ready",
            "tra.parties_queue_error_queue_dodge_myself_body",
            "tra.parties_queue_error_queue_dodge_other_body",
            function () {
              return this.get("penalizedSummonerIsMe")
                ? this.get("tra.parties_queue_error_queue_dodge_myself_body")
                : this.get("penalizedSummonerDisplayName")
                  ? this.get("tra").formatString(
                      "parties_queue_error_queue_dodge_other_body",
                      { player: this.get("penalizedSummonerDisplayName") },
                    )
                  : this.get("tra.parties_queue_error_generic_body$html");
            },
          ),
        });
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "MeySz6Gd",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\queue-error-dialog-component\\\\queue-dodge\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\queue-error-dialog-component\\\\queue-dodge\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\queue-error-dialog-component\\\\queue-dodge\\\\index.js\\" "],["text","\\n"],["open-element","lol-uikit-content-block",[]],["static-attr","type","dialog-large"],["flush-element"],["text","\\n  "],["open-element","h4",[]],["flush-element"],["append",["unknown",["tra","parties_queue_error_queue_dodge_header"]],false],["close-element"],["text","\\n  "],["open-element","hr",[]],["static-attr","class","heading-spacer"],["flush-element"],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","parties-queue-error-body"],["flush-element"],["text","\\n      "],["open-element","p",[]],["flush-element"],["append",["unknown",["queueErrorMessage"]],false],["close-element"],["text","\\n    "],["close-element"],["text","\\n\\n    "],["open-element","div",[]],["dynamic-attr","class",["concat",["queue-dodge-timer ",["helper",["if"],[["get",["hasTimeRemaining"]],"","hidden"],null]]]],["flush-element"],["text","\\n      "],["open-element","p",[]],["flush-element"],["text","\\n        "],["open-element","h6",[]],["static-attr","class","queue-dodge-time-remaining-label subhead"],["flush-element"],["append",["unknown",["tra","parties_queue_dodge_timer"]],false],["close-element"],["text","\\n        "],["open-element","h6",[]],["static-attr","class","queue-dodge-time-remaining subhead"],["flush-element"],["append",["unknown",["timeRemainingFormatted"]],false],["close-element"],["text","\\n      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        e.exports = i.Ember.Component.extend({ layout: n(443) });
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "4H1Kpiuf",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\queue-error-dialog-component\\\\prerequisite-queues-not-played\\\\layout.hbs\\" style-path=\\"null\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\queue-error-dialog-component\\\\prerequisite-queues-not-played\\\\index.js\\" "],["text","\\n"],["open-element","lol-uikit-content-block",[]],["static-attr","type","dialog-large"],["flush-element"],["text","\\n  "],["open-element","h4",[]],["flush-element"],["append",["unknown",["tra","parties_queue_error_prerequisite_queues_not_played_header"]],false],["close-element"],["text","\\n  "],["open-element","hr",[]],["static-attr","class","heading-spacer"],["flush-element"],["close-element"],["text","\\n  "],["open-element","p",[]],["flush-element"],["append",["unknown",["tra","parties_queue_error_prerequisite_queues_not_played_body"]],false],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        n(445);
        var s = c(n(53)),
          o = c(n(94)),
          a = c(n(72)),
          r = c(n(19)),
          l = n(446);
        function c(e) {
          return e && e.__esModule ? e : { default: e };
        }
        const { RunMixin: m } = i.EmberAddons.EmberLifeline;
        function u(e, t) {
          return e.isHonorRecognized && t.isHonorRecognized
            ? t.gameId - e.gameId
            : e.isHonorRecognized && t.isRecentlyPlayed
              ? -1
              : e.isRecentlyPlayed && t.isHonorRecognized
                ? 1
                : e.isRecentlyPlayed && t.isRecentlyPlayed
                  ? t.gameId - e.gameId
                  : void 0;
        }
        e.exports = i.Ember.Component.extend(
          m,
          a.default,
          r.default,
          o.default,
          {
            layout: n(447),
            classNames: ["parties-invite-dialog"],
            lobbiesService: i.Ember.inject.service("lobbies"),
            customGamesService: i.Ember.inject.service("custom-games"),
            invitesService: i.Ember.inject.service("invites"),
            chatService: i.Ember.inject.service("chat"),
            summonerService: i.Ember.inject.service("summoner"),
            currentPartyMemberIds: i.Ember.computed.alias(
              "lobbiesService.currentPartyMemberIds",
            ),
            isCurrentPlayerPartyLeader: i.Ember.computed.alias(
              "lobbiesService.isCurrentPlayerPartyLeader",
            ),
            currentPartyIsFull: i.Ember.computed.alias(
              "lobbiesService.currentPartyIsFull",
            ),
            recognitionHistorySummonerIds: i.Ember.computed(
              "recognitionHistory",
              function () {
                return new Set(
                  (this.get("recognitionHistory") || []).map(
                    ({ summonerId: e }) => e,
                  ),
                );
              },
            ),
            recentlyPlayedSummoners: i.Ember.computed(
              "matchHistoryRecentlyPlayedSummoners",
              "recognitionHistorySummonerIds",
              function () {
                const e = this.get("matchHistoryRecentlyPlayedSummoners") || [],
                  t = this.get("recognitionHistorySummonerIds"),
                  n = e.reduce(function (e, n) {
                    return (
                      t.has(n.summonerId)
                        ? e.push({ ...n, isHonorRecognized: !0 })
                        : e.push({ ...n, isRecentlyPlayed: !0 }),
                      e
                    );
                  }, []);
                return n.sort(u), n;
              },
            ),
            recentGroup: i.Ember.computed(
              "recentlyPlayedSummoners",
              function () {
                const e = this.get("recentlyPlayedSummoners");
                if (0 === e.length) return null;
                return {
                  friends: e.map((e) =>
                    s.default.create({
                      summonerId: e.summonerId,
                      puuid: e.puuid,
                      name: e.summonerName,
                      gameName: e.gameName,
                      gameTag: e.tagLine,
                      checked: !1,
                      isHonorRecognized: e.isHonorRecognized || !1,
                      isRecentlyPlayed: e.isRecentlyPlayed || !1,
                      championId: e.championId,
                      isInRecentGroup: !0,
                    }),
                  ),
                  name: "recently-played",
                };
              },
            ),
            me: i.Ember.computed.alias("chatService.me"),
            friends: i.Ember.computed.alias("chatService.friends"),
            searchError: !1,
            onDidInsertElement: i.Ember.on("didInsertElement", function () {
              this.element.addEventListener("sendInvitesClicked", () => {
                this.send("sendInvites");
              }),
                this.element.addEventListener("destroyComponent", () => {
                  this.send("destroyApplication");
                }),
                this.element.addEventListener("initInviteDialog", () => {
                  this.send("initDialog");
                }),
                this.runTask(function () {
                  const e = this.element.querySelector(
                    ".player-name-input-component input",
                  );
                  e && e.focus();
                }, 300),
                this._super();
            }),
            inviteableFriends: i.Ember.computed(
              "me",
              "friends.@each.{canBeInvited,platformId,product}",
              "currentPartyMembersIds.[]",
              "recentGroup",
              function () {
                const e = this.get("me"),
                  t = this.get("friends"),
                  n = this.get("recentGroup")
                    ? this.get("recentGroup").friends
                    : [];
                if (!t) return i.Ember.A([...n]);
                const s = i.Ember.A(t.filter((t) => t.canBeInvitedBy(e))),
                  o = this.get("currentPartyMemberIds") || i.Ember.A(),
                  a = s.reject(function (e) {
                    return -1 !== o.indexOf(e.summonerId);
                  });
                return i.Ember.A([...a, ...n]);
              },
            ),
            selectedInviteableFriends: i.Ember.computed.filterBy(
              "inviteableFriends",
              "checked",
              !0,
            ),
            inviteableSummoners: i.Ember.A(),
            selectedSummoners: i.Ember.computed.filterBy(
              "inviteableSummoners",
              "checked",
              !0,
            ),
            haveSelectedFriends: i.Ember.computed.gt(
              "selectedInviteableFriends.length",
              0,
            ),
            haveSelectedSummoners: i.Ember.computed.gt(
              "selectedSummoners.length",
              0,
            ),
            haveSomebodySelected: i.Ember.computed.or(
              "haveSelectedFriends",
              "haveSelectedSummoners",
            ),
            haveNobodySelected: i.Ember.computed.not("haveSomebodySelected"),
            haveNobodySelectedObserver: i.Ember.on(
              "didInsertElement",
              i.Ember.observer("haveNobodySelected", function () {
                i.Ember.run.once(this, function () {
                  const e = this.get("haveNobodySelected")
                    ? "disableacceptbutton"
                    : "enableacceptbutton";
                  this.element.dispatchEvent(new Event(e, { bubbles: !0 }));
                });
              }),
            ),
            inviteableIds: i.Ember.computed(
              "inviteableFriends.@each.id",
              "inviteableSummoners.@each.id",
              function () {
                const e = i.Ember.A(
                    this.get("inviteableFriends").filterBy("summonerId"),
                  ).mapBy("summonerId"),
                  t = i.Ember.A(
                    this.get("inviteableSummoners").filterBy("summonerId"),
                  ).mapBy("summonerId");
                return i.Ember.A(e.concat(t));
              },
            ),
            friendGroups: i.Ember.computed(
              "inviteableFriends.[]",
              "inviteableFriends.@each.displayGroupId",
              function () {
                return i.lodash.groupBy(
                  this.get("inviteableFriends"),
                  "displayGroupId",
                );
              },
            ),
            gameNameSearchString: "",
            tagLineSearchString: "",
            singleInputSearchString: "",
            searchString: i.Ember.computed(
              "gameNameSearchString",
              "tagLineSearchString",
              "singleInputSearchString",
              function () {
                const e = this.get("gameNameSearchString"),
                  t = this.get("tagLineSearchString"),
                  n = this.get("singleInputSearchString");
                return e || t ? `${e} ${t}` : n || "";
              },
            ),
            searchStringArray: i.Ember.computed("searchString", function () {
              return (this.get("searchString") || "").split(" ");
            }),
            inviteByNameGroup: i.Ember.computed(
              "inviteableSummoners.[]",
              "searchStringArray",
              function () {
                return i.Ember.Object.create({
                  friends: this._filterFriendListBySearchString(
                    this.get("inviteableSummoners"),
                  ),
                });
              },
            ),
            groups: i.Ember.computed(
              "friendGroups",
              "chatService.groups.@each.id",
              "searchStringArray",
              function () {
                const e = i.lodash.map(this.get("chatService.groups"), (e) => {
                    const t = this.get("friendGroups")[e.get("id")];
                    return (
                      e.set("friends", this._filterFriendListBySearchString(t)),
                      e
                    );
                  }),
                  t = i.Ember.A([
                    l.FRIEND_GROUPS.OFFLINE,
                    l.FRIEND_GROUPS.MOBILE,
                  ]),
                  n = this.filterFriendGroupsByName(e, t);
                return (
                  n.sort(function (e, t) {
                    return e.priority === t.priority
                      ? 0
                      : e.priority < t.priority
                        ? 1
                        : -1;
                  }),
                  i.Ember.A(n)
                );
              },
            ),
            filterFriendGroupsByName: function (e = [], t) {
              return e.filter((e) => -1 === t.indexOf(e.get("name")));
            },
            partyFull: function () {
              this.get("currentPartyIsFull") &&
                this.element.dispatchEvent(
                  new Event("closeinvitemodal", { bubbles: !0 }),
                );
            },
            partyFullObserver: i.Ember.observer(
              "currentPartyIsFull",
              function () {
                this.partyFull();
              },
            ),
            _filterFriendListBySearchString: function (e = []) {
              const t = e.filter((e) => {
                const t = (
                  e.get("name") +
                  (e.get("gameName") || "") +
                  "#" +
                  (e.get("gameTag") || "")
                )
                  .toLowerCase()
                  .replace(/\s/g, "");
                return this.get("searchStringArray").every((e) =>
                  t.includes(e.toLowerCase()),
                );
              });
              return i.Ember.A(t);
            },
            _shakeSearchBoxContainer: function () {
              const e = this.$(".search-box-container");
              e.addClass("not-found").on("animationend", function () {
                e.removeClass("not-found");
              });
            },
            _lookupSummonerByName: function ({
              gameName: e,
              tagLine: t,
              summonerName: n,
            }) {
              return e && t
                ? this._handleAliasSearch({ gameName: e, tagLine: t })
                : n
                  ? this._handleSummonerNameSearch(n)
                  : (i.logger.error(
                      "Player name input returned an empty gameName and tagLine or summonerName, which shouldn't have happened",
                    ),
                    Promise.reject());
            },
            async _handleAliasSearch(e) {
              try {
                const t = await this.get(
                  "summonerService",
                ).getSummonersByAliases([e]);
                if (
                  !t ||
                  !Array.isArray(t) ||
                  t.length <= 0 ||
                  !t[0]?.summonerId
                )
                  return (
                    this.set(
                      "searchError",
                      this.get("tra.invite_dialog_search_error_not_found"),
                    ),
                    void this._shakeSearchBoxContainer()
                  );
                this._addToInviteList(t[0]);
              } catch (e) {
                this._shakeSearchBoxContainer();
              }
            },
            async _handleSummonerNameSearch(e) {
              try {
                const t =
                  await this.get("summonerService").getSummonerBySummonerName(
                    e,
                  );
                if (!t || !t.summonerId)
                  return (
                    this.set(
                      "searchError",
                      this.get("tra.invite_dialog_search_error_not_found"),
                    ),
                    void this._shakeSearchBoxContainer()
                  );
                this._addToInviteList(t);
              } catch (e) {
                this._shakeSearchBoxContainer();
              }
            },
            _canAddToInviteList: function (e) {
              if (!e) return !1;
              if (this.get("currentPartyMemberIds").indexOf(e) > -1) return !1;
              const t = i.Ember.A(this.get("friends")),
                n = this.get("me"),
                s = t.findBy("summonerId", e);
              if (s) {
                if (!s.canBeInvitedBy(n)) return !1;
                s.set("checked", !0);
              }
              return !0;
            },
            _addToInviteList: function (e) {
              const t = e?.summonerId;
              if (!this._canAddToInviteList(t))
                return (
                  this.set(
                    "searchError",
                    this.get("tra.invite_dialog_search_error_not_available"),
                  ),
                  void this._shakeSearchBoxContainer()
                );
              this.get("inviteableIds").includes(t) ||
                this.get("inviteableSummoners").insertAt(
                  0,
                  s.default.create({
                    summonerId: t,
                    puuid: e.puuid,
                    name: e.displayName,
                    gameName: e.gameName,
                    gameTag: e.tagLine,
                    icon: e.profileIconId,
                    checked: !0,
                  }),
                ),
                this._clearSearchBox();
            },
            _clearSearchBox: function () {
              this.set("searchError", ""),
                this.set("gameNameSearchString", ""),
                this.set("tagLineSearchString", ""),
                this.set("singleInputSearchString", ""),
                this._resetPlayerNameInput();
            },
            aggregateSelectedPlayers: function () {
              const e = this.get("selectedInviteableFriends"),
                t = this.get("selectedSummoners");
              return i.Ember.A(e.concat(t));
            },
            init: function () {
              this._super(...arguments),
                (this._playerNames = i.playerNames),
                i.db.observe(
                  "/lol-honor-v2/v1/recognition-history",
                  this,
                  this.handleRecognitionHistory,
                ),
                i.db.observe(
                  "/lol-match-history/v1/recently-played-summoners",
                  this,
                  this.handleRecentlyPlayedSummoners,
                );
            },
            willDestroyElement: function () {
              this._super(...arguments),
                i.db.unobserve("/lol-honor-v2/v1/recognition-history", this),
                i.db.unobserve(
                  "/lol-match-history/v1/recently-played-summoners",
                  this,
                );
            },
            handleRecognitionHistory(e) {
              this.set("recognitionHistory", e);
            },
            handleRecentlyPlayedSummoners(e) {
              this.set("matchHistoryRecentlyPlayedSummoners", e);
            },
            _resetPlayerNameInput() {
              [
                ".player-name-input__game-name-input input",
                ".player-name-input__tag-line-input input",
                ".player-name-input__single-input input",
              ].forEach((e) => {
                const t = this.element?.querySelector?.(e);
                if (t) {
                  t.value = "";
                  const e = new InputEvent("input");
                  t.dispatchEvent(e);
                }
              });
            },
            actions: {
              enterKeyPressHandler(e) {
                return this._lookupSummonerByName(e);
              },
              gameNameInputHandler(e) {
                this.set("searchError", !1),
                  this.set("gameNameSearchString", e);
              },
              tagLineInputHandler(e) {
                this.set("searchError", !1), this.set("tagLineSearchString", e);
              },
              singleInputHandler(e) {
                this.set("searchError", !1),
                  this.set("singleInputSearchString", e);
              },
              sendInvites: function () {
                const e = this.aggregateSelectedPlayers().mapBy("summonerId");
                e.length &&
                  this.get("lobbiesService")
                    .invitePlayers(e)
                    .catch((e) => {
                      i.logger.trace("Unable to invite summoners", e);
                    });
              },
              destroyApplication: function () {
                this.componentFactoryApp.destroy();
              },
              initDialog: function () {
                this.get("searchError") && this.set("searchError", ""),
                  this._resetPlayerNameInput(),
                  this.get("inviteableSummoners.length") &&
                    this.set("inviteableSummoners", i.Ember.A());
                const e = this.get("friends");
                e &&
                  e.forEach((e) => {
                    e.get("checked") && e.set("checked", !1);
                  });
              },
            },
          },
        );
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.FRIEND_GROUPS = void 0);
        t.FRIEND_GROUPS = { OFFLINE: "OFFLINE", MOBILE: "MOBILE" };
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "QF0cQk/4",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\invite-dialog-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\invite-dialog-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\invite-dialog-component\\\\index.js\\" "],["text","\\n"],["open-element","lol-uikit-scrollable",[]],["static-attr","class","parties-invite-dialog-container"],["flush-element"],["text","\\n  "],["open-element","lol-uikit-content-block",[]],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","search-box-container"],["flush-element"],["text","\\n      "],["append",["helper",["player-name-input"],null,[["enableLabel","labelText","enterKeyPressHandler","gameNameInputHandler","tagLineInputHandler","singleInputHandler"],[true,["get",["tra","invite_dialog_search_placeholder"]],["helper",["action"],[["get",[null]],"enterKeyPressHandler"],null],["helper",["action"],[["get",[null]],"gameNameInputHandler"],null],["helper",["action"],[["get",[null]],"tagLineInputHandler"],null],["helper",["action"],[["get",[null]],"singleInputHandler"],null]]]],false],["text","\\n    "],["close-element"],["text","\\n\\n    "],["open-element","div",[]],["static-attr","class","search-error"],["flush-element"],["text","\\n"],["block",["if"],[["get",["searchError"]]],null,2],["text","    "],["close-element"],["text","\\n\\n    "],["open-element","div",[]],["static-attr","class","available-players"],["flush-element"],["text","\\n      "],["append",["unknown",["tra","invite_dialog_available_players"]],false],["text","\\n    "],["close-element"],["text","\\n\\n    "],["open-element","div",[]],["static-attr","class","groups"],["flush-element"],["text","\\n      "],["append",["helper",["invite-dialog-group"],null,[["group","selectedPlayers","inviteByName"],[["get",["inviteByNameGroup"]],["get",["selectedPlayers"]],true]]],false],["text","\\n"],["block",["if"],[["get",["recentGroup"]]],null,1],["block",["each"],[["get",["groups"]]],null,0],["text","    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n"],["close-element"],["text","\\n\\n"],["open-element","div",[]],["static-attr","style","display: none"],["flush-element"],["text","\\n  "],["comment"," here are some computeds we need in a template somewhere, so they update "],["text","\\n  "],["append",["unknown",["lobbiesService","notInLobbyObserver"]],false],["text","\\n  "],["append",["unknown",["lobbiesService","invitationsObserver"]],false],["text","\\n  "],["append",["unknown",["customGamesService","isCustomUI"]],false],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","        "],["append",["helper",["invite-dialog-group"],null,[["group","selectedPlayers"],[["get",["group"]],["get",["selectedPlayers"]]]]],false],["text","\\n"]],"locals":["group"]},{"statements":[["text","        "],["append",["helper",["invite-dialog-group"],null,[["group","selectedPlayers"],[["get",["recentGroup"]],["get",["selectedPlayers"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["append",["unknown",["searchError"]],false],["text","\\n"]],"locals":[]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        n(449);
        e.exports = i.Ember.Component.extend({
          layout: n(450),
          classNames: ["invite-dialog-group"],
          classNameBindings: ["isExpanded:expanded"],
          isExpanded: !0,
          inviteByName: !1,
          checkDisabled: !1,
          groupName: i.Ember.computed("group.name", "tra.ready", function () {
            const e = this.get("group.name");
            return "**Default" === e
              ? this.get("tra.social_group_label_default")
              : "recently-played" === e
                ? this.get("tra.social_group_label_recently_played")
                : this.get("inviteByName")
                  ? this.get("tra.social_group_label_invite_by_name")
                  : e;
          }),
          actions: {
            toggleExpanded: function () {
              this.toggleProperty("isExpanded");
            },
          },
        });
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "RndvqOEx",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\invite-dialog-component\\\\group\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\invite-dialog-component\\\\group\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\invite-dialog-component\\\\group\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","header"],["modifier",["action"],[["get",[null]],"toggleExpanded"]],["flush-element"],["append",["unknown",["groupName"]],false],["close-element"],["text","\\n"],["open-element","div",[]],["static-attr","class","list-wrapper"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","list"],["flush-element"],["text","\\n"],["block",["each"],[["get",["group","friends"]]],null,5],["text","  "],["close-element"],["text","\\n"],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","                  "],["open-element","span",[]],["static-attr","class","invite-dialog-friend-gnt"],["flush-element"],["text","\\n                    "],["append",["helper",["player-name"],null,[["format","gameName","tagLine"],["full",["get",["friend","gameName"]],["get",["friend","gameTag"]]]]],false],["text","\\n                  "],["close-element"],["text","\\n                "]],"locals":[]},{"statements":[["block",["if"],[["get",["friend","gameName"]]],null,0]],"locals":[]},{"statements":[["text","                  "],["open-element","span",[]],["static-attr","class","lol_parties__invite_dialog_historical-context"],["flush-element"],["text","\\n                    "],["open-element","img",[]],["static-attr","src","/fe/lol-static-assets/images/clock-icon-grey1_5.svg"],["static-attr","alt","recently-played-default-icon"],["static-attr","class","lol_parties__invite_dialog_invite-context-icon clock"],["flush-element"],["close-element"],["text","\\n                    "],["append",["unknown",["tra","parties_invite_dialog_recently_played"]],false],["text","\\n                  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["friend","isRecentlyPlayed"]]],null,2,1]],"locals":[]},{"statements":[["text","                  "],["open-element","span",[]],["static-attr","class","lol_parties__invite_dialog_historical-context"],["flush-element"],["text","\\n                    "],["open-element","img",[]],["static-attr","src","/fe/lol-static-assets/images/honor-leaf.svg"],["static-attr","alt","recently-honored-default-icon"],["static-attr","class","lol_parties__invite_dialog_invite-context-icon"],["flush-element"],["close-element"],["text","\\n                    "],["append",["unknown",["tra","parties_invite_dialog_recently_honored"]],false],["text","\\n                  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","invite-dialog-friend"],["flush-element"],["text","\\n        "],["open-element","lol-uikit-flat-checkbox",[]],["static-attr","class","invite-dialog-friend-checkbox"],["flush-element"],["text","\\n          "],["append",["helper",["input"],null,[["slot","type","id","checked","name"],["input","checkbox",["get",["friend","checkboxId"]],["get",["friend","checked"]],["get",["friend","checkboxId"]]]]],false],["text","\\n          "],["open-element","label",[]],["static-attr","slot","label"],["dynamic-attr","for",["unknown",["friend","checkboxId"]],null],["flush-element"],["open-element","span",[]],["static-attr","class","flat-checkbox-span"],["flush-element"],["close-element"],["text","\\n            "],["open-element","span",[]],["static-attr","class","invite-dialog-friend-name"],["flush-element"],["text","\\n              "],["open-element","div",[]],["static-attr","class","lol_parties__invite_dialog_avatar"],["flush-element"],["text","\\n                "],["open-element","img",[]],["dynamic-attr","src",["unknown",["friend","avatarImgUrl"]],null],["flush-element"],["close-element"],["text","\\n              "],["close-element"],["text","\\n\\n              "],["open-element","div",[]],["static-attr","class","lol_parties__invite_dialog_name-and-context"],["flush-element"],["text","\\n                "],["open-element","span",[]],["flush-element"],["text","\\n                  "],["append",["helper",["player-name"],null,[["format","gameName","tagLine","summonerName"],["short",["get",["friend","gameName"]],["get",["friend","gameTag"]],["get",["friend","name"]]]]],false],["text","\\n                "],["close-element"],["text","\\n"],["block",["if"],[["get",["friend","isHonorRecognized"]]],null,4,3],["text","              "],["close-element"],["text","\\n            "],["close-element"],["text","\\n          "],["close-element"],["text","\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n"]],"locals":["friend"]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        n(452), (e.exports = i.Ember.Component.extend({ layout: n(453) }));
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "5VQOcBRK",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\low-priority-queue-toast-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\low-priority-queue-toast-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\low-priority-queue-toast-component\\\\index.js\\" "],["text","\\n"],["open-element","lol-uikit-content-block",[]],["static-attr","type","notification"],["flush-element"],["text","\\n  "],["open-element","p",[]],["flush-element"],["append",["unknown",["tra","low_priority_queue_notification_body"]],false],["close-element"],["text","\\n  "],["open-element","ul",[]],["static-attr","class","low-priority-player-list"],["flush-element"],["text","\\n"],["block",["each"],[["get",["penalizedPlayerNames"]]],null,0],["text","  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["open-element","li",[]],["static-attr","class","low-priority-player-name"],["flush-element"],["append",["get",["name"]],false],["close-element"],["text","  \\n"]],"locals":["name"]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i,
          s = n(1),
          o = (i = n(60)) && i.__esModule ? i : { default: i };
        const a = (0, s.emberDataBinding)({
          Ember: s.Ember,
          websocket: (0, s.getProvider)().getSocket(),
          logPrefix: "party:self-low-priority-dialog",
          basePaths: { matchmaking: "/lol-matchmaking" },
          boundProperties: {
            search: { api: "matchmaking", path: "/v1/search" },
          },
        });
        e.exports = s.Ember.Component.extend(a, {
          layout: n(455),
          classNames: ["low-priority-dialog"],
          lowPrioritytimeRemaining: s.Ember.computed.readOnly(
            "search.lowPriorityData.penaltyTimeRemaining",
          ),
          timeRemainingFormatted: s.Ember.computed(
            "lowPrioritytimeRemaining",
            function () {
              return o.default.formatSeconds(
                this.get("lowPrioritytimeRemaining"),
              );
            },
          ),
        });
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "vGFwGPpW",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\low-priority-queue-modal-component\\\\layout.hbs\\" style-path=\\"null\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\low-priority-queue-modal-component\\\\index.js\\" "],["text","\\n"],["open-element","lol-uikit-content-block",[]],["static-attr","type","dialog-large"],["flush-element"],["text","\\n  "],["open-element","h4",[]],["flush-element"],["append",["unknown",["tra","low_priority_queue_modal_header"]],false],["close-element"],["text","\\n  "],["open-element","hr",[]],["static-attr","class","heading-spacer"],["flush-element"],["close-element"],["text","\\n    "],["open-element","p",[]],["static-attr","class","parties-queue-error-body"],["flush-element"],["text","\\n      "],["append",["unknown",["tra","low_priority_queue_modal_self_body"]],false],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","p",[]],["flush-element"],["text","\\n      "],["open-element","h6",[]],["static-attr","class","low-priority-dialog-time-remaining-label subhead"],["flush-element"],["append",["unknown",["tra","low_priority_queue_modal_timer_label"]],false],["close-element"],["text","\\n      "],["open-element","h6",[]],["static-attr","class","low-priority-dialog-time-remaining subhead"],["flush-element"],["append",["unknown",["timeRemainingFormatted"]],false],["close-element"],["text","\\n    "],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        n(457),
          (e.exports = i.Ember.Component.extend({
            layout: n(458),
            partySettings: null,
            hideAutofillModal: !1,
            checkboxObserver: i.Ember.on(
              "DidInsertElement",
              i.Ember.observer("hideAutofillModal", function () {
                i.Ember.run.once(this, function () {
                  this.updateAutofillSetting();
                });
              }),
            ),
            updateAutofillSetting: function () {
              this.set(
                "partySettings.permanentHideAutofillModal",
                this.get("hideAutofillModal"),
              );
            },
          }));
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "beHiQ77f",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\autofill-setting-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\autofill-setting-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\autofill-setting-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","autofill-settings"],["flush-element"],["text","\\n  "],["append",["unknown",["tra","parties_autofill_settings_dialog_text"]],false],["text","\\n  "],["open-element","ul",[]],["flush-element"],["text","\\n    "],["open-element","li",[]],["flush-element"],["text","\\n      "],["open-element","lol-uikit-flat-checkbox",[]],["flush-element"],["text","\\n        "],["append",["helper",["input"],null,[["slot","type","name","checked"],["input","checkbox","permanentHideAutofillModal",["get",["hideAutofillModal"]]]]],false],["text","\\n        "],["open-element","label",[]],["static-attr","slot","label"],["static-attr","for","permanentHideAutofillModal"],["flush-element"],["append",["unknown",["tra","parties_permanentHideAutofillModal"]],false],["close-element"],["text","\\n      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1),
          s = r(n(19)),
          o = r(n(94)),
          a = n(95);
        function r(e) {
          return e && e.__esModule ? e : { default: e };
        }
        n(460),
          (e.exports = i.Ember.Component.extend(o.default, s.default, {
            layout: n(461),
            classNames: ["game-mode-tutorial"],
            currentIndex: null,
            tutorialCards: [],
            carouselSfxUrl: a.SFX_URLS.SFX_UIKIT_CLICK_AND_SLIDE,
            tutorialItems: i.Ember.computed("tutorialCards.[]", function () {
              const e = this.get("tutorialCards");
              if (!e || 0 === e.length) return i.Ember.A([]);
              const t = e.map((e, t) =>
                i.Ember.Object.create(e, {
                  step: i.tra.numeral(t + 1).format(),
                }),
              );
              return i.Ember.A(t);
            }),
            leftArrowDisabled: i.Ember.computed.equal("currentIndex", 0),
            isViewingLastItem: i.Ember.computed(
              "currentIndex",
              "tutorialItems.[]",
              function () {
                return (
                  this.get("currentIndex") >=
                  this.get("tutorialItems.length") - 1
                );
              },
            ),
            rightArrowDisabled: i.Ember.computed.alias("isViewingLastItem"),
            didInsertElement: function () {
              this._super(...arguments),
                this.get("tutorialItems") && this.handleSelectItem(0);
            },
            _setSelectedClass: function (e, t) {
              for (let n = 0; n < t.length; ++n)
                n === e
                  ? t[n].classList.add("selected")
                  : t[n].classList.remove("selected");
            },
            handleSelectItem: function (e) {
              if (
                this.get("tutorialItems.length") <= 0 ||
                e < 0 ||
                e > this.get("tutorialItems.length") ||
                e === this.get("currentIndex")
              )
                return;
              const t = this.element.querySelector(
                  ".game-mode-tutorial-carousel",
                ),
                n = t.children,
                i = n[e],
                s = i.offsetLeft,
                o = (t.offsetWidth - i.offsetWidth) / 2;
              (t.style.transform = `translateX(${o - s}px)`),
                this._setSelectedClass(e, n);
              const a = this.element.querySelectorAll(".navigation-pip");
              this._setSelectedClass(e, a), this.set("currentIndex", e);
            },
            actions: {
              selectItem: function (e) {
                this.playSound(this.carouselSfxUrl), this.handleSelectItem(e);
              },
              advanceItem: function (e) {
                this.handleSelectItem(this.get("currentIndex") + e);
              },
              confirmClicked: function () {
                if (this.get("isViewingLastItem")) {
                  i.Navigation.getFullPageModalManager().close();
                } else this.send("advanceItem", 1);
              },
            },
          }));
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "OakTSLpe",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-mode-tutorial-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-mode-tutorial-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-mode-tutorial-component\\\\index.js\\" "],["text","\\n"],["open-element","lol-uikit-backdrop-magic",[]],["static-attr","class","game-mode-tutorial-background"],["flush-element"],["text","\\n"],["close-element"],["text","\\n"],["open-element","div",[]],["static-attr","class","game-mode-tutorial-content"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","game-mode-tutorial-carousel"],["flush-element"],["text","\\n"],["block",["each"],[["get",["tutorialItems"]]],null,1],["text","  "],["close-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","game-mode-tutorial-navigation"],["flush-element"],["text","\\n"],["block",["each"],[["get",["tutorialItems"]]],null,0],["text","  "],["close-element"],["text","\\n  "],["open-element","lol-uikit-flat-button",[]],["static-attr","class","game-mode-tutorial-confirm-button"],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"confirmClicked"],null],null],["flush-element"],["text","\\n    "],["append",["helper",["if"],[["get",["isViewingLastItem"]],["get",["tra","tutorial_confirm_button_text"]],["get",["tra","tutorial_next_button_text"]]],null],false],["text","\\n  "],["close-element"],["text","\\n  "],["open-element","lol-uikit-arrow-button",[]],["static-attr","class","game-mode-tutorial-carousel-arrow left-arrow"],["static-attr","direction","left"],["dynamic-attr","disabled",["unknown",["leftArrowDisabled"]],null],["dynamic-attr","click-sfx-src",["unknown",["carouselSfxUrl"]],null],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"advanceItem",-1],null],null],["flush-element"],["text","\\n  "],["close-element"],["text","\\n  "],["open-element","lol-uikit-arrow-button",[]],["static-attr","class","game-mode-tutorial-carousel-arrow right-arrow"],["static-attr","direction","right"],["dynamic-attr","disabled",["unknown",["rightArrowDisabled"]],null],["dynamic-attr","click-sfx-src",["unknown",["carouselSfxUrl"]],null],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"advanceItem",1],null],null],["flush-element"],["text","\\n  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","navigation-pip"],["modifier",["action"],[["get",[null]],"selectItem",["get",["index"]]]],["flush-element"],["close-element"],["text","\\n"]],"locals":["tutorialItem","index"]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","game-mode-tutorial-carousel-item"],["dynamic-attr","class",["unknown",["tutorialItem","className"]],null],["modifier",["action"],[["get",[null]],"selectItem",["get",["index"]]]],["flush-element"],["text","\\n        "],["open-element","lol-uikit-dialog-frame",[]],["static-attr","appearance",""],["flush-element"],["text","\\n          "],["open-element","div",[]],["static-attr","class","game-mode-tutorial-carousel-item-content"],["dynamic-attr","style",["concat",["background-image:url(\'",["unknown",["tutorialItem","imagePath"]],"\')"]]],["flush-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","top-block"],["flush-element"],["text","\\n              "],["open-element","div",[]],["static-attr","class","step-block"],["flush-element"],["text","\\n                "],["open-element","div",[]],["static-attr","class","step"],["flush-element"],["append",["unknown",["tutorialItem","step"]],false],["close-element"],["text","\\n              "],["close-element"],["text","\\n              "],["open-element","div",[]],["static-attr","class","text-block"],["flush-element"],["text","\\n                "],["open-element","div",[]],["static-attr","class","title"],["flush-element"],["append",["unknown",["tutorialItem","header"]],false],["close-element"],["text","\\n                "],["open-element","div",[]],["static-attr","class","description"],["flush-element"],["append",["unknown",["tutorialItem","description"]],false],["close-element"],["text","\\n              "],["close-element"],["text","\\n            "],["close-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","footer"],["flush-element"],["text","\\n              "],["append",["unknown",["tutorialItem","footer"]],false],["text","\\n            "],["close-element"],["text","\\n          "],["close-element"],["text","\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n"]],"locals":["tutorialItem","index"]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        n(463),
          (e.exports = i.Ember.Component.extend({
            layout: n(464),
            classNames: ["game-mode-one-page-tutorial"],
            classNameBindings: ["isLongCardLayout:long-card-layout"],
            title: null,
            subheader: null,
            iconV2: "",
            tutorialBg: "",
            tutorialCards: [],
            isLongCardLayout: !1,
          }));
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "Fx4Rw9aK",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-mode-one-page-tutorial-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-mode-one-page-tutorial-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-mode-one-page-tutorial-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","one-page-tutorial-wrapper"],["dynamic-attr","style",["concat",["background-image: url(",["unknown",["tutorialBg"]],")"]]],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","header-group"],["flush-element"],["text","\\n"],["block",["if"],[["get",["iconV2"]]],null,2],["text","        "],["open-element","div",[]],["static-attr","class","header"],["flush-element"],["append",["unknown",["title"]],false],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","sub-header"],["flush-element"],["append",["unknown",["subheader"]],false],["close-element"],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","cards"],["flush-element"],["text","\\n"],["block",["each"],[["get",["tutorialCards"]]],null,1],["text","    "],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","            "],["open-element","div",[]],["static-attr","class","arrow"],["flush-element"],["text","\\n                "],["comment"," Waiting on design to fill this in "],["text","\\n            "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["index"]]],null,0],["text","        "],["open-element","div",[]],["static-attr","class","card"],["flush-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","card-header-img"],["dynamic-attr","style",["concat",["background-image: url(",["unknown",["card","imagePath"]],")"]]],["flush-element"],["close-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","card-title"],["flush-element"],["append",["helper",["sanitize"],[["get",["card","header"]]],null],false],["close-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","card-body"],["flush-element"],["append",["helper",["sanitize"],[["get",["card","description"]]],null],false],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":["card","index"]},{"statements":[["text","            "],["open-element","div",[]],["static-attr","class","tutorial-header-icon"],["dynamic-attr","style",["concat",["background-image: url(",["unknown",["iconV2"]],")"]]],["flush-element"],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1),
          s = n(252);
        n(466),
          (e.exports = i.Ember.Component.extend({
            classNames: ["social-leaderboard-feature-flyout"],
            layout: n(467),
            lobbiesService: i.Ember.inject.service("lobbies"),
            socialLeaderboardService:
              i.Ember.inject.service("socialLeaderboard"),
            leaderboardData: [],
            filteredData: [],
            nextUpdateTime: 0,
            isLoading: !1,
            currentPlayerCanInvite: i.Ember.computed.alias(
              "lobbiesService.currentPlayerCanInvite",
            ),
            isFriendsFound: i.Ember.computed("filteredData", function () {
              return this.get("filteredData").length > 0;
            }),
            hasEnoughFriends: i.Ember.computed(
              "minFriendCount",
              "numFriends",
              function () {
                return this.get("numFriends") >= this.get("minFriendCount");
              },
            ),
            didReceiveAttrs: function () {
              this._super(...arguments),
                this.get("hasEnoughFriends") &&
                  this.querySocialLeaderboardData();
            },
            didInsertElement() {
              this._super(...arguments), this.get("currentPlayerCanInvite");
            },
            init: function () {
              this._super(...arguments),
                (this._chatBinding = (0, i.dataBinding)(
                  "/lol-chat",
                  (0, i.getProvider)().getSocket(),
                )),
                this._chatBinding.observe(
                  "/v1/friends",
                  this,
                  this.onFriendsChange,
                );
            },
            querySocialLeaderboardData: function () {
              const e = this.get("selected.queue.type");
              if (!e) return void this.set("hasError", !0);
              this.set("isLoading", !0), this.set("hasError", !1);
              this.get("socialLeaderboardService")
                .getSocialLeaderboardData(e)
                .then((e) => {
                  const t = e.rowData,
                    n = this.get("onResetNextUpdateTime"),
                    i = 1e3 * e.nextUpdateTime;
                  this.set("leaderboardData", [].concat(t).reverse()),
                    this.set("nextUpdateTime", i),
                    n && n(i),
                    this.set("isLoading", !1);
                })
                .catch(() => {
                  this.set("isLoading", !1),
                    this.set("hasError", !0),
                    i.Telemetry.sendEvent(
                      "social-leaderboard-data-acquisition-failure",
                    );
                });
            },
            onFriendsChange: function (e) {
              if (!e) return;
              const t = (0, s.friendsWithSummonerNamesCount)(e);
              this.set("numFriends", t);
            },
            actions: {
              refreshLeaderboard() {
                this.querySocialLeaderboardData();
              },
              updateFilteredData(e) {
                this.set("filteredData", e);
              },
            },
          }));
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "upiFY4oR",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\feature-flyout-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\feature-flyout-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\feature-flyout-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","social-leaderboard-container"],["flush-element"],["text","\\n"],["block",["if"],[["get",["isLoading"]]],null,7,6],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","        "],["append",["unknown",["social-leaderboard-friend-not-found"]],false],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["append",["helper",["social-leaderboard-table"],null,[["leaderboardData","currentSummonerName","closeSocialLeaderboard"],[["get",["filteredData"]],["get",["currentSummonerName"]],["get",["closeSocialLeaderboard"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["append",["helper",["social-leaderboard-header"],null,[["selected","nextUpdateTime","onRefresh"],[["get",["selected"]],["get",["nextUpdateTime"]],["helper",["action"],[["get",[null]],"refreshLeaderboard"],null]]]],false],["text","\\n      "],["append",["helper",["social-leaderboard-friend-filter"],null,[["leaderboardData","updateFilteredData"],[["get",["leaderboardData"]],["helper",["action"],[["get",[null]],"updateFilteredData"],null]]]],false],["text","\\n"],["block",["if"],[["get",["isFriendsFound"]]],null,1,0]],"locals":[]},{"statements":[["text","      "],["append",["helper",["social-leaderboard-not-enough-friends"],null,[["onAddFriends"],[["helper",["action"],[["get",[null]],"openFriendFinder"],null]]]],false],["text","\\n"]],"locals":[]},{"statements":[["block",["unless"],[["get",["hasEnoughFriends"]]],null,3,2],["text","  "]],"locals":[]},{"statements":[["text","    "],["append",["unknown",["social-leaderboard-error-state"]],false],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["hasError"]]],null,5,4]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","social-leaderboard-loading-animation-container"],["flush-element"],["text","\\n      "],["append",["unknown",["hextech-loading-animation"]],false],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i,
          s = n(1),
          o = (i = n(251)) && i.__esModule ? i : { default: i },
          a = n(9);
        n(469),
          (e.exports = s.Ember.Component.extend(o.default, {
            classNames: ["social-leaderboard-header"],
            layout: n(470),
            countdownLabel: s.Ember.computed.alias(
              "tra.social_leaderboard_next_ladder_update_countdown_label",
            ),
            socialLeaderboardQueueText: s.Ember.computed(
              "tra",
              "selected.queue.name",
              function () {
                const e = this.get("selected.queue.type"),
                  t = this.get("tra");
                return e === a.QUEUE_TYPE.RANKED_FLEX_SR
                  ? t.get("social_leaderboard_ranked_flex_sr_text")
                  : t.get("social_leaderboard_ranked_solo_5x5_text");
              },
            ),
            actions: {},
          }));
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "kEkzcfR1",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\header-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\header-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\header-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","social-leaderboard-header-container"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","social-leaderboard-header-icon"],["flush-element"],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","social-leaderboard-header-text-container"],["flush-element"],["text","\\n        "],["open-element","lol-uikit-flat-textarea",[]],["flush-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","social-leaderboard-header-text"],["flush-element"],["text","\\n                "],["append",["unknown",["tra","social_leaderboard_ranked_title"]],false],["text","\\n            "],["close-element"],["text","\\n            "],["append",["helper",["social-leaderboard-countdown-timer"],null,[["countdownLabel","countdownToTime","onRefresh"],[["get",["countdownLabel"]],["get",["nextUpdateTime"]],["get",["onRefresh"]]]]],false],["text","\\n        "],["close-element"],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","social-leaderboard-queue-container"],["flush-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","social-leaderboard-queue-visual"],["flush-element"],["text","\\n            "],["append",["unknown",["socialLeaderboardQueueText"]],false],["text","\\n        "],["close-element"],["text","\\n    "],["close-element"],["text","\\n"],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1),
          s = n(472);
        function o(e) {
          return e < 10 ? "0" + e : e;
        }
        n(473),
          (e.exports = i.Ember.Component.extend({
            classNames: ["social-leaderboard-countdown-timer"],
            layout: n(474),
            totalTime: 0,
            elapsedTime: 0,
            countdownToTime: 0,
            prevCountdownToTime: 0,
            remainingTime: i.Ember.computed(
              "elapsedTime",
              "totalTime",
              function () {
                const e = this.get("totalTime") - this.get("elapsedTime");
                return e > 0 ? e : 0;
              },
            ),
            countdownTimeLeft: i.Ember.computed("remainingTime", function () {
              const e = this.get("remainingTime"),
                t = i.moment.duration(e);
              return `${o(t.hours())}:${o(t.minutes())}:${o(t.seconds())}`;
            }),
            hasFinished: i.Ember.computed("remainingTime", function () {
              return 0 === this.get("remainingTime");
            }),
            didReceiveAttrs() {
              this._super(...arguments);
              const e = this.get("countdownToTime");
              e !== this.prevCountdownToTime &&
                (this.stop(),
                this.reset(),
                this.set("totalTime", e - Date.now()),
                this.notifyPropertyChange("totalTime"),
                this.start(),
                (this.prevCountdownToTime = e));
            },
            willDestroyElement: function () {
              this._super(...arguments), i.Ember.run.cancel(this.get("timer"));
            },
            reset() {
              this.set("elapsedTime", 0), this.set("currentTime", Date.now());
            },
            start() {
              this.stop(), this.set("currentTime", Date.now()), this.tick();
            },
            stop() {
              const e = this.get("timer");
              e && (i.Ember.run.cancel(e), this.set("timer", null));
            },
            tick() {
              if (this.get("hasFinished")) {
                this.stop();
                return void this.get("onRefresh")();
              }
              const e = this.get("currentTime"),
                t = this.get("elapsedTime"),
                n = Date.now();
              this.set("elapsedTime", t + (n - e)),
                this.set("currentTime", n),
                this.set(
                  "timer",
                  i.Ember.run.later(this, this.tick, s.COUNTDOWN_INTERVAL_MS),
                );
            },
          }));
      },
      (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.SOCIAL_LEADERBOARD_ROW_HEIGHT =
            t.OTHER_TIERS =
            t.NUM_OF_ROWS_TO_CENTER =
            t.LEAGUE_DIVISION_NA =
            t.COUNTDOWN_INTERVAL_MS =
              void 0);
        t.COUNTDOWN_INTERVAL_MS = 1e3;
        t.SOCIAL_LEADERBOARD_ROW_HEIGHT = 36.8;
        t.NUM_OF_ROWS_TO_CENTER = 3.4;
        t.OTHER_TIERS = { UNRANKED: "UNRANKED", NONE: "NONE" };
        t.LEAGUE_DIVISION_NA = "NA";
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "4ckX6E/P",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\countdown-timer-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\countdown-timer-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\countdown-timer-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","countdown-timer-component"],["flush-element"],["text","\\n  "],["append",["unknown",["countdownLabel"]],false],["text","\\n  "],["open-element","div",[]],["static-attr","class","countdown-time-left"],["flush-element"],["text","\\n    "],["append",["unknown",["countdownTimeLeft"]],false],["text","\\n  "],["close-element"],["text","\\n"],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        n(476),
          (e.exports = i.Ember.Component.extend({
            classNames: ["social-leaderboard-table"],
            layout: n(477),
            actions: {},
          }));
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "Lio9+lrS",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\table-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\table-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\table-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","social-leaderboard-table-container"],["flush-element"],["text","\\n  "],["open-element","table",[]],["static-attr","class","social-leaderboard-table"],["flush-element"],["text","\\n    "],["open-element","thead",[]],["flush-element"],["text","\\n      "],["open-element","tr",[]],["static-attr","class","social-leaderboard-table-header"],["flush-element"],["text","\\n        "],["open-element","th",[]],["flush-element"],["append",["unknown",["tra","social_leaderboard_position_column_header"]],false],["close-element"],["text","\\n        "],["open-element","th",[]],["flush-element"],["append",["unknown",["tra","social_leaderboard_rank_column_header"]],false],["close-element"],["text","\\n        "],["open-element","th",[]],["flush-element"],["append",["unknown",["tra","social_leaderboard_summoners_column_header"]],false],["close-element"],["text","\\n        "],["open-element","th",[]],["flush-element"],["append",["unknown",["tra","social_leaderboard_wins_column_header"]],false],["close-element"],["text","\\n      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","body",[]],["static-attr","class","social-leaderboard-table-body"],["flush-element"],["text","\\n      "],["open-element","lol-uikit-scrollable",[]],["flush-element"],["text","\\n"],["block",["each"],[["get",["leaderboardData"]]],null,0],["text","      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n"],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","          "],["append",["helper",["social-leaderboard-row"],null,[["leaderboardPosition","leaderboardRowIndex","division","tier","leaguePoints","summonerName","summonerId","puuid","wins","profileIconId","playerAvailability","isGiftable","currentSummonerName","closeSocialLeaderboard"],[["get",["leaderboardRowData","leaderboardPosition"]],["get",["index"]],["get",["leaderboardRowData","division"]],["get",["leaderboardRowData","tier"]],["get",["leaderboardRowData","leaguePoints"]],["get",["leaderboardRowData","summonerName"]],["get",["leaderboardRowData","summonerId"]],["get",["leaderboardRowData","puuid"]],["get",["leaderboardRowData","wins"]],["get",["leaderboardRowData","profileIconId"]],["get",["leaderboardRowData","availability"]],["get",["leaderboardRowData","isGiftable"]],["get",["currentSummonerName"]],["get",["closeSocialLeaderboard"]]]]],false],["text","\\n"]],"locals":["leaderboardRowData","index"]}],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1),
          s = n(472);
        n(479),
          (e.exports = i.Ember.Component.extend({
            classNames: ["social-leaderboard-row"],
            classNameBindings: ["isPlayerRow"],
            layout: n(480),
            invitesService: i.Ember.inject.service("invites"),
            contextMenuManager: i.UIKit.getContextMenuManager(),
            didInsertElement() {
              this._super(...arguments), this.centerLeaderboardOnPlayerRow();
            },
            isPlayerRow: i.Ember.computed(
              "currentSummonerName",
              "summonerName",
              function () {
                return (
                  this.get("currentSummonerName") === this.get("summonerName")
                );
              },
            ),
            isUnranked: i.Ember.computed("tier", function () {
              const e = this.get("tier");
              return !e || e === s.OTHER_TIERS.NONE;
            }),
            rankedColumnText: i.Ember.computed(
              "tier",
              "division",
              "leaguePoints",
              function () {
                const e = this.get("tier");
                this.get("tra");
                if (e === s.OTHER_TIERS.NONE)
                  return this.get("tra.social_leaderboard_unranked_tier");
                const t = this.get("division"),
                  n = this.get("leaguePoints");
                return i.LeagueTierNames.getTierDivisionLpLoc(e, t, n);
              },
            ),
            rankedMiniRegaliaPath: i.Ember.computed("tier", function () {
              const e = this.get("tier");
              return i.LeagueTierNames.getRankedMiniRegaliaSvg(
                e !== s.OTHER_TIERS.NONE ? e : s.OTHER_TIERS.UNRANKED,
              );
            }),
            centerLeaderboardOnPlayerRow() {
              if (this.get("isPlayerRow")) {
                const e = this.element.getBoundingClientRect().height,
                  t =
                    e * this.get("leaderboardRowIndex") -
                    e * s.NUM_OF_ROWS_TO_CENTER;
                this.element.parentElement.scroll({
                  top: t,
                  behavior: "smooth",
                });
              }
            },
            closeSocialLeaderboardHelper() {
              const e = this.get("closeSocialLeaderboard");
              e && e();
            },
            isPlayerInvitable: i.Ember.computed(
              "invitesService.canInvitePlayer",
              function () {
                if ("offline" === this.get("playerAvailability")) return !1;
                return this.get("invitesService").canInvitePlayer(
                  this.get("summonerId"),
                );
              },
            ),
            invitePlayer: function () {
              i.Telemetry.sendEvent(
                "social-leaderboard-invite-player",
                this.get("puuid"),
              );
              this.get("invitesService").invitePlayer(
                this.get("summonerId"),
                this.get("summonerName"),
              );
            },
            viewProfile: function () {
              i.Telemetry.sendEvent(
                "social-leaderboard-view-profile",
                this.get("puuid"),
              ),
                (0, i.getProvider)()
                  .getOptional("rcp-fe-lol-profiles")
                  .then(
                    (e) => {
                      this.closeSocialLeaderboardHelper(),
                        e.showOverlay({ summonerId: this.get("summonerId") });
                    },
                    (e) => i.logger.error("Provider getOptional failure", e),
                  );
            },
            openConversation: function () {
              (0, i.getProvider)()
                .getOptional("rcp-fe-lol-social")
                .then(
                  (e) => {
                    this.closeSocialLeaderboardHelper(),
                      i.Telemetry.sendEvent(
                        "social-leaderboard-open-conversation",
                        this.get("puuid"),
                      ),
                      e.openConversation(this.get("puuid"));
                  },
                  (e) => i.logger.error("Provider getOptional failure", e),
                );
            },
            giveGift: function () {
              i.Telemetry.sendEvent(
                "social-leaderboard-give-gift",
                this.get("puuid"),
              ),
                this.closeSocialLeaderboardHelper(),
                i.Router.navigateTo("rcp-fe-lol-store", {
                  page: "gifting",
                  recipientSummonerId: this.get("summonerId"),
                });
            },
            contextMenu: function (e) {
              this.get("summonerName") !== this.get("currentSummonerName") &&
                (this.contextMenuManager.setMenuItems([
                  {
                    label: this.get(
                      "tra.social_leaderboard_row_context_invite_to_game",
                    ),
                    action: "invitePlayer",
                    target: this,
                    disabled: !this.get("isPlayerInvitable"),
                  },
                  {
                    label: this.get(
                      "tra.social_leaderboard_row_context_send_message",
                    ),
                    action: "openConversation",
                    target: this,
                  },
                  {
                    label: this.get(
                      "tra.social_leaderboard_row_context_view_profile",
                    ),
                    action: "viewProfile",
                    target: this,
                  },
                  {
                    label: this.get(
                      "tra.social_leaderboard_row_context_give_gift",
                    ),
                    action: "giveGift",
                    target: this,
                    disabled: !this.get("isGiftable"),
                  },
                ]),
                this.contextMenuManager.openAtEvent(e));
            },
            actions: {
              onPlayerRowClick() {
                this.centerLeaderboardOnPlayerRow();
              },
            },
          }));
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "3HoeoQOC",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\row-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\row-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\row-component\\\\index.js\\" "],["text","\\n"],["open-element","tr",[]],["static-attr","class","social-leaderboard-table-row"],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"onPlayerRowClick"],null],null],["flush-element"],["text","\\n  "],["open-element","td",[]],["flush-element"],["append",["unknown",["leaderboardPosition"]],false],["close-element"],["text","\\n  "],["open-element","td",[]],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","social-leaderboard-cell"],["flush-element"],["text","\\n      "],["open-element","img",[]],["dynamic-attr","class",["concat",["social-leaderboard-rank-image ",["helper",["if"],[["get",["isUnranked"]],"social-leaderboard-unranked"],null]]]],["dynamic-attr","src",["unknown",["rankedMiniRegaliaPath"]],null],["flush-element"],["close-element"],["text","\\n      "],["append",["unknown",["rankedColumnText"]],false],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n  "],["open-element","td",[]],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","social-leaderboard-cell"],["flush-element"],["text","\\n      "],["open-element","lol-social-avatar-icon",[]],["static-attr","class","social-leaderboard-avatar"],["dynamic-attr","icon-id",["unknown",["profileIconId"]],null],["dynamic-attr","availability",["unknown",["playerAvailability"]],null],["static-attr","show-availability","true"],["flush-element"],["text","\\n        "],["append",["helper",["hovercard-component"],null,[["summonerId"],[["get",["summonerId"]]]]],false],["text","\\n      "],["close-element"],["text","\\n      "],["append",["helper",["player-name"],null,[["format","puuid","gameName","tagLine","summonerName"],["full",["get",["puuid"]],["get",["gameName"]],["get",["tagLine"]],["get",["summonerName"]]]]],false],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n  "],["open-element","td",[]],["flush-element"],["append",["unknown",["wins"]],false],["close-element"],["text","\\n"],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        n(482),
          (e.exports = i.Ember.Component.extend({
            classNames: ["social-leaderboard-friend-filter"],
            layout: n(483),
            nameFilter: "",
            leaderboardModifiedData: i.Ember.computed(
              "leaderboardData",
              function () {
                const e = this.get("leaderboardData"),
                  t = document.documentElement.lang || "en";
                if (!Array.isArray(e)) return e;
                return e.map((e) => {
                  const { gameName: n, tagLine: i, summonerName: s } = e;
                  if (this.isUsingAlias) {
                    const s = `${n} #${i}`.toLocaleLowerCase(t);
                    return { ...e, gameNameAndTagLineLowerCase: s };
                  }
                  {
                    const n = s.toLocaleLowerCase(t);
                    return { ...e, summonerNameLowerCase: n };
                  }
                });
              },
            ),
            init: function () {
              this._super(...arguments),
                (this.isUsingAlias = i.playerNames.isUsingAlias);
            },
            didReceiveAttrs: function () {
              this._super(...arguments), this.filter();
            },
            filter() {
              const e = this.get("updateFilteredData"),
                t = document.documentElement.lang || "en",
                n = this.get("nameFilter").toLocaleLowerCase(t),
                i = this.get("leaderboardModifiedData");
              "" === n && e(i);
              e(
                i.filter((e) =>
                  this.isUsingAlias
                    ? e.gameNameAndTagLineLowerCase.includes(n)
                    : e.summonerNameLowerCase.includes(n),
                ),
              );
            },
            actions: {
              onInput() {
                this.filter();
              },
            },
          }));
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "HH8q6OQ7",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\friend-filter-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\friend-filter-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\friend-filter-component\\\\index.js\\" "],["text","\\n"],["open-element","lol-uikit-flat-input",[]],["static-attr","class","social-leaderboard-filter-input"],["flush-element"],["text","\\n  "],["append",["helper",["input"],null,[["type","maxlength","value","placeholder","input"],["search","40",["get",["nameFilter"]],["get",["tra","social_leaderbaord_filter_placeholder"]],["helper",["action"],[["get",[null]],"onInput"],null]]]],false],["text","\\n"],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        n(485),
          (e.exports = i.Ember.Component.extend({
            classNames: ["social-leaderboard-friend-not-found"],
            layout: n(486),
            actions: {},
          }));
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "J44FZx72",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\friend-not-found-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\friend-not-found-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\friend-not-found-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","social-leaderboard-friend-not-found-container"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","friend-not-found-image"],["flush-element"],["close-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","social-leaderboard-friend-not-found-text"],["flush-element"],["text","\\n    "],["append",["unknown",["tra","social_leaderboard_friend_not_found"]],false],["text","\\n  "],["close-element"],["text","\\n"],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i,
          s = n(1),
          o = (i = n(251)) && i.__esModule ? i : { default: i };
        n(488),
          (e.exports = s.Ember.Component.extend(o.default, {
            classNames: ["not-enough-friends"],
            layout: n(489),
            notEnoughFriendsDescription: s.Ember.computed(
              "tra.social_leaderboard_add_friends_description",
              "minFriendCount",
              function () {
                return this.get("tra").formatString(
                  "social_leaderboard_add_friends_description",
                  { minFriendCount: this.get("minFriendCount") },
                );
              },
            ),
            actions: {
              openFriendFinderModal() {
                (0, s.getProvider)()
                  .getOptional("rcp-fe-lol-social")
                  .then(
                    (e) => e.openFriendFinderModal(),
                    (e) => s.logger.error("Provider getOptional failure", e),
                  );
              },
            },
          }));
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "qj9o0ia/",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\not-enough-friends-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\not-enough-friends-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\not-enough-friends-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","social-leaderboard-not-enough-friends-container"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","not-enough-friends-image"],["flush-element"],["close-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","social-leaderboard-add-friends-text"],["flush-element"],["text","\\n    "],["append",["unknown",["notEnoughFriendsDescription"]],false],["text","\\n  "],["close-element"],["text","\\n  "],["open-element","lol-uikit-flat-button",[]],["static-attr","class","social-leaderboard-add-friend-button"],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"openFriendFinderModal"],null],null],["flush-element"],["text","\\n    "],["append",["unknown",["tra","social_leaderboard_add_friends_button"]],false],["text","\\n  "],["close-element"],["text","\\n"],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        n(491),
          (e.exports = i.Ember.Component.extend({
            classNames: ["social-leaderboard-error-state"],
            layout: n(492),
          }));
      },
      (e, t, n) => {
        "use strict";
        n.r(t);
      },
      (e, t, n) => {
        const i = n(1).Ember;
        e.exports = i.HTMLBars.template({
          id: "Kz5sPXiE",
          block:
            '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\error-state-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\error-state-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\__MAIN__\\\\LeagueClientContent_Beta\\\\15692\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\error-state-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","social-leaderboard-error-state-container"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","error-state-image"],["flush-element"],["close-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","social-leaderboard-error-state-text"],["flush-element"],["text","\\n    "],["append",["unknown",["tra","social_leaderboard_oops"]],false],["text","\\n    "],["open-element","br",[]],["flush-element"],["close-element"],["text","\\n    "],["append",["unknown",["tra","social_leaderboard_error_message"]],false],["text","\\n  "],["close-element"],["text","\\n"],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
          meta: {},
        });
      },
      (e, t, n) => {
        "use strict";
        var i = g(n(494)),
          s = g(n(500)),
          o = g(n(503)),
          a = g(n(506)),
          r = g(n(512)),
          l = g(n(515)),
          c = g(n(519)),
          m = g(n(522)),
          u = g(n(527)),
          d = g(n(530)),
          p = g(n(533)),
          h = n(1);
        function g(e) {
          return e && e.__esModule ? e : { default: e };
        }
        e.exports = function (e = document) {
          if (e.partiesElementsRegistered) return;
          const t = h.webComponents.registerCustomElementV1;
          t(i.default),
            t(a.default),
            t(o.default),
            t(s.default),
            t(r.default),
            t(l.default),
            t(c.default),
            t(m.default),
            t(u.default),
            t(d.default),
            t(p.default),
            (e.partiesElementsRegistered = !0);
        };
      },
      (e, t, n) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.default = void 0);
        var i,
          s = (function (e, t) {
            if (!t && e && e.__esModule) return e;
            if (null === e || ("object" != typeof e && "function" != typeof e))
              return { default: e };
            var n = a(t);
            if (n && n.has(e)) return n.get(e);
            var i = {},
              s = Object.defineProperty && Object.getOwnPropertyDescriptor;
            for (var o in e)
              if (
                "default" !== o &&
                Object.prototype.hasOwnProperty.call(e, o)
              ) {
                var r = s ? Object.getOwnPropertyDescriptor(e, o) : null;
                r && (r.get || r.set)
                  ? Object.defineProperty(i, o, r)
                  : (i[o] = e[o]);
              }
            (i.default = e), n && n.set(e, i);
            return i;
          })(n(1)),
          o = (i = n(95)) && i.__esModule ? i : { default: i };
        function a(e) {
          if ("function" != typeof WeakMap) return null;
          var t = new WeakMap(),
            n = new WeakMap();
          return (a = function (e) {
            return e ? n : t;
          })(e);
        }
        const r = s.default.getProvider().getSocket(),
          l = ["default", "tft"],
          c = "companions",
          m = "tft_map_skins",
          u = "tft_damage_skins",
          d = [c, m, u],
          p = ["right", "left", "top"],
          h = {
            companions: {
              default: "/v1/inventories/default/companions",
              tft: "/v1/inventories/tft/companions",
            },
            tft_map_skins: { tft: "/v1/inventories/tft/map-skins" },
            tft_damage_skins: { tft: "/v1/inventories/tft/damage-skins" },
          },
          g = {
            companions: "/v1/selection/companion",
            tft_map_skins: "/v1/selection/tft-map-skin",
            tft_damage_skins: "/v1/selection/tft-damage-skin",
          };
        s.UIKit.getModalManager();
        class b extends s.webComponents.ShadowElement {
          templateMarkup() {
            return n(495);
          }
          stylesheetMarkup() {
            return n(496);
          }
          constructor() {
            super(),
              (this._dataBinding = (0, s.dataBinding)("/lol-cosmetics", r)),
              (this._type = null),
              (this._setName = "default"),
              (this._subscriber = null),
              (this._showNoneOption = null),
              (this._mouseOverHandler = this._handleMouseOver.bind(this)),
              (this._iconClickHandler = this._handleIconClick.bind(this)),
              (this._orientation = "left"),
              (this._selectedItemId = null),
              (this._modal = null);
          }
          connectedCallback() {
            super.connectedCallback(),
              this.addEventListener("click", this._iconClickHandler),
              this.addEventListener("mouseover", this._mouseOverHandler),
              this._refreshInventoryBinding();
          }
          disconnectedCallback() {
            super.disconnectedCallback(),
              this.removeEventListener("click", this._iconClickHandler),
              this.removeEventListener("mouseover", this._mouseOverHandler),
              this._dataBinding.unobserve(this);
          }
          static get observedAttributes() {
            return ["type", "orientation", "set-name", "show-none"];
          }
          attributeChangedCallback(e, t, n) {
            switch (e) {
              case "type":
                this._handleTypeChange(n);
                break;
              case "orientation":
                this._handleOrientationChange(n);
                break;
              case "set-name":
                this._handleSetNameChange(n);
                break;
              case "show-none":
                this._handleShowNoneChange();
            }
          }
          _handleOrientationChange(e) {
            p.indexOf(e) < 0 ||
              e === this._orientation ||
              (this._orientation = e);
          }
          _handleTypeChange(e) {
            d.indexOf(e) < 0 ||
              e === this._type ||
              ((this._type = e), this._refreshInventoryBinding());
          }
          _handleSetNameChange(e) {
            l.indexOf(e) < 0 ||
              e === this._setName ||
              ((this._setName = e), this._refreshInventoryBinding());
          }
          _refreshInventoryBinding() {
            this._dataBinding.unobserve(this),
              this._dataBinding.observe(
                h[this._type][this._setName],
                this,
                this._handleInventoryChanged,
              );
          }
          _handleShowNoneChange() {
            (this._showNoneOption = this.hasAttribute("show-none")),
              this._updateModalShowNone(this._modal);
          }
          _updateModalShowNone(e) {
            e &&
              (this._showNoneOption
                ? e.setAttribute("show-none", "")
                : e.removeAttribute("show-none"));
          }
          _handleInventoryChanged(e) {
            (this._inventory = e),
              this._inventory &&
                this._inventory.selectedLoadoutItem &&
                this._inventory.selectedLoadoutItem !== this._selectedItemId &&
                this._updateSelectedCompanion(
                  this._inventory.selectedLoadoutItem,
                );
          }
          _updateSelectedCompanion(e) {
            this._selectedItemId = e.itemId;
            const t = this._getIcon();
            if (0 === e.itemId) {
              const e = n(499);
              (t.style.backgroundImage = "url(" + e + ")"),
                t.classList.add("none-icon");
            } else
              (t.style.backgroundImage = "url(" + e.loadoutsIcon + ")"),
                t.classList.remove("none-icon");
          }
          _handleMouseOver() {
            this._playSound(o.default.SFX_URLS.SFX_COMPANION_PICKER_HOVER);
          }
          _handleIconClick() {
            this._playSound(o.default.SFX_URLS.SFX_COMPANION_PICKER_CLICK);
          }
          _playSound(e) {
            s.Audio.getChannel(o.default.SFX_CHANNEL).playSound(e);
          }
          _selectCompanion(e) {
            this._updateSelectedCompanion(e),
              0 === e.itemId || e.itemId === this._inventory.defaultItemId
                ? this._dataBinding.delete(g[this._type], e.itemId)
                : this._dataBinding.put(g[this._type], e.itemId);
          }
          _getIcon() {
            return this.shadowRoot.querySelector("div.loadouts-icon");
          }
        }
        b.tagName = "lol-parties-cosmetics-picker";
        var f = b;
        t.default = f;
      },
      (e) => {
        "use strict";
        e.exports =
          '<template id="lol-parties-template-cosmetics-picker">\r\n  <div class="loadouts-icon"></div>\r\n</template>\r\n';
      },
      (e, t, n) => {
        var i = n(497),
          s = n(498)(i);
        s.push([
          e.id,
          ":host {\n  --rcp-fe-lol-parties-cosmetics-picker-border-width: 2px;\n}\n:host {\n  display: block;\n}\n:host .loadouts-icon {\n  box-sizing: border-box;\n  border-width: var(--rcp-fe-lol-parties-cosmetics-picker-border-width);\n  border-style: solid;\n  border-color: #f0e6d2;\n  width: 100%;\n  height: 100%;\n  background-size: cover;\n  background-position: center;\n  background-repeat: no-repeat;\n  cursor: pointer;\n  box-shadow: inset 0 0 0 1px rgba(0,0,0,0.5);\n  border-image: linear-gradient(to bottom, #c89b3c, #785a28) 2;\n}\n:host .loadouts-icon.none-icon {\n  background-size: 50%;\n}\n:host .loadouts-icon:hover {\n  -webkit-filter: brightness(110%);\n  border-image: linear-gradient(to bottom, #f0e6d2, #c89b3c) 1;\n}\n",
          "",
        ]),
          (e.exports = s);
      },
      (e) => {
        "use strict";
        e.exports = function (e) {
          return e[1];
        };
      },
      (e) => {
        "use strict";
        e.exports = function (e) {
          var t = [];
          return (
            (t.toString = function () {
              return this.map(function (t) {
                var n = "",
                  i = void 0 !== t[5];
                return (
                  t[4] && (n += "@supports (".concat(t[4], ") {")),
                  t[2] && (n += "@media ".concat(t[2], " {")),
                  i &&
                    (n += "@layer".concat(
                      t[5].length > 0 ? " ".concat(t[5]) : "",
                      " {",
                    )),
                  (n += e(t)),
                  i && (n += "}"),
                  t[2] && (n += "}"),
                  t[4] && (n += "}"),
                  n
                );
              }).join("");
            }),
            (t.i = function (e, n, i, s, o) {
              "string" == typeof e && (e = [[null, e, void 0]]);
              var a = {};
              if (i)
                for (var r = 0; r < this.length; r++) {
                  var l = this[r][0];
                  null != l && (a[l] = !0);
                }
              for (var c = 0; c < e.length; c++) {
                var m = [].concat(e[c]);
                (i && a[m[0]]) ||
                  (void 0 !== o &&
                    (void 0 === m[5] ||
                      (m[1] = "@layer"
                        .concat(m[5].length > 0 ? " ".concat(m[5]) : "", " {")
                        .concat(m[1], "}")),
                    (m[5] = o)),
                  n &&
                    (m[2]
                      ? ((m[1] = "@media "
                          .concat(m[2], " {")
                          .concat(m[1], "}")),
                        (m[2] = n))
                      : (m[2] = n)),
                  s &&
                    (m[4]
                      ? ((m[1] = "@supports ("
                          .concat(m[4], ") {")
                          .concat(m[1], "}")),
                        (m[4] = s))
                      : (m[4] = "".concat(s))),
                  t.push(m));
              }
            }),
            t
          );
        };
      },
      (e, t, n) => {
        "use strict";
        e.exports = n.p + "companion_icon.svg";
      },
      (e, t, n) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.default = void 0);
        var i,
          s = (function (e, t) {
            if (!t && e && e.__esModule) return e;
            if (null === e || ("object" != typeof e && "function" != typeof e))
              return { default: e };
            var n = a(t);
            if (n && n.has(e)) return n.get(e);
            var i = {},
              s = Object.defineProperty && Object.getOwnPropertyDescriptor;
            for (var o in e)
              if (
                "default" !== o &&
                Object.prototype.hasOwnProperty.call(e, o)
              ) {
                var r = s ? Object.getOwnPropertyDescriptor(e, o) : null;
                r && (r.get || r.set)
                  ? Object.defineProperty(i, o, r)
                  : (i[o] = e[o]);
              }
            (i.default = e), n && n.set(e, i);
            return i;
          })(n(1)),
          o = (i = n(96)) && i.__esModule ? i : { default: i };
        function a(e) {
          if ("function" != typeof WeakMap) return null;
          var t = new WeakMap(),
            n = new WeakMap();
          return (a = function (e) {
            return e ? n : t;
          })(e);
        }
        const r = s.default.getProvider().getSocket(),
          l = "sfx-ui";
        class c extends s.webComponents.ShadowElement {
          templateMarkup() {
            return n(501);
          }
          stylesheetMarkup() {
            return n(502);
          }
          constructor() {
            super(),
              (this._cachedInviteIds = []),
              (this._patcherState = null),
              (this._settings = null),
              (this._listeners = {}),
              (this._listeners.onClickClearAll =
                this._onClickClearAll.bind(this)),
              (this._listeners.onUXSettingsChange =
                this._updateUXSettings.bind(this)),
              (this._patcherConnected = !0),
              s.Navigation.subscribe(
                "isConnectedToServer",
                this._updatePatcherConnected.bind(this),
              ),
              (this._lobbyBinding = (0, s.dataBinding)("/lol-lobby", r)),
              (this._patcherBinding = (0, s.dataBinding)("/patcher", r)),
              (this._chatBinding = (0, s.dataBinding)("/lol-chat", r)),
              (this._settingsBinding = (0, s.dataBinding)("/lol-settings", r)),
              this._observePatcher(),
              this._observeSettings(),
              this._observeCurrentPlayerChat(),
              this._observeUXSettings();
          }
          connectedCallback() {
            super.connectedCallback();
            const e = this._clearAllElement();
            e && e.addEventListener("click", this._listeners.onClickClearAll);
            const t = this.shadowRoot.querySelector(
              ".parties-game-invite-heading-text",
            );
            t &&
              s.tra.ready().then(() => {
                t.innerHTML = s.tra.get("parties_group_label_game_invites");
              }),
              this._assignClearAllTooltip(),
              this._observeUXSettings();
          }
          disconnectedCallback() {
            super.disconnectedCallback();
            const e = this._clearAllElement();
            e &&
              e.removeEventListener("click", this._listeners.onClickClearAll),
              this._unassignClearAllTooltip(),
              this._unobserveUXSettings();
          }
          updateGameSearch(e) {
            (this._gameSearch = e),
              e ? this._hide() : this._haveInvites() && this._show(),
              this._updateGameInviteElements(
                this._gameSearch,
                "updateGameSearch",
              );
          }
          _show() {
            this.classList.remove("parties-game-invites-hide");
          }
          _hide() {
            this.classList.add("parties-game-invites-hide");
          }
          _observeUXSettings() {
            this._UXObserverAttached ||
              (s.UXSettings.addObserver(this._listeners.onUXSettingsChange),
              (this._UXObserverAttached = !0));
          }
          _unobserveUXSettings() {
            this._UXObserverAttached &&
              (s.UXSettings.removeObserver(this._listeners.onUXSettingsChange),
              (this._UXObserverAttached = !1));
          }
          _observeCurrentPlayerChat() {
            this._chatBinding.observe("/v1/me", (e) => {
              e &&
                ((this._currentPlayerChat = e),
                this._updateGameInviteElements(
                  this._currentPlayerChat,
                  "updateCurrentPlayerChat",
                ));
            });
          }
          _observeSettings() {
            this._settingsBinding.observe(
              "/v2/account/LCUPreferences/lol-chat",
              (e) => {
                e &&
                  ((this._chatSettings = e),
                  this._updateGameInviteElements(
                    this._chatSettings,
                    "updateChatSettings",
                  ));
              },
            );
          }
          _observePatcher() {
            this._patcherBinding.observe(
              "/v1/products/league_of_legends/state",
              (e) => {
                (this._patcherState = e),
                  this._updateGameInviteElements(
                    this._patcherState,
                    "updatePatcherState",
                  );
              },
            );
          }
          onGameInvitesChanged(e) {
            if ((this._showHideOnInvites(e), !e || 0 === e.length))
              return (
                this._haveInvites() &&
                  (this._cachedInviteIds.forEach((e) => {
                    this._removeGameInviteElement(e);
                  }),
                  (this._cachedInviteIds = [])),
                void this._hide()
              );
            this._gameSearch || this._show(), this._expireGameInvites(e);
            const t = this._cachedInviteIds,
              n = this._updateGameInvites(e, t),
              i = this._addNewGameInvites(e, t);
            (this._cachedInviteIds = this._getInviteIds(n.concat(i))),
              this._updateGameInviteCount();
          }
          _updateGameInvites(e, t) {
            const n = e.filter(function (e) {
              return -1 !== t.indexOf(e.invitationId);
            });
            return (
              n &&
                n.length > 0 &&
                n.forEach((e) => {
                  const t = this.shadowRoot.getElementById(e.invitationId);
                  t && t.updateGameInvite(e);
                }),
              n
            );
          }
          _addNewGameInvites(e, t) {
            const n = e.filter(function (e) {
              return -1 === t.indexOf(e.invitationId);
            });
            return (
              n &&
                n.length > 0 &&
                (this._playGameInviteSound(),
                n.sort(this._gameInviteSort.bind(this)),
                this._addGameInviteElements(n)),
              n
            );
          }
          _onClickClearAll() {
            if (this._haveInvites()) {
              const e = this._cachedInviteIds.length;
              this._playClickSound();
              for (let t = e - 1; t >= 0; t--)
                this._declineGameInvite(this._cachedInviteIds[t]);
            }
          }
          _declineGameInvite(e) {
            e &&
              this._lobbyBinding.post(`/v2/received-invitations/${e}/decline`);
          }
          _playClickSound() {
            s.Audio.getChannel(l).playSound(
              "/fe/lol-parties/sfx-soc-ui-click-generic.ogg",
            );
          }
          _playGameInviteSound() {
            s.Audio.getChannel(l).playSound(
              "/fe/lol-social/sounds/sfx-soc-notif-gameinvite-rcvd.ogg",
            );
          }
          _showHideOnInvites(e) {
            this._clearAllButtonVisibility(e), this._inviteCountVisibility(e);
          }
          _inviteCountVisibility(e) {
            const t = this._inviteCountElement();
            t && e && e.length > 1
              ? t.classList.remove("parties-hide-game-invite-count")
              : t && t.classList.add("parties-hide-game-invite-count");
          }
          _clearAllButtonVisibility(e) {
            const t = this._clearAllElement();
            t && e && e.length > 1
              ? t.classList.remove("parties-hide-clear-all")
              : t && t.classList.add("parties-hide-clear-all");
          }
          _expireGameInvites(e) {
            if (!this._cachedInviteIds || 0 === this._cachedInviteIds.length)
              return;
            const t = this._getInviteIds(e),
              n = this._cachedInviteIds.filter((e) => -1 === t.indexOf(e));
            n.forEach((e) => {
              this._removeGameInviteElement(e);
            });
            const i = this._cachedInviteIds.filter((e) => -1 === n.indexOf(e));
            this._cachedInviteIds = i;
          }
          _removeGameInviteElement(e) {
            const t = this.shadowRoot.getElementById(e);
            t && t.remove();
          }
          _getInviteIds(e) {
            return e.reduce(
              (e, t) => (t.invitationId && e.push(t.invitationId), e),
              [],
            );
          }
          _gameInviteSort(e, t) {
            const n = o.default.isReadyForGame(this._patcherState),
              i = this._gameInviteAcceptable(e, n),
              a = this._gameInviteAcceptable(t, n) - i;
            return a || s.tra.moment(t.timestamp) - s.tra.moment(e.timestamp);
          }
          _gameInviteAcceptable(e, t) {
            return o.default.isGameInviteAcceptable(
              e,
              this._chatSettings,
              this._currentPlayerChat,
              this._patcherConnected,
              t,
            );
          }
          _gameInvitesById(e) {
            let t = {};
            return (
              e &&
                e.length > 0 &&
                (t = e.reduce((e, t) => {
                  const n = t.invitationId;
                  return n && e && (e[n] = t), e;
                }, {})),
              t
            );
          }
          _updatePatcherConnected(e) {
            (this._patcherConnected = e),
              this._updateGameInviteElements(e, "updatePatcherConnected");
          }
          _updateGameInviteElements(e, t) {
            if (this._haveInvites()) {
              this._cachedInviteIds.forEach((n) => {
                const i = this.shadowRoot.getElementById(n);
                i && i[t](e);
              });
            }
          }
          _addGameInviteElements(e) {
            e.forEach((e) => {
              this._addGameInviteElement(e);
            });
          }
          _addGameInviteElement(e) {
            const t = this._createNewGameInviteElement(),
              n = this._gameInvitesContainerElement();
            if (n && t && e && e.invitationId) {
              (t.id = e.invitationId),
                t.updateGameInvite(e),
                t.updatePatcherState(this._patcherState),
                t.updatePatcherConnected(this._patcherConnected),
                t.updateChatSettings(this._chatSettings),
                t.updateCurrentPlayerChat(this._currentPlayerChat),
                t.updateUXSettings(this._uxSettings);
              const i = n.querySelector("lol-parties-game-invite");
              n.insertBefore(t, i);
            }
          }
          _createNewGameInviteElement() {
            return document.createElement("lol-parties-game-invite");
          }
          _assignClearAllTooltip() {
            const e = this._clearAllElement();
            if (e) {
              const t = s.UIKit.getTooltipManager(),
                n = document.createElement("lol-uikit-tooltip"),
                i = s.tra.get("parties_tooltip_decline_all"),
                o = document.createElement("lol-uikit-content-block");
              o.setAttribute("type", "tooltip-system");
              const a = document.createElement("p");
              (a.innerHTML = i),
                o.appendChild(a),
                n.setAttribute("position", "left"),
                n.appendChild(o);
              const r = {
                type: "dialog-small",
                showDelay: 0,
                targetAnchor: { x: "left", y: "center" },
                tooltipAnchor: { x: "right", y: "center" },
              };
              t.assign(e, n, {}, r);
            }
          }
          _unassignClearAllTooltip() {
            const e = this._clearAllElement();
            s.UIKit.getTooltipManager().unassign(e);
          }
          _updateGameInviteCount() {
            const e = this._cachedInviteIds ? this._cachedInviteIds : [],
              t = this._inviteCountElement();
            t && (t.innerHTML = `(${e.length})`);
          }
          _updateUXSettings(e) {
            (this._uxSettings = e),
              this._updateGameInviteElements(
                this._uxSettings,
                "updateUXSettings",
              );
          }
          _inviteCountElement() {
            return this.shadowRoot.querySelector(".parties-game-invite-count");
          }
          _clearAllElement() {
            return this.shadowRoot.querySelector(".parties-clear-all-button");
          }
          _gameInvitesContainerElement() {
            return this.shadowRoot.querySelector(".parties-game-invites");
          }
          _haveInvites() {
            return !!(
              this._cachedInviteIds && this._cachedInviteIds.length > 0
            );
          }
        }
        c.tagName = "lol-parties-game-invites";
        var m = c;
        t.default = m;
      },
      (e) => {
        "use strict";
        e.exports =
          '<template id="lol-parties-template-game-invites">\r\n  <div class="parties-game-info-panel-invites">\r\n    <div class="parties-game-invite-heading">\r\n      <div class="parties-game-invite-heading-container">\r\n        <div class="parties-game-invite-heading-text"></div>\r\n        <div class="parties-game-invite-count parties-hide-game-invite-count"></div>\r\n      </div>\r\n      <button class="parties-clear-all-button parties-hide-clear-all"></button>\r\n    </div>\r\n    <div class="parties-game-invites parties-game-invite-scroll parties-blue-scroll">\r\n    </div>\r\n  </div>\r\n</template>\r\n';
      },
      (e, t, n) => {
        var i = n(497),
          s = n(498)(i);
        s.push([
          e.id,
          ':host .parties-game-invite-heading {\n  font-family: var(--font-display);\n}\n:host .parties-game-invite-heading {\n  -webkit-user-select: none;\n}\n:host .parties-game-invite-heading {\n  font-kerning: normal;\n  -webkit-font-feature-settings: "kern" 1;\n  -webkit-font-smoothing: antialiased;\n}\n:host .parties-game-invite-heading {\n  text-transform: uppercase;\n}\n:host .parties-game-invite-heading:lang(ko-kr),\n:host .parties-game-invite-heading:lang(ja-jp),\n:host .parties-game-invite-heading:lang(tr-tr),\n:host .parties-game-invite-heading:lang(el-gr),\n:host .parties-game-invite-heading:lang(th-th),\n:host .parties-game-invite-heading:lang(zh-tw) {\n  text-transform: none;\n}\n:host .parties-game-invite-heading {\n  color: #f0e6d2;\n  font-size: 12px;\n  font-weight: 700;\n  line-height: 16px;\n  letter-spacing: 0.075em;\n}\n:host .parties-game-invite-heading:lang(ja-jp) {\n  font-size: 13px;\n}\n:host .parties-game-invite-heading:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host .parties-game-info-panel-invites {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  max-height: 202px;\n  direction: ltr;\n}\n:host .parties-game-invite-heading {\n  display: flex;\n  align-items: center;\n  height: 32px;\n  color: #a09b8c;\n  padding: 0 5px 0 9px;\n  flex-shrink: 0;\n  pointer-events: none;\n  margin-top: 1px;\n}\n:host .hover-highlight {\n  pointer-events: auto;\n}\n:host .hover-highlight:hover {\n  background: linear-gradient(to right, rgba(10,203,230,0.2), rgba(10,203,230,0));\n  cursor: pointer;\n  color: #f0e6d2;\n}\n:host .hover-highlight:active {\n  color: #cdbe91;\n}\n:host .parties-game-invite-heading-container {\n  flex: 1;\n  display: flex;\n  margin-right: 7px;\n  overflow: hidden;\n}\n:host .parties-game-invite-heading-text {\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n}\n:host .parties-game-invite-count {\n  padding-left: 5px;\n}\n:host .parties-game-invite-count.parties-hide-game-invite-count {\n  display: none;\n}\n:host .parties-clear-all-button {\n  outline: none;\n  border: none;\n  background: none;\n  cursor: pointer;\n  padding: 0;\n  -webkit-mask: url("/fe/lol-parties/clear_mask.png") no-repeat center;\n  -webkit-mask-size: 18px;\n  background-color: #c8aa6e;\n  width: 18px;\n  height: 18px;\n  pointer-events: auto;\n}\n:host .parties-clear-all-button:hover {\n  background-color: #f0e6d2;\n}\n:host .parties-clear-all-button:active {\n  background-color: #463714;\n}\n:host .parties-clear-all-button.parties-hide-clear-all {\n  display: none;\n  pointer-events: none;\n}\n:host lol-parties-game-invite {\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-end;\n  flex-shrink: 0;\n}\n:host .parties-game-invite-scroll {\n  flex-grow: 1;\n}\n:host .parties-blue-scroll {\n  overflow-x: hidden;\n  overflow-y: auto;\n}\n:host .parties-blue-scroll::-webkit-scrollbar {\n  width: 9px;\n  background: transparent;\n}\n:host .parties-blue-scroll::-webkit-scrollbar-thumb {\n  background: transparent;\n  border-radius: 6px;\n  border: 2px solid transparent;\n  background-clip: padding-box;\n}\n:host .parties-blue-scroll:hover::-webkit-scrollbar-thumb {\n  background-color: #0596aa;\n}\n:host lol-parties-game-invite.use-animation {\n  animation: game-invite-slide-in 0.3s 1;\n}\n:host lol-parties-game-invite.use-animation {\n  animation: game-invite-slide-in 0.3s 1;\n}\n@-moz-keyframes game-invite-slide-in {\n  0% {\n    animation-timing-function: cubic-bezier(0, 0, 0, 1);\n    height: 0px;\n  }\n  100% {\n    height: 72px;\n  }\n}\n@-webkit-keyframes game-invite-slide-in {\n  0% {\n    animation-timing-function: cubic-bezier(0, 0, 0, 1);\n    height: 0px;\n  }\n  100% {\n    height: 72px;\n  }\n}\n@-o-keyframes game-invite-slide-in {\n  0% {\n    animation-timing-function: cubic-bezier(0, 0, 0, 1);\n    height: 0px;\n  }\n  100% {\n    height: 72px;\n  }\n}\n@keyframes game-invite-slide-in {\n  0% {\n    animation-timing-function: cubic-bezier(0, 0, 0, 1);\n    height: 0px;\n  }\n  100% {\n    height: 72px;\n  }\n}\n',
          "",
        ]),
          (e.exports = s);
      },
      (e, t, n) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.default = void 0);
        var i = (function (e, t) {
            if (!t && e && e.__esModule) return e;
            if (null === e || ("object" != typeof e && "function" != typeof e))
              return { default: e };
            var n = c(t);
            if (n && n.has(e)) return n.get(e);
            var i = {},
              s = Object.defineProperty && Object.getOwnPropertyDescriptor;
            for (var o in e)
              if (
                "default" !== o &&
                Object.prototype.hasOwnProperty.call(e, o)
              ) {
                var a = s ? Object.getOwnPropertyDescriptor(e, o) : null;
                a && (a.get || a.set)
                  ? Object.defineProperty(i, o, a)
                  : (i[o] = e[o]);
              }
            (i.default = e), n && n.set(e, i);
            return i;
          })(n(1)),
          s = l(n(96)),
          o = l(n(22)),
          a = l(n(7)),
          r = l(n(119));
        function l(e) {
          return e && e.__esModule ? e : { default: e };
        }
        function c(e) {
          if ("function" != typeof WeakMap) return null;
          var t = new WeakMap(),
            n = new WeakMap();
          return (c = function (e) {
            return e ? n : t;
          })(e);
        }
        const m = i.default.getProvider().getSocket(),
          u = "sfx-ui";
        class d extends i.webComponents.ShadowElement {
          templateMarkup() {
            return n(504);
          }
          stylesheetMarkup() {
            return n(505);
          }
          constructor() {
            super(),
              (this._errorOpen = !1),
              (this._gameInvite = null),
              (this._patcherConnected = null),
              (this._patcherState = null),
              (this._chatSettings = null),
              (this._listeners = {}),
              (this._listeners.onMouseOver = this._onMouseOver.bind(this)),
              (this._listeners.onMouseOut = this._onMouseOut.bind(this)),
              (this._listeners.onAcceptClicked =
                this._acceptGameInvite.bind(this)),
              (this._listeners.onDeclineClicked =
                this._declineGameInvite.bind(this)),
              (this._listeners.onCloseErrorClicked =
                this._closeError.bind(this)),
              (this._playerNames = i.playerNames),
              (this._summonerBinding = (0, i.dataBinding)("/lol-summoner", m)),
              (this._lobbyBinding = (0, i.dataBinding)("/lol-lobby", m)),
              (this._toastManager = i.UIKit.getToastManager()),
              (this._templateHelper = i.UIKit.getTemplateHelper());
          }
          connectedCallback() {
            super.connectedCallback(),
              this.addEventListener("mouseover", this._listeners.onMouseOver),
              this.addEventListener("mouseout", this._listeners.onMouseOut),
              this._attachListener(
                ".parties-accept-btn",
                "click",
                this._listeners.onAcceptClicked,
              ),
              this._attachListener(
                ".parties-decline-btn",
                "click",
                this._listeners.onDeclineClicked,
              ),
              this._attachListener(
                ".parties-error-message-close-btn",
                "click",
                this._listeners.onCloseErrorClicked,
              ),
              this._onHoldText();
          }
          disconnectedCallback() {
            super.disconnectedCallback(),
              this.removeEventListener(
                "mouseover",
                this._listeners.onMouseOver,
              ),
              this.removeEventListener("mouseout", this._listeners.onMouseOut),
              this._detachListener(
                ".parties-accept-btn",
                "click",
                this._listeners.onAcceptClicked,
              ),
              this._detachListener(
                ".parties-decline-btn",
                "click",
                this._listeners.onDeclineClicked,
              ),
              this._detachListener(
                ".parties-error-message-close-btn",
                "click",
                this._listeners.onCloseErrorClicked,
              );
          }
          updateGameInvite(e) {
            this._gameInvite = e;
            const t = this._gameInvite ? this._gameInvite.gameConfig : null;
            this._inviteFromPlayerText(this._gameInvite),
              this._updateDisabledReason(),
              t &&
                (this._gameNameText(t),
                this._gameTypeText(t),
                this._mapIcon(t)),
              this._updateAcceptable();
          }
          updateUXSettings(e) {
            (this._uxSettings = e), this._animationSettings();
          }
          updateCurrentPlayerChat(e) {
            (this._currentPlayerChat = e),
              this._updateAvailablity(),
              this._updateAcceptable();
          }
          updatePatcherConnected(e) {
            (this._patcherConnected = e),
              this._updateAcceptable(),
              this._updateDisabledReason();
          }
          updatePatcherState(e) {
            (this._patcherState = e),
              this._updateAcceptable(),
              this._updateDisabledReason();
          }
          updateChatSettings(e) {
            (this._chatSettings = e), this._updateAcceptable();
          }
          updateGameSearch(e) {
            (this._gameSearch = e), this._updateDisabledReason();
          }
          _inviteFromPlayerText(e) {
            const t = this.shadowRoot.querySelectorAll(
              ".parties-game-invite-name",
            );
            for (let n = 0; n < t.length; n++) {
              const i = t.item(n);
              i && this._summonerName(i, e.fromSummonerId);
            }
          }
          _gameNameText(e) {
            const t = this._gameName(e),
              n = this.shadowRoot.querySelector(".parties-game-name");
            n && (n.innerHTML = t);
          }
          _gameName(e) {
            let t = "";
            if (e) {
              const n = a.default.getMapModeInfo(
                e.mapId,
                e.gameMode,
                e.queueId,
              );
              t = n.isRGM && n.gameModeShortName ? n.gameModeShortName : n.name;
            }
            return t;
          }
          _gameTypeText(e) {
            let t = this._gameType(e);
            t = t || "";
            const n = this.shadowRoot.querySelector(".parties-game-type");
            n && (n.innerHTML = t);
          }
          _gameType(e) {
            return s.default.gameType(e);
          }
          _mapIcon(e) {
            const t = this._mapKey(e),
              n = this.shadowRoot.querySelector(".parties-map-icon");
            t &&
              n &&
              ((n.className = ""), n.classList.add("parties-map-icon", t));
          }
          _mapKey(e) {
            return s.default.mapKey(e);
          }
          async _summonerName(e, t) {
            if (!this._name) {
              const { playerName: n } =
                await this._playerNames.getDisplayNameBySummonerId(t);
              (this._name = n), (e.innerHTML = n || "");
            }
          }
          _gridHoverSound() {
            i.Audio.getChannel(u).playSound(
              "/fe/lol-parties/sfx-uikit-grid-big-hover.ogg",
            );
          }
          _onHoldText() {
            const e = this.shadowRoot.querySelector(
              ".parties-game-info-subtitle-hold",
            );
            e &&
              (e.innerHTML = i.tra.get(
                "parties_roster_invite_disabled_in_game_queue",
              ));
          }
          _updateAcceptable() {
            const e = s.default.isReadyForGame(this._patcherState);
            (this._acceptable = s.default.isGameInviteAcceptable(
              this._gameInvite,
              this._chatSettings,
              this._currentPlayerChat,
              this._patcherConnected,
              e,
            )),
              this._acceptable
                ? this._enterAcceptableState()
                : this._enterUnacceptableState();
          }
          _enterAcceptableState() {
            this._enableMapIcon(),
              this._showGameName(),
              this._showGameType(),
              this._hideDisabledReason(),
              this._enableAcceptableButtons(),
              this._showAcceptButton();
          }
          _enterUnacceptableState() {
            this._disableMapIcon(),
              this._hideGameName(),
              this._hideGameType(),
              this._showDisabledReason(),
              this._disabledAcceptableButtons(),
              this._hideAcceptButton();
          }
          _showError() {
            this._removeClass(
              "parties-game-invite-hide",
              ".parties-error-message",
            );
          }
          _hideError() {
            this._addClass(
              "parties-game-invite-hide",
              ".parties-error-message",
            );
          }
          _showAcceptButton() {
            this._removeClass(
              "parties-game-invite-hide",
              ".parties-accept-btn",
            );
          }
          _hideAcceptButton() {
            this._addClass("parties-game-invite-hide", ".parties-accept-btn");
          }
          _enableAcceptableButtons() {
            this._addClass("acceptable", ".parties-game-invite-buttons");
          }
          _disabledAcceptableButtons() {
            this._removeClass("acceptable", ".parties-game-invite-buttons");
          }
          _showDisabledReason() {
            this._removeClassFromAll(
              "parties-game-info-subtitle-hide",
              ".parties-game-info-container .parties-game-info-subtitle-disabled",
            );
          }
          _hideDisabledReason() {
            this._addClassToAll(
              "parties-game-info-subtitle-hide",
              ".parties-game-info-container .parties-game-info-subtitle-disabled",
            );
          }
          _showGameName() {
            this._removeClass(
              "parties-game-info-subtitle-hide",
              ".parties-game-name",
            );
          }
          _hideGameName() {
            this._addClass(
              "parties-game-info-subtitle-hide",
              ".parties-game-name",
            );
          }
          _showGameType() {
            this._removeClass(
              "parties-game-info-subtitle-hide",
              ".parties-game-type",
            );
          }
          _hideGameType() {
            this._addClass(
              "parties-game-info-subtitle-hide",
              ".parties-game-type",
            );
          }
          _enableMapIcon() {
            this._removeClass("disabled", ".parties-map-icon");
          }
          _disableMapIcon() {
            this._addClass("disabled", ".parties-map-icon");
          }
          _updateAvailablity() {
            const e = this._currentPlayerChat;
            if (e) {
              const { availability: t } = e;
              t && "dnd" === t
                ? this._showDoNotDisturbLayout()
                : this._showAvailableLayout();
            }
          }
          _showAvailableLayout() {
            this._removeClass(
              "parties-game-invite-hide",
              ".parties-game-info-container-available",
            ),
              this._addClass(
                "parties-game-invite-hide",
                ".parties-game-info-container-dnd",
              );
          }
          _showDoNotDisturbLayout() {
            this._removeClass(
              "parties-game-invite-hide",
              ".parties-game-info-container-dnd",
            ),
              this._addClass(
                "parties-game-invite-hide",
                ".parties-game-info-container-available",
              );
          }
          _updateDisabledReason() {
            const e = this._disabledReasonMessage();
            if (e) {
              const t =
                  ".parties-game-info-container .parties-game-info-subtitle-disabled",
                n = this.shadowRoot.querySelectorAll(t);
              for (let t = 0; t < n.length; t++) {
                const i = n.item(t);
                i && (i.innerHTML = e);
              }
            }
          }
          _disabledReasonMessage() {
            const e = this._gameInvite;
            if (e) {
              if (!e.canAcceptInvitation) {
                const t = e.restrictions[0] || {
                    restrictionCode: "UnknownRestriction",
                  },
                  n = t.restrictionCode ? t.restrictionCode.toLowerCase() : "",
                  s = t.restrictionArgs;
                return i.tra.formatString(
                  `parties_queue_restriction_player_${n}`,
                  s,
                );
              }
              return "ONHOLD" === e.state.toUpperCase() || this._gameSearch
                ? i.tra.get("parties_roster_invite_disabled_in_game_queue")
                : "REVOKED" === e.state.toUpperCase()
                  ? i.tra.get("parties_roster_invite_disabled_expired")
                  : this._isPatcherCheckingForUpdates()
                    ? i.tra.get(
                        "parties_roster_invite_disabled_checking_updates",
                      )
                    : this._isPatching()
                      ? i.tra.get("parties_roster_invite_disabled_patching")
                      : this._patcherConnected
                        ? null
                        : i.tra.get(
                            "parties_roster_invite_disabled_patcher_disconnected",
                          );
            }
          }
          _isPatcherCheckingForUpdates() {
            const e = this._patcherState;
            return !!e && !e.isUpToDate && "CheckingForUpdates" === e.action;
          }
          _isPatching() {
            const e = this._patcherState;
            return (
              !(!e || !e.action) &&
              ("Patching" === e.action || "Repairing" === e.action)
            );
          }
          _animationSettings() {
            this._uxSettings && !this._uxSettings.largeAreaAnimationsEnabled
              ? (this._removeClass(
                  "use-animation",
                  ".parties-game-invite-buttons",
                ),
                this.classList.remove("use-animation"))
              : (this._addClass(
                  "use-animation",
                  ".parties-game-invite-buttons",
                ),
                this.classList.add("use-animation"));
          }
          _onMouseOut() {
            const e = this.previousElementSibling;
            e && e.classList.remove("parties-hide-divider");
          }
          _onMouseOver() {
            const e = this.previousElementSibling;
            e && e.classList.add("parties-hide-divider"),
              this._gridHoverSound();
          }
          _acceptGameInvite() {
            if (this._gameInvite && this._acceptable) {
              this._playAcceptSound();
              const e = this._gameInvite.invitationId;
              return this._lobbyBinding
                .post(`/v2/received-invitations/${e}/accept`)
                .then(() => {
                  (this._errorOpen = !1),
                    this._hideError(),
                    r.default.gameInviteAccept(),
                    this._showParty();
                })
                .catch((t) => {
                  let n = "";
                  switch (
                    (i.logger.error(
                      `Error accepting game invite, id: ${e} error: ${t}`,
                    ),
                    r.default.logError(
                      "gameInviteAccept",
                      t.translationKey,
                      t.translationKey,
                    ),
                    t.status)
                  ) {
                    case 403:
                      n = i.tra.get(
                        "parties_game_invite_system_message_game_full",
                      );
                      break;
                    case 404:
                    case 410:
                      n = i.tra.get(
                        "parties_game_invite_system_message_game_not_found",
                      );
                      break;
                    case 438:
                      n = i.tra.get(
                        "parties_game_invite_system_message_game_version_mismatch",
                      );
                      break;
                    default:
                      n = i.tra.get(
                        "parties_game_invite_system_message_server_error",
                      );
                  }
                  this._displayErrorMessage(n);
                });
            }
            return Promise.resolve();
          }
          _displayErrorMessage(e, t = 5e3) {
            this._addErrorMessage(e),
              (this._errorOpen = !0),
              this._showError(),
              this._toast(e),
              this._playErrorSound(),
              setTimeout(() => {
                this._closeError();
              }, t);
          }
          _declineGameInvite() {
            if (this._gameInvite) {
              this._playClickSound();
              const e = this._gameInvite.invitationId;
              this._lobbyBinding
                .post(`/v2/received-invitations/${e}/decline`)
                .then(() => {
                  r.default.gameInviteDecline();
                })
                .catch((t) => {
                  i.logger.error(
                    `Error declining game invite, id: ${e} error: ${t}`,
                  ),
                    r.default.logError(
                      "declineGameInvite",
                      t.translationKey,
                      t.translationKey,
                    );
                });
            }
          }
          _addErrorMessage(e) {
            const t = this.shadowRoot.querySelector(
              ".parties-error-message-text",
            );
            t && (t.innerHTML = e);
          }
          _closeError() {
            (this._errorOpen = !1), this._hideError();
          }
          _playAcceptSound() {
            i.Audio.getChannel(u).playSound(
              "/fe/lol-parties/sfx-soc-ui-gameinvite-accept-click.ogg",
            );
          }
          _playErrorSound() {
            i.Audio.getChannel(u).playSound(
              "/fe/lol-parties/sfx-login-notif-login-fail.ogg",
            );
          }
          _playClickSound() {
            i.Audio.getChannel(u).playSound(
              "/fe/lol-parties/sfx-soc-ui-click-generic.ogg",
            );
          }
          _addClass(e, t) {
            const n = this.shadowRoot.querySelector(t);
            n && !n.classList.contains(e) && n.classList.add(e);
          }
          _addClassToAll(e, t) {
            const n = this.shadowRoot.querySelectorAll(t);
            for (let t = 0; t < n.length; t++) {
              const i = n.item(t);
              i && !i.classList.contains(e) && i.classList.add(e);
            }
          }
          _removeClass(e, t) {
            const n = this.shadowRoot.querySelector(t);
            n && n.classList.contains(e) && n.classList.remove(e);
          }
          _removeClassFromAll(e, t) {
            const n = this.shadowRoot.querySelectorAll(t);
            for (let t = 0; t < n.length; t++) {
              const i = n.item(t);
              i && i.classList.contains(e) && i.classList.remove(e);
            }
          }
          _attachListener(e, t, n) {
            const i = this.shadowRoot.querySelector(e);
            i && i.addEventListener(t, n);
          }
          _detachListener(e, t, n) {
            const i = this.shadowRoot.querySelector(e);
            i && i.removeEventListener(t, n);
          }
          _toast(e) {
            const t = this._templateHelper.contentBlockNotification(e);
            this._toastManager.add({
              type: "DialogToast",
              data: { contents: t },
            });
          }
          _showParty() {
            const e = o.default.get("viewportApiKey");
            i.Viewport.main().getScreenRoot(e, "rcp-fe-lol-parties").bump();
          }
        }
        d.tagName = "lol-parties-game-invite";
        var p = d;
        t.default = p;
      },
      (e) => {
        "use strict";
        e.exports =
          '<template id="lol-parties-template-game-invite">\r\n  <div class="parties-game-invite">\r\n    <div class="parties-map-icon"></div>\r\n\r\n    <div class="parties-game-info-container parties-game-info-container-dnd parties-game-invite-hide">\r\n      <div class="parties-game-invite-name"></div>\r\n      <div class="parties-game-info-subtitle-hold parties-game-info-subtitle-disabled"></div>\r\n    </div>\r\n\r\n    <div class="parties-game-info-container parties-game-info-container-available">\r\n      <div class="parties-game-invite-name"></div>\r\n      <div class="parties-game-info-subtitle parties-game-name"></div>\r\n      <div class="parties-game-info-subtitle parties-game-type"></div>\r\n      <div class="parties-game-info-subtitle parties-game-info-subtitle-disabled"></div>\r\n    </div>\r\n\r\n    <div class="parties-game-invite-buttons use-animation">\r\n      <div class="parties-accept-btn"></div>\r\n      <div class="parties-decline-btn"></div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class="parties-error-message parties-game-invite-hide">\r\n    <div class="parties-error-message-text"></div>\r\n    <div class="parties-error-message-close-btn"></div>\r\n  </div>\r\n</template>\r\n';
      },
      (e, t, n) => {
        var i = n(497),
          s = n(498)(i);
        s.push([
          e.id,
          ':host .parties-game-invite-name,\n:host .parties-game-info-subtitle {\n  font-family: var(--font-body);\n}\n:host .parties-game-invite-name,\n:host .parties-game-info-subtitle {\n  -webkit-user-select: none;\n}\n:host .parties-game-invite-name,\n:host .parties-game-info-subtitle {\n  font-kerning: normal;\n  -webkit-font-feature-settings: "kern" 1;\n  -webkit-font-smoothing: antialiased;\n}\n:host .parties-game-invite-name {\n  color: #a09b8c;\n  font-size: 14px;\n  font-weight: normal;\n  line-height: 20px;\n  letter-spacing: 0.025em;\n  -webkit-font-smoothing: subpixel-antialiased;\n}\n:host .parties-game-invite-name:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host .parties-game-info-subtitle {\n  color: #a09b8c;\n  font-size: 12px;\n  font-weight: normal;\n  line-height: 16px;\n  letter-spacing: 0.025em;\n  -webkit-font-smoothing: subpixel-antialiased;\n}\n:host .parties-game-info-subtitle:lang(ja-jp) {\n  font-size: 13px;\n}\n:host .parties-game-info-subtitle:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host .parties-map-icon {\n  width: 34px;\n  height: 32px;\n  background-size: auto 64px;\n  background-repeat: no-repeat;\n}\n:host .parties-map-icon.game_map_howling_abyss {\n  background-image: url("/fe/lol-parties/map_ha.png");\n}\n:host .parties-map-icon.game_map_summoners_rift {\n  background-image: url("/fe/lol-parties/map_sr.png");\n}\n:host .parties-map-icon.game_map_twisted_treeline {\n  background-image: url("/fe/lol-parties/map_tt.png");\n}\n:host .parties-map-icon.game_map_rotating_game_mode {\n  background-image: url("/fe/lol-parties/map_rgm.png");\n}\n:host .parties-map-icon.game_map_21 {\n  background-image: url("/fe/lol-parties/map_21.png");\n}\n:host .parties-map-icon.game_map_22 {\n  background-image: url("/fe/lol-parties/map_tft.png");\n}\n:host .parties-map-icon.game_map_30 {\n  background-image: url("/lol-game-data/assets/content/src/LeagueClient/GameModeAssets/Cherry/img/icon-v2.png");\n  background-size: 30px 30px;\n  background-position: center;\n}\n:host.parties-hide-divider .parties-game-invite::after {\n  background: none;\n}\n:host .parties-game-invite {\n  direction: ltr;\n  display: flex;\n  align-items: center;\n  height: 72px;\n  flex-shrink: 0;\n}\n:host .parties-game-invite:lang(ar-ae) {\n  direction: rtl;\n}\n:host .parties-mini {\n  height: 44px;\n}\n:host .parties-game-invite::after {\n  content: \'\';\n  position: absolute;\n  bottom: 0;\n  left: 10px;\n  width: calc(100% - 20px);\n  height: 1px;\n  background-color: #005a82;\n}\n:host .parties-game-invite:hover::after {\n  background: none;\n}\n:host .parties-map-icon {\n  margin: 0 10px;\n  background-position: center top;\n}\n:host .parties-map-icon.disabled {\n  background-position-y: -32px;\n}\n:host .parties-game-info-container {\n  line-height: 16px;\n  flex: 1;\n  overflow: hidden;\n}\n:host .parties-game-info-container > * {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n:host .parties-game-invite-name {\n  color: #f0e6d2;\n}\n:host .parties-game-info-subtitle {\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  overflow: hidden;\n}\n:host .parties-game-info-subtitle.parties-game-info-subtitle-hide {\n  display: none;\n}\n:host .parties-game-info-subtitle-disabled {\n  white-space: normal;\n}\n:host .parties-game-invite:hover {\n  background-image: linear-gradient(to right, rgba(10,203,230,0.2), rgba(10,203,230,0));\n}\n:host .parties-game-invite-buttons {\n  display: flex;\n  max-width: 35px;\n}\n:host .parties-game-invite-buttons.acceptable {\n  max-width: 67px;\n}\n:host .parties-accept-btn,\n:host .parties-decline-btn {\n  width: 30px;\n  height: 30px;\n  cursor: pointer;\n  flex-shrink: 0;\n}\n:host .parties-accept-btn {\n  outline: none;\n  border: none;\n  background: none;\n  cursor: pointer;\n  padding: 0;\n  background-image: url("/fe/lol-parties/bluebutton_checkmark.png");\n  background-size: cover;\n  background-position-y: 0px;\n}\n:host .parties-accept-btn:hover {\n  background-position-y: -30px;\n}\n:host .parties-accept-btn:active {\n  background-position-y: -60px;\n}\n:host .parties-accept-btn:disabled,\n:host .parties-accept-btn[disabled],\n:host .parties-accept-btn.disabled {\n  cursor: default;\n  background-position-y: -90px;\n}\n:host .parties-decline-btn {\n  outline: none;\n  border: none;\n  background: none;\n  cursor: pointer;\n  padding: 0;\n  -webkit-mask: url("/fe/lol-parties/x_mask.png") no-repeat center;\n  background-color: #0ac8b9;\n  -webkit-mask-size: 18px;\n  margin: 0 3px 0 0;\n}\n:host .parties-decline-btn:hover {\n  background-color: #cdfafa;\n}\n:host .parties-decline-btn:active {\n  background-color: #005a82;\n}\n:host .parties-decline-btn:lang(ar-ae) {\n  margin: 0 0 0 3px;\n}\n:host .parties-error-message {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  background-color: #bc213b;\n  color: #fff;\n  padding: 8px 10px;\n  direction: ltr;\n}\n:host .parties-error-message-close-btn {\n  -webkit-mask: url("/fe/lol-parties/x_mask.png") center no-repeat;\n  -webkit-mask-size: 18px;\n  background-color: #fff;\n  height: 18px;\n  width: 18px;\n  margin: 0 0 0 5px;\n  cursor: pointer;\n}\n:host .parties-error-message-close-btn:lang(ar-ae) {\n  margin: 0 5px 0 0;\n}\n:host .parties-game-invite-hide {\n  display: none;\n}\n',
          "",
        ]),
          (e.exports = s);
      },
      (e, t, n) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.default = void 0);
        var i,
          s = (function (e, t) {
            if (!t && e && e.__esModule) return e;
            if (null === e || ("object" != typeof e && "function" != typeof e))
              return { default: e };
            var n = r(t);
            if (n && n.has(e)) return n.get(e);
            var i = {},
              s = Object.defineProperty && Object.getOwnPropertyDescriptor;
            for (var o in e)
              if (
                "default" !== o &&
                Object.prototype.hasOwnProperty.call(e, o)
              ) {
                var a = s ? Object.getOwnPropertyDescriptor(e, o) : null;
                a && (a.get || a.set)
                  ? Object.defineProperty(i, o, a)
                  : (i[o] = e[o]);
              }
            (i.default = e), n && n.set(e, i);
            return i;
          })(n(1)),
          o = (i = n(507)) && i.__esModule ? i : { default: i },
          a = n(59);
        function r(e) {
          if ("function" != typeof WeakMap) return null;
          var t = new WeakMap(),
            n = new WeakMap();
          return (r = function (e) {
            return e ? n : t;
          })(e);
        }
        const l = s.default.getProvider().getSocket();
        class c extends s.webComponents.ShadowElement {
          templateMarkup() {
            return n(510);
          }
          stylesheetMarkup() {
            return n(511);
          }
          constructor() {
            super(),
              (this._animationsEnabled = !0),
              (this._haveGameInvites = !1),
              (this._haveGameSearch = !1),
              (this._isInQueueDelay = !1),
              (this._listeners = {}),
              (this._listeners.onUXSettingsChange =
                this._updateUXSettings.bind(this)),
              (this._matchmakingBinding = (0, s.dataBinding)(
                "/lol-matchmaking",
                l,
              )),
              (this._lobbyBinding = (0, s.dataBinding)("/lol-lobby", l));
          }
          connectedCallback() {
            super.connectedCallback(),
              this.addEventListener(
                "gameInviteAdded",
                this._listeners.onGameInviteAdded,
              ),
              this._observeGameInvites(),
              this._observeUXSettings(),
              this._observeSearch(),
              this.shadowRoot
                .querySelector("lol-parties-status-card")
                .addEventListener("click", () => this._showLobby());
          }
          _showLobby() {
            s.PartyAPI.showParty();
          }
          disconnectedCallback() {
            super.disconnectedCallback(),
              this.removeEventListener(
                "gameInviteAdded",
                this._listeners.onGameInviteAdded,
              ),
              this._unobserveUXSettings(),
              this._matchmakingBinding.unobserve(this),
              this._lobbyBinding.unobserve(this);
          }
          _observeSearch() {
            this._matchmakingBinding.observe("v1/search", (e) => {
              this._onGameSearchChanged(e);
            });
          }
          _onGameSearchChanged(e) {
            const t = this._haveGameSearch;
            e && !this._gameSearchIsError(e)
              ? ((this._haveGameSearch = !0),
                this._updateGameInvitesElement(e, "updateGameSearch"))
              : ((this._haveGameSearch = !1),
                this._updateGameInvitesElement(null, "updateGameSearch"));
            const n = this._isInQueueDelay;
            e && e.lowPriorityData
              ? (this._isInQueueDelay =
                  e.lowPriorityData.reason ===
                  a.LOW_PRIORITY_REASONS.QUEUE_DELAY)
              : (this._isInQueueDelay = !1),
              (t === this._haveGameSearch && n === this._isInQueueDelay) ||
                (this._toggleQueueDelayClass(), this._checkIfMagicShouldPlay()),
              this._updateGameSearchElement(e, "updateGameSearch"),
              this._updatePartyCardShow(!this._haveGameSearch);
          }
          _observeUXSettings() {
            this._UXObserverAttached ||
              (s.UXSettings.addObserver(this._listeners.onUXSettingsChange),
              (this._UXObserverAttached = !0));
          }
          _unobserveUXSettings() {
            this._UXObserverAttached &&
              (s.UXSettings.removeObserver(this._listeners.onUXSettingsChange),
              (this._UXObserverAttached = !1));
          }
          _updateUXSettings(e) {
            e && !e.largeAreaAnimationsEnabled
              ? (this._animationsEnabled = !1)
              : (this._animationsEnabled = !0),
              this._toggleAnimationsOnSectionElement(),
              this._toggleAnimationsOnMagicElement();
          }
          _toggleAnimationsOnSectionElement() {
            const e = this.shadowRoot.querySelector(".parties-game-section");
            e &&
              (this._animationsEnabled
                ? e.classList.add("use-animation")
                : e.classList.remove("use-animation"));
          }
          _updatePartyCardShow(e) {
            const t = this.shadowRoot.querySelector(
              ".parties-status-card-hide",
            );
            if (!t) return;
            e !== !t.classList.contains("hide") &&
              (e ? t.classList.remove("hide") : t.classList.add("hide"));
          }
          _observeGameInvites() {
            this._lobbyBinding.observe("v2/received-invitations", (e) => {
              this._onGameInvitesChanged(e);
            });
          }
          _onGameInvitesChanged(e) {
            const t = this._activeGameInvites(e);
            (this._haveGameInvites = t && t.length > 0),
              this._checkIfMagicShouldPlay(),
              this._updateGameInvitesElement(t, "onGameInvitesChanged");
          }
          _toggleAnimationsOnMagicElement() {
            this._animationsEnabled
              ? this._videoElement ||
                ((this._videoElement = document.createElement("video")),
                this._videoElement.setAttribute("autoplay", !0),
                this._videoElement.setAttribute("loop", !0),
                this._videoElement.setAttribute("no-controls", !0),
                this._videoElement.setAttribute("preload", "auto"),
                this._getBackgroundContainerElement().appendChild(
                  this._videoElement,
                ),
                this._checkIfMagicShouldPlay())
              : (this._videoElement && this._videoElement.remove(),
                (this._videoElement = null));
          }
          _toggleQueueDelayClass() {
            const e = this.shadowRoot.querySelector(
              ".parties-game-info-panel-bg-container",
            );
            e &&
              (this._isInQueueDelay
                ? e.classList.add("queue-delay")
                : e.classList.remove("queue-delay"));
          }
          _updateGameInvitesElement(e, t) {
            const n = this.shadowRoot.querySelector("lol-parties-game-invites");
            n && n[t](e);
          }
          _updateGameSearchElement(e, t) {
            const n = this.shadowRoot.querySelector("lol-parties-game-search");
            n && n[t](e);
          }
          _getBackgroundContainerElement() {
            return this.shadowRoot.querySelector(
              ".parties-game-info-panel-bg-container",
            );
          }
          _activeGameInvites(e) {
            return e
              ? e.filter(function (e) {
                  return "DECLINED" !== e.state.toUpperCase();
                })
              : [];
          }
          _gameSearchIsError(e) {
            return !(!e.searchState || "Error" !== e.searchState);
          }
          _checkIfMagicShouldPlay() {
            const e = this._haveGameInvites || this._haveGameSearch;
            this.playMagic(e);
          }
          playMagic(e) {
            const t = this._isInQueueDelay
              ? o.default.queueDelayVideo
              : o.default.backgroundVideo;
            this._videoElement &&
              (e
                ? this._videoElement.src
                  ? this._videoElement.src !== t &&
                    (this._videoElement.pause(),
                    this._videoElement.setAttribute("src", t),
                    this._videoElement.play())
                  : (this._videoElement.setAttribute("src", t),
                    this._videoElement.play())
                : (this._videoElement.pause(),
                  this._videoElement.removeAttribute("src")));
          }
        }
        c.tagName = "lol-parties-game-info-panel";
        var m = c;
        t.default = m;
      },
      (e, t, n) => {
        "use strict";
        const i = { backgroundVideo: n(508), queueDelayVideo: n(509) };
        e.exports = i;
      },
      (e, t, n) => {
        "use strict";
        e.exports = n.p + "social-panel-bg-loop.webm";
      },
      (e, t, n) => {
        "use strict";
        e.exports = n.p + "queue-delay-bg-loop.webm";
      },
      (e) => {
        "use strict";
        e.exports =
          '<template id="lol-parties-template-game-info-panel">\r\n  <div class="parties-game-section">\r\n    <div class="parties-game-info-panel-bg-container"></div>\r\n    <div class="parties-game-info-panel-content">\r\n      <lol-parties-game-search class="parties-game-search-hide"></lol-parties-game-search>\r\n      <lol-parties-game-invites class="parties-game-invites-hide"></lol-parties-game-invites>\r\n      <lol-parties-status-card class="parties-status-card-hide"></lol-parties-status-card>\r\n    </div>\r\n  </div>\r\n</template>\r\n';
      },
      (e, t, n) => {
        var i = n(497),
          s = n(498)(i);
        s.push([
          e.id,
          ':host .parties-game-section {\n  flex: 0 0 auto;\n  position: relative;\n  overflow: hidden;\n}\n:host .parties-game-section:not(.use-animation) lol-parties-game-search.parties-game-search-hide {\n  display: none;\n}\n:host .parties-game-section:not(.use-animation) lol-parties-game-invites.parties-game-invites-hide {\n  display: none;\n}\n:host .parties-game-section.use-animation lol-parties-game-search {\n  transition: height 300ms cubic-bezier(0, 0, 0, 1);\n  overflow: hidden;\n  height: 90px;\n}\n:host .parties-game-section.use-animation lol-parties-game-search.parties-game-search-hide {\n  height: 0px;\n}\n:host .parties-game-section.use-animation lol-parties-game-invites {\n  transition: max-height 300ms cubic-bezier(0, 0, 0, 1);\n  max-height: 202px;\n}\n:host .parties-game-section.use-animation lol-parties-game-invites.parties-game-invites-hide {\n  max-height: 0px;\n}\n:host .parties-game-info-panel-bg-container {\n  position: absolute;\n  top: 50%;\n  left: 0;\n  margin-top: -101px;\n  width: 100%;\n  height: 202px;\n  background-image: url("../../images/elements/static_game_panel_bg.png");\n}\n:host .parties-game-info-panel-bg-container.queue-delay {\n  background-image: url("../../images/elements/static_queue_delay_bg.jpg");\n}\n:host .parties-game-info-panel-content {\n  display: flex;\n  flex-direction: column;\n  position: relative;\n  max-height: 202px;\n}\n:host video {\n  height: 100%;\n}\n:host .parties-status-card-hide.hide {\n  display: none;\n}\n',
          "",
        ]),
          (e.exports = s);
      },
      (e, t, n) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.default = void 0);
        var i,
          s = (function (e, t) {
            if (!t && e && e.__esModule) return e;
            if (null === e || ("object" != typeof e && "function" != typeof e))
              return { default: e };
            var n = l(t);
            if (n && n.has(e)) return n.get(e);
            var i = {},
              s = Object.defineProperty && Object.getOwnPropertyDescriptor;
            for (var o in e)
              if (
                "default" !== o &&
                Object.prototype.hasOwnProperty.call(e, o)
              ) {
                var a = s ? Object.getOwnPropertyDescriptor(e, o) : null;
                a && (a.get || a.set)
                  ? Object.defineProperty(i, o, a)
                  : (i[o] = e[o]);
              }
            (i.default = e), n && n.set(e, i);
            return i;
          })(n(1)),
          o = n(97),
          a = n(59),
          r = (i = n(7)) && i.__esModule ? i : { default: i };
        function l(e) {
          if ("function" != typeof WeakMap) return null;
          var t = new WeakMap(),
            n = new WeakMap();
          return (l = function (e) {
            return e ? n : t;
          })(e);
        }
        const c = s.default.getProvider().getSocket();
        class m extends s.webComponents.ShadowElement {
          templateMarkup() {
            return n(513);
          }
          stylesheetMarkup() {
            return n(514);
          }
          constructor() {
            super(),
              (this._listeners = {
                onCancelQueue: this._cancelQueue.bind(this),
              }),
              (this._lobbyBinding = (0, s.dataBinding)("/lol-lobby", c)),
              (this._summonerBinding = (0, s.dataBinding)("/lol-summoner", c)),
              this._observeLobby(),
              (this._isInQueueDelay = !1),
              (this._templateHelper = s.UIKit.getTemplateHelper()),
              (this._tooltipManager = s.UIKit.getTooltipManager()),
              (this._playerNames = s.playerNames);
          }
          connectedCallback() {
            super.connectedCallback(),
              this._setElementText(
                ".parties-game-search-header-text",
                s.tra.get("parties_game_search_finding_match"),
              ),
              this._attachListener(
                ".parties-game-search-cancel",
                "click",
                this._listeners.onCancelQueue,
              );
          }
          disconnectedCallback() {
            super.disconnectedCallback(),
              this._detachListener(
                ".parties-game-search-cancel",
                "click",
                this._listeners.onCancelQueue,
              ),
              this._removeTooltip(this._lowPriorityTooltipTarget),
              this._lobbyBinding.unobserve("v2/lobby", this);
          }
          _observeLobby() {
            this._lobbyBinding.observe("v2/lobby", (e) => {
              this._updateLobby(e);
            });
          }
          _updateLobby(e) {
            (this._lobby = e), this._updateMapImage(e), this._updateDivider(e);
          }
          updateGameSearch(e) {
            (this._gameSearch = e),
              e
                ? (e.searchState && "Error" === e.searchState) ||
                  (this._gameSearchStarted ||
                    (this._onGameSearchStarted(e),
                    (this._gameSearchStarted = !0)),
                  this._updateQueueDelayMessaging(e),
                  this._updatePenaltyTime(e),
                  this._updateTimeInQueue(e),
                  this._updateEstimatedQueueTime(e))
                : this._gameSearchStarted &&
                  (this._onGameSearchEnded(), (this._gameSearchStarted = !1));
          }
          _onGameSearchStarted(e) {
            this._show(),
              this._updateLowPriorityTooltip(e),
              this.dispatchEvent(
                new Event("gameSearchStarted", { bubbles: !0 }),
              );
          }
          _show() {
            this.classList.remove("parties-game-search-hide");
          }
          _hide() {
            this.classList.add("parties-game-search-hide");
          }
          _onGameSearchEnded() {
            this._hide(),
              this._removeTooltip(this._lowPriorityTooltipTarget),
              this._clearLowPriorityAlert();
          }
          _updateTimeInQueue(e) {
            const { timeInQueue: t } = e;
            s.lodash.isNumber(t) &&
              this._setElementText(
                ".parties-game-search-elapsed",
                this._secondsFormatted(t),
              );
          }
          _updateEstimatedQueueTime(e) {
            const { estimatedQueueTime: t } = e;
            if (t) {
              const e = this._secondsFormatted(t),
                n = s.tra.get("parties_game_search_estimated_time") + " " + e;
              this._setElementText(".parties-game-search-info", n);
            }
          }
          _updatePenaltyTime(e) {
            const { lowPriorityData: t } = e,
              n = t ? t.penaltyTime : null;
            if (t && t.reason === a.LOW_PRIORITY_REASONS.LEAVER_BUSTED && n) {
              this._removeClass(
                "priority-max-alert",
                ".parties-game-search-elapsed",
              ),
                this._removeClass(
                  "priority-alert",
                  ".parties-game-search-elapsed",
                ),
                this._removeClass(
                  "priority-warning",
                  ".parties-game-search-elapsed",
                );
              let e = null;
              n >= 1200
                ? (e = "priority-max-alert")
                : n >= 600 && n < 1200
                  ? (e = "priority-alert")
                  : n > 0 && n < 600 && (e = "priority-warning"),
                e && this._addClass(e, ".parties-game-search-elapsed");
            }
          }
          _updateQueueDelayMessaging(e) {
            const t = this._isInQueueDelay;
            (this._isInQueueDelay =
              e &&
              e.lowPriorityData &&
              e.lowPriorityData.reason &&
              e.lowPriorityData.reason === a.LOW_PRIORITY_REASONS.QUEUE_DELAY),
              t !== this._isInQueueDelay &&
                (this._isInQueueDelay
                  ? (this._addClass(
                      "queue-delay",
                      ".parties-game-search-status",
                    ),
                    this._setElementText(
                      ".parties-game-search-info",
                      s.tra.get("low_priority_queue_delay_search_info"),
                    ))
                  : (this._removeClass(
                      "queue-delay",
                      ".parties-game-search-status",
                    ),
                    this._setElementText(".parties-game-search-info", ""),
                    this._removeTooltip(this._lowPriorityTooltipTarget)));
          }
          _clearLowPriorityAlert() {
            this._removeClass(
              "priority-max-alert",
              ".parties-game-search-elapsed",
            ),
              this._removeClass(
                "priority-alert",
                ".parties-game-search-elapsed",
              ),
              this._removeClass(
                "priority-warning",
                ".parties-game-search-elapsed",
              );
          }
          _updateLowPriorityTooltip(e) {
            const { lowPriorityData: t } = e,
              n = t ? t.penalizedSummonerIds : [];
            t && t.reason === a.LOW_PRIORITY_REASONS.LEAVER_BUSTED
              ? this._assignLowPriorityQueueTooltip(n, e)
              : t && t.reason === a.LOW_PRIORITY_REASONS.QUEUE_DELAY
                ? this._assignQueueDelayTooltip()
                : this._removeTooltip(this._lowPriorityTooltipTarget);
          }
          _updateDivider(e) {
            e && e.invitations && e.invitations.length > 0
              ? this._removeClass(
                  "parties-game-search-hide",
                  ".parties-game-search-divider",
                )
              : this._addClass(
                  "parties-game-search-hide",
                  ".parties-game-search-divider",
                );
          }
          _updateMapImage(e) {
            if (!e) return;
            const t = this._mapKeyFromLobby(e);
            this._lastMapKey &&
              this._removeClass(this._lastMapKey, ".parties-game-search-map"),
              t && this._addClass(t, ".parties-game-search-map"),
              (this._lastMapKey = t);
          }
          _mapKeyFromLobby(e) {
            if (!e.gameConfig) return "";
            const { gameMode: t } = e.gameConfig,
              { mapId: n } = e.gameConfig;
            if (t && n) {
              const e = r.default.getMapModeInfo(n, t);
              return e && e.isRGM
                ? "game_map_rotating_game_mode"
                : o.MAP_TO_I18N_KEY[n];
            }
            return "";
          }
          _cancelQueue() {
            s.Audio.getChannel("sfx-ui").playSound(
              "/fe/lol-parties/sfx-soc-ui-click-generic.ogg",
            ),
              this._lobbyBinding.delete("/v2/lobby/matchmaking/search");
          }
          _createLowPriorityTooltip(e, t) {
            const n = document.createElement("lol-uikit-tooltip"),
              i = t.templateHelper.contentBlockTooltip(
                t.tra.get("low_priority_queue_modal_header"),
                t.tra.get("low_priority_queue_notification_body"),
                "tooltip-large",
              ),
              s = document.createElement("ul");
            return (
              (s.className = "title-list"),
              t.summonerNames &&
                t.summonerNames.forEach(function (e) {
                  const t = document.createElement("li");
                  (t.innerHTML = e), s.appendChild(t);
                }),
              i.appendChild(s),
              n.appendChild(i),
              n
            );
          }
          _assignQueueDelayTooltip() {
            this._lowPriorityTooltipTarget = this.shadowRoot.querySelector(
              ".parties-game-search-body",
            );
            const e = document.createElement("lol-uikit-tooltip"),
              t = this._templateHelper.contentBlockTooltip(
                s.tra.get("low_priority_queue_delay_warning_header"),
                s.tra.get("low_priority_queue_delay_warning_body"),
                "tooltip-large",
              );
            e.appendChild(t),
              this._tooltipManager.assign(
                this._lowPriorityTooltipTarget,
                e,
                {},
                {
                  orientation: "left",
                  targetAnchor: { x: "left", y: "center" },
                  tooltipAnchor: { x: "right", y: "center" },
                },
              );
          }
          async _assignLowPriorityQueueTooltip(e) {
            const t = (
              await Promise.all(
                e.map((e) => this._playerNames.getDisplayNameBySummonerId(e)),
              )
            ).map(({ playerNameFull: e }) => e);
            (this._lowPriorityTooltipTarget = this.shadowRoot.querySelector(
              ".parties-game-search-body",
            )),
              this._tooltipManager.assign(
                this._lowPriorityTooltipTarget,
                this._createLowPriorityTooltip,
                {
                  tra: s.tra,
                  templateHelper: this._templateHelper,
                  summonerNames: t,
                },
                {
                  orientation: "left",
                  targetAnchor: { x: "left", y: "center" },
                  tooltipAnchor: { x: "right", y: "center" },
                },
              );
          }
          _secondsFormatted(e) {
            if ("number" != typeof e) return "-:--";
            const t = Math.floor(e / 60);
            return (e = Math.floor(e % 60)) < 10 && (e = "0" + e), t + ":" + e;
          }
          _setElementText(e, t) {
            const n = this.shadowRoot.querySelector(e);
            n && (n.innerHTML = t);
          }
          _attachListener(e, t, n) {
            const i = this.shadowRoot.querySelector(e);
            i && i.addEventListener(t, n);
          }
          _detachListener(e, t, n) {
            const i = this.shadowRoot.querySelector(e);
            i && i.removeEventListener(t, n);
          }
          _addClass(e, t) {
            const n = this.shadowRoot.querySelector(t);
            n && !n.classList.contains(e) && n.classList.add(e);
          }
          _removeClass(e, t) {
            const n = this.shadowRoot.querySelector(t);
            n && n.classList.contains(e) && n.classList.remove(e);
          }
          _removeTooltip(e) {
            e && this._tooltipManager.unassign(e);
          }
        }
        m.tagName = "lol-parties-game-search";
        var u = m;
        t.default = u;
      },
      (e) => {
        "use strict";
        e.exports =
          '<template id="lol-parties-template-game-search">\r\n  <div class="parties-game-search-status">\r\n\r\n    <div class="parties-game-search-header">\r\n      <div class="parties-game-search-header-text"></div>\r\n      <div class="parties-game-search-cancel"></div>\r\n    </div>\r\n\r\n    <div class="parties-game-search-body">\r\n      <div class="parties-game-search-map"></div>\r\n      <div class="parties-game-search-body-data">\r\n        <div class="parties-game-search-elapsed"></div>\r\n        <div class="parties-game-search-info"></div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class="parties-game-search-divider parties-game-search-hide"></div>\r\n  </div>\r\n</template>\r\n';
      },
      (e, t, n) => {
        var i = n(497),
          s = n(498)(i);
        s.push([
          e.id,
          ':host .parties-game-search-elapsed,\n:host .parties-game-search-header-text {\n  font-family: var(--font-display);\n}\n:host .parties-game-search-info {\n  font-family: var(--font-body);\n}\n:host .parties-game-search-info,\n:host .parties-game-search-elapsed {\n  -webkit-user-select: none;\n}\n:host .parties-game-search-info,\n:host .parties-game-search-elapsed {\n  font-kerning: normal;\n  -webkit-font-feature-settings: "kern" 1;\n  -webkit-font-smoothing: antialiased;\n}\n:host .parties-game-search-elapsed {\n  text-transform: uppercase;\n}\n:host .parties-game-search-elapsed:lang(ko-kr),\n:host .parties-game-search-elapsed:lang(ja-jp),\n:host .parties-game-search-elapsed:lang(tr-tr),\n:host .parties-game-search-elapsed:lang(el-gr),\n:host .parties-game-search-elapsed:lang(th-th),\n:host .parties-game-search-elapsed:lang(zh-tw) {\n  text-transform: none;\n}\n:host .parties-game-search-elapsed {\n  color: #f0e6d2;\n  font-size: 30px;\n  font-weight: 700;\n  line-height: 32px;\n  letter-spacing: 0.05em;\n}\n:host .parties-game-search-elapsed:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host .parties-game-search-info {\n  color: #a09b8c;\n  font-size: 12px;\n  font-weight: normal;\n  line-height: 16px;\n  letter-spacing: 0.025em;\n  -webkit-font-smoothing: subpixel-antialiased;\n}\n:host .parties-game-search-info:lang(ja-jp) {\n  font-size: 13px;\n}\n:host .parties-game-search-info:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host .parties-game-search-elapsed,\n:host .parties-game-search-header-text {\n  font-family: var(--font-display);\n}\n:host .parties-game-search-info {\n  font-family: var(--font-body);\n}\n:host .parties-game-search-map {\n  width: 34px;\n  height: 32px;\n  background-size: auto 64px;\n  background-repeat: no-repeat;\n}\n:host .parties-game-search-map.game_map_howling_abyss {\n  background-image: url("/fe/lol-parties/map_ha.png");\n}\n:host .parties-game-search-map.game_map_summoners_rift {\n  background-image: url("/fe/lol-parties/map_sr.png");\n}\n:host .parties-game-search-map.game_map_twisted_treeline {\n  background-image: url("/fe/lol-parties/map_tt.png");\n}\n:host .parties-game-search-map.game_map_rotating_game_mode {\n  background-image: url("/fe/lol-parties/map_rgm.png");\n}\n:host .parties-game-search-map.game_map_21 {\n  background-image: url("/fe/lol-parties/map_21.png");\n}\n:host .parties-game-search-map.game_map_22 {\n  background-image: url("/fe/lol-parties/map_tft.png");\n}\n:host .parties-game-search-map.game_map_30 {\n  background-image: url("/lol-game-data/assets/content/src/LeagueClient/GameModeAssets/Cherry/img/icon-v2.png");\n  background-size: 30px 30px;\n  background-position: center;\n}\n:host {\n  display: block;\n  position: relative;\n  flex: 0 0 auto;\n/* Divider line below each game queue */\n/* Hide the divider if the game queue is hovered */\n}\n:host .parties-game-search-status {\n  direction: ltr;\n}\n:host .parties-game-search-status.queue-delay .parties-game-search-info {\n  position: relative;\n  color: #a09b8c;\n  display: flex;\n}\n:host .parties-game-search-status.queue-delay .parties-game-search-info::before {\n  position: relative;\n  top: 1px;\n  width: 18px;\n  height: 18px;\n  margin-right: 5px;\n  content: \'\';\n  -webkit-mask: url("/fe/lol-parties/icon_warning_mask.png") no-repeat center;\n  -webkit-mask-size: contain;\n  background-color: #f0e6d2;\n}\n:host .parties-game-search-status.queue-delay .parties-game-search-info::before {\n  position: absolute;\n  left: 142px /*rtl:0px*/;\n  top: -2px;\n}\n:host .parties-game-search-status.queue-delay .parties-game-search-divider {\n  background-color: #413b07;\n}\n:host .parties-game-search-header {\n  display: flex;\n  justify-content: space-between;\n  height: 32px;\n  align-items: center;\n  padding: 0 9px;\n}\n:host .parties-game-search-body-data {\n  flex: 1;\n}\n:host .parties-game-search-info {\n  color: #0acbe6;\n}\n:host .parties-game-search-elapsed {\n  display: flex;\n  align-items: center;\n}\n:host .parties-game-search-elapsed.priority-warning::before {\n  position: relative;\n  top: 1px;\n  width: 18px;\n  height: 18px;\n  margin-right: 5px;\n  content: \'\';\n  -webkit-mask: url("/fe/lol-parties/icon_warning_mask.png") no-repeat center;\n  -webkit-mask-size: contain;\n  background-color: #c89b3c;\n}\n:host .parties-game-search-elapsed.priority-alert::before {\n  position: relative;\n  top: 1px;\n  width: 18px;\n  height: 18px;\n  margin-right: 5px;\n  content: \'\';\n  -webkit-mask: url("/fe/lol-parties/icon_warning_mask.png") no-repeat center;\n  -webkit-mask-size: contain;\n  background-color: #ff2345;\n}\n:host .parties-game-search-elapsed.priority-max-alert {\n  color: #ff2345;\n}\n:host .parties-game-search-elapsed.priority-max-alert::before {\n  position: relative;\n  top: 1px;\n  width: 18px;\n  height: 18px;\n  margin-right: 5px;\n  content: \'\';\n  -webkit-mask: url("/fe/lol-parties/icon_warning_mask.png") no-repeat center;\n  -webkit-mask-size: contain;\n  background-color: #ff2345;\n}\n:host .parties-game-search-body {\n  display: flex;\n  align-items: flex-start;\n  position: relative;\n  padding: 0 5px 10px 10px /*rtl:0 10px 10px 5px*/;\n}\n:host .parties-game-search-map {\n  margin: 5px 10px 0 0 /*rtl:5px 0 0 10px*/;\n}\n:host .parties-game-search-header-text {\n  color: #a09b8c;\n  font-size: 12px;\n  text-transform: uppercase;\n  font-weight: normal;\n  line-height: 16px;\n  margin: 2px 0;\n  letter-spacing: 1px;\n  display: flex;\n  position: relative;\n}\n:host .parties-game-search-cancel {\n  outline: none;\n  border: none;\n  background: none;\n  cursor: pointer;\n  padding: 0;\n  -webkit-mask: url("/fe/lol-parties/x_mask.png") no-repeat center;\n  -webkit-mask-size: 18px;\n  background-color: #c8aa6e;\n  width: 18px;\n  height: 18px;\n}\n:host .parties-game-search-cancel:hover {\n  background-color: #f0e6d2;\n}\n:host .parties-game-search-cancel:active {\n  background-color: #463714;\n}\n:host .parties-game-search-divider {\n  content: \'\';\n  position: absolute;\n  bottom: 0;\n  left: 10px;\n  width: calc(100% - 20px);\n  height: 1px;\n  background-color: #005a82;\n}\n:host .parties-game-search-status:hover .parties-game-search-divider {\n  background: none;\n}\n:host .parties-game-search-hide {\n  display: none;\n}\n',
          "",
        ]),
          (e.exports = s);
      },
      (e, t, n) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.default = void 0);
        var i,
          s = (function (e, t) {
            if (!t && e && e.__esModule) return e;
            if (null === e || ("object" != typeof e && "function" != typeof e))
              return { default: e };
            var n = l(t);
            if (n && n.has(e)) return n.get(e);
            var i = {},
              s = Object.defineProperty && Object.getOwnPropertyDescriptor;
            for (var o in e)
              if (
                "default" !== o &&
                Object.prototype.hasOwnProperty.call(e, o)
              ) {
                var a = s ? Object.getOwnPropertyDescriptor(e, o) : null;
                a && (a.get || a.set)
                  ? Object.defineProperty(i, o, a)
                  : (i[o] = e[o]);
              }
            (i.default = e), n && n.set(e, i);
            return i;
          })(n(1)),
          o = (i = n(96)) && i.__esModule ? i : { default: i },
          a = n(57),
          r = n(9);
        function l(e) {
          if ("function" != typeof WeakMap) return null;
          var t = new WeakMap(),
            n = new WeakMap();
          return (l = function (e) {
            return e ? n : t;
          })(e);
        }
        const c = { open: n(516), closed: n(508) },
          m = {
            open: "parties_open_party_status_header",
            closed: "parties_closed_party_status_header",
          },
          u = s.default.getProvider().getSocket();
        class d extends s.webComponents.ShadowElement {
          templateMarkup() {
            return n(517);
          }
          stylesheetMarkup() {
            return n(518);
          }
          constructor() {
            super(),
              (this._lobbyBinding = (0, s.dataBinding)("/lol-lobby", u)),
              (this._playerSettingsBinding = (0, s.dataBinding)(
                "/lol-settings",
                u,
              )),
              this._observeLobby(),
              (this._templateHelper = s.UIKit.getTemplateHelper()),
              (this._tooltipManager = s.UIKit.getTooltipManager());
          }
          connectedCallback() {
            super.connectedCallback(),
              this._playerSettingsBinding.observe("/v2/ready", this, (e) => {
                e &&
                  (this._playerSettingsBinding.unobserve("/v2/ready", this),
                  this._assignPartyInfoTooltip());
              }),
              (this._boundSettingsObserver = this._settingsObserver.bind(this)),
              (this._enableAnimations = !1),
              s.UXSettings.addObserver(this._boundSettingsObserver);
          }
          disconnectedCallback() {
            super.disconnectedCallback(),
              this._playerSettingsBinding.unobserve("/v2/ready", this),
              this._unassignPartyInfoTooltip(),
              s.UXSettings.removeObserver(this._boundSettingsObserver),
              this._lobbyBinding.unobserve("v2/lobby", this);
          }
          _settingsObserver(e) {
            (this._enableAnimations = e.largeAreaAnimationsEnabled),
              this._playVideo();
          }
          _observeLobby() {
            this._lobbyBinding.observe("v2/lobby", (e) => {
              this._updateLobby(e);
            });
          }
          _updateMapImage(e) {
            if (!e) return;
            const t = o.default.mapKey(e && e.gameConfig);
            this._lastMapKey &&
              this._removeClass(this._lastMapKey, ".parties-status-card-map"),
              t && this._addClass(t, ".parties-status-card-map"),
              (this._lastMapKey = t);
          }
          _setPlayBackground(e) {
            if (e) {
              if (!this._videoElement) {
                const t = this.shadowRoot.querySelector(
                  ".parties-status-card-bg-container",
                );
                (this._videoElement = document.createElement("video")),
                  this._videoElement.setAttribute("no-controls", !0),
                  this._videoElement.setAttribute("preload", "auto"),
                  this._videoElement.setAttribute("autoplay", !0),
                  this._videoElement.setAttribute("loop", !0),
                  t && t.appendChild(this._videoElement),
                  this._videoElement.setAttribute("src", e);
              }
              this._videoElement.getAttribute("src") !== e &&
                this._videoElement.setAttribute("src", e),
                this._playVideo();
            } else
              this._videoElement && this._videoElement.pause(),
                this._videoElement && this._videoElement.remove(),
                (this._videoElement = null);
          }
          _isTFTCustom(e) {
            return (
              e.gameMode === r.GAME_MODES.TFT &&
              e.customSpectatorPolicy !==
                a.CUSTOM_GAME_SPECTATOR_VALUES.NotAllowed
            );
          }
          _updateRosterIcons(e) {
            if (!this._canUpdateRosterIcons(e)) return "";
            const { maxLobbySize: t } = e.gameConfig,
              n = e.members.length;
            if (t > 8) return this._generatePartySizeNumberCounterDisplay(n, t);
            const i = [];
            for (let e = 0; e < t; e++)
              e < n
                ? i.push('<div class="parties-status-member-joined"></div>')
                : i.push('<div class="parties-status-member-empty"></div>');
            return i.join("");
          }
          _generatePartySizeNumberCounterDisplay(e, t) {
            return `<div class="parties-status-member-joined"></div><div class="parties-status-number-counter-display">${e}/${t}</div>`;
          }
          _canUpdateRosterIcons(e) {
            return e && e.gameConfig && e.members && e.gameConfig.maxLobbySize;
          }
          _updateLobby(e) {
            (this._lobby = e), this._updatePartiesStatusCard();
          }
          _updatePartiesStatusCard() {
            if (
              this._lobby &&
              this._lobby.partyType &&
              !this._isTFTCustom(this._lobby.gameConfig)
            )
              switch (
                (this._setPlayBackground(c[this._lobby.partyType]),
                this._setElementText(
                  ".parties-status-card-header-text",
                  s.tra.get(m[this._lobby.partyType]) || "",
                ),
                this._removeClass(
                  "parties-status-card-hide",
                  ".parties-status-card",
                ),
                this._lobby.partyType)
              ) {
                case "open":
                  this._removeClass("closed", ".parties-status-card"),
                    this._addClass("open", ".parties-status-card");
                  break;
                case "closed":
                  this._removeClass("open", ".parties-status-card"),
                    this._addClass("closed", ".parties-status-card");
              }
            else
              this._addClass(
                "parties-status-card-hide",
                ".parties-status-card",
              ),
                this._setPlayBackground(null);
            this._updateMapImage(this._lobby);
            const e =
              (this._lobby && o.default.gameType(this._lobby.gameConfig)) || "";
            this._setElementText(".parties-status-mode-text", e),
              this._setElementText(
                ".parties-status-member-icons",
                this._updateRosterIcons(this._lobby),
              );
          }
          _setElementText(e, t) {
            const n = this.shadowRoot.querySelector(e);
            n && (n.innerHTML = t);
          }
          _addClass(e, t) {
            const n = this.shadowRoot.querySelector(t);
            n && !n.classList.contains(e) && n.classList.add(e);
          }
          _removeClass(e, t) {
            const n = this.shadowRoot.querySelector(t);
            n && n.classList.contains(e) && n.classList.remove(e);
          }
          _partyHeaderElement() {
            return this.shadowRoot.querySelector(".parties-status-card-header");
          }
          _partyInfoElement() {
            return this.shadowRoot.querySelector(
              ".parties-status-card-header-info",
            );
          }
          _setPlayerSeenOpenPartiesTooltip() {
            this._playerSettingsBinding.patch("v1/account/lol-parties", {
              data: { hasSeenOpenPartyTooltip: !0 },
              schemaVersion: 1,
            });
          }
          _getOpenPartyTooltipSetting() {
            return this._playerSettingsBinding
              .get("v1/account/lol-parties")
              .then((e) => {
                const t = e && e.data;
                return !(!t || !t.hasSeenOpenPartyTooltip);
              });
          }
          _assignPartyInfoTooltip() {
            const e = this._partyInfoElement();
            if (e) {
              const t = s.UIKit.getTooltipManager(),
                n = document.createElement("lol-uikit-tooltip"),
                i = s.tra.get("parties_open_party_overview_header"),
                o = s.tra.get("parties_open_party_overview"),
                a = s.UIKit.getTemplateHelper().contentBlockTooltip(
                  i,
                  o,
                  "dialog-medium",
                  "parties-status-card-info",
                ),
                r = a.querySelector("h6"),
                l = '<div class="parties-status-card-header-icon"></div>',
                c = '<div class="parties-status-card-header-text">';
              (r.innerHTML = l + c + r.innerHTML + "</div>"),
                this._getOpenPartyTooltipSetting().then((i) => {
                  if (!i) {
                    n.appendChild(a);
                    const i = {
                      type: "dialog-medium",
                      showDelay: 0,
                      targetAnchor: { x: "left", y: "center" },
                      tooltipAnchor: { x: "right", y: "top" },
                      offset: { x: 0, y: -20 },
                    };
                    t.assign(e, n, {}, i),
                      (e.style.visibility = "visible"),
                      this._setPlayerSeenOpenPartiesTooltip();
                  }
                });
            }
          }
          _unassignPartyInfoTooltip() {
            const e = this._partyInfoElement();
            s.UIKit.getTooltipManager().unassign(e);
          }
          _playVideo() {
            this._videoElement &&
              (this._enableAnimations
                ? this._videoElement.play().catch((e) => {
                    s.logger.warning(
                      `lol-parties-status-card video play error: ${e}}`,
                    );
                  })
                : this._videoElement.pause());
          }
        }
        d.tagName = "lol-parties-status-card";
        var p = d;
        t.default = p;
      },
      (e, t, n) => {
        "use strict";
        e.exports = n.p + "party-status-bg-loop.webm";
      },
      (e) => {
        "use strict";
        e.exports =
          '<template id="lol-parties-template-status-card">\r\n    <div class="parties-status-card parties-status-card-hide">\r\n\r\n        <div class="parties-status-card-bg-container"></div>\r\n\r\n        <div class="parties-status-card-header">\r\n            <div class="parties-status-card-header-icon"></div>\r\n            <div class="parties-status-card-header-text"></div>\r\n            <lol-uikit-info-icon class="parties-status-card-header-info"></lol-uikit-info-icon>\r\n        </div>\r\n\r\n        <div class="parties-status-card-body">\r\n            <div class="parties-status-card-map"></div>\r\n            <div class="parties-status-card-data">\r\n                <div class="parties-status-member-icons"></div>\r\n                <div class="parties-status-mode-text"></div>\r\n            </div>\r\n        </div>\r\n\r\n        <div class="parties-status-card-divider"></div>\r\n    </div>\r\n</template>\r\n';
      },
      (e, t, n) => {
        var i = n(497),
          s = n(498)(i);
        s.push([
          e.id,
          ':host .parties-status-card-header .parties-status-card-header-text {\n  font-family: var(--font-display);\n}\n:host .parties-status-card-header .parties-status-card-header-text {\n  -webkit-user-select: none;\n}\n:host .parties-status-card-header .parties-status-card-header-text {\n  font-kerning: normal;\n  -webkit-font-feature-settings: "kern" 1;\n  -webkit-font-smoothing: antialiased;\n}\n:host .parties-status-card-header .parties-status-card-header-text {\n  text-transform: uppercase;\n}\n:host .parties-status-card-header .parties-status-card-header-text:lang(ko-kr),\n:host .parties-status-card-header .parties-status-card-header-text:lang(ja-jp),\n:host .parties-status-card-header .parties-status-card-header-text:lang(tr-tr),\n:host .parties-status-card-header .parties-status-card-header-text:lang(el-gr),\n:host .parties-status-card-header .parties-status-card-header-text:lang(th-th),\n:host .parties-status-card-header .parties-status-card-header-text:lang(zh-tw) {\n  text-transform: none;\n}\n:host .parties-status-card-header .parties-status-card-header-text {\n  color: #f0e6d2;\n  font-size: 12px;\n  font-weight: 700;\n  line-height: 16px;\n  letter-spacing: 0.075em;\n}\n:host .parties-status-card-header .parties-status-card-header-text:lang(ja-jp) {\n  font-size: 13px;\n}\n:host .parties-status-card-header .parties-status-card-header-text:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host .parties-status-card-header .parties-status-card-header-text {\n  font-family: var(--font-display);\n}\n:host .parties-status-card-body .parties-status-card-map {\n  width: 34px;\n  height: 32px;\n  background-size: auto 64px;\n  background-repeat: no-repeat;\n}\n:host .parties-status-card-body .parties-status-card-map.game_map_howling_abyss {\n  background-image: url("/fe/lol-parties/map_ha.png");\n}\n:host .parties-status-card-body .parties-status-card-map.game_map_summoners_rift {\n  background-image: url("/fe/lol-parties/map_sr.png");\n}\n:host .parties-status-card-body .parties-status-card-map.game_map_twisted_treeline {\n  background-image: url("/fe/lol-parties/map_tt.png");\n}\n:host .parties-status-card-body .parties-status-card-map.game_map_rotating_game_mode {\n  background-image: url("/fe/lol-parties/map_rgm.png");\n}\n:host .parties-status-card-body .parties-status-card-map.game_map_21 {\n  background-image: url("/fe/lol-parties/map_21.png");\n}\n:host .parties-status-card-body .parties-status-card-map.game_map_22 {\n  background-image: url("/fe/lol-parties/map_tft.png");\n}\n:host .parties-status-card-body .parties-status-card-map.game_map_30 {\n  background-image: url("/lol-game-data/assets/content/src/LeagueClient/GameModeAssets/Cherry/img/icon-v2.png");\n  background-size: 30px 30px;\n  background-position: center;\n}\nlol-uikit-content-block.parties-status-card-info {\n  width: 250px;\n  white-space: normal;\n}\nlol-uikit-content-block.parties-status-card-info h6 {\n  margin-bottom: 8px;\n  display: flex;\n  justify-content: center;\n}\nlol-uikit-content-block.parties-status-card-info h6 .parties-status-card-header-text {\n  margin-left: 2px;\n  margin-top: 2px;\n}\nlol-uikit-content-block.parties-status-card-info h6 .parties-status-card-header-text:lang(ar-ae) {\n  margin-right: 0;\n  margin-right: 2px;\n}\n.parties-status-card-header-icon {\n  background-image: url("/fe/lol-parties/party_panel_header_icon.png");\n  width: 20px;\n  height: 20px;\n  background-repeat: no-repeat;\n  background-size: contain;\n  display: inline-block;\n}\n:host .parties-status-card {\n  position: relative;\n  cursor: pointer;\n}\n:host .parties-status-card.open {\n  background: #143c14;\n}\n:host .parties-status-card.closed {\n  background: #0d2641;\n}\n:host .parties-status-card .parties-status-card-bg-container {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 202px;\n  color: #36d987;\n}\n:host .parties-status-card-hide {\n  display: none;\n}\n:host .parties-status-card-header {\n  direction: ltr;\n  display: flex;\n  justify-content: space-between;\n  height: 22px;\n  position: relative;\n  align-items: center;\n  padding: 5px;\n  margin: 0 0 0 8px;\n}\n:host .parties-status-card-header:lang(ar-ae) {\n  direction: rtl;\n  margin: 0 8px 0 0;\n}\n:host .parties-status-card-header .parties-status-card-header-icon {\n  background-image: url("/fe/lol-parties/party_panel_header_icon.png");\n  width: 20px;\n  height: 20px;\n  flex-grow: 0;\n  background-repeat: no-repeat;\n  background-size: contain;\n}\n:host .parties-status-card-header .parties-status-card-header-text {\n  display: flex;\n  align-items: center;\n  height: 32px;\n  color: #a09b8c;\n  padding: 0 5px 0 9px;\n  flex-grow: 1;\n  pointer-events: none;\n  margin-top: 1px;\n  text-transform: uppercase;\n}\n:host .parties-status-card-header .parties-status-card-header-info {\n  flex-grow: 0;\n  width: 16px;\n  height: 16px;\n  margin-right: 10px;\n  visibility: hidden;\n}\n:host .parties-status-card-body {\n  direction: ltr;\n  display: flex;\n  align-items: center;\n  position: relative;\n  margin-top: -4px;\n  padding: 0 5px 10px 10px;\n}\n:host .parties-status-card-body:lang(ar-ae) {\n  direction: rtl;\n  padding: 0 10px 10px 5px;\n}\n:host .parties-status-card-body .parties-status-card-map {\n  margin: 7px 10px 0 0;\n}\n:host .parties-status-card-body .parties-status-card-map:lang(ar-ae) {\n  margin: 7px 0 0 10px;\n}\n:host .parties-status-card-body .parties-status-member-icons {\n  display: flex;\n  align-items: flex-start;\n  padding: 0 0 0 6px;\n}\n:host .parties-status-card-body .parties-status-member-icons:lang(ar-ae) {\n  padding: 0 6px 0 0;\n}\n:host .parties-status-card-body .parties-status-member-icons .parties-status-member-empty {\n  width: 34px;\n  height: 34px;\n  margin: 0 0 0 -16px;\n  background-image: url("/fe/lol-parties/player_empty.png");\n  background-repeat: no-repeat;\n  background-position: center top;\n  background-size: contain;\n}\n:host .parties-status-card-body .parties-status-member-icons .parties-status-member-empty:lang(ar-ae) {\n  margin: 0 -16px 0 0;\n}\n:host .parties-status-card-body .parties-status-member-icons .parties-status-member-joined {\n  width: 34px;\n  height: 34px;\n  margin: 0 0 0 -16px;\n  background-image: url("/fe/lol-parties/player_joined.png");\n  background-repeat: no-repeat;\n  background-position: center top;\n  background-size: contain;\n}\n:host .parties-status-card-body .parties-status-member-icons .parties-status-member-joined:lang(ar-ae) {\n  margin: 0 -16px 0 0;\n}\n:host .parties-status-card-body .parties-status-number-counter-display {\n  color: #ccc4b3;\n  line-height: 34px;\n  font-size: 18px;\n  font-weight: 550;\n  letter-spacing: 0.05em;\n  margin-left: -3px;\n}\n',
          "",
        ]),
          (e.exports = s);
      },
      (e, t, n) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.default = void 0);
        var i = n(1);
        class s extends i.webComponents.ShadowElement {
          templateMarkup() {
            return n(520);
          }
          stylesheetMarkup() {
            return n(521);
          }
          constructor() {
            super(),
              (this.shadowRoot.querySelector(
                ".loadouts-purchase-dialog-body-title",
              ).innerText = i.tra.get(
                "tft_upgrade_purchase_dialog_body_title",
              ));
          }
          setData(e) {
            if (this._data === e) return;
            this._data = e;
            this.shadowRoot.querySelector(".little-legend-img").src =
              this._data.loadoutsIcon;
            const t = i.tra.formatString(
              "tft_upgrade_purchase_dialog_body_content",
              {
                fromLevel: this._data.level - 1,
                fromName: this._data.name,
                toLevel: this._data.level,
                toName: this._data.name,
              },
            );
            (this.shadowRoot.querySelector(
              ".loadouts-purchase-dialog-body-content",
            ).innerText = t),
              this.shadowRoot
                .querySelector(".lottie-animation")
                .setAttribute(
                  "src",
                  `/fe/lol-parties/lottie/LLUpgradeConfirm_StarIcons/LLUpgradeConfirm_Lv${this._data.level}.json`,
                ),
              this._addClass(
                `rarity-${this._data.rarityValue}`,
                ".little-legend-container",
              );
          }
          _addClass(e, t) {
            const n = this.shadowRoot.querySelector(t);
            n && !n.classList.contains(e) && n.classList.add(e);
          }
        }
        s.tagName = "lol-parties-loadouts-purchase-dialog-content";
        var o = s;
        t.default = o;
      },
      (e) => {
        "use strict";
        e.exports =
          '<template id="lol-parties-template-loadouts-purchase-dialog-content">\r\n  <div class="loadouts-purchase-dialog-content-wrapper">\r\n    <div class="loadouts-purchase-dialog-body-title"></div>\r\n    <div class="little-legend-container">\r\n      <img class="little-legend-img"/>\r\n      <div class="little-legend-overlay"></div>\r\n      <lol-uikit-lottie\r\n                      class="lottie-animation"\r\n                      image-path="/fe/lol-parties/lottie/LLUpgradeConfirm_StarIcons/images/"\r\n                      loop="true"\r\n                      autoplay="true">\r\n      </lol-uikit-lottie>\r\n    </div>\r\n    <div class="loadouts-purchase-dialog-body-content"></div>\r\n    <div class="lol-parties-purchase-dialog-error-message"></div>\r\n  </div>\r\n</template>\r\n';
      },
      (e, t, n) => {
        var i = n(497),
          s = n(498)(i);
        s.push([
          e.id,
          ':host .loadouts-purchase-dialog-body-title,\n:host .lol-parties-purchase-dialog-error-message {\n  font-family: var(--font-display);\n}\n:host .loadouts-purchase-dialog-body-title,\n:host .lol-parties-purchase-dialog-error-message {\n  -webkit-user-select: none;\n}\n:host .loadouts-purchase-dialog-body-title,\n:host .lol-parties-purchase-dialog-error-message {\n  font-kerning: normal;\n  -webkit-font-feature-settings: "kern" 1;\n  -webkit-font-smoothing: antialiased;\n}\n:host .loadouts-purchase-dialog-body-title,\n:host .lol-parties-purchase-dialog-error-message {\n  text-transform: uppercase;\n}\n:host .loadouts-purchase-dialog-body-title:lang(ko-kr),\n:host .lol-parties-purchase-dialog-error-message:lang(ko-kr),\n:host .loadouts-purchase-dialog-body-title:lang(ja-jp),\n:host .lol-parties-purchase-dialog-error-message:lang(ja-jp),\n:host .loadouts-purchase-dialog-body-title:lang(tr-tr),\n:host .lol-parties-purchase-dialog-error-message:lang(tr-tr),\n:host .loadouts-purchase-dialog-body-title:lang(el-gr),\n:host .lol-parties-purchase-dialog-error-message:lang(el-gr),\n:host .loadouts-purchase-dialog-body-title:lang(th-th),\n:host .lol-parties-purchase-dialog-error-message:lang(th-th),\n:host .loadouts-purchase-dialog-body-title:lang(zh-tw),\n:host .lol-parties-purchase-dialog-error-message:lang(zh-tw) {\n  text-transform: none;\n}\n:host .loadouts-purchase-dialog-body-title {\n  color: #f0e6d2;\n  font-size: 14px;\n  font-weight: 700;\n  line-height: 18px;\n  letter-spacing: 0.075em;\n}\n:host .loadouts-purchase-dialog-body-title:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host .lol-parties-purchase-dialog-error-message {\n  color: #f0e6d2;\n  font-size: 12px;\n  font-weight: 700;\n  line-height: 16px;\n  letter-spacing: 0.075em;\n}\n:host .lol-parties-purchase-dialog-error-message:lang(ja-jp) {\n  font-size: 13px;\n}\n:host .lol-parties-purchase-dialog-error-message:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host .loadouts-purchase-dialog-content-wrapper {\n  padding-top: 10px;\n  padding-bottom: 51px;\n  background: linear-gradient(180deg, #1e2328 0%, #010a13 100%);\n  font-size: 14px;\n  letter-spacing: 0.03em;\n  text-align: center;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 518px;\n  height: 341px;\n}\n:host .loadouts-purchase-dialog-body-title {\n  color: #c8aa6e;\n  padding-bottom: 20px;\n  font-size: 24px;\n  line-height: 36px;\n}\n:host .loadouts-purchase-dialog-body-content {\n  color: #a09b8c;\n  padding-top: 26px;\n  padding-left: 20px;\n  padding-right: 20px;\n  font-size: 14px;\n  line-height: 32px;\n}\n:host .lol-parties-purchase-dialog-error-message {\n  position: absolute;\n  bottom: 36px;\n  left: 0;\n  width: 100%;\n  line-height: 24px;\n  font-size: 12px;\n  color: #ff2345;\n}\n:host .lottie-animation {\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 209px;\n  height: 209px;\n}\n:host .little-legend-container {\n  position: relative;\n  width: 209px;\n  height: 209px;\n  border: 4px solid;\n  border-image: linear-gradient(180deg, #c8aa6e 0%, #c89b3c 48.96%, #785a28 100%) 50 stretch stretch;\n}\n:host .little-legend-container:before {\n  position: absolute;\n  content: " ";\n  left: -5px;\n  right: -5px;\n  bottom: -5px;\n  top: -5px;\n  border: 1px solid rgba(0,0,0,0.25);\n}\n:host .little-legend-container:after {\n  position: absolute;\n  content: "";\n  bottom: -43px;\n  left: 48px;\n  width: 112px;\n  height: 64px;\n  background-size: 100% 100%;\n  background-image: url("../../images/loadouts/common_plating_hover.png");\n}\n:host .little-legend-container.rarity-1:after {\n  background-image: url("../../images/loadouts/epic_plating_hover.png");\n}\n:host .little-legend-container.rarity-2:after {\n  background-image: url("../../images/loadouts/legendary_plating_hover.png");\n}\n:host .little-legend-container.rarity-3:after {\n  background-image: url("../../images/loadouts/mythic_plating_hover.png");\n}\n:host .little-legend-img {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  object-fit: cover;\n  box-sizing: border-box;\n  border: 1px solid rgba(0,0,0,0.25);\n}\n:host .little-legend-overlay {\n  position: absolute;\n  height: 83px;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: linear-gradient(180deg, rgba(0,0,0,0) 0%, rgba(0,0,0,0.77) 66.15%);\n}\n',
          "",
        ]),
          (e.exports = s);
      },
      (e, t, n) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.default = void 0);
        var i,
          s = (function (e, t) {
            if (!t && e && e.__esModule) return e;
            if (null === e || ("object" != typeof e && "function" != typeof e))
              return { default: e };
            var n = l(t);
            if (n && n.has(e)) return n.get(e);
            var i = {},
              s = Object.defineProperty && Object.getOwnPropertyDescriptor;
            for (var o in e)
              if (
                "default" !== o &&
                Object.prototype.hasOwnProperty.call(e, o)
              ) {
                var a = s ? Object.getOwnPropertyDescriptor(e, o) : null;
                a && (a.get || a.set)
                  ? Object.defineProperty(i, o, a)
                  : (i[o] = e[o]);
              }
            (i.default = e), n && n.set(e, i);
            return i;
          })(n(1)),
          o = (i = n(95)) && i.__esModule ? i : { default: i },
          a = n(523),
          r = n(524);
        function l(e) {
          if ("function" != typeof WeakMap) return null;
          var t = new WeakMap(),
            n = new WeakMap();
          return (l = function (e) {
            return e ? n : t;
          })(e);
        }
        const c = s.default.getProvider().getSocket(),
          m = "Recent",
          u = "purchase",
          d = "equip";
        class p extends s.webComponents.ShadowElement {
          templateMarkup() {
            return n(525);
          }
          stylesheetMarkup() {
            return n(526);
          }
          constructor() {
            super(),
              (this._showNoneOption = null),
              (this._settingsBinding = (0, s.dataBinding)("/lol-settings")),
              (this._cosmeticsDataBinding = (0, s.dataBinding)(
                "/lol-cosmetics",
                c,
              )),
              (this._sortByLastAcquiredBinding = (0, s.dataBinding)(
                "/lol-client-config/v3/client-config/lol.client_settings.tft.tft_loadouts_sortByLastAcquired",
                c,
              )),
              (this._favorites = []),
              (this._configAllowsSortByLastAcquired = !1),
              (this._favoritesEnabled = !1),
              (this._hideUnowned = !1),
              (this._isShardShardsEnabled = !1),
              (this._isRewardsProgramEnabled = r.REWARDS_PROGRAM_STATUS.UNSET),
              (this._searchString = ""),
              (this._sortType = r.SORTING_TYPES.DEFAULT),
              (this._type = ""),
              (this._cosmeticsSettings = { data: {}, schemaVersion: 1 }),
              (this._removedRecentHighlighting = []),
              (this._starShardsAmount = 0),
              (this._templateHelper = s.UIKit.getTemplateHelper()),
              (this._tooltipManager = s.UIKit.getTooltipManager()),
              this._sortByLastAcquiredBinding.get().then((e) => {
                (this._configAllowsSortByLastAcquired = e),
                  this._updateSortDropDown();
              }),
              this._defineCheckBox(),
              this._defineActionButton(),
              this._defineFavoriteButton(),
              this._defineSortDropDown(),
              this._defineCosmeticItems(),
              this._defineSearchBar();
          }
          connectedCallback() {
            super.connectedCallback(),
              (this._hoveredUpgrades = null),
              this._hideUpgradeTooltip(),
              (this._selectedItem = null),
              this._updateFavoriteButton(),
              this._updateFavorites(this._favorites),
              this._updateAllStarShardsComponents();
          }
          disconnectedCallback() {
            super.disconnectedCallback(),
              this._recentlyViewedContentIdsToClear(),
              this._starShardsTimeout && clearTimeout(this._starShardsTimeout);
          }
          _defineCheckBox() {
            this.shadowRoot.querySelector(
              "#hide_unowned_checkbox_label",
            ).textContent = s.tra.get("parties_cosmetics_show_unowned");
            const e = this.shadowRoot.querySelector("#hide_unowned_checkbox");
            e.addEventListener("click", (t) => {
              (this._hideUnowned = !e.checked),
                this._cosmeticsSettings.data[this._type]
                  ? (this._cosmeticsSettings.data[this._type].hideUnowned =
                      this._hideUnowned)
                  : (this._cosmeticsSettings.data[this._type] = {
                      hideUnowned: this._hideUnowned,
                    }),
                this._settingsBinding.put(
                  "/v2/account/LCUPreferences/cosmetics-settings",
                  this._cosmeticsSettings,
                ),
                this._updateFilter();
            });
          }
          _defineCosmeticItems() {
            this.addEventListener(
              "lol-parties-cosmetics-item-click",
              this._onLoadoutItemClicked.bind(this),
            ),
              this.addEventListener(
                "lol-parties-cosmetics-item-hover",
                this._onLoadoutItemHovered.bind(this),
              );
            const e = this.shadowRoot
              .querySelector(".cosmetic-upgrade-container")
              .getElementsByClassName("cosmetic-upgrade-bounding-container");
            for (let t = 0; t < e.length; t++)
              e[t].addEventListener(
                "mouseenter",
                (e) => {
                  const n = (0, a.getBaseLayoutItem)(
                    this._clickedItem,
                    this._inventory,
                  );
                  0 === t
                    ? (this._setFocusedItem(n),
                      this._playSound(
                        o.default.SFX_URLS.SFX_COMPANION_PICKER_HOVER,
                      ))
                    : (this._setFocusedItem(n.upgrades[t - 1]),
                      this._playSound(
                        o.default.SFX_URLS.SFX_COMPANION_PICKER_HOVER,
                      ));
                },
                !0,
              ),
                e[t].addEventListener("mouseleave", (e) => {
                  this._setFocusedItem(this._clickedItem),
                    this._resetSelected();
                }),
                e[t].addEventListener("click", (e) => {
                  const n = (0, a.getBaseLayoutItem)(
                    this._hoveredUpgrades,
                    this._inventory,
                  );
                  let i = n;
                  0 !== t && (i = n.upgrades[t - 1]),
                    this._setFocusedItem(i),
                    (this._clickedItem = i),
                    this._playClickSoundForItem(i),
                    i.isRecentItem &&
                      (this._removeRecentHighlight(i),
                      this._recentlyViewedContentIdsToClear()),
                    this._updateActionButton(),
                    this._updateFavoriteButton();
                });
          }
          _defineActionButton() {
            (this._actionButton = this.shadowRoot.querySelector(
              ".cosmetic-group-action-button",
            )),
              this._actionButton.addEventListener("click", () =>
                this._handleActionButtonClicked(),
              ),
              this._updateActionButton();
          }
          _defineFavoriteButton() {
            (this._favoriteButton = this.shadowRoot.querySelector(
              ".cosmetic-group-favorite-button",
            )),
              this._favoriteButton.addEventListener("click", () =>
                this._handleFavoriteButtonClicked(),
              );
            const e = document.createElement("lol-uikit-tooltip"),
              t = this._templateHelper.contentBlockTooltip(
                "",
                s.tra.formatString("tft_cosmetics_favorites_full_tooltip", {
                  max: 8,
                }),
              );
            e.appendChild(t),
              this._tooltipManager.assign(
                this._favoriteButton,
                e,
                {},
                {
                  orientation: "auto",
                  targetAnchor: { x: "left", y: "center" },
                  tooltipAnchor: { x: "right", y: "center" },
                },
              ),
              this._updateFavoriteButton();
          }
          _defineSortDropDown() {
            (this._sortDropDown = this.shadowRoot.querySelector(
              ".cosmetic-sorting-dropdown",
            )),
              (this._sortType = this._sortDropDown.selected.id);
            let e = this._sortDropDown.firstElementChild;
            (e.innerHTML = s.tra.get("tft_cosmetics_sorting_default_order")),
              (e.id = r.SORTING_TYPES.DEFAULT),
              (e = e.nextElementSibling),
              (e.innerHTML = s.tra.get("tft_cosmetics_sorting_last_acquired")),
              (e.id = r.SORTING_TYPES.LAST_ACQUIRED),
              this._sortDropDown.addEventListener("selected", () =>
                this._handleSortDropDownSelected(),
              ),
              this._updateSortDropDown();
          }
          _defineSearchBar() {
            const e = this.shadowRoot.querySelector("#cosmetic_search_bar");
            (e.placeholder = s.tra.get("tft_cosmetics_search_placeholder")),
              e.addEventListener("mousedown", (e) => {
                e.stopPropagation();
              }),
              e.addEventListener("search", (t) => {
                t.stopPropagation(),
                  (this._searchString = e.value),
                  this._updateFilter();
              });
          }
          _createActionButtonState() {
            const e = this._inventory.selectedLoadoutItem,
              t = this._hoveredUpgrades;
            let n = d,
              i = s.tra.get("parties_loadouts_equip_label");
            if (!t) return { behavior: n, content: i, disabledState: !1 };
            if (t.owned)
              return {
                behavior: n,
                content: i,
                disabledState: e.contentId === t.contentId,
              };
            if ("companions" !== this._type)
              return {
                behavior: n,
                content: i,
                disabledState: !t.owned || e.contentId === t.contentId,
              };
            const o = (0, a.getBaseLayoutItem)(t, this._inventory),
              r = this._getItemUpgradePath(o),
              l = r.indexOf(t),
              c = l > 0 && r[l - 1].owned,
              m = t.starShardsPrice.price,
              p = this._starShardsAmount;
            m &&
              ((n = u),
              (i = `<img class="star-shards-icon" src="/fe/lol-static-assets/images/icon-star-shards-36.png"/> ${m}`));
            return {
              behavior: n,
              content: i,
              disabledState: !m || !c || p < m,
              remainingStarShards: p - m,
              prereqOwned: c,
            };
          }
          _retrieveSettingsData() {
            const e = this.shadowRoot.querySelector("#hide_unowned_checkbox");
            this._settingsBinding
              .get("/v2/account/LCUPreferences/cosmetics-settings")
              .then((t) => {
                t &&
                  t.data &&
                  ((this._cosmeticsSettings = t),
                  t.data[this._type] &&
                    void 0 !== t.data[this._type].hideUnowned &&
                    (this._hideUnowned = t.data[this._type].hideUnowned)),
                  (e.checked = !this._hideUnowned),
                  this._updateFilter();
              });
          }
          _onLoadoutItemHovered(e) {
            this._setFocusedItem(e.detail.item),
              e.detail.item.isRecentItem &&
                this._removeRecentHighlight(e.detail.item),
              this._updateUpgrades(e.detail.item),
              this._updateActionButton(),
              this._updateFavoriteButton();
          }
          _onLoadoutItemClicked(e) {
            let t = (0, a.getBaseLayoutItem)(e.detail.item, this._inventory);
            if (!t) return;
            const n = this._getItemUpgradePath(t);
            for (let e = n.length - 1; e >= 0; e--)
              if (n[e].owned) {
                t = n[e];
                break;
              }
            const i = !e.path.some((e) =>
              e?.className?.includes("cosmetic-option-group-list"),
            );
            this._selectItem(t, i);
          }
          _handleActionButtonClicked() {
            const e = this._actionButton;
            if (e.hasAttribute("disabled")) return;
            switch (e.getAttribute("behavior")) {
              case u:
                this._playClickSoundForItem(this._clickedItem),
                  this.dispatchEvent(
                    new CustomEvent(
                      "lol-parties-cosmetics-item-purchase-event",
                      { detail: { item: this._clickedItem } },
                    ),
                  ),
                  e.setAttribute("disabled", "");
                break;
              case d:
                this._playClickSoundForItem(this._clickedItem),
                  this.dispatchEvent(
                    new CustomEvent("lol-parties-cosmetics-item-select-event", {
                      detail: { item: this._clickedItem },
                    }),
                  ),
                  e.setAttribute("disabled", "");
            }
          }
          _handleFavoriteButtonClicked() {
            if (!this._favoritesEnabled) return;
            const e = this._favoriteButton;
            if (
              e.hasAttribute("disabled") ||
              e.classList.contains("hasMaxFavorites")
            )
              return;
            this._playSound(o.default.SFX_URLS.SFX_LOADOUT_FAVORITES_CLICK),
              e.setAttribute("disabled", "");
            const t = (0, a.getBaseLayoutItem)(
              this._clickedItem,
              this._inventory,
            );
            this.dispatchEvent(
              new CustomEvent("lol-parties-cosmetics-item-favorite-event", {
                detail: { item: t, type: this._type },
              }),
            );
          }
          _handleSortDropDownSelected() {
            this._playSound(o.default.SFX_URLS.SFX_DROPDOWN_CLICK);
            const e = this._sortDropDown.selected.id;
            e !== this._sortType &&
              ((this._sortType = e),
              this._updateInventory(),
              this._updateFavorites(this._favorites));
          }
          _updateActionButton() {
            if (!this._clickedItem || !this._actionButton || !this._inventory)
              return;
            const {
                behavior: e,
                content: t,
                disabledState: n,
                remainingStarShards: i,
                prereqOwned: o,
              } = this._createActionButtonState(),
              a = this._actionButton,
              r = this.shadowRoot.querySelector(".star-shards-label"),
              l = this.shadowRoot.querySelector(".star-shards-amount");
            this._addClass("hidden", ".star-shards-label-wrapper"),
              e === u &&
                ((r.innerHTML = s.tra.get(
                  "parties_loadouts_remaining_star_shards_label",
                )),
                (l.textContent = this._formatStarShardsAmount(i)),
                this._toggleClass(
                  "purchasable",
                  ".star-shards-label-wrapper",
                  !n,
                ),
                n && !o
                  ? (r.innerHTML = s.tra.get(
                      "parties_loadouts_prereq_not_owned_label",
                    ))
                  : n &&
                    (r.innerHTML = s.tra.formatString(
                      "parties_loadouts_not_enough_shards_label",
                      {
                        shardImage:
                          '<img class="star-shards-icon" src="/fe/lol-static-assets/images/icon-star-shards-36.png"/>',
                      },
                    )),
                this._toggleClass("hidden", ".star-shards-amount", n),
                this._removeClass("hidden", ".star-shards-label-wrapper")),
              a.setAttribute("type", e),
              a.setAttribute("behavior", e),
              (a.innerHTML = t),
              a.toggleAttribute("disabled", n),
              a.toggleAttribute("primary", !n);
          }
          _updateFavoriteButton() {
            if (
              !(
                this._hoveredUpgrades &&
                this._favoriteButton &&
                this._favorites &&
                this._inventory
              )
            )
              return;
            const e = this._favoriteButton,
              t = (0, a.getBaseLayoutItem)(
                this._hoveredUpgrades,
                this._inventory,
              ),
              n = 8 <= this._favorites.length,
              i = this._favorites?.some((e) => e.contentId === t.contentId);
            this._toggleClass(
              "favorited",
              ".cosmetic-group-favorite-button",
              i,
            );
            const s = !n || i;
            this._toggleClass(
              "hasMaxFavorites",
              ".cosmetic-group-favorite-button",
              !s,
            ),
              s
                ? this._tooltipManager.disable(this._favoriteButton)
                : this._tooltipManager.enable(this._favoriteButton),
              e.toggleAttribute("disabled", !1);
            const o =
              this._favoritesEnabled &&
              (this._isItemOwned(this._hoveredUpgrades) || i);
            this._toggleClass("hidden", ".cosmetic-group-favorite-button", !o);
          }
          _updateSortDropDown() {
            this._toggleClass(
              "hidden",
              ".cosmetic-sorting-dropdown",
              !this._configAllowsSortByLastAcquired,
            ),
              this._toggleClass(
                "extended",
                ".search-container",
                !this._configAllowsSortByLastAcquired,
              ),
              this._configAllowsSortByLastAcquired ||
                ((this._sortType = r.SORTING_TYPES.DEFAULT),
                this._updateInventory(),
                this._updateFavorites(this._favorites));
          }
          _playClickSoundForItem(e) {
            const {
                SFX_URLS: {
                  SFX_LOADOUT_RARITY_CLICK: t,
                  SFX_COMPANION_PICKER_CLICK: n,
                },
              } = o.default,
              i = e.owned ? t : n;
            this._playSound(i);
          }
          _updateFilter() {
            this.shadowRoot
              .querySelectorAll(".cosmetic-option-group")
              .forEach((e) => {
                const t = e.querySelector(".cosmetic-option-list");
                let n = !1;
                t.childNodes.forEach((e) => {
                  const t = this._isItemShown(e._data);
                  (n = n || t), e.setAttribute("item-shown", t);
                }),
                  e.setAttribute("group-shown", n);
              });
          }
          _updateAllStarShardsComponents() {
            this.shadowRoot.querySelector(".currency-ss") &&
              (this._updateStarShardDisplay(),
              this._updateUpgrades(this._clickedItem),
              this._updateActionButton(),
              this._updateFavoriteButton());
          }
          _updateStarShardDisplay() {
            if (this._isShardShardsEnabled) {
              const e = this.shadowRoot.querySelector(".currency-ss");
              if (!e) return;
              const t = this._formatStarShardsAmount(this._starShardsAmount);
              e.textContent = t;
            }
            this._toggleClass(
              "hidden",
              ".currency-ss",
              !this._isShardShardsEnabled,
            );
          }
          _recentlyViewedContentIdsToClear() {
            const e = this._type.toUpperCase().slice(0, this._type.length - 1);
            this._cosmeticsDataBinding.patch(
              "/v1/recent/" + e,
              this._removedRecentHighlighting,
            );
          }
          _selectItem(e, t = !1) {
            if (this._clickedItem) {
              const e = (0, a.getBaseLayoutItem)(
                this._clickedItem,
                this._inventory,
              );
              if (!e) return;
              const t = this.shadowRoot.querySelectorAll(
                `[content-id="${e.contentId}"]`,
              );
              t &&
                t.forEach((e) => {
                  e.removeAttribute("highlighted");
                });
            }
            this._setFocusedItem(e), (this._clickedItem = e);
            const n = (0, a.getBaseLayoutItem)(e, this._inventory);
            if (!n) return;
            (t ? this._getFavoritesSection() : this._getOptionsSection())
              .querySelectorAll(`[content-id="${n.contentId}"]`)
              .forEach((e) => {
                e.setAttribute("highlighted", !0);
              });
          }
          _setFocusedItem(e) {
            e &&
              ((this._hoveredUpgrades = e),
              this._updateSelectedItem(e),
              this._updateUpgrades(e),
              this._updateActionButton(),
              this._updateFavoriteButton());
          }
          _getItemUpgradePath(e) {
            return e.upgrades ? [e].concat(e.upgrades) : [e];
          }
          _updateUpgrades(e, t) {
            if (!this._inventory || !this._clickedItem) return;
            const n = (0, a.getBaseLayoutItem)(e, this._inventory);
            if (!n) return;
            if (
              (this._toggleClass(
                "hidden",
                ".cosmetic-upgrade-container",
                !n || !n.upgrades || 0 === n.upgrades.length,
              ),
              !n.upgrades || 0 === n.upgrades.length)
            )
              return;
            const i = this._getItemUpgradePath(n);
            let s = 0;
            for (let e = 0; e < i.length; e++) {
              const t = i[e],
                n = t.starShardsPrice ? t.starShardsPrice.price : 0,
                o = t.starShardsPrice && !!t.starShardsPrice.offerId,
                a = this._starShardsAmount,
                r = e > 0 && i[e - 1].owned,
                l = `.cosmetic-upgrade-${e + 1}`,
                c = i[0].owned;
              t.isRecentItem && s++,
                this._toggleClass(
                  "not-enough-shards",
                  l,
                  !t.owned && o && r && n > a,
                ),
                this._toggleClass(
                  "upgradeable",
                  l,
                  !t.owned && c && o && n <= a,
                ),
                this._toggleClass("unowned", l, !t.owned),
                this._toggleClass(
                  "purchasable",
                  l,
                  !t.owned && o && r && n <= a,
                ),
                this._toggleClass("selected", l, t.selected),
                this._toggleClass(
                  "intended",
                  l,
                  t.contentId === this._clickedItem.contentId,
                ),
                this._toggleClass("recent", l, t.isRecentItem),
                this._toggleClass(
                  "equipped",
                  l,
                  t.contentId === this._inventory.selectedLoadoutItem.contentId,
                );
            }
            s > 1 &&
              (this._removeRecentHighlight(i[0]),
              this._toggleClass("recent", ".cosmetic-upgrade-1", !1));
          }
          _removeRecentHighlight(e) {
            this.shadowRoot
              .querySelectorAll(`[content-id="${e.contentId}"]`)
              .forEach((e) => {
                e.setAttribute("is-recent-item", !1);
              }),
              (e.isRecentItem = !1);
            const t = (0, a.getBaseLayoutItem)(e, this._inventory);
            if (!t) return;
            let n = t.isRecentItem;
            if (
              (t.upgrades &&
                t.upgrades.length > 0 &&
                s.lodash.forEach(t.upgrades, (e) => {
                  e.isRecentItem && (n = !0);
                }),
              !n)
            ) {
              this.shadowRoot
                .querySelector(`[content-id="${t.contentId}"]`)
                .setAttribute("is-recent-item", !1);
            }
            this._removedRecentHighlighting.push(e.contentId);
          }
          setStarShardsAmount(e) {
            if (e === this._starShardsAmount) return;
            const t = this.shadowRoot.querySelector(".currency-upgrade-video");
            if (t && e < this._starShardsAmount) {
              const n = Math.floor((this._starShardsAmount - e) / 12);
              t.src = `/fe/lol-parties/starshards_currency_decrease_${this._formatStarShardsAmount(e).length}.webm`;
              const i = "playing";
              t.classList.add(i),
                t.play(),
                (t.onended = function () {
                  t.classList.remove(i);
                }),
                this._starShardsTimeout &&
                  (clearTimeout(this._starShardsTimeout),
                  (this._starShardsTimeout = null));
              const s = () => {
                (this._starShardsAmount -= n),
                  this._starShardsAmount < e && (this._starShardsAmount = e),
                  this._updateStarShardDisplay(),
                  this._starShardsAmount > e &&
                    (this._starShardsTimeout = setTimeout(s, 10));
              };
              s();
            } else this._starShardsAmount = e;
            this._updateAllStarShardsComponents();
          }
          setStarShardsEnabled(e) {
            (this._isShardShardsEnabled = e),
              this._updateAllStarShardsComponents();
          }
          setRewardsProgramEnabled(e) {
            (this._isRewardsProgramEnabled = e), this._updateInventory();
          }
          setInventory(e) {
            (this._inventory = e),
              this._updateInventory(),
              this._updateAllStarShardsComponents();
          }
          enableFavorites(e) {
            (this._favoritesEnabled = e),
              this._toggleClass(
                "hidden",
                "div.cosmetic-option-favorites-list",
                !e,
              ),
              this._updateFavoriteButton(),
              this._updateFavorites(this._favorites);
          }
          _sortFavoriteItemsByDefaultOrder(e, t) {
            return (0 !== e.groupId && 0 !== t.groupId) ||
              e.groupId === t.groupId
              ? e.species !== t.species
                ? e.species < t.species
                  ? -1
                  : 1
                : this._sortItemByRarity(e, t)
              : 0 === e.groupId
                ? -1
                : 1;
          }
          _sortItemByRarity(e, t) {
            return e.rarityValue !== t.rarityValue
              ? e.rarityValue - t.rarityValue
              : e.itemId - t.itemId;
          }
          _sortItemByLastAcquired(e, t) {
            if (this._isItemOwned(e) && !this._isItemOwned(t)) return -1;
            if (!this._isItemOwned(e) && this._isItemOwned(t)) return 1;
            if (!this._isItemOwned(e) && !this._isItemOwned(t))
              return this._sortItemByRarity(e, t);
            if (e.itemId === this._inventory.defaultItemId) return 1;
            if (t.itemId === this._inventory.defaultItemId) return -1;
            if (e.loyalty && !t.loyalty) return 1;
            if (!e.loyalty && t.loyalty) return -1;
            const n = this._convertDateStringToDate(e.purchaseDate),
              i = this._convertDateStringToDate(t.purchaseDate);
            return n !== i ? (n > i ? -1 : 1) : e.name > t.name ? -1 : 1;
          }
          _sortGroupByName(e, t) {
            return 0 === e.groupId
              ? -1
              : 0 === t.groupId
                ? 1
                : e.groupName < t.groupName
                  ? -1
                  : 1;
          }
          _sortGroupByLastAcquired(e, t) {
            return 0 !== e.numOwned && 0 === t.numOwned
              ? -1
              : 0 === e.numOwned && 0 !== t.numOwned
                ? 1
                : 0 === e.numOwned && 0 === t.numOwned
                  ? this._sortGroupByName(e, t)
                  : e.purchaseDate !== t.purchaseDate
                    ? e.purchaseDate > t.purchaseDate
                      ? -1
                      : 1
                    : this._sortGroupByName(e, t);
          }
          _getGroupSortFunction() {
            return this._sortType === r.SORTING_TYPES.DEFAULT
              ? this._sortGroupByName
              : this._sortGroupByLastAcquired;
          }
          _getItemSortFunction() {
            return this._sortType === r.SORTING_TYPES.DEFAULT
              ? this._sortItemByRarity
              : this._sortItemByLastAcquired;
          }
          _getFavoritesSortFunction() {
            return this._sortType === r.SORTING_TYPES.DEFAULT
              ? this._sortFavoriteItemsByDefaultOrder
              : this._sortItemByLastAcquired;
          }
          _sortInventory() {
            const e = this._getGroupSortFunction();
            this._inventory.groups.sort(e.bind(this));
            const t = this._getItemSortFunction();
            for (const e of this._inventory.groups) e.items.sort(t.bind(this));
          }
          _updateFavorites(e) {
            if (((this._favorites = e), !this._favoritesEnabled)) return;
            const t = this._getFavoritesSortFunction();
            this._favorites.sort(t.bind(this));
            const n = this._getFavoritesSection();
            n.innerHTML = "";
            const i = this._createCosmeticOptionFavorites(this._favorites);
            n.appendChild(i),
              this._getOptionsSection()
                .querySelectorAll("div.cosmetic-option-group")
                .forEach((e) => {
                  e.querySelector(".cosmetic-option-list").childNodes.forEach(
                    (e) => {
                      const t = this._favorites.some(
                        (t) => t.contentId === e.getContentId(),
                      );
                      e.toggleFavoriteIcon(t);
                    },
                  );
                }),
              this._updateFavoriteButton();
          }
          _updateInventory() {
            if (!this._inventory) return;
            this._sortInventory();
            const e = this.shadowRoot.querySelector(
              ".cosmetic-option-scroller",
            ).scrollTop;
            setTimeout(() => {
              this.shadowRoot.querySelector(
                ".cosmetic-option-scroller",
              ).scrollTop = e;
            });
            const t = this._getOptionsSection();
            t.innerHTML = "";
            const i = s.tra.get("tft_companions_none_label");
            let o;
            t.appendChild(
              this._createCosmeticOption({
                itemId: 0,
                loadoutsIcon: n(499),
                level: 0,
                contentId: "NONE_OPTION",
                name: i,
                owned: !0,
              }),
            ),
              s.lodash.forEach(this._inventory.groups, (e) => {
                (o = this._createCosmeticOptionGroup(e)), t.appendChild(o);
              }),
              this._clickedItem
                ? (this._clickedItem = (0, a.getLayoutItemById)(
                    this._clickedItem.itemId,
                    this._inventory,
                  ))
                : (this._clickedItem = (0, a.getLayoutItemById)(
                    this._inventory.selectedLoadoutItem.itemId,
                    this._inventory,
                  )),
              (this._hoveredUpgrades = this._hoveredUpgrades
                ? this._hoveredUpgrades
                : this._clickedItem),
              this._setFocusedItem(this._hoveredUpgrades),
              this._selectItem(this._clickedItem);
          }
          _formatStarShardsAmount(e) {
            return isNaN(e)
              ? "0"
              : e < 1e5
                ? e.toString()
                : ((e = 1e3 * Math.floor(e / 1e3)),
                  s.tra.numeral(e).format("0a"));
          }
          _getRecentItems() {
            let e = [];
            new Date();
            return (
              s.lodash.forEach(this._inventory.groups, (t) => {
                s.lodash.forEach(t.items, (t) => {
                  let n = !1;
                  if ("" !== t.purchaseDate && t.owned) {
                    if (t.upgrades && t.upgrades.length > 0) {
                      n = !0;
                      const i = this._extractUpgrades(t);
                      0 !== i.length && (e = e.concat(i));
                    }
                    (t.isUpgradable = n),
                      this._numberOfDaysFromToday(t.purchaseDate) < 14 &&
                        e.push(t);
                  }
                });
              }),
              e
            );
          }
          _extractUpgrades(e) {
            const t = [];
            return (
              s.lodash.forEach(e.upgrades, (e) => {
                e.owned &&
                  ((e.isUpgradable = !0),
                  this._numberOfDaysFromToday(e.purchaseDate) < 14 &&
                    t.push(e));
              }),
              t
            );
          }
          _isItemOwned(e) {
            return e.owned || e.upgrades?.some((e) => e.owned);
          }
          _isItemShown(e) {
            const t = this._isItemOwned(e) || !this._hideUnowned,
              n = e.name
                .toLowerCase()
                .includes(this._searchString.toLowerCase());
            return t && n;
          }
          _updateSelectedItem(e) {
            if (!e) return;
            this.shadowRoot
              .querySelector(".selected-cosmetic")
              .setAttribute("content-id", e.contentId);
            const t = this.shadowRoot.querySelector(
              ".selected-cosmetic-header-group",
            );
            this._toggleClass(
              "locked",
              ".selected-cosmetic-header-group",
              !e.owned,
            ),
              (t.style.background = `linear-gradient(to bottom, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 0) 60%, rgba(1, 10, 19, .80) 85%, rgba(1, 10, 19, 1) 100%), center/cover no-repeat url(${e.loadoutsIcon})`);
            const n = this.shadowRoot.querySelector(".selected-cosmetic-title"),
              i = e.name;
            (n.innerHTML = i.trim()),
              this._removeClass("rarity-0", ".selected-cosmetic"),
              this._removeClass("rarity-1", ".selected-cosmetic"),
              this._removeClass("rarity-2", ".selected-cosmetic"),
              this._removeClass("rarity-3", ".selected-cosmetic"),
              e.itemId > 1 &&
                this._addClass(`rarity-${e.rarityValue}`, ".selected-cosmetic");
          }
          _getMiscSection() {
            return this.shadowRoot.querySelector("div.cosmetic-misc");
          }
          _getFavoritesSection() {
            return this.shadowRoot.querySelector(
              "div.cosmetic-option-favorites-list",
            );
          }
          _getOptionsSection() {
            return this.shadowRoot.querySelector(
              "div.cosmetic-option-group-list",
            );
          }
          _createCosmeticHeader(e) {
            const t = document.createElement("div");
            t.className = "cosmetic-option-group-header";
            const n = document.createElement("div");
            return (
              (n.className = "cosmetic-option-group-title"),
              (n.innerHTML = e),
              t.appendChild(n),
              t
            );
          }
          _createCosmeticOptionFavorites(e) {
            const t = document.createElement("div");
            t.className = "cosmetic-option-group";
            const n = this._createCosmeticHeader(
              s.tra.formatString("tft_cosmetics_favorites_header"),
            );
            t.appendChild(n);
            const i = document.createElement("div");
            (i.className = "cosmetic-option-list"),
              t.appendChild(i),
              i.addEventListener("mouseleave", (e) => {
                e.stopPropagation(), this._resetSelected();
              });
            let o = !1;
            return (
              s.lodash.forEach(e, (e) => {
                const t = this._isItemShown(e);
                o = o || t;
                const n = this._createCosmeticOption(e, !1, t);
                n.toggleFavoriteIcon(!0), i.appendChild(n);
              }),
              t.setAttribute("group-shown", o),
              t
            );
          }
          _createCosmeticOptionGroup(e) {
            const t = document.createElement("div");
            t.className = "cosmetic-option-group";
            const n = this._createCosmeticHeader(e.groupName);
            if (e.groupId !== m) {
              const t = document.createElement("div");
              (t.className = "cosmetic-option-group-info"),
                (t.innerHTML = s.tra.formatString(
                  "tft_companions_count_label",
                  { owned: e.numOwned, available: e.numAvailable },
                )),
                n.appendChild(t);
            }
            t.appendChild(n);
            const i = document.createElement("div");
            (i.className = "cosmetic-option-list"),
              t.appendChild(i),
              i.addEventListener("mouseleave", (e) => {
                e.stopPropagation(), this._resetSelected();
              });
            let o = !1;
            e.groupId === m && (o = !0);
            let a = !1;
            return (
              s.lodash.forEach(e.items, (e) => {
                const t = this._isItemShown(e);
                a = a || t;
                const n = this._createCosmeticOption(e, o, t);
                i.appendChild(n);
              }),
              t.setAttribute("group-shown", a),
              t
            );
          }
          _createCosmeticOption(e, t, n) {
            const i = document.createElement("lol-parties-cosmetics-renderer");
            if (
              ((i.className = "cosmetic-option"),
              i.setAttribute("data-owned", e.owned),
              i.setAttribute("is-recent-group", t),
              i.setAttribute(
                "is-recent-item",
                e.isRecentItem &&
                  !this._removedRecentHighlighting.includes(e.contentId),
              ),
              i.setAttribute("item-shown", n),
              i.setIsRewardsProgramEnabled(this._isRewardsProgramEnabled),
              this._favoritesEnabled)
            ) {
              const t = this._favorites?.some(
                (t) => t.contentId === e.contentId,
              );
              i.toggleFavoriteIcon(t);
            }
            return i.setData(e), i;
          }
          _createLoyaltyMedalElement() {
            const e = document.createElement("div");
            return (e.className = "cosmetic-option-loyalty"), e;
          }
          _hideUpgradeTooltip() {
            this._addClass("hidden", "div.cosmetic-upgrade-container");
          }
          _resetSelected() {
            this._inventory &&
              (this._setFocusedItem(this._clickedItem),
              this._updateSelectedItem(this._clickedItem));
          }
          _updateType() {
            this._hideUpgradeTooltip(),
              setTimeout(() => {
                this._toggleClass(
                  "star-shards-disabled",
                  "div.cosmetic-upgrade-container",
                  "companions" !== this._type,
                ),
                  "companions" === this._type &&
                    this._clickedItem &&
                    this._clickedItem.upgrades &&
                    this._clickedItem.upgrades.length > 0 &&
                    this._removeClass(
                      "hidden",
                      "div.cosmetic-upgrade-container",
                    );
              }),
              this._retrieveSettingsData();
          }
          static get observedAttributes() {
            return ["type", "show-none"];
          }
          attributeChangedCallback(e, t, n) {
            switch (e) {
              case "type":
                (this._type = n),
                  this._updateType(),
                  this._clickedItem && this._updateAllStarShardsComponents();
                break;
              case "show-none":
                (this._showNoneOption = this.hasAttribute("show-none")),
                  this._showNoneOption
                    ? this._addClass(
                        "show-none",
                        "div.cosmetic-option-group-list",
                      )
                    : this._removeClass(
                        "show-none",
                        "div.cosmetic-option-group-list",
                      );
            }
          }
          _playSound(e) {
            s.Audio.getChannel(o.default.SFX_CHANNEL).playSound(e);
          }
          _setElementText(e, t) {
            const n = this.shadowRoot.querySelector(e);
            n && (n.innerHTML = t);
          }
          _addClass(e, t) {
            const n = this.shadowRoot.querySelector(t);
            n && !n.classList.contains(e) && n.classList.add(e);
          }
          _removeClass(e, t) {
            const n = this.shadowRoot.querySelector(t);
            n && n.classList.contains(e) && n.classList.remove(e);
          }
          _toggleClass(e, t, n) {
            return n ? this._addClass(e, t) : this._removeClass(e, t);
          }
          _attachListener(e, t, n) {
            const i = this.shadowRoot.querySelector(e);
            i && i.addEventListener(t, n);
          }
          _detachListener(e, t, n) {
            const i = this.shadowRoot.querySelector(e);
            i && i.removeEventListener(t, n);
          }
          _numberOfDaysFromToday(e) {
            return (new Date() - this._convertDateStringToDate(e)) / 864e5;
          }
          _convertDateStringToDate(e) {
            if (!/^[0-9]{8}T[0-9]{6}.[0-9]{3}Z$/.test(e)) return new Date(e);
            const t = e.substr(0, 4),
              n = e.substr(4, 2),
              i = e.substr(6, 2),
              s = e.substr(9, 2),
              o = e.substr(11, 2),
              a = e.substr(13, 2);
            return new Date(`${t}-${n}-${i}T${s}:${o}:${a}Z`);
          }
        }
        p.tagName = "lol-parties-cosmetics-panel";
        var h = p;
        t.default = h;
      },
      (e, t, n) => {
        "use strict";
        var i = n(1);
        e.exports = {
          getBaseLayoutItem: function (e, t) {
            if (!e) return;
            if (
              e &&
              (e.itemId === t.defaultItemId ||
                (e.upgrades && e.upgrades.length > 0))
            )
              return e;
            const n = i.lodash.find(t.groups, { groupId: e.groupId });
            if (!n) return e;
            let s;
            return (
              i.lodash.forEach(n.items, (t) =>
                t.itemId === e.itemId ||
                i.lodash.find(t.upgrades, { itemId: e.itemId })
                  ? ((s = t), !1)
                  : void 0,
              ),
              s || e
            );
          },
          getLayoutItemById: function (e, t) {
            let n;
            return (
              i.lodash.forEach(t.groups, (t) => {
                if (n) return !1;
                i.lodash.forEach(t.items, (t) =>
                  t.itemId === e
                    ? ((n = t), !1)
                    : ((n = i.lodash.find(t.upgrades, { itemId: e })),
                      !n && void 0),
                );
              }),
              n
            );
          },
        };
      },
      (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.SORTING_TYPES = t.REWARDS_PROGRAM_STATUS = void 0);
        t.REWARDS_PROGRAM_STATUS = {
          ENABLED: "ENABLED",
          DISABLED: "DISABLED",
          UNSET: "UNSET",
        };
        t.SORTING_TYPES = {
          DEFAULT: "default-order",
          LAST_ACQUIRED: "last-acquired",
        };
      },
      (e) => {
        "use strict";
        e.exports =
          '\ufeff<template id="lol-parties-template-cosmetics-panel">\r\n\t<div class="cosmetic-selection-container">\r\n\t\t\x3c!-- todo JA:, improve filter when box exists --\x3e\r\n\t\t<div class="cosmetic-selection-options-container">\r\n\r\n\t\t\t<lol-uikit-flat-input class="search-container">\r\n\t\t\t\t<input\r\n\t\t\t\t  id="cosmetic_search_bar"\r\n\t\t\t\t  type="search"\r\n\t\t\t\t  name="search"\r\n\t\t\t\t  maxlength="24"\r\n\t\t\t\t/>\r\n\t\t\t  </lol-uikit-flat-input>\t\t\r\n\t\t\t<lol-uikit-framed-dropdown class="cosmetic-sorting-dropdown hidden">\r\n\t\t\t\t<lol-uikit-dropdown-option slot="lol-uikit-dropdown-option"></lol-uikit-dropdown-option>\r\n\t\t\t\t<lol-uikit-dropdown-option slot="lol-uikit-dropdown-option"></lol-uikit-dropdown-option>\r\n\t\t\t</lol-uikit-framed-dropdown>\r\n\t\t\t<div class="currency-container">\r\n\t\t\t\t\x3c!-- src is set programmatically --\x3e\r\n\t\t\t\t<video\r\n\t\t\t        class="currency-upgrade-video"\r\n\t\t\t        preload="auto"\r\n\t\t\t        src="empty & set programmatically">\r\n\t\t\t    </video>\r\n\t\t\t\t<div class="currency-ss hidden"></div>\r\n\t\t    </div>\r\n\t\t</div>\r\n\t\t<lol-uikit-flat-checkbox class="hide-unowned-checkbox-container">\r\n\t\t\t<input id="hide_unowned_checkbox" type="checkbox" slot="input">\r\n\t\t\t<label id="hide_unowned_checkbox_label" for="hide_unowned_checkbox" slot="label"></label>\r\n\t\t</lol-uikit-flat-checkbox>\r\n\t\t<lol-uikit-scrollable overflow-masks="enabled" class="cosmetic-option-scroller">\r\n\t\t\t<div class="cosmetic-scroller-item cosmetic-option-item-list cosmetic-option-favorites-list"> </div>\r\n\t\t\t<div class="cosmetic-scroller-item cosmetic-option-item-list cosmetic-option-group-list">\r\n\t\t\t\t\x3c!-- Renderer layout example\r\n\t\t\t\t<div class="cosmetic-option-group">\r\n\t\t\t\t\t<div class="cosmetic-option-group-header">\r\n\t\t\t\t\t\t<div class="cosmetic-option-group-title"></div>\r\n\t\t\t\t\t\t<div class="cosmetic-option-group-info"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class="cosmetic-option-list">\r\n\t\t\t\t\t\t<div class="cosmetic-option"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t--\x3e\r\n\t\t\t</div>\r\n\t\t</lol-uikit-scrollable>\r\n\r\n\t</div>\r\n\t<div class="selected-cosmetic">\r\n\t\t<div class="selected-cosmetic-header-group">\r\n\t\t</div>\r\n\t\t<div class="selected-cosmetic-header-group-2">\r\n\t\t\t<div class="selected-cosmetic-rarity"></div>\r\n\t\t\t<button class="cosmetic-group-favorite-button hidden"></button>\r\n\t\t\t<div class="selected-cosmetic-title"></div>\r\n\t\t\t<div class="cosmetic-upgrade-container hidden">\r\n\t\t\t\t<div class="cosmetic-upgrade-bounding-container cosmetic-upgrade-1 unowned">\r\n\t\t\t\t\t<div class="cosmetic-upgrade">\r\n\t\t\t\t\t\t<span class=\'cosmetics-modal-star\'></span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class="cosmetic-upgrade-bounding-container cosmetic-upgrade-2 unowned">\r\n\t\t\t\t\t<div class="cosmetic-upgrade">\r\n\t\t\t\t\t\t<span class=\'cosmetics-modal-star\'></span>\r\n\t\t\t\t\t\t<span class=\'cosmetics-modal-star\'></span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class="cosmetic-upgrade-bounding-container cosmetic-upgrade-3 unowned">\r\n\t\t\t\t\t<div class="cosmetic-upgrade">\r\n\t\t\t\t\t\t<span class=\'cosmetics-modal-star\'></span>\r\n\t\t\t\t\t\t<span class=\'cosmetics-modal-star\'></span>\r\n\t\t\t\t\t\t<span class=\'cosmetics-modal-star\'></span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<span class="star-shards-label-wrapper">\r\n\t\t\t\t<span class="star-shards-label"></span>\r\n\t\t\t\t<span class="star-shards-amount"></span>\r\n\t\t\t</span>\r\n\t\t\t<lol-uikit-flat-button class="cosmetic-group-action-button" disabled>\r\n\t\t\t</lol-uikit-flat-button>\r\n\t\t</div>\r\n\r\n\t</div>\r\n</template>';
      },
      (e, t, n) => {
        var i = n(497),
          s = n(498)(i);
        s.push([
          e.id,
          ':host .cosmetic-selection-options-container .currency-ss,\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper,\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title {\n  font-family: var(--font-display);\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input,\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-option-item-list .cosmetic-option-group .cosmetic-option-group-header {\n  font-family: var(--font-body);\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input,\n:host .cosmetic-selection-options-container .currency-ss,\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper,\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title,\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-option-item-list .cosmetic-option-group .cosmetic-option-group-header {\n  -webkit-user-select: none;\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input,\n:host .cosmetic-selection-options-container .currency-ss,\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper,\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title,\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-option-item-list .cosmetic-option-group .cosmetic-option-group-header {\n  font-kerning: normal;\n  -webkit-font-feature-settings: "kern" 1;\n  -webkit-font-smoothing: antialiased;\n}\n:host .cosmetic-selection-options-container .currency-ss,\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper,\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title {\n  text-transform: uppercase;\n}\n:host .cosmetic-selection-options-container .currency-ss:lang(ko-kr),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper:lang(ko-kr),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title:lang(ko-kr),\n:host .cosmetic-selection-options-container .currency-ss:lang(ja-jp),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper:lang(ja-jp),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title:lang(ja-jp),\n:host .cosmetic-selection-options-container .currency-ss:lang(tr-tr),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper:lang(tr-tr),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title:lang(tr-tr),\n:host .cosmetic-selection-options-container .currency-ss:lang(el-gr),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper:lang(el-gr),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title:lang(el-gr),\n:host .cosmetic-selection-options-container .currency-ss:lang(th-th),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper:lang(th-th),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title:lang(th-th),\n:host .cosmetic-selection-options-container .currency-ss:lang(zh-tw),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper:lang(zh-tw),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title:lang(zh-tw) {\n  text-transform: none;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper,\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title {\n  text-transform: none;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title {\n  color: #f0e6d2;\n  font-size: 24px;\n  font-weight: 700;\n  line-height: 28px;\n  letter-spacing: 0.05em;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title {\n  letter-spacing: 0.025em;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper {\n  color: #f0e6d2;\n  font-size: 18px;\n  font-weight: 700;\n  line-height: 22px;\n  letter-spacing: 0.05em;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper {\n  letter-spacing: 0.025em;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-option-item-list .cosmetic-option-group .cosmetic-option-group-header {\n  color: #a09b8c;\n  font-size: 14px;\n  font-weight: normal;\n  line-height: 20px;\n  letter-spacing: 0.025em;\n  -webkit-font-smoothing: subpixel-antialiased;\n}\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-option-item-list .cosmetic-option-group .cosmetic-option-group-header:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input {\n  color: #a09b8c;\n  font-size: 12px;\n  font-weight: normal;\n  line-height: 16px;\n  letter-spacing: 0.025em;\n  -webkit-font-smoothing: subpixel-antialiased;\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input:lang(ja-jp) {\n  font-size: 13px;\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host .cosmetic-selection-options-container .currency-ss {\n  font-size: 14px;\n  font-weight: 700;\n  letter-spacing: 0.075em;\n  color: #cdbe91;\n}\n:host .cosmetic-selection-options-container .currency-ss.active {\n  position: relative;\n  color: #f0e6d2;\n}\n:host .cosmetic-selection-options-container .currency-ss:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host .cosmetic-selection-options-container .currency-ss,\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper,\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title {\n  font-family: var(--font-display);\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input,\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-option-item-list .cosmetic-option-group .cosmetic-option-group-header {\n  font-family: var(--font-body);\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input,\n:host .cosmetic-selection-options-container .currency-ss,\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper,\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title,\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-option-item-list .cosmetic-option-group .cosmetic-option-group-header {\n  -webkit-user-select: none;\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input,\n:host .cosmetic-selection-options-container .currency-ss,\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper,\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title,\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-option-item-list .cosmetic-option-group .cosmetic-option-group-header {\n  font-kerning: normal;\n  -webkit-font-feature-settings: "kern" 1;\n  -webkit-font-smoothing: antialiased;\n}\n:host .cosmetic-selection-options-container .currency-ss,\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper,\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title {\n  text-transform: uppercase;\n}\n:host .cosmetic-selection-options-container .currency-ss:lang(ko-kr),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper:lang(ko-kr),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title:lang(ko-kr),\n:host .cosmetic-selection-options-container .currency-ss:lang(ja-jp),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper:lang(ja-jp),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title:lang(ja-jp),\n:host .cosmetic-selection-options-container .currency-ss:lang(tr-tr),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper:lang(tr-tr),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title:lang(tr-tr),\n:host .cosmetic-selection-options-container .currency-ss:lang(el-gr),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper:lang(el-gr),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title:lang(el-gr),\n:host .cosmetic-selection-options-container .currency-ss:lang(th-th),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper:lang(th-th),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title:lang(th-th),\n:host .cosmetic-selection-options-container .currency-ss:lang(zh-tw),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper:lang(zh-tw),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title:lang(zh-tw) {\n  text-transform: none;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper,\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title {\n  text-transform: none;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title {\n  color: #f0e6d2;\n  font-size: 24px;\n  font-weight: 700;\n  line-height: 28px;\n  letter-spacing: 0.05em;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title {\n  letter-spacing: 0.025em;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper {\n  color: #f0e6d2;\n  font-size: 18px;\n  font-weight: 700;\n  line-height: 22px;\n  letter-spacing: 0.05em;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper {\n  letter-spacing: 0.025em;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-option-item-list .cosmetic-option-group .cosmetic-option-group-header {\n  color: #a09b8c;\n  font-size: 14px;\n  font-weight: normal;\n  line-height: 20px;\n  letter-spacing: 0.025em;\n  -webkit-font-smoothing: subpixel-antialiased;\n}\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-option-item-list .cosmetic-option-group .cosmetic-option-group-header:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input {\n  color: #a09b8c;\n  font-size: 12px;\n  font-weight: normal;\n  line-height: 16px;\n  letter-spacing: 0.025em;\n  -webkit-font-smoothing: subpixel-antialiased;\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input:lang(ja-jp) {\n  font-size: 13px;\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host .cosmetic-selection-options-container .currency-ss {\n  font-size: 14px;\n  font-weight: 700;\n  letter-spacing: 0.075em;\n  color: #cdbe91;\n}\n:host .cosmetic-selection-options-container .currency-ss.active {\n  position: relative;\n  color: #f0e6d2;\n}\n:host .cosmetic-selection-options-container .currency-ss:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  position: relative;\n  --cosmetic-option-group-title-padding: 0 5px 0 0;\n  --cosmetic-option-group-title-padding-rtl: 0 0 0 5px;\n}\n:host .cosmetic-selection-options-container {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding-right: 33px;\n  padding-left: 20px;\n  padding-bottom: 10px;\n  position: relative;\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input {\n  display: block;\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input {\n  display: block;\n  box-sizing: border-box;\n  width: 100%;\n  height: 30px;\n  padding: 0 6px;\n  -webkit-appearance: none;\n  outline: none;\n  color: #f0e6d2;\n  border: thin solid #785a28;\n  background-color: rgba(0,0,0,0.7);\n  box-shadow: 0 0 0 1px rgba(0,0,0,0.25) inset, 0 0 0 1px rgba(0,0,0,0.25);\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input:lang(ar-ae) {\n  direction: rtl;\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input[type=\'search\'] {\n/* This is a fix for RCBUG-4514, where pasting any text twice\n       * in a row causes it to jump while the input is has focus.\n       * The bug only seems to occur when the line-height is larger\n       * than [height] / 2.\n       */\n  line-height: 15px;\n  padding-left: 24px;\n  background: no-repeat 5px center/16px url("/fe/lol-static-assets/images/uikit/magnifying-glass-icon.png") rgba(0,0,0,0.7);\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input[type=\'search\']:lang(ar-ae) {\n  direction: rtl;\n  padding: 0 24px 0 6px;\n  background-position: 98% center;\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input[type=\'search\']:focus {\n  background: no-repeat 5px center/16px url("/fe/lol-static-assets/images/uikit/magnifying-glass-icon.png"), linear-gradient(to bottom, rgba(7,16,25,0.7), rgba(32,39,44,0.7));\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input[type=\'search\']:focus:lang(ar-ae) {\n  background-position: 98% center;\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input:focus {\n  background: linear-gradient(to bottom, rgba(7,16,25,0.7), rgba(32,39,44,0.7));\n  border-image: linear-gradient(to bottom, #785a28, #c8aa6e) 1 stretch;\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input:disabled {\n  color: #5c5b57;\n  background-color: #1e2328;\n  border-color: #3c3c41;\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input::-webkit-input-placeholder {\n  color: #a09b8c;\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input[type="search"]::-webkit-search-cancel-button {\n  -webkit-appearance: none;\n  cursor: pointer;\n  height: 18px;\n  width: 18px;\n  margin: 0 0 0 5px;\n  -webkit-mask: url("/fe/lol-uikit/images/search-box-clear.png") no-repeat center;\n  background-color: #cdbe91;\n  -webkit-mask-size: contain;\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input[type="search"]::-webkit-search-cancel-button:hover {\n  background-color: #f0e6d2;\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input[type="search"]::-webkit-search-cancel-button:active {\n  background-color: #463714;\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input[type="search"]:lang(ar-ae)::-webkit-search-cancel-button {\n  margin: 0 5px 0 0;\n}\n:host .cosmetic-selection-options-container .search-container {\n  flex: 0 0 auto;\n  width: 180px;\n}\n:host .cosmetic-selection-options-container .search-container.extended {\n  width: 325px;\n}\n:host .cosmetic-selection-options-container .cosmetic-sorting-dropdown {\n  flex: 0 0 auto;\n  width: 180px;\n  padding-top: 1px;\n}\n:host .cosmetic-selection-options-container .cosmetic-sorting-dropdown.hidden {\n  display: none;\n}\n:host .cosmetic-selection-options-container .currency-container {\n  position: relative;\n}\n:host .cosmetic-selection-options-container .currency-ss {\n  visibility: visible;\n  position: relative;\n  color: #f0e6d2;\n  padding: 3px 8px 4px 30px;\n  border-radius: 8px;\n  background: rgba(0,0,0,0.5);\n  cursor: pointer;\n}\n:host .cosmetic-selection-options-container .currency-ss.hidden {\n  visibility: hidden;\n}\n:host .cosmetic-selection-options-container .currency-ss::after {\n  content: \'\';\n  position: absolute;\n  left: -2px;\n  top: 0;\n  bottom: 0;\n  width: 35px;\n  background-image: url("/fe/lol-static-assets/images/icon-star-shards-active-88.png");\n  background-position: 0 center;\n  background-size: 35px 35px;\n  background-repeat: no-repeat;\n}\n:host .cosmetic-selection-options-container .currency-upgrade-video {\n  position: absolute;\n  top: -33px;\n  left: -88px;\n  mix-blend-mode: screen;\n  width: 0;\n  height: 0;\n}\n:host .cosmetic-selection-options-container .currency-upgrade-video.playing {\n  width: 256px;\n  height: 64px;\n}\n:host .hide-unowned-checkbox-container {\n  display: flex;\n  padding-left: 20px;\n}\n:host .hide-unowned-checkbox-container .hide_unowned_checkbox_label {\n  height: 17px;\n}\n:host .selected-cosmetic {\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: center;\n  width: 323px;\n  position: relative;\n  flex: 0 0 auto;\n}\n:host .selected-cosmetic[content-id="NONE_OPTION"] {\n  background-size: 100px;\n  background-repeat: no-repeat;\n  background-position: center;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group {\n  width: 100%;\n  height: 405px;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-end;\n  align-items: center;\n  flex: 1 1 auto;\n  box-shadow: inset 0 0 20px 1px #010a13, inset 0 0 0 1px #010a13;\n  background: linear-gradient(to bottom, rgba(0,0,0,0) 0%, rgba(0,0,0,0) 70%, #000);\n  background-size: cover;\n  background-position: center;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group.locked {\n  filter: grayscale(0.75) brightness(0.85);\n}\n:host .selected-cosmetic.rarity-0 .selected-cosmetic-header-group-2 .selected-cosmetic-rarity {\n  background-image: url("/fe/lol-parties/common_plating_big.png");\n}\n:host .selected-cosmetic.rarity-1 .selected-cosmetic-header-group-2 .selected-cosmetic-rarity {\n  background-image: url("/fe/lol-parties/epic_plating_big.png");\n}\n:host .selected-cosmetic.rarity-2 .selected-cosmetic-header-group-2 .selected-cosmetic-rarity {\n  background-image: url("/fe/lol-parties/legendary_plating_big.png");\n}\n:host .selected-cosmetic.rarity-3 .selected-cosmetic-header-group-2 .selected-cosmetic-rarity {\n  background-image: url("/fe/lol-parties/mythic_plating_big.png");\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 {\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: flex-start;\n  flex: 0 0 auto;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-icon {\n  width: 16px;\n  height: 16px;\n  position: relative;\n  vertical-align: middle;\n  margin-top: -1px;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-group-favorite-button {\n  background: transparent url("/fe/lol-parties/button-favorite-off.png") no-repeat top;\n  background-size: cover;\n  position: absolute;\n  bottom: 200px;\n  right: 20px;\n  width: 48px;\n  height: 48px;\n  border: 0;\n  pointer-events: all;\n  cursor: pointer;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-group-favorite-button:hover {\n  background: transparent url("/fe/lol-parties/button-favorite-off-hover.png") no-repeat top;\n  background-size: cover;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-group-favorite-button:hover.favorited {\n  background: transparent url("/fe/lol-parties/button-favorite-on-hover.png") no-repeat top;\n  background-size: cover;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-group-favorite-button:active {\n  background: transparent url("/fe/lol-parties/button-favorite-off-click.png") no-repeat top;\n  background-size: cover;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-group-favorite-button:active.favorited {\n  background: transparent url("/fe/lol-parties/button-favorite-on-click.png") no-repeat top;\n  background-size: cover;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-group-favorite-button:disabled,\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-group-favorite-button.hasMaxFavorites {\n  background: transparent url("/fe/lol-parties/button-favorite-disabled.png") no-repeat top;\n  background-size: cover;\n  cursor: default;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-group-favorite-button.favorited {\n  background: transparent url("/fe/lol-parties/button-favorite-on.png") no-repeat top;\n  background-size: cover;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-group-favorite-button.hidden {\n  display: none;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-group-action-button {\n  display: flex;\n  min-width: 170px;\n  height: 32px;\n  flex: 0 0 auto;\n  padding-bottom: 24px;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-group-action-button::before {\n  display: inline-block;\n  height: 10px;\n  width: 10px;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 12px;\n  line-height: 16px;\n  height: 24px;\n  color: #ff2345;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper.hidden {\n  opacity: 0;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper.purchasable {\n  color: #c8aa6e;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper .star-shards-amount {\n  color: #f0e6d2;\n  margin-left: 0.5em;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper .star-shards-amount.hidden {\n  display: none;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title {\n  line-height: 20px;\n  font-size: 21px;\n  letter-spacing: 0.07em;\n  text-align: center;\n  width: 95%;\n  flex: 0 0 auto;\n  margin-top: 14px;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-rarity {\n  background-image: url("/fe/lol-parties/no_plating_big.png");\n  background-position: center;\n  background-repeat: no-repeat;\n  background-size: 150px 30px;\n  width: 100%;\n  height: 30px;\n  flex: 0 0 auto;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container {\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  transition: opacity 0.1s linear;\n  margin-bottom: 12px;\n  margin-top: 24px;\n  padding: 0 3px 0 3px;\n  flex: 1 1 auto;\n  position: relative;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container:lang(ar-ae) {\n  direction: rtl;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container.hidden {\n  opacity: 0;\n  pointer-events: none;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container .cosmetic-upgrade-bounding-container {\n  width: 76px;\n  height: 34px;\n  position: relative;\n  background: linear-gradient(#c8aa6e, #785a28);\n  flex: 0 0 auto;\n  border-radius: 21px;\n  cursor: pointer;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container .cosmetic-upgrade-bounding-container:nth-child(2) {\n  margin: 0 10px;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container .cosmetic-upgrade-bounding-container.recent,\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container .cosmetic-upgrade-bounding-container.intended {\n  box-shadow: 0px 0px 5px rgba(255,171,46,0.7), 0px 0px 15px rgba(255,171,46,0.7);\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container .cosmetic-upgrade-bounding-container.recent .cosmetic-upgrade,\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container .cosmetic-upgrade-bounding-container.intended .cosmetic-upgrade {\n  background: linear-gradient(#1e2328, #585342);\n  background-clip: padding-box; /* !importanté */\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container .cosmetic-upgrade-bounding-container.recent .cosmetic-upgrade .cosmetics-modal-star,\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container .cosmetic-upgrade-bounding-container.intended .cosmetic-upgrade .cosmetics-modal-star {\n  filter: brightness(1.4);\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container .cosmetic-upgrade-bounding-container.equipped .cosmetic-upgrade {\n  background: linear-gradient(#c8aa6e, #785a28);\n  background-clip: padding-box; /* !importanté */\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container .cosmetic-upgrade-bounding-container.unowned .cosmetic-upgrade {\n  background: #1e2328;\n  background-clip: padding-box; /* !importanté */\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container .cosmetic-upgrade-bounding-container.unowned .cosmetic-upgrade .cosmetics-modal-star {\n  filter: contrast(0) brightness(0.5);\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container .cosmetic-upgrade-bounding-container.unowned::after {\n  content: \'\';\n  position: absolute;\n  left: 0;\n  bottom: 0;\n  right: 0;\n  background-repeat: no-repeat;\n  background-position: center;\n  transform: translateY(50%);\n  pointer-events: none;\n  height: 40px;\n  background-size: 40px;\n  background-image: url("../../images/loadouts/lock.png");\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container .cosmetic-upgrade-bounding-container.unowned.not-enough-shards::before {\n  content: \' \';\n  position: absolute;\n  left: 0;\n  top: 0;\n  right: 0px;\n  height: 16px;\n  background-image: url("/fe/lol-static-assets/images/icon-star-shards-36.png");\n  background-size: 16px;\n  background-repeat: no-repeat;\n  background-position: center;\n  transform: translateY(-50%);\n  pointer-events: none;\n  z-index: 1;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container .cosmetic-upgrade-bounding-container.unowned.purchasable::before {\n  content: \' \';\n  position: absolute;\n  left: 0;\n  top: 0;\n  right: 0;\n  background-repeat: no-repeat;\n  background-position: center;\n  transform: translateY(-50%);\n  pointer-events: none;\n  height: 35px;\n  background-size: 35px;\n  z-index: 1;\n  background-image: url("/fe/lol-static-assets/images/icon-star-shards-active-88.png");\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container .cosmetic-upgrade-bounding-container.unowned.purchasable::after {\n  opacity: 0;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container .cosmetic-upgrade-bounding-container:hover.unowned::after {\n  transform: translateY(53%);\n  background-image: url("../../images/loadouts/lock_hover.png");\n  height: 54px;\n  background-size: 54px 54px;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container .cosmetic-upgrade-bounding-container:hover.unowned .cosmetic-upgrade .cosmetics-modal-star {\n  filter: contrast(0.2) brightness(0.7);\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container .cosmetic-upgrade-bounding-container:hover .cosmetic-upgrade {\n  background: linear-gradient(#1e2328, #585342);\n  background-clip: padding-box; /* !importanté */\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container .cosmetic-upgrade-bounding-container:hover .cosmetic-upgrade .cosmetics-modal-star {\n  filter: brightness(1.4);\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container .cosmetic-upgrade-bounding-container .cosmetic-upgrade {\n  border-radius: 21px;\n  width: 100%;\n  height: 100%;\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  background: #1e2328;\n  background-clip: padding-box; /* !importanté */\n  border: 2px solid transparent;\n  pointer-events: none;\n  position: relative;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container .cosmetic-upgrade-bounding-container .cosmetic-upgrade .cosmetics-modal-star {\n  width: 18px;\n  height: 18px;\n  display: block;\n  background-image: url("/fe/lol-parties/tier_star.svg");\n  background-size: contain;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container .cosmetic-upgrade-bounding-container.star-shards-disabled .cosmetic-upgrade::before {\n  opacity: 0;\n}\n:host .cosmetic-selection-container {\n  position: relative;\n  flex: 1 1 auto;\n  overflow: hidden;\n  padding-right: 10px;\n  padding-top: 10px;\n  padding-bottom: 10px;\n  border-right: 2px solid transparent;\n  border-left: 2px solid transparent;\n  border-image: linear-gradient(rgba(45,35,17,0.6) 0px, rgba(90,70,34,0.6) 11.46%, rgba(90,70,34,0.6) 88.54%, rgba(45,35,17,0.6) 100%) 1;\n}\n:host .cosmetic-selection-container .cosmetic-option-scroller {\n  width: 100%;\n  height: 100%;\n  flex: 1 1 auto;\n}\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-scroller-item {\n  padding: 0 10px 0 10px;\n}\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-scroller-item:first-child {\n  padding-top: 10px;\n}\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-option-misc {\n  display: flex;\n  flex-direction: row;\n}\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-option-item-list {\n  display: flex;\n  flex-direction: column;\n  flex-wrap: wrap;\n  justify-content: flex-start;\n  transition: opacity 0.1s linear 0.01s;\n}\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-option-item-list.hidden {\n  display: none;\n}\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-option-item-list .cosmetic-option[content-id="NONE_OPTION"] {\n  display: none;\n  background-size: 36px;\n  background-repeat: no-repeat;\n}\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-option-item-list.show-none .cosmetic-option[content-id="NONE_OPTION"] {\n  display: flex;\n}\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-option-item-list .cosmetic-option-group {\n  display: block;\n  padding-bottom: 13px;\n  transition: opacity 0.1s linear, height 0.1s linear, width 0.01s linear, padding-bottom 0.01s linear;\n}\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-option-item-list .cosmetic-option-group .cosmetic-option-group-header {\n  display: flex;\n  margin: 5px;\n  opacity: 0.7;\n  color: #f0e6d2;\n  background: linear-gradient(270deg, rgba(90,70,34,0) 0%, #5a4622 52.08%, #ab8e58 92.19%, rgba(90,70,34,0) 100%), linear-gradient(2.02deg, rgba(1,10,19,0) 23.21%, rgba(1,10,19,0.72) 84.16%), linear-gradient(270deg, rgba(55,46,28,0) 0%, #372e1c 71.35%, #372e1c 85.94%, rgba(55,46,28,0) 100%);\n  background-size: 100% 1px, 100% 19px, 100% 19px;\n  background-repeat: no-repeat;\n  background-position: 0 19px, 0 0, 0 0;\n  letter-spacing: 0.05em;\n  padding-bottom: 10px;\n}\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-option-item-list .cosmetic-option-group .cosmetic-option-group-header .cosmetic-option-group-title {\n  opacity: 1;\n  padding: var(--cosmetic-option-group-title-padding);\n}\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-option-item-list .cosmetic-option-group .cosmetic-option-group-header .cosmetic-option-group-title:lang(ar-ae) {\n  padding: var(--cosmetic-option-group-title-padding-rtl);\n}\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-option-item-list .cosmetic-option-group .cosmetic-option-list {\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: flex-start;\n}\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-option-item-list .cosmetic-option-group[group-shown="false"] {\n  opacity: 0;\n  pointer-events: none;\n  height: 0;\n  width: 0;\n  padding-bottom: 0;\n}\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-option-item-list .cosmetic-option-group[group-shown="false"] .cosmetic-option-group-header {\n  opacity: 0;\n}\n:host .cosmetic-selection-container .cosmetic-option-scroller lol-parties-cosmetics-renderer[item-shown="false"] {\n  opacity: 0;\n  pointer-events: none;\n  height: 0;\n  width: 0;\n  margin: 0;\n}\n',
          "",
        ]),
          (e.exports = s);
      },
      (e, t, n) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.default = void 0);
        var i,
          s = n(1),
          o = (i = n(95)) && i.__esModule ? i : { default: i },
          a = n(524);
        class r extends s.webComponents.ShadowElement {
          templateMarkup() {
            return n(528);
          }
          stylesheetMarkup() {
            return n(529);
          }
          constructor() {
            super(),
              (this._onClickBinding = this._onClicked.bind(this)),
              (this._onMouseInBinding = this._onMouseIn.bind(this)),
              (this._eventPreventDefaultCallback = (e) => e.preventDefault()),
              (this.isRewardsProgramEnabled = a.REWARDS_PROGRAM_STATUS.UNSET);
          }
          connectedCallback() {
            super.connectedCallback(),
              this.addEventListener("click", this._onClickBinding),
              this.addEventListener("mouseenter", this._onMouseInBinding),
              this.addEventListener(
                "mousedown",
                this._eventPreventDefaultCallback,
              );
          }
          disconnectedCallback() {
            super.disconnectedCallback(),
              this.removeEventListener("click", this._onClickBinding),
              this.removeEventListener("mouseenter", this._onMouseInBinding),
              this.removeEventListener(
                "mousedown",
                this._eventPreventDefaultCallback,
              );
          }
          toggleFavoriteIcon(e) {
            e
              ? this._removeClass(
                  "hidden",
                  ".cosmetics-renderer-favorited-icon",
                )
              : this._addClass("hidden", ".cosmetics-renderer-favorited-icon");
          }
          getContentId() {
            return this._data?.contentId;
          }
          _onClicked() {
            this._playSound(o.default.SFX_URLS.SFX_COMPANION_PICKER_CLICK),
              this.dispatchEvent(
                new CustomEvent("lol-parties-cosmetics-item-click", {
                  composed: !0,
                  detail: { item: this._data },
                }),
              );
          }
          _onMouseIn() {
            this._playSound(o.default.SFX_URLS.SFX_COMPANION_PICKER_HOVER),
              this.dispatchEvent(
                new CustomEvent("lol-parties-cosmetics-item-hover", {
                  composed: !0,
                  detail: { item: this._data },
                }),
              );
          }
          _playSound(e) {
            s.Audio.getChannel(o.default.SFX_CHANNEL).playSound(e);
          }
          setIsRewardsProgramEnabled(e) {
            this.isRewardsProgramEnabled = e;
          }
          setData(e) {
            if (!e) return;
            this._setIconPath(e);
            let t = !1,
              n = !1;
            const i = this.getAttribute("is-recent-group");
            if (e.upgrades && e.upgrades.length > 0 && "true" !== i)
              for (let i = e.upgrades.length - 1; i >= 0; i--) {
                const s = e.upgrades[i];
                s.owned && s.selected
                  ? this._setIconPath(s)
                  : !s.owned || n || t || this._setIconPath(s),
                  (t = t || s.selected),
                  (n = n || s.owned),
                  s.owned
                    ? this._removeClass("unowned", `.rank-${i + 2}`)
                    : this._addClass("unowned", `.rank-${i + 2}`),
                  t
                    ? this._addClass("selected", `.rank-${i + 2}`)
                    : this._removeClass("selected", `.rank-${i + 2}`);
              }
            e.selected && e.owned && this._setIconPath(e),
              (t = t || e.selected),
              (n = n || e.owned),
              e.owned
                ? (t
                    ? this._addClass("selected", ".rank-1")
                    : this._removeClass("selected", ".rank-1"),
                  this._removeClass("unowned", ".rank-1"))
                : this._addClass("unowned", ".rank-1"),
              this._data &&
                this._removeClass(
                  `rarity-${this._data.rarityValue}`,
                  ".cosmetics-renderer-rarity",
                ),
              this._addClass(
                `rarity-${e.rarityValue}`,
                ".cosmetics-renderer-rarity",
              ),
              this._setSelected(t),
              n
                ? (this._addOwned(),
                  e.itemId > 1
                    ? (this._removeClass(
                        "hidden",
                        ".cosmetics-renderer-rarity",
                      ),
                      e.upgrades &&
                        e.upgrades.length > 0 &&
                        this._removeClass(
                          "hidden",
                          ".cosmetics-renderer-rank-container",
                        ))
                    : (this._addClass(
                        "hidden",
                        ".cosmetics-renderer-rank-container",
                      ),
                      this._addClass("hidden", ".cosmetics-renderer-rarity")))
                : (this._removeClass("owned", ".cosmetics-renderer"),
                  this._removeClass("owned", ".cosmetics-renderer-filter"),
                  this._addClass(
                    "hidden",
                    ".cosmetics-renderer-rank-container",
                  ),
                  this._addClass("hidden", ".cosmetics-renderer-rarity")),
              this._setIds(e),
              this._setLoyalty(e.loyalty),
              i && this._setRecentItemData(e),
              (this._data = e);
          }
          _setRecentItemData(e) {
            e.isUpgradable &&
              this._removeClass("hidden", ".cosmetics-renderer-rank-container");
            for (let t = 1; t <= e.level; t++)
              this._removeClass("unowned", `.rank-${t}`),
                e.selected && this._addClass("selected", `.rank-${t}`);
          }
          _setSelected(e) {
            e
              ? this._addClass("selected", ".cosmetics-renderer")
              : this._removeClass("selected", ".cosmetics-renderer");
          }
          _setLoyalty(e) {
            e
              ? this.isRewardsProgramEnabled ===
                a.REWARDS_PROGRAM_STATUS.ENABLED
                ? this._removeClass(
                    "hidden",
                    ".cosmetics-renderer-rewards-program",
                  )
                : this.isRewardsProgramEnabled ===
                    a.REWARDS_PROGRAM_STATUS.DISABLED &&
                  this._removeClass("hidden", ".cosmetics-renderer-loyalty")
              : this.isRewardsProgramEnabled ===
                  a.REWARDS_PROGRAM_STATUS.ENABLED
                ? this._addClass(
                    "hidden",
                    ".cosmetics-renderer-rewards-program",
                  )
                : this.isRewardsProgramEnabled ===
                    a.REWARDS_PROGRAM_STATUS.DISABLED &&
                  this._addClass("hidden", ".cosmetics-renderer-loyalty");
          }
          _addOwned() {
            this._addClass("owned", ".cosmetics-renderer"),
              this._addClass("owned", ".cosmetics-renderer-filter");
          }
          _setIds(e) {
            this.setAttribute("content-id", e.contentId),
              this.setAttribute("item-id", e.itemId);
          }
          _setElementText(e, t) {
            const n = this.shadowRoot.querySelector(e);
            n && (n.innerHTML = t);
          }
          _setIconPath(e) {
            const t = this.shadowRoot.querySelector(".cosmetics-renderer-icon");
            t && (t.src = e.loadoutsIcon);
          }
          static get observedAttributes() {
            return ["highlighted", "is-recent-group"];
          }
          attributeChangedCallback(e, t, n) {
            if ("highlighted" === e)
              n
                ? this._addClass("highlighted", ".cosmetics-renderer")
                : this._removeClass("highlighted", ".cosmetics-renderer");
          }
          _addClass(e, t) {
            const n = this.shadowRoot.querySelector(t);
            n && !n.classList.contains(e) && n.classList.add(e);
          }
          _removeClass(e, t) {
            const n = this.shadowRoot.querySelector(t);
            n && n.classList.contains(e) && n.classList.remove(e);
          }
        }
        r.tagName = "lol-parties-cosmetics-renderer";
        var l = r;
        t.default = l;
      },
      (e) => {
        "use strict";
        e.exports =
          '<template id="lol-parties-template-cosmetics-renderer">\r\n  <div class="cosmetics-renderer">\r\n    <img class="cosmetics-renderer-icon"/>\r\n    <div class="cosmetics-renderer-filter"></div>\r\n    <div class="cosmetics-renderer-favorited-icon hidden"></div>\r\n    <div class="cosmetics-renderer-rank-container hidden">\r\n      <div class="cosmetics-renderer-rank-bounding-container">\r\n        <span class=\'cosmetics-renderer-star rank-1 unowned\'></span>\r\n        <span class=\'cosmetics-renderer-star rank-2 unowned\'></span>\r\n        <span class=\'cosmetics-renderer-star rank-3 unowned\'></span>\r\n      </div>\r\n    </div>\r\n    <div class="cosmetics-renderer-rarity"></div>\r\n    <div class="cosmetics-renderer-loyalty hidden"></div>\r\n    <div class="cosmetics-renderer-rewards-program hidden"></div>\r\n  </div>\r\n</template>\r\n';
      },
      (e, t, n) => {
        var i = n(497),
          s = n(498)(i);
        s.push([
          e.id,
          ':host {\n  --rcp-fe-lol-parties-cosmetics-renderer-border-width: 2px;\n}\n:host {\n  position: relative;\n  width: 64px;\n  height: 72px;\n  margin: 7px;\n  box-sizing: border-box;\n  cursor: pointer;\n}\n:host .cosmetics-renderer {\n  position: relative;\n  width: 100%;\n  height: 64px;\n  box-sizing: border-box;\n  border: thin solid #1e2328;\n}\n:host .cosmetics-renderer.selected {\n  filter: none;\n  border-width: 2px;\n  border: 2px solid #c79a3b;\n}\n:host .cosmetics-renderer.selected .cosmetics-renderer-rank-container {\n  top: -8px;\n}\n:host .cosmetics-renderer.selected .cosmetics-renderer-rank-container .cosmetics-renderer-rank-bounding-container {\n  background: linear-gradient(#c8aa6e, #785a28);\n}\n:host .cosmetics-renderer.selected .cosmetics-renderer-rank-container .cosmetics-renderer-rank-bounding-container .cosmetics-renderer-star {\n  filter: brightness(0.5);\n}\n:host .cosmetics-renderer.selected .cosmetics-renderer-rank-container .cosmetics-renderer-rank-bounding-container .cosmetics-renderer-star.selected {\n  filter: none;\n}\n:host .cosmetics-renderer.selected .cosmetics-renderer-rarity {\n  bottom: -20px;\n  left: 3px;\n  background-image: url("/fe/lol-parties/common_plating_hover.png");\n}\n:host .cosmetics-renderer.selected .cosmetics-renderer-rarity.rarity-1 {\n  background-image: url("/fe/lol-parties/epic_plating_hover.png");\n}\n:host .cosmetics-renderer.selected .cosmetics-renderer-rarity.rarity-2 {\n  background-image: url("/fe/lol-parties/legendary_plating_hover.png");\n}\n:host .cosmetics-renderer.selected .cosmetics-renderer-rarity.rarity-3 {\n  background-image: url("/fe/lol-parties/mythic_plating_hover.png");\n}\n:host .cosmetics-renderer:hover,\n:host .cosmetics-renderer.highlighted {\n  filter: brightness(110%);\n  border-width: 2px;\n  border-image: linear-gradient(to bottom, #f0e6d2, #c89b3c) 1;\n}\n:host .cosmetics-renderer:hover .cosmetics-renderer-rarity,\n:host .cosmetics-renderer.highlighted .cosmetics-renderer-rarity {\n  bottom: -20px;\n  left: 3px;\n  background-image: url("/fe/lol-parties/common_plating_hover.png");\n}\n:host .cosmetics-renderer:hover .cosmetics-renderer-rarity.rarity-1,\n:host .cosmetics-renderer.highlighted .cosmetics-renderer-rarity.rarity-1 {\n  background-image: url("/fe/lol-parties/epic_plating_hover.png");\n}\n:host .cosmetics-renderer:hover .cosmetics-renderer-rarity.rarity-2,\n:host .cosmetics-renderer.highlighted .cosmetics-renderer-rarity.rarity-2 {\n  background-image: url("/fe/lol-parties/legendary_plating_hover.png");\n}\n:host .cosmetics-renderer:hover .cosmetics-renderer-rarity.rarity-3,\n:host .cosmetics-renderer.highlighted .cosmetics-renderer-rarity.rarity-3 {\n  background-image: url("/fe/lol-parties/mythic_plating_hover.png");\n}\n:host .cosmetics-renderer:hover:not(.selected) .cosmetics-renderer-loyalty::after,\n:host .cosmetics-renderer.highlighted:not(.selected) .cosmetics-renderer-loyalty::after {\n  transform: translate(229%, -336%);\n}\n:host .cosmetics-renderer:not(.owned)::before {\n  content: \'\';\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  background-color: #000;\n  background-size: 100% 100%;\n  opacity: 50%;\n}\n:host .cosmetics-renderer:not(.owned)::before::hover {\n  opacity: 0;\n}\n:host .cosmetics-renderer:not(.owned)::after {\n  content: \' \';\n  position: absolute;\n  width: 100%;\n  height: 40px;\n  top: 0;\n  left: 0;\n  background-image: url("/fe/lol-parties/lock.png");\n  background-position: center bottom;\n  background-repeat: no-repeat;\n  background-size: 40px 40px;\n  transform: translate(0, -52%) /*rtl:translate(0, -52%)*/;\n}\n:host .cosmetics-renderer:not(.owned):hover::before {\n  background-color: rgba(0,0,0,0.3);\n}\n:host .cosmetics-renderer:not(.owned):hover::after {\n  background-image: url("/fe/lol-parties/lock_hover.png");\n  height: 54px;\n  background-size: 54px 54px;\n  transform: translate(0, -47%) /*rtl:translate(0, -52%)*/;\n}\n:host .cosmetics-renderer .cosmetics-renderer-filter {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(0,0,0,0.6);\n  border: thin solid #000;\n}\n:host .cosmetics-renderer .cosmetics-renderer-filter.owned {\n  background-color: rgba(0,0,0,0);\n}\n:host .cosmetics-renderer .cosmetics-renderer-favorited-icon {\n  position: absolute;\n  bottom: 2px;\n  right: 2px;\n  width: 20px;\n  height: 20px;\n  background: transparent url("/fe/lol-parties/favorites-heart.png") no-repeat top;\n  background-size: contain;\n}\n:host .cosmetics-renderer .cosmetics-renderer-favorited-icon.hidden {\n  display: none;\n}\n:host .cosmetics-renderer .cosmetics-renderer-rank-container {\n  position: absolute;\n  top: -7px;\n  left: 0;\n  pointer-events: none;\n  display: flex;\n  width: 100%;\n}\n:host .cosmetics-renderer .cosmetics-renderer-rank-container .cosmetics-renderer-rank-bounding-container {\n  padding: 1px 6px 1px 6px;\n  border-radius: 100px;\n  box-sizing: border-box;\n  background: #1e2328;\n  border: thin solid #000;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin: auto;\n}\n:host .cosmetics-renderer .cosmetics-renderer-rank-container .cosmetics-renderer-rank-bounding-container .cosmetics-renderer-star {\n  width: 10px;\n  height: 10px;\n  display: block;\n  background-image: url("/fe/lol-parties/tier_star.svg");\n  background-size: contain;\n  background-position: center;\n  background-repeat: no-repeat;\n  flex: 0 0 auto;\n}\n:host .cosmetics-renderer .cosmetics-renderer-rank-container .cosmetics-renderer-rank-bounding-container .cosmetics-renderer-star.unowned {\n  display: none;\n}\n:host .cosmetics-renderer .cosmetics-renderer-icon {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n  position: relative;\n}\n:host .cosmetics-renderer .cosmetics-renderer-icon::before {\n  content: "";\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  box-shadow: inset 0 0 1 10px #000;\n}\n:host .cosmetics-renderer .cosmetics-renderer-rarity {\n  position: absolute;\n  bottom: -19px;\n  left: 4px;\n  width: 56px;\n  height: 32px;\n  background-image: url("/fe/lol-parties/common_plating.png");\n  background-position: center bottom;\n  background-repeat: no-repeat;\n  background-size: contain;\n}\n:host .cosmetics-renderer .cosmetics-renderer-rarity.rarity-1 {\n  background-image: url("/fe/lol-parties/epic_plating.png");\n}\n:host .cosmetics-renderer .cosmetics-renderer-rarity.rarity-2 {\n  background-image: url("/fe/lol-parties/legendary_plating.png");\n}\n:host .cosmetics-renderer .cosmetics-renderer-rarity.rarity-3 {\n  background-image: url("/fe/lol-parties/mythic_plating.png");\n}\n:host .cosmetics-renderer .cosmetics-renderer-loyalty {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n}\n:host .cosmetics-renderer .cosmetics-renderer-loyalty::after {\n  content: \' \';\n  position: absolute;\n  width: 22px;\n  height: 22px;\n  background-image: url("/fe/lol-parties/Loyalty.png");\n  background-position: center bottom;\n  background-size: 22px 22px;\n  transform: translate(233%, -340%);\n}\n:host .cosmetics-renderer .cosmetics-renderer-rewards-program {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n}\n:host .cosmetics-renderer .cosmetics-renderer-rewards-program::after {\n  content: \' \';\n  position: absolute;\n  width: 22px;\n  height: 22px;\n  background-image: url("/fe/lol-static-assets/images/loyalty-nav-bar.svg");\n  background-position: center bottom;\n  background-size: 22px 22px;\n  transform: translate(233%, -340%);\n}\n:host .cosmetics-renderer .hidden {\n  visibility: hidden;\n  opacity: 0;\n}\n:host-context([is-recent-item="true"]) .cosmetics-renderer {\n  border-width: 2px;\n  border-image: linear-gradient(to bottom, #fdfaf1, #78531c) 1;\n}\n:host-context([is-recent-item="true"]) .cosmetics-renderer .cosmetics-renderer-rank-container {\n  top: -8px;\n}\n:host-context([is-recent-item="true"]) .cosmetics-renderer .cosmetics-renderer-rank-container .cosmetics-renderer-rank-bounding-container {\n  background: linear-gradient(#c8aa6e, #785a28);\n}\n:host-context([is-recent-item="true"]) .cosmetics-renderer .cosmetics-renderer-rank-container .cosmetics-renderer-rank-bounding-container .cosmetics-renderer-star {\n  filter: contrast(30) brightness(100%);\n  background-image: url("/fe/lol-parties/recent_star.png");\n}\n:host-context([is-recent-item="true"]) .cosmetics-renderer .cosmetics-renderer-rarity {\n  bottom: -20px;\n  left: 3px;\n}\n:host-context([is-recent-item="true"]) .cosmetics-renderer .cosmetics-renderer-icon {\n  filter: drop-shadow(0px 0px 5px rgba(255,193,34,0.25)) drop-shadow(0px 0px 4px rgba(255,184,0,0.25)) drop-shadow(0px 0px 8px #ffcf53);\n}\n',
          "",
        ]),
          (e.exports = s);
      },
      (e, t, n) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.default = void 0);
        var i,
          s = n(1),
          o = (i = n(95)) && i.__esModule ? i : { default: i };
        class a extends s.webComponents.ShadowElement {
          templateMarkup() {
            return n(531);
          }
          stylesheetMarkup() {
            return n(532);
          }
          constructor() {
            super(), (this._listenersAdded = !1);
          }
          connectedCallback() {
            super.connectedCallback();
            const e = this.shadowRoot.querySelector("#bg-particles-intro");
            this._animationPlaybackStarted ||
              ((e.onAnimationStart = () => {
                s.Audio.getChannel(o.default.SFX_CHANNEL).playSound(
                  o.default.SFX_URLS.SFX_STAR_SHARDS_CELEBRATION,
                );
                this.shadowRoot.querySelector("#bg-particles-stars").play();
                const e = this.shadowRoot.querySelector(".bg-video-intro");
                e.play(),
                  e.addEventListener("done", () => {
                    this.shadowRoot.querySelector(".bg-video-loop").play();
                  }),
                  setTimeout(() => {
                    const e = this.shadowRoot.querySelector(".lighting-bolts");
                    e.play(),
                      e.addEventListener("done", () => {
                        this.shadowRoot.querySelector(".rarity-bolts").play();
                      });
                  }, 860),
                  setTimeout(() => {
                    this._addClass("hidden", ".previous-tier-img");
                  }, 1660),
                  this._removeClass("hidden", ".little-legend-container");
              }),
              (e.onAnimationComplete = () => {
                const e = this.shadowRoot.querySelector("#bg-particles-loop");
                this._removeClass("hidden", "#bg-particles-loop"), e.play();
              }),
              e.play(),
              (this._animationPlaybackStarted = !0));
          }
          setData({ previousItem: e, newItem: t }) {
            const n = this.shadowRoot.querySelector(".previous-tier-img"),
              i = this.shadowRoot.querySelector(".new-tier-img");
            (n.src = e.loadoutsIcon),
              (i.src = t.loadoutsIcon),
              this._addClass(
                `rarity-${e.rarityValue}`,
                ".little-legend-container",
              );
            this.shadowRoot
              .querySelector("#bg-particles-stars")
              .setAttribute(
                "src",
                `/fe/lol-parties/lottie/LLUpgradeCeremony_06LevelStarIcons/LLUpgradeCeremony_StarsLv${t.level}.json`,
              );
          }
          _addClass(e, t) {
            const n = this.shadowRoot.querySelector(t);
            n && !n.classList.contains(e) && n.classList.add(e);
          }
          _removeClass(e, t) {
            const n = this.shadowRoot.querySelector(t);
            n && n.classList.contains(e) && n.classList.remove(e);
          }
        }
        a.tagName = "lol-parties-cosmetics-upgrade-celebration";
        var r = a;
        t.default = r;
      },
      (e) => {
        "use strict";
        e.exports =
          '<template id="lol-parties-template-cosmetics-upgrade-celebration">\r\n    <lol-uikit-lottie id="bg-particles-intro"\r\n                      class="lottie-animation"\r\n                      src="/fe/lol-parties/lottie/LLUpgradeCeremony_01Scene/LLUpgradeCeremony_Scene_IN.json"\r\n                      image-path="/fe/lol-parties/lottie/LLUpgradeCeremony_01Scene/images/"\r\n                      autoplay="false">\r\n    </lol-uikit-lottie>\r\n    <lol-uikit-lottie id="bg-particles-loop"\r\n                      class="lottie-animation hidden"\r\n                      src="/fe/lol-parties/lottie/LLUpgradeCeremony_01Scene/LLUpgradeCeremony_Scene_LOOP.json"\r\n                      image-path="/fe/lol-parties/lottie/LLUpgradeCeremony_01Scene/images/"\r\n                      autoplay="false"\r\n                      loop="true">\r\n    </lol-uikit-lottie>\r\n\r\n    <lol-uikit-video class="bg-video bg-video-intro"\r\n                     type="intro"\r\n                     preload\r\n                     src="/fe/lol-parties/lottie/LLUpgradeCeremony_02BGParticles/videos/LLUpgradeCeremony_ParticlesBG_IN.webm">\r\n    </lol-uikit-video>\r\n    <lol-uikit-video class="bg-video bg-video-loop"\r\n                     type="idle"\r\n                     preload\r\n                     src="/fe/lol-parties/lottie/LLUpgradeCeremony_02BGParticles/videos/LLUpgradeCeremony_ParticlesBG_LOOP.webm">\r\n    </lol-uikit-video>\r\n\r\n\r\n    <div class="little-legend-container hidden">\r\n        <img class="little-legend-img new-tier-img"/>\r\n        <img class="little-legend-img previous-tier-img"/>\r\n        <div class="little-legend-overlay"></div>\r\n    </div>\r\n\r\n    <lol-uikit-video class="bg-video lighting-bolts"\r\n                     type="intro"\r\n                     src="/fe/lol-parties/lottie/LLUpgradeCeremony_04FGLightning/videos/LLUpgradeCeremony_BoltsFG.webm">\r\n    </lol-uikit-video>\r\n\r\n    <lol-uikit-video class="rarity-bolts"\r\n                     type="intro"\r\n                     src="/fe/lol-parties/lottie/LLUpgradeCeremony_05RarityBolts/videos/LLUpgradeCeremony_RarityBolts.webm">\r\n    </lol-uikit-video>\r\n    <lol-uikit-lottie id="bg-particles-stars"\r\n                      class="lottie-animation"\r\n                      image-path="/fe/lol-parties/lottie/LLUpgradeCeremony_06LevelStarIcons/images/"\r\n                      autoplay="false"\r\n                      >\r\n    </lol-uikit-lottie>\r\n</template>';
      },
      (e, t, n) => {
        var i = n(497),
          s = n(498)(i);
        s.push([
          e.id,
          ':host {\n  width: 1280px;\n  height: 720px;\n  position: relative;\n}\n:host .hidden {\n  visibility: hidden;\n}\n:host .lottie-animation {\n  position: absolute;\n  width: 1280px;\n  height: 720px;\n}\n:host .bg-video {\n  position: absolute;\n  width: 720px;\n  height: 720px;\n  left: 280px;\n  top: 0;\n  mix-blend-mode: screen;\n}\n:host .rarity-bolts {\n  position: absolute;\n  width: 96px;\n  height: 96px;\n  left: 592px;\n  top: 408px;\n}\n:host .little-legend-container {\n  position: absolute;\n  width: 208px;\n  height: 208px;\n  left: 532px;\n  top: 236px;\n  border: 4px solid;\n  border-image: linear-gradient(180deg, #c8aa6e 0%, #c89b3c 48.96%, #785a28 100%) 50 stretch stretch;\n}\n:host .little-legend-container:before {\n  position: absolute;\n  content: " ";\n  left: -5px;\n  right: -5px;\n  bottom: -5px;\n  top: -5px;\n  border: 1px solid rgba(0,0,0,0.25);\n}\n:host .little-legend-container:after {\n  position: absolute;\n  content: "";\n  bottom: -43px;\n  left: 48px;\n  width: 112px;\n  height: 64px;\n  background-size: 100% 100%;\n  background-image: url("../../images/loadouts/common_plating_hover.png");\n}\n:host .little-legend-container.rarity-1:after {\n  background-image: url("../../images/loadouts/epic_plating_hover.png");\n}\n:host .little-legend-container.rarity-2:after {\n  background-image: url("../../images/loadouts/legendary_plating_hover.png");\n}\n:host .little-legend-container.rarity-3:after {\n  background-image: url("../../images/loadouts/mythic_plating_hover.png");\n}\n:host .little-legend-img {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n  box-sizing: border-box;\n  border: 1px solid rgba(0,0,0,0.25);\n}\n:host .little-legend-overlay {\n  position: absolute;\n  height: 83px;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: linear-gradient(180deg, rgba(0,0,0,0) 0%, rgba(0,0,0,0.77) 66.15%);\n}\n',
          "",
        ]),
          (e.exports = s);
      },
      (e, t, n) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.default = void 0);
        var i = n(1);
        const s = (0, i.getProvider)().getSocket();
        class o extends i.webComponents.ShadowElement {
          templateMarkup() {
            return n(534);
          }
          stylesheetMarkup() {
            return n(535);
          }
          constructor() {
            super(),
              (this._selectedSeries = ""),
              (this._selectedOuterRadius = "44px"),
              (this._selectedInnerRadius = "38px"),
              (this._dataBinding = (0, i.dataBinding)("/lol-missions", s)),
              (this._created = !0);
          }
          connectedCallback() {
            this.addEventListener("click", (e) => {
              i.Navigation.showTracker(this._selectedSeries);
            }),
              (this._selectedSeries = this.getAttribute("series")),
              (this._selectedOuterRadius = this.getAttribute("outerRadius")
                ? this.getAttribute("outerRadius")
                : this._selectedOuterRadius),
              (this._selectedInnerRadius = this.getAttribute("innerRadius")
                ? this.getAttribute("innerRadius")
                : this._selectedInnerRadius);
            const e = this.shadowRoot.querySelector(".series-button-container");
            e.style.setProperty("--outer-radius", this._selectedOuterRadius),
              e.style.setProperty("--inner-radius", this._selectedInnerRadius),
              this._dataBinding.observe(
                "/v1/series",
                this,
                this._handleSeriesChanged,
              ),
              this._dataBinding.observe(
                "/v1/missions",
                this,
                this._handleMissionsChanged,
              ),
              (this.shadowRoot.querySelector(
                ".series-tracker-label",
              ).innerHTML = i.tra.get("missions_series_button_text"));
          }
          disconnectedCallback() {
            this.removeEventListener("click", (e) => {
              i.Navigation.showTracker(this._selectedSeries);
            }),
              this._dataBinding.unobserve(this);
          }
          _handleMissionsChanged(e) {
            if (
              ((this._missions = e),
              !e ||
                !this._series ||
                0 === e.length ||
                0 === this._series.length ||
                !this._selectedSeriesNames)
            )
              return;
            this._seriesSeriesMissions = [];
            let t = 0;
            i.lodash.forEach(e, (e) => {
              ("" === this._selectedSeries ||
                "all_missions" === this._selectedSeries ||
                this._selectedSeriesNames.indexOf(e.seriesName) > -1) &&
                e.display &&
                e.display.locations.indexOf("LCU_TRACKER") > -1 &&
                (this._seriesSeriesMissions.push(e), e.isNew && t++);
            }),
              t > 0
                ? ((this.shadowRoot.querySelector(
                    ".series-tracker-reminder-label",
                  ).innerHTML = t),
                  this._removeClass("hidden", ".series-tracker-reminder-label"))
                : this._addClass("hidden", ".series-tracker-reminder-label");
          }
          _handleSeriesChanged(e) {
            if (
              ((this._series = e),
              !e ||
                !this._missions ||
                0 === e.length ||
                0 === this._missions.length)
            )
              return;
            this._selectedSeriesNames = [];
            const t = i.lodash.keyBy(this._series, "internalName");
            for (const e in t) {
              let n = t[e].parentInternalName;
              for (; t[n]; ) n = t[n].parentInternalName;
              ("" !== this._selectedSeries &&
                "all_missions" !== this._selectedSeries &&
                e !== this._selectedSeries &&
                n !== this._selectedSeries) ||
                this._selectedSeriesNames.push(e);
            }
            this._handleMissionsChanged(this._missions);
          }
          _updateType(e) {
            this._type = e;
          }
          static get observedAttributes() {
            return ["series", "type"];
          }
          attributeChangedCallback(e, t, n) {
            "series" === e
              ? ((this._selectedSeries = n),
                this._handleSeriesChanged(this._series))
              : "type" === e && this._updateType(n);
          }
          _addClass(e, t) {
            const n = this.shadowRoot.querySelector(t);
            n && !n.classList.contains(e) && n.classList.add(e);
          }
          _removeClass(e, t) {
            const n = this.shadowRoot.querySelector(t);
            n && n.classList.contains(e) && n.classList.remove(e);
          }
          _attachListener(e, t, n) {
            const i = this.shadowRoot.querySelector(e);
            i && i.addEventListener(t, n);
          }
          _detachListener(e, t, n) {
            const i = this.shadowRoot.querySelector(e);
            i && i.removeEventListener(t, n);
          }
        }
        o.tagName = "lol-parties-series-button";
        var a = o;
        t.default = a;
      },
      (e) => {
        "use strict";
        e.exports =
          '\ufeff<template id="lol-parties-template-series-button">\r\n\t<div class="series-button-container">\r\n        <div class="series-tracker-label"></div>\r\n\t\t<div class="series-tracker-button">\r\n        </div>\r\n\t\t<div class="series-tracker-reminder-label hidden"></div>\r\n\t</div>\r\n</template>\r\n';
      },
      (e, t, n) => {
        var i = n(497),
          s = n(498)(i);
        s.push([
          e.id,
          ':host .series-button-container .series-tracker-reminder-label {\n  font-family: var(--font-display);\n}\n:host .series-button-container .series-tracker-label {\n  font-family: var(--font-body);\n}\n:host .series-button-container .series-tracker-label,\n:host .series-button-container .series-tracker-reminder-label {\n  -webkit-user-select: none;\n}\n:host .series-button-container .series-tracker-label,\n:host .series-button-container .series-tracker-reminder-label {\n  font-kerning: normal;\n  -webkit-font-feature-settings: "kern" 1;\n  -webkit-font-smoothing: antialiased;\n}\n:host .series-button-container .series-tracker-reminder-label {\n  text-transform: uppercase;\n}\n:host .series-button-container .series-tracker-reminder-label:lang(ko-kr),\n:host .series-button-container .series-tracker-reminder-label:lang(ja-jp),\n:host .series-button-container .series-tracker-reminder-label:lang(tr-tr),\n:host .series-button-container .series-tracker-reminder-label:lang(el-gr),\n:host .series-button-container .series-tracker-reminder-label:lang(th-th),\n:host .series-button-container .series-tracker-reminder-label:lang(zh-tw) {\n  text-transform: none;\n}\n:host .series-button-container .series-tracker-reminder-label {\n  color: #f0e6d2;\n  font-size: 12px;\n  font-weight: 700;\n  line-height: 16px;\n  letter-spacing: 0.075em;\n}\n:host .series-button-container .series-tracker-reminder-label:lang(ja-jp) {\n  font-size: 13px;\n}\n:host .series-button-container .series-tracker-reminder-label:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host .series-button-container .series-tracker-label {\n  color: #a09b8c;\n  font-size: 12px;\n  font-weight: normal;\n  line-height: 16px;\n  letter-spacing: 0.1em;\n  -webkit-font-smoothing: subpixel-antialiased;\n}\n:host .series-button-container .series-tracker-label:lang(ja-jp) {\n  font-size: 13px;\n}\n:host .series-button-container .series-tracker-label:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host([type="simple"]) .series-button-container .series-tracker-label {\n  display: none;\n}\n:host([type="simple"]) .series-button-container .series-tracker-button {\n  transform: none;\n}\n:host([type="simple"]) .series-button-container .series-tracker-reminder-label {\n  transform: none;\n}\n:host {\n  height: 48px;\n}\n:host .series-button-container {\n  height: var(--outer-radius);\n  position: relative;\n  margin-right: 8px;\n  margin-top: 4px;\n  display: flex;\n  align-items: center;\n}\n:host .series-button-container .series-tracker-label {\n  height: 29px;\n  border-radius: 10px;\n  background: rgba(0,0,0,0.54);\n  text-align: right;\n  padding-right: 25px;\n  padding-left: 15px;\n  line-height: 29px;\n  flex: 0 0 auto;\n  cursor: pointer;\n}\n:host .series-button-container .series-tracker-button {\n  position: relative;\n  width: var(--outer-radius);\n  height: var(--outer-radius);\n  border: 1px solid rgba(0,0,0,0.35);\n  border-radius: 50%;\n  box-sizing: border-box;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background: linear-gradient(#c1a05e, #6c5228);\n  flex: 0 0 auto;\n  transform: translateX(-35%);\n  cursor: pointer;\n}\n:host .series-button-container .series-tracker-button::before {\n  content: "";\n  position: absolute;\n  width: var(--inner-radius);\n  height: var(--inner-radius);\n  box-sizing: border-box;\n  border: 1px solid rgba(0,0,0,0.35);\n  background-image: url("/lol-game-data/assets/ASSETS/UX/TFT/OutOfGame/Missions/SeriesIcons/series_icon.svg");\n  background-repeat: no-repeat;\n  background-position: center;\n  background-size: 45%;\n  background-color: #1e2328;\n  border-radius: 50%;\n}\n:host .series-button-container .series-tracker-reminder-label {\n  width: 21px;\n  height: 18px;\n  position: absolute;\n  background: #c89b3c;\n  border-radius: 4px;\n  right: -4px;\n  top: -4px;\n  font-size: 12px;\n  line-height: 18px;\n  letter-spacing: 0.03em;\n  text-align: center;\n  color: #000;\n  box-shadow: 0 0 0 #c89b3c;\n  animation: flash 1s infinite alternate;\n  transform: translateX(-35%);\n}\n:host .series-button-container .series-tracker-reminder-label.hidden {\n  opacity: 0;\n}\n@-moz-keyframes flash {\n  0% {\n    filter: brightness(100%);\n    box-shadow: 0 0 0 #c89b3c;\n  }\n  25% {\n    filter: brightness(100%);\n    box-shadow: 0 0 0 #c89b3c;\n  }\n  100% {\n    filter: brightness(125%);\n    box-shadow: 0 0 8px #c89b3c;\n  }\n}\n@-webkit-keyframes flash {\n  0% {\n    filter: brightness(100%);\n    box-shadow: 0 0 0 #c89b3c;\n  }\n  25% {\n    filter: brightness(100%);\n    box-shadow: 0 0 0 #c89b3c;\n  }\n  100% {\n    filter: brightness(125%);\n    box-shadow: 0 0 8px #c89b3c;\n  }\n}\n@-o-keyframes flash {\n  0% {\n    filter: brightness(100%);\n    box-shadow: 0 0 0 #c89b3c;\n  }\n  25% {\n    filter: brightness(100%);\n    box-shadow: 0 0 0 #c89b3c;\n  }\n  100% {\n    filter: brightness(125%);\n    box-shadow: 0 0 8px #c89b3c;\n  }\n}\n@keyframes flash {\n  0% {\n    filter: brightness(100%);\n    box-shadow: 0 0 0 #c89b3c;\n  }\n  25% {\n    filter: brightness(100%);\n    box-shadow: 0 0 0 #c89b3c;\n  }\n  100% {\n    filter: brightness(125%);\n    box-shadow: 0 0 8px #c89b3c;\n  }\n}\n:host .series-button-container:hover {\n  filter: brightness(125%);\n}\n:host .series-button-container:hover .series-tracker-reminder-label {\n  animation: none;\n}\n',
          "",
        ]),
          (e.exports = s);
      },
    ],
    __webpack_module_cache__ = {};
  function __webpack_require__(e) {
    var t = __webpack_module_cache__[e];
    if (void 0 !== t) return t.exports;
    var n = (__webpack_module_cache__[e] = { id: e, exports: {} });
    return (
      __webpack_modules__[e].call(n.exports, n, n.exports, __webpack_require__),
      n.exports
    );
  }
  (__webpack_require__.g = (function () {
    if ("object" == typeof globalThis) return globalThis;
    try {
      return this || new Function("return this")();
    } catch (e) {
      if ("object" == typeof window) return window;
    }
  })()),
    (__webpack_require__.r = (e) => {
      "undefined" != typeof Symbol &&
        Symbol.toStringTag &&
        Object.defineProperty(e, Symbol.toStringTag, { value: "Module" }),
        Object.defineProperty(e, "__esModule", { value: !0 });
    }),
    (__webpack_require__.p = "/fe/lol-parties/");
  var __webpack_exports__ = {};
  (() => {
    "use strict";
    var e = n(__webpack_require__(1)),
      t = n(__webpack_require__(2));
    function n(e) {
      return e && e.__esModule ? e : { default: e };
    }
    const i = "rcp-fe-lol-parties",
      s = document.currentScript.ownerDocument;
    const o = window.getPluginAnnounceEventName(i);
    s.addEventListener(
      o,
      function (n) {
        const o = n.registrationHandler;
        t.default.set(s),
          o((t) =>
            e.default
              .init(t, {
                Audio: (e) => e.get("rcp-fe-audio"),
                bluebird: (e) => e.get("rcp-fe-common-libs").getBluebird(3),
                ChampionStatistics: (e) =>
                  e.get("rcp-fe-lol-champion-statistics"),
                ComponentFactory: (e) =>
                  e.get("rcp-fe-common-libs").getComponentFactory("1"),
                dataBinding: (e) =>
                  e
                    .get("rcp-fe-common-libs")
                    .getDataBinding("rcp-fe-lol-parties"),
                Ember: (e) => e.get("rcp-fe-ember-libs").getEmber(),
                emberDataBinding: (e) =>
                  e
                    .get("rcp-fe-ember-libs")
                    .getEmberDataBinding("rcp-fe-lol-parties"),
                FlyoutManager: (e) =>
                  e.get("rcp-fe-lol-uikit").getFlyoutManager(),
                gsap: (e) => e.get("rcp-fe-common-libs").getGsap("1"),
                HomeRegistry: (e) =>
                  e.get("rcp-fe-lol-shared-components").getApi_HomeRegistry(),
                LeagueTierNames: (e) =>
                  e
                    .get("rcp-fe-lol-shared-components")
                    .getApi_LeagueTierNames(),
                lodash: (e) => e.get("rcp-fe-common-libs").getLodash(4),
                logger: (e) => e.get("rcp-fe-common-libs").logging.create(i),
                lottie: (e) => e.get("rcp-fe-common-libs").getLottie("1"),
                moment: (e) => e.get("rcp-fe-lol-l10n").moment(),
                Navigation: (e) => e.get("rcp-fe-lol-navigation"),
                pawApi: (e) => e.get("rcp-fe-lol-paw"),
                playerNames: (e) => e.get("rcp-fe-common-libs").playerNames,
                Router: (e) =>
                  e.get("rcp-fe-lol-shared-components").getApi_Router(),
                SharedChallengesConstants: (e) =>
                  e
                    .get("rcp-fe-lol-shared-components")
                    .getApi_SharedChallengesConstants(),
                SharedComponents: (e) => e.get("rcp-fe-lol-shared-components"),
                SharedEmberComponents: (e) =>
                  e
                    .get("rcp-fe-lol-shared-components")
                    .getSharedEmberComponents(),
                Telemetry: (e) => e.get("rcp-fe-common-libs").getTelemetry(1),
                tra: (e) =>
                  e
                    .get("rcp-fe-lol-l10n")
                    .tra()
                    .overlay("/fe/lol-l10n/trans.json")
                    .overlay("/fe/lol-parties/trans.json")
                    .overlay("/fe/lol-social/trans.json")
                    .overlay("/fe/lol-shared-components/trans.json")
                    .overlay("/fe/lol-shared-components/trans-challenges.json")
                    .overlay("/fe/lol-tft/trans.json")
                    .overlay("/fe/ember-libs/trans-loadouts-modal.json"),
                UIKit: (e) => e.get("rcp-fe-lol-uikit"),
                UXSettings: (e) =>
                  e.get("rcp-fe-lol-shared-components").getApi_UXSettings(),
                Viewport: (e) =>
                  e.get("rcp-fe-lol-shared-components").getApi_Viewport(),
                webComponents: (e) =>
                  e.get("rcp-fe-common-libs").getWebComponents(s),
              })
              .then(() =>
                e.default.add({
                  db: e.default.dataBinding.bindTo(t.getSocket()),
                  EmberApplicationFactory: (e) =>
                    e.get("rcp-fe-ember-libs").getEmberApplicationFactory(),
                  EmberAddons: (e) =>
                    e.get("rcp-fe-ember-libs").getSharedEmberAddons(),
                }),
              )
              .then(() => {
                t.getOptional("rcp-fe-lol-tft-team-planner").then(
                  (t) => {
                    e.default.TeamPlanner = t;
                  },
                  () => null,
                ),
                  t.getOptional("rcp-fe-lol-strawberry-hub").then(
                    (t) => {
                      (e.default.StrawberryModules = t.getStrawberryModules()),
                        (e.default.tra = e.default.tra.overlay(
                          "/fe/lol-strawberry-hub/trans.json",
                        ));
                    },
                    () => null,
                  );
              })
              .then(() => {
                const t = new (__webpack_require__(3))();
                e.default.add({ PartyAPI: t });
                __webpack_require__(493)();
                return (
                  e.default.HomeRegistry.resolvePartiesHandler(() => t.show()),
                  t
                );
              }),
          );
      },
      { once: !0 },
    );
  })();
})();
