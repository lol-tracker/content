(() => {
    var __webpack_modules__ = [, e => {
            "use strict";
            let t;

            function n() {
                return t || (console.error("The `provider` object has not been set, please do so by calling the `init` method."), null)
            }
            const s = {
                init: function(e, n) {
                    return t = e, this.add(n)
                },
                _getValue: function(e, n) {
                    let s;
                    return "function" == typeof n ? (s = n(t), s || console.warn("The function for key " + e + " returned a falsy value: ", s)) : "string" == typeof n ? (s = t.get(n), s || console.warn("The provider `get` invocation for the key " + e + " returned a falsy value: ", s)) : "object" == typeof n && (s = n), s
                },
                add: function(e) {
                    e = e || {};
                    const t = [],
                        n = this;
                    return Object.keys(e).forEach((function(s) {
                        const i = e[s],
                            o = n._getValue(s, i);
                        o && o.then ? (o.then((function(e) {
                            e || console.warn("The promise for the key " + s + " resolved with a falsy value: ", e), n._addValue(s, e)
                        })), t.push(o)) : n._addValue(s, o)
                    })), Promise.all(t)
                },
                _addValue: function(e, t) {
                    this[e] = t
                },
                provider: function() {
                    return console.error("The function `provider` has been deprecated, please use `getProvider`", (new Error).stack), n()
                },
                getProvider: function() {
                    return n()
                }
            };
            e.exports = s
        }, (e, t) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.default = void 0;
            var n = new class {
                constructor() {
                    this.subDoc = document
                }
                set(e) {
                    this.subDoc = e
                }
                get() {
                    return this.subDoc
                }
            };
            t.default = n
        }, (e, t, n) => {
            "use strict";
            var s = b(n(4)),
                i = b(n(11)),
                o = b(n(24)),
                a = b(n(30)),
                l = b(n(37)),
                r = b(n(40)),
                c = b(n(45)),
                m = b(n(51)),
                u = b(n(54)),
                d = b(n(57)),
                p = b(n(60)),
                h = b(n(63)),
                g = n(1);

            function b(e) {
                return e && e.__esModule ? e : {
                    default: e
                }
            }
            e.exports = function(e = document) {
                if (e.partiesElementsRegistered) return;
                const t = g.webComponents.registerCustomElementV1;
                t(s.default), t(a.default), t(o.default), t(i.default), t(l.default), t(r.default), t(c.default), t(m.default), t(u.default), t(d.default), t(p.default), t(h.default), e.partiesElementsRegistered = !0
            }
        }, (e, t, n) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.default = void 0;
            var s, i = function(e, t) {
                    if (!t && e && e.__esModule) return e;
                    if (null === e || "object" != typeof e && "function" != typeof e) return {
                        default: e
                    };
                    var n = a(t);
                    if (n && n.has(e)) return n.get(e);
                    var s = {},
                        i = Object.defineProperty && Object.getOwnPropertyDescriptor;
                    for (var o in e)
                        if ("default" !== o && Object.prototype.hasOwnProperty.call(e, o)) {
                            var l = i ? Object.getOwnPropertyDescriptor(e, o) : null;
                            l && (l.get || l.set) ? Object.defineProperty(s, o, l) : s[o] = e[o]
                        } s.default = e, n && n.set(e, s);
                    return s
                }(n(1)),
                o = (s = n(5)) && s.__esModule ? s : {
                    default: s
                };

            function a(e) {
                if ("function" != typeof WeakMap) return null;
                var t = new WeakMap,
                    n = new WeakMap;
                return (a = function(e) {
                    return e ? n : t
                })(e)
            }
            const l = i.default.getProvider().getSocket(),
                r = ["default", "tft"],
                c = "companions",
                m = "tft_map_skins",
                u = "tft_damage_skins",
                d = [c, m, u],
                p = ["right", "left", "top"],
                h = {
                    default: [c],
                    tft: [c, m, u]
                },
                g = {
                    companions: {
                        default: "/v1/inventories/default/companions",
                        tft: "/v1/inventories/tft/companions"
                    },
                    tft_map_skins: {
                        tft: "/v1/inventories/tft/map-skins"
                    },
                    tft_damage_skins: {
                        tft: "/v1/inventories/tft/damage-skins"
                    }
                },
                b = {
                    companions: "/v1/selection/companion",
                    tft_map_skins: "/v1/selection/tft-map-skin",
                    tft_damage_skins: "/v1/selection/tft-damage-skin"
                },
                f = i.UIKit.getModalManager();
            class y extends i.webComponents.ShadowElement {
                templateMarkup() {
                    return n(6)
                }
                stylesheetMarkup() {
                    return n(7)
                }
                constructor() {
                    super(), this._dataBinding = (0, i.dataBinding)("/lol-cosmetics", l), this._type = null, this._setName = "default", this._subscriber = null, this._showNoneOption = null, this._mouseOverHandler = this._handleMouseOver.bind(this), this._iconClickHandler = this._handleIconClick.bind(this), this._orientation = "left", this._selectedItemId = null, this._modal = null
                }
                connectedCallback() {
                    super.connectedCallback(), this.addEventListener("click", this._iconClickHandler), this.addEventListener("mouseover", this._mouseOverHandler), this._refreshInventoryBinding()
                }
                disconnectedCallback() {
                    super.disconnectedCallback(), this.removeEventListener("click", this._iconClickHandler), this.removeEventListener("mouseover", this._mouseOverHandler), this._dataBinding.unobserve(this)
                }
                static get observedAttributes() {
                    return ["type", "orientation", "set-name", "show-none"]
                }
                attributeChangedCallback(e, t, n) {
                    switch (e) {
                        case "type":
                            this._handleTypeChange(n);
                            break;
                        case "orientation":
                            this._handleOrientationChange(n);
                            break;
                        case "set-name":
                            this._handleSetNameChange(n);
                            break;
                        case "show-none":
                            this._handleShowNoneChange()
                    }
                }
                _handleOrientationChange(e) {
                    p.indexOf(e) < 0 || e === this._orientation || (this._orientation = e)
                }
                _handleTypeChange(e) {
                    d.indexOf(e) < 0 || e === this._type || (this._type = e, this._refreshInventoryBinding())
                }
                _handleSetNameChange(e) {
                    r.indexOf(e) < 0 || e === this._setName || (this._setName = e, this._refreshInventoryBinding())
                }
                _refreshInventoryBinding() {
                    this._dataBinding.unobserve(this), this._dataBinding.observe(g[this._type][this._setName], this, this._handleInventoryChanged)
                }
                _handleShowNoneChange() {
                    this._showNoneOption = this.hasAttribute("show-none"), this._updateModalShowNone(this._modal)
                }
                _updateModalShowNone(e) {
                    e && (this._showNoneOption ? e.setAttribute("show-none", "") : e.removeAttribute("show-none"))
                }
                _handleInventoryChanged(e) {
                    this._inventory = e, this._inventory && this._inventory.selectedLoadoutItem && this._inventory.selectedLoadoutItem !== this._selectedItemId && this._updateSelectedCompanion(this._inventory.selectedLoadoutItem)
                }
                _updateSelectedCompanion(e) {
                    this._selectedItemId = e.itemId;
                    const t = this._getIcon();
                    if (0 === e.itemId) {
                        const e = n(10);
                        t.style.backgroundImage = "url(" + e + ")", t.classList.add("none-icon")
                    } else t.style.backgroundImage = "url(" + e.loadoutsIcon + ")", t.classList.remove("none-icon")
                }
                _handleMouseOver() {
                    this._playSound(o.default.SFX_URLS.SFX_COMPANION_PICKER_HOVER)
                }
                _handleIconClick() {
                    this._initModal(), this._playSound(o.default.SFX_URLS.SFX_COMPANION_PICKER_CLICK)
                }
                _playSound(e) {
                    i.Audio.getChannel(o.default.SFX_CHANNEL).playSound(e)
                }
                _selectCompanion(e) {
                    this._updateSelectedCompanion(e), 0 === e.itemId || e.itemId === this._inventory.defaultItemId ? this._dataBinding.delete(b[this._type], e.itemId) : this._dataBinding.put(b[this._type], e.itemId)
                }
                _getIcon() {
                    return this.shadowRoot.querySelector("div.loadouts-icon")
                }
                _showRenderer() {
                    this._modal || (this._modal = document.createElement("lol-parties-loadouts-modal")), this._refreshInventoryBinding(), this._modal.setAttribute("set-name", this._setName), this._modal.setAttribute("types", h[this._setName]), this._modal.setAttribute("active-type", this._type), this._updateModalShowNone(this._modal), this._modalRoot = f.add({
                        type: "DialogAlert",
                        data: {
                            contents: this._modal,
                            dismissible: !0,
                            dismissibleType: "inside"
                        }
                    })
                }
                _initModal() {
                    this._showRenderer()
                }
            }
            y.tagName = "lol-parties-cosmetics-picker";
            var _ = y;
            t.default = _
        }, e => {
            "use strict";
            e.exports = {
                SFX_CHANNEL: "sfx-ui",
                SFX_URLS: {
                    SFX_UIKIT_CLICK_AND_SLIDE: "/fe/lol-uikit/sfx-uikit-click-and-slide.ogg",
                    SFX_SOC_UI_CLICK_GENERIC: "/fe/lol-parties/sfx-soc-ui-click-generic.ogg",
                    SFX_COMPANION_PICKER_HOVER: "/fe/lol-parties/sfx-uikit-grid-hover.ogg",
                    SFX_COMPANION_PICKER_CLICK: "/fe/lol-parties/sfx-uikit-grid-click.ogg",
                    SFX_LOADOUT_RARITY_CLICK: "/fe/lol-static-assets/sounds/sfx-loadout-rarity-button-click.ogg",
                    SFX_STAR_SHARDS_PURCHASE: "/fe/lol-parties/sfx-starshards-button-release.ogg",
                    SFX_STAR_SHARDS_SUCCESS: "/fe/lol-parties/sfx-starshards-success.ogg",
                    SFX_STAR_SHARDS_CELEBRATION: "/fe/lol-parties/sfx-celebrate-upgrade-littlelegend.ogg",
                    SFX_RADIALMENU_OPEN: "/fe/lol-parties/sfx-radialmenu-open.ogg",
                    SFX_RADIALMENU_ROLE_SELECT: "/fe/lol-parties/sfx-radialmenu-role-select.ogg",
                    SFX_RADIALMENU_ROLE_HOVER: "/fe/lol-parties/sfx-radialmenu-role-hover.ogg",
                    SFX_RADIALMENU_PRIMARY_CLOSE: "/fe/lol-parties/sfx-radialmenu-role-primary.ogg",
                    SFX_RADIALMENU_SECONDARY_CLOSE: "/fe/lol-parties/sfx-radialmenu-role-secondary.ogg",
                    SFX_FIND_MATCH_CLICK: "/fe/lol-parties/sfx-lobby-button-find-match-click.ogg",
                    SFX_FIND_MATCH_HOVER: "/fe/lol-parties/sfx-lobby-button-find-match-hover.ogg",
                    SFX_LOBBY_QUIT_CLICK: "/fe/lol-parties/sfx-lobby-button-quit-click.ogg",
                    SFX_LOBBY_QUIT_HOVER: "/fe/lol-parties/sfx-lobby-button-quit-hover.ogg",
                    SFX_GOLD_HOVER: "/fe/lol-uikit/sfx-uikit-button-gold-hover.ogg",
                    SFX_GOLD_CLICK: "/fe/lol-uikit/sfx-uikit-button-gold-click.ogg"
                }
            }
        }, e => {
            "use strict";
            e.exports = '<template id="lol-parties-template-cosmetics-picker">\r\n  <div class="loadouts-icon"></div>\r\n</template>\r\n'
        }, (e, t, n) => {
            var s = n(8),
                i = n(9)(s);
            i.push([e.id, ":host {\n  --rcp-fe-lol-parties-cosmetics-picker-border-width: 2px;\n}\n:host {\n  display: block;\n}\n:host .loadouts-icon {\n  box-sizing: border-box;\n  border-width: var(--rcp-fe-lol-parties-cosmetics-picker-border-width);\n  border-style: solid;\n  border-color: #f0e6d2;\n  width: 100%;\n  height: 100%;\n  background-size: cover;\n  background-position: center;\n  background-repeat: no-repeat;\n  cursor: pointer;\n  box-shadow: inset 0 0 0 1px rgba(0,0,0,0.5);\n  border-image: linear-gradient(to bottom, #c89b3c, #785a28) 2;\n}\n:host .loadouts-icon.none-icon {\n  background-size: 50%;\n}\n:host .loadouts-icon:hover {\n  -webkit-filter: brightness(110%);\n  border-image: linear-gradient(to bottom, #f0e6d2, #c89b3c) 1;\n}\n", ""]), e.exports = i
        }, e => {
            "use strict";
            e.exports = function(e) {
                return e[1]
            }
        }, e => {
            "use strict";
            e.exports = function(e) {
                var t = [];
                return t.toString = function() {
                    return this.map((function(t) {
                        var n = "",
                            s = void 0 !== t[5];
                        return t[4] && (n += "@supports (".concat(t[4], ") {")), t[2] && (n += "@media ".concat(t[2], " {")), s && (n += "@layer".concat(t[5].length > 0 ? " ".concat(t[5]) : "", " {")), n += e(t), s && (n += "}"), t[2] && (n += "}"), t[4] && (n += "}"), n
                    })).join("")
                }, t.i = function(e, n, s, i, o) {
                    "string" == typeof e && (e = [
                        [null, e, void 0]
                    ]);
                    var a = {};
                    if (s)
                        for (var l = 0; l < this.length; l++) {
                            var r = this[l][0];
                            null != r && (a[r] = !0)
                        }
                    for (var c = 0; c < e.length; c++) {
                        var m = [].concat(e[c]);
                        s && a[m[0]] || (void 0 !== o && (void 0 === m[5] || (m[1] = "@layer".concat(m[5].length > 0 ? " ".concat(m[5]) : "", " {").concat(m[1], "}")), m[5] = o), n && (m[2] ? (m[1] = "@media ".concat(m[2], " {").concat(m[1], "}"), m[2] = n) : m[2] = n), i && (m[4] ? (m[1] = "@supports (".concat(m[4], ") {").concat(m[1], "}"), m[4] = i) : m[4] = "".concat(i)), t.push(m))
                    }
                }, t
            }
        }, (e, t, n) => {
            "use strict";
            e.exports = n.p + "companion_icon.svg"
        }, (e, t, n) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.default = void 0;
            var s, i = function(e, t) {
                    if (!t && e && e.__esModule) return e;
                    if (null === e || "object" != typeof e && "function" != typeof e) return {
                        default: e
                    };
                    var n = a(t);
                    if (n && n.has(e)) return n.get(e);
                    var s = {},
                        i = Object.defineProperty && Object.getOwnPropertyDescriptor;
                    for (var o in e)
                        if ("default" !== o && Object.prototype.hasOwnProperty.call(e, o)) {
                            var l = i ? Object.getOwnPropertyDescriptor(e, o) : null;
                            l && (l.get || l.set) ? Object.defineProperty(s, o, l) : s[o] = e[o]
                        } s.default = e, n && n.set(e, s);
                    return s
                }(n(1)),
                o = (s = n(12)) && s.__esModule ? s : {
                    default: s
                };

            function a(e) {
                if ("function" != typeof WeakMap) return null;
                var t = new WeakMap,
                    n = new WeakMap;
                return (a = function(e) {
                    return e ? n : t
                })(e)
            }
            const l = i.default.getProvider().getSocket(),
                r = "sfx-ui";
            class c extends i.webComponents.ShadowElement {
                templateMarkup() {
                    return n(22)
                }
                stylesheetMarkup() {
                    return n(23)
                }
                constructor() {
                    super(), this._cachedInviteIds = [], this._patcherState = null, this._settings = null, this._listeners = {}, this._listeners.onClickClearAll = this._onClickClearAll.bind(this), this._listeners.onUXSettingsChange = this._updateUXSettings.bind(this), this._patcherConnected = !0, i.Navigation.subscribe("isConnectedToServer", this._updatePatcherConnected.bind(this)), this._lobbyBinding = (0, i.dataBinding)("/lol-lobby", l), this._patcherBinding = (0, i.dataBinding)("/patcher", l), this._chatBinding = (0, i.dataBinding)("/lol-chat", l), this._settingsBinding = (0, i.dataBinding)("/lol-settings", l), this._observePatcher(), this._observeSettings(), this._observeCurrentPlayerChat(), this._observeUXSettings()
                }
                connectedCallback() {
                    super.connectedCallback();
                    const e = this._clearAllElement();
                    e && e.addEventListener("click", this._listeners.onClickClearAll);
                    const t = this.shadowRoot.querySelector(".parties-game-invite-heading-text");
                    t && i.tra.ready().then((() => {
                        t.innerHTML = i.tra.get("parties_group_label_game_invites")
                    })), this._assignClearAllTooltip(), this._observeUXSettings()
                }
                disconnectedCallback() {
                    super.disconnectedCallback();
                    const e = this._clearAllElement();
                    e && e.removeEventListener("click", this._listeners.onClickClearAll), this._unassignClearAllTooltip(), this._unobserveUXSettings()
                }
                updateGameSearch(e) {
                    this._gameSearch = e, e ? this._hide() : this._haveInvites() && this._show(), this._updateGameInviteElements(this._gameSearch, "updateGameSearch")
                }
                _show() {
                    this.classList.remove("parties-game-invites-hide")
                }
                _hide() {
                    this.classList.add("parties-game-invites-hide")
                }
                _observeUXSettings() {
                    this._UXObserverAttached || (i.UXSettings.addObserver(this._listeners.onUXSettingsChange), this._UXObserverAttached = !0)
                }
                _unobserveUXSettings() {
                    this._UXObserverAttached && (i.UXSettings.removeObserver(this._listeners.onUXSettingsChange), this._UXObserverAttached = !1)
                }
                _observeCurrentPlayerChat() {
                    this._chatBinding.observe("/v1/me", (e => {
                        e && (this._currentPlayerChat = e, this._updateGameInviteElements(this._currentPlayerChat, "updateCurrentPlayerChat"))
                    }))
                }
                _observeSettings() {
                    this._settingsBinding.observe("/v2/account/LCUPreferences/lol-chat", (e => {
                        e && (this._chatSettings = e, this._updateGameInviteElements(this._chatSettings, "updateChatSettings"))
                    }))
                }
                _observePatcher() {
                    this._patcherBinding.observe("/v1/products/league_of_legends/state", (e => {
                        this._patcherState = e, this._updateGameInviteElements(this._patcherState, "updatePatcherState")
                    }))
                }
                onGameInvitesChanged(e) {
                    if (this._showHideOnInvites(e), !e || 0 === e.length) return this._haveInvites() && (this._cachedInviteIds.forEach((e => {
                        this._removeGameInviteElement(e)
                    })), this._cachedInviteIds = []), void this._hide();
                    this._gameSearch || this._show(), this._expireGameInvites(e);
                    const t = this._cachedInviteIds,
                        n = this._updateGameInvites(e, t),
                        s = this._addNewGameInvites(e, t);
                    this._cachedInviteIds = this._getInviteIds(n.concat(s)), this._updateGameInviteCount()
                }
                _updateGameInvites(e, t) {
                    const n = e.filter((function(e) {
                        return -1 !== t.indexOf(e.invitationId)
                    }));
                    return n && n.length > 0 && n.forEach((e => {
                        const t = this.shadowRoot.getElementById(e.invitationId);
                        t && t.updateGameInvite(e)
                    })), n
                }
                _addNewGameInvites(e, t) {
                    const n = e.filter((function(e) {
                        return -1 === t.indexOf(e.invitationId)
                    }));
                    return n && n.length > 0 && (this._playGameInviteSound(), n.sort(this._gameInviteSort.bind(this)), this._addGameInviteElements(n)), n
                }
                _onClickClearAll() {
                    if (this._haveInvites()) {
                        const e = this._cachedInviteIds.length;
                        this._playClickSound();
                        for (let t = e - 1; t >= 0; t--) this._declineGameInvite(this._cachedInviteIds[t])
                    }
                }
                _declineGameInvite(e) {
                    e && this._lobbyBinding.post(`/v2/received-invitations/${e}/decline`)
                }
                _playClickSound() {
                    i.Audio.getChannel(r).playSound("/fe/lol-parties/sfx-soc-ui-click-generic.ogg")
                }
                _playGameInviteSound() {
                    i.Audio.getChannel(r).playSound("/fe/lol-social/sounds/sfx-soc-notif-gameinvite-rcvd.ogg")
                }
                _showHideOnInvites(e) {
                    this._clearAllButtonVisibility(e), this._inviteCountVisibility(e)
                }
                _inviteCountVisibility(e) {
                    const t = this._inviteCountElement();
                    t && e && e.length > 1 ? t.classList.remove("parties-hide-game-invite-count") : t && t.classList.add("parties-hide-game-invite-count")
                }
                _clearAllButtonVisibility(e) {
                    const t = this._clearAllElement();
                    t && e && e.length > 1 ? t.classList.remove("parties-hide-clear-all") : t && t.classList.add("parties-hide-clear-all")
                }
                _expireGameInvites(e) {
                    if (!this._cachedInviteIds || 0 === this._cachedInviteIds.length) return;
                    const t = this._getInviteIds(e),
                        n = this._cachedInviteIds.filter((e => -1 === t.indexOf(e)));
                    n.forEach((e => {
                        this._removeGameInviteElement(e)
                    }));
                    const s = this._cachedInviteIds.filter((e => -1 === n.indexOf(e)));
                    this._cachedInviteIds = s
                }
                _removeGameInviteElement(e) {
                    const t = this.shadowRoot.getElementById(e);
                    t && t.remove()
                }
                _getInviteIds(e) {
                    return e.reduce(((e, t) => (t.invitationId && e.push(t.invitationId), e)), [])
                }
                _gameInviteSort(e, t) {
                    const n = o.default.isReadyForGame(this._patcherState),
                        s = this._gameInviteAcceptable(e, n),
                        a = this._gameInviteAcceptable(t, n) - s;
                    return a || i.tra.moment(t.timestamp) - i.tra.moment(e.timestamp)
                }
                _gameInviteAcceptable(e, t) {
                    return o.default.isGameInviteAcceptable(e, this._chatSettings, this._currentPlayerChat, this._patcherConnected, t)
                }
                _gameInvitesById(e) {
                    let t = {};
                    return e && e.length > 0 && (t = e.reduce(((e, t) => {
                        const n = t.invitationId;
                        return n && e && (e[n] = t), e
                    }), {})), t
                }
                _updatePatcherConnected(e) {
                    this._patcherConnected = e, this._updateGameInviteElements(e, "updatePatcherConnected")
                }
                _updateGameInviteElements(e, t) {
                    if (this._haveInvites()) {
                        this._cachedInviteIds.forEach((n => {
                            const s = this.shadowRoot.getElementById(n);
                            s && s[t](e)
                        }))
                    }
                }
                _addGameInviteElements(e) {
                    e.forEach((e => {
                        this._addGameInviteElement(e)
                    }))
                }
                _addGameInviteElement(e) {
                    const t = this._createNewGameInviteElement(),
                        n = this._gameInvitesContainerElement();
                    if (n && t && e && e.invitationId) {
                        t.id = e.invitationId, t.updateGameInvite(e), t.updatePatcherState(this._patcherState), t.updatePatcherConnected(this._patcherConnected), t.updateChatSettings(this._chatSettings), t.updateCurrentPlayerChat(this._currentPlayerChat), t.updateUXSettings(this._uxSettings);
                        const s = n.querySelector("lol-parties-game-invite");
                        n.insertBefore(t, s)
                    }
                }
                _createNewGameInviteElement() {
                    return document.createElement("lol-parties-game-invite")
                }
                _assignClearAllTooltip() {
                    const e = this._clearAllElement();
                    if (e) {
                        const t = i.UIKit.getTooltipManager(),
                            n = document.createElement("lol-uikit-tooltip"),
                            s = i.tra.get("parties_tooltip_decline_all"),
                            o = document.createElement("lol-uikit-content-block");
                        o.setAttribute("type", "tooltip-system");
                        const a = document.createElement("p");
                        a.innerHTML = s, o.appendChild(a), n.setAttribute("position", "left"), n.appendChild(o);
                        const l = {
                            type: "dialog-small",
                            showDelay: 0,
                            targetAnchor: {
                                x: "left",
                                y: "center"
                            },
                            tooltipAnchor: {
                                x: "right",
                                y: "center"
                            }
                        };
                        t.assign(e, n, {}, l)
                    }
                }
                _unassignClearAllTooltip() {
                    const e = this._clearAllElement();
                    i.UIKit.getTooltipManager().unassign(e)
                }
                _updateGameInviteCount() {
                    const e = this._cachedInviteIds ? this._cachedInviteIds : [],
                        t = this._inviteCountElement();
                    t && (t.innerHTML = `(${e.length})`)
                }
                _updateUXSettings(e) {
                    this._uxSettings = e, this._updateGameInviteElements(this._uxSettings, "updateUXSettings")
                }
                _inviteCountElement() {
                    return this.shadowRoot.querySelector(".parties-game-invite-count")
                }
                _clearAllElement() {
                    return this.shadowRoot.querySelector(".parties-clear-all-button")
                }
                _gameInvitesContainerElement() {
                    return this.shadowRoot.querySelector(".parties-game-invites")
                }
                _haveInvites() {
                    return !!(this._cachedInviteIds && this._cachedInviteIds.length > 0)
                }
            }
            c.tagName = "lol-parties-game-invites";
            var m = c;
            t.default = m
        }, (e, t, n) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.default = void 0;
            var s, i = n(1),
                o = (s = n(13)) && s.__esModule ? s : {
                    default: s
                },
                a = n(21);
            var l = {
                isGameInviteAcceptable: function(e, t, n, s, i) {
                    if (e && e.gameConfig && s) {
                        const s = !!n && "dnd" !== n.availability,
                            o = !!t && t.bypassEligibilityCheck;
                        return i && s && "Pending" === e.state && (o || e.canAcceptInvitation)
                    }
                    return !1
                },
                isReadyForGame: function(e) {
                    const t = e || {},
                        n = "Patching" === t.action || "Repairing" === t.action,
                        s = !t.isUpToDate && "CheckingForUpdates" === t.action;
                    return !n && !s
                },
                gameType: function(e) {
                    if (e) {
                        if (a.CUSTOM_GAME_TYPES.indexOf(e.inviteGameType) > -1) return i.tra.get("parties_game_type_practice");
                        const t = o.default.getMapModeInfo(e.mapId, e.gameMode);
                        if (t && t.isRGM) return i.tra.get("parties_game_type_featured");
                        const n = o.default.getQueueById(e.queueId);
                        return n ? n.category === a.BOT_GAME_TYPE ? i.tra.get("parties_game_type_coop_vs_ai") : n.description : ""
                    }
                },
                mapKey: function(e) {
                    if (e) {
                        const t = o.default.getMapModeInfo(e.mapId, e.gameMode);
                        return t && t.isRGM ? "game_map_rotating_game_mode" : a.MAP_TO_I18N_KEY[e.mapId]
                    }
                }
            };
            t.default = l
        }, (e, t, n) => {
            "use strict";
            var s;
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.default = void 0;
            var i = ((s = n(14)) && s.__esModule ? s : {
                default: s
            }).default.create();
            t.default = i
        }, (e, t, n) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.default = void 0;
            var s = n(1),
                i = n(15),
                o = l(n(16)),
                a = l(n(19));

            function l(e) {
                return e && e.__esModule ? e : {
                    default: e
                }
            }
            const r = (0, s.getProvider)().getSocket(),
                c = (0, s.dataBinding)("/lol-maps", r),
                m = (0, s.dataBinding)("/lol-game-queues", r),
                u = (0, s.dataBinding)("/lol-client-config", r);
            var d = s.Ember.Object.extend({
                init() {
                    this._super(...arguments), this._initObservers()
                },
                willDestroy() {
                    this._super(...arguments), c.unobserve(this), m.unobserve(this), u.unobserve(this)
                },
                _initObservers() {
                    c.observe("/v2/maps", this, (e => {
                        !e || this.isDestroying || this.isDestroyed || this.set("mapsPlatformJson", e)
                    })), m.observe("/v1/queues", this, (e => {
                        !e || this.isDestroying || this.isDestroyed || this.set("platformJson", e)
                    })), u.observe("/v3/client-config/lol.client_settings.queues.use_operational_config", this, (e => {
                        this.isDestroying || this.isDestroyed || this.set("useOperationalConfigs", e)
                    })), u.observe("/v3/client-config/operational/operational.queue.order", this, (e => {
                        !e || this.isDestroying || this.isDestroyed || this.set("orderedQueueIds", this._splitQueues(e))
                    }))
                },
                platformConfigSingleton: o.default,
                eligibilitiesSingleton: a.default,
                platformEnabledQueues: s.Ember.computed.alias("platformConfigSingleton.enabledGameQueues"),
                gameSelectEligibilityHash: s.Ember.computed.alias("eligibilitiesSingleton.gameSelectEligibilityHash"),
                tutorialFlowEnabled: s.Ember.computed.alias("platformConfigSingleton.tutorialFlowEnabled"),
                disabledRgmButtonEnabled: s.Ember.computed.alias("platformConfigSingleton.disabledRgmButtonEnabled"),
                platformJson: {},
                defaultMapsInfo: {},
                allMapsInfo: [],
                queuesById: {},
                queuesByCategory: {},
                useOperationalConfigs: null,
                availableQueues: {},
                availableQueueIds: s.Ember.A(),
                orderedQueueIds: s.Ember.A(),
                mapsPlatformJson: s.Ember.computed({
                    set: function(e, t) {
                        if (!t || !t.reduce) return;
                        this.set("allMapsInfo", t);
                        const n = t.reduce(((e, t) => (t.isDefault && (e[t.id] = t), e)), {});
                        this.set("defaultMapsInfo", n)
                    }
                }),
                queuesChangedObserver: s.Ember.observer("allMapsInfo", "platformJson", "platformEnabledQueues", "useOperationalConfigs", "disabledRgmButtonEnabled", "gameSelectEligibilityHash", (function() {
                    const e = {},
                        t = {},
                        n = {},
                        o = [],
                        a = this.get("platformEnabledQueues"),
                        l = this.get("useOperationalConfigs"),
                        r = this.get("platformJson");
                    if (!r || !r.length) return;
                    let c = !1;
                    if (r.forEach((s => {
                            const r = s.id,
                                {
                                    category: m
                                } = s,
                                {
                                    mapId: u
                                } = s,
                                {
                                    gameMode: d
                                } = s,
                                {
                                    assetMutator: p
                                } = s,
                                {
                                    isVisible: h
                                } = s,
                                g = this.getGameType(u, d);
                            t[m] = t[m] ? t[m] : {}, t[m][g] || (t[m][g] = {
                                mapId: u,
                                gameMode: d,
                                assetMutator: p,
                                queues: []
                            }), t[m][g].queues.push(r);
                            const b = l ? h : -1 !== a.indexOf(r),
                                f = s.queueAvailability === i.QUEUE_AVAILABILITY.enabled;
                            if (b && f) {
                                const e = this.getMapModeInfo(u, d);
                                !c && e && e.isRGM && (c = !0), n[m] = n[m] ? n[m] : {}, n[m][g] || (n[m][g] = {
                                    mapId: u,
                                    gameMode: d,
                                    assetMutator: p,
                                    queues: []
                                }), n[m][g].queues.push(r), o.push(r)
                            }
                            s.available = f, e[r] = s
                        })), this.get("disabledRgmButtonEnabled") && !c && n[i.CATEGORY_NAMES.PVP]) {
                        const e = this.getGameType(i.DISABLED_RGM_GAME_TYPE.mapId, i.DISABLED_RGM_GAME_TYPE.gameMode);
                        n[i.CATEGORY_NAMES.PVP][e] = i.DISABLED_RGM_GAME_TYPE
                    }
                    this.set("queuesById", e), this.set("queuesByCategory", t), this.set("availableQueues", n), this.set("availableQueueIds", s.Ember.A(o))
                })),
                getPickTypeForQueue: function(e) {
                    const t = this.get("queuesById");
                    if (!t || !t[e]) return "";
                    const n = t[e].gameTypeConfig.pickMode;
                    return i.PICK_TYPES[n] ? i.PICK_TYPES[n] : ""
                },
                getQueueTypeForQueue: function(e) {
                    const t = this.get("queuesById");
                    return t && t[e] ? t[e].type : ""
                },
                getMapInfoById: function(e) {
                    return this.defaultMapsInfo[e]
                },
                getMapModeInfo: function(e, t, n) {
                    const s = this.get("allMapsInfo").find((n => n.id === e && n.gameMode === t));
                    if (n && s && s.isRGM) {
                        const e = this.get("queuesById");
                        e[n] && (s.gameModeShortName = e[n].shortName)
                    }
                    return s
                },
                getQueueById: function(e) {
                    return this.queuesById[e]
                },
                getQueuesByCategory: function(e) {
                    const t = this.get("queuesByCategory");
                    return t[e] ? t[e] : null
                },
                getTutorialQueues: function() {
                    return i.TUTORIAL_GAME_TYPES
                },
                getAllAvailableGameTypesForCategory: function(e) {
                    if ("Training" === e) return this.getTutorialQueues();
                    const t = this.get("availableQueues"),
                        n = [];
                    let s = {};
                    t[e] && (s = t[e]);
                    for (const e in s) n.push(s[e]);
                    return this._sortGameTypes(n), n
                },
                _sortGameTypes: function(e) {
                    e.sort(((e, t) => {
                        let n = this._compareGameMode(e, t, "CLASSIC");
                        return 0 === n && (n = this._compareGameMode(e, t, "ARAM")), 0 === n && (n = this._compareGameMode(e, t, "TFT")), n
                    }))
                },
                _compareGameMode: function(e, t, n) {
                    if (e.gameMode === n) {
                        if (t.gameMode !== n) return -1
                    } else if (t.gameMode === n) return 1;
                    return 0
                },
                getFlatQueuesByCategory: function(e) {
                    const t = this.getQueuesByCategory(e) || [],
                        n = Object.keys(t).map((e => t[e].queues));
                    return [].concat(...n)
                },
                getAllQueuesForCategoryAndGameType: function(e, t, n) {
                    let s = [];
                    const i = this.get("queuesByCategory"),
                        o = this.getGameType(t, n);
                    return i[e] && i[e][o] && (s = i[e][o].queues), this._sortQueuesPlaceDefaultsFirst(s), s
                },
                getAvailableQueuesForCategoryAndGameType: function(e, t, n) {
                    let s = [];
                    if ("Training" === e && this.get("tutorialFlowEnabled")) return i.TUTORIAL_QUEUE_IDS;
                    const o = this.get("availableQueues"),
                        a = this.getGameType(t, n);
                    return o[e] && o[e][a] && o[e][a].queues && (s = o[e][a].queues), this._sortQueuesPlaceDefaultsFirst(s), s
                },
                _sortQueuesPlaceDefaultsFirst: function(e) {
                    const t = this.get("useOperationalConfigs") ? this.get("orderedQueueIds") : this.platformConfigSingleton.get("defaultGameQueues");
                    if (t) return e.sort((function(e, n) {
                        const s = t.indexOf(e),
                            i = t.indexOf(n);
                        return s > -1 ? i > -1 ? s - i : -1 : i > -1 ? 1 : 0
                    }))
                },
                _splitQueues: function(e) {
                    const t = e ? `${e}`.split(",") : [],
                        n = [];
                    return t.forEach((e => {
                        n.push(parseInt(e, 10))
                    })), s.Ember.A(n)
                },
                getDefaultQueueForCategory: function(e) {
                    const t = this.get("availableQueues");
                    if (t[e]) {
                        const n = s.lodash.keys(t[e])[0];
                        return t[e][n].queues[0]
                    }
                    return null
                },
                categoryHasQueues: function(e) {
                    return !!this.get("availableQueues")[e]
                },
                getGameType: function(e, t) {
                    return e + "-" + t
                }
            });
            t.default = d
        }, (e, t) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.TUTORIAL_TYPE_MAPS = t.TUTORIAL_QUEUE_IDS = t.TUTORIAL_GAME_TYPES = t.TRAINING_TYPES = t.TFT_TUTORIAL_QUEUE_ID = t.TFT_RANKED_QUEUE_ID = t.TFT_NPE_QUEUE_ID = t.TFT_NORMAL_QUEUE_ID = t.TFT_NEW_PLAYER_RESTRICTION = t.TFT_HYPER_ROLL_QUEUE_IDS = t.TFT_DOUBLE_UP_QUEUE_ID = t.TFT_CUSTOM_QUEUE_IDS = t.TFT_AVAILABLE_NPE_QUEUE_IDS = t.TENCENT_MINOR_RESTRICTIONS = t.QUEUE_TYPE = t.QUEUE_AVAILABILITY = t.PICK_TYPES = t.PAIRS_QUEUE_IDS = t.ONE_PAGE_TUTORIAL_LONG_CARD_LAYOUT_GAME_MODES = t.ONE_PAGE_TUTORIAL_GAME_MODES = t.NPE_FIRST_TOUCH_QUEUE_SELECT_ID = t.MULTI_TEAM_GAME_MODES = t.MISSING_TOKEN_ERRORS = t.INVALID_QUEUE_ID = t.GAME_MODES = t.DISABLED_RGM_GAME_TYPE = t.DEFAULT_TFT_QUEUE_ID = t.DEFAULT_QUEUE_ID = t.CATEGORY_NAMES = t.CATEGORIES_DISPLAY_ORDER = void 0;
            t.PICK_TYPES = {
                SimulPickStrategy: "blind",
                DraftModeSinglePickStrategy: "draft",
                TeamBuilderDraftPickStrategy: "draft",
                AllRandomPickStrategy: "random",
                TournamentPickStrategy: "tournament",
                OneTeamVotePickStrategy: "vote"
            };
            t.QUEUE_AVAILABILITY = {
                enabled: "Available",
                disabled: "PlatformDisabled"
            };
            t.QUEUE_TYPE = {
                RANKED_FLEX_SR: "RANKED_FLEX_SR",
                RANKED_SOLO_5x5: "RANKED_SOLO_5x5"
            };
            const n = {
                PVP: "PvP",
                VERSUSAI: "VersusAi",
                TRAINING: "Training"
            };
            t.CATEGORY_NAMES = n;
            const s = {
                primary: [n.PVP, n.VERSUSAI, n.TRAINING],
                secondary: ["CreateCustom", "JoinCustom"]
            };
            t.CATEGORIES_DISPLAY_ORDER = s;
            t.TUTORIAL_GAME_TYPES = [{
                mapId: 11,
                gameMode: "TUTORIAL_FLOW",
                requiresCustomGameSubCategory: !1,
                queues: []
            }, {
                mapId: 11,
                gameMode: "PRACTICETOOL",
                requiresCustomGameSubCategory: !0,
                queues: []
            }];
            t.TUTORIAL_TYPE_MAPS = {
                BASIC_TUTORIAL: 12,
                BATTLE_TRAINING: 11,
                TUTORIAL_FLOW: 11,
                PRACTICETOOL: 11,
                CLASSIC: 11
            };
            t.DISABLED_RGM_GAME_TYPE = {
                mapId: 11,
                gameMode: "LCURGMDISABLED",
                requiresCustomGameSubCategory: !1,
                queues: []
            };
            t.DEFAULT_QUEUE_ID = 31;
            t.DEFAULT_TFT_QUEUE_ID = 1090;
            t.INVALID_QUEUE_ID = -1;
            t.GAME_MODES = {
                TFT: "TFT",
                CLASSIC: "CLASSIC"
            };
            t.TFT_CUSTOM_QUEUE_IDS = {
                100: 3e3,
                101: 3010
            };
            t.ONE_PAGE_TUTORIAL_GAME_MODES = ["TFT", "CHERRY"];
            t.ONE_PAGE_TUTORIAL_LONG_CARD_LAYOUT_GAME_MODES = ["CHERRY"];
            t.MULTI_TEAM_GAME_MODES = ["CHERRY"];
            t.NPE_FIRST_TOUCH_QUEUE_SELECT_ID = {
                TFT: "teamfight",
                SR: "summonersrift"
            };
            t.TRAINING_TYPES = {
                PRACTICE_TOOL: "PRACTICETOOL",
                TUTORIAL: "TUTORIAL_FLOW"
            };
            t.MISSING_TOKEN_ERRORS = ["BanInfoNotAvailable", "MinorInfoNotAvailable", "LeaguesInfoNotAvailable", "SummonerInfoNotAvailable", "InventoryChampsInfoNotAvailable", "InventoryQueuesInfoNotAvailable"];
            t.TENCENT_MINOR_RESTRICTIONS = ["PlayerMinorRestriction", "PlayerTimePlayedRestriction"];
            t.TFT_NEW_PLAYER_RESTRICTION = "TFTNewPlayerRestriction";
            t.TUTORIAL_QUEUE_IDS = [2e3, 2010, 2020];
            t.PAIRS_QUEUE_IDS = [1140, 1141, 1142, 1143, 1150, 1151, 1152, 1160, 1161, 1162];
            t.TFT_HYPER_ROLL_QUEUE_IDS = [1120, 1121, 1122, 1130, 1131, 1132];
            t.TFT_RANKED_QUEUE_ID = 1100;
            t.TFT_NORMAL_QUEUE_ID = 1090;
            t.TFT_NPE_QUEUE_ID = 2200;
            t.TFT_TUTORIAL_QUEUE_ID = 1110;
            t.TFT_DOUBLE_UP_QUEUE_ID = 1160;
            const i = [1090, 2200, 1110];
            t.TFT_AVAILABLE_NPE_QUEUE_IDS = i
        }, (e, t, n) => {
            "use strict";
            var s;
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.default = void 0;
            var i = ((s = n(17)) && s.__esModule ? s : {
                default: s
            }).default.create();
            t.default = i
        }, (e, t, n) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.default = void 0;
            var s = n(1),
                i = n(18);
            const o = Object.freeze({
                    LcuLobbyPotatoModeForced: !1,
                    LcuSocialDefaultGameQueues: "2,33,32,31",
                    LcuSocialEnabledGameQueues: "2,400,420,440,8,9,65,33,32,31,800,810,820",
                    LcuSocialAggressiveScanning: !1,
                    LcuTutorialEnabled: !0,
                    LcuTutorialNewEnabled: !1,
                    QueueRestrictionAllowablePremadeSizesForQueueId440: "1,2,3,4,5",
                    QueueRewardsSoloAutoFillProtectionForQueueId440: !1,
                    QueueRewardsSoloIpRewardsForQueueId440: !1,
                    FeaturedModesDisabledRgmButtonEnabled: !0,
                    FeaturedModesGoldenSpatulaClubDisabled: !1,
                    MutatorsEnabledModes: [],
                    EosTextEnabled: !1,
                    EternalsEnabled: !1,
                    ChallengesClientState: i.CHALLENGES_CLIENT_STATES.HIDDEN
                }),
                a = (0, s.emberDataBinding)({
                    Ember: s.Ember,
                    websocket: (0, s.getProvider)().getSocket(),
                    logPrefix: "plugin:parties:platform-config-singleton",
                    basePaths: {
                        platformConfig: "/lol-platform-config"
                    },
                    boundProperties: {
                        LcuLobbyPotatoModeForced: {
                            api: "platformConfig",
                            path: "/v1/namespaces/LcuLobby/PotatoModeForced"
                        },
                        LcuSocialDefaultGameQueues: {
                            api: "platformConfig",
                            path: "/v1/namespaces/LcuSocial/DefaultGameQueues"
                        },
                        LcuSocialEnabledGameQueues: {
                            api: "platformConfig",
                            path: "/v1/namespaces/LcuSocial/EnabledGameQueues"
                        },
                        LcuSocialAggressiveScanning: {
                            api: "platformConfig",
                            path: "/v1/namespaces/LcuSocial/AggressiveScanning"
                        },
                        LcuTutorialEnabled: {
                            api: "platformConfig",
                            path: "/v1/namespaces/LcuTutorial/Enabled"
                        },
                        LcuTutorialNewEnabled: {
                            api: "platformConfig",
                            path: "/v1/namespaces/LcuTutorial/NewPlayerExperienceEnabled"
                        },
                        QueueRestrictionAllowablePremadeSizesForQueueId440: {
                            api: "platformConfig",
                            path: "/v1/namespaces/QueueRestriction/AllowablePremadeSizesForQueueId440"
                        },
                        QueueRewardsSoloAutoFillProtectionForQueueId440: {
                            api: "platformConfig",
                            path: "/v1/namespaces/QueueRewards/SoloAutoFillProtectionForQueueId440"
                        },
                        QueueRewardsSoloIpRewardsForQueueId440: {
                            api: "platformConfig",
                            path: "/v1/namespaces/QueueRewards/SoloIpRewardsForQueueId440"
                        },
                        FeaturedModesDisabledRgmButtonEnabled: {
                            api: "platformConfig",
                            path: "/v1/namespaces/FeaturedModes/DisabledRgmButtonEnabled"
                        },
                        FeaturedModesGoldenSpatulaClubDisabled: {
                            api: "platformConfig",
                            path: "/v1/namespaces/FeaturedModes/GoldenSpatulaClubDisabled"
                        },
                        MutatorsEnabledModes: {
                            api: "platformConfig",
                            path: "v1/namespaces/Mutators/EnabledModes"
                        },
                        TftPatchNotesUrl: {
                            api: "platformConfig",
                            path: "/v1/namespaces/LcuTft/PatchNotesUrl"
                        },
                        initialConfigurationComplete: {
                            api: "platformConfig",
                            path: "/v1/initial-configuration-complete"
                        },
                        EternalsEnabled: {
                            api: "platformConfig",
                            path: "/v1/namespaces/Eternals/Enabled"
                        },
                        ChallengesClientState: {
                            api: "platformConfig",
                            path: "v1/namespaces/Challenges/ClientState"
                        }
                    }
                });
            var l = s.Ember.Object.extend(a, {
                potatoModeForced: s.Ember.computed("initialConfigurationComplete", "LcuLobbyPotatoModeForced", (function() {
                    return this._getValueOrDefault("LcuLobbyPotatoModeForced")
                })),
                defaultGameQueues: s.Ember.computed("initialConfigurationComplete", "LcuSocialDefaultGameQueues", (function() {
                    const e = this._getValueOrDefault("LcuSocialDefaultGameQueues");
                    return this._splitQueues(e)
                })),
                enabledGameQueues: s.Ember.computed("initialConfigurationComplete", "LcuSocialEnabledGameQueues", (function() {
                    const e = this._getValueOrDefault("LcuSocialEnabledGameQueues");
                    return this._splitQueues(e)
                })),
                aggressiveScanning: s.Ember.computed("initialConfigurationComplete", "LcuSocialAggressiveScanning", (function() {
                    return this._getValueOrDefault("LcuSocialAggressiveScanning")
                })),
                tutorialEnabled: s.Ember.computed("initialConfigurationComplete", "LcuTutorialEnabled", (function() {
                    return this._getValueOrDefault("LcuTutorialEnabled")
                })),
                tutorialFlowEnabled: s.Ember.computed("initialConfigurationComplete", "LcuTutorialNewEnabled", (function() {
                    return this._getValueOrDefault("LcuTutorialNewEnabled")
                })),
                allowablePremadeSizesForQueue440: s.Ember.computed("initialConfigurationComplete", "QueueRestrictionAllowablePremadeSizesForQueueId440", (function() {
                    return this._getValueOrDefault("QueueRestrictionAllowablePremadeSizesForQueueId440")
                })),
                soloAutoFillProtectionForQueueId440: s.Ember.computed("initialConfigurationComplete", "QueueRewardsSoloAutoFillProtectionForQueueId440", (function() {
                    return this._getValueOrDefault("QueueRewardsSoloAutoFillProtectionForQueueId440")
                })),
                soloIpRewardsForQueueId440: s.Ember.computed("initialConfigurationComplete", "QueueRewardsSoloIpRewardsForQueueId440", (function() {
                    return this._getValueOrDefault("QueueRewardsSoloIpRewardsForQueueId440")
                })),
                disabledRgmButtonEnabled: s.Ember.computed("initialConfigurationComplete", "FeaturedModesDisabledRgmButtonEnabled", (function() {
                    return this._getValueOrDefault("FeaturedModesDisabledRgmButtonEnabled")
                })),
                goldenSpatulaClubDisabled: s.Ember.computed("initialConfigurationComplete", "FeaturedModesGoldenSpatulaClubDisabled", (function() {
                    return this._getValueOrDefault("FeaturedModesGoldenSpatulaClubDisabled")
                })),
                enabledCustomGameModes: s.Ember.computed("initialConfigurationComplete", "MutatorsEnabledModes", (function() {
                    return this._getValueOrDefault("MutatorsEnabledModes")
                })),
                eternalsEnabled: s.Ember.computed("initialConfigurationComplete", "EternalsEnabled", (function() {
                    return this._getValueOrDefault("EternalsEnabled")
                })),
                lobbyChallengesEnabled: s.Ember.computed("initialConfigurationComplete", "ChallengesClientState", (function() {
                    return this._getValueOrDefault("ChallengesClientState") === i.CHALLENGES_CLIENT_STATES.ENABLED
                })),
                _getValueOrDefault: function(e) {
                    const t = this.get("initialConfigurationComplete"),
                        n = this.get(e);
                    if (!this._isNill(n) || t) return this._isNill(n) ? o[e] : n
                },
                _splitQueues: function(e) {
                    const t = e ? `${e}`.split(",") : [],
                        n = [];
                    return t.forEach((e => {
                        n.push(parseInt(e, 10))
                    })), s.Ember.A(n)
                },
                _isNill: function(e) {
                    return null == e || "" === e
                }
            });
            t.default = l
        }, e => {
            "use strict";
            e.exports = {
                INVITED_ROLES: {
                    PENDING: "Pending",
                    ACCEPTED: "Accepted",
                    JOINED: "Joined",
                    DECLINED: "Declined",
                    KICKED: "Kicked",
                    ERROR: "Error"
                },
                SUGGESTED_TYPES: {
                    FRIEND: "OnlineFriend",
                    PREMADE: "PreviousPremade",
                    FRIEND_OF_FRIEND: "FriendOfFriend",
                    HONORED: "HonorInteractions",
                    VICTORIOUS: "VictoriousComrade",
                    LEGACY: "LegacyPlayAgain"
                },
                PARTY_TYPES: {
                    OPEN: "open",
                    CLOSED: "closed"
                },
                TFT_MAX_PARTY_SIZE: 8,
                NORMAL_MAX_PARTY_SIZE: 5,
                CHERRY_GAME_MODE: "CHERRY",
                QUEUE_ID_TO_MULTITEAM_LOBBY_CONFIG: {
                    1700: {
                        subteamCount: 4,
                        playerSlotCount: 2
                    },
                    1701: {
                        subteamCount: 1,
                        playerSlotCount: 1
                    },
                    1704: {
                        subteamCount: 2,
                        playerSlotCount: 2
                    },
                    1710: {
                        subteamCount: 4,
                        playerSlotCount: 2
                    },
                    1720: {
                        subteamCount: 8,
                        playerSlotCount: 2
                    }
                },
                CHALLENGES_CLIENT_STATES: {
                    HIDDEN: "Hidden",
                    DISABLED: "Disabled",
                    ENABLED: "Enabled"
                }
            }
        }, (e, t, n) => {
            "use strict";
            var s;
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.default = void 0;
            var i = ((s = n(20)) && s.__esModule ? s : {
                default: s
            }).default.create();
            t.default = i
        }, (e, t, n) => {
            "use strict";
            var s, i = n(1),
                o = (s = n(13)) && s.__esModule ? s : {
                    default: s
                },
                a = n(15);
            const l = ["teammaxsizerestriction", "teamsizerestriction", "gameversionmismatch", "missingtoken"],
                r = ["missingtoken", "playerranksoloonlyrestriction"],
                c = "TeamSkillRestriction",
                m = (0, i.emberDataBinding)({
                    Ember: i.Ember,
                    websocket: (0, i.getProvider)().getSocket(),
                    logPrefix: "service:queue-eligibility",
                    basePaths: {
                        lobby: "/lol-lobby"
                    },
                    boundProperties: {
                        lobby: {
                            api: "lobby",
                            path: "/v2/lobby"
                        }
                    }
                });
            e.exports = i.Ember.Object.extend(m, {
                queues: o.default,
                eligibilities: null,
                validForSummonerIds: [],
                restrictions: i.Ember.computed.alias("lobby.restrictions"),
                warnings: i.Ember.computed.alias("lobby.warnings"),
                lobbyRestrictionsDoNotExist: i.Ember.computed.equal("restrictions", void 0),
                lobbyRestrictionsExist: i.Ember.computed.not("lobbyRestrictionsDoNotExist"),
                memberSummonerIds: i.Ember.computed.mapBy("lobby.members", "summonerId"),
                playerRestrictions: null,
                teamRestrictions: null,
                restrictionsObserver: i.Ember.on("init", i.Ember.observer("restrictions.[]", "restrictions.@each.restrictionCode", "memberSummonerIds", (function() {
                    this.get("memberSummonerIds") && i.Ember.run.once(this, this._setPlayerAndTeamRestrictions)
                }))),
                hasMinorRestriction: function(e) {
                    for (let t = 0; t < e.length; t++) {
                        const n = e[t];
                        if (-1 !== a.TENCENT_MINOR_RESTRICTIONS.indexOf(n.restrictionCode)) return !0
                    }
                    return !1
                },
                isTeamRestriction: function(e) {
                    return -1 !== l.indexOf(e.restrictionCode.toLowerCase())
                },
                isPlayerAndTeamRestriction: function(e) {
                    return -1 !== l.indexOf(e.restrictionCode.toLowerCase()) && -1 !== r.indexOf(e.restrictionCode.toLowerCase())
                },
                groupMissingTokenRestrictions: function(e) {
                    const t = [],
                        n = new Set;
                    let s = e;
                    if (e && (s = e.slice(0), e.forEach((e => {
                            const s = e.restrictionCode;
                            null !== s && a.MISSING_TOKEN_ERRORS.includes(s) && (t.push(e.restrictionArgs.errorCode), e.summonerIds && e.summonerIds.forEach((e => {
                                n.add(e)
                            })))
                        })), t.length > 0)) {
                        s = s.filter((e => !e.restrictionArgs || !e.restrictionArgs.errorCode || !a.MISSING_TOKEN_ERRORS.includes(e.restrictionCode)));
                        const e = i.Ember.Object.create({
                            restrictionCode: "MissingToken",
                            summonerIds: i.Ember.A(Array.from(n)),
                            restrictionArgs: {
                                errorCodes: t.join(", ")
                            }
                        });
                        s.push(e)
                    }
                    return s
                },
                trimRestrictionsUsingGroupRules: function(e) {
                    const t = e.filter((e => "TeamDivisionRestriction" === e.restrictionCode)).length > 0,
                        n = e.filter((e => e.restrictionCode === c)).length > 0;
                    return t && n ? e.filter((function(e) {
                        return e.restrictionCode !== c
                    })) : e
                },
                applyRestrictionGroupRules: function(e) {
                    let t = (e || []).slice(0);
                    return t = this.groupMissingTokenRestrictions(t), t = this.trimRestrictionsUsingGroupRules(t), t
                },
                _setPlayerAndTeamRestrictions: function() {
                    const e = this.applyRestrictionGroupRules(this.get("restrictions")),
                        t = [],
                        n = [],
                        s = e && e.length || 0;
                    for (let i = 0; i < s; i++) {
                        const s = e[i];
                        this.isPlayerAndTeamRestriction(s) ? (n.push(s), t.push(s)) : this.isTeamRestriction(s) ? n.push(s) : t.push(s)
                    }
                    this.set("playerRestrictions", i.Ember.A(t)), this.set("teamRestrictions", i.Ember.A(n))
                },
                hasLobbyRestrictions: i.Ember.computed.gt("restrictions.length", 0),
                hasLobbyTeamSizeRestriction: i.Ember.computed("hasLobbyRestrictions", "restrictions", (function() {
                    if (this.get("hasLobbyRestrictions")) {
                        const e = this.get("restrictions");
                        if (e)
                            for (let t = 0, n = e.length; t < n; t++)
                                if ("teammaxsizerestriction" === e[t].restrictionCode.toLowerCase()) return !0
                    }
                    return !1
                })),
                _shouldUseLobbyForQueue: function(e) {
                    return this.get("lobbyRestrictionsExist") && this.get("lobby.gameConfig.queueId") === e
                },
                restrictionsForQueue: function(e) {
                    if (this._shouldUseLobbyForQueue(e)) return this.get("restrictions");
                    const t = this.get("eligibilities");
                    return t && t[e] ? t[e].restrictions : []
                },
                getRestrictionForCode: function(e) {
                    const t = this.get("eligibilities");
                    if (t)
                        for (const n in t) {
                            const s = t[n].restrictions.find((t => t.restrictionCode === e));
                            if (s) return s
                        }
                    return null
                },
                isQueueAvailable: function(e) {
                    return !!o.default.availableQueueIds && o.default.availableQueueIds.includes(e)
                },
                fetchEligibilities: function() {
                    return this.checkEligibility().then((e => {
                        this._processEligibilities(e)
                    }), (() => {
                        i.logger.error("FAILED TO FETCH ELIGIBILITIES, PROVIDING BACKFILL"), this._backfillEligibilities()
                    }))
                },
                _backfillEligibilities: function() {
                    const e = this.get("queues.availableQueueIds"),
                        t = {};
                    if (e && e.length)
                        for (let n = 0; n < e.length; n++) t[e[n]] = {
                            eligible: !0,
                            restrictions: []
                        };
                    this.set("eligibilities", t)
                },
                _mapEligibilities: function(e) {
                    const t = {};
                    return e && e.length ? (e.forEach((e => {
                        e.restrictions = this.groupMissingTokenRestrictions(e.restrictions), t[e.queueId] = e
                    })), t) : t
                },
                _processEligibilities: function(e) {
                    const t = this._mapEligibilities(e);
                    return this.set("eligibilities", t), t
                },
                checkEligibility: function() {
                    return this.get("api.lobby").post("/v2/eligibility/party")
                },
                hasRankedDivisionRestriction: !1,
                checkForRankedDivisionRestriction: function(e) {
                    if (this.set("hasRankedDivisionRestriction", !1), e.members.length < 2) return;
                    const t = e.gameConfig.queueId,
                        n = o.default.getQueueById(t);
                    if (!n || !n.isRanked) return;
                    const s = [];
                    for (let t = 0; t < e.members.length; t++) s.push(e.members[t].summonerId);
                    this.checkEligibility().then((e => {
                        if (e && e.length) {
                            const t = e[0];
                            if (!t.eligible && t.restrictions.length > 0) {
                                "TeamDivisionRestriction" === t.restrictions[0].restrictionCode && this.set("hasRankedDivisionRestriction", !0)
                            }
                        }
                    }))
                },
                getLocInfoForPlayerRankSoloOnlyRestriction: function(e, t) {
                    const n = {
                        key: "game_select_queue_restriction_player_playerranksoloonlyrestriction_generic",
                        args: {}
                    };
                    if (!e.restrictionArgs || !e.restrictionArgs.maxTierForPremadeSize2 || !e.restrictionArgs.maxDivisionForPremadeSize2) return n;
                    const s = i.LeagueTierNames.getUpOneDivision(e.restrictionArgs.maxTierForPremadeSize2, e.restrictionArgs.maxDivisionForPremadeSize2, t);
                    if (s) {
                        i.LeagueTierNames.isLowestTierDivision(s.tier, s.division, t) ? (n.key = "game_select_queue_restriction_player_playerranksoloonlyrestriction_tier", n.args.minTierForPlayerRankSoloOnlyRestriction = i.LeagueTierNames.getTierName(s.tier)) : (n.key = "game_select_queue_restriction_player_playerranksoloonlyrestriction_tieranddivision", n.args.minTierAndDivisionForPlayerRankSoloOnlyRestriction = i.LeagueTierNames.getFullTierDivisionName(s.tier, s.division))
                    }
                    return n
                }
            })
        }, (e, t) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.MAP_TO_I18N_KEY = t.CUSTOM_GAME_TYPES = t.BOT_GAME_TYPE = void 0;
            t.MAP_TO_I18N_KEY = {
                8: "game_map_crystal_scar",
                10: "game_map_twisted_treeline",
                11: "game_map_summoners_rift",
                12: "game_map_howling_abyss",
                16: "game_map_cosmic_ruins",
                21: "game_map_21",
                22: "game_map_22",
                30: "game_map_30"
            };
            t.CUSTOM_GAME_TYPES = ["PRACTICE_GAME", "CUSTOM_GAME"];
            t.BOT_GAME_TYPE = "VersusAi"
        }, e => {
            "use strict";
            e.exports = '<template id="lol-parties-template-game-invites">\r\n  <div class="parties-game-info-panel-invites">\r\n    <div class="parties-game-invite-heading">\r\n      <div class="parties-game-invite-heading-container">\r\n        <div class="parties-game-invite-heading-text"></div>\r\n        <div class="parties-game-invite-count parties-hide-game-invite-count"></div>\r\n      </div>\r\n      <button class="parties-clear-all-button parties-hide-clear-all"></button>\r\n    </div>\r\n    <div class="parties-game-invites parties-game-invite-scroll parties-blue-scroll">\r\n    </div>\r\n  </div>\r\n</template>\r\n'
        }, (e, t, n) => {
            var s = n(8),
                i = n(9)(s);
            i.push([e.id, ':host .parties-game-invite-heading {\n  font-family: var(--font-display);\n}\n:host .parties-game-invite-heading {\n  -webkit-user-select: none;\n}\n:host .parties-game-invite-heading {\n  font-kerning: normal;\n  -webkit-font-feature-settings: "kern" 1;\n  -webkit-font-smoothing: antialiased;\n}\n:host .parties-game-invite-heading {\n  text-transform: uppercase;\n}\n:host .parties-game-invite-heading:lang(ko-kr),\n:host .parties-game-invite-heading:lang(ja-jp),\n:host .parties-game-invite-heading:lang(tr-tr),\n:host .parties-game-invite-heading:lang(el-gr),\n:host .parties-game-invite-heading:lang(th-th),\n:host .parties-game-invite-heading:lang(zh-tw) {\n  text-transform: none;\n}\n:host .parties-game-invite-heading {\n  color: #f0e6d2;\n  font-size: 12px;\n  font-weight: 700;\n  line-height: 16px;\n  letter-spacing: 0.075em;\n}\n:host .parties-game-invite-heading:lang(ja-jp) {\n  font-size: 13px;\n}\n:host .parties-game-invite-heading:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host .parties-game-info-panel-invites {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  max-height: 202px;\n  direction: ltr;\n}\n:host .parties-game-invite-heading {\n  display: flex;\n  align-items: center;\n  height: 32px;\n  color: #a09b8c;\n  padding: 0 5px 0 9px;\n  flex-shrink: 0;\n  pointer-events: none;\n  margin-top: 1px;\n}\n:host .hover-highlight {\n  pointer-events: auto;\n}\n:host .hover-highlight:hover {\n  background: linear-gradient(to right, rgba(10,203,230,0.2), rgba(10,203,230,0));\n  cursor: pointer;\n  color: #f0e6d2;\n}\n:host .hover-highlight:active {\n  color: #cdbe91;\n}\n:host .parties-game-invite-heading-container {\n  flex: 1;\n  display: flex;\n  margin-right: 7px;\n  overflow: hidden;\n}\n:host .parties-game-invite-heading-text {\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n}\n:host .parties-game-invite-count {\n  padding-left: 5px;\n}\n:host .parties-game-invite-count.parties-hide-game-invite-count {\n  display: none;\n}\n:host .parties-clear-all-button {\n  outline: none;\n  border: none;\n  background: none;\n  cursor: pointer;\n  padding: 0;\n  -webkit-mask: url("/fe/lol-parties/clear_mask.png") no-repeat center;\n  -webkit-mask-size: 18px;\n  background-color: #c8aa6e;\n  width: 18px;\n  height: 18px;\n  pointer-events: auto;\n}\n:host .parties-clear-all-button:hover {\n  background-color: #f0e6d2;\n}\n:host .parties-clear-all-button:active {\n  background-color: #463714;\n}\n:host .parties-clear-all-button.parties-hide-clear-all {\n  display: none;\n  pointer-events: none;\n}\n:host lol-parties-game-invite {\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-end;\n  flex-shrink: 0;\n}\n:host .parties-game-invite-scroll {\n  flex-grow: 1;\n}\n:host .parties-blue-scroll {\n  overflow-x: hidden;\n  overflow-y: auto;\n}\n:host .parties-blue-scroll::-webkit-scrollbar {\n  width: 9px;\n  background: transparent;\n}\n:host .parties-blue-scroll::-webkit-scrollbar-thumb {\n  background: transparent;\n  border-radius: 6px;\n  border: 2px solid transparent;\n  background-clip: padding-box;\n}\n:host .parties-blue-scroll:hover::-webkit-scrollbar-thumb {\n  background-color: #0596aa;\n}\n:host lol-parties-game-invite.use-animation {\n  animation: game-invite-slide-in 0.3s 1;\n}\n:host lol-parties-game-invite.use-animation {\n  animation: game-invite-slide-in 0.3s 1;\n}\n@-moz-keyframes game-invite-slide-in {\n  0% {\n    animation-timing-function: cubic-bezier(0, 0, 0, 1);\n    height: 0px;\n  }\n  100% {\n    height: 72px;\n  }\n}\n@-webkit-keyframes game-invite-slide-in {\n  0% {\n    animation-timing-function: cubic-bezier(0, 0, 0, 1);\n    height: 0px;\n  }\n  100% {\n    height: 72px;\n  }\n}\n@-o-keyframes game-invite-slide-in {\n  0% {\n    animation-timing-function: cubic-bezier(0, 0, 0, 1);\n    height: 0px;\n  }\n  100% {\n    height: 72px;\n  }\n}\n@keyframes game-invite-slide-in {\n  0% {\n    animation-timing-function: cubic-bezier(0, 0, 0, 1);\n    height: 0px;\n  }\n  100% {\n    height: 72px;\n  }\n}\n', ""]), e.exports = i
        }, (e, t, n) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.default = void 0;
            var s = function(e, t) {
                    if (!t && e && e.__esModule) return e;
                    if (null === e || "object" != typeof e && "function" != typeof e) return {
                        default: e
                    };
                    var n = c(t);
                    if (n && n.has(e)) return n.get(e);
                    var s = {},
                        i = Object.defineProperty && Object.getOwnPropertyDescriptor;
                    for (var o in e)
                        if ("default" !== o && Object.prototype.hasOwnProperty.call(e, o)) {
                            var a = i ? Object.getOwnPropertyDescriptor(e, o) : null;
                            a && (a.get || a.set) ? Object.defineProperty(s, o, a) : s[o] = e[o]
                        } s.default = e, n && n.set(e, s);
                    return s
                }(n(1)),
                i = r(n(12)),
                o = r(n(25)),
                a = r(n(13)),
                l = r(n(27));

            function r(e) {
                return e && e.__esModule ? e : {
                    default: e
                }
            }

            function c(e) {
                if ("function" != typeof WeakMap) return null;
                var t = new WeakMap,
                    n = new WeakMap;
                return (c = function(e) {
                    return e ? n : t
                })(e)
            }
            const m = s.default.getProvider().getSocket(),
                u = "sfx-ui";
            class d extends s.webComponents.ShadowElement {
                templateMarkup() {
                    return n(28)
                }
                stylesheetMarkup() {
                    return n(29)
                }
                constructor() {
                    super(), this._errorOpen = !1, this._gameInvite = null, this._patcherConnected = null, this._patcherState = null, this._chatSettings = null, this._listeners = {}, this._listeners.onMouseOver = this._onMouseOver.bind(this), this._listeners.onMouseOut = this._onMouseOut.bind(this), this._listeners.onAcceptClicked = this._acceptGameInvite.bind(this), this._listeners.onDeclineClicked = this._declineGameInvite.bind(this), this._listeners.onCloseErrorClicked = this._closeError.bind(this), this._playerNames = s.playerNames, this._summonerBinding = (0, s.dataBinding)("/lol-summoner", m), this._lobbyBinding = (0, s.dataBinding)("/lol-lobby", m), this._toastManager = s.UIKit.getToastManager(), this._templateHelper = s.UIKit.getTemplateHelper()
                }
                connectedCallback() {
                    super.connectedCallback(), this.addEventListener("mouseover", this._listeners.onMouseOver), this.addEventListener("mouseout", this._listeners.onMouseOut), this._attachListener(".parties-accept-btn", "click", this._listeners.onAcceptClicked), this._attachListener(".parties-decline-btn", "click", this._listeners.onDeclineClicked), this._attachListener(".parties-error-message-close-btn", "click", this._listeners.onCloseErrorClicked), this._onHoldText()
                }
                disconnectedCallback() {
                    super.disconnectedCallback(), this.removeEventListener("mouseover", this._listeners.onMouseOver), this.removeEventListener("mouseout", this._listeners.onMouseOut), this._detachListener(".parties-accept-btn", "click", this._listeners.onAcceptClicked), this._detachListener(".parties-decline-btn", "click", this._listeners.onDeclineClicked), this._detachListener(".parties-error-message-close-btn", "click", this._listeners.onCloseErrorClicked)
                }
                updateGameInvite(e) {
                    this._gameInvite = e;
                    const t = this._gameInvite ? this._gameInvite.gameConfig : null;
                    this._inviteFromPlayerText(this._gameInvite), this._updateDisabledReason(), t && (this._gameNameText(t), this._gameTypeText(t), this._mapIcon(t)), this._updateAcceptable()
                }
                updateUXSettings(e) {
                    this._uxSettings = e, this._animationSettings()
                }
                updateCurrentPlayerChat(e) {
                    this._currentPlayerChat = e, this._updateAvailablity(), this._updateAcceptable()
                }
                updatePatcherConnected(e) {
                    this._patcherConnected = e, this._updateAcceptable(), this._updateDisabledReason()
                }
                updatePatcherState(e) {
                    this._patcherState = e, this._updateAcceptable(), this._updateDisabledReason()
                }
                updateChatSettings(e) {
                    this._chatSettings = e, this._updateAcceptable()
                }
                updateGameSearch(e) {
                    this._gameSearch = e, this._updateDisabledReason()
                }
                _inviteFromPlayerText(e) {
                    const t = this.shadowRoot.querySelectorAll(".parties-game-invite-name");
                    for (let n = 0; n < t.length; n++) {
                        const s = t.item(n);
                        s && this._summonerName(s, e.fromSummonerId)
                    }
                }
                _gameNameText(e) {
                    const t = this._gameName(e),
                        n = this.shadowRoot.querySelector(".parties-game-name");
                    n && (n.innerHTML = t)
                }
                _gameName(e) {
                    let t = "";
                    if (e) {
                        const n = a.default.getMapModeInfo(e.mapId, e.gameMode, e.queueId);
                        t = n.isRGM && n.gameModeShortName ? n.gameModeShortName : n.name
                    }
                    return t
                }
                _gameTypeText(e) {
                    let t = this._gameType(e);
                    t = t || "";
                    const n = this.shadowRoot.querySelector(".parties-game-type");
                    n && (n.innerHTML = t)
                }
                _gameType(e) {
                    return i.default.gameType(e)
                }
                _mapIcon(e) {
                    const t = this._mapKey(e),
                        n = this.shadowRoot.querySelector(".parties-map-icon");
                    t && n && (n.className = "", n.classList.add("parties-map-icon", t))
                }
                _mapKey(e) {
                    return i.default.mapKey(e)
                }
                async _summonerName(e, t) {
                    if (!this._name) {
                        const {
                            playerName: n
                        } = await this._playerNames.getDisplayNameBySummonerId(t);
                        this._name = n, e.innerHTML = n || ""
                    }
                }
                _gridHoverSound() {
                    s.Audio.getChannel(u).playSound("/fe/lol-parties/sfx-uikit-grid-big-hover.ogg")
                }
                _onHoldText() {
                    const e = this.shadowRoot.querySelector(".parties-game-info-subtitle-hold");
                    e && (e.innerHTML = s.tra.get("parties_roster_invite_disabled_in_game_queue"))
                }
                _updateAcceptable() {
                    const e = i.default.isReadyForGame(this._patcherState);
                    this._acceptable = i.default.isGameInviteAcceptable(this._gameInvite, this._chatSettings, this._currentPlayerChat, this._patcherConnected, e), this._acceptable ? this._enterAcceptableState() : this._enterUnacceptableState()
                }
                _enterAcceptableState() {
                    this._enableMapIcon(), this._showGameName(), this._showGameType(), this._hideDisabledReason(), this._enableAcceptableButtons(), this._showAcceptButton()
                }
                _enterUnacceptableState() {
                    this._disableMapIcon(), this._hideGameName(), this._hideGameType(), this._showDisabledReason(), this._disabledAcceptableButtons(), this._hideAcceptButton()
                }
                _showError() {
                    this._removeClass("parties-game-invite-hide", ".parties-error-message")
                }
                _hideError() {
                    this._addClass("parties-game-invite-hide", ".parties-error-message")
                }
                _showAcceptButton() {
                    this._removeClass("parties-game-invite-hide", ".parties-accept-btn")
                }
                _hideAcceptButton() {
                    this._addClass("parties-game-invite-hide", ".parties-accept-btn")
                }
                _enableAcceptableButtons() {
                    this._addClass("acceptable", ".parties-game-invite-buttons")
                }
                _disabledAcceptableButtons() {
                    this._removeClass("acceptable", ".parties-game-invite-buttons")
                }
                _showDisabledReason() {
                    this._removeClassFromAll("parties-game-info-subtitle-hide", ".parties-game-info-container .parties-game-info-subtitle-disabled")
                }
                _hideDisabledReason() {
                    this._addClassToAll("parties-game-info-subtitle-hide", ".parties-game-info-container .parties-game-info-subtitle-disabled")
                }
                _showGameName() {
                    this._removeClass("parties-game-info-subtitle-hide", ".parties-game-name")
                }
                _hideGameName() {
                    this._addClass("parties-game-info-subtitle-hide", ".parties-game-name")
                }
                _showGameType() {
                    this._removeClass("parties-game-info-subtitle-hide", ".parties-game-type")
                }
                _hideGameType() {
                    this._addClass("parties-game-info-subtitle-hide", ".parties-game-type")
                }
                _enableMapIcon() {
                    this._removeClass("disabled", ".parties-map-icon")
                }
                _disableMapIcon() {
                    this._addClass("disabled", ".parties-map-icon")
                }
                _updateAvailablity() {
                    const e = this._currentPlayerChat;
                    if (e) {
                        const {
                            availability: t
                        } = e;
                        t && "dnd" === t ? this._showDoNotDisturbLayout() : this._showAvailableLayout()
                    }
                }
                _showAvailableLayout() {
                    this._removeClass("parties-game-invite-hide", ".parties-game-info-container-available"), this._addClass("parties-game-invite-hide", ".parties-game-info-container-dnd")
                }
                _showDoNotDisturbLayout() {
                    this._removeClass("parties-game-invite-hide", ".parties-game-info-container-dnd"), this._addClass("parties-game-invite-hide", ".parties-game-info-container-available")
                }
                _updateDisabledReason() {
                    const e = this._disabledReasonMessage();
                    if (e) {
                        const t = ".parties-game-info-container .parties-game-info-subtitle-disabled",
                            n = this.shadowRoot.querySelectorAll(t);
                        for (let t = 0; t < n.length; t++) {
                            const s = n.item(t);
                            s && (s.innerHTML = e)
                        }
                    }
                }
                _disabledReasonMessage() {
                    const e = this._gameInvite;
                    if (e) {
                        if (!e.canAcceptInvitation) {
                            const t = e.restrictions[0] || {
                                    restrictionCode: "UnknownRestriction"
                                },
                                n = t.restrictionCode ? t.restrictionCode.toLowerCase() : "",
                                i = t.restrictionArgs;
                            return s.tra.formatString(`parties_queue_restriction_player_${n}`, i)
                        }
                        return "ONHOLD" === e.state.toUpperCase() || this._gameSearch ? s.tra.get("parties_roster_invite_disabled_in_game_queue") : "REVOKED" === e.state.toUpperCase() ? s.tra.get("parties_roster_invite_disabled_expired") : this._isPatcherCheckingForUpdates() ? s.tra.get("parties_roster_invite_disabled_checking_updates") : this._isPatching() ? s.tra.get("parties_roster_invite_disabled_patching") : this._patcherConnected ? null : s.tra.get("parties_roster_invite_disabled_patcher_disconnected")
                    }
                }
                _isPatcherCheckingForUpdates() {
                    const e = this._patcherState;
                    return !!e && (!e.isUpToDate && "CheckingForUpdates" === e.action)
                }
                _isPatching() {
                    const e = this._patcherState;
                    return !(!e || !e.action) && ("Patching" === e.action || "Repairing" === e.action)
                }
                _animationSettings() {
                    this._uxSettings && !this._uxSettings.largeAreaAnimationsEnabled ? (this._removeClass("use-animation", ".parties-game-invite-buttons"), this.classList.remove("use-animation")) : (this._addClass("use-animation", ".parties-game-invite-buttons"), this.classList.add("use-animation"))
                }
                _onMouseOut() {
                    const e = this.previousElementSibling;
                    e && e.classList.remove("parties-hide-divider")
                }
                _onMouseOver() {
                    const e = this.previousElementSibling;
                    e && e.classList.add("parties-hide-divider"), this._gridHoverSound()
                }
                _acceptGameInvite() {
                    if (this._gameInvite && this._acceptable) {
                        this._playAcceptSound();
                        const e = this._gameInvite.invitationId;
                        return this._lobbyBinding.post(`/v2/received-invitations/${e}/accept`).then((() => {
                            this._errorOpen = !1, this._hideError(), l.default.gameInviteAccept(), this._showParty()
                        })).catch((t => {
                            let n = "";
                            switch (s.logger.error(`Error accepting game invite, id: ${e} error: ${t}`), l.default.logError("gameInviteAccept", t.translationKey, t.translationKey), t.status) {
                                case 403:
                                    n = s.tra.get("parties_game_invite_system_message_game_full");
                                    break;
                                case 404:
                                case 410:
                                    n = s.tra.get("parties_game_invite_system_message_game_not_found");
                                    break;
                                case 438:
                                    n = s.tra.get("parties_game_invite_system_message_game_version_mismatch");
                                    break;
                                default:
                                    n = s.tra.get("parties_game_invite_system_message_server_error")
                            }
                            this._displayErrorMessage(n)
                        }))
                    }
                    return Promise.resolve()
                }
                _displayErrorMessage(e, t = 5e3) {
                    this._addErrorMessage(e), this._errorOpen = !0, this._showError(), this._toast(e), this._playErrorSound(), setTimeout((() => {
                        this._closeError()
                    }), t)
                }
                _declineGameInvite() {
                    if (this._gameInvite) {
                        this._playClickSound();
                        const e = this._gameInvite.invitationId;
                        this._lobbyBinding.post(`/v2/received-invitations/${e}/decline`).then((() => {
                            l.default.gameInviteDecline()
                        })).catch((t => {
                            s.logger.error(`Error declining game invite, id: ${e} error: ${t}`), l.default.logError("declineGameInvite", t.translationKey, t.translationKey)
                        }))
                    }
                }
                _addErrorMessage(e) {
                    const t = this.shadowRoot.querySelector(".parties-error-message-text");
                    t && (t.innerHTML = e)
                }
                _closeError() {
                    this._errorOpen = !1, this._hideError()
                }
                _playAcceptSound() {
                    s.Audio.getChannel(u).playSound("/fe/lol-parties/sfx-soc-ui-gameinvite-accept-click.ogg")
                }
                _playErrorSound() {
                    s.Audio.getChannel(u).playSound("/fe/lol-parties/sfx-login-notif-login-fail.ogg")
                }
                _playClickSound() {
                    s.Audio.getChannel(u).playSound("/fe/lol-parties/sfx-soc-ui-click-generic.ogg")
                }
                _addClass(e, t) {
                    const n = this.shadowRoot.querySelector(t);
                    n && !n.classList.contains(e) && n.classList.add(e)
                }
                _addClassToAll(e, t) {
                    const n = this.shadowRoot.querySelectorAll(t);
                    for (let t = 0; t < n.length; t++) {
                        const s = n.item(t);
                        s && !s.classList.contains(e) && s.classList.add(e)
                    }
                }
                _removeClass(e, t) {
                    const n = this.shadowRoot.querySelector(t);
                    n && n.classList.contains(e) && n.classList.remove(e)
                }
                _removeClassFromAll(e, t) {
                    const n = this.shadowRoot.querySelectorAll(t);
                    for (let t = 0; t < n.length; t++) {
                        const s = n.item(t);
                        s && s.classList.contains(e) && s.classList.remove(e)
                    }
                }
                _attachListener(e, t, n) {
                    const s = this.shadowRoot.querySelector(e);
                    s && s.addEventListener(t, n)
                }
                _detachListener(e, t, n) {
                    const s = this.shadowRoot.querySelector(e);
                    s && s.removeEventListener(t, n)
                }
                _toast(e) {
                    const t = this._templateHelper.contentBlockNotification(e);
                    this._toastManager.add({
                        type: "DialogToast",
                        data: {
                            contents: t
                        }
                    })
                }
                _showParty() {
                    const e = o.default.get("viewportApiKey");
                    s.Viewport.main().getScreenRoot(e, "rcp-fe-lol-parties").bump()
                }
            }
            d.tagName = "lol-parties-game-invite";
            var p = d;
            t.default = p
        }, (e, t, n) => {
            "use strict";
            var s;
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.default = void 0;
            var i = ((s = n(26)) && s.__esModule ? s : {
                default: s
            }).default.create();
            t.default = i
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            e.exports = s.Ember.Object.extend({
                viewportApiKey: void 0,
                isShowing: !1
            })
        }, (e, t, n) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.default = void 0;
            var s = function(e, t) {
                if (!t && e && e.__esModule) return e;
                if (null === e || "object" != typeof e && "function" != typeof e) return {
                    default: e
                };
                var n = i(t);
                if (n && n.has(e)) return n.get(e);
                var s = {},
                    o = Object.defineProperty && Object.getOwnPropertyDescriptor;
                for (var a in e)
                    if ("default" !== a && Object.prototype.hasOwnProperty.call(e, a)) {
                        var l = o ? Object.getOwnPropertyDescriptor(e, a) : null;
                        l && (l.get || l.set) ? Object.defineProperty(s, a, l) : s[a] = e[a]
                    } s.default = e, n && n.set(e, s);
                return s
            }(n(1));

            function i(e) {
                if ("function" != typeof WeakMap) return null;
                var t = new WeakMap,
                    n = new WeakMap;
                return (i = function(e) {
                    return e ? n : t
                })(e)
            }
            var o = new class {
                constructor() {
                    const e = s.default.getProvider().getSocket();
                    this._telemetryBinding = (0, s.dataBinding)("/telemetry", e), this._startSessionTime = !1
                }
                beginSession() {
                    this._startSessionTime = new Date
                }
                sendTelemetryEvent(e, t) {
                    const n = this._startSessionTime ? new Date - this._startSessionTime : -1,
                        s = Object.assign(t, {
                            plugin: "rcp-fe-lol-parties",
                            sessionTime: n.toString()
                        });
                    this._logDradisEvent(e, s)
                }
                _sendDetailedEvent(e, t, n, s, i) {
                    (i = i || {}).eventContext = e, i.eventType = t, i.eventAction = n, this._logDradisEvent(s, i)
                }
                _logDradisEvent(e, t) {
                    this._telemetryBinding.post(`/v1/events/${e}`, t)
                }
                logError(e, t, n) {
                    const s = {
                        action: e,
                        errorDescription: t,
                        errorData: n
                    };
                    return this._sendDetailedEvent("app", "general", "error", "social_panel", s)
                }
                gameInviteAccept() {
                    this._sendDetailedEvent("gamePanel", "gameInvite", "accept", "social_panel")
                }
                gameInviteDecline() {
                    this._sendDetailedEvent("gamePanel", "gameInvite", "decline", "social_panel")
                }
            };
            t.default = o
        }, e => {
            "use strict";
            e.exports = '<template id="lol-parties-template-game-invite">\r\n  <div class="parties-game-invite">\r\n    <div class="parties-map-icon"></div>\r\n\r\n    <div class="parties-game-info-container parties-game-info-container-dnd parties-game-invite-hide">\r\n      <div class="parties-game-invite-name"></div>\r\n      <div class="parties-game-info-subtitle-hold parties-game-info-subtitle-disabled"></div>\r\n    </div>\r\n\r\n    <div class="parties-game-info-container parties-game-info-container-available">\r\n      <div class="parties-game-invite-name"></div>\r\n      <div class="parties-game-info-subtitle parties-game-name"></div>\r\n      <div class="parties-game-info-subtitle parties-game-type"></div>\r\n      <div class="parties-game-info-subtitle parties-game-info-subtitle-disabled"></div>\r\n    </div>\r\n\r\n    <div class="parties-game-invite-buttons use-animation">\r\n      <div class="parties-accept-btn"></div>\r\n      <div class="parties-decline-btn"></div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class="parties-error-message parties-game-invite-hide">\r\n    <div class="parties-error-message-text"></div>\r\n    <div class="parties-error-message-close-btn"></div>\r\n  </div>\r\n</template>\r\n'
        }, (e, t, n) => {
            var s = n(8),
                i = n(9)(s);
            i.push([e.id, ':host .parties-game-invite-name,\n:host .parties-game-info-subtitle {\n  font-family: var(--font-body);\n}\n:host .parties-game-invite-name,\n:host .parties-game-info-subtitle {\n  -webkit-user-select: none;\n}\n:host .parties-game-invite-name,\n:host .parties-game-info-subtitle {\n  font-kerning: normal;\n  -webkit-font-feature-settings: "kern" 1;\n  -webkit-font-smoothing: antialiased;\n}\n:host .parties-game-invite-name {\n  color: #a09b8c;\n  font-size: 14px;\n  font-weight: normal;\n  line-height: 20px;\n  letter-spacing: 0.025em;\n  -webkit-font-smoothing: subpixel-antialiased;\n}\n:host .parties-game-invite-name:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host .parties-game-info-subtitle {\n  color: #a09b8c;\n  font-size: 12px;\n  font-weight: normal;\n  line-height: 16px;\n  letter-spacing: 0.025em;\n  -webkit-font-smoothing: subpixel-antialiased;\n}\n:host .parties-game-info-subtitle:lang(ja-jp) {\n  font-size: 13px;\n}\n:host .parties-game-info-subtitle:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host .parties-map-icon {\n  width: 34px;\n  height: 32px;\n  background-size: auto 64px;\n  background-repeat: no-repeat;\n}\n:host .parties-map-icon.game_map_howling_abyss {\n  background-image: url("/fe/lol-parties/map_ha.png");\n}\n:host .parties-map-icon.game_map_summoners_rift {\n  background-image: url("/fe/lol-parties/map_sr.png");\n}\n:host .parties-map-icon.game_map_twisted_treeline {\n  background-image: url("/fe/lol-parties/map_tt.png");\n}\n:host .parties-map-icon.game_map_rotating_game_mode {\n  background-image: url("/fe/lol-parties/map_rgm.png");\n}\n:host .parties-map-icon.game_map_21 {\n  background-image: url("/fe/lol-parties/map_21.png");\n}\n:host .parties-map-icon.game_map_22 {\n  background-image: url("/fe/lol-parties/map_tft.png");\n}\n:host .parties-map-icon.game_map_30 {\n  background-image: url("/lol-game-data/assets/content/src/LeagueClient/GameModeAssets/Cherry/img/icon-v2.png");\n  background-size: 30px 30px;\n  background-position: center;\n}\n:host.parties-hide-divider .parties-game-invite::after {\n  background: none;\n}\n:host .parties-game-invite {\n  display: flex;\n  align-items: center;\n  height: 72px;\n  flex-shrink: 0;\n  direction: ltr;\n}\n:host .parties-mini {\n  height: 44px;\n}\n:host .parties-game-invite::after {\n  content: \'\';\n  position: absolute;\n  bottom: 0;\n  left: 10px;\n  width: calc(100% - 20px);\n  height: 1px;\n  background-color: #005a82;\n}\n:host .parties-game-invite:hover::after {\n  background: none;\n}\n:host .parties-map-icon {\n  margin: 0 10px;\n  background-position: center top;\n}\n:host .parties-map-icon.disabled {\n  background-position-y: -32px;\n}\n:host .parties-game-info-container {\n  line-height: 16px;\n  flex: 1;\n  overflow: hidden;\n}\n:host .parties-game-info-container > * {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n:host .parties-game-invite-name {\n  color: #f0e6d2;\n}\n:host .parties-game-info-subtitle {\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  overflow: hidden;\n}\n:host .parties-game-info-subtitle.parties-game-info-subtitle-hide {\n  display: none;\n}\n:host .parties-game-info-subtitle-disabled {\n  white-space: normal;\n}\n:host .parties-game-invite:hover {\n  background-image: linear-gradient(to right, rgba(10,203,230,0.2), rgba(10,203,230,0));\n}\n:host .parties-game-invite-buttons {\n  display: flex;\n  max-width: 35px;\n}\n:host .parties-game-invite-buttons.acceptable {\n  max-width: 67px;\n}\n:host .parties-accept-btn,\n:host .parties-decline-btn {\n  width: 30px;\n  height: 30px;\n  cursor: pointer;\n  flex-shrink: 0;\n}\n:host .parties-accept-btn {\n  outline: none;\n  border: none;\n  background: none;\n  cursor: pointer;\n  padding: 0;\n  background-image: url("/fe/lol-parties/bluebutton_checkmark.png");\n  background-size: cover;\n  background-position-y: 0px;\n}\n:host .parties-accept-btn:hover {\n  background-position-y: -30px;\n}\n:host .parties-accept-btn:active {\n  background-position-y: -60px;\n}\n:host .parties-accept-btn:disabled,\n:host .parties-accept-btn[disabled],\n:host .parties-accept-btn.disabled {\n  cursor: default;\n  background-position-y: -90px;\n}\n:host .parties-decline-btn {\n  outline: none;\n  border: none;\n  background: none;\n  cursor: pointer;\n  padding: 0;\n  -webkit-mask: url("/fe/lol-parties/x_mask.png") no-repeat center;\n  background-color: #0ac8b9;\n  -webkit-mask-size: 18px;\n  margin: 0 3px 0 0 /*rtl:0 0 0 3px*/;\n}\n:host .parties-decline-btn:hover {\n  background-color: #cdfafa;\n}\n:host .parties-decline-btn:active {\n  background-color: #005a82;\n}\n:host .parties-error-message {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  background-color: #bc213b;\n  color: #fff;\n  padding: 8px 10px;\n  direction: ltr;\n}\n:host .parties-error-message-close-btn {\n  -webkit-mask: url("/fe/lol-parties/x_mask.png") center no-repeat;\n  -webkit-mask-size: 18px;\n  background-color: #fff;\n  height: 18px;\n  width: 18px;\n  margin: 0 0 0 5px /*rtl:0 5px 0 0*/;\n  cursor: pointer;\n}\n:host .parties-game-invite-hide {\n  display: none;\n}\n', ""]), e.exports = i
        }, (e, t, n) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.default = void 0;
            var s, i = function(e, t) {
                    if (!t && e && e.__esModule) return e;
                    if (null === e || "object" != typeof e && "function" != typeof e) return {
                        default: e
                    };
                    var n = l(t);
                    if (n && n.has(e)) return n.get(e);
                    var s = {},
                        i = Object.defineProperty && Object.getOwnPropertyDescriptor;
                    for (var o in e)
                        if ("default" !== o && Object.prototype.hasOwnProperty.call(e, o)) {
                            var a = i ? Object.getOwnPropertyDescriptor(e, o) : null;
                            a && (a.get || a.set) ? Object.defineProperty(s, o, a) : s[o] = e[o]
                        } s.default = e, n && n.set(e, s);
                    return s
                }(n(1)),
                o = (s = n(31)) && s.__esModule ? s : {
                    default: s
                },
                a = n(34);

            function l(e) {
                if ("function" != typeof WeakMap) return null;
                var t = new WeakMap,
                    n = new WeakMap;
                return (l = function(e) {
                    return e ? n : t
                })(e)
            }
            const r = i.default.getProvider().getSocket();
            class c extends i.webComponents.ShadowElement {
                templateMarkup() {
                    return n(35)
                }
                stylesheetMarkup() {
                    return n(36)
                }
                constructor() {
                    super(), this._animationsEnabled = !0, this._haveGameInvites = !1, this._haveGameSearch = !1, this._isInQueueDelay = !1, this._listeners = {}, this._listeners.onUXSettingsChange = this._updateUXSettings.bind(this), this._matchmakingBinding = (0, i.dataBinding)("/lol-matchmaking", r), this._lobbyBinding = (0, i.dataBinding)("/lol-lobby", r)
                }
                connectedCallback() {
                    super.connectedCallback(), this.addEventListener("gameInviteAdded", this._listeners.onGameInviteAdded), this._observeGameInvites(), this._observeUXSettings(), this._observeSearch(), this.shadowRoot.querySelector("lol-parties-status-card").addEventListener("click", (() => this._showLobby()))
                }
                _showLobby() {
                    i.PartyAPI.showParty()
                }
                disconnectedCallback() {
                    super.disconnectedCallback(), this.removeEventListener("gameInviteAdded", this._listeners.onGameInviteAdded), this._unobserveUXSettings(), this._matchmakingBinding.unobserve(this), this._lobbyBinding.unobserve(this)
                }
                _observeSearch() {
                    this._matchmakingBinding.observe("v1/search", (e => {
                        this._onGameSearchChanged(e)
                    }))
                }
                _onGameSearchChanged(e) {
                    const t = this._haveGameSearch;
                    e && !this._gameSearchIsError(e) ? (this._haveGameSearch = !0, this._updateGameInvitesElement(e, "updateGameSearch")) : (this._haveGameSearch = !1, this._updateGameInvitesElement(null, "updateGameSearch"));
                    const n = this._isInQueueDelay;
                    e && e.lowPriorityData ? this._isInQueueDelay = e.lowPriorityData.reason === a.LOW_PRIORITY_REASONS.QUEUE_DELAY : this._isInQueueDelay = !1, t === this._haveGameSearch && n === this._isInQueueDelay || (this._toggleQueueDelayClass(), this._checkIfMagicShouldPlay()), this._updateGameSearchElement(e, "updateGameSearch"), this._updatePartyCardShow(!this._haveGameSearch)
                }
                _observeUXSettings() {
                    this._UXObserverAttached || (i.UXSettings.addObserver(this._listeners.onUXSettingsChange), this._UXObserverAttached = !0)
                }
                _unobserveUXSettings() {
                    this._UXObserverAttached && (i.UXSettings.removeObserver(this._listeners.onUXSettingsChange), this._UXObserverAttached = !1)
                }
                _updateUXSettings(e) {
                    e && !e.largeAreaAnimationsEnabled ? this._animationsEnabled = !1 : this._animationsEnabled = !0, this._toggleAnimationsOnSectionElement(), this._toggleAnimationsOnMagicElement()
                }
                _toggleAnimationsOnSectionElement() {
                    const e = this.shadowRoot.querySelector(".parties-game-section");
                    e && (this._animationsEnabled ? e.classList.add("use-animation") : e.classList.remove("use-animation"))
                }
                _updatePartyCardShow(e) {
                    const t = this.shadowRoot.querySelector(".parties-status-card-hide");
                    if (!t) return;
                    e !== !t.classList.contains("hide") && (e ? t.classList.remove("hide") : t.classList.add("hide"))
                }
                _observeGameInvites() {
                    this._lobbyBinding.observe("v2/received-invitations", (e => {
                        this._onGameInvitesChanged(e)
                    }))
                }
                _onGameInvitesChanged(e) {
                    const t = this._activeGameInvites(e);
                    this._haveGameInvites = t && t.length > 0, this._checkIfMagicShouldPlay(), this._updateGameInvitesElement(t, "onGameInvitesChanged")
                }
                _toggleAnimationsOnMagicElement() {
                    this._animationsEnabled ? this._videoElement || (this._videoElement = document.createElement("video"), this._videoElement.setAttribute("autoplay", !0), this._videoElement.setAttribute("loop", !0), this._videoElement.setAttribute("no-controls", !0), this._videoElement.setAttribute("preload", "auto"), this._getBackgroundContainerElement().appendChild(this._videoElement), this._checkIfMagicShouldPlay()) : (this._videoElement && this._videoElement.remove(), this._videoElement = null)
                }
                _toggleQueueDelayClass() {
                    const e = this.shadowRoot.querySelector(".parties-game-info-panel-bg-container");
                    e && (this._isInQueueDelay ? e.classList.add("queue-delay") : e.classList.remove("queue-delay"))
                }
                _updateGameInvitesElement(e, t) {
                    const n = this.shadowRoot.querySelector("lol-parties-game-invites");
                    n && n[t](e)
                }
                _updateGameSearchElement(e, t) {
                    const n = this.shadowRoot.querySelector("lol-parties-game-search");
                    n && n[t](e)
                }
                _getBackgroundContainerElement() {
                    return this.shadowRoot.querySelector(".parties-game-info-panel-bg-container")
                }
                _activeGameInvites(e) {
                    return e ? e.filter((function(e) {
                        return "DECLINED" !== e.state.toUpperCase()
                    })) : []
                }
                _gameSearchIsError(e) {
                    return !(!e.searchState || "Error" !== e.searchState)
                }
                _checkIfMagicShouldPlay() {
                    const e = this._haveGameInvites || this._haveGameSearch;
                    this.playMagic(e)
                }
                playMagic(e) {
                    const t = this._isInQueueDelay ? o.default.queueDelayVideo : o.default.backgroundVideo;
                    this._videoElement && (e ? this._videoElement.src ? this._videoElement.src !== t && (this._videoElement.pause(), this._videoElement.setAttribute("src", t), this._videoElement.play()) : (this._videoElement.setAttribute("src", t), this._videoElement.play()) : (this._videoElement.pause(), this._videoElement.removeAttribute("src")))
                }
            }
            c.tagName = "lol-parties-game-info-panel";
            var m = c;
            t.default = m
        }, (e, t, n) => {
            "use strict";
            const s = {
                backgroundVideo: n(32),
                queueDelayVideo: n(33)
            };
            e.exports = s
        }, (e, t, n) => {
            "use strict";
            e.exports = n.p + "social-panel-bg-loop.webm"
        }, (e, t, n) => {
            "use strict";
            e.exports = n.p + "queue-delay-bg-loop.webm"
        }, (e, t) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.SEARCH_ERROR_TYPES = t.MATCHMAKING_STATES = t.LOW_PRIORITY_REASONS = void 0;
            t.SEARCH_ERROR_TYPES = {
                QUEUE_DODGER: "QUEUE_DODGER",
                LEAVER_BUSTER_QUEUE_DELAY: "LEAVER_BUSTED",
                LEAVER_BUSTER_QUEUE_LOCKOUT: "LEAVER_BUSTER_QUEUE_LOCKOUT",
                LEAVER_BUSTER_TAINTED_WARNING: "LEAVER_BUSTER_TAINTED_WARNING",
                RANKED_MIN_LEVEL: "RANKED_MIN_LEVEL",
                PREREQUISITE_QUEUES_NOT_PLAYED: "PREREQUISITE_QUEUES_NOT_PLAYED"
            };
            t.MATCHMAKING_STATES = {
                SEARCHING: "Searching",
                FOUND: "Found"
            };
            t.LOW_PRIORITY_REASONS = {
                LEAVER_BUSTED: "LEAVER_BUSTED",
                QUEUE_DELAY: "QUEUE_DELAY"
            }
        }, e => {
            "use strict";
            e.exports = '<template id="lol-parties-template-game-info-panel">\r\n  <div class="parties-game-section">\r\n    <div class="parties-game-info-panel-bg-container"></div>\r\n    <div class="parties-game-info-panel-content">\r\n      <lol-parties-game-search class="parties-game-search-hide"></lol-parties-game-search>\r\n      <lol-parties-game-invites class="parties-game-invites-hide"></lol-parties-game-invites>\r\n      <lol-parties-status-card class="parties-status-card-hide"></lol-parties-status-card>\r\n    </div>\r\n  </div>\r\n</template>\r\n'
        }, (e, t, n) => {
            var s = n(8),
                i = n(9)(s);
            i.push([e.id, ':host .parties-game-section {\n  flex: 0 0 auto;\n  position: relative;\n  overflow: hidden;\n}\n:host .parties-game-section:not(.use-animation) lol-parties-game-search.parties-game-search-hide {\n  display: none;\n}\n:host .parties-game-section:not(.use-animation) lol-parties-game-invites.parties-game-invites-hide {\n  display: none;\n}\n:host .parties-game-section.use-animation lol-parties-game-search {\n  transition: height 300ms cubic-bezier(0, 0, 0, 1);\n  overflow: hidden;\n  height: 90px;\n}\n:host .parties-game-section.use-animation lol-parties-game-search.parties-game-search-hide {\n  height: 0px;\n}\n:host .parties-game-section.use-animation lol-parties-game-invites {\n  transition: max-height 300ms cubic-bezier(0, 0, 0, 1);\n  max-height: 202px;\n}\n:host .parties-game-section.use-animation lol-parties-game-invites.parties-game-invites-hide {\n  max-height: 0px;\n}\n:host .parties-game-info-panel-bg-container {\n  position: absolute;\n  top: 50%;\n  left: 0;\n  margin-top: -101px;\n  width: 100%;\n  height: 202px;\n  background-image: url("../../images/elements/static_game_panel_bg.png");\n}\n:host .parties-game-info-panel-bg-container.queue-delay {\n  background-image: url("../../images/elements/static_queue_delay_bg.jpg");\n}\n:host .parties-game-info-panel-content {\n  display: flex;\n  flex-direction: column;\n  position: relative;\n  max-height: 202px;\n}\n:host video {\n  height: 100%;\n}\n:host .parties-status-card-hide.hide {\n  display: none;\n}\n', ""]), e.exports = i
        }, (e, t, n) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.default = void 0;
            var s, i = function(e, t) {
                    if (!t && e && e.__esModule) return e;
                    if (null === e || "object" != typeof e && "function" != typeof e) return {
                        default: e
                    };
                    var n = r(t);
                    if (n && n.has(e)) return n.get(e);
                    var s = {},
                        i = Object.defineProperty && Object.getOwnPropertyDescriptor;
                    for (var o in e)
                        if ("default" !== o && Object.prototype.hasOwnProperty.call(e, o)) {
                            var a = i ? Object.getOwnPropertyDescriptor(e, o) : null;
                            a && (a.get || a.set) ? Object.defineProperty(s, o, a) : s[o] = e[o]
                        } s.default = e, n && n.set(e, s);
                    return s
                }(n(1)),
                o = n(21),
                a = n(34),
                l = (s = n(13)) && s.__esModule ? s : {
                    default: s
                };

            function r(e) {
                if ("function" != typeof WeakMap) return null;
                var t = new WeakMap,
                    n = new WeakMap;
                return (r = function(e) {
                    return e ? n : t
                })(e)
            }
            const c = i.default.getProvider().getSocket();
            class m extends i.webComponents.ShadowElement {
                templateMarkup() {
                    return n(38)
                }
                stylesheetMarkup() {
                    return n(39)
                }
                constructor() {
                    super(), this._listeners = {
                        onCancelQueue: this._cancelQueue.bind(this)
                    }, this._lobbyBinding = (0, i.dataBinding)("/lol-lobby", c), this._summonerBinding = (0, i.dataBinding)("/lol-summoner", c), this._observeLobby(), this._isInQueueDelay = !1, this._templateHelper = i.UIKit.getTemplateHelper(), this._tooltipManager = i.UIKit.getTooltipManager(), this._playerNames = i.playerNames
                }
                connectedCallback() {
                    super.connectedCallback(), this._setElementText(".parties-game-search-header-text", i.tra.get("parties_game_search_finding_match")), this._attachListener(".parties-game-search-cancel", "click", this._listeners.onCancelQueue)
                }
                disconnectedCallback() {
                    super.disconnectedCallback(), this._detachListener(".parties-game-search-cancel", "click", this._listeners.onCancelQueue), this._removeTooltip(this._lowPriorityTooltipTarget), this._lobbyBinding.unobserve("v2/lobby", this)
                }
                _observeLobby() {
                    this._lobbyBinding.observe("v2/lobby", (e => {
                        this._updateLobby(e)
                    }))
                }
                _updateLobby(e) {
                    this._lobby = e, this._updateMapImage(e), this._updateDivider(e)
                }
                updateGameSearch(e) {
                    this._gameSearch = e, e ? e.searchState && "Error" === e.searchState || (this._gameSearchStarted || (this._onGameSearchStarted(e), this._gameSearchStarted = !0), this._updateQueueDelayMessaging(e), this._updatePenaltyTime(e), this._updateTimeInQueue(e), this._updateEstimatedQueueTime(e)) : this._gameSearchStarted && (this._onGameSearchEnded(), this._gameSearchStarted = !1)
                }
                _onGameSearchStarted(e) {
                    this._show(), this._updateLowPriorityTooltip(e), this.dispatchEvent(new Event("gameSearchStarted", {
                        bubbles: !0
                    }))
                }
                _show() {
                    this.classList.remove("parties-game-search-hide")
                }
                _hide() {
                    this.classList.add("parties-game-search-hide")
                }
                _onGameSearchEnded() {
                    this._hide(), this._removeTooltip(this._lowPriorityTooltipTarget), this._clearLowPriorityAlert()
                }
                _updateTimeInQueue(e) {
                    const {
                        timeInQueue: t
                    } = e;
                    i.lodash.isNumber(t) && this._setElementText(".parties-game-search-elapsed", this._secondsFormatted(t))
                }
                _updateEstimatedQueueTime(e) {
                    const {
                        estimatedQueueTime: t
                    } = e;
                    if (t) {
                        const e = this._secondsFormatted(t),
                            n = i.tra.get("parties_game_search_estimated_time") + " " + e;
                        this._setElementText(".parties-game-search-info", n)
                    }
                }
                _updatePenaltyTime(e) {
                    const {
                        lowPriorityData: t
                    } = e, n = t ? t.penaltyTime : null;
                    if (t && t.reason === a.LOW_PRIORITY_REASONS.LEAVER_BUSTED && n) {
                        this._removeClass("priority-max-alert", ".parties-game-search-elapsed"), this._removeClass("priority-alert", ".parties-game-search-elapsed"), this._removeClass("priority-warning", ".parties-game-search-elapsed");
                        let e = null;
                        n >= 1200 ? e = "priority-max-alert" : n >= 600 && n < 1200 ? e = "priority-alert" : n > 0 && n < 600 && (e = "priority-warning"), e && this._addClass(e, ".parties-game-search-elapsed")
                    }
                }
                _updateQueueDelayMessaging(e) {
                    const t = this._isInQueueDelay;
                    this._isInQueueDelay = e && e.lowPriorityData && e.lowPriorityData.reason && e.lowPriorityData.reason === a.LOW_PRIORITY_REASONS.QUEUE_DELAY, t !== this._isInQueueDelay && (this._isInQueueDelay ? (this._addClass("queue-delay", ".parties-game-search-status"), this._setElementText(".parties-game-search-info", i.tra.get("low_priority_queue_delay_search_info"))) : (this._removeClass("queue-delay", ".parties-game-search-status"), this._setElementText(".parties-game-search-info", ""), this._removeTooltip(this._lowPriorityTooltipTarget)))
                }
                _clearLowPriorityAlert() {
                    this._removeClass("priority-max-alert", ".parties-game-search-elapsed"), this._removeClass("priority-alert", ".parties-game-search-elapsed"), this._removeClass("priority-warning", ".parties-game-search-elapsed")
                }
                _updateLowPriorityTooltip(e) {
                    const {
                        lowPriorityData: t
                    } = e, n = t ? t.penalizedSummonerIds : [];
                    t && t.reason === a.LOW_PRIORITY_REASONS.LEAVER_BUSTED ? this._assignLowPriorityQueueTooltip(n, e) : t && t.reason === a.LOW_PRIORITY_REASONS.QUEUE_DELAY ? this._assignQueueDelayTooltip() : this._removeTooltip(this._lowPriorityTooltipTarget)
                }
                _updateDivider(e) {
                    e && e.invitations && e.invitations.length > 0 ? this._removeClass("parties-game-search-hide", ".parties-game-search-divider") : this._addClass("parties-game-search-hide", ".parties-game-search-divider")
                }
                _updateMapImage(e) {
                    if (!e) return;
                    const t = this._mapKeyFromLobby(e);
                    this._lastMapKey && this._removeClass(this._lastMapKey, ".parties-game-search-map"), t && this._addClass(t, ".parties-game-search-map"), this._lastMapKey = t
                }
                _mapKeyFromLobby(e) {
                    if (!e.gameConfig) return "";
                    const {
                        gameMode: t
                    } = e.gameConfig, {
                        mapId: n
                    } = e.gameConfig;
                    if (t && n) {
                        const e = l.default.getMapModeInfo(n, t);
                        return e && e.isRGM ? "game_map_rotating_game_mode" : o.MAP_TO_I18N_KEY[n]
                    }
                    return ""
                }
                _cancelQueue() {
                    i.Audio.getChannel("sfx-ui").playSound("/fe/lol-parties/sfx-soc-ui-click-generic.ogg"), this._lobbyBinding.delete("/v2/lobby/matchmaking/search")
                }
                _createLowPriorityTooltip(e, t) {
                    const n = document.createElement("lol-uikit-tooltip"),
                        s = t.templateHelper.contentBlockTooltip(t.tra.get("low_priority_queue_modal_header"), t.tra.get("low_priority_queue_notification_body"), "tooltip-large"),
                        i = document.createElement("ul");
                    return i.className = "title-list", t.summonerNames && t.summonerNames.forEach((function(e) {
                        const t = document.createElement("li");
                        t.innerHTML = e, i.appendChild(t)
                    })), s.appendChild(i), n.appendChild(s), n
                }
                _assignQueueDelayTooltip() {
                    this._lowPriorityTooltipTarget = this.shadowRoot.querySelector(".parties-game-search-body");
                    const e = document.createElement("lol-uikit-tooltip"),
                        t = this._templateHelper.contentBlockTooltip(i.tra.get("low_priority_queue_delay_warning_header"), i.tra.get("low_priority_queue_delay_warning_body"), "tooltip-large");
                    e.appendChild(t), this._tooltipManager.assign(this._lowPriorityTooltipTarget, e, {}, {
                        orientation: "left",
                        targetAnchor: {
                            x: "left",
                            y: "center"
                        },
                        tooltipAnchor: {
                            x: "right",
                            y: "center"
                        }
                    })
                }
                async _assignLowPriorityQueueTooltip(e) {
                    const t = (await Promise.all(e.map((e => this._playerNames.getDisplayNameBySummonerId(e))))).map((({
                        playerNameFull: e
                    }) => e));
                    this._lowPriorityTooltipTarget = this.shadowRoot.querySelector(".parties-game-search-body"), this._tooltipManager.assign(this._lowPriorityTooltipTarget, this._createLowPriorityTooltip, {
                        tra: i.tra,
                        templateHelper: this._templateHelper,
                        summonerNames: t
                    }, {
                        orientation: "left",
                        targetAnchor: {
                            x: "left",
                            y: "center"
                        },
                        tooltipAnchor: {
                            x: "right",
                            y: "center"
                        }
                    })
                }
                _secondsFormatted(e) {
                    if ("number" != typeof e) return "-:--";
                    const t = Math.floor(e / 60);
                    return (e = Math.floor(e % 60)) < 10 && (e = "0" + e), t + ":" + e
                }
                _setElementText(e, t) {
                    const n = this.shadowRoot.querySelector(e);
                    n && (n.innerHTML = t)
                }
                _attachListener(e, t, n) {
                    const s = this.shadowRoot.querySelector(e);
                    s && s.addEventListener(t, n)
                }
                _detachListener(e, t, n) {
                    const s = this.shadowRoot.querySelector(e);
                    s && s.removeEventListener(t, n)
                }
                _addClass(e, t) {
                    const n = this.shadowRoot.querySelector(t);
                    n && !n.classList.contains(e) && n.classList.add(e)
                }
                _removeClass(e, t) {
                    const n = this.shadowRoot.querySelector(t);
                    n && n.classList.contains(e) && n.classList.remove(e)
                }
                _removeTooltip(e) {
                    e && this._tooltipManager.unassign(e)
                }
            }
            m.tagName = "lol-parties-game-search";
            var u = m;
            t.default = u
        }, e => {
            "use strict";
            e.exports = '<template id="lol-parties-template-game-search">\r\n  <div class="parties-game-search-status">\r\n\r\n    <div class="parties-game-search-header">\r\n      <div class="parties-game-search-header-text"></div>\r\n      <div class="parties-game-search-cancel"></div>\r\n    </div>\r\n\r\n    <div class="parties-game-search-body">\r\n      <div class="parties-game-search-map"></div>\r\n      <div class="parties-game-search-body-data">\r\n        <div class="parties-game-search-elapsed"></div>\r\n        <div class="parties-game-search-info"></div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class="parties-game-search-divider parties-game-search-hide"></div>\r\n  </div>\r\n</template>\r\n'
        }, (e, t, n) => {
            var s = n(8),
                i = n(9)(s);
            i.push([e.id, ':host .parties-game-search-elapsed,\n:host .parties-game-search-header-text {\n  font-family: var(--font-display);\n}\n:host .parties-game-search-info {\n  font-family: var(--font-body);\n}\n:host .parties-game-search-info,\n:host .parties-game-search-elapsed {\n  -webkit-user-select: none;\n}\n:host .parties-game-search-info,\n:host .parties-game-search-elapsed {\n  font-kerning: normal;\n  -webkit-font-feature-settings: "kern" 1;\n  -webkit-font-smoothing: antialiased;\n}\n:host .parties-game-search-elapsed {\n  text-transform: uppercase;\n}\n:host .parties-game-search-elapsed:lang(ko-kr),\n:host .parties-game-search-elapsed:lang(ja-jp),\n:host .parties-game-search-elapsed:lang(tr-tr),\n:host .parties-game-search-elapsed:lang(el-gr),\n:host .parties-game-search-elapsed:lang(th-th),\n:host .parties-game-search-elapsed:lang(zh-tw) {\n  text-transform: none;\n}\n:host .parties-game-search-elapsed {\n  color: #f0e6d2;\n  font-size: 30px;\n  font-weight: 700;\n  line-height: 32px;\n  letter-spacing: 0.05em;\n}\n:host .parties-game-search-elapsed:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host .parties-game-search-info {\n  color: #a09b8c;\n  font-size: 12px;\n  font-weight: normal;\n  line-height: 16px;\n  letter-spacing: 0.025em;\n  -webkit-font-smoothing: subpixel-antialiased;\n}\n:host .parties-game-search-info:lang(ja-jp) {\n  font-size: 13px;\n}\n:host .parties-game-search-info:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host .parties-game-search-elapsed,\n:host .parties-game-search-header-text {\n  font-family: var(--font-display);\n}\n:host .parties-game-search-info {\n  font-family: var(--font-body);\n}\n:host .parties-game-search-map {\n  width: 34px;\n  height: 32px;\n  background-size: auto 64px;\n  background-repeat: no-repeat;\n}\n:host .parties-game-search-map.game_map_howling_abyss {\n  background-image: url("/fe/lol-parties/map_ha.png");\n}\n:host .parties-game-search-map.game_map_summoners_rift {\n  background-image: url("/fe/lol-parties/map_sr.png");\n}\n:host .parties-game-search-map.game_map_twisted_treeline {\n  background-image: url("/fe/lol-parties/map_tt.png");\n}\n:host .parties-game-search-map.game_map_rotating_game_mode {\n  background-image: url("/fe/lol-parties/map_rgm.png");\n}\n:host .parties-game-search-map.game_map_21 {\n  background-image: url("/fe/lol-parties/map_21.png");\n}\n:host .parties-game-search-map.game_map_22 {\n  background-image: url("/fe/lol-parties/map_tft.png");\n}\n:host .parties-game-search-map.game_map_30 {\n  background-image: url("/lol-game-data/assets/content/src/LeagueClient/GameModeAssets/Cherry/img/icon-v2.png");\n  background-size: 30px 30px;\n  background-position: center;\n}\n:host {\n  display: block;\n  position: relative;\n  flex: 0 0 auto;\n/* Divider line below each game queue */\n/* Hide the divider if the game queue is hovered */\n}\n:host .parties-game-search-status {\n  direction: ltr;\n}\n:host .parties-game-search-status.queue-delay .parties-game-search-info {\n  position: relative;\n  color: #a09b8c;\n  display: flex;\n}\n:host .parties-game-search-status.queue-delay .parties-game-search-info::before {\n  position: relative;\n  top: 1px;\n  width: 18px;\n  height: 18px;\n  margin-right: 5px;\n  content: \'\';\n  -webkit-mask: url("/fe/lol-parties/icon_warning_mask.png") no-repeat center;\n  -webkit-mask-size: contain;\n  background-color: #f0e6d2;\n}\n:host .parties-game-search-status.queue-delay .parties-game-search-info::before {\n  position: absolute;\n  left: 142px /*rtl:0px*/;\n  top: -2px;\n}\n:host .parties-game-search-status.queue-delay .parties-game-search-divider {\n  background-color: #413b07;\n}\n:host .parties-game-search-header {\n  display: flex;\n  justify-content: space-between;\n  height: 32px;\n  align-items: center;\n  padding: 0 9px;\n}\n:host .parties-game-search-body-data {\n  flex: 1;\n}\n:host .parties-game-search-info {\n  color: #0acbe6;\n}\n:host .parties-game-search-elapsed {\n  display: flex;\n  align-items: center;\n}\n:host .parties-game-search-elapsed.priority-warning::before {\n  position: relative;\n  top: 1px;\n  width: 18px;\n  height: 18px;\n  margin-right: 5px;\n  content: \'\';\n  -webkit-mask: url("/fe/lol-parties/icon_warning_mask.png") no-repeat center;\n  -webkit-mask-size: contain;\n  background-color: #c89b3c;\n}\n:host .parties-game-search-elapsed.priority-alert::before {\n  position: relative;\n  top: 1px;\n  width: 18px;\n  height: 18px;\n  margin-right: 5px;\n  content: \'\';\n  -webkit-mask: url("/fe/lol-parties/icon_warning_mask.png") no-repeat center;\n  -webkit-mask-size: contain;\n  background-color: #ff2345;\n}\n:host .parties-game-search-elapsed.priority-max-alert {\n  color: #ff2345;\n}\n:host .parties-game-search-elapsed.priority-max-alert::before {\n  position: relative;\n  top: 1px;\n  width: 18px;\n  height: 18px;\n  margin-right: 5px;\n  content: \'\';\n  -webkit-mask: url("/fe/lol-parties/icon_warning_mask.png") no-repeat center;\n  -webkit-mask-size: contain;\n  background-color: #ff2345;\n}\n:host .parties-game-search-body {\n  display: flex;\n  align-items: flex-start;\n  position: relative;\n  padding: 0 5px 10px 10px /*rtl:0 10px 10px 5px*/;\n}\n:host .parties-game-search-map {\n  margin: 5px 10px 0 0 /*rtl:5px 0 0 10px*/;\n}\n:host .parties-game-search-header-text {\n  color: #a09b8c;\n  font-size: 12px;\n  text-transform: uppercase;\n  font-weight: normal;\n  line-height: 16px;\n  margin: 2px 0;\n  letter-spacing: 1px;\n  display: flex;\n  position: relative;\n}\n:host .parties-game-search-cancel {\n  outline: none;\n  border: none;\n  background: none;\n  cursor: pointer;\n  padding: 0;\n  -webkit-mask: url("/fe/lol-parties/x_mask.png") no-repeat center;\n  -webkit-mask-size: 18px;\n  background-color: #c8aa6e;\n  width: 18px;\n  height: 18px;\n}\n:host .parties-game-search-cancel:hover {\n  background-color: #f0e6d2;\n}\n:host .parties-game-search-cancel:active {\n  background-color: #463714;\n}\n:host .parties-game-search-divider {\n  content: \'\';\n  position: absolute;\n  bottom: 0;\n  left: 10px;\n  width: calc(100% - 20px);\n  height: 1px;\n  background-color: #005a82;\n}\n:host .parties-game-search-status:hover .parties-game-search-divider {\n  background: none;\n}\n:host .parties-game-search-hide {\n  display: none;\n}\n', ""]), e.exports = i
        }, (e, t, n) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.default = void 0;
            var s, i = function(e, t) {
                    if (!t && e && e.__esModule) return e;
                    if (null === e || "object" != typeof e && "function" != typeof e) return {
                        default: e
                    };
                    var n = r(t);
                    if (n && n.has(e)) return n.get(e);
                    var s = {},
                        i = Object.defineProperty && Object.getOwnPropertyDescriptor;
                    for (var o in e)
                        if ("default" !== o && Object.prototype.hasOwnProperty.call(e, o)) {
                            var a = i ? Object.getOwnPropertyDescriptor(e, o) : null;
                            a && (a.get || a.set) ? Object.defineProperty(s, o, a) : s[o] = e[o]
                        } s.default = e, n && n.set(e, s);
                    return s
                }(n(1)),
                o = (s = n(12)) && s.__esModule ? s : {
                    default: s
                },
                a = n(41),
                l = n(15);

            function r(e) {
                if ("function" != typeof WeakMap) return null;
                var t = new WeakMap,
                    n = new WeakMap;
                return (r = function(e) {
                    return e ? n : t
                })(e)
            }
            const c = {
                    open: n(42),
                    closed: n(32)
                },
                m = {
                    open: "parties_open_party_status_header",
                    closed: "parties_closed_party_status_header"
                },
                u = i.default.getProvider().getSocket();
            class d extends i.webComponents.ShadowElement {
                templateMarkup() {
                    return n(43)
                }
                stylesheetMarkup() {
                    return n(44)
                }
                constructor() {
                    super(), this._lobbyBinding = (0, i.dataBinding)("/lol-lobby", u), this._playerSettingsBinding = (0, i.dataBinding)("/lol-settings", u), this._observeLobby(), this._templateHelper = i.UIKit.getTemplateHelper(), this._tooltipManager = i.UIKit.getTooltipManager()
                }
                connectedCallback() {
                    super.connectedCallback(), this._playerSettingsBinding.observe("/v2/ready", this, (e => {
                        e && (this._playerSettingsBinding.unobserve("/v2/ready", this), this._assignPartyInfoTooltip())
                    })), this._boundSettingsObserver = this._settingsObserver.bind(this), this._enableAnimations = !1, i.UXSettings.addObserver(this._boundSettingsObserver)
                }
                disconnectedCallback() {
                    super.disconnectedCallback(), this._playerSettingsBinding.unobserve("/v2/ready", this), this._unassignPartyInfoTooltip(), i.UXSettings.removeObserver(this._boundSettingsObserver), this._lobbyBinding.unobserve("v2/lobby", this)
                }
                _settingsObserver(e) {
                    this._enableAnimations = e.largeAreaAnimationsEnabled, this._playVideo()
                }
                _observeLobby() {
                    this._lobbyBinding.observe("v2/lobby", (e => {
                        this._updateLobby(e)
                    }))
                }
                _updateMapImage(e) {
                    if (!e) return;
                    const t = o.default.mapKey(e && e.gameConfig);
                    this._lastMapKey && this._removeClass(this._lastMapKey, ".parties-status-card-map"), t && this._addClass(t, ".parties-status-card-map"), this._lastMapKey = t
                }
                _setPlayBackground(e) {
                    if (e) {
                        if (!this._videoElement) {
                            const t = this.shadowRoot.querySelector(".parties-status-card-bg-container");
                            this._videoElement = document.createElement("video"), this._videoElement.setAttribute("no-controls", !0), this._videoElement.setAttribute("preload", "auto"), this._videoElement.setAttribute("autoplay", !0), this._videoElement.setAttribute("loop", !0), t && t.appendChild(this._videoElement), this._videoElement.setAttribute("src", e)
                        }
                        this._videoElement.getAttribute("src") !== e && this._videoElement.setAttribute("src", e), this._playVideo()
                    } else this._videoElement && this._videoElement.pause(), this._videoElement && this._videoElement.remove(), this._videoElement = null
                }
                _isTFTCustom(e) {
                    return e.gameMode === l.GAME_MODES.TFT && e.customSpectatorPolicy !== a.CUSTOM_GAME_SPECTATOR_VALUES.NotAllowed
                }
                _updateRosterIcons(e) {
                    if (!this._canUpdateRosterIcons(e)) return "";
                    const {
                        maxLobbySize: t
                    } = e.gameConfig, n = e.members.length, s = [];
                    for (let e = 0; e < t; e++) e < n ? s.push('<div class="parties-status-member-joined"></div>') : s.push('<div class="parties-status-member-empty"></div>');
                    return s.join("")
                }
                _canUpdateRosterIcons(e) {
                    return e && e.gameConfig && e.members && e.gameConfig.maxLobbySize
                }
                _updateLobby(e) {
                    this._lobby = e, this._updatePartiesStatusCard()
                }
                _updatePartiesStatusCard() {
                    if (this._lobby && this._lobby.partyType && !this._isTFTCustom(this._lobby.gameConfig)) switch (this._setPlayBackground(c[this._lobby.partyType]), this._setElementText(".parties-status-card-header-text", i.tra.get(m[this._lobby.partyType]) || ""), this._removeClass("parties-status-card-hide", ".parties-status-card"), this._lobby.partyType) {
                        case "open":
                            this._removeClass("closed", ".parties-status-card"), this._addClass("open", ".parties-status-card");
                            break;
                        case "closed":
                            this._removeClass("open", ".parties-status-card"), this._addClass("closed", ".parties-status-card")
                    } else this._addClass("parties-status-card-hide", ".parties-status-card"), this._setPlayBackground(null);
                    this._updateMapImage(this._lobby);
                    const e = this._lobby && o.default.gameType(this._lobby.gameConfig) || "";
                    this._setElementText(".parties-status-mode-text", e), this._setElementText(".parties-status-member-icons", this._updateRosterIcons(this._lobby))
                }
                _setElementText(e, t) {
                    const n = this.shadowRoot.querySelector(e);
                    n && (n.innerHTML = t)
                }
                _addClass(e, t) {
                    const n = this.shadowRoot.querySelector(t);
                    n && !n.classList.contains(e) && n.classList.add(e)
                }
                _removeClass(e, t) {
                    const n = this.shadowRoot.querySelector(t);
                    n && n.classList.contains(e) && n.classList.remove(e)
                }
                _partyHeaderElement() {
                    return this.shadowRoot.querySelector(".parties-status-card-header")
                }
                _partyInfoElement() {
                    return this.shadowRoot.querySelector(".parties-status-card-header-info")
                }
                _setPlayerSeenOpenPartiesTooltip() {
                    this._playerSettingsBinding.patch("v1/account/lol-parties", {
                        data: {
                            hasSeenOpenPartyTooltip: !0
                        },
                        schemaVersion: 1
                    })
                }
                _getOpenPartyTooltipSetting() {
                    return this._playerSettingsBinding.get("v1/account/lol-parties").then((e => {
                        const t = e && e.data;
                        return !(!t || !t.hasSeenOpenPartyTooltip)
                    }))
                }
                _assignPartyInfoTooltip() {
                    const e = this._partyInfoElement();
                    if (e) {
                        const t = i.UIKit.getTooltipManager(),
                            n = document.createElement("lol-uikit-tooltip"),
                            s = i.tra.get("parties_open_party_overview_header"),
                            o = i.tra.get("parties_open_party_overview"),
                            a = i.UIKit.getTemplateHelper().contentBlockTooltip(s, o, "dialog-medium", "parties-status-card-info"),
                            l = a.querySelector("h6"),
                            r = '<div class="parties-status-card-header-icon"></div>',
                            c = '<div class="parties-status-card-header-text">';
                        l.innerHTML = r + c + l.innerHTML + "</div>", this._getOpenPartyTooltipSetting().then((s => {
                            if (!s) {
                                n.appendChild(a);
                                const s = {
                                    type: "dialog-medium",
                                    showDelay: 0,
                                    targetAnchor: {
                                        x: "left",
                                        y: "center"
                                    },
                                    tooltipAnchor: {
                                        x: "right",
                                        y: "top"
                                    },
                                    offset: {
                                        x: 0,
                                        y: -20
                                    }
                                };
                                t.assign(e, n, {}, s), e.style.visibility = "visible", this._setPlayerSeenOpenPartiesTooltip()
                            }
                        }))
                    }
                }
                _unassignPartyInfoTooltip() {
                    const e = this._partyInfoElement();
                    i.UIKit.getTooltipManager().unassign(e)
                }
                _playVideo() {
                    this._videoElement && (this._enableAnimations ? this._videoElement.play() : this._videoElement.pause())
                }
            }
            d.tagName = "lol-parties-status-card";
            var p = d;
            t.default = p
        }, (e, t) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.GAME_AVAILABILITY_TYPES = t.CUSTOM_GAME_SPECTATOR_VALUES = t.CUSTOM_GAME_SPECTATOR_TYPES = t.CUSTOM_GAME_SPECTATOR_DELAY_OPTIONS = t.CUSTOM_GAME_NORMAL_MUTATORS = t.CUSTOM_GAME_MUTATOR_NAMES = t.CUSTOM_GAME_MAP_MUTATOR_OVERRIDES = t.CUSTOM_GAME_ERROR_CODES = void 0;
            t.CUSTOM_GAME_MUTATOR_NAMES = {
                GAME_CFG_DRAFT_TOURNAMENT: "tournament_draft",
                GAME_CFG_PICK_RANDOM: "random",
                GAME_CFG_DRAFT_STD: "draft",
                GAME_CFG_PICK_BLIND: "blind",
                GAME_CFG_TEAM_BUILDER_BLIND: "blind",
                GAME_CFG_TEAM_BUILDER_DRAFT: "draft",
                GAME_CFG_COUNTER_PICK: "counter",
                GAME_CFG_PICK_SIMUL_TD: "simultaneous",
                GAME_CFG_PICK_SIMUL: "simultaneous",
                GAME_CFG_BLIND_DUPE: "all_for_one",
                GAME_CFG_BLIND_DRAFT_ST: "blind_draft",
                NORMAL_TFT: "tft",
                RANKED_TFT_TURBO: "hyper_roll",
                GAME_MUTATOR_OVERRIDE_SHOWDOWN: "showdown"
            };
            t.CUSTOM_GAME_SPECTATOR_TYPES = {
                AllAllowed: "all",
                NotAllowed: "none",
                LobbyAllowed: "lobby",
                FriendsAllowed: "dropin"
            };
            t.CUSTOM_GAME_SPECTATOR_VALUES = {
                AllAllowed: "AllAllowed",
                NotAllowed: "NotAllowed",
                LobbyAllowed: "LobbyAllowed",
                FriendsAllowed: "FriendsAllowed"
            };
            t.CUSTOM_GAME_SPECTATOR_DELAY_OPTIONS = {
                AddDelay: "add_delay",
                NoDelay: "no_delay"
            };
            t.GAME_AVAILABILITY_TYPES = {
                Available: "available",
                PlatformDisabled: "disabled",
                DoesntMeetRequirements: "requirements",
                ClientUnsupported: "unsupported"
            };
            t.CUSTOM_GAME_ERROR_CODES = {
                401: "UserBannedException",
                403: "IncorrectPasswordException",
                404: "GameNotFoundException",
                409: "GameNameNotUniqueException",
                423: "GameflowLocked",
                430: "PlayerAlreadyInGameException",
                431: "TeamFullException",
                432: "GameFullException",
                433: "NotEnoughPlayersException",
                434: "TooManyPlayersException",
                435: "GameModeNotSupportedException",
                437: "InvalidCustomGameNameException",
                500: "UnknownException",
                530: "InvalidGameStateException",
                531: "StaleGameVersionException",
                532: "GameStartUnbalancedTeamsException",
                533: "GameNotDraftModeTurnException"
            };
            t.CUSTOM_GAME_NORMAL_MUTATORS = [1, 2, 4, 6, 100, 101];
            t.CUSTOM_GAME_MAP_MUTATOR_OVERRIDES = {
                12: [7]
            }
        }, (e, t, n) => {
            "use strict";
            e.exports = n.p + "party-status-bg-loop.webm"
        }, e => {
            "use strict";
            e.exports = '<template id="lol-parties-template-status-card">\r\n    <div class="parties-status-card parties-status-card-hide">\r\n\r\n        <div class="parties-status-card-bg-container"></div>\r\n\r\n        <div class="parties-status-card-header">\r\n            <div class="parties-status-card-header-icon"></div>\r\n            <div class="parties-status-card-header-text"></div>\r\n            <lol-uikit-info-icon class="parties-status-card-header-info"></lol-uikit-info-icon>\r\n        </div>\r\n\r\n        <div class="parties-status-card-body">\r\n            <div class="parties-status-card-map"></div>\r\n            <div class="parties-status-card-data">\r\n                <div class="parties-status-member-icons"></div>\r\n                <div class="parties-status-mode-text"></div>\r\n            </div>\r\n        </div>\r\n\r\n        <div class="parties-status-card-divider"></div>\r\n    </div>\r\n</template>\r\n'
        }, (e, t, n) => {
            var s = n(8),
                i = n(9)(s);
            i.push([e.id, ':host .parties-status-card-header .parties-status-card-header-text {\n  font-family: var(--font-display);\n}\n:host .parties-status-card-header .parties-status-card-header-text {\n  -webkit-user-select: none;\n}\n:host .parties-status-card-header .parties-status-card-header-text {\n  font-kerning: normal;\n  -webkit-font-feature-settings: "kern" 1;\n  -webkit-font-smoothing: antialiased;\n}\n:host .parties-status-card-header .parties-status-card-header-text {\n  text-transform: uppercase;\n}\n:host .parties-status-card-header .parties-status-card-header-text:lang(ko-kr),\n:host .parties-status-card-header .parties-status-card-header-text:lang(ja-jp),\n:host .parties-status-card-header .parties-status-card-header-text:lang(tr-tr),\n:host .parties-status-card-header .parties-status-card-header-text:lang(el-gr),\n:host .parties-status-card-header .parties-status-card-header-text:lang(th-th),\n:host .parties-status-card-header .parties-status-card-header-text:lang(zh-tw) {\n  text-transform: none;\n}\n:host .parties-status-card-header .parties-status-card-header-text {\n  color: #f0e6d2;\n  font-size: 12px;\n  font-weight: 700;\n  line-height: 16px;\n  letter-spacing: 0.075em;\n}\n:host .parties-status-card-header .parties-status-card-header-text:lang(ja-jp) {\n  font-size: 13px;\n}\n:host .parties-status-card-header .parties-status-card-header-text:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host .parties-status-card-header .parties-status-card-header-text {\n  font-family: var(--font-display);\n}\n:host .parties-status-card-body .parties-status-card-map {\n  width: 34px;\n  height: 32px;\n  background-size: auto 64px;\n  background-repeat: no-repeat;\n}\n:host .parties-status-card-body .parties-status-card-map.game_map_howling_abyss {\n  background-image: url("/fe/lol-parties/map_ha.png");\n}\n:host .parties-status-card-body .parties-status-card-map.game_map_summoners_rift {\n  background-image: url("/fe/lol-parties/map_sr.png");\n}\n:host .parties-status-card-body .parties-status-card-map.game_map_twisted_treeline {\n  background-image: url("/fe/lol-parties/map_tt.png");\n}\n:host .parties-status-card-body .parties-status-card-map.game_map_rotating_game_mode {\n  background-image: url("/fe/lol-parties/map_rgm.png");\n}\n:host .parties-status-card-body .parties-status-card-map.game_map_21 {\n  background-image: url("/fe/lol-parties/map_21.png");\n}\n:host .parties-status-card-body .parties-status-card-map.game_map_22 {\n  background-image: url("/fe/lol-parties/map_tft.png");\n}\n:host .parties-status-card-body .parties-status-card-map.game_map_30 {\n  background-image: url("/lol-game-data/assets/content/src/LeagueClient/GameModeAssets/Cherry/img/icon-v2.png");\n  background-size: 30px 30px;\n  background-position: center;\n}\nlol-uikit-content-block.parties-status-card-info {\n  width: 250px;\n  white-space: normal;\n}\nlol-uikit-content-block.parties-status-card-info h6 {\n  margin-bottom: 8px;\n  display: flex;\n  justify-content: center;\n}\nlol-uikit-content-block.parties-status-card-info h6 .parties-status-card-header-text {\n  margin-left: 2px;\n  margin-top: 2px;\n}\n.parties-status-card-header-icon {\n  background-image: url("/fe/lol-parties/party_panel_header_icon.png");\n  width: 20px;\n  height: 20px;\n  background-repeat: no-repeat;\n  background-size: contain;\n  display: inline-block;\n}\n:host .parties-status-card {\n  position: relative;\n  cursor: pointer;\n}\n:host .parties-status-card.open {\n  background: #143c14;\n}\n:host .parties-status-card.closed {\n  background: #0d2641;\n}\n:host .parties-status-card .parties-status-card-bg-container {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 202px;\n  color: #36d987;\n}\n:host .parties-status-card-hide {\n  display: none;\n}\n:host .parties-status-card-header {\n  direction: ltr;\n  display: flex;\n  justify-content: space-between;\n  height: 22px;\n  position: relative;\n  align-items: center;\n  padding: 5px;\n  margin: 0 0 0 8px /*rtl:0 8px 0 0*/;\n}\n:host .parties-status-card-header .parties-status-card-header-icon {\n  background-image: url("/fe/lol-parties/party_panel_header_icon.png");\n  width: 20px;\n  height: 20px;\n  flex-grow: 0;\n  background-repeat: no-repeat;\n  background-size: contain;\n}\n:host .parties-status-card-header .parties-status-card-header-text {\n  display: flex;\n  align-items: center;\n  height: 32px;\n  color: #a09b8c;\n  padding: 0 5px 0 9px;\n  flex-grow: 1;\n  pointer-events: none;\n  margin-top: 1px;\n  text-transform: uppercase;\n}\n:host .parties-status-card-header .parties-status-card-header-info {\n  flex-grow: 0;\n  width: 16px;\n  height: 16px;\n  margin-right: 10px;\n  visibility: hidden;\n}\n:host .parties-status-card-body {\n  direction: ltr;\n  display: flex;\n  align-items: center;\n  position: relative;\n  margin-top: -4px;\n  padding: 0 5px 10px 10px /*rtl:0 10px 10px 5px*/;\n}\n:host .parties-status-card-body .parties-status-card-map {\n  margin: 7px 10px 0 0 /*rtl:7px 0 0 10px*/;\n}\n:host .parties-status-card-body .parties-status-member-icons {\n  display: flex;\n  align-items: flex-start;\n  padding: 0 0 0 6px /*rtl:0 6px 0 0*/;\n}\n:host .parties-status-card-body .parties-status-member-icons .parties-status-member-empty {\n  width: 34px;\n  height: 34px;\n  margin: 0 0 0 -16px /*rtl:0 -16px 0 0*/;\n  background-image: url("/fe/lol-parties/player_empty.png");\n  background-repeat: no-repeat;\n  background-position: center top;\n  background-size: contain;\n}\n:host .parties-status-card-body .parties-status-member-icons .parties-status-member-joined {\n  width: 34px;\n  height: 34px;\n  margin: 0 0 0 -16px /*rtl:0 -16px 0 0*/;\n  background-image: url("/fe/lol-parties/player_joined.png");\n  background-repeat: no-repeat;\n  background-position: center top;\n  background-size: contain;\n}\n', ""]), e.exports = i
        }, (e, t, n) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.default = void 0;
            var s, i = function(e, t) {
                    if (!t && e && e.__esModule) return e;
                    if (null === e || "object" != typeof e && "function" != typeof e) return {
                        default: e
                    };
                    var n = r(t);
                    if (n && n.has(e)) return n.get(e);
                    var s = {},
                        i = Object.defineProperty && Object.getOwnPropertyDescriptor;
                    for (var o in e)
                        if ("default" !== o && Object.prototype.hasOwnProperty.call(e, o)) {
                            var a = i ? Object.getOwnPropertyDescriptor(e, o) : null;
                            a && (a.get || a.set) ? Object.defineProperty(s, o, a) : s[o] = e[o]
                        } s.default = e, n && n.set(e, s);
                    return s
                }(n(1)),
                o = (s = n(5)) && s.__esModule ? s : {
                    default: s
                },
                a = n(46),
                l = n(47);

            function r(e) {
                if ("function" != typeof WeakMap) return null;
                var t = new WeakMap,
                    n = new WeakMap;
                return (r = function(e) {
                    return e ? n : t
                })(e)
            }
            const c = i.default.getProvider().getSocket(),
                m = "SUCCESS",
                u = "tft_star_fragments",
                d = "EnableStarShardsUpgradeFlow",
                p = {
                    companions: "/fe/lol-parties/little_legends_icon.svg",
                    tft_map_skins: "/fe/lol-parties/arena_skins_icon.svg",
                    tft_damage_skins: "/fe/lol-parties/damage_skins_icon.svg",
                    emotes: "/fe/lol-parties/party_panel_header_icon.png"
                },
                h = {
                    companions: {
                        root: "/lol-cosmetics",
                        default: "/v1/inventories/default/companions",
                        tft: "/v1/inventories/tft/companions",
                        selection: "/v1/selection/companion",
                        component: "lol-parties-cosmetics-panel",
                        "component-reference": null,
                        "binding-type": "cosmetics",
                        title: "tft_companions_label",
                        purchase: "/v3/purchaseOffer",
                        purchaseCurrencyType: "tft_star_fragments",
                        purchaseStatus: "/v3/purchase-offer-order-statuses"
                    },
                    tft_map_skins: {
                        root: "/lol-cosmetics",
                        tft: "/v1/inventories/tft/map-skins",
                        selection: "/v1/selection/tft-map-skin",
                        component: "lol-parties-cosmetics-panel",
                        "binding-type": "cosmetics",
                        title: "tft_map_skins_label"
                    },
                    tft_damage_skins: {
                        root: "/lol-cosmetics",
                        tft: "/v1/inventories/tft/damage-skins",
                        selection: "/v1/selection/tft-damage-skin",
                        component: "lol-parties-cosmetics-panel",
                        "binding-type": "cosmetics",
                        title: "tft_damage_skins_label"
                    },
                    emotes: {
                        root: "/lol-inventory",
                        default: "/v1/inventory/emotes",
                        "binding-type": "inventory"
                    }
                },
                g = i.UIKit.getModalManager(),
                b = i.UIKit.getVignetteCelebrationManager();
            class f extends i.webComponents.ShadowElement {
                templateMarkup() {
                    return n(48)
                }
                stylesheetMarkup() {
                    return n(49)
                }
                constructor() {
                    super(), this._activeTypes = [], this._setName = "tft", this._showNoneOption = null, this._cosmeticsDataBinding = (0, i.dataBinding)("/lol-cosmetics", c), this._purchaseWidgetDataBinding = (0, i.dataBinding)("/lol-purchase-widget", c), this._starShardsWalletBinding = (0, i.dataBinding)("/lol-inventory", c), this._starShardsTogglesBinding = (0, i.dataBinding)("/lol-platform-config/v1/namespaces/Loadouts", c), this._rewardsProgramBinding = (0, i.dataBinding)("/lol-client-config/v3/client-config/lol.client_settings.navigation.enableRewardsProgram", c), this._starShardsAmount = 0, this._isShardShardsEnabled = !1, this._currentPurchaseTransactionId = null, this._currentPurchaseItemId = null, this._purchasePromiseResolve = null, this._purchaseDialogContentWrapper = null, this._purchaseDialogButtonWrapper = null, this._celebrationActive = !1, this._isRewardsProgramEnabled = a.REWARDS_PROGRAM_STATUS.UNSET, this._loadStarShardsToggles(), this._loadRewardsProgramStatus()
                }
                connectedCallback() {
                    super.connectedCallback(), this._setNavigationBarTypes(this._activeTypes), this._setSelectedLoadoutItem(this._selectedLoadoutId), this._initStarShardsObserver(), this._onLoadoutGroupSelectedBinding = this._onLoadoutGroupSelected.bind(this), this._onLoadoutItemSelectedBinding = this._onLoadoutItemSelected.bind(this), this._onLoadoutItemPurchaseBinding = this._onLoadoutItemPurchase.bind(this), this._getNavigationBar().addEventListener("lol-uikit-navigation-item-click-event", this._onLoadoutGroupSelectedBinding), this._getActiveContent().addEventListener("lol-parties-cosmetics-item-select-event", this._onLoadoutItemSelectedBinding, !0), this._getActiveContent().addEventListener("lol-parties-cosmetics-item-purchase-event", this._onLoadoutItemPurchaseBinding, !0)
                }
                disconnectedCallback() {
                    super.disconnectedCallback(), this._cosmeticsDataBinding.unobserve(this), this._starShardsWalletBinding.unobserve(this), this._getNavigationBar().removeEventListener("lol-uikit-navigation-item-click-event", this._onLoadoutGroupSelectedBinding), this._getActiveContent().removeEventListener("lol-parties-cosmetics-item-select-event", this._onLoadoutItemSelectedBinding, !0), this._getActiveContent().removeEventListener("lol-parties-cosmetics-item-purchase-event", this._onLoadoutItemPurchaseBinding, !0)
                }
                _initStarShardsObserver() {
                    this._starShardsWalletBinding.observe("/v1/wallet/" + u, this, (e => {
                        e && (this._starShardsAmount = e[u], this._component && null === this._currentPurchaseItemId && !this._celebrationActive && this._component.setStarShardsAmount(this._starShardsAmount))
                    }))
                }
                _loadStarShardsToggles() {
                    this._starShardsTogglesBinding.get().then((e => {
                        e && e[d] && (this._isShardShardsEnabled = e[d], this._component && this._component.setStarShardsEnabled(this._isShardShardsEnabled))
                    }))
                }
                _loadRewardsProgramStatus() {
                    this._rewardsProgramBinding.get().then((e => {
                        this._isRewardsProgramEnabled = e ? a.REWARDS_PROGRAM_STATUS.ENABLED : a.REWARDS_PROGRAM_STATUS.DISABLED, this._component && this._component.setRewardsProgramEnabled(this._isRewardsProgramEnabled)
                    }))
                }
                _displayUpgradeCelebration(e) {
                    this._celebrationActive = !0;
                    const t = document.createElement("lol-parties-cosmetics-upgrade-celebration"),
                        n = (0, l.getBaseLayoutItem)(e, this._inventory),
                        s = {},
                        o = n.upgrades.findIndex((t => t.itemId === e.itemId));
                    0 === o ? (s.previousItem = n, s.newItem = n.upgrades[0]) : (s.previousItem = n.upgrades[o - 1], s.newItem = n.upgrades[o]), t.setData(s), b.add({
                        id: "upgrade-celebration",
                        data: {
                            header: {
                                title: i.tra.get("tft_upgrade_celebration_title")
                            },
                            nextButtonEnabled: !0,
                            nextButtonText: i.tra.get("tft_upgrade_celebration_button")
                        },
                        content: {
                            domNode: t
                        },
                        behindVignette: !0,
                        height: "LARGE",
                        onVignetteClose: () => {
                            this._celebrationActive = !1, this._component.setStarShardsAmount(this._starShardsAmount)
                        }
                    })
                }
                _onLoadoutItemSelected(e) {
                    const t = e.detail.item;
                    t.owned && (0 === t.itemId || t.itemId === this._inventory.defaultItemId ? this._cosmeticsDataBinding.delete(h[this._selectedLoadoutId].selection, t.itemId) : t.selected || this._cosmeticsDataBinding.put(h[this._selectedLoadoutId].selection, t.itemId))
                }
                _onLoadoutItemPurchase(e) {
                    const t = e.detail.item;
                    t && !t.owned && t.offerData && this._displayPurchaseConfirmationDialog(t)
                }
                _onLoadoutGroupSelected(e) {
                    const t = e.detail.node;
                    this._setSelectedLoadoutItem(t.id)
                }
                _setSelectedLoadoutItem(e) {
                    this._selectedLoadoutId = e, this._component = document.createElement(h[this._selectedLoadoutId].component);
                    const t = this._getActiveContent();
                    for (this._addClass("hidden", ".loadouts-modal-active-item"); t.firstChild;) t.removeChild(t.firstChild);
                    t.appendChild(this._component), this._component.setStarShardsEnabled(this._isShardShardsEnabled), this._component.setRewardsProgramEnabled(this._isRewardsProgramEnabled), this._component.setStarShardsAmount(this._starShardsAmount), this._refreshInventoryBinding(), this._refreshPurchaseStatusBinding(), this._updateNoneOption(this._component), this._removeClass("hidden", ".loadouts-modal-active-item")
                }
                _displayPurchaseConfirmationDialog(e) {
                    let t;
                    t = g.add({
                        type: "DialogConfirm",
                        data: {
                            contents: this._generatePurchaseModalContents(e),
                            acceptText: this._getItemOfferPrice(e),
                            closeButton: !0,
                            dismissibleType: "inside",
                            acceptButtonType: "purchase",
                            acceptHandler: () => new Promise((n => {
                                t.disableAcceptButton(), this._purchasePromiseResolve = n, this._purchaseDialogButtonWrapper.classList.add("parties-purchase-loading");
                                const s = {
                                    offerId: e.offerData.id,
                                    currencyType: h[this._selectedLoadoutId].purchaseCurrencyType
                                };
                                this._purchaseWidgetDataBinding.post(h[this._selectedLoadoutId].purchase, s).then((t => {
                                    this._currentPurchaseTransactionId = t.orderDto.data.id, this._currentPurchaseItemId = e.itemId
                                })), this._purchaseTransactionTimeout = setTimeout((() => {
                                    this._purchaseDialogButtonWrapper.classList.remove("parties-purchase-loading"), this._displayErrorMessageInPurchaseDialog()
                                }), 1e4), this._playSound(o.default.SFX_URLS.SFX_STAR_SHARDS_PURCHASE)
                            }))
                        },
                        show: !0
                    }), t.acceptPromise.then((() => {
                        this._displayUpgradeCelebration(e), this._clearPurchaseTransaction()
                    }), (() => {
                        this._clearPurchaseTransaction()
                    })), this._applyAdditionalButtonStyles(t)
                }
                _generatePurchaseModalContents(e) {
                    const t = document.createElement("lol-parties-loadouts-purchase-dialog-content");
                    return t.setData(e), this._purchaseDialogContentWrapper = t, t
                }
                _displayErrorMessageInPurchaseDialog() {
                    this._purchaseDialogContentWrapper.shadowRoot.querySelector(".lol-parties-purchase-dialog-error-message").innerText = i.tra.get("tft_upgrade_purchase_dialog_body_content_upgrade_failed_error")
                }
                _applyAdditionalButtonStyles(e) {
                    const t = e.domNode.querySelector("lol-uikit-flat-button.button-accept"),
                        s = document.createElement("style"),
                        i = n(50);
                    s.textContent = i, t.shadowRoot.insertBefore(s, t.shadowRoot.firstChild), this._purchaseDialogButtonWrapper = t.shadowRoot.querySelector(".lol-uikit-flat-button");
                    const o = document.createElement("div");
                    o.classList.add("lol-parties-purchase-dialog-button-spinner"), this._purchaseDialogButtonWrapper.appendChild(o);
                    const a = t.shadowRoot.querySelector(".lol-uikit-flat-button-content-wrapper"),
                        l = document.createElement("div");
                    l.classList.add("lol-parties-purchase-dialog-button-currency-icon", "icon-star-shards"), a.appendChild(l)
                }
                _getItemOfferPrice(e) {
                    return e.offerData.payload[0].itemPriceMap["33fe7291-2082-5b1d-be4a-8848d8a1eef8"]
                }
                static get observedAttributes() {
                    return ["types", "active-type", "set-name", "show-none"]
                }
                attributeChangedCallback(e, t, n) {
                    if ("types" === e) this._updateTypes(n);
                    else if ("active-type" === e) {
                        this._getNavigationBar().setAttribute("selectedindex", this._activeTypes.indexOf(n)), this._setSelectedLoadoutItem(n)
                    } else "set-name" === e ? this._setName = n : "show-none" === e && (this._showNoneOption = this.hasAttribute("show-none"), this._updateNoneOption(this._component))
                }
                _updateTypes(e) {
                    const t = e.split(",");
                    this._setNavigationBarTypes(t), this._activeTypes = t, t.length > 0 && -1 === t.indexOf(this._selectedLoadoutId) && this._setSelectedLoadoutItem(t[0])
                }
                _updateNoneOption(e) {
                    e && (this._showNoneOption ? e.setAttribute("show-none", "") : e.removeAttribute("show-none"))
                }
                _refreshInventoryBinding() {
                    this._cosmeticsDataBinding.unobserve(this);
                    const e = h[this._selectedLoadoutId];
                    e && "cosmetics" === e["binding-type"] && this._cosmeticsDataBinding.observe(e[this._setName], this, this._handleInventoryChanged)
                }
                _handleInventoryChanged(e) {
                    this._inventory = e, this._updateNoneOption(this._component), this._component && (this._component.setInventory(this._inventory), this._component.setAttribute("type", this._selectedLoadoutId))
                }
                _refreshPurchaseStatusBinding() {
                    this._purchaseWidgetDataBinding.unobserve(this);
                    const e = h[this._selectedLoadoutId];
                    e && e.purchaseStatus && this._purchaseWidgetDataBinding.observe(e.purchaseStatus, this, this._handlePurchaseStatusUpdated)
                }
                _handlePurchaseStatusUpdated(e) {
                    if (!this._currentPurchaseTransactionId || !this._purchasePromiseResolve) return;
                    const t = e.statuses[this._currentPurchaseTransactionId];
                    t && (t.orderState !== m && "FAIL" !== t.orderState || (t.orderState === m ? (this._purchasePromiseResolve(!0), this._refreshInventoryBinding(), this._playSound(o.default.SFX_URLS.SFX_STAR_SHARDS_SUCCESS)) : (this._purchasePromiseResolve(!1), this._purchaseDialogButtonWrapper.classList.remove("parties-purchase-loading"), this._displayErrorMessageInPurchaseDialog()), this._purchaseTransactionTimeout && (clearTimeout(this._purchaseTransactionTimeout), this._purchaseTransactionTimeout = null)))
                }
                _clearPurchaseTransaction() {
                    this._currentPurchaseTransactionId = null, this._currentPurchaseItemId = null, this._purchasePromiseResolve = null, this._purchaseDialogContentWrapper = null, this._purchaseDialogButtonWrapper = null, this._purchaseTransactionTimeout && (clearTimeout(this._purchaseTransactionTimeout), this._purchaseTransactionTimeout = null)
                }
                _playSound(e) {
                    i.Audio.getChannel(o.default.SFX_CHANNEL).playSound(e)
                }
                _getNavigationBar() {
                    return this.shadowRoot.querySelector(".loadouts-selectable-items")
                }
                _getActiveContent() {
                    return this.shadowRoot.querySelector(".loaouts-modal-active-item")
                }
                _clearNavigationBar() {
                    const e = this._getNavigationBar();
                    for (; e.firstChild;) e.removeChild(e.firstChild)
                }
                _setNavigationBarTypes(e) {
                    this._clearNavigationBar();
                    const t = this._getNavigationBar();
                    for (let n = 0; n < e.length; n++) {
                        const s = document.createElement("lol-uikit-navigation-item");
                        s.id = e[n];
                        const o = document.createElement("div");
                        o.className += "loadouts-modal-navigation-title", o.innerHTML = i.tra.get(h[e[n]].title);
                        const a = document.createElement("div");
                        a.className += "loadouts-modal-navigation-img", a.style.backgroundImage = `url("${p[e[n]]}")`, s.appendChild(a), s.appendChild(o), s.className += "loadouts-modal-navigation-item", t.appendChild(s)
                    }
                }
                _addClass(e, t) {
                    const n = this.shadowRoot.querySelector(t);
                    n && !n.classList.contains(e) && n.classList.add(e)
                }
                _removeClass(e, t) {
                    const n = this.shadowRoot.querySelector(t);
                    n && n.classList.contains(e) && n.classList.remove(e)
                }
            }
            f.tagName = "lol-parties-loadouts-modal";
            var y = f;
            t.default = y
        }, (e, t) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.REWARDS_PROGRAM_STATUS = void 0;
            t.REWARDS_PROGRAM_STATUS = {
                ENABLED: "ENABLED",
                DISABLED: "DISABLED",
                UNSET: "UNSET"
            }
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            e.exports = {
                getBaseLayoutItem: function(e, t) {
                    if (!e) return;
                    if (e && (e.itemId === t.defaultItemId || e.upgrades && e.upgrades.length > 0)) return e;
                    const n = s.lodash.find(t.groups, {
                        groupId: e.groupId
                    });
                    if (!n) return e;
                    let i;
                    return s.lodash.forEach(n.items, (t => t.itemId === e.itemId || s.lodash.find(t.upgrades, {
                        itemId: e.itemId
                    }) ? (i = t, !1) : void 0)), i || e
                },
                getLayoutItemById: function(e, t) {
                    let n;
                    return s.lodash.forEach(t.groups, (t => {
                        if (n) return !1;
                        s.lodash.forEach(t.items, (t => t.itemId === e ? (n = t, !1) : (n = s.lodash.find(t.upgrades, {
                            itemId: e
                        }), !n && void 0)))
                    })), n
                }
            }
        }, e => {
            "use strict";
            e.exports = '<template id="lol-parties-template-loadouts-modal">\r\n  <div class="loadouts-modal-title hidden">Loadouts</div>\r\n  <div class="loadouts-modal-content">\r\n      <lol-uikit-navigation-bar type="tabbed" direction="down" selectedindex="0" class="loadouts-selectable-items">\r\n      </lol-uikit-navigation-bar>\r\n      \x3c!-- This should have the content of the active selection--\x3e\r\n      <div class="loaouts-modal-active-item"></div>\r\n  </div>\r\n</template>\r\n'
        }, (e, t, n) => {
            var s = n(8),
                i = n(9)(s);
            i.push([e.id, ':host .loadouts-modal-title,\n:host .loadouts-modal-content .loadouts-modal-navigation-item {\n  font-family: var(--font-display);\n}\n:host .loadouts-modal-title,\n:host .loadouts-modal-content .loadouts-modal-navigation-item {\n  -webkit-user-select: none;\n}\n:host .loadouts-modal-title,\n:host .loadouts-modal-content .loadouts-modal-navigation-item {\n  font-kerning: normal;\n  -webkit-font-feature-settings: "kern" 1;\n  -webkit-font-smoothing: antialiased;\n}\n:host .loadouts-modal-title,\n:host .loadouts-modal-content .loadouts-modal-navigation-item {\n  text-transform: uppercase;\n}\n:host .loadouts-modal-title:lang(ko-kr),\n:host .loadouts-modal-content .loadouts-modal-navigation-item:lang(ko-kr),\n:host .loadouts-modal-title:lang(ja-jp),\n:host .loadouts-modal-content .loadouts-modal-navigation-item:lang(ja-jp),\n:host .loadouts-modal-title:lang(tr-tr),\n:host .loadouts-modal-content .loadouts-modal-navigation-item:lang(tr-tr),\n:host .loadouts-modal-title:lang(el-gr),\n:host .loadouts-modal-content .loadouts-modal-navigation-item:lang(el-gr),\n:host .loadouts-modal-title:lang(th-th),\n:host .loadouts-modal-content .loadouts-modal-navigation-item:lang(th-th),\n:host .loadouts-modal-title:lang(zh-tw),\n:host .loadouts-modal-content .loadouts-modal-navigation-item:lang(zh-tw) {\n  text-transform: none;\n}\n:host .loadouts-modal-title {\n  color: #f0e6d2;\n  font-size: 30px;\n  font-weight: 700;\n  line-height: 32px;\n  letter-spacing: 0.05em;\n}\n:host .loadouts-modal-title:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host .loadouts-modal-content .loadouts-modal-navigation-item {\n  color: #f0e6d2;\n  font-size: 12px;\n  font-weight: 700;\n  line-height: 16px;\n  letter-spacing: 0.075em;\n}\n:host .loadouts-modal-content .loadouts-modal-navigation-item:lang(ja-jp) {\n  font-size: 13px;\n}\n:host .loadouts-modal-content .loadouts-modal-navigation-item:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host {\n  --rcp-fe-lol-parties-loadouts-modal-border-width: 2px;\n}\n:host {\n  width: 957px;\n  height: 620px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-content: center;\n  position: relative;\n  background: #010a13;\n  border: thin solid #010a13;\n}\n:host .loadouts-modal-title {\n  text-align: center;\n  padding: 5px;\n}\n:host .loadouts-modal-content {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: row;\n}\n:host .loadouts-modal-content .loadouts-modal-navigation-item {\n  width: 114px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  color: #c8aa6e;\n  padding-left: 0;\n  border: thin solid #010a13;\n  background: #091724;\n  box-sizing: border-box;\n  opacity: 0.7;\n}\n:host .loadouts-modal-content .loadouts-modal-navigation-item .loadouts-modal-navigation-img {\n  width: 100%;\n  height: 35px;\n  background-size: contain;\n  background-repeat: no-repeat;\n  background-position: center;\n  flex: 1 1 auto;\n}\n:host .loadouts-modal-content .loadouts-modal-navigation-item .loadouts-modal-navigation-title {\n  flex: 0 0 auto;\n  margin: auto;\n  line-height: 14px;\n  text-align: center;\n  max-width: 90px;\n}\n:host .loadouts-modal-content .loadouts-modal-navigation-item[active] {\n  background: linear-gradient(90deg, #152535 5%, #061321 100%);\n  opacity: 1;\n}\n:host .loadouts-modal-content .loadouts-modal-navigation-item[active] div {\n  -webkit-filter: brightness(200%);\n}\n:host .loadouts-modal-content .loaouts-modal-active-item {\n  width: 100%;\n  transition: opacity 0.01s 0.01s;\n}\n:host .hidden {\n  opacity: 0;\n  display: none;\n  visibility: hidden;\n  transition: opacity 0.3s 0.1s;\n}\n', ""]), e.exports = i
        }, (e, t, n) => {
            var s = n(8),
                i = n(9)(s);
            i.push([e.id, '.lol-uikit-flat-button.parties-purchase-loading .lol-uikit-flat-button-content-wrapper {\n  opacity: 0;\n  visibility: hidden;\n}\n.lol-uikit-flat-button.parties-purchase-loading .lol-parties-purchase-dialog-button-spinner {\n  opacity: 1;\n  visibility: visible;\n}\n.lol-uikit-flat-button-content-wrapper {\n  position: relative;\n  padding-left: 18px;\n  line-height: 22px;\n  transition: opacity 0.3s ease, visibility 0.3s ease;\n}\n.lol-parties-purchase-dialog-button-currency-icon {\n  position: absolute;\n  top: 2px;\n  left: -2px;\n  width: 18px;\n  height: 18px;\n  background-repeat: no-repeat;\n  background-size: 100% 100%;\n}\n.lol-parties-purchase-dialog-button-currency-icon.icon-star-shards {\n  background-image: url("/fe/lol-static-assets/images/icon-star-shards-36.png");\n}\n.lol-parties-purchase-dialog-button-spinner {\n  background-image: url("/fe/lol-static-assets/images/spinner.png");\n  background-repeat: no-repeat;\n  background-size: 100% 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 24px;\n  height: 24px;\n  margin: -12px 0 0 -12px;\n  animation: loader-spin 4000ms infinite linear;\n  opacity: 0;\n  visibility: hidden;\n  transition: opacity 0.3s ease, visibility 0.3s ease;\n}\n@-moz-keyframes loader-spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n@-webkit-keyframes loader-spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n@-o-keyframes loader-spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n@keyframes loader-spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n', ""]), e.exports = i
        }, (e, t, n) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.default = void 0;
            var s = n(1);
            class i extends s.webComponents.ShadowElement {
                templateMarkup() {
                    return n(52)
                }
                stylesheetMarkup() {
                    return n(53)
                }
                constructor() {
                    super(), this.shadowRoot.querySelector(".loadouts-purchase-dialog-body-title").innerText = s.tra.get("tft_upgrade_purchase_dialog_body_title")
                }
                setData(e) {
                    if (this._data === e) return;
                    this._data = e;
                    this.shadowRoot.querySelector(".little-legend-img").src = this._data.loadoutsIcon;
                    const t = s.tra.formatString("tft_upgrade_purchase_dialog_body_content", {
                        fromLevel: this._data.level - 1,
                        fromName: this._data.name,
                        toLevel: this._data.level,
                        toName: this._data.name
                    });
                    this.shadowRoot.querySelector(".loadouts-purchase-dialog-body-content").innerText = t, this.shadowRoot.querySelector(".lottie-animation").setAttribute("src", `/fe/lol-parties/lottie/LLUpgradeConfirm_StarIcons/LLUpgradeConfirm_Lv${this._data.level}.json`), this._addClass(`rarity-${this._data.rarityValue}`, ".little-legend-container")
                }
                _addClass(e, t) {
                    const n = this.shadowRoot.querySelector(t);
                    n && !n.classList.contains(e) && n.classList.add(e)
                }
            }
            i.tagName = "lol-parties-loadouts-purchase-dialog-content";
            var o = i;
            t.default = o
        }, e => {
            "use strict";
            e.exports = '<template id="lol-parties-template-loadouts-purchase-dialog-content">\r\n  <div class="loadouts-purchase-dialog-content-wrapper">\r\n    <div class="loadouts-purchase-dialog-body-title"></div>\r\n    <div class="little-legend-container">\r\n      <img class="little-legend-img"/>\r\n      <div class="little-legend-overlay"></div>\r\n      <lol-uikit-lottie\r\n                      class="lottie-animation"\r\n                      image-path="/fe/lol-parties/lottie/LLUpgradeConfirm_StarIcons/images/"\r\n                      loop="true"\r\n                      autoplay="true">\r\n      </lol-uikit-lottie>\r\n    </div>\r\n    <div class="loadouts-purchase-dialog-body-content"></div>\r\n    <div class="lol-parties-purchase-dialog-error-message"></div>\r\n  </div>\r\n</template>\r\n'
        }, (e, t, n) => {
            var s = n(8),
                i = n(9)(s);
            i.push([e.id, ':host .loadouts-purchase-dialog-body-title,\n:host .lol-parties-purchase-dialog-error-message {\n  font-family: var(--font-display);\n}\n:host .loadouts-purchase-dialog-body-title,\n:host .lol-parties-purchase-dialog-error-message {\n  -webkit-user-select: none;\n}\n:host .loadouts-purchase-dialog-body-title,\n:host .lol-parties-purchase-dialog-error-message {\n  font-kerning: normal;\n  -webkit-font-feature-settings: "kern" 1;\n  -webkit-font-smoothing: antialiased;\n}\n:host .loadouts-purchase-dialog-body-title,\n:host .lol-parties-purchase-dialog-error-message {\n  text-transform: uppercase;\n}\n:host .loadouts-purchase-dialog-body-title:lang(ko-kr),\n:host .lol-parties-purchase-dialog-error-message:lang(ko-kr),\n:host .loadouts-purchase-dialog-body-title:lang(ja-jp),\n:host .lol-parties-purchase-dialog-error-message:lang(ja-jp),\n:host .loadouts-purchase-dialog-body-title:lang(tr-tr),\n:host .lol-parties-purchase-dialog-error-message:lang(tr-tr),\n:host .loadouts-purchase-dialog-body-title:lang(el-gr),\n:host .lol-parties-purchase-dialog-error-message:lang(el-gr),\n:host .loadouts-purchase-dialog-body-title:lang(th-th),\n:host .lol-parties-purchase-dialog-error-message:lang(th-th),\n:host .loadouts-purchase-dialog-body-title:lang(zh-tw),\n:host .lol-parties-purchase-dialog-error-message:lang(zh-tw) {\n  text-transform: none;\n}\n:host .loadouts-purchase-dialog-body-title {\n  color: #f0e6d2;\n  font-size: 14px;\n  font-weight: 700;\n  line-height: 18px;\n  letter-spacing: 0.075em;\n}\n:host .loadouts-purchase-dialog-body-title:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host .lol-parties-purchase-dialog-error-message {\n  color: #f0e6d2;\n  font-size: 12px;\n  font-weight: 700;\n  line-height: 16px;\n  letter-spacing: 0.075em;\n}\n:host .lol-parties-purchase-dialog-error-message:lang(ja-jp) {\n  font-size: 13px;\n}\n:host .lol-parties-purchase-dialog-error-message:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host .loadouts-purchase-dialog-content-wrapper {\n  padding-top: 10px;\n  padding-bottom: 51px;\n  background: linear-gradient(180deg, #1e2328 0%, #010a13 100%);\n  font-size: 14px;\n  letter-spacing: 0.03em;\n  text-align: center;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 518px;\n  height: 341px;\n}\n:host .loadouts-purchase-dialog-body-title {\n  color: #c8aa6e;\n  padding-bottom: 20px;\n  font-size: 24px;\n  line-height: 36px;\n}\n:host .loadouts-purchase-dialog-body-content {\n  color: #a09b8c;\n  padding-top: 26px;\n  padding-left: 20px;\n  padding-right: 20px;\n  font-size: 14px;\n  line-height: 32px;\n}\n:host .lol-parties-purchase-dialog-error-message {\n  position: absolute;\n  bottom: 36px;\n  left: 0;\n  width: 100%;\n  line-height: 24px;\n  font-size: 12px;\n  color: #ff2345;\n}\n:host .lottie-animation {\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 209px;\n  height: 209px;\n}\n:host .little-legend-container {\n  position: relative;\n  width: 209px;\n  height: 209px;\n  border: 4px solid;\n  border-image: linear-gradient(180deg, #c8aa6e 0%, #c89b3c 48.96%, #785a28 100%) 50 stretch stretch;\n}\n:host .little-legend-container:before {\n  position: absolute;\n  content: " ";\n  left: -5px;\n  right: -5px;\n  bottom: -5px;\n  top: -5px;\n  border: 1px solid rgba(0,0,0,0.25);\n}\n:host .little-legend-container:after {\n  position: absolute;\n  content: "";\n  bottom: -43px;\n  left: 48px;\n  width: 112px;\n  height: 64px;\n  background-size: 100% 100%;\n  background-image: url("../../images/loadouts/common_plating_hover.png");\n}\n:host .little-legend-container.rarity-1:after {\n  background-image: url("../../images/loadouts/epic_plating_hover.png");\n}\n:host .little-legend-container.rarity-2:after {\n  background-image: url("../../images/loadouts/legendary_plating_hover.png");\n}\n:host .little-legend-container.rarity-3:after {\n  background-image: url("../../images/loadouts/mythic_plating_hover.png");\n}\n:host .little-legend-img {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  object-fit: cover;\n  box-sizing: border-box;\n  border: 1px solid rgba(0,0,0,0.25);\n}\n:host .little-legend-overlay {\n  position: absolute;\n  height: 83px;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: linear-gradient(180deg, rgba(0,0,0,0) 0%, rgba(0,0,0,0.77) 66.15%);\n}\n', ""]), e.exports = i
        }, (e, t, n) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.default = void 0;
            var s, i = function(e, t) {
                    if (!t && e && e.__esModule) return e;
                    if (null === e || "object" != typeof e && "function" != typeof e) return {
                        default: e
                    };
                    var n = r(t);
                    if (n && n.has(e)) return n.get(e);
                    var s = {},
                        i = Object.defineProperty && Object.getOwnPropertyDescriptor;
                    for (var o in e)
                        if ("default" !== o && Object.prototype.hasOwnProperty.call(e, o)) {
                            var a = i ? Object.getOwnPropertyDescriptor(e, o) : null;
                            a && (a.get || a.set) ? Object.defineProperty(s, o, a) : s[o] = e[o]
                        } s.default = e, n && n.set(e, s);
                    return s
                }(n(1)),
                o = (s = n(5)) && s.__esModule ? s : {
                    default: s
                },
                a = n(47),
                l = n(46);

            function r(e) {
                if ("function" != typeof WeakMap) return null;
                var t = new WeakMap,
                    n = new WeakMap;
                return (r = function(e) {
                    return e ? n : t
                })(e)
            }
            const c = i.default.getProvider().getSocket(),
                m = "Recent",
                u = "purchase",
                d = "equip";
            class p extends i.webComponents.ShadowElement {
                templateMarkup() {
                    return n(55)
                }
                stylesheetMarkup() {
                    return n(56)
                }
                constructor() {
                    super(), this._showNoneOption = null, this._settingsBinding = (0, i.dataBinding)("/lol-settings"), this._cosmeticsDataBinding = (0, i.dataBinding)("/lol-cosmetics", c), this._hideUnowned = !1, this._isShardShardsEnabled = !1, this._isRewardsProgramEnabled = l.REWARDS_PROGRAM_STATUS.UNSET, this._searchString = "", this._type = "", this._cosmeticsSettings = {
                        data: {},
                        schemaVersion: 1
                    }, this._removedRecentHighlighting = [], this._starShardsAmount = 0, this._defineCheckBox(), this._defineActionButton(), this._defineCosmeticItems(), this._defineSearchBar()
                }
                connectedCallback() {
                    super.connectedCallback(), this._hoveredUpgrades = null, this._hideUpgradeTooltip(), this._selectedItem = null, this._updateAllStarShardsComponents()
                }
                disconnectedCallback() {
                    super.disconnectedCallback(), this._recentlyViewedContentIdsToClear(), this._starShardsTimeout && clearTimeout(this._starShardsTimeout)
                }
                _defineCheckBox() {
                    this.shadowRoot.querySelector("#hide_unowned_checkbox_label").textContent = i.tra.get("parties_cosmetics_show_unowned");
                    const e = this.shadowRoot.querySelector("#hide_unowned_checkbox");
                    e.addEventListener("click", (t => {
                        this._hideUnowned = !e.checked, this._cosmeticsSettings.data[this._type] ? this._cosmeticsSettings.data[this._type].hideUnowned = this._hideUnowned : this._cosmeticsSettings.data[this._type] = {
                            hideUnowned: this._hideUnowned
                        }, this._settingsBinding.put("/v2/account/LCUPreferences/cosmetics-settings", this._cosmeticsSettings), this._updateFilter()
                    }))
                }
                _defineCosmeticItems() {
                    this.addEventListener("lol-parties-cosmetics-item-click", this._onLoadoutItemClicked.bind(this)), this.addEventListener("lol-parties-cosmetics-item-hover", this._onLoadoutItemHovered.bind(this));
                    const e = this.shadowRoot.querySelector(".cosmetic-upgrade-container").getElementsByClassName("cosmetic-upgrade-bounding-container");
                    for (let t = 0; t < e.length; t++) e[t].addEventListener("mouseenter", (e => {
                        const n = (0, a.getBaseLayoutItem)(this._clickedItem, this._inventory);
                        0 === t ? (this._setFocusedItem(n), this._playSound(o.default.SFX_URLS.SFX_COMPANION_PICKER_HOVER)) : (this._setFocusedItem(n.upgrades[t - 1]), this._playSound(o.default.SFX_URLS.SFX_COMPANION_PICKER_HOVER))
                    }), !0), e[t].addEventListener("mouseleave", (e => {
                        this._setFocusedItem(this._clickedItem), this._resetSelected()
                    })), e[t].addEventListener("click", (e => {
                        const n = (0, a.getBaseLayoutItem)(this._hoveredUpgrades, this._inventory);
                        let s = n;
                        0 !== t && (s = n.upgrades[t - 1]), this._setFocusedItem(s), this._clickedItem = s, this._playClickSoundForItem(s), s.isRecentItem && (this._removeRecentHighlight(s), this._recentlyViewedContentIdsToClear()), this._updateActionButton()
                    }))
                }
                _defineActionButton() {
                    this._actionButton = this.shadowRoot.querySelector(".cosmetic-group-action-button"), this._actionButton.addEventListener("click", (() => this._handleActionButtonClicked())), this._updateActionButton()
                }
                _defineSearchBar() {
                    const e = this.shadowRoot.querySelector("#cosmetic_search_bar");
                    e.placeholder = i.tra.get("tft_cosmetics_search_placeholder"), e.addEventListener("mousedown", (e => {
                        e.stopPropagation()
                    })), e.addEventListener("search", (t => {
                        this._searchString = e.value, this._updateFilter()
                    }))
                }
                _createActionButtonState() {
                    const e = this._inventory.selectedLoadoutItem,
                        t = this._hoveredUpgrades;
                    let n = d,
                        s = i.tra.get("parties_loadouts_equip_label");
                    if (!t) return {
                        behavior: n,
                        content: s,
                        disabledState: !1
                    };
                    if (t.owned) return {
                        behavior: n,
                        content: s,
                        disabledState: e.contentId === t.contentId
                    };
                    if ("companions" !== this._type) return {
                        behavior: n,
                        content: s,
                        disabledState: !t.owned || e.contentId === t.contentId
                    };
                    const o = (0, a.getBaseLayoutItem)(t, this._inventory),
                        l = this._getItemUpgradePath(o),
                        r = l.indexOf(t),
                        c = r > 0 && l[r - 1].owned,
                        m = t.starShardsPrice.price,
                        p = this._starShardsAmount;
                    m && (n = u, s = `<img class="star-shards-icon" src="/fe/lol-static-assets/images/icon-star-shards-36.png"/> ${m}`);
                    return {
                        behavior: n,
                        content: s,
                        disabledState: !m || !c || p < m,
                        remainingStarShards: p - m,
                        prereqOwned: c
                    }
                }
                _retrieveSettingsData() {
                    const e = this.shadowRoot.querySelector("#hide_unowned_checkbox");
                    this._hideUnowned = !1, this._settingsBinding.get("/v2/account/LCUPreferences/cosmetics-settings").then((t => {
                        t && t.data && (this._cosmeticsSettings = t, t.data[this._type] && void 0 !== t.data[this._type].hideUnowned && (this._hideUnowned = t.data[this._type].hideUnowned)), e.checked = !this._hideUnowned, this._updateFilter()
                    }))
                }
                _onLoadoutItemHovered(e) {
                    this._setFocusedItem(e.detail.item), e.detail.item.isRecentItem && this._removeRecentHighlight(e.detail.item), this._updateUpgrades(e.detail.item), this._updateActionButton()
                }
                _onLoadoutItemClicked(e) {
                    let t = (0, a.getBaseLayoutItem)(e.detail.item, this._inventory);
                    if (!t) return;
                    const n = this._getItemUpgradePath(t);
                    for (let e = n.length - 1; e >= 0; e--)
                        if (n[e].owned) {
                            t = n[e];
                            break
                        } this._selectItem(t)
                }
                _handleActionButtonClicked() {
                    const e = this._actionButton;
                    if (e.hasAttribute("disabled")) return;
                    switch (e.getAttribute("behavior")) {
                        case u:
                            this._playClickSoundForItem(this._clickedItem), this.dispatchEvent(new CustomEvent("lol-parties-cosmetics-item-purchase-event", {
                                detail: {
                                    item: this._clickedItem
                                }
                            })), e.setAttribute("disabled", "");
                            break;
                        case d:
                            this._playClickSoundForItem(this._clickedItem), this.dispatchEvent(new CustomEvent("lol-parties-cosmetics-item-select-event", {
                                detail: {
                                    item: this._clickedItem
                                }
                            })), e.setAttribute("disabled", "")
                    }
                }
                _updateActionButton() {
                    if (!this._clickedItem || !this._actionButton || !this._inventory) return;
                    const {
                        behavior: e,
                        content: t,
                        disabledState: n,
                        remainingStarShards: s,
                        prereqOwned: o
                    } = this._createActionButtonState(), a = this._actionButton, l = this.shadowRoot.querySelector(".star-shards-label"), r = this.shadowRoot.querySelector(".star-shards-amount");
                    this._addClass("hidden", ".star-shards-label-wrapper"), e === u && (l.innerHTML = i.tra.get("parties_loadouts_remaining_star_shards_label"), r.textContent = this._formatStarShardsAmount(s), this._toggleClass("purchasable", ".star-shards-label-wrapper", !n), n && !o ? l.innerHTML = i.tra.get("parties_loadouts_prereq_not_owned_label") : n && (l.innerHTML = i.tra.formatString("parties_loadouts_not_enough_shards_label", {
                        shardImage: '<img class="star-shards-icon" src="/fe/lol-static-assets/images/icon-star-shards-36.png"/>'
                    })), this._toggleClass("hidden", ".star-shards-amount", n), this._removeClass("hidden", ".star-shards-label-wrapper")), a.setAttribute("type", e), a.setAttribute("behavior", e), a.innerHTML = t, a.toggleAttribute("disabled", n), a.toggleAttribute("primary", !n)
                }
                _playClickSoundForItem(e) {
                    const {
                        SFX_URLS: {
                            SFX_LOADOUT_RARITY_CLICK: t,
                            SFX_COMPANION_PICKER_CLICK: n
                        }
                    } = o.default, s = e.owned ? t : n;
                    this._playSound(s)
                }
                _updateFilter() {
                    this.shadowRoot.querySelectorAll(".cosmetic-option-group").forEach((e => {
                        const t = e.querySelector(".cosmetic-option-list");
                        let n = !1;
                        t.childNodes.forEach((e => {
                            const t = this._isItemShown(e._data);
                            n = n || t, e.setAttribute("item-shown", t)
                        })), e.setAttribute("group-shown", n)
                    }))
                }
                _updateAllStarShardsComponents() {
                    this.shadowRoot.querySelector(".currency-ss") && (this._updateStarShardDisplay(), this._updateUpgrades(this._clickedItem), this._updateActionButton())
                }
                _updateStarShardDisplay() {
                    if (this._isShardShardsEnabled) {
                        const e = this.shadowRoot.querySelector(".currency-ss");
                        if (!e) return;
                        const t = this._formatStarShardsAmount(this._starShardsAmount);
                        e.textContent = t
                    }
                    this._toggleClass("hidden", ".currency-ss", !this._isShardShardsEnabled)
                }
                _recentlyViewedContentIdsToClear() {
                    const e = this._type.toUpperCase().slice(0, this._type.length - 1);
                    this._cosmeticsDataBinding.patch("/v1/recent/" + e, this._removedRecentHighlighting)
                }
                selectItemById(e) {
                    const t = (0, a.getLayoutItemById)(e, this._inventory);
                    t && this._selectItem(t)
                }
                _selectItem(e) {
                    if (this._clickedItem) {
                        const e = (0, a.getBaseLayoutItem)(this._clickedItem, this._inventory);
                        if (!e) return;
                        const t = this.shadowRoot.querySelectorAll(`[content-id="${e.contentId}"]`);
                        t && t.forEach((e => {
                            e.removeAttribute("highlighted")
                        }))
                    }
                    this._setFocusedItem(e), this._clickedItem = e;
                    const t = (0, a.getBaseLayoutItem)(e, this._inventory);
                    t && this.shadowRoot.querySelectorAll(`[content-id="${t.contentId}"]`).forEach((e => {
                        e.setAttribute("highlighted", !0)
                    }))
                }
                _setFocusedItem(e) {
                    e && (this._hoveredUpgrades = e, this._updateSelectedItem(e), this._updateUpgrades(e), this._updateActionButton())
                }
                _getItemUpgradePath(e) {
                    return e.upgrades ? [e].concat(e.upgrades) : [e]
                }
                _updateUpgrades(e, t) {
                    if (!this._inventory || !this._clickedItem) return;
                    const n = (0, a.getBaseLayoutItem)(e, this._inventory);
                    if (!n) return;
                    if (this._toggleClass("hidden", ".cosmetic-upgrade-container", !n || !n.upgrades || 0 === n.upgrades.length), !n.upgrades || 0 === n.upgrades.length) return;
                    const s = this._getItemUpgradePath(n);
                    let i = 0;
                    for (let e = 0; e < s.length; e++) {
                        const t = s[e],
                            n = t.starShardsPrice ? t.starShardsPrice.price : 0,
                            o = t.starShardsPrice && !!t.starShardsPrice.offerId,
                            a = this._starShardsAmount,
                            l = e > 0 && s[e - 1].owned,
                            r = `.cosmetic-upgrade-${e+1}`,
                            c = s[0].owned;
                        t.isRecentItem && i++, this._toggleClass("not-enough-shards", r, !t.owned && o && l && n > a), this._toggleClass("upgradeable", r, !t.owned && c && o && n <= a), this._toggleClass("unowned", r, !t.owned), this._toggleClass("purchasable", r, !t.owned && o && l && n <= a), this._toggleClass("selected", r, t.selected), this._toggleClass("intended", r, t.contentId === this._clickedItem.contentId), this._toggleClass("recent", r, t.isRecentItem), this._toggleClass("equipped", r, t.contentId === this._inventory.selectedLoadoutItem.contentId)
                    }
                    i > 1 && (this._removeRecentHighlight(s[0]), this._toggleClass("recent", ".cosmetic-upgrade-1", !1))
                }
                _removeRecentHighlight(e) {
                    this.shadowRoot.querySelectorAll(`[content-id="${e.contentId}"]`).forEach((e => {
                        e.setAttribute("is-recent-item", !1)
                    })), e.isRecentItem = !1;
                    const t = (0, a.getBaseLayoutItem)(e, this._inventory);
                    if (!t) return;
                    let n = t.isRecentItem;
                    if (t.upgrades && t.upgrades.length > 0 && i.lodash.forEach(t.upgrades, (e => {
                            e.isRecentItem && (n = !0)
                        })), !n) {
                        this.shadowRoot.querySelector(`[content-id="${t.contentId}"]`).setAttribute("is-recent-item", !1)
                    }
                    this._removedRecentHighlighting.push(e.contentId)
                }
                setStarShardsAmount(e) {
                    if (e === this._starShardsAmount) return;
                    const t = this.shadowRoot.querySelector(".currency-upgrade-video");
                    if (t && e < this._starShardsAmount) {
                        const n = Math.floor((this._starShardsAmount - e) / 12);
                        t.src = `/fe/lol-parties/starshards_currency_decrease_${this._formatStarShardsAmount(e).length}.webm`, t.play(), this._starShardsTimeout && (clearTimeout(this._starShardsTimeout), this._starShardsTimeout = null);
                        const s = () => {
                            this._starShardsAmount -= n, this._starShardsAmount < e && (this._starShardsAmount = e), this._updateStarShardDisplay(), this._starShardsAmount > e && (this._starShardsTimeout = setTimeout(s, 10))
                        };
                        s()
                    } else this._starShardsAmount = e;
                    this._updateAllStarShardsComponents()
                }
                setStarShardsEnabled(e) {
                    this._isShardShardsEnabled = e, this._updateAllStarShardsComponents()
                }
                setRewardsProgramEnabled(e) {
                    this._isRewardsProgramEnabled = e, this._updateInventory()
                }
                setInventory(e) {
                    this._inventory = e, this._updateInventory(), this._updateAllStarShardsComponents()
                }
                _updateInventory() {
                    if (!this._inventory) return;
                    const e = this.shadowRoot.querySelector(".cosmetic-option-scroller").scrollTop;
                    setTimeout((() => {
                        this.shadowRoot.querySelector(".cosmetic-option-scroller").scrollTop = e
                    }));
                    const t = this._getOptionsSection();
                    let s;
                    t.innerHTML = "";
                    const o = i.tra.get("tft_companions_none_label");
                    t.appendChild(this._createCosmeticOption({
                        itemId: 0,
                        loadoutsIcon: n(10),
                        level: 0,
                        contentId: "NONE_OPTION",
                        name: o,
                        owned: !0
                    })), i.lodash.forEach(this._inventory.groups, (e => {
                        s = this._createCosmeticOptionGroup(e), t.appendChild(s)
                    })), this._clickedItem ? this._clickedItem = (0, a.getLayoutItemById)(this._clickedItem.itemId, this._inventory) : this._clickedItem = (0, a.getLayoutItemById)(this._inventory.selectedLoadoutItem.itemId, this._inventory), this._hoveredUpgrades = this._hoveredUpgrades ? this._hoveredUpgrades : this._clickedItem, this._setFocusedItem(this._hoveredUpgrades), this._selectItem(this._clickedItem)
                }
                _formatStarShardsAmount(e) {
                    return isNaN(e) ? "0" : e < 1e5 ? e.toString() : (e = 1e3 * Math.floor(e / 1e3), i.tra.numeral(e).format("0a"))
                }
                _getRecentItems() {
                    let e = [];
                    new Date;
                    return i.lodash.forEach(this._inventory.groups, (t => {
                        i.lodash.forEach(t.items, (t => {
                            let n = !1;
                            if ("" !== t.purchaseDate && t.owned) {
                                if (t.upgrades && t.upgrades.length > 0) {
                                    n = !0;
                                    const s = this._extractUpgrades(t);
                                    0 !== s.length && (e = e.concat(s))
                                }
                                t.isUpgradable = n, this._numberOfDaysFromToday(t.purchaseDate) < 14 && e.push(t)
                            }
                        }))
                    })), e
                }
                _extractUpgrades(e) {
                    const t = [];
                    return i.lodash.forEach(e.upgrades, (e => {
                        e.owned && (e.isUpgradable = !0, this._numberOfDaysFromToday(e.purchaseDate) < 14 && t.push(e))
                    })), t
                }
                _isItemShown(e) {
                    let t = e.owned;
                    i.lodash.forEach(e.upgrades, (e => {
                        t = t || e.owned
                    }));
                    const n = t || !this._hideUnowned,
                        s = e.name.toLowerCase().includes(this._searchString.toLowerCase());
                    return n && s
                }
                _updateSelectedItem(e) {
                    if (!e) return;
                    this.shadowRoot.querySelector(".selected-cosmetic").setAttribute("content-id", e.contentId);
                    const t = this.shadowRoot.querySelector(".selected-cosmetic-header-group");
                    this._toggleClass("locked", ".selected-cosmetic-header-group", !e.owned), t.style.background = `linear-gradient(to bottom, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 0) 60%, rgba(1, 10, 19, .80) 85%, rgba(1, 10, 19, 1) 100%), center/cover no-repeat url(${e.loadoutsIcon})`;
                    const n = this.shadowRoot.querySelector(".selected-cosmetic-title"),
                        s = e.name;
                    n.innerHTML = s.trim(), this._removeClass("rarity-0", ".selected-cosmetic"), this._removeClass("rarity-1", ".selected-cosmetic"), this._removeClass("rarity-2", ".selected-cosmetic"), this._removeClass("rarity-3", ".selected-cosmetic"), e.itemId > 1 && this._addClass(`rarity-${e.rarityValue}`, ".selected-cosmetic")
                }
                _getMiscSection() {
                    return this.shadowRoot.querySelector("div.cosmetic-misc")
                }
                _getOptionsSection() {
                    return this.shadowRoot.querySelector("div.cosmetic-option-group-list")
                }
                _createCosmeticGroupHeader(e) {
                    const t = document.createElement("div");
                    t.className = "cosmetic-option-group-header";
                    const n = document.createElement("div");
                    if (n.className = "cosmetic-option-group-title", n.innerHTML = e.groupName, t.appendChild(n), e.groupId !== m) {
                        const n = document.createElement("div");
                        n.className = "cosmetic-option-group-info", n.innerHTML = i.tra.formatString("tft_companions_count_label", {
                            owned: e.numOwned,
                            available: e.numAvailable
                        }), t.appendChild(n)
                    }
                    return t
                }
                _createCosmeticOptionGroup(e) {
                    const t = document.createElement("div");
                    t.className = "cosmetic-option-group", t.appendChild(this._createCosmeticGroupHeader(e));
                    const n = document.createElement("div");
                    n.className = "cosmetic-option-list", t.appendChild(n), n.addEventListener("mouseleave", (e => {
                        e.stopPropagation(), this._resetSelected()
                    }));
                    let s = !1;
                    e.groupId === m && (s = !0);
                    let o = !1;
                    return i.lodash.forEach(e.items, (e => {
                        const t = this._isItemShown(e);
                        o = o || t;
                        const i = this._createCosmeticOption(e, s, t);
                        n.appendChild(i)
                    })), t.setAttribute("group-shown", o), t
                }
                _createCosmeticOption(e, t, n) {
                    const s = document.createElement("lol-parties-cosmetics-renderer");
                    return s.className = "cosmetic-option", s.setAttribute("data-owned", e.owned), s.setAttribute("is-recent-group", t), s.setAttribute("is-recent-item", e.isRecentItem && !this._removedRecentHighlighting.includes(e.contentId)), s.setAttribute("item-shown", n), s.setIsRewardsProgramEnabled(this._isRewardsProgramEnabled), s.setData(e), s
                }
                _createLoyaltyMedalElement() {
                    const e = document.createElement("div");
                    return e.className = "cosmetic-option-loyalty", e
                }
                _hideUpgradeTooltip() {
                    this._addClass("hidden", "div.cosmetic-upgrade-container")
                }
                _resetSelected() {
                    this._inventory && (this._setFocusedItem(this._clickedItem), this._updateSelectedItem(this._clickedItem))
                }
                _updateType() {
                    this._hideUpgradeTooltip(), setTimeout((() => {
                        this._toggleClass("star-shards-disabled", "div.cosmetic-upgrade-container", "companions" !== this._type), "companions" === this._type && this._clickedItem && this._clickedItem.upgrades && this._clickedItem.upgrades.length > 0 && this._removeClass("hidden", "div.cosmetic-upgrade-container")
                    })), this._retrieveSettingsData()
                }
                static get observedAttributes() {
                    return ["type", "show-none"]
                }
                attributeChangedCallback(e, t, n) {
                    switch (e) {
                        case "type":
                            this._type = n, this._updateType(), this._clickedItem && this._updateAllStarShardsComponents();
                            break;
                        case "show-none":
                            this._showNoneOption = this.hasAttribute("show-none"), this._showNoneOption ? this._addClass("show-none", "div.cosmetic-option-group-list") : this._removeClass("show-none", "div.cosmetic-option-group-list")
                    }
                }
                _playSound(e) {
                    i.Audio.getChannel(o.default.SFX_CHANNEL).playSound(e)
                }
                _setElementText(e, t) {
                    const n = this.shadowRoot.querySelector(e);
                    n && (n.innerHTML = t)
                }
                _addClass(e, t) {
                    const n = this.shadowRoot.querySelector(t);
                    n && !n.classList.contains(e) && n.classList.add(e)
                }
                _removeClass(e, t) {
                    const n = this.shadowRoot.querySelector(t);
                    n && n.classList.contains(e) && n.classList.remove(e)
                }
                _toggleClass(e, t, n) {
                    return n ? this._addClass(e, t) : this._removeClass(e, t)
                }
                _attachListener(e, t, n) {
                    const s = this.shadowRoot.querySelector(e);
                    s && s.addEventListener(t, n)
                }
                _detachListener(e, t, n) {
                    const s = this.shadowRoot.querySelector(e);
                    s && s.removeEventListener(t, n)
                }
                _numberOfDaysFromToday(e) {
                    return (new Date - this._convertDateStringToDate(e)) / 864e5
                }
                _convertDateStringToDate(e) {
                    if (!/^[0-9]{8}T[0-9]{6}.[0-9]{3}Z$/.test(e)) return new Date(e);
                    const t = e.substr(0, 4),
                        n = e.substr(4, 2),
                        s = e.substr(6, 2),
                        i = e.substr(9, 2),
                        o = e.substr(11, 2),
                        a = e.substr(13, 2);
                    return new Date(`${t}-${n}-${s}T${i}:${o}:${a}Z`)
                }
            }
            p.tagName = "lol-parties-cosmetics-panel";
            var h = p;
            t.default = h
        }, e => {
            "use strict";
            e.exports = '\ufeff<template id="lol-parties-template-cosmetics-panel">\r\n\t<div class="cosmetic-selection-container">\r\n\t\t\x3c!-- todo JA:, improve filter when box exists --\x3e\r\n\t\t<div class="cosmetic-selection-options-container">\r\n\r\n\t\t\t<lol-uikit-flat-input class="search-container">\r\n\t\t\t\t<input\r\n\t\t\t\t  id="cosmetic_search_bar"\r\n\t\t\t\t  type="search"\r\n\t\t\t\t  name="search"\r\n\t\t\t\t  maxlength="24"\r\n\t\t\t\t/>\r\n\t\t\t  </lol-uikit-flat-input>\r\n\t\t\t<div class="currency-container">\r\n\t\t\t\t<video\r\n\t\t\t        class="currency-upgrade-video"\r\n\t\t\t        preload="auto"\r\n\t\t\t        src="/fe/lol-parties/starstards_currency_decrease.webm">\r\n\t\t\t    </video>\r\n\t\t\t\t<div class="currency-ss hidden"></div>\r\n\t\t    </div>\r\n\t\t</div>\r\n\t\t<lol-uikit-flat-checkbox class="hide-unowned-checkbox-container">\r\n\t\t\t<input id="hide_unowned_checkbox" type="checkbox" slot="input">\r\n\t\t\t<label id="hide_unowned_checkbox_label" for="hide_unowned_checkbox" slot="label"></label>\r\n\t\t</lol-uikit-flat-checkbox>\r\n\t\t<lol-uikit-scrollable overflow-masks="enabled" class="cosmetic-option-scroller">\r\n\t\t\t<div class="cosmetic-scroller-item cosmetic-option-group-list">\r\n\t\t\t\t\x3c!-- Renderer layout example\r\n\t\t\t\t<div class="cosmetic-option-group">\r\n\t\t\t\t\t<div class="cosmetic-option-group-header">\r\n\t\t\t\t\t\t<div class="cosmetic-option-group-title"></div>\r\n\t\t\t\t\t\t<div class="cosmetic-option-group-info"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class="cosmetic-option-list">\r\n\t\t\t\t\t\t<div class="cosmetic-option"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t--\x3e\r\n\t\t\t</div>\r\n\t\t</lol-uikit-scrollable>\r\n\r\n\t</div>\r\n\t<div class="selected-cosmetic">\r\n\t\t<div class="selected-cosmetic-header-group">\r\n\t\t</div>\r\n\t\t<div class="selected-cosmetic-header-group-2">\r\n\t\t\t<div class="selected-cosmetic-rarity"></div>\r\n\t\t\t<div class="selected-cosmetic-title"></div>\r\n\t\t\t<div class="cosmetic-upgrade-container hidden">\r\n\t\t\t\t<div class="cosmetic-upgrade-bounding-container cosmetic-upgrade-1 unowned">\r\n\t\t\t\t\t<div class="cosmetic-upgrade">\r\n\t\t\t\t\t\t<span class=\'cosmetics-modal-star\'></span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class="cosmetic-upgrade-bounding-container cosmetic-upgrade-2 unowned">\r\n\t\t\t\t\t<div class="cosmetic-upgrade">\r\n\t\t\t\t\t\t<span class=\'cosmetics-modal-star\'></span>\r\n\t\t\t\t\t\t<span class=\'cosmetics-modal-star\'></span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class="cosmetic-upgrade-bounding-container cosmetic-upgrade-3 unowned">\r\n\t\t\t\t\t<div class="cosmetic-upgrade">\r\n\t\t\t\t\t\t<span class=\'cosmetics-modal-star\'></span>\r\n\t\t\t\t\t\t<span class=\'cosmetics-modal-star\'></span>\r\n\t\t\t\t\t\t<span class=\'cosmetics-modal-star\'></span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<span class="star-shards-label-wrapper">\r\n\t\t\t\t<span class="star-shards-label"></span>\r\n\t\t\t\t<span class="star-shards-amount"></span>\r\n\t\t\t</span>\r\n\t\t\t<lol-uikit-flat-button class="cosmetic-group-action-button" disabled>\r\n\t\t\t</lol-uikit-flat-button>\r\n\t\t</div>\r\n\r\n\t</div>\r\n</template>'
        }, (e, t, n) => {
            var s = n(8),
                i = n(9)(s);
            i.push([e.id, ':host .cosmetic-selection-options-container .currency-ss,\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper,\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title {\n  font-family: var(--font-display);\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input,\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-option-group-list .cosmetic-option-group .cosmetic-option-group-header {\n  font-family: var(--font-body);\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input,\n:host .cosmetic-selection-options-container .currency-ss,\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper,\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title,\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-option-group-list .cosmetic-option-group .cosmetic-option-group-header {\n  -webkit-user-select: none;\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input,\n:host .cosmetic-selection-options-container .currency-ss,\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper,\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title,\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-option-group-list .cosmetic-option-group .cosmetic-option-group-header {\n  font-kerning: normal;\n  -webkit-font-feature-settings: "kern" 1;\n  -webkit-font-smoothing: antialiased;\n}\n:host .cosmetic-selection-options-container .currency-ss,\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper,\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title {\n  text-transform: uppercase;\n}\n:host .cosmetic-selection-options-container .currency-ss:lang(ko-kr),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper:lang(ko-kr),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title:lang(ko-kr),\n:host .cosmetic-selection-options-container .currency-ss:lang(ja-jp),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper:lang(ja-jp),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title:lang(ja-jp),\n:host .cosmetic-selection-options-container .currency-ss:lang(tr-tr),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper:lang(tr-tr),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title:lang(tr-tr),\n:host .cosmetic-selection-options-container .currency-ss:lang(el-gr),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper:lang(el-gr),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title:lang(el-gr),\n:host .cosmetic-selection-options-container .currency-ss:lang(th-th),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper:lang(th-th),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title:lang(th-th),\n:host .cosmetic-selection-options-container .currency-ss:lang(zh-tw),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper:lang(zh-tw),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title:lang(zh-tw) {\n  text-transform: none;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper,\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title {\n  text-transform: none;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title {\n  color: #f0e6d2;\n  font-size: 24px;\n  font-weight: 700;\n  line-height: 28px;\n  letter-spacing: 0.05em;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title {\n  letter-spacing: 0.025em;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper {\n  color: #f0e6d2;\n  font-size: 18px;\n  font-weight: 700;\n  line-height: 22px;\n  letter-spacing: 0.05em;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper {\n  letter-spacing: 0.025em;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-option-group-list .cosmetic-option-group .cosmetic-option-group-header {\n  color: #a09b8c;\n  font-size: 14px;\n  font-weight: normal;\n  line-height: 20px;\n  letter-spacing: 0.025em;\n  -webkit-font-smoothing: subpixel-antialiased;\n}\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-option-group-list .cosmetic-option-group .cosmetic-option-group-header:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input {\n  color: #a09b8c;\n  font-size: 12px;\n  font-weight: normal;\n  line-height: 16px;\n  letter-spacing: 0.025em;\n  -webkit-font-smoothing: subpixel-antialiased;\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input:lang(ja-jp) {\n  font-size: 13px;\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host .cosmetic-selection-options-container .currency-ss {\n  font-size: 14px;\n  font-weight: 700;\n  letter-spacing: 0.075em;\n  color: #cdbe91;\n}\n:host .cosmetic-selection-options-container .currency-ss.active {\n  position: relative;\n  color: #f0e6d2;\n}\n:host .cosmetic-selection-options-container .currency-ss:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host .cosmetic-selection-options-container .currency-ss,\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper,\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title {\n  font-family: var(--font-display);\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input,\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-option-group-list .cosmetic-option-group .cosmetic-option-group-header {\n  font-family: var(--font-body);\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input,\n:host .cosmetic-selection-options-container .currency-ss,\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper,\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title,\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-option-group-list .cosmetic-option-group .cosmetic-option-group-header {\n  -webkit-user-select: none;\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input,\n:host .cosmetic-selection-options-container .currency-ss,\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper,\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title,\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-option-group-list .cosmetic-option-group .cosmetic-option-group-header {\n  font-kerning: normal;\n  -webkit-font-feature-settings: "kern" 1;\n  -webkit-font-smoothing: antialiased;\n}\n:host .cosmetic-selection-options-container .currency-ss,\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper,\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title {\n  text-transform: uppercase;\n}\n:host .cosmetic-selection-options-container .currency-ss:lang(ko-kr),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper:lang(ko-kr),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title:lang(ko-kr),\n:host .cosmetic-selection-options-container .currency-ss:lang(ja-jp),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper:lang(ja-jp),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title:lang(ja-jp),\n:host .cosmetic-selection-options-container .currency-ss:lang(tr-tr),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper:lang(tr-tr),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title:lang(tr-tr),\n:host .cosmetic-selection-options-container .currency-ss:lang(el-gr),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper:lang(el-gr),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title:lang(el-gr),\n:host .cosmetic-selection-options-container .currency-ss:lang(th-th),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper:lang(th-th),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title:lang(th-th),\n:host .cosmetic-selection-options-container .currency-ss:lang(zh-tw),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper:lang(zh-tw),\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title:lang(zh-tw) {\n  text-transform: none;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper,\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title {\n  text-transform: none;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title {\n  color: #f0e6d2;\n  font-size: 24px;\n  font-weight: 700;\n  line-height: 28px;\n  letter-spacing: 0.05em;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title {\n  letter-spacing: 0.025em;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper {\n  color: #f0e6d2;\n  font-size: 18px;\n  font-weight: 700;\n  line-height: 22px;\n  letter-spacing: 0.05em;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper {\n  letter-spacing: 0.025em;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-option-group-list .cosmetic-option-group .cosmetic-option-group-header {\n  color: #a09b8c;\n  font-size: 14px;\n  font-weight: normal;\n  line-height: 20px;\n  letter-spacing: 0.025em;\n  -webkit-font-smoothing: subpixel-antialiased;\n}\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-option-group-list .cosmetic-option-group .cosmetic-option-group-header:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input {\n  color: #a09b8c;\n  font-size: 12px;\n  font-weight: normal;\n  line-height: 16px;\n  letter-spacing: 0.025em;\n  -webkit-font-smoothing: subpixel-antialiased;\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input:lang(ja-jp) {\n  font-size: 13px;\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host .cosmetic-selection-options-container .currency-ss {\n  font-size: 14px;\n  font-weight: 700;\n  letter-spacing: 0.075em;\n  color: #cdbe91;\n}\n:host .cosmetic-selection-options-container .currency-ss.active {\n  position: relative;\n  color: #f0e6d2;\n}\n:host .cosmetic-selection-options-container .currency-ss:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  position: relative;\n}\n:host .cosmetic-selection-options-container {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding-right: 33px;\n  padding-left: 20px;\n  padding-bottom: 10px;\n  position: relative;\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input {\n  display: block;\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input {\n  display: block;\n  box-sizing: border-box;\n  width: 100%;\n  height: 30px;\n  padding: 0 6px;\n  -webkit-appearance: none;\n  outline: none;\n  color: #f0e6d2;\n  border: thin solid #785a28;\n  background-color: rgba(0,0,0,0.7);\n  box-shadow: 0 0 0 1px rgba(0,0,0,0.25) inset, 0 0 0 1px rgba(0,0,0,0.25);\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input:lang(ar-ae) {\n  direction: rtl;\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input[type=\'search\'] {\n/* This is a fix for RCBUG-4514, where pasting any text twice\n       * in a row causes it to jump while the input is has focus.\n       * The bug only seems to occur when the line-height is larger\n       * than [height] / 2.\n       */\n  line-height: 15px;\n  padding-left: 24px;\n  background: no-repeat 5px center/16px url("/fe/lol-static-assets/images/uikit/magnifying-glass-icon.png") rgba(0,0,0,0.7);\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input[type=\'search\']:lang(ar-ae) {\n  direction: rtl;\n  padding: 0 24px 0 6px;\n  background-position: 98% center;\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input[type=\'search\']:focus {\n  background: no-repeat 5px center/16px url("/fe/lol-static-assets/images/uikit/magnifying-glass-icon.png"), linear-gradient(to bottom, rgba(7,16,25,0.7), rgba(32,39,44,0.7));\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input[type=\'search\']:focus:lang(ar-ae) {\n  background-position: 98% center;\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input:focus {\n  background: linear-gradient(to bottom, rgba(7,16,25,0.7), rgba(32,39,44,0.7));\n  border-image: linear-gradient(to bottom, #785a28, #c8aa6e) 1 stretch;\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input:disabled {\n  color: #5c5b57;\n  background-color: #1e2328;\n  border-color: #3c3c41;\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input::-webkit-input-placeholder {\n  color: #a09b8c;\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input[type="search"]::-webkit-search-cancel-button {\n  -webkit-appearance: none;\n  cursor: pointer;\n  height: 18px;\n  width: 18px;\n  margin: 0 0 0 5px;\n  -webkit-mask: url("/fe/lol-uikit/images/search-box-clear.png") no-repeat center;\n  background-color: #cdbe91;\n  -webkit-mask-size: contain;\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input[type="search"]::-webkit-search-cancel-button:hover {\n  background-color: #f0e6d2;\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input[type="search"]::-webkit-search-cancel-button:active {\n  background-color: #463714;\n}\n:host .cosmetic-selection-options-container lol-uikit-flat-input input[type="search"]:lang(ar-ae)::-webkit-search-cancel-button {\n  margin: 0 5px 0 0;\n}\n:host .cosmetic-selection-options-container .search-container {\n  flex: 0 0 auto;\n  width: 325px;\n}\n:host .cosmetic-selection-options-container .currency-container {\n  position: relative;\n}\n:host .cosmetic-selection-options-container .currency-ss {\n  visibility: visible;\n  position: relative;\n  color: #f0e6d2;\n  padding: 3px 8px 4px 30px;\n  border-radius: 8px;\n  background: rgba(0,0,0,0.5);\n  cursor: pointer;\n}\n:host .cosmetic-selection-options-container .currency-ss.hidden {\n  visibility: hidden;\n}\n:host .cosmetic-selection-options-container .currency-ss::after {\n  content: \'\';\n  position: absolute;\n  left: -2px;\n  top: 0;\n  bottom: 0;\n  width: 35px;\n  background-image: url("/fe/lol-static-assets/images/icon-star-shards-active-88.png");\n  background-position: 0 center;\n  background-size: 35px 35px;\n  background-repeat: no-repeat;\n}\n:host .cosmetic-selection-options-container .currency-upgrade-video {\n  position: absolute;\n  top: -33px;\n  left: -88px;\n  mix-blend-mode: screen;\n  width: 256px;\n  height: 64px;\n}\n:host .hide-unowned-checkbox-container {\n  display: flex;\n  padding-left: 20px;\n}\n:host .hide-unowned-checkbox-container .hide_unowned_checkbox_label {\n  height: 17px;\n}\n:host .selected-cosmetic {\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: center;\n  width: 323px;\n  position: relative;\n  flex: 0 0 auto;\n}\n:host .selected-cosmetic[content-id="NONE_OPTION"] {\n  background-size: 100px;\n  background-repeat: no-repeat;\n  background-position: center;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group {\n  width: 100%;\n  height: 405px;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-end;\n  align-items: center;\n  flex: 1 1 auto;\n  box-shadow: inset 0 0 20px 1px #010a13, inset 0 0 0 1px #010a13;\n  background: linear-gradient(to bottom, rgba(0,0,0,0) 0%, rgba(0,0,0,0) 70%, #000);\n  background-size: cover;\n  background-position: center;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group.locked {\n  filter: grayscale(0.75) brightness(0.85);\n}\n:host .selected-cosmetic.rarity-0 .selected-cosmetic-header-group-2 .selected-cosmetic-rarity {\n  background-image: url("/fe/lol-parties/common_plating_big.png");\n}\n:host .selected-cosmetic.rarity-1 .selected-cosmetic-header-group-2 .selected-cosmetic-rarity {\n  background-image: url("/fe/lol-parties/epic_plating_big.png");\n}\n:host .selected-cosmetic.rarity-2 .selected-cosmetic-header-group-2 .selected-cosmetic-rarity {\n  background-image: url("/fe/lol-parties/legendary_plating_big.png");\n}\n:host .selected-cosmetic.rarity-3 .selected-cosmetic-header-group-2 .selected-cosmetic-rarity {\n  background-image: url("/fe/lol-parties/mythic_plating_big.png");\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 {\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: flex-start;\n  flex: 0 0 auto;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-icon {\n  width: 16px;\n  height: 16px;\n  position: relative;\n  vertical-align: middle;\n  margin-top: -1px;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-group-action-button {\n  display: flex;\n  min-width: 170px;\n  height: 32px;\n  flex: 0 0 auto;\n  padding-bottom: 24px;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-group-action-button::before {\n  display: inline-block;\n  height: 10px;\n  width: 10px;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 12px;\n  line-height: 16px;\n  height: 24px;\n  color: #ff2345;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper.hidden {\n  opacity: 0;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper.purchasable {\n  color: #c8aa6e;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper .star-shards-amount {\n  color: #f0e6d2;\n  margin-left: 0.5em;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .star-shards-label-wrapper .star-shards-amount.hidden {\n  display: none;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-title {\n  line-height: 20px;\n  font-size: 21px;\n  letter-spacing: 0.07em;\n  text-align: center;\n  width: 95%;\n  flex: 0 0 auto;\n  margin-top: 14px;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .selected-cosmetic-rarity {\n  background-image: url("/fe/lol-parties/no_plating_big.png");\n  background-position: center;\n  background-repeat: no-repeat;\n  background-size: 150px 30px;\n  width: 100%;\n  height: 30px;\n  flex: 0 0 auto;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container {\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  transition: opacity 0.1s linear;\n  margin-bottom: 12px;\n  margin-top: 24px;\n  padding: 0 3px 0 3px;\n  flex: 1 1 auto;\n  position: relative;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container.hidden {\n  opacity: 0;\n  pointer-events: none;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container .cosmetic-upgrade-bounding-container {\n  width: 76px;\n  height: 34px;\n  position: relative;\n  background: linear-gradient(#c8aa6e, #785a28);\n  flex: 0 0 auto;\n  border-radius: 21px;\n  margin-right: 10px;\n  cursor: pointer;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container .cosmetic-upgrade-bounding-container:last-child {\n  margin-right: 0;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container .cosmetic-upgrade-bounding-container.recent,\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container .cosmetic-upgrade-bounding-container.intended {\n  box-shadow: 0px 0px 5px rgba(255,171,46,0.7), 0px 0px 15px rgba(255,171,46,0.7);\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container .cosmetic-upgrade-bounding-container.recent .cosmetic-upgrade,\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container .cosmetic-upgrade-bounding-container.intended .cosmetic-upgrade {\n  background: linear-gradient(#1e2328, #585342);\n  background-clip: padding-box; /* !importanté */\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container .cosmetic-upgrade-bounding-container.recent .cosmetic-upgrade .cosmetics-modal-star,\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container .cosmetic-upgrade-bounding-container.intended .cosmetic-upgrade .cosmetics-modal-star {\n  filter: brightness(1.4);\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container .cosmetic-upgrade-bounding-container.equipped .cosmetic-upgrade {\n  background: linear-gradient(#c8aa6e, #785a28);\n  background-clip: padding-box; /* !importanté */\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container .cosmetic-upgrade-bounding-container.unowned .cosmetic-upgrade {\n  background: #1e2328;\n  background-clip: padding-box; /* !importanté */\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container .cosmetic-upgrade-bounding-container.unowned .cosmetic-upgrade .cosmetics-modal-star {\n  filter: contrast(0) brightness(0.5);\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container .cosmetic-upgrade-bounding-container.unowned::after {\n  content: \'\';\n  position: absolute;\n  left: 0;\n  bottom: 0;\n  right: 0;\n  background-repeat: no-repeat;\n  background-position: center;\n  transform: translateY(50%);\n  pointer-events: none;\n  height: 40px;\n  background-size: 40px;\n  background-image: url("../../images/loadouts/lock.png");\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container .cosmetic-upgrade-bounding-container.unowned.not-enough-shards::before {\n  content: \' \';\n  position: absolute;\n  left: 0;\n  top: 0;\n  right: 0px;\n  height: 16px;\n  background-image: url("/fe/lol-static-assets/images/icon-star-shards-36.png");\n  background-size: 16px;\n  background-repeat: no-repeat;\n  background-position: center;\n  transform: translateY(-50%);\n  pointer-events: none;\n  z-index: 1;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container .cosmetic-upgrade-bounding-container.unowned.purchasable::before {\n  content: \' \';\n  position: absolute;\n  left: 0;\n  top: 0;\n  right: 0;\n  background-repeat: no-repeat;\n  background-position: center;\n  transform: translateY(-50%);\n  pointer-events: none;\n  height: 35px;\n  background-size: 35px;\n  z-index: 1;\n  background-image: url("/fe/lol-static-assets/images/icon-star-shards-active-88.png");\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container .cosmetic-upgrade-bounding-container.unowned.purchasable::after {\n  opacity: 0;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container .cosmetic-upgrade-bounding-container:hover.unowned::after {\n  transform: translateY(53%);\n  background-image: url("../../images/loadouts/lock_hover.png");\n  height: 54px;\n  background-size: 54px 54px;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container .cosmetic-upgrade-bounding-container:hover.unowned .cosmetic-upgrade .cosmetics-modal-star {\n  filter: contrast(0.2) brightness(0.7);\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container .cosmetic-upgrade-bounding-container:hover .cosmetic-upgrade {\n  background: linear-gradient(#1e2328, #585342);\n  background-clip: padding-box; /* !importanté */\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container .cosmetic-upgrade-bounding-container:hover .cosmetic-upgrade .cosmetics-modal-star {\n  filter: brightness(1.4);\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container .cosmetic-upgrade-bounding-container .cosmetic-upgrade {\n  border-radius: 21px;\n  width: 100%;\n  height: 100%;\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  background: #1e2328;\n  background-clip: padding-box; /* !importanté */\n  border: 2px solid transparent;\n  pointer-events: none;\n  position: relative;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container .cosmetic-upgrade-bounding-container .cosmetic-upgrade .cosmetics-modal-star {\n  width: 18px;\n  height: 18px;\n  display: block;\n  background-image: url("/fe/lol-parties/tier_star.svg");\n  background-size: contain;\n}\n:host .selected-cosmetic .selected-cosmetic-header-group-2 .cosmetic-upgrade-container .cosmetic-upgrade-bounding-container.star-shards-disabled .cosmetic-upgrade::before {\n  opacity: 0;\n}\n:host .cosmetic-selection-container {\n  position: relative;\n  flex: 1 1 auto;\n  overflow: hidden;\n  padding-right: 10px;\n  padding-top: 10px;\n  padding-bottom: 10px;\n  border-right: 2px solid transparent;\n  border-left: 2px solid transparent;\n  border-image: linear-gradient(rgba(45,35,17,0.6) 0px, rgba(90,70,34,0.6) 11.46%, rgba(90,70,34,0.6) 88.54%, rgba(45,35,17,0.6) 100%) 1;\n}\n:host .cosmetic-selection-container .cosmetic-option-scroller {\n  width: 100%;\n  height: 100%;\n  flex: 1 1 auto;\n}\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-scroller-item {\n  padding: 0 10px 0 10px;\n}\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-scroller-item:first-child {\n  padding-top: 10px;\n}\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-option-misc {\n  display: flex;\n  flex-direction: row;\n}\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-option-group-list {\n  display: flex;\n  flex-direction: column;\n  flex-wrap: wrap;\n  justify-content: flex-start;\n  transition: opacity 0.1s linear 0.01s;\n}\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-option-group-list.hidden {\n  opacity: 0;\n  pointer-events: none;\n  height: 10%;\n}\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-option-group-list .cosmetic-option {\n  transition: opacity 0.05s linear, height 0.05s linear, width 0.01s linear, padding-bottom 0.01s linear;\n}\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-option-group-list .cosmetic-option[content-id="NONE_OPTION"] {\n  display: none;\n  background-size: 36px;\n  background-repeat: no-repeat;\n}\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-option-group-list.show-none .cosmetic-option[content-id="NONE_OPTION"] {\n  display: flex;\n}\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-option-group-list .cosmetic-option-group {\n  display: block;\n  padding-bottom: 13px;\n  transition: opacity 0.1s linear, height 0.1s linear, width 0.01s linear, padding-bottom 0.01s linear;\n}\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-option-group-list .cosmetic-option-group .cosmetic-option-group-header {\n  display: flex;\n  margin: 5px;\n  opacity: 0.7;\n  color: #f0e6d2;\n  background: linear-gradient(270deg, rgba(90,70,34,0) 0%, #5a4622 52.08%, #ab8e58 92.19%, rgba(90,70,34,0) 100%), linear-gradient(2.02deg, rgba(1,10,19,0) 23.21%, rgba(1,10,19,0.72) 84.16%), linear-gradient(270deg, rgba(55,46,28,0) 0%, #372e1c 71.35%, #372e1c 85.94%, rgba(55,46,28,0) 100%);\n  background-size: 100% 1px, 100% 19px, 100% 19px;\n  background-repeat: no-repeat;\n  background-position: 0 19px, 0 0, 0 0;\n  letter-spacing: 0.05em;\n  padding-bottom: 10px;\n  transition: opacity 0.05s linear;\n}\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-option-group-list .cosmetic-option-group .cosmetic-option-group-header .cosmetic-option-group-title {\n  opacity: 1;\n  padding-right: 5px;\n}\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-option-group-list .cosmetic-option-group .cosmetic-option-list {\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: flex-start;\n}\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-option-group-list .cosmetic-option-group[group-shown="false"] {\n  opacity: 0;\n  pointer-events: none;\n  height: 0;\n  width: 0;\n  padding-bottom: 0;\n}\n:host .cosmetic-selection-container .cosmetic-option-scroller .cosmetic-option-group-list .cosmetic-option-group[group-shown="false"] .cosmetic-option-group-header {\n  opacity: 0;\n}\n:host .cosmetic-selection-container .cosmetic-option-scroller lol-parties-cosmetics-renderer[item-shown="false"] {\n  opacity: 0;\n  pointer-events: none;\n  height: 0;\n  width: 0;\n  margin: 0;\n}\n', ""]), e.exports = i
        }, (e, t, n) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.default = void 0;
            var s, i = n(1),
                o = (s = n(5)) && s.__esModule ? s : {
                    default: s
                },
                a = n(46);
            class l extends i.webComponents.ShadowElement {
                templateMarkup() {
                    return n(58)
                }
                stylesheetMarkup() {
                    return n(59)
                }
                constructor() {
                    super(), this._onClickBinding = this._onClicked.bind(this), this._onMouseInBinding = this._onMouseIn.bind(this), this._eventPreventDefaultCallback = e => e.preventDefault(), this.isRewardsProgramEnabled = a.REWARDS_PROGRAM_STATUS.UNSET
                }
                connectedCallback() {
                    super.connectedCallback(), this.addEventListener("click", this._onClickBinding), this.addEventListener("mouseenter", this._onMouseInBinding), this.addEventListener("mousedown", this._eventPreventDefaultCallback)
                }
                disconnectedCallback() {
                    super.disconnectedCallback(), this.removeEventListener("click", this._onClickBinding), this.removeEventListener("mouseenter", this._onMouseInBinding), this.removeEventListener("mousedown", this._eventPreventDefaultCallback)
                }
                _onClicked() {
                    this._playSound(o.default.SFX_URLS.SFX_COMPANION_PICKER_CLICK), this.dispatchEvent(new CustomEvent("lol-parties-cosmetics-item-click", {
                        composed: !0,
                        detail: {
                            item: this._data
                        }
                    }))
                }
                _onMouseIn() {
                    this._playSound(o.default.SFX_URLS.SFX_COMPANION_PICKER_HOVER), this.dispatchEvent(new CustomEvent("lol-parties-cosmetics-item-hover", {
                        composed: !0,
                        detail: {
                            item: this._data
                        }
                    }))
                }
                _playSound(e) {
                    i.Audio.getChannel(o.default.SFX_CHANNEL).playSound(e)
                }
                setIsRewardsProgramEnabled(e) {
                    this.isRewardsProgramEnabled = e
                }
                setData(e) {
                    if (!e) return;
                    this._setIconPath(e);
                    let t = !1,
                        n = !1;
                    const s = this.getAttribute("is-recent-group");
                    if (e.upgrades && e.upgrades.length > 0 && "true" !== s)
                        for (let s = e.upgrades.length - 1; s >= 0; s--) {
                            const i = e.upgrades[s];
                            i.owned && i.selected ? this._setIconPath(i) : !i.owned || n || t || this._setIconPath(i), t = t || i.selected, n = n || i.owned, i.owned ? this._removeClass("unowned", `.rank-${s+2}`) : this._addClass("unowned", `.rank-${s+2}`), t ? this._addClass("selected", `.rank-${s+2}`) : this._removeClass("selected", `.rank-${s+2}`)
                        }
                    e.selected && e.owned && this._setIconPath(e), t = t || e.selected, n = n || e.owned, e.owned ? (t ? this._addClass("selected", ".rank-1") : this._removeClass("selected", ".rank-1"), this._removeClass("unowned", ".rank-1")) : this._addClass("unowned", ".rank-1"), this._data && this._removeClass(`rarity-${this._data.rarityValue}`, ".cosmetics-renderer-rarity"), this._addClass(`rarity-${e.rarityValue}`, ".cosmetics-renderer-rarity"), this._setSelected(t), n ? (this._addOwned(), e.itemId > 1 ? (this._removeClass("hidden", ".cosmetics-renderer-rarity"), e.upgrades && e.upgrades.length > 0 && this._removeClass("hidden", ".cosmetics-renderer-rank-container")) : (this._addClass("hidden", ".cosmetics-renderer-rank-container"), this._addClass("hidden", ".cosmetics-renderer-rarity"))) : (this._removeClass("owned", ".cosmetics-renderer"), this._removeClass("owned", ".cosmetics-renderer-filter"), this._addClass("hidden", ".cosmetics-renderer-rank-container"), this._addClass("hidden", ".cosmetics-renderer-rarity")), this._setIds(e), this._setLoyalty(e.loyalty), s && this._setRecentItemData(e), this._data = e
                }
                _setRecentItemData(e) {
                    e.isUpgradable && this._removeClass("hidden", ".cosmetics-renderer-rank-container");
                    for (let t = 1; t <= e.level; t++) this._removeClass("unowned", `.rank-${t}`), e.selected && this._addClass("selected", `.rank-${t}`)
                }
                _setSelected(e) {
                    e ? this._addClass("selected", ".cosmetics-renderer") : this._removeClass("selected", ".cosmetics-renderer")
                }
                _setLoyalty(e) {
                    e ? this.isRewardsProgramEnabled === a.REWARDS_PROGRAM_STATUS.ENABLED ? this._removeClass("hidden", ".cosmetics-renderer-rewards-program") : this.isRewardsProgramEnabled === a.REWARDS_PROGRAM_STATUS.DISABLED && this._removeClass("hidden", ".cosmetics-renderer-loyalty") : this.isRewardsProgramEnabled === a.REWARDS_PROGRAM_STATUS.ENABLED ? this._addClass("hidden", ".cosmetics-renderer-rewards-program") : this.isRewardsProgramEnabled === a.REWARDS_PROGRAM_STATUS.DISABLED && this._addClass("hidden", ".cosmetics-renderer-loyalty")
                }
                _addOwned() {
                    this._addClass("owned", ".cosmetics-renderer"), this._addClass("owned", ".cosmetics-renderer-filter")
                }
                _setIds(e) {
                    this.setAttribute("content-id", e.contentId), this.setAttribute("item-id", e.itemId)
                }
                _setElementText(e, t) {
                    const n = this.shadowRoot.querySelector(e);
                    n && (n.innerHTML = t)
                }
                _setIconPath(e) {
                    const t = this.shadowRoot.querySelector(".cosmetics-renderer-icon");
                    t && (t.src = e.loadoutsIcon)
                }
                static get observedAttributes() {
                    return ["highlighted", "is-recent-group"]
                }
                attributeChangedCallback(e, t, n) {
                    if ("highlighted" === e) n ? this._addClass("highlighted", ".cosmetics-renderer") : this._removeClass("highlighted", ".cosmetics-renderer")
                }
                _addClass(e, t) {
                    const n = this.shadowRoot.querySelector(t);
                    n && !n.classList.contains(e) && n.classList.add(e)
                }
                _removeClass(e, t) {
                    const n = this.shadowRoot.querySelector(t);
                    n && n.classList.contains(e) && n.classList.remove(e)
                }
            }
            l.tagName = "lol-parties-cosmetics-renderer";
            var r = l;
            t.default = r
        }, e => {
            "use strict";
            e.exports = '<template id="lol-parties-template-cosmetics-renderer">\r\n  <div class="cosmetics-renderer">\r\n    <img class="cosmetics-renderer-icon"/>\r\n    <div class="cosmetics-renderer-filter"></div>\r\n    <div class="cosmetics-renderer-rank-container hidden">\r\n      <div class="cosmetics-renderer-rank-bounding-container">\r\n        <span class=\'cosmetics-renderer-star rank-1 unowned\'></span>\r\n        <span class=\'cosmetics-renderer-star rank-2 unowned\'></span>\r\n        <span class=\'cosmetics-renderer-star rank-3 unowned\'></span>\r\n      </div>\r\n    </div>\r\n    <div class="cosmetics-renderer-rarity"></div>\r\n    <div class="cosmetics-renderer-loyalty hidden"></div>\r\n    <div class="cosmetics-renderer-rewards-program hidden"></div>\r\n  </div>\r\n</template>\r\n'
        }, (e, t, n) => {
            var s = n(8),
                i = n(9)(s);
            i.push([e.id, ':host {\n  --rcp-fe-lol-parties-cosmetics-renderer-border-width: 2px;\n}\n:host {\n  position: relative;\n  width: 64px;\n  height: 72px;\n  margin: 7px;\n  box-sizing: border-box;\n  cursor: pointer;\n}\n:host .cosmetics-renderer {\n  position: relative;\n  width: 100%;\n  height: 64px;\n  box-sizing: border-box;\n  border: thin solid #1e2328;\n}\n:host .cosmetics-renderer.selected {\n  filter: none;\n  border-width: 2px;\n  border: 2px solid #c79a3b;\n}\n:host .cosmetics-renderer.selected .cosmetics-renderer-rank-container {\n  top: -8px;\n}\n:host .cosmetics-renderer.selected .cosmetics-renderer-rank-container .cosmetics-renderer-rank-bounding-container {\n  background: linear-gradient(#c8aa6e, #785a28);\n}\n:host .cosmetics-renderer.selected .cosmetics-renderer-rank-container .cosmetics-renderer-rank-bounding-container .cosmetics-renderer-star {\n  filter: brightness(0.5);\n}\n:host .cosmetics-renderer.selected .cosmetics-renderer-rank-container .cosmetics-renderer-rank-bounding-container .cosmetics-renderer-star.selected {\n  filter: none;\n}\n:host .cosmetics-renderer.selected .cosmetics-renderer-rarity {\n  bottom: -20px;\n  left: 3px;\n  background-image: url("/fe/lol-parties/common_plating_hover.png");\n}\n:host .cosmetics-renderer.selected .cosmetics-renderer-rarity.rarity-1 {\n  background-image: url("/fe/lol-parties/epic_plating_hover.png");\n}\n:host .cosmetics-renderer.selected .cosmetics-renderer-rarity.rarity-2 {\n  background-image: url("/fe/lol-parties/legendary_plating_hover.png");\n}\n:host .cosmetics-renderer.selected .cosmetics-renderer-rarity.rarity-3 {\n  background-image: url("/fe/lol-parties/mythic_plating_hover.png");\n}\n:host .cosmetics-renderer:hover,\n:host .cosmetics-renderer.highlighted {\n  filter: brightness(110%);\n  border-width: 2px;\n  border-image: linear-gradient(to bottom, #f0e6d2, #c89b3c) 1;\n}\n:host .cosmetics-renderer:hover .cosmetics-renderer-rarity,\n:host .cosmetics-renderer.highlighted .cosmetics-renderer-rarity {\n  bottom: -20px;\n  left: 3px;\n  background-image: url("/fe/lol-parties/common_plating_hover.png");\n}\n:host .cosmetics-renderer:hover .cosmetics-renderer-rarity.rarity-1,\n:host .cosmetics-renderer.highlighted .cosmetics-renderer-rarity.rarity-1 {\n  background-image: url("/fe/lol-parties/epic_plating_hover.png");\n}\n:host .cosmetics-renderer:hover .cosmetics-renderer-rarity.rarity-2,\n:host .cosmetics-renderer.highlighted .cosmetics-renderer-rarity.rarity-2 {\n  background-image: url("/fe/lol-parties/legendary_plating_hover.png");\n}\n:host .cosmetics-renderer:hover .cosmetics-renderer-rarity.rarity-3,\n:host .cosmetics-renderer.highlighted .cosmetics-renderer-rarity.rarity-3 {\n  background-image: url("/fe/lol-parties/mythic_plating_hover.png");\n}\n:host .cosmetics-renderer:hover:not(.selected) .cosmetics-renderer-loyalty::after,\n:host .cosmetics-renderer.highlighted:not(.selected) .cosmetics-renderer-loyalty::after {\n  transform: translate(229%, -336%);\n}\n:host .cosmetics-renderer:not(.owned)::before {\n  content: \'\';\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  background-color: #000;\n  background-size: 100% 100%;\n  opacity: 50%;\n}\n:host .cosmetics-renderer:not(.owned)::before::hover {\n  opacity: 0;\n}\n:host .cosmetics-renderer:not(.owned)::after {\n  content: \' \';\n  position: absolute;\n  width: 100%;\n  height: 40px;\n  top: 0;\n  left: 0;\n  background-image: url("/fe/lol-parties/lock.png");\n  background-position: center bottom;\n  background-repeat: no-repeat;\n  background-size: 40px 40px;\n  transform: translate(0, -52%) /*rtl:translate(0, -52%)*/;\n}\n:host .cosmetics-renderer:not(.owned):hover::before {\n  background-color: rgba(0,0,0,0.3);\n}\n:host .cosmetics-renderer:not(.owned):hover::after {\n  background-image: url("/fe/lol-parties/lock_hover.png");\n  height: 54px;\n  background-size: 54px 54px;\n  transform: translate(0, -47%) /*rtl:translate(0, -52%)*/;\n}\n:host .cosmetics-renderer .cosmetics-renderer-filter {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(0,0,0,0.6);\n  border: thin solid #000;\n}\n:host .cosmetics-renderer .cosmetics-renderer-filter.owned {\n  background-color: rgba(0,0,0,0);\n}\n:host .cosmetics-renderer .cosmetics-renderer-rank-container {\n  position: absolute;\n  top: -7px;\n  left: 0;\n  pointer-events: none;\n  display: flex;\n  width: 100%;\n}\n:host .cosmetics-renderer .cosmetics-renderer-rank-container .cosmetics-renderer-rank-bounding-container {\n  padding: 1px 6px 1px 6px;\n  border-radius: 100px;\n  box-sizing: border-box;\n  background: #1e2328;\n  border: thin solid #000;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin: auto;\n}\n:host .cosmetics-renderer .cosmetics-renderer-rank-container .cosmetics-renderer-rank-bounding-container .cosmetics-renderer-star {\n  width: 10px;\n  height: 10px;\n  display: block;\n  background-image: url("/fe/lol-parties/tier_star.svg");\n  background-size: contain;\n  background-position: center;\n  background-repeat: no-repeat;\n  flex: 0 0 auto;\n}\n:host .cosmetics-renderer .cosmetics-renderer-rank-container .cosmetics-renderer-rank-bounding-container .cosmetics-renderer-star.unowned {\n  display: none;\n}\n:host .cosmetics-renderer .cosmetics-renderer-icon {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n  position: relative;\n}\n:host .cosmetics-renderer .cosmetics-renderer-icon::before {\n  content: "";\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  box-shadow: inset 0 0 1 10px #000;\n}\n:host .cosmetics-renderer .cosmetics-renderer-rarity {\n  position: absolute;\n  bottom: -19px;\n  left: 4px;\n  width: 56px;\n  height: 32px;\n  background-image: url("/fe/lol-parties/common_plating.png");\n  background-position: center bottom;\n  background-repeat: no-repeat;\n  background-size: contain;\n}\n:host .cosmetics-renderer .cosmetics-renderer-rarity.rarity-1 {\n  background-image: url("/fe/lol-parties/epic_plating.png");\n}\n:host .cosmetics-renderer .cosmetics-renderer-rarity.rarity-2 {\n  background-image: url("/fe/lol-parties/legendary_plating.png");\n}\n:host .cosmetics-renderer .cosmetics-renderer-rarity.rarity-3 {\n  background-image: url("/fe/lol-parties/mythic_plating.png");\n}\n:host .cosmetics-renderer .cosmetics-renderer-loyalty {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n}\n:host .cosmetics-renderer .cosmetics-renderer-loyalty::after {\n  content: \' \';\n  position: absolute;\n  width: 22px;\n  height: 22px;\n  background-image: url("/fe/lol-parties/Loyalty.png");\n  background-position: center bottom;\n  background-size: 22px 22px;\n  transform: translate(233%, -340%);\n}\n:host .cosmetics-renderer .cosmetics-renderer-rewards-program {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n}\n:host .cosmetics-renderer .cosmetics-renderer-rewards-program::after {\n  content: \' \';\n  position: absolute;\n  width: 22px;\n  height: 22px;\n  background-image: url("/fe/lol-static-assets/images/loyalty-nav-bar.svg");\n  background-position: center bottom;\n  background-size: 22px 22px;\n  transform: translate(233%, -340%);\n}\n:host .cosmetics-renderer .hidden {\n  visibility: hidden;\n  opacity: 0;\n}\n:host-context([is-recent-item="true"]) .cosmetics-renderer {\n  border-width: 2px;\n  border-image: linear-gradient(to bottom, #fdfaf1, #78531c) 1;\n}\n:host-context([is-recent-item="true"]) .cosmetics-renderer .cosmetics-renderer-rank-container {\n  top: -8px;\n}\n:host-context([is-recent-item="true"]) .cosmetics-renderer .cosmetics-renderer-rank-container .cosmetics-renderer-rank-bounding-container {\n  background: linear-gradient(#c8aa6e, #785a28);\n}\n:host-context([is-recent-item="true"]) .cosmetics-renderer .cosmetics-renderer-rank-container .cosmetics-renderer-rank-bounding-container .cosmetics-renderer-star {\n  filter: contrast(30) brightness(100%);\n  background-image: url("/fe/lol-parties/recent_star.png");\n}\n:host-context([is-recent-item="true"]) .cosmetics-renderer .cosmetics-renderer-rarity {\n  bottom: -20px;\n  left: 3px;\n}\n:host-context([is-recent-item="true"]) .cosmetics-renderer .cosmetics-renderer-icon {\n  filter: drop-shadow(0px 0px 5px rgba(255,193,34,0.25)) drop-shadow(0px 0px 4px rgba(255,184,0,0.25)) drop-shadow(0px 0px 8px #ffcf53);\n}\n', ""]), e.exports = i
        }, (e, t, n) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.default = void 0;
            var s, i = n(1),
                o = (s = n(5)) && s.__esModule ? s : {
                    default: s
                };
            class a extends i.webComponents.ShadowElement {
                templateMarkup() {
                    return n(61)
                }
                stylesheetMarkup() {
                    return n(62)
                }
                constructor() {
                    super(), this._listenersAdded = !1
                }
                connectedCallback() {
                    super.connectedCallback();
                    const e = this.shadowRoot.querySelector("#bg-particles-intro");
                    this._animationPlaybackStarted || (e.onAnimationStart = () => {
                        i.Audio.getChannel(o.default.SFX_CHANNEL).playSound(o.default.SFX_URLS.SFX_STAR_SHARDS_CELEBRATION);
                        this.shadowRoot.querySelector("#bg-particles-stars").play();
                        const e = this.shadowRoot.querySelector(".bg-video-intro");
                        e.play(), e.addEventListener("done", (() => {
                            this.shadowRoot.querySelector(".bg-video-loop").play()
                        })), setTimeout((() => {
                            const e = this.shadowRoot.querySelector(".lighting-bolts");
                            e.play(), e.addEventListener("done", (() => {
                                this.shadowRoot.querySelector(".rarity-bolts").play()
                            }))
                        }), 860), setTimeout((() => {
                            this._addClass("hidden", ".previous-tier-img")
                        }), 1660), this._removeClass("hidden", ".little-legend-container")
                    }, e.onAnimationComplete = () => {
                        const e = this.shadowRoot.querySelector("#bg-particles-loop");
                        this._removeClass("hidden", "#bg-particles-loop"), e.play()
                    }, e.play(), this._animationPlaybackStarted = !0)
                }
                setData({
                    previousItem: e,
                    newItem: t
                }) {
                    const n = this.shadowRoot.querySelector(".previous-tier-img"),
                        s = this.shadowRoot.querySelector(".new-tier-img");
                    n.src = e.loadoutsIcon, s.src = t.loadoutsIcon, this._addClass(`rarity-${e.rarityValue}`, ".little-legend-container");
                    this.shadowRoot.querySelector("#bg-particles-stars").setAttribute("src", `/fe/lol-parties/lottie/LLUpgradeCeremony_06LevelStarIcons/LLUpgradeCeremony_StarsLv${t.level}.json`)
                }
                _addClass(e, t) {
                    const n = this.shadowRoot.querySelector(t);
                    n && !n.classList.contains(e) && n.classList.add(e)
                }
                _removeClass(e, t) {
                    const n = this.shadowRoot.querySelector(t);
                    n && n.classList.contains(e) && n.classList.remove(e)
                }
            }
            a.tagName = "lol-parties-cosmetics-upgrade-celebration";
            var l = a;
            t.default = l
        }, e => {
            "use strict";
            e.exports = '<template id="lol-parties-template-cosmetics-upgrade-celebration">\r\n    <lol-uikit-lottie id="bg-particles-intro"\r\n                      class="lottie-animation"\r\n                      src="/fe/lol-parties/lottie/LLUpgradeCeremony_01Scene/LLUpgradeCeremony_Scene_IN.json"\r\n                      image-path="/fe/lol-parties/lottie/LLUpgradeCeremony_01Scene/images/"\r\n                      autoplay="false">\r\n    </lol-uikit-lottie>\r\n    <lol-uikit-lottie id="bg-particles-loop"\r\n                      class="lottie-animation hidden"\r\n                      src="/fe/lol-parties/lottie/LLUpgradeCeremony_01Scene/LLUpgradeCeremony_Scene_LOOP.json"\r\n                      image-path="/fe/lol-parties/lottie/LLUpgradeCeremony_01Scene/images/"\r\n                      autoplay="false"\r\n                      loop="true">\r\n    </lol-uikit-lottie>\r\n\r\n    <lol-uikit-video class="bg-video bg-video-intro"\r\n                     type="intro"\r\n                     preload\r\n                     src="/fe/lol-parties/lottie/LLUpgradeCeremony_02BGParticles/videos/LLUpgradeCeremony_ParticlesBG_IN.webm">\r\n    </lol-uikit-video>\r\n    <lol-uikit-video class="bg-video bg-video-loop"\r\n                     type="idle"\r\n                     preload\r\n                     src="/fe/lol-parties/lottie/LLUpgradeCeremony_02BGParticles/videos/LLUpgradeCeremony_ParticlesBG_LOOP.webm">\r\n    </lol-uikit-video>\r\n\r\n\r\n    <div class="little-legend-container hidden">\r\n        <img class="little-legend-img new-tier-img"/>\r\n        <img class="little-legend-img previous-tier-img"/>\r\n        <div class="little-legend-overlay"></div>\r\n    </div>\r\n\r\n    <lol-uikit-video class="bg-video lighting-bolts"\r\n                     type="intro"\r\n                     src="/fe/lol-parties/lottie/LLUpgradeCeremony_04FGLightning/videos/LLUpgradeCeremony_BoltsFG.webm">\r\n    </lol-uikit-video>\r\n\r\n    <lol-uikit-video class="rarity-bolts"\r\n                     type="intro"\r\n                     src="/fe/lol-parties/lottie/LLUpgradeCeremony_05RarityBolts/videos/LLUpgradeCeremony_RarityBolts.webm">\r\n    </lol-uikit-video>\r\n    <lol-uikit-lottie id="bg-particles-stars"\r\n                      class="lottie-animation"\r\n                      image-path="/fe/lol-parties/lottie/LLUpgradeCeremony_06LevelStarIcons/images/"\r\n                      autoplay="false"\r\n                      >\r\n    </lol-uikit-lottie>\r\n</template>'
        }, (e, t, n) => {
            var s = n(8),
                i = n(9)(s);
            i.push([e.id, ':host {\n  width: 1280px;\n  height: 720px;\n  position: relative;\n}\n:host .hidden {\n  visibility: hidden;\n}\n:host .lottie-animation {\n  position: absolute;\n  width: 1280px;\n  height: 720px;\n}\n:host .bg-video {\n  position: absolute;\n  width: 720px;\n  height: 720px;\n  left: 280px;\n  top: 0;\n  mix-blend-mode: screen;\n}\n:host .rarity-bolts {\n  position: absolute;\n  width: 96px;\n  height: 96px;\n  left: 592px;\n  top: 408px;\n}\n:host .little-legend-container {\n  position: absolute;\n  width: 208px;\n  height: 208px;\n  left: 532px;\n  top: 236px;\n  border: 4px solid;\n  border-image: linear-gradient(180deg, #c8aa6e 0%, #c89b3c 48.96%, #785a28 100%) 50 stretch stretch;\n}\n:host .little-legend-container:before {\n  position: absolute;\n  content: " ";\n  left: -5px;\n  right: -5px;\n  bottom: -5px;\n  top: -5px;\n  border: 1px solid rgba(0,0,0,0.25);\n}\n:host .little-legend-container:after {\n  position: absolute;\n  content: "";\n  bottom: -43px;\n  left: 48px;\n  width: 112px;\n  height: 64px;\n  background-size: 100% 100%;\n  background-image: url("../../images/loadouts/common_plating_hover.png");\n}\n:host .little-legend-container.rarity-1:after {\n  background-image: url("../../images/loadouts/epic_plating_hover.png");\n}\n:host .little-legend-container.rarity-2:after {\n  background-image: url("../../images/loadouts/legendary_plating_hover.png");\n}\n:host .little-legend-container.rarity-3:after {\n  background-image: url("../../images/loadouts/mythic_plating_hover.png");\n}\n:host .little-legend-img {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n  box-sizing: border-box;\n  border: 1px solid rgba(0,0,0,0.25);\n}\n:host .little-legend-overlay {\n  position: absolute;\n  height: 83px;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: linear-gradient(180deg, rgba(0,0,0,0) 0%, rgba(0,0,0,0.77) 66.15%);\n}\n', ""]), e.exports = i
        }, (e, t, n) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.default = void 0;
            var s = n(1);
            const i = (0, s.getProvider)().getSocket();
            class o extends s.webComponents.ShadowElement {
                templateMarkup() {
                    return n(64)
                }
                stylesheetMarkup() {
                    return n(65)
                }
                constructor() {
                    super(), this._selectedSeries = "", this._selectedOuterRadius = "44px", this._selectedInnerRadius = "38px", this._dataBinding = (0, s.dataBinding)("/lol-missions", i), this._created = !0
                }
                connectedCallback() {
                    this.addEventListener("click", (e => {
                        s.Navigation.showTracker(this._selectedSeries)
                    })), this._selectedSeries = this.getAttribute("series"), this._selectedOuterRadius = this.getAttribute("outerRadius") ? this.getAttribute("outerRadius") : this._selectedOuterRadius, this._selectedInnerRadius = this.getAttribute("innerRadius") ? this.getAttribute("innerRadius") : this._selectedInnerRadius;
                    const e = this.shadowRoot.querySelector(".series-button-container");
                    e.style.setProperty("--outer-radius", this._selectedOuterRadius), e.style.setProperty("--inner-radius", this._selectedInnerRadius), this._dataBinding.observe("/v1/series", this, this._handleSeriesChanged), this._dataBinding.observe("/v1/missions", this, this._handleMissionsChanged), this.shadowRoot.querySelector(".series-tracker-label").innerHTML = s.tra.get("missions_series_button_text")
                }
                disconnectedCallback() {
                    this.removeEventListener("click", (e => {
                        s.Navigation.showTracker(this._selectedSeries)
                    })), this._dataBinding.unobserve(this)
                }
                _handleMissionsChanged(e) {
                    if (this._missions = e, !e || !this._series || 0 === e.length || 0 === this._series.length || !this._selectedSeriesNames) return;
                    this._seriesSeriesMissions = [];
                    let t = 0;
                    s.lodash.forEach(e, (e => {
                        ("" === this._selectedSeries || "all_missions" === this._selectedSeries || this._selectedSeriesNames.indexOf(e.seriesName) > -1) && e.display && e.display.locations.indexOf("LCU_TRACKER") > -1 && (this._seriesSeriesMissions.push(e), e.isNew && t++)
                    })), t > 0 ? (this.shadowRoot.querySelector(".series-tracker-reminder-label").innerHTML = t, this._removeClass("hidden", ".series-tracker-reminder-label")) : this._addClass("hidden", ".series-tracker-reminder-label")
                }
                _handleSeriesChanged(e) {
                    if (this._series = e, !e || !this._missions || 0 === e.length || 0 === this._missions.length) return;
                    this._selectedSeriesNames = [];
                    const t = s.lodash.keyBy(this._series, "internalName");
                    for (const e in t) {
                        let n = t[e].parentInternalName;
                        for (; t[n];) n = t[n].parentInternalName;
                        "" !== this._selectedSeries && "all_missions" !== this._selectedSeries && e !== this._selectedSeries && n !== this._selectedSeries || this._selectedSeriesNames.push(e)
                    }
                    this._handleMissionsChanged(this._missions)
                }
                _updateType(e) {
                    this._type = e
                }
                static get observedAttributes() {
                    return ["series", "type"]
                }
                attributeChangedCallback(e, t, n) {
                    "series" === e ? (this._selectedSeries = n, this._handleSeriesChanged(this._series)) : "type" === e && this._updateType(n)
                }
                _addClass(e, t) {
                    const n = this.shadowRoot.querySelector(t);
                    n && !n.classList.contains(e) && n.classList.add(e)
                }
                _removeClass(e, t) {
                    const n = this.shadowRoot.querySelector(t);
                    n && n.classList.contains(e) && n.classList.remove(e)
                }
                _attachListener(e, t, n) {
                    const s = this.shadowRoot.querySelector(e);
                    s && s.addEventListener(t, n)
                }
                _detachListener(e, t, n) {
                    const s = this.shadowRoot.querySelector(e);
                    s && s.removeEventListener(t, n)
                }
            }
            o.tagName = "lol-parties-series-button";
            var a = o;
            t.default = a
        }, e => {
            "use strict";
            e.exports = '\ufeff<template id="lol-parties-template-series-button">\r\n\t<div class="series-button-container">\r\n        <div class="series-tracker-label"></div>\r\n\t\t<div class="series-tracker-button">\r\n        </div>\r\n\t\t<div class="series-tracker-reminder-label hidden"></div>\r\n\t</div>\r\n</template>\r\n'
        }, (e, t, n) => {
            var s = n(8),
                i = n(9)(s);
            i.push([e.id, ':host .series-button-container .series-tracker-reminder-label {\n  font-family: var(--font-display);\n}\n:host .series-button-container .series-tracker-label {\n  font-family: var(--font-body);\n}\n:host .series-button-container .series-tracker-label,\n:host .series-button-container .series-tracker-reminder-label {\n  -webkit-user-select: none;\n}\n:host .series-button-container .series-tracker-label,\n:host .series-button-container .series-tracker-reminder-label {\n  font-kerning: normal;\n  -webkit-font-feature-settings: "kern" 1;\n  -webkit-font-smoothing: antialiased;\n}\n:host .series-button-container .series-tracker-reminder-label {\n  text-transform: uppercase;\n}\n:host .series-button-container .series-tracker-reminder-label:lang(ko-kr),\n:host .series-button-container .series-tracker-reminder-label:lang(ja-jp),\n:host .series-button-container .series-tracker-reminder-label:lang(tr-tr),\n:host .series-button-container .series-tracker-reminder-label:lang(el-gr),\n:host .series-button-container .series-tracker-reminder-label:lang(th-th),\n:host .series-button-container .series-tracker-reminder-label:lang(zh-tw) {\n  text-transform: none;\n}\n:host .series-button-container .series-tracker-reminder-label {\n  color: #f0e6d2;\n  font-size: 12px;\n  font-weight: 700;\n  line-height: 16px;\n  letter-spacing: 0.075em;\n}\n:host .series-button-container .series-tracker-reminder-label:lang(ja-jp) {\n  font-size: 13px;\n}\n:host .series-button-container .series-tracker-reminder-label:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host .series-button-container .series-tracker-label {\n  color: #a09b8c;\n  font-size: 12px;\n  font-weight: normal;\n  line-height: 16px;\n  letter-spacing: 0.1em;\n  -webkit-font-smoothing: subpixel-antialiased;\n}\n:host .series-button-container .series-tracker-label:lang(ja-jp) {\n  font-size: 13px;\n}\n:host .series-button-container .series-tracker-label:lang(ar-ae) {\n  letter-spacing: 0;\n}\n:host([type="simple"]) .series-button-container .series-tracker-label {\n  display: none;\n}\n:host([type="simple"]) .series-button-container .series-tracker-button {\n  transform: none;\n}\n:host([type="simple"]) .series-button-container .series-tracker-reminder-label {\n  transform: none;\n}\n:host {\n  height: 48px;\n}\n:host .series-button-container {\n  height: var(--outer-radius);\n  position: relative;\n  margin-right: 8px;\n  margin-top: 4px;\n  display: flex;\n  align-items: center;\n}\n:host .series-button-container .series-tracker-label {\n  height: 29px;\n  border-radius: 10px;\n  background: rgba(0,0,0,0.54);\n  text-align: right;\n  padding-right: 25px;\n  padding-left: 15px;\n  line-height: 29px;\n  flex: 0 0 auto;\n  cursor: pointer;\n}\n:host .series-button-container .series-tracker-button {\n  position: relative;\n  width: var(--outer-radius);\n  height: var(--outer-radius);\n  border: 1px solid rgba(0,0,0,0.35);\n  border-radius: 50%;\n  box-sizing: border-box;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background: linear-gradient(#c1a05e, #6c5228);\n  flex: 0 0 auto;\n  transform: translateX(-35%);\n  cursor: pointer;\n}\n:host .series-button-container .series-tracker-button::before {\n  content: "";\n  position: absolute;\n  width: var(--inner-radius);\n  height: var(--inner-radius);\n  box-sizing: border-box;\n  border: 1px solid rgba(0,0,0,0.35);\n  background-image: url("/lol-game-data/assets/ASSETS/UX/TFT/OutOfGame/Missions/SeriesIcons/series_icon.svg");\n  background-repeat: no-repeat;\n  background-position: center;\n  background-size: 45%;\n  background-color: #1e2328;\n  border-radius: 50%;\n}\n:host .series-button-container .series-tracker-reminder-label {\n  width: 21px;\n  height: 18px;\n  position: absolute;\n  background: #c89b3c;\n  border-radius: 4px;\n  right: -4px;\n  top: -4px;\n  font-size: 12px;\n  line-height: 18px;\n  letter-spacing: 0.03em;\n  text-align: center;\n  color: #000;\n  box-shadow: 0 0 0 #c89b3c;\n  animation: flash 1s infinite alternate;\n  transform: translateX(-35%);\n}\n:host .series-button-container .series-tracker-reminder-label.hidden {\n  opacity: 0;\n}\n@-moz-keyframes flash {\n  0% {\n    filter: brightness(100%);\n    box-shadow: 0 0 0 #c89b3c;\n  }\n  25% {\n    filter: brightness(100%);\n    box-shadow: 0 0 0 #c89b3c;\n  }\n  100% {\n    filter: brightness(125%);\n    box-shadow: 0 0 8px #c89b3c;\n  }\n}\n@-webkit-keyframes flash {\n  0% {\n    filter: brightness(100%);\n    box-shadow: 0 0 0 #c89b3c;\n  }\n  25% {\n    filter: brightness(100%);\n    box-shadow: 0 0 0 #c89b3c;\n  }\n  100% {\n    filter: brightness(125%);\n    box-shadow: 0 0 8px #c89b3c;\n  }\n}\n@-o-keyframes flash {\n  0% {\n    filter: brightness(100%);\n    box-shadow: 0 0 0 #c89b3c;\n  }\n  25% {\n    filter: brightness(100%);\n    box-shadow: 0 0 0 #c89b3c;\n  }\n  100% {\n    filter: brightness(125%);\n    box-shadow: 0 0 8px #c89b3c;\n  }\n}\n@keyframes flash {\n  0% {\n    filter: brightness(100%);\n    box-shadow: 0 0 0 #c89b3c;\n  }\n  25% {\n    filter: brightness(100%);\n    box-shadow: 0 0 0 #c89b3c;\n  }\n  100% {\n    filter: brightness(125%);\n    box-shadow: 0 0 8px #c89b3c;\n  }\n}\n:host .series-button-container:hover {\n  filter: brightness(125%);\n}\n:host .series-button-container:hover .series-tracker-reminder-label {\n  animation: none;\n}\n', ""]), e.exports = i
        }, (e, t, n) => {
            "use strict";
            var s = function(e, t) {
                    if (!t && e && e.__esModule) return e;
                    if (null === e || "object" != typeof e && "function" != typeof e) return {
                        default: e
                    };
                    var n = _(t);
                    if (n && n.has(e)) return n.get(e);
                    var s = {},
                        i = Object.defineProperty && Object.getOwnPropertyDescriptor;
                    for (var o in e)
                        if ("default" !== o && Object.prototype.hasOwnProperty.call(e, o)) {
                            var a = i ? Object.getOwnPropertyDescriptor(e, o) : null;
                            a && (a.get || a.set) ? Object.defineProperty(s, o, a) : s[o] = e[o]
                        } s.default = e, n && n.set(e, s);
                    return s
                }(n(1)),
                i = y(n(67)),
                o = y(n(69)),
                a = y(n(70)),
                l = y(n(71)),
                r = y(n(72)),
                c = y(n(19)),
                m = y(n(13)),
                u = y(n(75)),
                d = y(n(16)),
                p = n(15),
                h = y(n(76)),
                g = y(n(25)),
                b = y(n(77)),
                f = y(n(78));

            function y(e) {
                return e && e.__esModule ? e : {
                    default: e
                }
            }

            function _(e) {
                if ("function" != typeof WeakMap) return null;
                var t = new WeakMap,
                    n = new WeakMap;
                return (_ = function(e) {
                    return e ? n : t
                })(e)
            }
            const v = "/lol-summoner/v1/current-summoner",
                S = s.default.getProvider().getSocket(),
                E = s.Navigation.getFullPageModalManager(),
                x = s.UIKit.getModalManager();
            e.exports = class {
                constructor() {
                    this._currentParty = null, this._currentPlayer = null, this._selected = null, this._application = null, this._lastGameflowPhase = null, this._factoryRegistered = !1, this._restoreNavigationState = null, this._applicationRegisteredPromise = null, this._partyCreatedCallback = null, this._lobbiesObserver = !1, this._gameflowObserver = !1, this._queues = m.default, this._platformConfigSingleton = d.default, this._showingState = l.default.create();
                    const e = s.Viewport.getApiKey("rcp-fe-lol-parties - bump/release parties");
                    g.default.set("viewportApiKey", e), this._screenRoot = s.Viewport.main().getScreenRoot(e, "rcp-fe-lol-parties"), this._connectViewportIsShowing(), this._connectToPatcher(), this._requirements = {
                        login: !1,
                        summoner: !1
                    }, this._binding = s.dataBinding.bindTo((0, s.getProvider)().getSocket()), this._binding.addObserver(v, this, this._updateSummoner), this._readyCheckNotifications = new b.default
                }
                show() {
                    return new Promise(((e, t) => {
                        this._createApplication().then((() => {
                            s.logger.trace("BUMPING PARTIES SCREEN ROOT"), this._ensureSomethingVisible(), this._restoreNavigationState = s.Navigation.clearActive(), this._screenRoot.bump().then((() => {
                                s.logger.trace("PARTIES VISIBLE IN SCREEN ROOT"), this._showingState.set("isInViewport", !0)
                            })), e()
                        }), (e => {
                            t(e)
                        }))
                    }))
                }
                showParty(e = !1) {
                    return this._currentParty || e ? (this._showingState.showParty(), this.show().catch((e => {
                        s.logger.error("ERROR SHOWING PARTY", e)
                    }))) : (s.logger.error("ASKED TO SHOW PARTY BUT NOT ATTACHED TO PARTY"), Promise.reject())
                }
                showGameSelect() {
                    return s.logger.trace("SHOWING GAME SELECT"), this._showingState.showGameSelect(), this.show().catch((e => {
                        s.logger.error("ERROR SHOWING GAME SELECT", e)
                    }))
                }
                showGameSelectPreselected(e) {
                    this._setSelectedAndShowGameSelect(e)
                }
                getAvailableQueueIds(e, t, n) {
                    return this._queues.getAvailableQueuesForCategoryAndGameType(e, t, n)
                }
                hide() {
                    this._showingState.get("isInViewport") && (this._restoreNavigationState && (this._restoreNavigationState(), this._restoreNavigationState = null), this._showingState.set("isInViewport", !1)), s.logger.trace("RELEASING PARTIES SCREEN ROOT"), this._screenRoot.release()
                }
                canInvitePlayer(e) {
                    return u.default.canInvitePlayer(e)
                }
                invitePlayer(e, t) {
                    return u.default.invitePlayer(e, t)
                }
                subscribeCanInvite(e) {
                    return u.default.subscribeCanInvite(e)
                }
                unsubscribeCanInvite(e) {
                    return u.default.unsubscribeCanInvite(e)
                }
                createLobby(e) {
                    return new Promise(((t, n) => {
                        this._currentParty || (this._partyCreatedCallback = () => {
                            t()
                        }), this._currentPlayer ? !this._currentParty || this._currentParty.localMember.isLeader ? (this._lobbiesObserver.createLobby(e), this._currentParty && t()) : n(new Error("NOT_LEADER")) : n("NOT_SIGNED_IN")
                    }))
                }
                _connectViewportIsShowing() {
                    this._screenRoot.on("show", (() => {
                        this._showingState.set("isInViewport", !0), g.default.set("isShowing", !0)
                    })), this._screenRoot.on("hide", (() => {
                        this._showingState.set("isInViewport", !1), g.default.set("isShowing", !1), this._screenRoot.release()
                    }))
                }
                _connectToPatcher() {
                    s.Navigation.playButtonSubscribe((() => {
                        this._playButtonClicked()
                    })), s.Navigation.lobbyButtonSubscribe((() => {
                        this._lobbyButtonClicked()
                    })), s.Navigation.tftLobbySubscribe((() => {
                        this._showTftLobby()
                    })), this._screenRoot.on("show", (() => {
                        s.logger.trace("LOCKING PLAY BUTTON"), s.Navigation.setIsShowingLobby(!0)
                    })), this._screenRoot.on("hide", (() => {
                        this._restoreNavigationState = null, s.logger.trace("UNLOCKING PLAY BUTTON"), s.Navigation.setIsShowingLobby(!1)
                    }))
                }
                _updateSummoner(e) {
                    if (!e) return;
                    !e.unnamed && !e.nameChangeFlag && this._updateRequirements({
                        summoner: e
                    })
                }
                _updateRequirements(e) {
                    this._requirements = s.lodash.assign(this._requirements, e), this._requirements.summoner && (this._clearBindings(), this._handleNewSession(this._requirements.summoner))
                }
                _clearBindings() {
                    this._binding.removeObserver(v, this)
                }
                _handleNewSession(e) {
                    this._currentPlayer = e, this._lobbiesObserver = new i.default(this._currentPlayer, this._partyCreated.bind(this), this._partyDestroyed.bind(this), this._partyKicked.bind(this), this._partyTimeout.bind(this), this._partyGameStartError.bind(this), this._partyServiceShutdown.bind(this), this._partyServiceUnavailable.bind(this)), this._gameflowObserver = new o.default(this._gameflowPhaseChanged.bind(this))
                }
                _partyCreated(e) {
                    if (this._currentParty = e, this._ensureSelectedExists(), e.gameConfig) {
                        const {
                            isCustom: t
                        } = e.gameConfig;
                        this._selected.set("isTrainingGame", !1), this._selected.set("isCreatingCustomGame", t), this._selected.set("queueId", e.gameConfig.queueId), t ? this._selected.set("mapId", e.gameConfig.mapId) : c.default.checkForRankedDivisionRestriction(e)
                    } else s.logger.error("COULD NOT FIND party.gameConfig", e);
                    s.logger.trace("PARTY CREATED", this._selected.get("queueId")), this._selected.get("isUpdatingSelection") || (p.TUTORIAL_QUEUE_IDS.includes(this._selected.get("queueId")) ? this._showNewPlayerExperience() : this.showParty()), this._partyCreatedCallback && (this._partyCreatedCallback(), this._partyCreatedCallback = null)
                }
                _partyDestroyed() {
                    this._ensureSelectedExists(), this._selected.isUpdatingSelection || (this.hide(), this.navigateHomeIfPartyEndedInLobby(), this._currentParty = null)
                }
                navigateHomeIfPartyEndedInLobby() {
                    return (0, s.dataBinding)("/lol-gameflow", S).get("/v1/gameflow-phase").then((function(e) {
                        ("Lobby" === e || "None" === e) && s.Navigation.showHome()
                    }))
                }
                _partyKicked() {
                    (0, h.default)("parties_kicked_confirmation_body")
                }
                _partyTimeout() {
                    (0, h.default)("parties_timeout_confirmation_body")
                }
                _partyGameStartError() {
                    (0, h.default)("parties_game_start_error_confirmation_body", "parties_game_start_error_confirmation_ok")
                }
                _partyServiceShutdown() {
                    (0, h.default)("parties_service_shutdown_error_confirmation_body")
                }
                _partyServiceUnavailable() {
                    (0, h.default)("parties_service_unavailable_error_confirmation_body")
                }
                _playButtonClicked() {
                    s.logger.trace("PLAY BUTTON CLICKED"), this._setSelectedAndShowGameSelect()
                }
                _setSelectedAndShowGameSelect(e) {
                    let t;
                    if (e) {
                        const n = this._queues.get("useOperationalConfigs") ? this._queues.get("orderedQueueIds") : this._platformConfigSingleton.get("defaultGameQueues");
                        t = this._getFirstEligibleQueue(e, n)
                    } else t = this._getLastSelected();
                    t.then((e => {
                        this._ensureSelectedExists(), this._selected.set("queueId", e), this._selected.set("needsAdditionalGameConfig", !1), this._selected.set("isCreatingCustomGame", !1), this._selected.set("isJoiningCustomGame", !1), this._selected.set("isTrainingGame", !1), this.showGameSelect()
                    }), (e => {
                        s.logger.error("FAILED TO SHOW GAME SELECT", e), n(100)()
                    }))
                }
                _showTftLobby() {
                    this._lobbiesObserver.createLobby(p.DEFAULT_TFT_QUEUE_ID)
                }
                _lobbyButtonClicked() {
                    s.logger.trace("LOBBY BUTTON CLICKED"), this.showParty()
                }
                _getNpeQueueDefault() {
                    return (0, s.dataBinding)("lol-settings").get("/v2/account/LCUPreferences/lol-npe-first-touch")
                }
                _ensureSelectedExists() {
                    this._selected || (this._selected = a.default.create({
                        queues: this._queues
                    }))
                }
                _getLastSelected() {
                    return this._queueIdIfAlreadyPlayed().then((e => {
                        const t = this._queues.get("useOperationalConfigs") ? this._queues.get("orderedQueueIds") : this._platformConfigSingleton.get("defaultGameQueues");
                        return e ? (s.logger.trace("Found last-played-queue, checking eligibility...", e), this._getFirstEligibleQueue(e, t)) : this._getFirstEligibleQueue(null, t)
                    }))
                }
                _queueIdIfAlreadyPlayed() {
                    return this._lobbiesObserver ? this._lobbiesObserver.lastLobbyQueueId() : Promise.resolve(null)
                }
                _getFirstEligibleQueue(e, t = []) {
                    return new Promise((n => {
                        Promise.all([c.default.fetchEligibilities(), this._getNpeQueueDefault()]).then((i => {
                            const o = c.default.get("eligibilities");
                            if (e && o[e] && o[e].eligible) return void n(e);
                            const a = t.slice(),
                                l = i && i.length > 1 && i[1].data ? i[1].data.modeSelected : "";
                            l && l === p.NPE_FIRST_TOUCH_QUEUE_SELECT_ID.TFT && a.unshift(p.DEFAULT_TFT_QUEUE_ID), a.push(p.DEFAULT_QUEUE_ID);
                            for (let e = 0; e < a.length; e++) {
                                const t = a[e];
                                if (o[t] && o[t].eligible) return void n(t)
                            }
                            for (const e in o)
                                if (o[e].eligible) return s.logger.info("NOT ELIGIBLE FOR DEFAULT QUEUES, SELECTING FIRST ELIGIBLE QUEUE FOUND:", e), void n(parseInt(e, 10));
                            s.logger.error("COULD NOT FIND ELIGIBLE QUEUE OUT OF THOSE ENABLED", o), n(p.DEFAULT_QUEUE_ID)
                        }))
                    }))
                }
                _registerApplication() {
                    return this._factoryRegistered ? Promise.resolve() : new Promise((e => {
                        n(101)().then((() => {
                            this._factoryRegistered = !0, e()
                        }))
                    }))
                }
                _createApplication() {
                    if (this._application) return Promise.resolve(this._application);
                    if (this._applicationRegisteredPromise) return this._applicationRegisteredPromise;
                    const e = (e, t) => {
                        this._registerApplication().then((() => {
                            this._applicationRegisteredPromise = null, this._ensureSelectedExists(), this._application = s.ComponentFactory.create("PartiesScreen", {
                                showingState: this._showingState,
                                selected: this._selected,
                                queues: this._queues
                            }), this._application.domNode ? (this._screenRoot.getElement().appendChild(this._application.domNode), e(this._application)) : (s.logger.error("FAILED TO INITIALIZE PARTIES SCREEN"), t(new Error("PartiesScreen application failed to initialize.")))
                        })).catch((e => {
                            this._applicationRegisteredPromise = null, s.logger.error("ERROR REGISTERING PARTIES APPLICATION", e), t(e)
                        }))
                    };
                    return this._applicationRegisteredPromise = new Promise((function(t, n) {
                        e(t, n)
                    })), this._applicationRegisteredPromise
                }
                _destroyApplication() {
                    this._application && (this._application.domNode && this._screenRoot.getElement().removeChild(this._application.domNode), this._application.onRemove(), delete this.application, this.application = !1)
                }
                _gameflowPhaseChanged(e, t) {
                    const n = "EndOfGame" === t && "Lobby" === e,
                        s = -1 !== ["Lobby", "Matchmaking", "ReadyCheck"].indexOf(e),
                        i = "ChampSelect" === t && s;
                    "ChampSelect" === t && "Lobby" === e && r.default.handlePartyDodge(), n || i ? this.showParty(!0) : "ChampSelect" === e && this.hide()
                }
                _ensureSomethingVisible() {
                    this._showingState.get("isShowingParty") || this._showingState.get("isShowingGameSelect") || (this._currentParty ? this._showingState.showParty() : this._showingState.showGameSelect())
                }
                _showGameModeTutorialIfNeeded(e, t, n, i, o, a, l, r) {
                    if (!e || !t || !n) return;
                    const c = (0, s.dataBinding)("/lol-settings");
                    c.get("/v1/account/lol-tutorial").then((s => {
                        const m = i ? `Map${e}_${t}_${i}_TutorialSeen` : `Map${e}_${t}_TutorialSeen`;
                        if (s && s.data && s.data[m]) return;
                        const u = this._showGameModeTutorial(t, n, o, a, l, r),
                            d = e => {
                                "ok-button" === e && (s.data || (s.data = {}), s.data[m] = !0, c.patch("/v1/account/lol-tutorial", {
                                    data: s.data,
                                    schemaVersion: s.schemaVersion
                                }))
                            };
                        u ? u.then(d) : d("ok-button")
                    }))
                }
                _showGameModeTutorial(e, t, n, i, o, a) {
                    const l = p.ONE_PAGE_TUTORIAL_GAME_MODES.includes(e),
                        r = l ? "GameModeOnePageTutorialComponent" : "GameModeTutorialComponent",
                        c = p.ONE_PAGE_TUTORIAL_LONG_CARD_LAYOUT_GAME_MODES.includes(e),
                        m = s.ComponentFactory.create(r, s.Ember.Object.create({
                            title: n,
                            subheader: i,
                            tutorialCards: t,
                            tutorialBg: o,
                            iconV2: a,
                            isLongCardLayout: c
                        })),
                        u = s.ComponentFactory.getDOMNode(m);
                    let d;
                    if (l) {
                        d = x.add({
                            type: "DialogAlert",
                            data: {
                                contents: u,
                                okText: s.tra.get("TFT" === e ? "tft_tutorial_close" : "tutorial_one_page_confirm_button_text"),
                                dismissible: !0,
                                dismissibleType: "inside"
                            }
                        }).okPromise
                    } else {
                        E.open({
                            data: {
                                contents: u
                            }
                        })
                    }
                    return d
                }
                _showNewPlayerExperience() {
                    (0, s.getProvider)().getOptional("rcp-fe-lol-new-player-experience").then((e => e.show()), (e => s.logger.error("Provider getOptional failure", e)))
                }
                _showFlexRestrictionModalIfNeeded() {
                    const e = this._flexRestrictionModal ? this._flexRestrictionModal : new f.default;
                    e.tryShow(), this._flexRestrictionModal || (this._flexRestrictionModal = e)
                }
                loadQueueEligibilitiesIfDirty() {
                    const e = this._queues.get("useOperationalConfigs") ? this._queues.get("orderedQueueIds") : this._platformConfigSingleton.get("defaultGameQueues");
                    return this._getFirstEligibleQueue(null, e)
                }
            }
        }, (e, t, n) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.default = void 0;
            var s = function(e, t) {
                    if (!t && e && e.__esModule) return e;
                    if (null === e || "object" != typeof e && "function" != typeof e) return {
                        default: e
                    };
                    var n = l(t);
                    if (n && n.has(e)) return n.get(e);
                    var s = {},
                        i = Object.defineProperty && Object.getOwnPropertyDescriptor;
                    for (var o in e)
                        if ("default" !== o && Object.prototype.hasOwnProperty.call(e, o)) {
                            var a = i ? Object.getOwnPropertyDescriptor(e, o) : null;
                            a && (a.get || a.set) ? Object.defineProperty(s, o, a) : s[o] = e[o]
                        } s.default = e, n && n.set(e, s);
                    return s
                }(n(1)),
                i = a(n(19)),
                o = a(n(68));

            function a(e) {
                return e && e.__esModule ? e : {
                    default: e
                }
            }

            function l(e) {
                if ("function" != typeof WeakMap) return null;
                var t = new WeakMap,
                    n = new WeakMap;
                return (l = function(e) {
                    return e ? n : t
                })(e)
            }
            const r = s.default.getProvider().getSocket();
            var c = class {
                constructor(e, t, n, i, o, a, l, c) {
                    this._lobbyData = !1, this._currentPlayer = e, this._partyCreated = t, this._partyDestroyed = n, this._partyKicked = i, this._partyTimeout = o, this._partyGameStartError = a, this._partyServiceShutdown = l, this._partyServiceUnavailable = c, this._lobbyBinding = (0, s.dataBinding)("/lol-lobby", r), this._gameflowBinding = (0, s.dataBinding)("/lol-gameflow", r), this._observeLobbies(), this._observeEligibilitiesReady(), this._observeLobbyNotifications()
                }
                createLobby(e) {
                    return this._lobbyBinding.post("v2/lobby", {
                        queueId: e
                    })
                }
                _observeLobbies() {
                    this._lobbyBinding.observe("v2/lobby", (e => {
                        s.logger.trace("/v2/lobby returned data", JSON.stringify(e)), this._handleLobbyData(e)
                    }))
                }
                _observeEligibilitiesReady() {
                    this._lobbyBinding.observe("v2/eligibility/initial-configuration-complete", (e => {
                        this._handleEligibilityReady(e)
                    }))
                }
                _observeLobbyNotifications() {
                    this._lobbyBinding.observe("v2/notifications", (e => {
                        s.logger.trace("/v2/notifications returned data", JSON.stringify(e)), this._handleLobbyNotification(e)
                    }))
                }
                _getPlayerStatus() {
                    return o.default.getWithTimeout(this._gameflowBinding, "v1/gameflow-metadata/player-status", 50)
                }
                lastLobbyQueueId() {
                    return this._getPlayerStatus().then((e => {
                        let t = null;
                        return e && e.lastQueuedLobbyStatus && e.lastQueuedLobbyStatus.queueId && (t = e.lastQueuedLobbyStatus.queueId), t
                    }))
                }
                _handleLobbyData(e) {
                    this._lobbyData ? e || this._deletedLobby() : e && this._newLobby(e)
                }
                _handleLobbyNotification(e) {
                    if (!e || !e.length) return;
                    const t = e[e.length - 1];
                    let n = !0;
                    if ("KICKED" === t.notificationReason ? this._partyKicked() : "Timeout" === t.notificationReason ? this._partyTimeout() : "GameStartError" === t.notificationReason ? this._partyGameStartError() : "ServiceShutdown" === t.notificationReason ? this._partyServiceShutdown() : "SERVICE_UNAVAILABLE" === t.notificationReason ? this._partyServiceUnavailable() : n = !1, n) {
                        const e = `v2/notifications/${t.notificationId}`;
                        this._lobbyBinding.delete(e)
                    }
                }
                _deletedLobby() {
                    this._partyDestroyed(), this._lobbyData = !1
                }
                _newLobby(e) {
                    this._lobbyData = e, this._partyCreated(this._lobbyData)
                }
                _handleEligibilityReady(e) {
                    e && i.default.fetchEligibilities()
                }
            };
            t.default = c
        }, e => {
            "use strict";
            e.exports = {
                getWithTimeout: function(e, t, n) {
                    return new Promise((s => {
                        let i, o;
                        e.get(t).then((e => {
                            clearTimeout(i), o || s(e)
                        })), i = setTimeout((() => {
                            o = !0, s(null)
                        }), n)
                    }))
                }
            }
        }, (e, t, n) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.default = void 0;
            var s = function(e, t) {
                if (!t && e && e.__esModule) return e;
                if (null === e || "object" != typeof e && "function" != typeof e) return {
                    default: e
                };
                var n = i(t);
                if (n && n.has(e)) return n.get(e);
                var s = {},
                    o = Object.defineProperty && Object.getOwnPropertyDescriptor;
                for (var a in e)
                    if ("default" !== a && Object.prototype.hasOwnProperty.call(e, a)) {
                        var l = o ? Object.getOwnPropertyDescriptor(e, a) : null;
                        l && (l.get || l.set) ? Object.defineProperty(s, a, l) : s[a] = e[a]
                    } s.default = e, n && n.set(e, s);
                return s
            }(n(1));

            function i(e) {
                if ("function" != typeof WeakMap) return null;
                var t = new WeakMap,
                    n = new WeakMap;
                return (i = function(e) {
                    return e ? n : t
                })(e)
            }
            const o = s.default.getProvider().getSocket();
            var a = class {
                constructor(e) {
                    this._lastPhase = null, this._gameflowBinding = (0, s.dataBinding)("/lol-gameflow", o), this._gameflowPhaseChangeCallback = e, this._observeSession()
                }
                _observeSession() {
                    this._gameflowBinding.observe("v1/session", (e => {
                        this._handleGameflowData(e)
                    }))
                }
                _handleGameflowData(e) {
                    if (!e || !e.phase) return;
                    const t = e.phase;
                    t !== this._lastPhase && (this._gameflowPhaseChangeCallback && this._gameflowPhaseChangeCallback(t, this._lastPhase), this._lastPhase = t)
                }
            };
            t.default = a
        }, (e, t, n) => {
            "use strict";
            var s = n(1),
                i = n(15);
            const {
                RunMixin: o
            } = s.EmberAddons.EmberLifeline;
            e.exports = s.Ember.Object.extend(o, {
                queues: null,
                animationLock: !1,
                isCreatingCustomGame: !1,
                needsAdditionalGameConfig: !1,
                isJoiningCustomGame: !1,
                isTrainingGame: !1,
                _trainingGameMode: null,
                trainingGameMode: s.Ember.computed({
                    get: function() {
                        return this.get("_trainingGameMode")
                    },
                    set: function(e, t) {
                        return this.set("_trainingGameMode", t), i.TUTORIAL_TYPE_MAPS[t] && (this.set("mapId", i.TUTORIAL_TYPE_MAPS[t]), this.set("gameMode", t), this.set("assetMutator", null)), t
                    }
                }),
                _queueId: null,
                queueId: s.Ember.computed({
                    get: function() {
                        return this.get("_queueId")
                    },
                    set: function(e, t) {
                        this.set("_queueId", t);
                        const n = this.get("queues");
                        if (n) {
                            const e = n.getQueueById(t);
                            e && e.category && this.set("category", e.category), e && e.mapId && (this.set("mapId", e.mapId), this.set("gameMode", e.gameMode), this.set("assetMutator", e.assetMutator))
                        }
                        return t
                    }
                }),
                queue: s.Ember.computed("queues.queuesById", "queueId", (function() {
                    const e = this.get("queueId"),
                        t = this.get("queues");
                    return null !== e && t ? t.getQueueById(e) : null
                })),
                category: "",
                mapId: 11,
                map: s.Ember.computed("mapId", "queues.mapsInfo", (function() {
                    const e = this.get("queue.mapId"),
                        t = this.get("queues");
                    return e && t ? t.getMapInfoById(e) : null
                })),
                gameMode: !1,
                assetMutator: !1,
                pickType: s.Ember.computed("queues.queuesById", "queueId", (function() {
                    return this.get("queues").getPickTypeForQueue(this.get("queueId"))
                })),
                botDifficulty: s.Ember.computed("queues.queuesById", "queueId", (function() {
                    return ""
                })),
                isUpdatingSelection: !1,
                maxPlaying: s.Ember.computed("queue.numPlayersPerTeam", (function() {
                    return parseInt(this.get("queue.numPlayersPerTeam"), 10)
                })),
                gameConfig: s.Ember.computed("queueId", "queue.category", "botDifficulty", "maxPlaying", (function() {
                    return {
                        gameCategory: this.get("queue.category"),
                        botDifficulty: this.get("botDifficulty"),
                        queueId: this.get("queueId"),
                        maxPlaying: this.get("maxPlaying")
                    }
                })),
                isEqual(e) {
                    return !!(e instanceof s.Ember.Object && e.get) && this.get("queueId") === e.get("queueId")
                },
                animationLockTimeout: 1200,
                animationLockObserver: s.Ember.on("init", s.Ember.observer("animationLock", (function() {
                    this.get("animationLock") && this.runTask((function() {
                        this.set("animationLock", !1)
                    }), this.get("animationLockTimeout"))
                })))
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            const i = "party",
                o = "gameselect";
            e.exports = s.Ember.Object.extend({
                showVerticalAnimation: !1,
                showing: null,
                isShowingParty: s.Ember.computed.equal("showing", i),
                isShowingGameSelect: s.Ember.computed.equal("showing", o),
                isInViewport: !1,
                showParty: function() {
                    this.set("showing", i)
                },
                showGameSelect: function() {
                    this.set("showing", o)
                }
            })
        }, (e, t, n) => {
            "use strict";
            var s;
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.default = void 0;
            var i = ((s = n(73)) && s.__esModule ? s : {
                default: s
            }).default.create();
            t.default = i
        }, (e, t, n) => {
            "use strict";
            var s, i = n(1),
                o = (s = n(74)) && s.__esModule ? s : {
                    default: s
                };
            const a = (0, i.emberDataBinding)({
                Ember: i.Ember,
                websocket: (0, i.getProvider)().getSocket(),
                logPrefix: "service:game-select",
                basePaths: {
                    gameflow: "/lol-gameflow",
                    summoner: "/lol-summoner",
                    lobby: "/lol-lobby"
                },
                boundProperties: {
                    gameflowSession: {
                        api: "gameflow",
                        path: "/v1/session"
                    },
                    lobby: {
                        api: "lobby",
                        path: "/v2/lobby"
                    },
                    currentSummoner: {
                        api: "summoner",
                        path: "/v1/current-summoner"
                    }
                }
            });
            e.exports = i.Ember.Object.extend(a, o.default, {
                gameflowPhase: i.Ember.computed.alias("gameflowSession.phase"),
                currentSummonerId: i.Ember.computed.alias("currentSummoner.summonerId"),
                _inLobby: !1,
                _multiUserChatId: null,
                _lobbyMembers: i.Ember.A(),
                _playedInviteSound: i.Ember.A(),
                _shouldPlay: i.Ember.A(),
                _didPlay: i.Ember.A(),
                shouldPlay: function(e) {
                    if (e = this._castId(e), this._checkIfDidPlayForMember(e)) return !1;
                    return this._shouldPlayIndexOf(e) > -1
                },
                didPlay: function(e) {
                    e = this._castId(e);
                    const t = this._shouldPlayIndexOf(e); - 1 !== t && (this.get("_shouldPlay").splice(t, 1), this.get("_didPlay").push(e))
                },
                handlePartyDodge: function() {
                    const e = this.get("_lobbyMembers");
                    for (let t = 0; t < e.length; t++) this.get("_shouldPlay").push(e[t])
                },
                pendingInvites: i.Ember.computed.filterBy("lobby.invitations", "state", "Pending"),
                pendingInvitesObserver: i.Ember.on("init", i.Ember.observer("pendingInvites.[]", (function() {
                    i.Ember.run.once(this, (function() {
                        const e = this.get("pendingInvites");
                        this.pendingInvitesChanged(e)
                    }))
                }))),
                pendingInvitesChanged: function(e) {
                    const t = this.get("_playedInviteSound"),
                        n = i.Ember.A();
                    let s = !1;
                    e.forEach((e => {
                        let i = e.get("toSummonerId");
                        i = this._castId(i), -1 === t.indexOf(i) && (s = !0), n.push(i)
                    })), this.set("_playedInviteSound", n), s && this.playSound("/fe/lol-static-assets/sounds/sfx-parties-member-banner-invited.ogg")
                },
                _lobbyMembersChangedObserver: i.Ember.on("init", i.Ember.observer("lobby", "lobby.members.[]", "lobby.members.@each.summonerId", "lobby.members.@each.ready", (function() {
                    i.Ember.run.once(this, (function() {
                        const e = this.get("lobby");
                        this._lobbyChanged(e)
                    }))
                }))),
                _lobbyChanged: function(e) {
                    const t = this.get("_inLobby");
                    return t && !e ? this._handleLobbyDeleted() : !t && e ? this._handleNewLobby(e) : t && e ? this._handleLobbyUpdated(e) : void 0
                },
                _handleLobbyDeleted: function() {
                    this.set("_inLobby", !1), this.set("_shouldPlay", i.Ember.A()), this.set("_didPlay", i.Ember.A()), this.set("_lobbyMembers", i.Ember.A()), this.set("_multiUserChatId", null), this.set("_playedInviteSound", i.Ember.A())
                },
                _handleNewLobby: function(e) {
                    const t = this._castId(this.get("currentSummonerId"));
                    this.get("_shouldPlay").push(t), this._updateMemberCache(e), this.set("_inLobby", !0), this.set("_multiUserChatId", e.get("multiUserChatId"));
                    const n = i.Ember.A();
                    for (let s = 0; s < e.members.length; s++) {
                        const i = e.members[s];
                        i.get("summonerId") !== t && i.get("ready") && n.push(i.get("summonerId"))
                    }
                    this.set("_didPlay", n);
                    const s = e.get("invitations");
                    if (s && s.length) {
                        const e = i.Ember.A(),
                            t = s.filterBy("state", "Pending");
                        for (let n = 0; n < t.length; n++) e.push(this._castId(t[n].get("toSummonerId")));
                        this.set("_playedInviteSound", e)
                    }
                },
                _handleLobbyUpdated: function(e) {
                    if ("Matchmaking" === this.get("gameflowPhase")) return;
                    if (this._isNewLobby(e)) return void this._handleNewLobby(e);
                    const t = e.get("members");
                    if (t && t.length)
                        for (let e = 0; e < t.length; e++) this._checkIfShouldPlayForMember(t[e]);
                    this._updateMemberCache(e), this.set("_multiUserChatId", e.get("multiUserChatId"))
                },
                _checkIfShouldPlayForMember(e) {
                    const t = this._castId(e.get("summonerId"));
                    if (this._checkIfDidPlayForMember(t)) return;
                    const n = e.get("ready"),
                        s = this._lookupInMemberCache(t),
                        i = !s && n,
                        o = s && !s.ready && n;
                    (i || o) && this.get("_shouldPlay").push(t)
                },
                _checkIfDidPlayForMember(e) {
                    return this.get("_didPlay").indexOf(e) > -1
                },
                _isNewLobby(e) {
                    const t = e.get("multiUserChatId");
                    return !(!t || t === this._multiUserChatId) && e.get("members.length") > 1
                },
                _updateMemberCache: function(e) {
                    if (!e) return;
                    const t = e.get("members");
                    if (!t || !t.length) return;
                    const n = this.get("_didPlay"),
                        s = i.Ember.A(),
                        o = {};
                    for (let e = 0; e < t.length; e++) {
                        const i = this._castId(t[e].get("summonerId")),
                            a = t[e].get("ready");
                        o[i] = {
                            ready: a
                        }, n.indexOf(i) > -1 && s.push(i)
                    }
                    this.set("_lobbyMembers", o), this.set("_didPlay", s)
                },
                _lookupInMemberCache: function(e) {
                    const t = this.get("_lobbyMembers");
                    return t && t[e = this._castId(e)] ? t[e] : null
                },
                _shouldPlayIndexOf: function(e) {
                    return e = this._castId(e), this.get("_shouldPlay").indexOf(e)
                },
                _castId: function(e) {
                    return parseInt(e, 10)
                }
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            const i = "sfx-ui";
            e.exports = s.Ember.Mixin.create({
                getMapSoundUrl: function(e) {
                    const t = this.get("assets").getMap(this.get("mapId"), this.get("gameMode"), this.get("assetMutator"));
                    if (!t || !t.assets || !t.assets[e]) return !1;
                    return `/${t.assets[e]}`
                },
                playSound: function(e) {
                    if (!1 === e) return;
                    s.Audio.getChannel(i).createSound(e).play()
                },
                hoverSoundLocked: !1,
                attachHoverSoundWithDisabledCheck: function(e, t) {
                    e.addEventListener("mouseenter", (() => {
                        this.get("hoverSoundDisabled") || this.get("hoverSoundLocked") || (this.playSound(t), this.set("hoverSoundLocked", !0))
                    })), e.addEventListener("mouseleave", (() => {
                        this.set("hoverSoundLocked", !1)
                    }))
                },
                addHoverClickSound: function(e, t, n) {
                    this.$(e).on("mouseover", (() => {
                        this.playSound(t)
                    })).on("click", (() => {
                        this.playSound(n)
                    }))
                }
            })
        }, e => {
            "use strict";
            e.exports = {
                _canInvitePlayerCallback: null,
                _inviteCallback: null,
                _registerCanInviteCallback: function(e) {
                    this._canInvitePlayerCallback = e
                },
                _registerInviteCallback: function(e) {
                    this._inviteCallback = e
                },
                canInvitePlayer(e) {
                    return !!this._canInvitePlayerCallback && this._canInvitePlayerCallback(e)
                },
                invitePlayer(e, t) {
                    return this._inviteCallback ? this._inviteCallback(e, t) : Promise.reject(new Error("APPLICATION_NOT_INITIALIZED"))
                }
            }
        }, (e, t, n) => {
            "use strict";
            var s = function(e, t) {
                if (!t && e && e.__esModule) return e;
                if (null === e || "object" != typeof e && "function" != typeof e) return {
                    default: e
                };
                var n = i(t);
                if (n && n.has(e)) return n.get(e);
                var s = {},
                    o = Object.defineProperty && Object.getOwnPropertyDescriptor;
                for (var a in e)
                    if ("default" !== a && Object.prototype.hasOwnProperty.call(e, a)) {
                        var l = o ? Object.getOwnPropertyDescriptor(e, a) : null;
                        l && (l.get || l.set) ? Object.defineProperty(s, a, l) : s[a] = e[a]
                    } s.default = e, n && n.set(e, s);
                return s
            }(n(1));

            function i(e) {
                if ("function" != typeof WeakMap) return null;
                var t = new WeakMap,
                    n = new WeakMap;
                return (i = function(e) {
                    return e ? n : t
                })(e)
            }
            s.default.getProvider().getSocket();
            const o = s.UIKit.getModalManager(),
                a = s.UIKit.getToastManager(),
                l = s.UIKit.getTemplateHelper();
            e.exports = function(e, t) {
                return s.tra.ready().then((() => {
                    const n = s.tra.get(e),
                        i = l.contentBlockNotification(n);
                    if (t) {
                        const e = s.tra.get(t);
                        o.add({
                            type: "DialogAlert",
                            data: {
                                contents: n,
                                okText: e
                            }
                        })
                    } else a.add({
                        type: "DialogToast",
                        data: {
                            contents: i
                        },
                        timing: "slow"
                    })
                }))
            }
        }, (e, t, n) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.default = void 0;
            var s = n(1);
            const i = (0, s.getProvider)().getSocket();
            var o = class {
                constructor() {
                    this.hasProcessedNotifications = !1, this.toastManager = s.UIKit.getToastManager(), this.templateHelper = s.UIKit.getTemplateHelper(), this.modalManager = s.UIKit.getModalManager(), this.playerNames = s.playerNames, this.handleReadyCheckData = this.handleReadyCheckData.bind(this), this.matchMakingBinding = (0, s.dataBinding)("/lol-matchmaking", i), this.matchMakingBinding.observe("/v1/ready-check", this.handleReadyCheckData)
                }
                handleReadyCheckData(e) {
                    e && "InProgress" !== e.state ? this.hasProcessedNotifications || "None" === e.dodgeWarning && "Declined" === e.playerResponse || this.processNotifications(e) : this.hasProcessedNotifications = !1
                }
                processNotifications(e) {
                    "PartyNotReady" === e.state && this.handlePartyNotReady(e), "StrangerNotReady" === e.state && this.handleStrangerNotReady(), "Warning" === e.dodgeWarning && this.handleDodgeWarning(), "Penalty" === e.dodgeWarning && this.handleDodgePenalty(), this.hasProcessedNotifications = !0
                }
                handlePartyNotReady(e) {
                    const t = e.declinerIds && e.declinerIds[0];
                    if (t) return (0, s.dataBinding)("/lol-summoner/v1", i).get("/summoners/" + t).then((e => {
                        let t = "";
                        e ? t = this.playerNames.formatPlayerName(e).playerNameFull : s.logger.error("/lol-summoner/v1/summoners with a summoner id returned no summoner");
                        const n = this.templateHelper.contentBlockNotification(s.tra.formatString("ready_check_reject_party_notification", {
                            summonerName: t
                        }), "lol-ready-check-notification-party-reject");
                        this.toastManager.add({
                            type: "DialogToast",
                            data: {
                                contents: n,
                                dismissable: !0
                            },
                            timing: "slow"
                        })
                    })).catch((e => {
                        throw s.logger.error("failed to handlePartyNotReady", e), e
                    }));
                    s.logger.error("/lol-matchmaking/v1/ready-check had state PartyNotReady with no declinerIds")
                }
                handleStrangerNotReady() {
                    const e = this.templateHelper.contentBlockNotification(s.tra.get("ready_check_reject_stranger_notification"), "lol-ready-check-notification-stranger-reject");
                    this.toastManager.add({
                        type: "DialogToast",
                        data: {
                            contents: e,
                            dismissable: !0
                        },
                        timing: "slow"
                    })
                }
                handleDodgeWarning() {
                    const e = this.templateHelper.contentBlockDialogSimple(s.tra.get("ready_check_dodge_warning_notification"), "dialog-medium", "lol-ready-check-notification-dodge-warning");
                    this.modalManager.add({
                        type: "DialogAlert",
                        data: {
                            contents: e,
                            okText: s.tra.get("lib_ui_dialog_alert_ok")
                        }
                    })
                }
                handleDodgePenalty() {
                    const e = this.templateHelper.contentBlockDialogSimple(s.tra.get("ready_check_dodge_penalty_notification"), "dialog-medium", "lol-ready-check-notification-dodge-penalty");
                    this.modalManager.add({
                        type: "DialogAlert",
                        data: {
                            contents: e,
                            okText: s.tra.get("lib_ui_dialog_alert_ok")
                        }
                    })
                }
            };
            t.default = o
        }, (e, t, n) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.default = void 0;
            var s = n(1);
            n(79);
            const i = "/v1/account/lol-leagues",
                o = "hasSeenFlexRestrictionModal",
                a = s.UIKit.getModalManager(),
                l = n(80);
            t.default = class {
                constructor() {
                    this._hasShownThisSession = !1
                }
                tryShow() {
                    if (this._hasShownThisSession) return;
                    const e = (0, s.dataBinding)("/lol-settings"),
                        t = (0, s.dataBinding)("/lol-summoner"),
                        n = (0, s.dataBinding)("/lol-platform-config");
                    Promise.all([e.get("/v2/ready"), e.get(i, {
                        skipCache: !0
                    }), t.get("/v1/current-summoner"), n.get("/v1/namespaces/LeagueConfig/FlexRestrictionModalEnabled"), n.get("/v1/namespaces/LeagueConfig/FlexRestrictionModalMinLevel")]).then((t => {
                        const [n, s, a, l, r] = t;
                        if (!(n && l && s && a)) return;
                        const c = s.data && s.data[o],
                            m = a.summonerLevel || 0;
                        if (!c && m >= (r || 30)) {
                            this._createFlexRestrictionModal().okPromise.then((() => {
                                this._hasShownThisSession = !0;
                                const t = {};
                                return t[o] = !0, e.patch(i, {
                                    data: t,
                                    schemaVersion: 1
                                })
                            }))
                        } else this._hasShownThisSession = !0
                    }))
                }
                _createFlexRestrictionModal() {
                    let e = document.createElement("div");
                    return e.innerHTML = l({
                        title: s.tra.get("game_select_flex_restrictions_disabled_title"),
                        description: s.tra.get("game_select_flex_restrictions_disabled_body")
                    }), e = e.firstChild, a.add({
                        type: "DialogAlert",
                        data: {
                            contents: e,
                            okText: s.tra.get("lib_ui_dialog_alert_ok"),
                            dismissible: !0,
                            dismissibleType: "inside"
                        }
                    })
                }
            }
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            var s = n(81);
            e.exports = (s.default || s).template({
                compiler: [7, ">= 4.0.0"],
                main: function(e, t, n, s, i) {
                    var o, a = null != t ? t : e.nullContext || {},
                        l = n.helperMissing,
                        r = "function",
                        c = e.escapeExpression;
                    return '<lol-uikit-dialog-frame>\r\n  <lol-uikit-content-block type="dialog-large" class="flex-restriction-modal">\r\n    <div class="flex-restriction-modal-title">' + c(typeof(o = null != (o = n.title || (null != t ? t.title : t)) ? o : l) === r ? o.call(a, {
                        name: "title",
                        hash: {},
                        data: i
                    }) : o) + '</div>\r\n    <div class="flex-restriction-modal-body">' + c(typeof(o = null != (o = n.description || (null != t ? t.description : t)) ? o : l) === r ? o.call(a, {
                        name: "description",
                        hash: {},
                        data: i
                    }) : o) + "</div>\r\n  </lol-uikit-content-block>\r\n</lol-uikit-dialog-frame>\r\n"
                },
                useData: !0
            })
        }, (e, t, n) => {
            e.exports = n(82).default
        }, (e, t, n) => {
            "use strict";

            function s(e) {
                return e && e.__esModule ? e : {
                    default: e
                }
            }

            function i(e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                    for (var n in e) Object.prototype.hasOwnProperty.call(e, n) && (t[n] = e[n]);
                return t.default = e, t
            }
            t.__esModule = !0;
            var o = i(n(83)),
                a = s(n(97)),
                l = s(n(85)),
                r = i(n(84)),
                c = i(n(98)),
                m = s(n(99));

            function u() {
                var e = new o.HandlebarsEnvironment;
                return r.extend(e, o), e.SafeString = a.default, e.Exception = l.default, e.Utils = r, e.escapeExpression = r.escapeExpression, e.VM = c, e.template = function(t) {
                    return c.template(t, e)
                }, e
            }
            var d = u();
            d.create = u, m.default(d), d.default = d, t.default = d, e.exports = t.default
        }, (e, t, n) => {
            "use strict";

            function s(e) {
                return e && e.__esModule ? e : {
                    default: e
                }
            }
            t.__esModule = !0, t.HandlebarsEnvironment = m;
            var i = n(84),
                o = s(n(85)),
                a = n(86),
                l = n(94),
                r = s(n(96));
            t.VERSION = "4.1.2";
            t.COMPILER_REVISION = 7;
            t.REVISION_CHANGES = {
                1: "<= 1.0.rc.2",
                2: "== 1.0.0-rc.3",
                3: "== 1.0.0-rc.4",
                4: "== 1.x.x",
                5: "== 2.0.0-alpha.x",
                6: ">= 2.0.0-beta.1",
                7: ">= 4.0.0"
            };
            var c = "[object Object]";

            function m(e, t, n) {
                this.helpers = e || {}, this.partials = t || {}, this.decorators = n || {}, a.registerDefaultHelpers(this), l.registerDefaultDecorators(this)
            }
            m.prototype = {
                constructor: m,
                logger: r.default,
                log: r.default.log,
                registerHelper: function(e, t) {
                    if (i.toString.call(e) === c) {
                        if (t) throw new o.default("Arg not supported with multiple helpers");
                        i.extend(this.helpers, e)
                    } else this.helpers[e] = t
                },
                unregisterHelper: function(e) {
                    delete this.helpers[e]
                },
                registerPartial: function(e, t) {
                    if (i.toString.call(e) === c) i.extend(this.partials, e);
                    else {
                        if (void 0 === t) throw new o.default('Attempting to register a partial called "' + e + '" as undefined');
                        this.partials[e] = t
                    }
                },
                unregisterPartial: function(e) {
                    delete this.partials[e]
                },
                registerDecorator: function(e, t) {
                    if (i.toString.call(e) === c) {
                        if (t) throw new o.default("Arg not supported with multiple decorators");
                        i.extend(this.decorators, e)
                    } else this.decorators[e] = t
                },
                unregisterDecorator: function(e) {
                    delete this.decorators[e]
                }
            };
            var u = r.default.log;
            t.log = u, t.createFrame = i.createFrame, t.logger = r.default
        }, (e, t) => {
            "use strict";
            t.__esModule = !0, t.extend = a, t.indexOf = function(e, t) {
                for (var n = 0, s = e.length; n < s; n++)
                    if (e[n] === t) return n;
                return -1
            }, t.escapeExpression = function(e) {
                if ("string" != typeof e) {
                    if (e && e.toHTML) return e.toHTML();
                    if (null == e) return "";
                    if (!e) return e + "";
                    e = "" + e
                }
                if (!i.test(e)) return e;
                return e.replace(s, o)
            }, t.isEmpty = function(e) {
                return !e && 0 !== e || !(!c(e) || 0 !== e.length)
            }, t.createFrame = function(e) {
                var t = a({}, e);
                return t._parent = e, t
            }, t.blockParams = function(e, t) {
                return e.path = t, e
            }, t.appendContextPath = function(e, t) {
                return (e ? e + "." : "") + t
            };
            var n = {
                    "&": "&amp;",
                    "<": "&lt;",
                    ">": "&gt;",
                    '"': "&quot;",
                    "'": "&#x27;",
                    "`": "&#x60;",
                    "=": "&#x3D;"
                },
                s = /[&<>"'`=]/g,
                i = /[&<>"'`=]/;

            function o(e) {
                return n[e]
            }

            function a(e) {
                for (var t = 1; t < arguments.length; t++)
                    for (var n in arguments[t]) Object.prototype.hasOwnProperty.call(arguments[t], n) && (e[n] = arguments[t][n]);
                return e
            }
            var l = Object.prototype.toString;
            t.toString = l;
            var r = function(e) {
                return "function" == typeof e
            };
            r(/x/) && (t.isFunction = r = function(e) {
                return "function" == typeof e && "[object Function]" === l.call(e)
            }), t.isFunction = r;
            var c = Array.isArray || function(e) {
                return !(!e || "object" != typeof e) && "[object Array]" === l.call(e)
            };
            t.isArray = c
        }, (e, t) => {
            "use strict";
            t.__esModule = !0;
            var n = ["description", "fileName", "lineNumber", "message", "name", "number", "stack"];

            function s(e, t) {
                var i = t && t.loc,
                    o = void 0,
                    a = void 0;
                i && (e += " - " + (o = i.start.line) + ":" + (a = i.start.column));
                for (var l = Error.prototype.constructor.call(this, e), r = 0; r < n.length; r++) this[n[r]] = l[n[r]];
                Error.captureStackTrace && Error.captureStackTrace(this, s);
                try {
                    i && (this.lineNumber = o, Object.defineProperty ? Object.defineProperty(this, "column", {
                        value: a,
                        enumerable: !0
                    }) : this.column = a)
                } catch (e) {}
            }
            s.prototype = new Error, t.default = s, e.exports = t.default
        }, (e, t, n) => {
            "use strict";

            function s(e) {
                return e && e.__esModule ? e : {
                    default: e
                }
            }
            t.__esModule = !0, t.registerDefaultHelpers = function(e) {
                i.default(e), o.default(e), a.default(e), l.default(e), r.default(e), c.default(e), m.default(e)
            };
            var i = s(n(87)),
                o = s(n(88)),
                a = s(n(89)),
                l = s(n(90)),
                r = s(n(91)),
                c = s(n(92)),
                m = s(n(93))
        }, (e, t, n) => {
            "use strict";
            t.__esModule = !0;
            var s = n(84);
            t.default = function(e) {
                e.registerHelper("blockHelperMissing", (function(t, n) {
                    var i = n.inverse,
                        o = n.fn;
                    if (!0 === t) return o(this);
                    if (!1 === t || null == t) return i(this);
                    if (s.isArray(t)) return t.length > 0 ? (n.ids && (n.ids = [n.name]), e.helpers.each(t, n)) : i(this);
                    if (n.data && n.ids) {
                        var a = s.createFrame(n.data);
                        a.contextPath = s.appendContextPath(n.data.contextPath, n.name), n = {
                            data: a
                        }
                    }
                    return o(t, n)
                }))
            }, e.exports = t.default
        }, (e, t, n) => {
            "use strict";
            t.__esModule = !0;
            var s, i = n(84),
                o = n(85),
                a = (s = o) && s.__esModule ? s : {
                    default: s
                };
            t.default = function(e) {
                e.registerHelper("each", (function(e, t) {
                    if (!t) throw new a.default("Must pass iterator to #each");
                    var n = t.fn,
                        s = t.inverse,
                        o = 0,
                        l = "",
                        r = void 0,
                        c = void 0;

                    function m(t, s, o) {
                        r && (r.key = t, r.index = s, r.first = 0 === s, r.last = !!o, c && (r.contextPath = c + t)), l += n(e[t], {
                            data: r,
                            blockParams: i.blockParams([e[t], t], [c + t, null])
                        })
                    }
                    if (t.data && t.ids && (c = i.appendContextPath(t.data.contextPath, t.ids[0]) + "."), i.isFunction(e) && (e = e.call(this)), t.data && (r = i.createFrame(t.data)), e && "object" == typeof e)
                        if (i.isArray(e))
                            for (var u = e.length; o < u; o++) o in e && m(o, o, o === e.length - 1);
                        else {
                            var d = void 0;
                            for (var p in e) e.hasOwnProperty(p) && (void 0 !== d && m(d, o - 1), d = p, o++);
                            void 0 !== d && m(d, o - 1, !0)
                        } return 0 === o && (l = s(this)), l
                }))
            }, e.exports = t.default
        }, (e, t, n) => {
            "use strict";
            t.__esModule = !0;
            var s, i = n(85),
                o = (s = i) && s.__esModule ? s : {
                    default: s
                };
            t.default = function(e) {
                e.registerHelper("helperMissing", (function() {
                    if (1 !== arguments.length) throw new o.default('Missing helper: "' + arguments[arguments.length - 1].name + '"')
                }))
            }, e.exports = t.default
        }, (e, t, n) => {
            "use strict";
            t.__esModule = !0;
            var s = n(84);
            t.default = function(e) {
                e.registerHelper("if", (function(e, t) {
                    return s.isFunction(e) && (e = e.call(this)), !t.hash.includeZero && !e || s.isEmpty(e) ? t.inverse(this) : t.fn(this)
                })), e.registerHelper("unless", (function(t, n) {
                    return e.helpers.if.call(this, t, {
                        fn: n.inverse,
                        inverse: n.fn,
                        hash: n.hash
                    })
                }))
            }, e.exports = t.default
        }, (e, t) => {
            "use strict";
            t.__esModule = !0, t.default = function(e) {
                e.registerHelper("log", (function() {
                    for (var t = [void 0], n = arguments[arguments.length - 1], s = 0; s < arguments.length - 1; s++) t.push(arguments[s]);
                    var i = 1;
                    null != n.hash.level ? i = n.hash.level : n.data && null != n.data.level && (i = n.data.level), t[0] = i, e.log.apply(e, t)
                }))
            }, e.exports = t.default
        }, (e, t) => {
            "use strict";
            t.__esModule = !0, t.default = function(e) {
                e.registerHelper("lookup", (function(e, t) {
                    return e ? "constructor" !== t || e.propertyIsEnumerable(t) ? e[t] : void 0 : e
                }))
            }, e.exports = t.default
        }, (e, t, n) => {
            "use strict";
            t.__esModule = !0;
            var s = n(84);
            t.default = function(e) {
                e.registerHelper("with", (function(e, t) {
                    s.isFunction(e) && (e = e.call(this));
                    var n = t.fn;
                    if (s.isEmpty(e)) return t.inverse(this);
                    var i = t.data;
                    return t.data && t.ids && ((i = s.createFrame(t.data)).contextPath = s.appendContextPath(t.data.contextPath, t.ids[0])), n(e, {
                        data: i,
                        blockParams: s.blockParams([e], [i && i.contextPath])
                    })
                }))
            }, e.exports = t.default
        }, (e, t, n) => {
            "use strict";
            t.__esModule = !0, t.registerDefaultDecorators = function(e) {
                o.default(e)
            };
            var s, i = n(95),
                o = (s = i) && s.__esModule ? s : {
                    default: s
                }
        }, (e, t, n) => {
            "use strict";
            t.__esModule = !0;
            var s = n(84);
            t.default = function(e) {
                e.registerDecorator("inline", (function(e, t, n, i) {
                    var o = e;
                    return t.partials || (t.partials = {}, o = function(i, o) {
                        var a = n.partials;
                        n.partials = s.extend({}, a, t.partials);
                        var l = e(i, o);
                        return n.partials = a, l
                    }), t.partials[i.args[0]] = i.fn, o
                }))
            }, e.exports = t.default
        }, (e, t, n) => {
            "use strict";
            t.__esModule = !0;
            var s = n(84),
                i = {
                    methodMap: ["debug", "info", "warn", "error"],
                    level: "info",
                    lookupLevel: function(e) {
                        if ("string" == typeof e) {
                            var t = s.indexOf(i.methodMap, e.toLowerCase());
                            e = t >= 0 ? t : parseInt(e, 10)
                        }
                        return e
                    },
                    log: function(e) {
                        if (e = i.lookupLevel(e), "undefined" != typeof console && i.lookupLevel(i.level) <= e) {
                            var t = i.methodMap[e];
                            console[t] || (t = "log");
                            for (var n = arguments.length, s = Array(n > 1 ? n - 1 : 0), o = 1; o < n; o++) s[o - 1] = arguments[o];
                            console[t].apply(console, s)
                        }
                    }
                };
            t.default = i, e.exports = t.default
        }, (e, t) => {
            "use strict";

            function n(e) {
                this.string = e
            }
            t.__esModule = !0, n.prototype.toString = n.prototype.toHTML = function() {
                return "" + this.string
            }, t.default = n, e.exports = t.default
        }, (e, t, n) => {
            "use strict";
            t.__esModule = !0, t.checkRevision = function(e) {
                var t = e && e[0] || 1,
                    n = l.COMPILER_REVISION;
                if (t !== n) {
                    if (t < n) {
                        var s = l.REVISION_CHANGES[n],
                            i = l.REVISION_CHANGES[t];
                        throw new a.default("Template was precompiled with an older version of Handlebars than the current runtime. Please update your precompiler to a newer version (" + s + ") or downgrade your runtime to an older version (" + i + ").")
                    }
                    throw new a.default("Template was precompiled with a newer version of Handlebars than the current runtime. Please update your runtime to a newer version (" + e[1] + ").")
                }
            }, t.template = function(e, t) {
                if (!t) throw new a.default("No environment passed to template");
                if (!e || !e.main) throw new a.default("Unknown template object: " + typeof e);
                e.main.decorator = e.main_d, t.VM.checkRevision(e.compiler);
                var n = {
                    strict: function(e, t) {
                        if (!(t in e)) throw new a.default('"' + t + '" not defined in ' + e);
                        return e[t]
                    },
                    lookup: function(e, t) {
                        for (var n = e.length, s = 0; s < n; s++)
                            if (e[s] && null != e[s][t]) return e[s][t]
                    },
                    lambda: function(e, t) {
                        return "function" == typeof e ? e.call(t) : e
                    },
                    escapeExpression: i.escapeExpression,
                    invokePartial: function(n, s, o) {
                        o.hash && (s = i.extend({}, s, o.hash), o.ids && (o.ids[0] = !0)), n = t.VM.resolvePartial.call(this, n, s, o);
                        var l = t.VM.invokePartial.call(this, n, s, o);
                        if (null == l && t.compile && (o.partials[o.name] = t.compile(n, e.compilerOptions, t), l = o.partials[o.name](s, o)), null != l) {
                            if (o.indent) {
                                for (var r = l.split("\n"), c = 0, m = r.length; c < m && (r[c] || c + 1 !== m); c++) r[c] = o.indent + r[c];
                                l = r.join("\n")
                            }
                            return l
                        }
                        throw new a.default("The partial " + o.name + " could not be compiled when running in runtime-only mode")
                    },
                    fn: function(t) {
                        var n = e[t];
                        return n.decorator = e[t + "_d"], n
                    },
                    programs: [],
                    program: function(e, t, n, s, i) {
                        var o = this.programs[e],
                            a = this.fn(e);
                        return t || i || s || n ? o = r(this, e, a, t, n, s, i) : o || (o = this.programs[e] = r(this, e, a)), o
                    },
                    data: function(e, t) {
                        for (; e && t--;) e = e._parent;
                        return e
                    },
                    merge: function(e, t) {
                        var n = e || t;
                        return e && t && e !== t && (n = i.extend({}, t, e)), n
                    },
                    nullContext: Object.seal({}),
                    noop: t.VM.noop,
                    compilerInfo: e.compiler
                };

                function s(t) {
                    var i = arguments.length <= 1 || void 0 === arguments[1] ? {} : arguments[1],
                        o = i.data;
                    s._setup(i), !i.partial && e.useData && (o = function(e, t) {
                        t && "root" in t || ((t = t ? l.createFrame(t) : {}).root = e);
                        return t
                    }(t, o));
                    var a = void 0,
                        r = e.useBlockParams ? [] : void 0;

                    function c(t) {
                        return "" + e.main(n, t, n.helpers, n.partials, o, r, a)
                    }
                    return e.useDepths && (a = i.depths ? t != i.depths[0] ? [t].concat(i.depths) : i.depths : [t]), (c = m(e.main, c, n, i.depths || [], o, r))(t, i)
                }
                return s.isTop = !0, s._setup = function(s) {
                    s.partial ? (n.helpers = s.helpers, n.partials = s.partials, n.decorators = s.decorators) : (n.helpers = n.merge(s.helpers, t.helpers), e.usePartial && (n.partials = n.merge(s.partials, t.partials)), (e.usePartial || e.useDecorators) && (n.decorators = n.merge(s.decorators, t.decorators)))
                }, s._child = function(t, s, i, o) {
                    if (e.useBlockParams && !i) throw new a.default("must pass block params");
                    if (e.useDepths && !o) throw new a.default("must pass parent depths");
                    return r(n, t, e[t], s, 0, i, o)
                }, s
            }, t.wrapProgram = r, t.resolvePartial = function(e, t, n) {
                e ? e.call || n.name || (n.name = e, e = n.partials[e]) : e = "@partial-block" === n.name ? n.data["partial-block"] : n.partials[n.name];
                return e
            }, t.invokePartial = function(e, t, n) {
                var s = n.data && n.data["partial-block"];
                n.partial = !0, n.ids && (n.data.contextPath = n.ids[0] || n.data.contextPath);
                var o = void 0;
                n.fn && n.fn !== c && function() {
                    n.data = l.createFrame(n.data);
                    var e = n.fn;
                    o = n.data["partial-block"] = function(t) {
                        var n = arguments.length <= 1 || void 0 === arguments[1] ? {} : arguments[1];
                        return n.data = l.createFrame(n.data), n.data["partial-block"] = s, e(t, n)
                    }, e.partials && (n.partials = i.extend({}, n.partials, e.partials))
                }();
                void 0 === e && o && (e = o);
                if (void 0 === e) throw new a.default("The partial " + n.name + " could not be found");
                if (e instanceof Function) return e(t, n)
            }, t.noop = c;
            var s, i = function(e) {
                    if (e && e.__esModule) return e;
                    var t = {};
                    if (null != e)
                        for (var n in e) Object.prototype.hasOwnProperty.call(e, n) && (t[n] = e[n]);
                    return t.default = e, t
                }(n(84)),
                o = n(85),
                a = (s = o) && s.__esModule ? s : {
                    default: s
                },
                l = n(83);

            function r(e, t, n, s, i, o, a) {
                function l(t) {
                    var i = arguments.length <= 1 || void 0 === arguments[1] ? {} : arguments[1],
                        l = a;
                    return !a || t == a[0] || t === e.nullContext && null === a[0] || (l = [t].concat(a)), n(e, t, e.helpers, e.partials, i.data || s, o && [i.blockParams].concat(o), l)
                }
                return (l = m(n, l, e, a, s, o)).program = t, l.depth = a ? a.length : 0, l.blockParams = i || 0, l
            }

            function c() {
                return ""
            }

            function m(e, t, n, s, o, a) {
                if (e.decorator) {
                    var l = {};
                    t = e.decorator(t, l, n, s && s[0], o, a, s), i.extend(t, l)
                }
                return t
            }
        }, (e, t, n) => {
            "use strict";
            t.__esModule = !0, t.default = function(e) {
                var t = void 0 !== n.g ? n.g : window,
                    s = t.Handlebars;
                e.noConflict = function() {
                    return t.Handlebars === e && (t.Handlebars = s), e
                }
            }, e.exports = t.default
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            const i = s.UIKit.getModalManager();
            e.exports = function() {
                const e = s.tra.get("parties_unknown_error"),
                    t = s.tra.get("parties_kicked_confirmation_ok");
                i.add({
                    type: "DialogAlert",
                    data: {
                        contents: e,
                        okText: t
                    }
                }).domNode.classList.add("parties-unknown-error-modal")
            }
        }, (e, t, n) => {
            "use strict";
            var s, i = n(1),
                o = (s = n(102)) && s.__esModule ? s : {
                    default: s
                };

            function a(e, t, s) {
                const a = (0, o.default)(i.Ember, i.tra),
                    {
                        ArrowFooterComponent: l,
                        ButtonMaskIconComponent: r,
                        CallToActionPipComponent: c,
                        ClickableIconButtonComponent: m,
                        FramedIconButtonComponent: u,
                        HextechLoadingAnimationComponent: d,
                        PlayerRestrictionInfoComponent: p,
                        RemainingTimeTextComponent: h,
                        CountdownWidgetComponent: g,
                        PerkPageTooltipComponent: b,
                        PlayerNameComponent: f,
                        SkinPurchaseButtonComponent: y,
                        SkinChromaButtonComponent: _,
                        SkinChromaModalComponent: v,
                        SkinQuestFormModalComponent: S
                    } = i.SharedComponents.getSharedEmberComponents(),
                    {
                        ChallengeBannerTitleComponent: E,
                        ChallengeBannerTokenComponent: x,
                        ChallengeBannerTokenContainerComponent: k,
                        ChallengeItemTooltipComponent: C,
                        ChallengeItemFooterComponent: P,
                        RiotclientService: T,
                        GameDataService: I,
                        SummonerService: w
                    } = i.SharedComponents.getApi_SharedChallengesComponents(),
                    R = n(103),
                    L = n(105),
                    M = n(107),
                    A = n(108),
                    D = n(110),
                    O = n(112),
                    N = n(113),
                    B = n(114),
                    F = n(115),
                    q = n(116),
                    G = n(117),
                    U = n(120).default,
                    Q = n(121),
                    j = n(123),
                    H = n(126),
                    z = n(127),
                    V = n(128).default,
                    W = n(129),
                    Y = n(130);
                let K = {
                    name: "PartiesScreen",
                    tra: a,
                    ComponentFactory: i.ComponentFactory,
                    PartiesScreenComponent: n(131),
                    PartiesAmbienceComponent: n(135),
                    PartiesBackgroundComponent: n(139),
                    PartiesHeaderComponent: n(142),
                    PartiesDebugToolsComponent: n(146),
                    PartiesDebugCustomLobbyComponent: n(149),
                    PartiesDebugQueueLobbyComponent: n(153),
                    MatchmakingErrorsComponent: n(156),
                    PartiesFooterNotificationsComponent: n(157),
                    PartiesNotificationsComponent: n(160),
                    PartiesRootComponent: n(162),
                    PartiesFooterComponent: n(164),
                    LowerSectionComponent: n(167),
                    PlayerPartyControlsComponent: n(171),
                    InviteButtonComponent: n(174),
                    InviteInfoPanelComponent: n(176),
                    InviteInfoPanelPlayerComponent: n(179),
                    InviteInfoPanelTftProgressionComponent: n(182),
                    PlayerManagementButtonComponent: n(185),
                    PointEligibilityComponent: n(188),
                    ArrowFooterComponent: l,
                    DisbandCountdownComponent: n(191),
                    OpenPartyToggleComponent: n(194),
                    ...s,
                    GameSelectRootComponent: n(197),
                    GameSelectFooterComponent: n(200),
                    GameTypeSelectComponent: n(203),
                    GameTypeCardComponent: n(206),
                    GameTypeIconComponent: n(209),
                    GameTypeCategorySelectComponent: n(212),
                    CategorySelectComponent: n(219),
                    PlayableCategoryComponent: n(221),
                    CustomGameSetupComponent: n(223),
                    CustomGameSubcategoryCardComponent: n(226),
                    CustomGameRootComponent: n(228),
                    SpectatorInfoComponent: n(231),
                    SpectatorMemberComponent: n(234),
                    CustomTeamsComponent: n(237),
                    CustomTeamMemberComponent: n(240),
                    CustomGameListComponent: n(244),
                    CustomGameTournamentCodeComponent: n(248),
                    CustomGameRowComponent: n(251),
                    TftLobbyComponent: n(253),
                    TftFooterComponent: n(256),
                    TftPlayerCardComponent: n(259),
                    TftPlayerCardCosmeticsComponent: n(280),
                    TftEventCountdownComponent: n(283),
                    TftEmeraldRankModalComponent: n(288),
                    SocialLeaderboardButtonComponent: n(291),
                    CallToActionPipComponent: c,
                    V2BannerComponent: n(296),
                    V2FooterComponent: n(300),
                    V2FooterNotificationsComponent: n(303),
                    V2HeaderComponent: n(306),
                    V2PartiesRootComponent: n(309),
                    V2PlayerManagementButtonComponent: n(312),
                    V2PlayerPartyControlsComponent: n(315),
                    V2PointEligibilityComponent: n(318),
                    V2PositionSelectorComponent: n(321),
                    V2HorizontalOptionsShowcaseComponent: n(324),
                    V2PositionIconComponent: n(327),
                    V2BannerPositionIconComponent: n(330),
                    V2PositionSelectorButtonComponent: n(333),
                    V2PositionSelectorOptionComponent: n(336),
                    V2PositionSelectorModalComponent: n(339),
                    V2InviteInfoPanelComponent: n(342),
                    V2InviteInfoPanelPlayerComponent: n(345),
                    V2InviteInfoPanelTftProgressionComponent: n(348),
                    V2BannerCrystalTooltipComponent: n(351),
                    V2BannerPlaceholderComponent: n(354),
                    IdentityTooltipComponent: n(357),
                    RankIdentityTooltipComponent: n(360),
                    SummonerIconIdentityTooltipComponent: n(363),
                    PrestigeIdentityTooltipComponent: n(366),
                    GenericButtonComponent: n(369),
                    AnimatedFindMatchButtonComponent: n(373),
                    CherryRatingComponent: n(376),
                    ChallengeBannerTitleComponent: E,
                    ChallengeBannerTokenComponent: x,
                    ChallengeBannerTokenContainerComponent: k,
                    ChallengeItemTooltipComponent: C,
                    ChallengeItemFooterComponent: P,
                    PlayerRestrictionInfoComponent: p,
                    RemainingTimeTextComponent: h,
                    CountdownWidgetComponent: g,
                    QuickPlayLoadoutSelectorComponent: n(379),
                    QuickPlaySelectionRendererComponent: n(383),
                    QuickPlayChampionSquareComponent: n(386),
                    QuickPlayChampionGridComponent: n(389),
                    QuickPlayGridChampionComponent: n(393),
                    QuickPlayChampionSelectorComponent: n(396),
                    QuickPlayPerksSelectorComponent: n(399),
                    QuickPlayPerksPageDropdownComponent: n(403),
                    QuickPlayPerksPageDropdownOptionComponent: n(406),
                    QuickPlaySkinCarouselComponent: n(409),
                    QuickPlaySkinSelectComponent: n(412),
                    QuickPlaySummonerSpellPopupComponent: n(415),
                    QuickPlaySummonerSpellRendererComponent: n(418),
                    QuickPlaySummonerSpellSelectComponent: n(421),
                    QuickPlayLoadoutTooltipComponent: n(424),
                    MultiteamLobbyRootComponent: n(427).default,
                    MultiteamLobbySubteamComponent: n(430).default,
                    MultiteamLobbySubteamPlayerSlotComponent: n(433).default,
                    ButtonMaskIconComponent: r,
                    ClickableIconButtonComponent: m,
                    FramedIconButtonComponent: u,
                    PerkPageTooltipComponent: b,
                    PlayerNameComponent: f,
                    SkinPurchaseButtonComponent: y,
                    SkinChromaButtonComponent: _,
                    SkinChromaModalComponent: v,
                    SkinQuestFormModalComponent: S,
                    LobbiesService: A,
                    AssetsService: R,
                    ChatService: L,
                    PartySettingsService: F,
                    MatchmakingService: D,
                    SummonerService: M,
                    QueueEligibilityService: N,
                    GameflowService: B,
                    CustomGamesService: q,
                    CustomGameListService: G,
                    PatcherService: U,
                    InvitesService: Q,
                    EternalsService: O,
                    TftCosmeticsService: H,
                    TftEventsService: z,
                    TftNpeService: V,
                    SocialLeaderboardService: W,
                    ChallengesService: Y,
                    RiotclientService: T,
                    GameDataService: I,
                    QuickPlayService: j,
                    EqHelper: i.Ember.Helper.helper((e => e[0] === e[1]))
                };
                const $ = n(436);
                Object.assign(K, {
                    TftPlaybookIconComponent: n(437),
                    TftPlaybookMenuComponent: n(440),
                    TftPlaybookItemComponent: n(443),
                    TftPlaybookItemDetailsComponent: n(446),
                    TftPlaybookCardComponent: n(449),
                    TftPlaybookTutorialComponent: n(452),
                    TftPlaybookService: $
                }), K = i.SharedEmberComponents.EmberCollectionApi.registerToFactoryDefinition(K), i.EmberApplicationFactory.setFactoryDefinition(K), i.EmberApplicationFactory.setFactoryDefinition({
                    name: "TftRewardCelebration",
                    tra: a,
                    ComponentFactory: i.ComponentFactory,
                    TftRewardCelebrationComponent: n(455).default
                }), i.EmberApplicationFactory.setFactoryDefinition({
                    name: "PartyQueueErrorDialogComponent",
                    tra: a,
                    ComponentFactory: i.ComponentFactory,
                    PartyQueueErrorDialogComponent: n(458),
                    PartyQueueErrorDialogGenericComponent: n(460),
                    PartyQueueErrorDialogMinLevelComponent: n(462),
                    PartyQueueErrorDialogLeaverBustedComponent: n(464),
                    PartyQueueErrorDialogLeaverBusterLockoutComponent: n(466),
                    PartyQueueErrorDialogLeaverBusterTaintedWarningComponent: n(469),
                    PartyQueueErrorDialogQueueDodgeComponent: n(471),
                    PartyQueueErrorDialogPrerequisiteQueuesNotPlayedComponent: n(474)
                }), i.EmberApplicationFactory.setFactoryDefinition({
                    name: "PartiesInviteDialog",
                    tra: a,
                    ComponentFactory: i.ComponentFactory,
                    PartiesInviteDialogComponent: n(476),
                    InviteDialogGroupComponent: n(480),
                    LobbiesService: A,
                    ChatService: L,
                    MatchmakingService: D,
                    SummonerService: M,
                    QueueEligibilityService: N,
                    CustomGamesService: q,
                    InvitesService: Q,
                    PlayerNameComponent: f
                }), i.EmberApplicationFactory.setFactoryDefinition({
                    name: "LowPriorityQueueToastComponent",
                    tra: a,
                    ComponentFactory: i.ComponentFactory,
                    LowPriorityQueueToastComponent: n(483)
                }), i.EmberApplicationFactory.setFactoryDefinition({
                    name: "LowPriorityQueueModalComponent",
                    tra: a,
                    ComponentFactory: i.ComponentFactory,
                    LowPriorityQueueToastComponent: n(486)
                }), i.EmberApplicationFactory.setFactoryDefinition({
                    name: "AutofillSettingComponent",
                    tra: a,
                    ComponentFactory: i.ComponentFactory,
                    AutofillSettingComponent: n(488)
                }), i.EmberApplicationFactory.setFactoryDefinition({
                    name: "GameModeTutorialComponent",
                    tra: a,
                    ComponentFactory: i.ComponentFactory,
                    GameModeTutorialComponent: n(491)
                }), i.EmberApplicationFactory.setFactoryDefinition({
                    name: "GameModeOnePageTutorialComponent",
                    tra: a,
                    ComponentFactory: i.ComponentFactory,
                    GameModeTutorialComponent: n(494)
                }), i.EmberApplicationFactory.setFactoryDefinition({
                    name: "SocialLeaderboardFeatureFlyoutComponent",
                    tra: a,
                    ComponentFactory: i.ComponentFactory,
                    SocialLeaderboardFeatureFlyoutComponent: n(497),
                    SocialLeaderboardHeaderComponent: n(500),
                    SocialLeaderboardCountdownTimerComponent: n(504),
                    SocialLeaderboardTableComponent: n(507),
                    SocialLeaderboardRowComponent: n(510),
                    SocialLeaderboardFriendFilterComponent: n(513),
                    SocialLeaderboardFriendNotFoundComponent: n(516),
                    SocialLeaderboardNotEnoughFriendsComponent: n(519),
                    SocialLeaderboardErrorStateComponent: n(522),
                    HextechLoadingAnimationComponent: d,
                    LobbiesService: A,
                    SummonerService: M,
                    QueueEligibilityService: N,
                    MatchmakingService: D,
                    ChatService: L,
                    SocialLeaderboardService: W,
                    InvitesService: Q,
                    ...e,
                    TEMPLATES: {
                        ...t
                    }
                })
            }
            e.exports = async function() {
                let e = null;
                try {
                    e = (await (0, i.getProvider)().getOptional("rcp-fe-lol-tft")).getBattlePassMilestone()
                } catch (e) {
                    i.logger.error("Provider getOptional failure", e)
                }
                let t = null,
                    n = null;
                try {
                    const e = await (0, i.getProvider)().getOptional("rcp-fe-lol-social");
                    t = e.getHovercardComponent(), n = e.getHovercardTemplates()
                } catch (e) {
                    i.logger.error("Provider getOptional failure", e)
                }
                a(t, n, e)
            }, e.exports.registerApplication = a
        }, e => {
            "use strict";

            function t(e) {
                const n = {};
                for (const s in e) "object" == typeof e[s] ? n[s] = t(e[s]) : n[s] = e[s];
                return n
            }

            function n(e, t, n) {
                const {
                    regions: s,
                    region: i,
                    locale: o
                } = e.metadata();
                if ((n = n.get("metadata." + t)) && "region" === t && n.id !== i.id) {
                    const t = s[n.id],
                        i = t.defaultLocale ? t.defaultLocale.id : t.availableLocales[0].id;
                    e.setLocale(i, n.id)
                } else n && "locale" === t && n.id !== o.id && e.setLocale(n.id)
            }
            e.exports = function(e, s, i) {
                let o;
                const a = {
                    metadata: !0,
                    moment: !0
                };
                return s = s.observe((() => {
                    if (o) {
                        const e = t(s.metadata());
                        o.set("metadata", e), o.beginPropertyChanges(), Object.keys(a).forEach((e => {
                            o.propertyWillChange(e), o.propertyDidChange(e)
                        })), o.endPropertyChanges()
                    }
                })), o = e.Service.extend({
                    _tra: null,
                    init() {
                        this.wrapTra(s)
                    },
                    wrapTra(e) {
                        e && (this._tra = e, this.set("metadata", t(this._tra.metadata())), this.setLocale = this._tra.setLocale.bind(this._tra), this.formatString = this._tra.formatString.bind(this._tra), this.moment = this._tra.moment.bind(this._tra), this.ready = this._tra.ready.bind(this._tra), this.exists = this._tra.exists.bind(this._tra), this.getAsync = this._tra.getAsync.bind(this._tra), this.existsAsync = this._tra.existsAsync.bind(this._tra), this.numeral = this._tra.numeral.bind(this._tra))
                    },
                    unknownProperty(e) {
                        return a[e] = !0, this._tra.get(e)
                    },
                    willDestroy: () => this._tra.unregister(),
                    addOverlays: function(e) {
                        let t = this._tra;
                        for (const n of e) t = t.overlay(n);
                        t && this.wrapTra(t)
                    }
                }).create(), o.set("service", o), o.addObserver("metadata.region", n.bind(null, s, "region")), o.addObserver("metadata.locale", n.bind(null, s, "locale")), i && (console.warning("deprecated: pass a traService as a property of your Ember application definition"), i.register("tra:main", o, {
                    instantiate: !1
                }), i.inject("component", "tra", "tra:main"), i.inject("controller", "tra", "tra:main"), i.inject("view", "tra", "tra:main"), i.inject("model", "tra", "tra:main"), i.inject("route", "tra", "tra:main"), i.inject("service", "tra", "tra:main")), o
            }
        }, (e, t, n) => {
            "use strict";
            var s = n(1),
                i = n(104);
            const o = (0, s.getProvider)().getSocket(),
                a = (0, s.emberDataBinding)({
                    Ember: s.Ember,
                    websocket: o,
                    logPrefix: "service:assets",
                    basePaths: {
                        gameflow: "/lol-gameflow",
                        gameData: "/lol-game-data"
                    },
                    boundProperties: {
                        gameflowSession: {
                            api: "gameflow",
                            path: "/v1/session",
                            default: {}
                        },
                        summonerIcons: {
                            api: "gameData",
                            path: "/assets/v1/summoner-icons.json"
                        },
                        regionLocale: "/riotclient/region-locale"
                    }
                });
            e.exports = s.Ember.Service.extend(a, {
                init() {
                    this._super(...arguments), this.set("maps", []), this._initObservers()
                },
                _initObservers() {
                    (0, s.dataBinding)("/lol-maps", o).observe("/v2/maps", this, (e => {
                        e && this.set("maps", e)
                    })), (0, s.dataBinding)("/lol-game-data", o).observe("/assets/v1/generic-assets.json", this, (e => {
                        e && this.set("teamPlannerButtonAssets", e["lcu-assets-tft-team-planner-button"])
                    }))
                },
                currentMapId: s.Ember.computed.alias("gameflowSession.map.id"),
                currentGameMode: s.Ember.computed.alias("gameflowSession.map.gameMode"),
                currentQueueId: s.Ember.computed.alias("gameflowSession.gameData.queue.id"),
                backgroundAssets: s.Ember.computed("availableMaps.@each.id", "availableMaps.[]", (function() {
                    const e = s.Ember.A();
                    return this.get("availableMaps").forEach((t => {
                        if (t.assets) {
                            let n, s, o, a;
                            s = !1, a = i.SIDEBAR_BACKGROUND_COLORS.DEFAULT, t.assets["parties-background-video"] ? (n = !0, o = t.assets["parties-background-video"]) : (n = !1, o = t.assets["parties-background"]), o && (s = `/${o}`), o && i.SIDEBAR_BACKGROUND_COLORS[t.gameMode] && i.SIDEBAR_BACKGROUND_COLORS[t.gameMode][t.id] && (a = i.SIDEBAR_BACKGROUND_COLORS[t.gameMode][t.id]), e.pushObject({
                                id: t.id,
                                isDefault: t.isDefault,
                                gameMode: t.gameMode,
                                gameMutator: t.gameMutator,
                                url: s,
                                isVideo: n,
                                sidebarBackgroundColor: a
                            })
                        }
                    })), e
                })),
                availableMaps: s.Ember.computed("maps.@each.id", "maps.[]", (function() {
                    const e = this.get("maps");
                    return e || []
                })),
                getMap: function(e, t, n) {
                    const s = this.get("maps");
                    return this._getMap(s, e, t, n)
                },
                getBackgroundAsset: function(e, t, n) {
                    const s = this.get("backgroundAssets");
                    return this._getMap(s, e, t, n)
                },
                _getMap: function(e, t, n, s) {
                    let i = !1,
                        o = !1;
                    for (const a of e)
                        if (a.id === t && a.isDefault && (o = a), a.id !== t || a.gameMode !== n || a.gameMutator) {
                            if (a.id === t && a.gameMode === n && s && a.gameMutator === s) {
                                i = a;
                                break
                            }
                        } else i = a;
                    return i || o
                }
            })
        }, e => {
            "use strict";
            e.exports = {
                TUTORIAL_ASSETS: {
                    BASIC_TUTORIAL: {
                        "game-select-icon-active-video": "/fe/lol-parties/tutorial-active-video.webm",
                        "game-select-icon-intro-video": "/fe/lol-parties/tutorial-intro-video.webm",
                        "game-select-icon-disabled": "/fe/lol-parties/tutorial-disabled.png",
                        "game-select-icon-hover": "/fe/lol-parties/tutorial-hover.png",
                        "game-select-icon-default": "/fe/lol-parties/tutorial-default.png",
                        "game-select-icon-active": "/fe/lol-parties/tutorial-active.png",
                        "icon-victory": "/fe/lol-parties/tutorial-icon-victory.png"
                    },
                    BATTLE_TRAINING: {
                        "game-select-icon-active-video": "/fe/lol-parties/battletraining-active-video.webm",
                        "game-select-icon-intro-video": "/fe/lol-parties/battletraining-intro-video.webm",
                        "game-select-icon-disabled": "/fe/lol-parties/battletraining-disabled.png",
                        "game-select-icon-hover": "/fe/lol-parties/battletraining-hover.png",
                        "game-select-icon-default": "/fe/lol-parties/battletraining-default.png",
                        "game-select-icon-active": "/fe/lol-parties/battletraining-active.png",
                        "icon-victory": "/fe/lol-parties/battletraining-icon-victory.png"
                    },
                    TUTORIAL_FLOW: {
                        "game-select-icon-active-video": "/fe/lol-parties/battletraining-active-video.webm",
                        "game-select-icon-intro-video": "/fe/lol-parties/battletraining-intro-video.webm",
                        "game-select-icon-disabled": "/fe/lol-parties/battletraining-disabled.png",
                        "game-select-icon-hover": "/fe/lol-parties/battletraining-hover.png",
                        "game-select-icon-default": "/fe/lol-parties/battletraining-default.png",
                        "game-select-icon-active": "/fe/lol-parties/battletraining-active.png",
                        "icon-victory": "/fe/lol-parties/battletraining-icon-victory.png"
                    },
                    PRACTICETOOL: {
                        "game-select-icon-active-video": "/fe/lol-parties/practicetool-active-video.webm",
                        "game-select-icon-intro-video": "/fe/lol-parties/practicetool-intro-video.webm",
                        "game-select-icon-disabled": "/fe/lol-parties/practicetool-disabled.png",
                        "game-select-icon-hover": "/fe/lol-parties/practicetool-hover.png",
                        "game-select-icon-default": "/fe/lol-parties/practicetool-default.png",
                        "game-select-icon-active": "/fe/lol-parties/practicetool-active.png",
                        "icon-victory": "/fe/lol-parties/practicetool-icon-victory.png"
                    }
                },
                SIDEBAR_BACKGROUND_COLORS: {
                    DEFAULT: "#010a13",
                    ASCENSION: {
                        8: "#452B13"
                    },
                    ODIN: {
                        8: "#452B13"
                    },
                    ARAM: {
                        12: "#072237"
                    },
                    CLASSIC: {
                        10: "#21172A",
                        11: "#10242F"
                    },
                    KINGPORO: {
                        12: "#072237"
                    },
                    SIEGE: {
                        11: "#10242F"
                    },
                    ASSASSINATE: {
                        11: "#490916"
                    },
                    URF: {
                        11: "#4B231B"
                    },
                    ARSR: {
                        11: "#10242F"
                    }
                }
            }
        }, (e, t, n) => {
            "use strict";
            var s, i = n(1),
                o = (s = n(106)) && s.__esModule ? s : {
                    default: s
                };
            const a = (0, i.emberDataBinding)({
                Ember: i.Ember,
                websocket: (0, i.getProvider)().getSocket(),
                logPrefix: "service:chat",
                basePaths: {
                    chat: "/lol-chat"
                },
                boundProperties: {
                    me: {
                        api: "chat",
                        path: "/v1/me"
                    },
                    friends: {
                        api: "chat",
                        path: "/v1/friends",
                        objectTypes: {
                            "[]": o.default
                        }
                    },
                    groups: {
                        api: "chat",
                        path: "/v1/friend-groups"
                    }
                }
            });
            e.exports = i.Ember.Service.extend(a, {
                friends: i.Ember.A(),
                isFriend: function(e) {
                    const t = this.get("friends");
                    return !!(t && t.length > 0) && t.isAny("summonerId", e)
                },
                getFriend: function(e) {
                    const t = this.get("friends");
                    return t && t.findBy("summonerId", e)
                },
                sendFriendRequest: function(e) {
                    this.get("api.chat").post("/v2/friend-requests", e)
                },
                sendChatMessage: function(e, t) {
                    const n = `/v1/conversations/${t}/messages`;
                    return this.get("api.chat").post(n, {
                        body: e,
                        type: "information"
                    })
                }
            })
        }, (e, t, n) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.default = void 0;
            var s = n(1);
            const i = ["chat", "away"];
            var o = s.Ember.Object.extend({
                id: null,
                puuid: null,
                summonerId: null,
                name: null,
                gameName: null,
                gameTag: null,
                availability: null,
                icon: null,
                championId: null,
                contextText: null,
                isHonorRecognized: !1,
                isRecentlyPlayed: !1,
                avatarImgUrl: s.Ember.computed("icon", "championId", "isInRecentGroup", (function() {
                    return this.get("isInRecentGroup") ? function(e) {
                        if (!e || 0 === e) return "/lol-game-data/assets/v1/champion-icons/-1.png";
                        return `/lol-game-data/assets/v1/champion-icons/${e}.png`
                    }(this.get("championId")) : function(e) {
                        if (!e || -1 === e) return "/lol-game-data/assets/v1/profile-icons/1.jpg";
                        return `/lol-game-data/assets/v1/profile-icons/${e}.jpg`
                    }(this.get("icon"))
                })),
                isInRecentGroup: s.Ember.computed.or("isHonorRecognized", "isRecentlyPlayed"),
                checked: !1,
                checkboxId: s.Ember.computed("summonerId", (function() {
                    return `invite-dialog-checkbox-${this.get("summonerId")}`
                })),
                canBeInvited: s.Ember.computed("availability", (function() {
                    const e = this.get("availability");
                    return -1 !== i.indexOf(e)
                })),
                canBeInvitedBy(e) {
                    const t = this.get("canBeInvited"),
                        n = this.get("platformId"),
                        s = this.get("product");
                    return t && e && n === e.platformId && s === e.product
                }
            });
            t.default = o
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            const i = (0, s.emberDataBinding)({
                Ember: s.Ember,
                websocket: (0, s.getProvider)().getSocket(),
                logPrefix: "service:summoner",
                basePaths: {
                    summoner: "/lol-summoner"
                },
                boundProperties: {
                    currentSummoner: {
                        api: "summoner",
                        path: "/v1/current-summoner"
                    }
                }
            });
            e.exports = s.Ember.Service.extend(i, {
                localSummonerId: s.Ember.computed.alias("currentSummoner.summonerId"),
                localProfileIconId: s.Ember.computed.alias("currentSummoner.profileIconId"),
                getSummoner: function(e) {
                    const t = `/v1/summoners/${e}`;
                    return this.get("api.summoner").get(t)
                },
                getSummonerBySummonerName: function(e) {
                    const t = `/v1/summoners?name=${e=encodeURIComponent(e)}`;
                    return this.get("api.summoner").get(t)
                },
                getSummonersBySummonerNames: function(e) {
                    return this.get("api.summoner").post("/v2/summoners/names", e)
                },
                getSummonersByAliases(e) {
                    return this.get("api.summoner").post("/v1/summoners/aliases", e)
                },
                getSummonersByPuuid: function(e) {
                    return this.get("api.summoner").post("/v2/summoners/puuid", e)
                }
            })
        }, (e, t, n) => {
            "use strict";
            var s, i = n(1),
                o = n(18),
                a = n(109),
                l = n(41),
                r = n(15),
                c = (s = n(16)) && s.__esModule ? s : {
                    default: s
                };
            const m = "tftEmeraldModalSeenNew",
                u = (0, i.emberDataBinding)({
                    Ember: i.Ember,
                    websocket: (0, i.getProvider)().getSocket(),
                    logPrefix: "service:game-select",
                    basePaths: {
                        gameQueues: "/lol-game-queues",
                        login: "/lol-login",
                        lobby: "/lol-lobby",
                        summoner: "/lol-summoner",
                        suggestedPlayers: "/lol-suggested-players",
                        chat: "/lol-chat",
                        regalia: "/lol-regalia",
                        featuredModes: "/lol-featured-modes",
                        honor: "/lol-honor-v2",
                        settings: "/lol-settings",
                        gameData: "/lol-game-data"
                    },
                    boundProperties: {
                        queues: {
                            api: "gameQueues",
                            path: "/v1/queues",
                            default: []
                        },
                        lobbyTimer: {
                            api: "lobby",
                            path: "/v2/lobby/countdown"
                        },
                        localSummonerData: {
                            api: "login",
                            path: "/v1/session"
                        },
                        currentSummoner: {
                            api: "summoner",
                            path: "/v1/current-summoner"
                        },
                        currentSummonerProfile: {
                            api: "summoner",
                            path: "/v1/current-summoner/summoner-profile"
                        },
                        availability: {
                            api: "lobby",
                            path: "/v1/lobby/availability"
                        },
                        invitations: {
                            api: "lobby",
                            path: "/v1/lobby/invitations"
                        },
                        suggestedPlayers: {
                            api: "suggestedPlayers",
                            path: "/v1/suggested-players"
                        },
                        chatConversations: {
                            api: "chat",
                            path: "/v1/conversations"
                        },
                        chatParticipants: {
                            api: "chat",
                            path: "/v1/conversations/{{chatConversationId}}/participants"
                        },
                        me: {
                            api: "chat",
                            path: "/v1/me"
                        },
                        notifications: {
                            api: "lobby",
                            path: "/v2/notifications"
                        },
                        gameSelectEligibilityHash: {
                            api: "lobby",
                            path: "/v2/eligibility/game-select-eligibility-hash"
                        },
                        regaliaConfig: {
                            api: "regalia",
                            path: "/v2/config"
                        },
                        featuredModesEntitledFeatures: {
                            api: "featuredModes",
                            path: "/v1/entitled-feature/{{queueId}}"
                        },
                        honorConfig: {
                            api: "honor",
                            path: "/v1/config"
                        },
                        hasPlayedTFTRankedMode: {
                            api: "lobby",
                            path: "/v1/lobby/tft-ranked-history"
                        },
                        tftPreferences: {
                            api: "settings",
                            path: "/v2/account/LCUPreferences/lol-tft"
                        },
                        tftSetData: {
                            api: "gameData",
                            path: "/assets/v1/tftsets.json"
                        }
                    }
                });
            e.exports = i.Ember.Service.extend(u, {
                matchmakingService: i.Ember.inject.service("matchmaking"),
                eligibilityService: i.Ember.inject.service("queue-eligibility"),
                playerNames: i.playerNames,
                platformConfig: c.default,
                init: function() {
                    this._super(...arguments), this.lobbiesDataBinding = (0, i.dataBinding)("/lol-lobby", (0, i.getProvider)().getSocket()), this.lobbiesDataBinding.observe("/v2/lobby", this, this.handleLobby)
                },
                handleLobbyMemberNames: e => e.puuid ? i.playerNames.getDisplayNameByPUUID(e.puuid).then((t => ({
                    displayName: t,
                    ...e
                }))) : e,
                handleLobby(e) {
                    i.playerNames.isUsingAlias && e?.members && e.members.forEach(((t, n) => {
                        this.handleLobbyMemberNames(t).then((t => {
                            e.members[n] = t
                        }))
                    })), this.set("lobby", e)
                },
                chatConversationId: i.Ember.computed("lobby.multiUserChatId", "chatConversations.@each.id", (function() {
                    let e = this.get("lobby.multiUserChatId");
                    if (!e) return "";
                    e = e.split("@")[0];
                    const t = this.get("chatConversations"),
                        n = t && t.find((t => t.id.split("@")[0] === e));
                    return n && n.id ? encodeURIComponent(n.id) : ""
                })),
                partyId: i.Ember.computed.alias("lobby.partyId"),
                queueId: i.Ember.computed.alias("lobby.gameConfig.queueId"),
                gameConfig: i.Ember.computed.alias("lobby.gameConfig"),
                gameMode: i.Ember.computed.alias("lobby.gameConfig.gameMode"),
                inLobby: i.Ember.computed.notEmpty("lobby.gameConfig.queueId"),
                isCustom: i.Ember.computed.bool("lobby.gameConfig.isCustom"),
                currentPlayer: i.Ember.computed.alias("lobby.localMember"),
                scarcePositions: i.Ember.computed.alias("lobby.scarcePositions"),
                currentPartyMembers: i.Ember.computed.alias("lobby.members"),
                currentPartyMemberIds: i.Ember.computed.mapBy("currentPartyMembers", "summonerId"),
                isCurrentPlayerPartyLeader: i.Ember.computed.bool("lobby.localMember.isLeader"),
                isCurrentPlayerPartyMember: i.Ember.computed.not("isCurrentPlayerPartyLeader"),
                autoFillEligible: i.Ember.computed.alias("lobby.localMember.autoFillEligible"),
                currentPartyIsNotFull: i.Ember.computed.not("currentPartyIsFull"),
                premadeSizeAllowed: i.Ember.computed.alias("lobby.gameConfig.premadeSizeAllowed"),
                allowablePremadeSizes: i.Ember.computed.alias("lobby.gameConfig.allowablePremadeSizes"),
                isDraft: i.Ember.computed.alias("lobby.gameConfig.showPositionSelector"),
                showPositionSelector: i.Ember.computed.alias("lobby.gameConfig.showPositionSelector"),
                currentPartySize: i.Ember.computed.alias("lobby.members.length"),
                lobbyTimerEnabled: i.Ember.computed.alias("lobbyTimer.enabled"),
                lobbyTimerCountdown: i.Ember.computed.alias("lobbyTimer.countdown"),
                maxTeamSize: i.Ember.computed.alias("lobby.gameConfig.maxTeamSize"),
                restrictions: i.Ember.computed.alias("lobby.restrictions"),
                warnings: i.Ember.computed.alias("lobby.warnings"),
                partyType: i.Ember.computed.alias("lobby.partyType"),
                isLobbyFull: i.Ember.computed.alias("lobby.gameConfig.isLobbyFull"),
                isOpenPartyDisabled: i.Ember.computed.equal("lobby.partyType", ""),
                isOpenPartyEnabled: i.Ember.computed.not("isOpenPartyDisabled"),
                isMap21: i.Ember.computed.equal("lobby.gameConfig.mapId", 21),
                isTFT: i.Ember.computed.equal("gameMode", "TFT"),
                isCherry: i.Ember.computed.equal("gameMode", o.CHERRY_GAME_MODE),
                isSolo: i.Ember.computed("lobby.members.length", (function() {
                    const e = this.get("lobby");
                    return !(e && e.members && e.members.length > 1)
                })),
                maxLobbySize: i.Ember.computed("lobby.gameConfig.maxLobbySize", "isTFT", (function() {
                    const e = this.get("lobby.gameConfig.maxLobbySize");
                    return e || (this.get("isTFT") ? o.TFT_MAX_PARTY_SIZE : o.NORMAL_MAX_PARTY_SIZE)
                })),
                currentPartyIsFull: i.Ember.computed("currentPartySize", "maxLobbySize", "isCustom", (function() {
                    if (this.get("isCustom")) return !1;
                    const e = this.get("maxLobbySize");
                    return this.get("currentPartySize") >= e
                })),
                memberNameHash: i.Ember.computed("lobby.members.@each.summonerName", "currentSummoner.summonerId", (function() {
                    const e = {},
                        t = this.get("currentSummoner");
                    t && (e[t.summonerId] = this.get("playerNames.isUsingAlias") ? t.gameName : t.summonerName);
                    const n = this.get("lobby.members");
                    if (n && n.length > 0) {
                        const {
                            length: t
                        } = n;
                        for (let s = 0; s < t; s++) {
                            const t = n[s];
                            e[t.summonerId] = this.get("playerNames.isUsingAlias") ? t.gameName : t.summonerName
                        }
                    }
                    return e
                })),
                hasLobbyRestrictions: i.Ember.computed.gt("restrictions.length", 0),
                currentTeamIsFull: i.Ember.computed("currentPartyMembers.length", "maxTeamSize", (function() {
                    return this.get("currentPartyMembers.length") >= this.get("maxTeamSize")
                })),
                otherCurrentPartyMembers: i.Ember.computed("currentPartyMembers.@each.summonerId", "currentPlayer.summonerId", (function() {
                    const e = this.get("currentPartyMembers") || [],
                        t = this.get("currentPlayer.summonerId");
                    return (e ? i.Ember.A(e.filter((e => e.summonerId !== t))) : void 0) || i.Ember.A()
                })),
                currentPartyLeader: i.Ember.computed("currentPartyMembers.@each.isLeader", (function() {
                    const e = this.get("currentPartyMembers");
                    return !!e && e.find((e => e.isLeader))
                })),
                invites: i.Ember.computed.alias("lobby.invitations"),
                pendingInvites: i.Ember.computed("lobby.invitations.[]", "lobby.invitations.@each.state", (function() {
                    return (this.get("lobby.invitations") || i.Ember.A()).filter((e => "Pending" === e.state || "Requested" === e.state))
                })),
                invitedPlayerIds: i.Ember.computed.mapBy("lobby.invitations", "toSummonerId"),
                currentPlayerAcceptedInvitation: i.Ember.computed("lobby.invitations.[]", "lobby.invitations.@each.state", "currentPlayer.summonerId", (function() {
                    const e = this.get("lobby.invitations"),
                        t = this.get("currentPlayer.summonerId");
                    if (e && t) {
                        const n = e.find((e => e.toSummonerId === t));
                        if (n && n.state) return n.state === o.INVITED_ROLES.ACCEPTED
                    }
                    return !1
                })),
                currentPartySuggestedPlayers: i.Ember.computed.alias("suggestedPlayers"),
                honorSuggestionsEnabled: i.Ember.computed.bool("honorConfig.HonorSuggestionsEnabled"),
                currentPlayerCanInvite: i.Ember.computed.and("currentPlayer.allowedInviteOthers", "matchmakingService.isNotSearching", "currentPartyIsNotFull"),
                shouldForceScarcePositionSelection: i.Ember.computed("lobby.gameConfig.shouldForceScarcePositionSelection", (function() {
                    return this.get("lobby.gameConfig.shouldForceScarcePositionSelection")
                })),
                multiteamLobbySubteamCount: i.Ember.computed("queueId", (function() {
                    const e = this.get("queueId");
                    return e && o.QUEUE_ID_TO_MULTITEAM_LOBBY_CONFIG && o.QUEUE_ID_TO_MULTITEAM_LOBBY_CONFIG[e] && o.QUEUE_ID_TO_MULTITEAM_LOBBY_CONFIG[e].subteamCount ? o.QUEUE_ID_TO_MULTITEAM_LOBBY_CONFIG[e].subteamCount : 0
                })),
                multiteamLobbySubteamPlayerSlotCount: i.Ember.computed("queueId", (function() {
                    const e = this.get("queueId");
                    return e && o.QUEUE_ID_TO_MULTITEAM_LOBBY_CONFIG && o.QUEUE_ID_TO_MULTITEAM_LOBBY_CONFIG[e] && o.QUEUE_ID_TO_MULTITEAM_LOBBY_CONFIG[e].playerSlotCount ? o.QUEUE_ID_TO_MULTITEAM_LOBBY_CONFIG[e].playerSlotCount : 0
                })),
                shouldShowMultiteamLobby: i.Ember.computed("multiteamLobbySubteamCount", "multiteamLobbySubteamPlayerSlotCount", (function() {
                    return this.get("multiteamLobbySubteamCount") > 0 && this.get("multiteamLobbySubteamPlayerSlotCount") > 0
                })),
                subteamDataToSummonerIdMap: i.Ember.computed("lobby", "shouldShowMultiteamLobby", (function() {
                    const e = {},
                        t = this.get("lobby"),
                        n = this.get("shouldShowMultiteamLobby");
                    return t && n ? (t.members.forEach((t => {
                        if (!t.subteamIndex || !t.intraSubteamPosition) return;
                        const n = [t.subteamIndex, t.intraSubteamPosition];
                        e[n] = t.summonerId
                    })), e) : e
                })),
                currentQueue: i.Ember.computed("queueId", "queues", "queues.[]", (function() {
                    const e = this.get("queueId"),
                        t = this.get("queues");
                    return e && Array.isArray(t) && Boolean(t.length) ? t.find((t => t.id === e)) : null
                })),
                createLobbyWithQueueId: function(e) {
                    return i.logger.trace(`Creating new lobby with queueId: ${e}`), this.get("api.lobby").post("v2/lobby", {
                        queueId: e
                    })
                },
                isPlayerInLobby: function(e) {
                    const t = this.get("currentPlayer");
                    if (t && t.summonerId === e) return !0;
                    return !!this.get("invites").find((t => t.toSummonerId === e && t.state !== o.INVITED_ROLES.KICKED && t.state !== o.INVITED_ROLES.DECLINED))
                },
                invitePlayer: function(e) {
                    return this.isPlayerInLobby(e) || this.get("currentPartyIsFull") ? Promise.reject() : this.get("api.lobby").post("/v2/lobby/invitations", [{
                        toSummonerId: e
                    }])
                },
                invitePlayers: function(e) {
                    if (this.get("currentPartyIsFull")) return Promise.reject();
                    const t = [];
                    return e.forEach((e => {
                        this.isPlayerInLobby(e) || t.push({
                            toSummonerId: e
                        })
                    })), 0 === t.length ? Promise.reject() : this.get("api.lobby").post("/v2/lobby/invitations", t)
                },
                transferLeadershipToPlayer: function(e) {
                    return this._postMemberAction(e, "promote")
                },
                leaveParty: function() {
                    return this.cancelMatchmakingSearch(), this.leaveLobby().then((() => {
                        this.get("eligibilityService").refreshEligibilities()
                    }))
                },
                leaveLobby: function() {
                    return this.get("api.lobby").delete("/v2/lobby")
                },
                removePlayerFromParty: function(e) {
                    return this._postMemberAction(e, "kick")
                },
                removeSuggestedPlayer: function(e) {
                    return this.get("api.suggestedPlayers").delete(`/v1/suggested-players/${e}`)
                },
                sendInvitePrivilegeAction: function(e, t) {
                    return this.get("api.lobby").post(`/v2/lobby/members/${e}/${t}`)
                },
                _postMemberAction: function(e, t) {
                    if (!e) throw new Error("Attempting to act on invalid lobby summoner id: " + e);
                    if (!t) throw new Error("Attempting to post invalid lobby summoner action: " + t);
                    const n = `/v2/lobby/members/${e}/${t}`;
                    return this.get("api.lobby").post(n)
                },
                setPositionPreferences: function(e) {
                    return this.get("api.lobby").put("/v1/lobby/members/localMember/position-preferences", e)
                },
                setSubteamData: function(e, t) {
                    return this.get("api.lobby").put("/v2/lobby/subteamData", {
                        subteamIndex: e,
                        intraSubteamPosition: t
                    })
                },
                shouldSecondaryButtonHideNonScarcePositions: function(e) {
                    const t = this.get("shouldForceScarcePositionSelection"),
                        n = this.isPositionAScarcePosition(e),
                        s = this.get("scarcePositions") || [];
                    return t && !n && s.length > 0
                },
                shouldHideSecondaryPosition: function(e) {
                    const t = this.get("currentTeamIsFull"),
                        n = this.get("shouldForceScarcePositionSelection"),
                        s = this.isPositionAScarcePosition(e);
                    return t || n && s || e === a.POSITIONS.FILL
                },
                isPositionAScarcePosition: function(e) {
                    const t = this.get("scarcePositions") || [],
                        n = t && t.includes(e);
                    return e === a.POSITIONS.FILL || n
                },
                canStartMatchmaking: i.Ember.computed.alias("lobby.canStartActivity"),
                isPremadeRestrictedFives: i.Ember.computed("premadeSizeAllowed", "allowablePremadeSizes.[]", (function() {
                    const e = this.get("allowablePremadeSizes"),
                        t = this.get("premadeSizeAllowed");
                    return !(!e || 1 !== e.length || 5 !== e[0] || !1 !== t)
                })),
                chatParticipantsObserver: i.Ember.computed("chatConversationId", "chatParticipants.@each.{id,icon,availability}", (function() {
                    return this.get("chatParticipants")
                })),
                startMatchmakingSearch: function() {
                    return this.get("api.lobby").post("/v2/lobby/matchmaking/search")
                },
                cancelMatchmakingSearch: function() {
                    return this.get("api.lobby").delete("/v2/lobby/matchmaking/search")
                },
                deleteNotification: function(e) {
                    return e ? this.get("api.lobby").delete(`/v2/notifications/${e}`) : Promise.reject()
                },
                setPartyType: function(e) {
                    return this.get("api.lobby").put("/v2/lobby/partyType", e)
                },
                isLobbyDisabled: function(e) {
                    return !(!e || !l.GAME_AVAILABILITY_TYPES[e] || "disabled" !== l.GAME_AVAILABILITY_TYPES[e])
                },
                queueAvailabilityWarningTooltip: i.Ember.computed("queueId", "isCustom", "inLobby", "availability", "tra.ready", "tra.parties_queue_disbanded_tooltip", (function() {
                    if (!this.get("isCustom") && this.get("inLobby")) {
                        const e = this.get("availability");
                        if (this.isLobbyDisabled(e)) return this.get("tra.parties_queue_disbanded_tooltip")
                    }
                    return ""
                })),
                hasQueueAvailabilityWarning: i.Ember.computed.gt("queueAvailabilityWarningTooltip.length", 0),
                hasSeenTFTEmeraldModal: i.Ember.computed("tftPreferences", (function() {
                    const e = this.get("tftPreferences") || {};
                    return e.data && !!e.data[m] || !1
                })),
                shouldShowTFTEmeraldModal: i.Ember.computed("hasPlayedTFTRankedMode", "queueId", "hasSeenTFTEmeraldModal", "tftSetData", (function() {
                    const e = this.get("tftSetData");
                    let t = !1;
                    e && (t = "TFTSet10" === e.LCTFTModeData.mDefaultSet.SetCoreName);
                    const n = [r.TFT_RANKED_QUEUE_ID, r.TFT_DOUBLE_UP_QUEUE_ID].includes(this.get("queueId")),
                        s = this.get("hasSeenTFTEmeraldModal");
                    if (t && n && !s) {
                        if (this.get("hasPlayedTFTRankedMode")) return !0;
                        this.markTFTEmeraldModalAsSeen()
                    }
                    return !1
                })),
                markTFTEmeraldModalAsSeen: function() {
                    const e = {};
                    e[m] = !0, (0, i.dataBinding)("/lol-settings", (0, i.getProvider)().getSocket()).patch("/v2/account/LCUPreferences/lol-tft", {
                        data: e,
                        schemaVersion: 1
                    }), this.set("hasSeenTFTEmeraldModal", !0)
                }
            })
        }, e => {
            "use strict";
            e.exports = {
                POSITIONS: {
                    MIDDLE: "MIDDLE",
                    BOTTOM: "BOTTOM",
                    JUNGLE: "JUNGLE",
                    TOP: "TOP",
                    UTILITY: "UTILITY",
                    FILL: "FILL",
                    NONE: "NONE",
                    UNSELECTED: "UNSELECTED"
                },
                CHAMP_STATS_POSITION_UTILITY: "SUPPORT",
                MAP21_LANE_ROLE: "LANE",
                MAP21_MAPPINGS: {
                    TOP: "JUNGLE",
                    JUNGLE: "JUNGLE",
                    MIDDLE: "BOTTOM",
                    BOTTOM: "BOTTOM",
                    UTILITY: "BOTTOM"
                },
                POSITION_ROLES: {
                    PRIMARY: "PRIMARY",
                    SECONDARY: "SECONDARY"
                }
            }
        }, (e, t, n) => {
            "use strict";
            var s = n(1),
                i = n(34),
                o = n(111);
            const a = (0, s.emberDataBinding)({
                Ember: s.Ember,
                websocket: (0, s.getProvider)().getSocket(),
                logPrefix: "parties:service:matchmaking",
                basePaths: {
                    matchmaking: "/lol-matchmaking",
                    lobby: "/lol-lobby"
                },
                boundProperties: {
                    matchmakingSearch: {
                        api: "matchmaking",
                        path: "/v1/search"
                    },
                    matchmakingSearchState: {
                        api: "lobby",
                        path: "/v2/lobby/matchmaking/search-state"
                    },
                    currentSummoner: "lol-summoner/v1/current-summoner"
                }
            });
            e.exports = s.Ember.Service.extend(a, {
                lobbiesService: s.Ember.inject.service("lobbies"),
                currentPartyMembers: s.Ember.computed.alias("lobbiesService.currentPartyMembers"),
                matchmakingErrors: s.Ember.computed.alias("matchmakingSearchState.errors"),
                matchmakingErrorState: s.Ember.computed.alias("matchmakingSearchState.searchState"),
                validSearchErrors: s.Ember.computed("matchmakingErrors.@each.id", "currentPartyMembers.@each.summonerId", (function() {
                    const e = this.get("currentPartyMembers");
                    if (!e) return s.Ember.A();
                    const t = e.map((e => e.summonerId)) || [],
                        n = this.get("matchmakingErrors");
                    return s.Ember.A(s.lodash.filter(n, (e => !!t.includes(e.penalizedSummonerId))))
                })),
                validSearchErrorIds: s.Ember.computed("validSearchErrors", (function() {
                    return this.get("validSearchErrors").map((e => e.get("id")))
                })),
                longestSearchError: s.Ember.computed("validSearchErrors", (function() {
                    const e = this.get("validSearchErrors"),
                        t = s.lodash.orderBy(e, ["penaltyTimeRemaining"], ["desc"]);
                    return !!t.length && t[0]
                })),
                longestSearchErrorPenaltyTimeRemaining: s.Ember.computed.readOnly("longestSearchError.penaltyTimeRemaining"),
                longestSearchErrorPenaltyTimeRemainingFormatted: s.Ember.computed("longestSearchErrorPenaltyTimeRemaining", (function() {
                    return (0, o.formatThreeLargestUnits)(this.get("longestSearchErrorPenaltyTimeRemaining"))
                })),
                searchState: s.Ember.computed.alias("matchmakingSearch.searchState"),
                isSearching: s.Ember.computed.equal("searchState", i.MATCHMAKING_STATES.SEARCHING),
                isNotSearching: s.Ember.computed.not("isSearching"),
                isMatchFound: s.Ember.computed.equal("searchState", i.MATCHMAKING_STATES.FOUND),
                isMatchNotFound: s.Ember.computed.not("isMatchFound"),
                isInQueue: s.Ember.computed.or("isSearching", "isMatchFound"),
                lowPriorityData: s.Ember.computed.readOnly("matchmakingSearch.lowPriorityData"),
                isLowPriorityQueue: s.Ember.computed.gt("lowPriorityData.penaltyTime", 0),
                isQueueDelay: s.Ember.computed.equal("lowPriorityData.reason", i.LOW_PRIORITY_REASONS.QUEUE_DELAY),
                hasLowPriorityPenaltyTimeRemaining: s.Ember.computed.gt("lowPriorityData.penaltyTimeRemaining", 0),
                isSelfInLowPriorityQueue: s.Ember.computed("lowPriorityData.penalizedSummonerIds", "currentSummoner.summonerId", (function() {
                    const e = this.get("lowPriorityData.penalizedSummonerIds");
                    return !(!e || e.length < 1) && e.contains(this.get("currentSummoner.summonerId"))
                }))
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            e.exports = {
                formatSeconds: function(e) {
                    return this.formatMilliseconds(1e3 * e)
                },
                formatMilliseconds: function(e) {
                    e = e || 0;
                    const t = Math.floor(e / 60 / 60 / 1e3).toString();
                    let n = Math.floor(e / 60 / 1e3 % 60).toString();
                    const s = ("0" + Math.floor(e / 1e3 % 60).toString()).slice(-2);
                    return t > 0 && (n = ("0" + n).slice(-2)), (t > 0 ? t + ":" : "") + n + ":" + s
                },
                formatThreeLargestUnits: function(e) {
                    e = e || 0;
                    const t = Math.floor(e / 60 / 60 / 24 / 7);
                    let n = Math.floor(e / 60 / 60 / 24 % 7),
                        i = Math.floor(e / 60 / 60 % 24);
                    const o = Math.floor(e / 60 % 60),
                        a = ("0" + (Math.floor(e) % 60).toString()).slice(-2);
                    return t > 1 ? n > 0 ? i > 0 ? s.tra.formatString("queue_penalty_timer_wdh", {
                        weeks: t,
                        days: n,
                        hours: i
                    }) : s.tra.formatString("queue_penalty_timer_wd", {
                        weeks: t,
                        days: n
                    }) : i > 0 ? s.tra.formatString("queue_penalty_timer_wh", {
                        weeks: t,
                        hours: i
                    }) : s.tra.formatString("queue_penalty_timer_w", {
                        weeks: t
                    }) : (n += 7 * t, n > 2 ? i > 0 ? s.tra.formatString("queue_penalty_timer_dhms", {
                        days: n,
                        hours: i,
                        minutes: o,
                        seconds: a
                    }) : s.tra.formatString("queue_penalty_timer_dms", {
                        days: n,
                        minutes: o,
                        seconds: a
                    }) : (i += 24 * n, i > 0 ? s.tra.formatString("queue_penalty_timer_hms", {
                        hours: i,
                        minutes: o,
                        seconds: a
                    }) : s.tra.formatString("queue_penalty_timer_ms", {
                        minutes: o,
                        seconds: a
                    })))
                }
            }
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            const i = (0, s.emberDataBinding)({
                Ember: s.Ember,
                websocket: (0, s.getProvider)().getSocket(),
                logPrefix: "service:eternals",
                basePaths: {
                    eternals: "/lol-statstones"
                },
                boundProperties: {
                    enabledQueues: {
                        api: "eternals",
                        path: "/v1/statstones-enabled-queue-ids"
                    }
                }
            });
            e.exports = s.Ember.Service.extend(i)
        }, (e, t, n) => {
            "use strict";
            var s = n(1),
                i = r(n(19)),
                o = n(15),
                a = n(18),
                l = r(n(13));

            function r(e) {
                return e && e.__esModule ? e : {
                    default: e
                }
            }
            const c = (0, s.emberDataBinding)({
                Ember: s.Ember,
                websocket: (0, s.getProvider)().getSocket(),
                logPrefix: "service:queue-eligibility",
                basePaths: {
                    login: "/lol-login",
                    clientconfig: "/lol-client-config"
                },
                boundProperties: {
                    loginSession: {
                        api: "login",
                        path: "/v1/session"
                    },
                    tftNPEConfig: {
                        api: "clientconfig",
                        path: "/v3/client-config/lol.client_settings.tft.tft_npe"
                    }
                }
            });
            e.exports = s.Ember.Service.extend(c, {
                lobbies: s.Ember.inject.service("lobbies"),
                summoner: s.Ember.inject.service("summoner"),
                playerNames: s.playerNames,
                queues: l.default,
                eligibilitiesEntity: i.default,
                loginConnected: s.Ember.computed.alias("loginSession.connected"),
                localSummonerId: s.Ember.computed.alias("summoner.localSummonerId"),
                loading: s.Ember.computed.readOnly("eligibilitiesEntity.loading"),
                eligibilities: s.Ember.computed.readOnly("eligibilitiesEntity.eligibilities"),
                currentPartyMembers: s.Ember.computed.alias("lobbies.currentPartyMembers"),
                isSolo: s.Ember.computed.alias("lobbies.isSolo"),
                isTFTNPEEnabled: s.Ember.computed.bool("tftNPEConfig.enabled"),
                shouldShowNPEQueue: s.Ember.computed.bool("tftNPEConfig.shouldShowNPEQueue"),
                partyHasNewTFTPlayerWithoutBypass: s.Ember.computed("eligibilitiesEntity", "currentPartyMembers", (function() {
                    const e = this.get("eligibilitiesEntity").getRestrictionForCode(o.TFT_NEW_PLAYER_RESTRICTION);
                    if (e) {
                        const t = this.get("currentPartyMembers");
                        for (const n of e.summonerIds) {
                            const e = t.find((e => e.summonerId === n));
                            if (e && !e.tftNPEQueueBypass) return !0
                        }
                    }
                    return !1
                })),
                partyHasNewTFTPlayer: s.Ember.computed("eligibilitiesEntity", (function() {
                    return !!this.get("eligibilitiesEntity").getRestrictionForCode(o.TFT_NEW_PLAYER_RESTRICTION)
                })),
                newTFTPlayers: s.Ember.computed("eligibilitiesEntity", (function() {
                    const e = this.get("eligibilitiesEntity").getRestrictionForCode(o.TFT_NEW_PLAYER_RESTRICTION);
                    return e ? e.summonerIds : []
                })),
                isNewTFTPlayer: s.Ember.computed("localSummonerId", "eligibilitiesEntity", (function() {
                    const e = this.get("localSummonerId"),
                        t = this.get("eligibilitiesEntity").getRestrictionForCode(o.TFT_NEW_PLAYER_RESTRICTION);
                    return !!t && -1 !== t.summonerIds.indexOf(e)
                })),
                hasRankedDivisionRestriction: s.Ember.computed("eligibilitiesEntity.restrictions", "lobbies.hasLobbyRestrictions", (function() {
                    const e = this.get("eligibilitiesEntity.restrictions");
                    if (e && e.length > 0) {
                        return !!e.find((e => "TeamDivisionRestriction" === e.restrictionCode))
                    }
                    return !1
                })),
                refreshEligibilities: function() {
                    return this.get("eligibilitiesEntity").fetchEligibilities()
                },
                isQueueAvailable: function(e) {
                    return this.get("eligibilitiesEntity").isQueueAvailable(e)
                },
                generateDisabledReasonForParty: function(e) {
                    return new Promise((t => {
                        (!e.restrictions || e.restrictions.length < 1) && t("");
                        const n = [];
                        let s = !1;
                        this.applyRestrictionGroupRules(e.restrictions).forEach((t => {
                            t.queueId = e.queueId, o.TENCENT_MINOR_RESTRICTIONS.includes(t.restrictionCode) ? s || (s = !0, n.push(this.generateRestrictionForParty(t))) : n.push(this.generateRestrictionForParty(t))
                        })), Promise.all(n).then((e => {
                            t(e)
                        }))
                    }))
                },
                groupMissingTokenRestrictions: function(e) {
                    return this.get("eligibilitiesEntity").groupMissingTokenRestrictions(e)
                },
                applyRestrictionGroupRules: function(e) {
                    return this.get("eligibilitiesEntity").applyRestrictionGroupRules(e)
                },
                generateRestrictionForParty: function(e) {
                    return new Promise((t => {
                        const n = this.get("summoner");
                        let i;
                        if (e.summonerIds) {
                            const t = this.get("lobbies.memberNameHash"),
                                s = [];
                            e.summonerIds.forEach((e => {
                                const i = t[e];
                                i ? s.push(Promise.resolve({
                                    gameName: i,
                                    displayName: i
                                })) : s.push(n.getSummoner(e))
                            })), i = Promise.all(s)
                        } else i = Promise.resolve([]);
                        const o = this.get("queues").getQueueById(e.queueId);
                        let a = Promise.resolve([]);
                        return o && o.isRanked && (a = s.LeagueTierNames.getTiersForQueue(o.type)), Promise.all([i, a]).then((n => {
                            const s = n[0],
                                i = n[1];
                            t(this._generateMessageForParty(e, s, ", ", i))
                        }))
                    }))
                },
                _generateMessageForParty: function(e, t, n = "<br>", s) {
                    const l = e.restrictionCode || "QueueDisabled";
                    let r = e.restrictionArgs || {};
                    const c = [];
                    t.forEach((e => {
                        this.get("playerNames.isUsingAlias") ? c.push(e.gameName) : c.push(e.displayName)
                    })), r.players = c.join(n);
                    const m = this.get("queues"),
                        u = m.getQueueById(e.queueId);
                    let d = !1;
                    if ("PlayerMinLevelRestriction" === e.restrictionCode || "PlayerAvailableChampionRestriction" === e.restrictionCode || "PrerequisiteQueuesNotPlayedRestriction" === e.restrictionCode || "PlayerTimePlayedRestriction" === e.restrictionCode || "PlayerMinorRestriction" === e.restrictionCode || e.restrictionCode === o.TFT_NEW_PLAYER_RESTRICTION) {
                        const t = m.getMapModeInfo(u.mapId, u.gameMode);
                        if ("PlayerTimePlayedRestriction" === e.restrictionCode || "PlayerMinorRestriction" === e.restrictionCode) d = `game_select_queue_restriction_party_${l.toLowerCase()}`;
                        else if (e.restrictionCode === o.TFT_NEW_PLAYER_RESTRICTION) {
                            e.summonerIds.length > 1 || !e.summonerIds.includes(this.get("localSummonerId")) ? (d = "game_select_queue_restriction_party_tftnewplayerrestrictionveteran", r = {
                                ...r,
                                gameMode: t.gameModeShortName
                            }) : (d = "game_select_queue_restriction_party_tftnewplayerrestriction", r = {
                                gamesRemaining: r.gamesWonRemaining
                            })
                        } else if ("PrerequisiteQueuesNotPlayedRestriction" !== e.restrictionCode && t && t.isRGM) d = `game_select_queue_restriction_${l.toLowerCase()}_featured`;
                        else {
                            const t = m.getQueueTypeForQueue(e.queueId),
                                n = m.getPickTypeForQueue(e.queueId);
                            d = `game_select_queue_restriction_${l.toLowerCase()}_${t}_${n}`
                        }
                        this.get("tra").exists(d) || (d = `game_select_queue_restriction_${l.toLowerCase()}_generic`)
                    } else if ("QueueEntryNotEntitledRestriction" === e.restrictionCode) d = `game_select_queue_restriction_${l.toLowerCase()}_${e.queueId}`;
                    else if ("MissingToken" === e.restrictionCode) d = e.restrictionArgs.errorCodes.includes("3L") ? "game_select_queue_restriction_leagues_missingtoken" : `game_select_queue_restriction_${l.toLowerCase()}`;
                    else if ("TeamMaxSizeRestriction" === e.restrictionCode) d = "parties_premade_size_restriction";
                    else if ("PlayerRankSoloOnlyRestriction" === e.restrictionCode) {
                        const t = i.default.getLocInfoForPlayerRankSoloOnlyRestriction(e, s);
                        d = t.key, r = t.args
                    } else d = `game_select_queue_restriction_party_${l.toLowerCase()}`;
                    if (u && u.gameMode === a.CHERRY_GAME_MODE) {
                        const t = 8100;
                        if ("TeamDivisionRestriction" === e.restrictionCode) {
                            d = "game_select_queue_restriction_party_cherrygladiatorratingdelta", r = {
                                maxRatingDelta: 1e3,
                                ratingRestrictionThreshold: t
                            }
                        } else "TeamMaxSizeRestriction" === e.restrictionCode && (d = "game_select_queue_restriction_party_cherrygladiatorpartysize", r = {
                            ratingRestrictionThreshold: t
                        })
                    }
                    return this.get("tra.formatString")(d, r)
                },
                _arrayLength: function(e) {
                    return e && e.length || 0
                },
                getTeamQueueEligibilities: function(e) {
                    const t = this.get("eligibilities"),
                        n = this._arrayLength(e);
                    if (0 === n || !t) return s.Ember.A([]);
                    const i = [];
                    for (let s = 0; s < n; s++) {
                        const n = e[0];
                        if (t[n] && !t[n].eligible) {
                            const e = [],
                                s = this._arrayLength(t[n].restrictions);
                            for (let i = 0; i < s; i++) {
                                const s = t[n].restrictions[i];
                                this.get("eligibilitiesEntity").isTeamRestriction(s) && e.push(s)
                            }
                            e.length > 0 && (t[n].restrictions = e, i.push(t[n]))
                        }
                    }
                    return s.Ember.A(i)
                },
                getSoloEligibilities: function(e) {
                    const t = [];
                    if (e) {
                        let n = this.get("eligibilities");
                        if (n && n[e] && !n[e].eligible) {
                            n = n[e];
                            const s = [],
                                i = this._arrayLength(n.restrictions);
                            for (let e = 0; e < i; e++) {
                                const t = n.restrictions[e];
                                this.get("eligibilitiesEntity").isTeamRestriction(t) || s.push(t)
                            }
                            s.length > 0 && (n.restrictions = s, t.push(n))
                        }
                    }
                    return s.Ember.A(t)
                },
                restrictionsForQueue: function(e) {
                    return this.get("eligibilitiesEntity").restrictionsForQueue(e)
                },
                getSoloIneligibleQueues: function(e) {
                    const t = s.Ember.A();
                    return e && e.forEach((e => {
                        const n = this.getSoloEligibilities(e)[0];
                        n && !n.eligible && t.push(n)
                    })), t
                },
                isTutorialRestricted: function() {
                    const e = this.get("eligibilities");
                    if (e)
                        for (let t = 0; t < o.TUTORIAL_QUEUE_IDS.length; t++) {
                            const n = e[o.TUTORIAL_QUEUE_IDS[t]];
                            if (n && this.get("eligibilitiesEntity").hasMinorRestriction(n.restrictions)) return !0
                        }
                    return !1
                },
                getIneligibleQueues: function(e) {
                    const t = s.Ember.A(),
                        n = this.get("eligibilities");
                    return e && n && e.forEach((e => {
                        const s = n[e];
                        s && !s.eligible && t.push(s)
                    })), t
                },
                getQueueEligibilities: function(e) {
                    const t = s.Ember.A(),
                        n = this.get("eligibilities");
                    return l.default && 0 !== l.default.length && n ? (e && n && e.forEach((e => {
                        const s = n[e];
                        s && t.push(s)
                    })), t) : s.Ember.A()
                },
                isSummonerRestricted: function(e, t) {
                    if (!e) return !0;
                    if (e.eligible) return !1;
                    const n = e.restrictions || [],
                        s = n.length;
                    for (let e = 0; e < s; e++) {
                        if (-1 !== n[e].summonerIds.indexOf(t)) return !0
                    }
                    return !1
                }
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            const i = (0, s.emberDataBinding)({
                Ember: s.Ember,
                websocket: (0, s.getProvider)().getSocket(),
                logPrefix: "service:gameflow",
                basePaths: {
                    gameflow: "/lol-gameflow",
                    lobby: "/lol-lobby"
                },
                boundProperties: {
                    session: {
                        api: "gameflow",
                        path: "/v1/session"
                    }
                }
            });
            e.exports = s.Ember.Service.extend(i, {
                phase: s.Ember.computed.alias("session.phase"),
                isLobby: s.Ember.computed.equal("phase", "Lobby"),
                isMatchmaking: s.Ember.computed.equal("phase", "Matchmaking"),
                isReadyCheck: s.Ember.computed.equal("phase", "ReadyCheck"),
                isChampSelect: s.Ember.computed.equal("phase", "ChampSelect"),
                isPhasePostGame: s.Ember.computed("phase", (function() {
                    const e = this.get("phase");
                    return "WaitingForStats" === e || "PreEndOfGame" === e || "EndOfGame" === e
                })),
                currentQueueId: s.Ember.computed.alias("session.gameData.queue.id"),
                startBasicTutorial: function() {
                    return this.get("api.lobby").delete("/v2/lobby").catch((() => {})).then((() => this.get("api.gameflow").post("v1/basic-tutorial/start")))
                },
                startBattleTraining: function() {
                    return this.get("api.lobby").delete("/v2/lobby").catch((() => {})).then((() => this.get("api.gameflow").post("v1/battle-training/start")))
                },
                startTutorialFlow: function() {
                    (0, s.getProvider)().getOptional("rcp-fe-lol-new-player-experience").then((e => e.show()), (e => s.logger.error("Provider getOptional failure", e)))
                }
            })
        }, (e, t, n) => {
            "use strict";
            var s, i = n(1),
                o = (s = n(16)) && s.__esModule ? s : {
                    default: s
                };
            const {
                Promise: a
            } = i.bluebird, l = (0, i.emberDataBinding)({
                Ember: i.Ember,
                websocket: (0, i.getProvider)().getSocket(),
                logPrefix: "service:parties:settings",
                basePaths: {
                    settings: "/lol-settings",
                    party: "/lol-lobby"
                },
                boundProperties: {
                    localParties: {
                        api: "settings",
                        path: "/v1/local/lol-parties"
                    },
                    accountParties: {
                        api: "settings",
                        path: "/v1/account/lol-parties"
                    },
                    tft: {
                        api: "settings",
                        path: "/v2/account/LCUPreferences/lol-tft"
                    }
                }
            });
            e.exports = i.Ember.Service.extend(l, {
                platformConfigSingleton: o.default,
                uxSettings: null,
                _bannerAnimationsEnabled: !0,
                bannerAnimationsEnabled: i.Ember.computed.and("largeAreaAnimationsEnabled", "_bannerAnimationsEnabled"),
                largeAreaAnimationsEnabled: i.Ember.computed("uxSettings.largeAreaAnimationsEnabled", "platformConfigSingleton.potatoModeForced", (function() {
                    return !this.get("platformConfigSingleton.potatoModeForced") && this.get("uxSettings.largeAreaAnimationsEnabled")
                })),
                animationsEnabled: i.Ember.computed.alias("largeAreaAnimationsEnabled"),
                init: function() {
                    this._super(), this.set("uxSettingsListener", this.uxSettingsObserver.bind(this)), i.UXSettings.addObserver(this.get("uxSettingsListener")), this.getTFTNewPlayerData()
                },
                willDestroy: function() {
                    this._super(), i.UXSettings.removeObserver(this.get("uxSettingsListener"))
                },
                permanentHideAutofillModal: i.Ember.computed("localParties.permanentHideAutofillModal", {
                    get() {
                        return !!this.get("localParties.data.permanentHideAutofillModal")
                    },
                    set(e, t) {
                        return this.get("api.settings").patch("/v1/local/lol-parties", {
                            data: {
                                permanentHideAutofillModal: t
                            },
                            schemaVersion: 1
                        }).then((() => t))
                    }
                }),
                shouldHideAutofillModal: function() {
                    return this.sessionPromise().then((e => e ? a.resolve(!0) : this.permanentPromise().then((e => e && e.data && e.data.permanentHideAutofillModal ? a.resolve(!0) : a.resolve(!1)))))
                },
                sessionHideAutofillModal: i.Ember.computed({
                    get() {
                        return this.sessionPromise()
                    },
                    set() {
                        return this.get("api.party").put("/v1/autofill-displayed")
                    }
                }),
                permanentPromise: function() {
                    return this.get("api.settings").get("/v1/local/lol-parties")
                },
                sessionPromise: function() {
                    return this.get("api.party").get("/v1/autofill-displayed")
                },
                hideAutofillModal: i.Ember.computed.or("permanentHideAutofillModal", "sessionHideAutofillModal"),
                uxSettingsObserver: function(e) {
                    this.set("uxSettings", e)
                },
                hasSeenOpenPartyFirstExperience: i.Ember.computed("accountParties.data.hasSeenOpenPartyFirstExperience", {
                    get() {
                        return !!this.get("accountParties.data.hasSeenOpenPartyFirstExperience")
                    },
                    set(e, t) {
                        return this.get("api.settings").patch("/v1/account/lol-parties", {
                            data: {
                                hasSeenOpenPartyFirstExperience: t
                            },
                            schemaVersion: 1
                        }).then((() => t))
                    }
                }),
                iconOverride: i.Ember.computed("tft.data.iconOverride", {
                    get() {
                        return this.get("tft.data.iconOverride")
                    },
                    set(e, t) {
                        return this.get("api.settings").patch("/v2/account/LCUPreferences/lol-tft", {
                            data: {
                                iconOverride: t
                            },
                            schemaVersion: 1
                        }).then((() => t))
                    }
                }),
                getTFTNewPlayerData: function() {
                    this.get("tft.data.tftGamesPlayed") && this.sendNewPlayerDataToParties(this.get("tft.data.tftGamesPlayed"), this.get("tft.data.tftGamesWon"))
                },
                sendNewPlayerDataToParties: function(e = 0, t = 0) {
                    this.get("api.party").post("/v1/tft/newPlayer", {
                        tftGamesPlayed: e,
                        tftGamesWon: t
                    })
                }
            })
        }, (e, t, n) => {
            "use strict";
            var s, i = n(1),
                o = n(41),
                a = (s = n(16)) && s.__esModule ? s : {
                    default: s
                },
                l = n(15);
            const r = (0, i.emberDataBinding)({
                Ember: i.Ember,
                websocket: (0, i.getProvider)().getSocket(),
                logPrefix: "service:custom-games",
                basePaths: {
                    gameQueues: "/lol-game-queues",
                    lobby: "/lol-lobby",
                    summoner: "/lol-summoner",
                    suggestedPlayers: "/lol-suggested-players",
                    chat: "/lol-chat",
                    platformConfig: "/lol-platform-config",
                    sanitizer: "/sanitizer",
                    gameData: "/lol-game-data",
                    gameFlow: "/lol-gameflow",
                    spectator: "/lol-spectator"
                },
                boundProperties: {
                    queues: {
                        api: "gameQueues",
                        path: "/v1/custom"
                    },
                    nonDefaultQueues: {
                        api: "gameQueues",
                        path: "/v1/custom-non-default"
                    },
                    lobby: {
                        api: "lobby",
                        path: "/v2/lobby"
                    },
                    customBotsEnabled: {
                        api: "lobby",
                        path: "/v2/lobby/custom/bots-enabled"
                    },
                    customAvailableBots: {
                        api: "lobby",
                        path: "/v2/lobby/custom/available-bots"
                    },
                    currentSummoner: {
                        api: "summoner",
                        path: "/v1/current-summoner"
                    },
                    chatParticipants: {
                        api: "chat",
                        path: "/v1/conversations/{{chatConversationId}}/participants"
                    },
                    clientSystemStatesJMX: {
                        api: "platformConfig",
                        path: "/v1/namespaces/ClientSystemStates"
                    },
                    gameflowSession: {
                        api: "gameFlow",
                        path: "/v1/session"
                    },
                    championSummary: {
                        api: "gameData",
                        path: "/assets/v1/champion-summary.json"
                    },
                    spectatorV3Config: {
                        api: "spectator",
                        path: "/v1/spectate/config"
                    }
                }
            });
            e.exports = i.Ember.Service.extend(r, {
                spectatorV3Enabled: i.Ember.computed.alias("spectatorV3Config.isEnabled"),
                spectatorV3DelayConfigurable: i.Ember.computed.alias("spectatorV3Config.isSpectatorDelayConfigurable"),
                nameError: null,
                isSwitchingTeamsOrSpectating: !1,
                preventTeamChanges: !1,
                platformConfigSingleton: a.default,
                playerNames: i.playerNames,
                playerInputs: i.Ember.Object.create({
                    name: "",
                    subcategoryIndex: 0,
                    mutatorId: 1,
                    numPlayersPerTeam: 5,
                    gameServerRegion: "",
                    password: "",
                    spectatorType: "AllAllowed",
                    spectatorDelay: "AddDelay"
                }),
                availability: i.Ember.computed.alias("queues.queueAvailability"),
                available: i.Ember.computed.equal("availability", "Available"),
                shownCustomSubcategories: i.Ember.computed.alias("queues.subcategories"),
                subcategories: i.Ember.computed.union("queues.subcategories", "nonDefaultQueues.subcategories"),
                spectatorTypes: i.Ember.computed.alias("queues.spectatorPolicies"),
                customSpectatorSlotLimit: i.Ember.computed.alias("queues.spectatorSlotLimit"),
                lobbySpectatorSlotLimit: i.Ember.computed("lobby.gameConfig.maxLobbySize", "lobby.gameConfig.maxTeamSize", (function() {
                    return this.get("lobby.gameConfig.maxLobbySize") - this.get("lobby.gameConfig.maxTeamSize")
                })),
                spectatorSlotLimit: i.Ember.computed("customSpectatorSlotLimit", "lobbySpectatorSlotLimit", "isCustom", (function() {
                    return this.get("isCustom") ? this.get("customSpectatorSlotLimit") : this.get("lobbySpectatorSlotLimit")
                })),
                gameName: i.Ember.computed.alias("lobby.gameConfig.customLobbyName"),
                teamSize: i.Ember.computed.alias("lobby.gameConfig.maxTeamSize"),
                isCustomUI: i.Ember.computed.or("isCustom", "isSpectatorCustom"),
                isSpectatorCustom: i.Ember.computed("lobby.gameConfig.customSpectatorPolicy", (function() {
                    const e = this.get("lobby.gameConfig.customSpectatorPolicy");
                    return e && e !== o.CUSTOM_GAME_SPECTATOR_VALUES.NotAllowed
                })),
                isCustom: i.Ember.computed.alias("lobby.gameConfig.isCustom"),
                mutatorName: i.Ember.computed.alias("lobby.gameConfig.customMutatorName"),
                spectatorPolicy: i.Ember.computed.alias("lobby.gameConfig.customSpectatorPolicy"),
                rewardsDisabledReasons: i.Ember.computed.alias("lobby.gameConfig.customRewardsDisabledReasons"),
                isLobbyFull: i.Ember.computed.alias("lobby.gameConfig.isLobbyFull"),
                isTFT: i.Ember.computed.equal("lobby.gameConfig.gameMode", l.GAME_MODES.TFT),
                team100: i.Ember.computed.alias("lobby.gameConfig.customTeam100"),
                team200: i.Ember.computed.alias("lobby.gameConfig.customTeam200"),
                customBotsDisabled: i.Ember.computed.not("customBotsEnabled"),
                minPlayers: i.Ember.computed.alias("clientSystemStatesJMX.minNumPlayersForPracticeGame"),
                aggressiveScanning: i.Ember.computed.alias("platformConfigSingleton.aggressiveScanning"),
                currentPlayer: i.Ember.computed.alias("lobby.localMember"),
                currentPlayerIsSpectator: i.Ember.computed.equal("currentPlayersTeam", "spectator"),
                localSummonerName: i.Ember.computed.alias("currentSummoner.displayName"),
                localGameName: i.Ember.computed.alias("currentSummoner.gameName"),
                localSummonerLevel: i.Ember.computed.alias("currentSummoner.summonerLevel"),
                haveNameError: i.Ember.computed.notEmpty("nameError"),
                gameMapMinPlayers: i.Ember.computed("clientSystemStatesJMX.gameMapEnabledDTOList", (function() {
                    const e = this.get("clientSystemStatesJMX.gameMapEnabledDTOList");
                    return e ? i.Ember.A(e) : i.Ember.A([])
                })),
                selectedSubcategory: i.Ember.computed("playerInputs.subcategoryIndex", "subcategories.[]", (function() {
                    const e = this.get("subcategories");
                    if (!e || e.length < 1) return null;
                    return e[this.get("playerInputs.subcategoryIndex")]
                })),
                subcategoriesObserver: i.Ember.computed("subcategories.@each.queueAvailability", (function() {
                    const e = this.get("subcategories");
                    if (!e || e.length < 1) return;
                    const t = e[this.get("playerInputs.subcategoryIndex")];
                    t && "available" === o.GAME_AVAILABILITY_TYPES[t.get("queueAvailability")] || this.resetSelectedSubcategory()
                })),
                gameServerRegions: i.Ember.computed.alias("queues.gameServerRegions"),
                updatePlayerInputServerRegionObserver: i.Ember.on("init", i.Ember.observer("queues.gameServerRegions.[]", (function() {
                    i.Ember.run.once(this, (() => {
                        this._updatePlayerSelectedRegion(this.get("queues.gameServerRegions"))
                    }))
                }))),
                spectators: i.Ember.computed("lobby.gameConfig.customSpectators.[]", "lobby.gameConfig.customSpectators.@each.summonerId", (function() {
                    return this.get("lobby.gameConfig.customSpectators") || i.Ember.A()
                })),
                currentNumPlayers: i.Ember.computed("team100.[]", "team200.[]", (function() {
                    return this.get("team100").filterBy("isBot", !1).length + this.get("team200").filterBy("isBot", !1).length
                })),
                currentPlayersTeam: i.Ember.computed("currentPlayer", "team100", "team100.[]", "team100.@each.summonerId", "team200", "team200.[]", "team200.@each.summonerId", "spectators", (function() {
                    const e = this.get("currentPlayer"),
                        t = this.get("team100"),
                        n = this.get("team200"),
                        s = this.get("spectators");
                    return e && e.summonerId ? this._isOnTeam(e, t) ? 1 : this._isOnTeam(e, n) ? 2 : this._isOnTeam(e, s) ? "spectator" : 0 : 0
                })),
                gameflowPhaseObserver: i.Ember.computed("gameflowSession.phase", (function() {
                    "Lobby" === this.get("gameflowSession.phase") && this.set("preventTeamChanges", !1)
                })),
                availableBots: i.Ember.computed("customAvailableBots", (function() {
                    const e = this.get("customAvailableBots"),
                        t = e ? i.Ember.A(e) : i.Ember.A();
                    return t.forEach((e => {
                        e.botDifficulties = e.botDifficulties ? i.Ember.A(e.botDifficulties) : i.Ember.A()
                    })), t
                })),
                availableBotDetails: i.Ember.computed("availableBots", "availableBots.[]", "championSummary", (function() {
                    const e = i.Ember.A(),
                        t = this.get("championSummary");
                    if (t) return this.get("availableBots").forEach((n => {
                        let s = "";
                        const o = t.findBy("id", n.id);
                        o && o.squarePortraitPath && (s = o.squarePortraitPath);
                        const a = {
                            id: n.id,
                            name: n.name,
                            botDifficulties: i.Ember.A(),
                            selected: null,
                            botIconUrl: s
                        };
                        n.botDifficulties && n.botDifficulties.forEach((e => {
                            const t = this.getDifficultyDisplayName(e);
                            a.botDifficulties.pushObject({
                                difficulty: e,
                                difficultyDisplayName: t
                            })
                        })), e.pushObject(a)
                    })), e
                })),
                defaultGameName: i.Ember.computed("tra.ready", "localSummonerName", "localGameName", (function() {
                    const e = this.get("localGameName"),
                        t = this.get("localSummonerName"),
                        n = this.get("playerNames").isUsingAlias ? e : t;
                    if (!n) return "";
                    const s = this.get("tra.formatString")("custom_game_setup_name_default", {
                        summonerName: n
                    });
                    return this.set("playerInputs.name", s), s
                })),
                gameServerRegionOptions: i.Ember.computed("playerInputs.gameServerRegion", "gameServerRegions", "gameServerRegions.[]", (function() {
                    const e = this.get("gameServerRegions");
                    if (!e || !e.length) return i.Ember.A([]);
                    const t = this.get("playerInputs.gameServerRegion"),
                        n = [];
                    for (let s = 0; s < e.length; s++) {
                        const i = e[s] === t;
                        n.push({
                            value: e[s],
                            isSelected: i
                        })
                    }
                    return i.Ember.A(n)
                })),
                getRewardsDisabledReasons: function() {
                    const e = this.get("rewardsDisabledReasons");
                    return e && e instanceof Array ? e : this.areTeamsImbalanced() ? ["UNBALANCED_TEAMS"] : []
                },
                _isOnTeam: function(e, t) {
                    if (e && t && t.length) {
                        if (t.findBy("summonerId", e.summonerId)) return !0
                    }
                    return !1
                },
                getDifficultyDisplayName: function(e) {
                    return this.get(`tra.custom_game_bot_skill_level_${e.toLowerCase()}`)
                },
                areTeamsImbalanced: function() {
                    return this.get("team100.length") !== this.get("team200.length")
                },
                getSubCategoryIndex: function(e, t) {
                    const n = this.get("subcategories");
                    for (let s = 0; s < n.length; s++) {
                        const i = n[s];
                        if (i.get("mapId") === e && i.get("gameMode") === t) return s
                    }
                    return -1
                },
                resetSelectedSubcategory: function() {
                    const e = this.get("subcategories");
                    for (let t = 0; t < e.length; t++) {
                        const n = e[t].get("queueAvailability");
                        if ("available" === o.GAME_AVAILABILITY_TYPES[n]) {
                            this.selectSubcategory(t);
                            break
                        }
                    }
                },
                selectSubcategoryByMapMode: function(e, t) {
                    const n = this.getSubCategoryIndex(e, t);
                    n >= 0 && this.selectSubcategory(n)
                },
                subCategoryExists: function(e, t) {
                    return this.getSubCategoryIndex(e, t) >= 0
                },
                selectSubcategory: function(e) {
                    const t = this.get("subcategories"),
                        n = t[e];
                    if (!n) return !1;
                    const s = t[this.get("playerInputs.subcategoryIndex")],
                        i = this.get("playerInputs.numPlayersPerTeam"),
                        o = s.get("numPlayersPerTeam"),
                        a = n.get("numPlayersPerTeam");
                    (i === o || i > a) && this.set("playerInputs.numPlayersPerTeam", a);
                    const l = n.get("mutators"),
                        r = this.get("playerInputs.mutatorId");
                    if (l.length > 0 && !l.findBy("id", r)) {
                        const e = l[0].get("id");
                        this.set("playerInputs.mutatorId", e), this.set("playerInputs.queueId", this.getQueueId(e))
                    }
                    return this.set("playerInputs.subcategoryIndex", e), !0
                },
                getQueueId: function(e) {
                    return l.TFT_CUSTOM_QUEUE_IDS[e] || l.INVALID_QUEUE_ID
                },
                generateCustomGamePayload: function() {
                    const e = this.get("playerInputs.subcategoryIndex"),
                        t = this.get("subcategories");
                    if (!t[e]) return i.logger.error(`Tried to create custom game with invalid subcategory index: ${e}`), !1;
                    const n = t[e];
                    return this._gameIsPracticeTool(n.get("gameMode")) ? this._generatePracticeToolPayload(n) : this._generateCustomGamePayload(n)
                },
                _generateCustomGamePayload: function(e) {
                    let t = this.get("playerInputs.password").trim();
                    "" === t && (t = null);
                    const n = this.get("playerInputs.queueId") || l.INVALID_QUEUE_ID;
                    return {
                        customGameLobby: {
                            configuration: {
                                gameMode: e.get("gameMode"),
                                gameMutator: "",
                                gameServerRegion: this.get("playerInputs.gameServerRegion"),
                                mapId: e.get("mapId"),
                                mutators: {
                                    id: this.get("playerInputs.mutatorId")
                                },
                                spectatorPolicy: this.get("playerInputs.spectatorType"),
                                spectatorDelayEnabled: "AddDelay" === this.get("playerInputs.spectatorDelay"),
                                teamSize: this.get("playerInputs.numPlayersPerTeam")
                            },
                            lobbyName: this.get("playerInputs.name") || this.get("defaultGameName"),
                            lobbyPassword: t
                        },
                        isCustom: n === l.INVALID_QUEUE_ID,
                        queueId: n
                    }
                },
                _generatePracticeToolPayload: function() {
                    return {
                        customGameLobby: {
                            configuration: {
                                gameMode: "PRACTICETOOL",
                                gameMutator: "",
                                gameServerRegion: this.get("playerInputs.gameServerRegion"),
                                mapId: 11,
                                mutators: {
                                    id: 1
                                },
                                spectatorPolicy: "AllAllowed",
                                teamSize: 1
                            },
                            lobbyName: this.get("defaultGameName"),
                            lobbyPassword: null
                        },
                        isCustom: !0
                    }
                },
                _gameIsPracticeTool: function(e) {
                    return "PRACTICETOOL" === e
                },
                changeQueueToCustom: function() {
                    return new Promise(((e, t) => {
                        if (this.get("nameError")) return t("nameError");
                        const n = this.generateCustomGamePayload();
                        if (!1 === n) return t();
                        const s = "v2/lobby";
                        i.logger.trace(`Creating custom-game using /lol-lobby/${s} endpoint: ${JSON.stringify(n)}`), this.get("api.lobby").post(s, n).then((() => {
                            e()
                        }), (e => {
                            const n = this.getErrorTypeFromCreateResponse(e);
                            t(n)
                        }))
                    }))
                },
                getErrorTypeFromCreateResponse: function(e) {
                    let t = 500;
                    e && e.status && (t = e.status);
                    const n = o.CUSTOM_GAME_ERROR_CODES[t] ? o.CUSTOM_GAME_ERROR_CODES[t] : "UnknownException";
                    return i.logger.error("Creating custom game received error:", {
                        errorType: n,
                        statusCode: t,
                        response: e
                    }), "GameNameNotUniqueException" === n && this.set("nameError", "duplicate"), "InvalidCustomGameNameException" === n && this.set("nameError", "invalid"), n
                },
                enterChampSelect: function() {
                    this.set("preventTeamChanges", !0);
                    return this.get("api.lobby").post("/v1/lobby/custom/start-champ-select")
                },
                teamToString: function(e) {
                    let t = "";
                    return 1 === e || "100" === e ? t = "one" : 2 !== e && "200" !== e || (t = "two"), t
                },
                teamToStringQueue: function(e) {
                    switch (e) {
                        case 1:
                        case "100":
                            return "TEAM1";
                        case 2:
                        case "200":
                            return "TEAM2";
                        default:
                            return ""
                    }
                },
                teamToStringId: function(e) {
                    let t = "";
                    return 1 === e || "one" === e ? t = "100" : 2 !== e && "two" !== e || (t = "200"), t
                },
                switchTeams: function(e) {
                    this.set("isSwitchingTeamsOrSpectating", !0);
                    const t = this.get("isCustom"),
                        n = t ? this.teamToString(e) : this.teamToStringQueue(e);
                    if (i.logger.trace(`Current player switching to team ${n}`), 0 !== n.length) {
                        const e = t ? `/v1/lobby/custom/switch-teams?team=${n}` : `/v2/lobby/team/${n.toUpperCase()}`;
                        return this.get("api.lobby").post(e).then((() => {
                            this.set("isSwitchingTeamsOrSpectating", !1)
                        })).catch((e => {
                            e.text && i.logger.error("an error has occurred when switching teams", JSON.parse(e.text)), this.set("isSwitchingTeamsOrSpectating", !1)
                        }))
                    }
                },
                joinSpectators: function() {
                    this.set("isSwitchingTeamsOrSpectating", !0), i.logger.trace("Current player switching to spectator");
                    const e = this.get("isCustom") ? "/v1/lobby/custom/switch-teams?team=spectator" : "/v2/lobby/team/SPECTATOR";
                    return this.get("api.lobby").post(e).then((() => {
                        this.set("isSwitchingTeamsOrSpectating", !1)
                    })).catch((e => {
                        e.text && i.logger.error("an error has occurred when moving to spectator", JSON.parse(e.text)), this.set("isSwitchingTeamsOrSpectating", !1)
                    }))
                },
                findMinPlayersForMap: function(e) {
                    let t = 1;
                    const n = this.get("gameMapMinPlayers");
                    if (e && n && n.length > 0) {
                        const s = n.findBy("gameMapId", e);
                        s && s.minPlayers && (t = s.minPlayers)
                    }
                    return t
                },
                addBot: function(e, t, n) {
                    const s = this.teamToStringId(e);
                    if (0 !== s.length) {
                        const e = n || "NONE";
                        this._createTempBot(s, t, e);
                        const o = {
                            botDifficulty: e,
                            championId: t,
                            teamId: s
                        };
                        return this.get("api.lobby").post("/v1/lobby/custom/bots", o).catch((e => {
                            e.text && i.logger.error("an error has occurred when adding a bot", JSON.parse(e.text)), this._removeTempBots()
                        }))
                    }
                },
                changeBot: function(e, t, n, s) {
                    const o = `/v1/lobby/custom/bots/${e}`,
                        a = this.teamToStringId(t);
                    if (0 !== a.length) {
                        const t = s || "NONE";
                        this._removeBotByBotId(e), this._createTempBot(a, n, t);
                        const l = {
                            botDifficulty: t,
                            championId: n,
                            teamId: a
                        };
                        return this.get("api.lobby").post(o, l).catch((e => {
                            e.text && i.logger.error("an error has occurred when changing a bot", JSON.parse(e.text)), this._removeTempBots()
                        }))
                    }
                },
                removeBot: function(e) {
                    this._removeBotByBotId(e);
                    const t = `/v1/lobby/custom/bots/${e}`;
                    return this.get("api.lobby").delete(t).catch((e => {
                        e.text && i.logger.error("an error has occurred when removing a bot", JSON.parse(e.text))
                    }))
                },
                _createTempBot: function(e, t, n) {
                    const s = i.Ember.Object.create({
                        summonerId: -1,
                        botChampionId: t,
                        botDifficulty: n,
                        isBot: !0
                    });
                    "100" === e ? this.get("team100").addObject(s) : this.get("team200").addObject(s)
                },
                _removeBotByBotId: function(e) {
                    const t = ["team100", "team200"];
                    for (let n = 0; n < t.length; n++) {
                        const s = this.get(t[n]),
                            i = s.findBy("botId", e);
                        if (i) return void s.removeObject(i)
                    }
                },
                _removeTempBots: function() {
                    const e = ["team100", "team200"];
                    for (let t = 0; t < e.length; t++) {
                        const n = this.get(e[t]);
                        n.forEach((e => {
                            -1 === e.get("summonerId") && e.get("isBot") && n.removeObject(e)
                        }))
                    }
                },
                getSubcategoryMinLevel: function(e, t) {
                    const n = this.getSubCategoryIndex(e, t);
                    if (n >= 0) {
                        const e = this.get("subcategories")[n];
                        if (e) return e.get("minLevel")
                    }
                    return 1
                },
                _updatePlayerSelectedRegion: function(e) {
                    const t = this.get("playerInputs.gameServerRegion");
                    t && (e && e.some((function(e) {
                        return e === t
                    })) || this.set("playerInputs.gameServerRegion", "")), !this.get("playerInputs.gameServerRegion") && e && e.length && this.set("playerInputs.gameServerRegion", e[0])
                }
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1),
                i = a(n(118)),
                o = a(n(119));

            function a(e) {
                return e && e.__esModule ? e : {
                    default: e
                }
            }
            const l = (0, s.emberDataBinding)({
                Ember: s.Ember,
                websocket: (0, s.getProvider)().getSocket(),
                logPrefix: "service:custom-game-list",
                basePaths: {
                    lobby: "/lol-lobby"
                },
                boundProperties: {
                    tournamentShortCodesEnabled: "/lol-platform-config/v1/namespaces/ClientSystemStates/tournamentShortCodesEnabled"
                }
            });
            e.exports = s.Ember.Service.extend(s.Ember.Evented, l, {
                selectedCustomGame: null,
                modalManager: s.UIKit.getModalManager(),
                customGameListDataBindingSetup: !1,
                customGames: s.Ember.A(),
                noSelectedGame: s.Ember.computed.empty("selectedCustomGame"),
                isSelectedCustomGameFull: s.Ember.computed("selectedCustomGame", "selectedCustomGame.filledPlayerSlots", "selectedCustomGame.maxPlayerSlots", (function() {
                    const e = this.get("selectedCustomGame.maxPlayerSlots");
                    return this.get("selectedCustomGame.filledPlayerSlots") >= e
                })),
                isSelectedCustomGameSpectatorsFull: s.Ember.computed("selectedCustomGame", "selectedCustomGame.filledSpectatorSlots", "selectedCustomGame.maxSpectatorSlots", (function() {
                    const e = this.get("selectedCustomGame.maxSpectatorSlots");
                    return this.get("selectedCustomGame.filledSpectatorSlots") >= e
                })),
                confirmButtonText: s.Ember.computed("selectedCustomGame", "selectedCustomGame.filledPlayerSlots", "selectedCustomGame.maxPlayerSlots", "selectedCustomGame.filledSpectatorSlots", "selectedCustomGame.maxSpectatorSlots", "tra.custom_game_join", "tra.custom_game_spectate", (function() {
                    const e = !this.get("selectedCustomGame"),
                        t = !this.get("isSelectedCustomGameFull");
                    return e || t || this.get("isSelectedCustomGameSpectatorsFull") ? this.get("tra.custom_game_join") : this.get("tra.custom_game_spectate")
                })),
                confirmButtonEnabled: s.Ember.computed.bool("selectedCustomGame"),
                joinCustomGame: function(e) {
                    let t;
                    if (e) {
                        if (e.id || e.partyId) return t = e.hasPassword ? this.promptPasswordModal() : Promise.resolve(), t.then((t => {
                            const n = {
                                asSpectator: !!e.spectator
                            };
                            t && (n.password = t), s.logger.warning(`JOINING CUSTOM GAME FROM LIST (${e.id?e.id:e.partyId})`);
                            const o = e.partyId ? `/v2/party/${e.partyId}/join` : `/v1/custom-games/${e.id}/join`;
                            return (0, s.dataBinding)("lol-lobby").post(o, n).catch((e => {
                                const t = [401, 403, 404, 432, 438, 500].includes(e.status) ? this.get(`tra.custom_game_list_error_${e.status}`) : this.get("tra.custom_game_list_error_generic");
                                return i.default.promptJoinErrorModal(t), Promise.reject(e)
                            }))
                        }));
                        s.logger.error("joinCustomGame options needs to have an id defined")
                    } else s.logger.error("joinCustomGame options not defined")
                },
                createCustomListBind: function() {
                    const e = {
                        objectTypes: {
                            "[]": o.default
                        },
                        root: this
                    };
                    this.dataBindProperty("lobby", "/v1/custom-games", "customGames", e), this.set("customGameListDataBindingSetup", !0)
                },
                refreshGameList: function() {
                    return !1 === this.get("customGameListDataBindingSetup") ? (this.createCustomListBind(), Promise.resolve()) : (0, s.dataBinding)("lol-lobby").post("/v1/custom-games/refresh").catch((function() {
                        return Promise.reject()
                    }))
                },
                joinWithTournamentCode: function(e) {
                    if (!e) return Promise.reject(new Error("No tournament code provided to joinWithTournamentCode"));
                    return /[A-Z]{2,4}[0-9a-fA-F]{5}-[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/g.test(e) ? (0, s.dataBinding)("lol-lobby").post(`/v1/tournaments/${e}/join`).catch((function(e) {
                        return Promise.reject(e)
                    })) : Promise.reject(new Error("Badly formatted tournament code"))
                },
                triggerShowParty: function() {
                    this.trigger("showParty")
                },
                promptPasswordModal: function() {
                    const e = document.createElement("lol-uikit-flat-input"),
                        t = document.createElement("lol-uikit-content-block");
                    e.innerHTML = '<input type="password" id="custom-game-join-password-input"></input>', t.setAttribute("type", "dialog-small"), t.innerHTML = `<h4>${this.get("tra.custom_game_list_required_password_header")}</h4>\n       <p>${this.get("tra.custom_game_list_required_password_text")}</p>\n       <hr class="heading-spacer">`, t.appendChild(e);
                    const n = s.UIKit.getModalManager().add({
                            type: "DialogConfirm",
                            data: {
                                contents: t,
                                acceptText: this.get("tra.custom_game_list_required_password_join"),
                                declineText: this.get("tra.custom_game_list_required_password_cancel"),
                                closeButton: !1
                            }
                        }),
                        i = n.domNode.querySelector("#custom-game-join-password-input");
                    return i && i.focus(), n.acceptPromise.then((function() {
                        const t = e.querySelector("input[id=custom-game-join-password-input]").value;
                        return Promise.resolve(t)
                    }))
                }
            })
        }, (e, t, n) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.default = void 0;
            var s = n(1),
                i = {
                    promptPasswordModal: function() {
                        const e = document.createElement("lol-uikit-flat-input"),
                            t = document.createElement("lol-uikit-content-block");
                        e.innerHTML = '<input type="password" id="custom-game-join-password-input"></input>', t.setAttribute("type", "dialog-small"), t.innerHTML = `<h4>${s.tra.get("custom_game_list_required_password_header")}</h4>\n       <p>${s.tra.get("custom_game_list_required_password_text")}</p>\n       <hr class="heading-spacer">`, t.appendChild(e);
                        const n = s.UIKit.getModalManager().add({
                                type: "DialogConfirm",
                                data: {
                                    contents: t,
                                    acceptText: s.tra.get("custom_game_list_required_password_join"),
                                    declineText: s.tra.get("custom_game_list_required_password_cancel"),
                                    closeButton: !1
                                }
                            }),
                            i = n.domNode.querySelector("#custom-game-join-password-input");
                        return i && i.focus(), n.acceptPromise.then((function() {
                            const t = e.querySelector("input[id=custom-game-join-password-input]").value;
                            return Promise.resolve(t)
                        }))
                    },
                    promptJoinErrorModal: function(e) {
                        const t = s.tra.get("custom_game_list_error_title"),
                            n = s.tra.get("custom_game_list_error_ok_button"),
                            i = s.UIKit.getTemplateHelper().contentBlockDialog(t, e, "dialog-medium", "rcp-fe-lol-lobby-join-custom-game-error");
                        return s.UIKit.getModalManager().add({
                            type: "DialogAlert",
                            data: {
                                contents: i,
                                okText: n
                            }
                        })
                    }
                };
            t.default = i
        }, (e, t, n) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.default = void 0;
            var s = n(1);
            var i = s.Ember.Object.extend({
                mapName: s.Ember.computed("mapId", "root.tra.game_select_map_name_11", "root.tra.game_select_map_name_10", "root.tra.game_select_map_name_12", "root.tra.game_select_map_name_8", (function() {
                    const e = this.get("mapId");
                    return this.get(`root.tra.game_select_map_name_${e}`)
                }))
            });
            t.default = i
        }, (e, t, n) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.default = void 0;
            var s = n(1),
                i = s.Ember.Service.extend({
                    isConnected: s.Navigation.isConnectedToServer,
                    init() {
                        this._super(...arguments), s.Navigation.subscribe("isConnectedToServer", (e => {
                            this.set("isConnected", e)
                        }))
                    }
                });
            t.default = i
        }, (e, t, n) => {
            "use strict";
            var s = n(1),
                i = a(n(122)),
                o = a(n(75));

            function a(e) {
                return e && e.__esModule ? e : {
                    default: e
                }
            }
            e.exports = s.Ember.Service.extend(i.default, {
                lobbiesService: s.Ember.inject.service("lobbies"),
                summonerService: s.Ember.inject.service("summoner"),
                chatService: s.Ember.inject.service("chat"),
                currentPlayerCanInvite: s.Ember.computed.alias("lobbiesService.currentPlayerCanInvite"),
                isLobbyFull: s.Ember.computed.alias("lobbiesService.isLobbyFull"),
                isCustomUI: s.Ember.computed.alias("lobbiesService.isCustomUI"),
                setupCallbacks: s.Ember.on("init", (function() {
                    o.default._registerCanInviteCallback(this.canInvitePlayer.bind(this)), o.default._registerInviteCallback(this.invitePlayer.bind(this))
                })),
                canInvitePlayer: function(e) {
                    return !(!e || !this.get("currentPlayerCanInvite")) && ((!this.get("isLobbyFull") || !this.get("isCustomUI")) && !this.playerInParty(e))
                },
                invitePlayer: function(e, t = null) {
                    return new Promise(((n, s) => {
                        if (!this.get("currentPlayerCanInvite")) return void s(new Error("CANNOT_INVITE"));
                        let i;
                        this.playerInParty(e) && s(new Error("PLAYER_IN_PARTY")), i = t ? Promise.resolve({
                            displayName: t
                        }) : this.get("summonerService").getSummoner(e), i.then((n => (t = n.displayName, this.checkIfPlayerAvailable(e, t)))).then((() => this.get("lobbiesService").invitePlayer(e))).then((() => {
                            n()
                        })).catch((() => {
                            s(new Error("COULD_NOT_INVITE"))
                        }))
                    }))
                },
                playerInParty: function(e) {
                    let t = !1;
                    if (e) {
                        const n = this.get("lobbiesService.currentPartyMembers");
                        if (!n || !n.length) return !1;
                        t = !!n.find((t => t.summonerId === e))
                    }
                    return t
                },
                checkIfPlayerAvailable: function(e, t) {
                    return new Promise(((n, s) => {
                        e || s();
                        const i = this.get("chatService");
                        if (!i.isFriend(e)) return void n();
                        const o = i.getFriend(e);
                        o && i.me && i.me.product === o.product && i.me.platformId === o.platformId && -1 !== ["chat", "away"].indexOf(o.availability) ? n() : (this.showFriendNotAvailableToast(t), s())
                    }))
                },
                showFriendNotAvailableToast: function(e) {
                    const t = this.get("tra.formatString")("parties_player_ineligible_to_join", {
                        player: e
                    });
                    this.showToast(t, "invite-eligibility")
                }
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            e.exports = s.Ember.Mixin.create({
                ModalManager: s.UIKit.getModalManager(),
                ToastManager: s.UIKit.getToastManager(),
                TemplateHelper: s.UIKit.getTemplateHelper(),
                showInviteModal: function() {
                    const e = s.ComponentFactory.create("LobbyInviteDialog"),
                        {
                            domNode: t
                        } = e,
                        n = this.get("ModalManager").add({
                            type: "DialogConfirm",
                            data: {
                                contents: t,
                                acceptText: this.get("tra.invite_dialog_send_invites_button"),
                                closeButton: !0
                            }
                        });
                    return t.addEventListener("disableacceptbutton", (e => {
                        n.disableAcceptButton(), e.stopPropagation()
                    })), t.addEventListener("enableacceptbutton", (e => {
                        n.enableAcceptButton(), e.stopPropagation()
                    })), n.acceptPromise.then((() => {
                        t.querySelector(".lobby-invite-dialog").dispatchEvent(new Event("sendInvitesClicked"))
                    }), (() => {
                        t.querySelector(".lobby-invite-dialog").dispatchEvent(new Event("closeModalClicked"))
                    })).catch((() => {})), n
                },
                showGameSelectErrorModal: function(e, t, n) {
                    const s = this.get("tra.parties_game_select_error_modal_ok"),
                        i = this.get("ModalManager").add({
                            type: "DialogAlert",
                            data: {
                                contents: e,
                                okText: s
                            }
                        });
                    return i && i.domNode && n && i.domNode.classList.add(n), t && i.okPromise.then((() => {
                        t()
                    })), i
                },
                showModal: function(e) {
                    const t = this.get("ModalManager").add(e);
                    return s.Ember.get(t, "data.onOk") && t.okPromise ? t.okPromise.then(t.data.onOk) : t.acceptPromise && t.acceptPromise.then((() => {
                        s.Ember.get(t, "data.onAccept") && t.data.onAccept()
                    })).catch((() => {
                        s.Ember.get(t, "data.onDecline") && t.data.onDecline()
                    })), t
                },
                removeModal: function(e) {
                    this.get("ModalManager").remove(e)
                },
                showToast: function(e, t) {
                    const n = this.get("TemplateHelper").contentBlockNotification(e);
                    return t && n.classList.add(t), this.get("ToastManager").add({
                        type: "DialogToast",
                        data: {
                            contents: n
                        }
                    })
                }
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1),
                i = n(15),
                o = n(109),
                a = n(124),
                l = n(125);
            const r = "/lol-settings/v2/ready",
                c = "/lol-settings/v1/account/champ-select",
                m = {
                    schemaVersion: 1,
                    data: {
                        skins: {},
                        spells: {}
                    }
                },
                u = "/lol-settings/v2/account/LCUPreferences/lol-quick-play",
                d = {
                    schemaVersion: 1,
                    data: {
                        slots: []
                    }
                },
                p = [420, 440, 400, 430, 870, 850, 840, 830],
                h = "owned",
                g = "rental",
                b = "loyalty",
                f = "free-to-play",
                y = "BUNDLES";
            e.exports = s.Ember.Service.extend({
                init: function() {
                    this._super(...arguments), this.set("championByChampId", new Map), this.set("perksSelections", []), this._binding = s.dataBinding.bindTo((0, s.getProvider)().getSocket()), this.getGameDataSummonerSpells(), this._binding.observe("/lol-summoner/v1/current-summoner", this, this.handleCurrentSummoner), this._binding.observe("/lol-lobby/v2/lobby", this, this.handleLobby), this._binding.observe("/lol-platform-config/v1/namespaces/DisabledChampions", this, this.handleDisabledChampions), this._binding.observe("/lol-gameflow/v1/session", this, this.handleGameflowSession), this._binding.observe("/lol-perks/v1/pages", this, this.handlePerksPages), this._binding.observe("/lol-platform-config/v1/namespaces/ClientSystemStates/gameModeToInactiveSpellIds", this, this.handleGameModeToInactiveSpellIds), this._binding.observe(r, this, this.handleSettingsReady), this._binding.observe("/lol-platform-config/v1/namespaces/SkinsViewer", this, this._handleSkinViewerSettings)
                },
                _handleSkinViewerSettings(e) {
                    this.set("disableAllPurchase", e.DisableAllPurchase)
                },
                getSearchMatchingTerms(e, t, n) {
                    const s = `champion_local_search_colloq_${e}`;
                    return ((this.get("tra").exists(s) ? this.get(`tra.${s}`) : t) || "").toLocaleLowerCase(n).trim()
                },
                setChampionProperty(e, t, n, i) {
                    const o = i.get(e);
                    o && s.Ember.set(o, t, n)
                },
                _getCatalogSkinPurchaseInfo(e) {
                    return this._binding.get(`/lol-store/v1/catalog/CHAMPION_SKIN?itemIds=[${e}]`)
                },
                _setSkinsPurchaseEnabled(e) {
                    const t = this.get("disableAllPurchase");
                    if (!Boolean(e.length)) return Promise.reject();
                    const n = e.map((e => e.id));
                    return this._getCatalogSkinPurchaseInfo(n).then((n => {
                        Boolean(n.length) && n.forEach((n => {
                            if (!Boolean(n)) return;
                            const i = e.find((e => e.id === (n.id || n.itemId))),
                                o = this._isSkinPurchasable(n) && !t;
                            s.Ember.set(i, "purchaseEnabled", o)
                        }))
                    }))
                },
                _setSkinsOwnership(e) {
                    if (Boolean(e.length)) return e.forEach((e => {
                        if (!e.ownership) return;
                        const t = e.ownership.owned,
                            n = e.ownership.loyaltyReward,
                            i = e.ownership.rental.rented,
                            o = e.ownership.xboxGPReward,
                            a = t || n || i || o;
                        s.Ember.set(e, "unlocked", a)
                    }))
                },
                _catalogItemHasValidDates: (e, t) => !(!t || !t.releaseDate || e < t.releaseDate) && !(t.inactiveDate && e > t.inactiveDate),
                _catalogItemHasValidPrice(e) {
                    if (e && Boolean(e.length)) return void 0 !== e.find((e => e.cost > 0))
                },
                _isSkinPurchasable(e) {
                    if (e && e.active && e.releaseDate) {
                        const t = Date.now();
                        return !!this._catalogItemHasValidDates(t, e) && (!!Boolean(e && e.inventoryType === y) || (!!(e.sale && t >= e.sale.startDate && t < e.sale.endDate && this._catalogItemHasValidPrice(e.sale.prices)) || this._catalogItemHasValidPrice(e.prices)))
                    }
                    return !1
                },
                getChampionSummary(e) {
                    const t = document.documentElement.lang;
                    if (e) {
                        const n = new Map;
                        Object.values(e).forEach((e => {
                            const {
                                id: s,
                                name: i,
                                squarePortraitPath: o,
                                skins: a
                            } = e, l = this.getSearchMatchingTerms(s, i, t);
                            n.set(s, {
                                id: s,
                                name: i,
                                squarePortraitPath: o,
                                searchMatchingTerms: l,
                                skins: a
                            }), -1 === s && this.set("defaultSquarePortraitPath", o)
                        }));
                        (this.get("currentQuickPlaySelections") || []).forEach((e => {
                            this.setChampionProperty(e.championId, "selectedPosition", e.positionPreference, n)
                        })), this.set("championByChampId", n)
                    }
                },
                getGameDataSummonerSpells() {
                    return this._binding.get("/lol-game-data/assets/v1/summoner-spells.json").then((e => {
                        this.set("summonerSpells", e)
                    }))
                },
                handleCurrentSummoner(e) {
                    const t = Boolean(this.get("currentSummoner.puuid"));
                    if (this.set("currentSummoner", e), !t && e && e.puuid) {
                        const t = `/lol-champions/v1/inventories/${e.summonerId}/champions`;
                        this._binding.observe(t, this, this.handleChampionInventory);
                        const n = `/lol-collections/v1/inventories/${e.puuid}/champion-mastery`;
                        this._binding.observe(n, this, this.handleChampionMastery), this._binding.observe("/lol-match-history/v1/products/lol/current-summoner/matches", this, this.handleMatchHistory)
                    }
                },
                isEntitledChampion: e => e && e.ownership && (e.freeToPlay || e.ownership.owned || e.ownership.loyaltyReward || e.ownership.xboxGPReward || e.ownership.rental.rented),
                calculateOwnershipType(e) {
                    const {
                        freeToPlay: t,
                        ownership: n
                    } = e;
                    return n.owned ? h : n.rental.rented ? g : n.loyaltyReward || n.xboxGPReward ? b : t ? f : ""
                },
                handleChampionInventory(e) {
                    this.getChampionSummary(e);
                    const t = this.get("championByChampId") || new Map,
                        n = [];
                    (e || []).forEach((e => {
                        const s = e.id;
                        Boolean(e.skins.length) && (n.push(...e.skins), e.skins.forEach((e => {
                            Boolean(e.chromas.length) && n.push(...e.chromas), Boolean(e.questSkinInfo.tiers.length) && n.push(...e.questSkinInfo.tiers)
                        })));
                        const i = this.calculateOwnershipType(e);
                        this.setChampionProperty(s, "ownershipType", i, t)
                    })), this.set("ownedChampionIds", (e || []).filter((e => e.ownership && e.ownership.owned)).map((e => e.id))), this.set("entitledChampionIds", (e || []).filter((e => this.isEntitledChampion(e))).map((e => e.id))), this._setSkinsPurchaseEnabled(n), this._setSkinsOwnership(n), this.setChampionsDisabled(), this.set("championInventory", e)
                },
                handleLobby(e) {
                    this.set("gameMode", s.Ember.get(e || {}, "gameConfig.gameMode")), this.set("isQuickPlayLobby", s.Ember.get(e || {}, "gameConfig.showQuickPlaySlotSelection")), this.set("scarcePositions", s.Ember.get(e || {}, "scarcePositions"));
                    const t = this.get("currentQuickPlaySelections") || [],
                        n = (e || {}).playerSlots || [],
                        i = this.get("championByChampId") || new Map;
                    t.forEach((e => {
                        const t = e.championId;
                        this.setChampionProperty(t, "selectedPosition", "", i)
                    })), n.forEach((e => {
                        const t = e.championId;
                        this.setChampionProperty(t, "selectedPosition", e.positionPreference, i)
                    })), this.set("currentQuickPlaySelections", n)
                },
                setChampionsDisabled() {
                    const e = this.get("queueGameMode"),
                        t = this.get("queueGameType"),
                        n = this.get("disabledChampionsData"),
                        s = this.get("disabledChampionsInitialized");
                    if (!e || !t || !s) return;
                    const i = this.get("championByChampId") || new Map;
                    (this.get("disabledChampionIds") || []).forEach((e => {
                        this.setChampionProperty(e, "disabled", !1, i)
                    }));
                    const o = (n || {})[e],
                        a = (n || {})[t],
                        l = [].concat(o || [], a || []);
                    l.forEach((e => {
                        this.setChampionProperty(e, "disabled", !0, i)
                    })), this.set("disabledChampionIds", l)
                },
                handleDisabledChampions(e) {
                    this.set("disabledChampionsInitialized", !0), this.set("disabledChampionsData", e), this.setChampionsDisabled()
                },
                handleGameflowSession(e) {
                    const t = s.Ember.get(e || {}, "gameData.queue.gameMode"),
                        n = s.Ember.get(e || {}, "gameData.queue.type");
                    this.set("queueGameMode", t), this.set("queueGameType", n), this.setChampionsDisabled()
                },
                champs: s.Ember.computed("championInventory.[]", "championByChampId", (function() {
                    const e = [...(this.get("championByChampId") || new Map).values()].filter((e => !!e.name && !!e.ownershipType));
                    return e.sort(((e, t) => e.name.localeCompare(t.name))), e
                })),
                handlePerksPages(e) {
                    this.set("perksPages", e)
                },
                handleGameModeToInactiveSpellIds(e) {
                    this.set("gameModeToInactiveSpellIds", e)
                },
                gameModeDisabledSpellIds: s.Ember.computed("gameMode", "gameModeToInactiveSpellIds", (function() {
                    const e = this.get("gameMode"),
                        t = this.get("gameModeToInactiveSpellIds") || {},
                        n = s.Ember.get(t, "ALL_GAME_MODES_DISABLED_SPELLS_KEY") || [],
                        i = s.Ember.get(t, e) || [];
                    return n.concat(i)
                })),
                gameModeSummonerSpells: s.Ember.computed("summonerSpells.@each.gameModes", "gameModeDisabledSpellIds.[]", "currentSummoner.summonerLevel", "gameMode", (function() {
                    const e = this.get("gameMode"),
                        t = this.get("currentSummoner.summonerLevel") || 1,
                        n = this.get("summonerSpells") || [],
                        s = this.get("gameModeDisabledSpellIds") || [];
                    return n.filter((t => t.gameModes.includes(e))).map((e => {
                        const n = s.includes(e.id),
                            i = t >= e.summonerLevel;
                        return {
                            ...e,
                            isSpellDisabledForMode: n,
                            isEligibleToUseSpell: i,
                            isDisabled: n || !i,
                            sfxPath: `/fe/lol-champ-select/sounds/sfx-spellchoose-${e.id}.ogg`
                        }
                    }))
                })),
                getChampionData(e) {
                    return this.get("championByChampId").get(e) || {
                        id: e,
                        squarePortraitPath: this.get("defaultSquarePortraitPath"),
                        skins: []
                    }
                },
                handleSettingsReady(e) {
                    e && (this._binding.observe(c, this, this.handleChampSelectSettings), this._binding.observe(u, this, this.handleQuickPlaySettings), this._binding.unobserve(r, this)), this.set("settingsReady", e)
                },
                handleChampSelectSettings(e) {
                    this.set("champSelectSettings", e)
                },
                saveLastSelectedSkinForChampion(e, t) {
                    if (!this.get("settingsReady") || !e || !t) return Promise.reject();
                    const n = this.get("champSelectSettings.data.skins") || {},
                        s = this.get("champSelectSettings.data.spells") || {};
                    n[`${e}`] = t;
                    const i = Object.assign({}, m, {
                        data: {
                            spells: s,
                            skins: n
                        }
                    });
                    return this._binding.put(c, i)
                },
                getLastSelectedSkinForChampion(e) {
                    const t = `${e}`;
                    return (this.get("champSelectSettings.data.skins") || {})[t] || 0
                },
                getDefaultSkinForChampion(e) {
                    const t = this.getLastSelectedSkinForChampion(e),
                        n = this.getChampionData(e);
                    return t || ((n.skins || []).find((e => e.isBase)) || {}).id || 0
                },
                handleQuickPlaySettings(e) {
                    const t = s.Ember.get(e || {}, "data");
                    this.set("quickPlaySettingsData", t), this.set("quickPlaySettingsInitialized", !0)
                },
                handleChampionMastery(e) {
                    const t = (e || []).map((e => ({
                        championId: e.championId,
                        championPoints: e.championPoints
                    })));
                    t.sort(((e, t) => t.championPoints - e.championPoints));
                    const n = t.map((e => e.championId));
                    this.set("championMasteryChampionIds", n)
                },
                handleMatchHistory(e) {
                    const t = this.get("currentSummoner.puuid"),
                        n = (s.Ember.get(e || {}, "games.games") || []).filter((e => e.gameMode === i.GAME_MODES.CLASSIC)).map((e => {
                            const n = (e.participantIdentities || []).find((e => e.player.puuid === t));
                            return (e.participants || []).find((e => e.participantId === n.participantId)).championId
                        }));
                    this.set("matchHistoryChampionIds", n)
                },
                quickPlayDefaultSelections: s.Ember.computed("settingsReady", "quickPlaySettingsData.slots", "quickPlaySettingsInitialized", "championMasteryChampionIds", "matchHistoryChampionIds", "ownedChampionIds", "entitledChampionIds", "scarcePositions", "isQuickPlayLobby", (function() {
                    const e = this.get("settingsReady"),
                        t = this.get("quickPlaySettingsData.slots") || [],
                        n = this.get("quickPlaySettingsInitialized"),
                        i = this.get("championMasteryChampionIds"),
                        o = this.get("matchHistoryChampionIds"),
                        a = this.get("ownedChampionIds"),
                        l = this.get("entitledChampionIds"),
                        r = this.get("isQuickPlayLobby"),
                        c = this.get("scarcePositions"),
                        m = this.get("disabledChampionIds"),
                        u = Boolean(o) && Boolean(a) && Boolean(l) && Boolean(c) && Boolean(i) && Boolean(m);
                    if (!(e && n && r && u)) return [];
                    if (t.length) return t;
                    const d = l.filter((e => !m.includes(e))),
                        p = s.lodash.shuffle(a),
                        h = i.concat(o, p),
                        g = [...new Set(h)].filter((e => d.includes(e) && this.getChampionData(e).skins.length > 0));
                    let b = this.getValidChampPositionSelections([], g, c);
                    if (b.length < 2) {
                        const e = d.filter((e => !g.includes(e)));
                        b = this.getValidChampPositionSelections(b, s.lodash.shuffle(e), c)
                    }
                    return b.map((e => {
                        const t = this.getDefaultSkinForChampion(e.championId),
                            n = this.getDefaultSpellsForPosition(e.positionPreference);
                        return {
                            ...e,
                            skinId: t,
                            spell1: n[0],
                            spell2: n[1]
                        }
                    }))
                })),
                getSanitizedPreferredPosition(e) {
                    const t = s.ChampionStatistics.getPreferredPosition(e);
                    return t === o.CHAMP_STATS_POSITION_UTILITY ? o.POSITIONS.UTILITY : t
                },
                getValidChampPositionSelections(e = [], t, n) {
                    let s = (e[0] || {}).positionPreference,
                        i = 0;
                    for (; e.length < 2 && i < t.length;) {
                        const o = t[i],
                            a = this.getSanitizedPreferredPosition(o);
                        if (s) {
                            const t = 0 !== n.length && !n.includes(s),
                                i = n.includes(a);
                            (t && i || !t) && a !== s && e.push({
                                championId: o,
                                positionPreference: a
                            })
                        } else s = a, e.push({
                            championId: o,
                            positionPreference: a
                        });
                        i++
                    }
                    return e
                },
                getDefaultSpellsForPosition(e) {
                    const t = this.get("champSelectSettings.data.spells") || {},
                        n = this.get("gameModeSummonerSpells"),
                        s = p.map((e => t[e] || [])),
                        i = (0, l.getEligibleSpells)(n, a.DEFAULT_MOVEMENT_SPELLS)[0].id,
                        o = [i, (0, l.getEligibleSpells)(n, [a.DEFAULT_NON_MOVEMENT_SPELL_BY_POSITION[e], a.DEFAULT_NON_MOVEMENT_SPELL], [i])[0].id],
                        r = s.concat([o]).find((e => 2 === e.length && !e.includes(void 0)));
                    return (0, l.getSpellIdsWithSmiteAssignedIfAppropriate)(r, e, n)
                },
                saveQuickPlaySelections(e) {
                    if (!this.get("settingsReady")) return Promise.resolve();
                    const t = {
                        data: {
                            slots: e
                        }
                    };
                    return this._binding.put(u, Object.assign({}, d, t))
                }
            })
        }, (e, t, n) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.SPELL_IDS = t.DEFAULT_NON_MOVEMENT_SPELL_BY_POSITION = t.DEFAULT_NON_MOVEMENT_SPELL = t.DEFAULT_MOVEMENT_SPELLS = void 0;
            var s = n(109);
            const i = {
                SMITE: 11,
                TELEPORT: 12,
                IGNITE: 14,
                HEAL: 7,
                EXHAUST: 3,
                GHOST: 6,
                FLASH: 4
            };
            t.SPELL_IDS = i;
            const o = {};
            o[s.POSITIONS.TOP] = i.TELEPORT, o[s.POSITIONS.JUNGLE] = i.SMITE, o[s.POSITIONS.MIDDLE] = i.IGNITE, o[s.POSITIONS.BOTTOM] = i.HEAL, o[s.POSITIONS.UTILITY] = i.EXHAUST;
            const a = o;
            t.DEFAULT_NON_MOVEMENT_SPELL_BY_POSITION = a;
            const l = [i.FLASH, i.GHOST];
            t.DEFAULT_MOVEMENT_SPELLS = l;
            const r = i.HEAL;
            t.DEFAULT_NON_MOVEMENT_SPELL = r
        }, (e, t, n) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.getEligibleSpells = function(e, t = [], n = []) {
                return o(e, t, n)
            }, t.getSpellIdsWithSmiteAssignedIfAppropriate = function(e = [], t, n, a = !1) {
                const l = n.find((e => e.id === i.SPELL_IDS.SMITE));
                return t !== s.POSITIONS.JUNGLE || l.isDisabled ? a ? function(e = [], t, n) {
                    const s = [...e],
                        a = o(n, [i.DEFAULT_NON_MOVEMENT_SPELL_BY_POSITION[t], i.DEFAULT_NON_MOVEMENT_SPELL, ...i.DEFAULT_MOVEMENT_SPELLS], s),
                        l = a[0].id,
                        r = s.indexOf(i.SPELL_IDS.SMITE); - 1 !== r && (s[r] = l);
                    return s
                }(e, t, n) : e : function(e = []) {
                    const t = [...e];
                    t[0] !== i.SPELL_IDS.SMITE && t[1] !== i.SPELL_IDS.SMITE && (t[0] === i.SPELL_IDS.FLASH ? t[1] = i.SPELL_IDS.SMITE : t[0] = i.SPELL_IDS.SMITE);
                    return t
                }(e)
            };
            var s = n(109),
                i = n(124);

            function o(e, t = [], n = []) {
                const s = t.concat(e.map((e => e.id)));
                return e.filter((e => !e.isDisabled && !n.includes(e.id))).sort(((e, t) => s.indexOf(e.id) - s.indexOf(t.id)))
            }
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            const i = e => e.reduce(((e, t) => ({
                    ...e,
                    ...t.items.reduce(((e, t) => ({
                        ...e,
                        ...(t.upgrades || []).reduce(((e, t) => ({
                            ...e,
                            [t.itemId]: t.loadoutsIcon
                        })), {}),
                        [t.itemId]: t.loadoutsIcon
                    })), {})
                })), {}),
                o = e => e.groups.reduce(((e, t) => [...e, ...t.items.reduce(((e, t) => {
                    if (t.owned || t.f2p || t.loyalty) {
                        let n = [...e, t];
                        if (t?.upgrades?.length) {
                            const e = t.upgrades.filter((e => e.owned));
                            n = [...n, ...e]
                        }
                        return n
                    }
                    return e
                }), [])]), []),
                a = (0, s.emberDataBinding)({
                    Ember: s.Ember,
                    websocket: (0, s.getProvider)().getSocket(),
                    logPrefix: "parties:service:tft-cosmetics",
                    basePaths: {
                        cosmetics: "/lol-cosmetics",
                        clientconfig: "/lol-client-config"
                    },
                    boundProperties: {
                        companions: {
                            api: "cosmetics",
                            path: "/v1/inventories/tft/companions"
                        },
                        mapSkins: {
                            api: "cosmetics",
                            path: "/v1/inventories/tft/map-skins"
                        },
                        damageSkins: {
                            api: "cosmetics",
                            path: "/v1/inventories/tft/damage-skins"
                        },
                        randomizeLoadouts: {
                            api: "clientconfig",
                            path: "/v3/client-config/lol.client_settings.tft.tft_randomize_loadouts"
                        }
                    }
                });
            e.exports = s.Ember.Service.extend(a, {
                companionIconUrls: s.Ember.computed("companions.groups", (function() {
                    return i(this.get("companions.groups") || [])
                })),
                mapSkinIconUrls: s.Ember.computed("mapSkins.groups", (function() {
                    return i(this.get("mapSkins.groups") || [])
                })),
                damageSkinIconUrls: s.Ember.computed("damageSkins.groups", (function() {
                    return i(this.get("damageSkins.groups") || [])
                })),
                ownedCompanions: s.Ember.computed("companions", (function() {
                    return o(this.get("companions"))
                })),
                ownedMapSkins: s.Ember.computed("mapSkins", (function() {
                    return o(this.get("mapSkins"))
                })),
                ownedDamageSkins: s.Ember.computed("damageSkins", (function() {
                    return o(this.get("damageSkins"))
                })),
                isTFTRandomizeLoadoutsEnabled: s.Ember.computed.bool("randomizeLoadouts.enabled"),
                randomizeAll: function() {
                    const e = this.get("ownedCompanions"),
                        t = this.get("ownedMapSkins"),
                        n = this.get("ownedDamageSkins"),
                        i = e[Math.floor(Math.random() * e.length)],
                        o = t[Math.floor(Math.random() * t.length)],
                        a = n[Math.floor(Math.random() * n.length)],
                        l = (0, s.getProvider)().getSocket();
                    (0, s.dataBinding)("/lol-cosmetics", l).put("/v1/selection/companion", i.itemId), (0, s.dataBinding)("/lol-cosmetics", l).put("/v1/selection/tft-map-skin", o.itemId), (0, s.dataBinding)("/lol-cosmetics", l).put("/v1/selection/tft-damage-skin", a.itemId)
                }
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            const i = "/lol-tft/v1/tft/events";
            e.exports = s.Ember.Service.extend({
                tftEventsData: null,
                tftEvent: null,
                eventQueues: s.Ember.computed.alias("tftEvent.queueIds"),
                eventEnabled: s.Ember.computed.alias("tftEvent.enabled"),
                eventEndDate: s.Ember.computed.alias("tftEvent.endDate"),
                init: function() {
                    this._super(...arguments), this._binding = s.db, this._initObservers()
                },
                willDestroy: function() {
                    this._binding.removeObserver(i, this), this._super(...arguments)
                },
                _initObservers() {
                    this._binding.addObserver(i, this, (e => {
                        e && (this.set("tftEventsData", e.subNavTabs), e.subNavTabs.length > 1 ? s.logger.error("Currently only displaying one event in the TFT Hub is supported - received " + e.length + " events.") : 1 === e.subNavTabs.length && this.set("tftEvent", e.subNavTabs[0]))
                    }))
                },
                isTftEventQueue: function(e) {
                    const t = this.get("eventQueues");
                    if (!t || !e) return !1;
                    let n = !1;
                    return Array.isArray(t) && t.length > 0 && (n = t.some((function(t) {
                        return e === t
                    }))), n
                }
            })
        }, (e, t, n) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.default = void 0;
            var s = n(1);
            const i = "/lol-settings/v2/account/LCUPreferences/lol-tft",
                o = "shouldShowTFTNPEQueueUnlock";
            var a = s.Ember.Service.extend({
                eligibilityService: s.Ember.inject.service("queue-eligibility"),
                preferencesInitialized: !1,
                shouldShowTFTNPEQueueUnlock: !1,
                init() {
                    this._super(...arguments), s.db.addObserver(i, this, this._handleTFTPreferences)
                },
                willDestroy() {
                    this._super(...arguments), s.db.removeObserver(i, this)
                },
                seedTFTNPEQueueUnlock: s.Ember.observer("eligibilityService.isTFTNPEEnabled", "eligibilityService.isNewTFTPlayer", "preferencesInitialized", "shouldShowTFTNPEQueueUnlock", (function() {
                    const e = this.get("eligibilityService.isTFTNPEEnabled"),
                        t = this.get("eligibilityService.isNewTFTPlayer"),
                        n = this.get("preferencesInitialized"),
                        s = this.get("shouldShowTFTNPEQueueUnlock");
                    e && t && n && !s && this.updateShouldShowTFTNPEQueueUnlock(!0)
                })),
                _handleTFTPreferences(e) {
                    if (!e || !e.data) return;
                    const t = Boolean(e.data[o]);
                    this.set("shouldShowTFTNPEQueueUnlock", t), this.set("preferencesInitialized", !0)
                },
                updateShouldShowTFTNPEQueueUnlock(e) {
                    const t = Boolean(e);
                    return s.db.patch(i, {
                        data: {
                            [o]: t
                        },
                        schemaVersion: 1
                    }).then((() => {
                        this.set("shouldShowTFTNPEQueueUnlock", t)
                    }))
                }
            });
            t.default = a
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            const i = (0, s.emberDataBinding)({
                Ember: s.Ember,
                websocket: (0, s.getProvider)().getSocket(),
                logPrefix: "service:social-leaderboard",
                basePaths: {
                    socialLeaderboard: "/lol-social-leaderboard"
                }
            });
            e.exports = s.Ember.Service.extend(i, {
                getSocialLeaderboardData: function(e) {
                    const t = `/v1/social-leaderboard-data?queueType=${e}`;
                    return this.get("api.socialLeaderboard").get(t, {
                        skipCache: !0
                    })
                },
                getSocialLeaderboardNextUpdateTime: function(e) {
                    const t = `/v1/leaderboard-next-update-time?queueType=${e}`;
                    return this.get("api.socialLeaderboard").get(t, {
                        skipCache: !0
                    })
                }
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1),
                i = n(18);
            e.exports = s.Ember.Service.extend({
                init: function() {
                    this._super(...arguments), this._binding = s.db, this._binding.observe("/lol-platform-config/v1/namespaces/Challenges/ClientState", this, this.handleLobbyChallengesEnabled)
                },
                handleLobbyChallengesEnabled(e) {
                    s.SharedChallengesConstants.getFlagValueOrDefault(s.SharedChallengesConstants.CHALLENGE_FLAG_NAMES.CLIENT_STATE, e) === i.CHALLENGES_CLIENT_STATES.ENABLED ? this._binding.observe("/lol-challenges/v1/available-queue-ids", this, this.handleAvailableQueueIds) : (this._binding.unobserve("/lol-challenges/v1/available-queue-ids", this), this.set("enabledQueues", void 0))
                },
                handleAvailableQueueIds(e) {
                    this.set("enabledQueues", e)
                }
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1),
                i = c(n(122)),
                o = c(n(74)),
                a = c(n(132)),
                l = c(n(16)),
                r = n(15);

            function c(e) {
                return e && e.__esModule ? e : {
                    default: e
                }
            }
            n(133);
            const {
                RunMixin: m
            } = s.EmberAddons.EmberLifeline;
            e.exports = s.Ember.Component.extend(m, a.default, i.default, o.default, {
                classNames: ["parties-view"],
                classNameBindings: ["isInQueue:in-matchmaking-search", "gameflowObserver", "loginConnectedObserver", "invitesService.currentPlayerCanInvite"],
                showingState: null,
                selected: null,
                queues: null,
                _updatedInvitedBanners: !1,
                _lastQueueId: null,
                _lastPartyId: null,
                _playedSoundQueueId: null,
                lobbyIsDisabled: !1,
                _positionSelectorEmberApp: null,
                _positionSelectorData: null,
                ModalManager: s.UIKit.getModalManager(),
                matchmakingService: s.Ember.inject.service("matchmaking"),
                lobbiesService: s.Ember.inject.service("lobbies"),
                eligibilityService: s.Ember.inject.service("queue-eligibility"),
                customGamesService: s.Ember.inject.service("custom-games"),
                gameflowService: s.Ember.inject.service("gameflow"),
                invitesService: s.Ember.inject.service("invites"),
                partySettingsService: s.Ember.inject.service("party-settings"),
                assets: s.Ember.inject.service(),
                tftEventService: s.Ember.inject.service("tft-events"),
                layout: n(134),
                isCustom: s.Ember.computed.alias("lobbiesService.isCustom"),
                isInQueue: s.Ember.computed.alias("matchmakingService.isInQueue"),
                isMatchmaking: s.Ember.computed.or("gameflowService.isMatchmaking", "gameflowService.isReadyCheck"),
                isCustomUI: s.Ember.computed.alias("customGamesService.isCustomUI"),
                isInViewport: s.Ember.computed.alias("showingState.isInViewport"),
                isShowingParty: s.Ember.computed.alias("showingState.isShowingParty"),
                isShowingGameSelect: s.Ember.computed.alias("showingState.isShowingGameSelect"),
                queueId: s.Ember.computed.alias("lobbiesService.queueId"),
                partyId: s.Ember.computed.alias("lobbiesService.partyId"),
                isTFT: s.Ember.computed.alias("lobbiesService.isTFT"),
                isNotChampSelect: s.Ember.computed.not("gameflowService.isChampSelect"),
                isLeader: s.Ember.computed.alias("lobbiesService.isCurrentPlayerPartyLeader"),
                shouldShowMultiteamLobby: s.Ember.computed.alias("lobbiesService.shouldShowMultiteamLobby"),
                animationsEnabled: s.Ember.computed.alias("partySettingsService.animationsEnabled"),
                partyViewObserver: s.Ember.computed("isInViewport", "isShowingParty", "queueId", (function() {
                    const e = this.get("isInViewport"),
                        t = this.get("isShowingParty"),
                        n = this.get("queueId");
                    let i = "";
                    e && t && this.get("tftEventService").isTftEventQueue(n) && (i = "TFT_Event_Series"), s.Navigation.setTrackerState("partyViewSeries", i)
                })),
                changeGameTypeSound: "/fe/lol-parties/sfx-parties-trans-change-game-type.ogg",
                platformConfigSingleton: l.default,
                shouldUsePartiesV2Components: s.Ember.computed.not("isCustom"),
                init() {
                    this._super(...arguments), this._initialPerfMetricSent = !1, s.Telemetry.startTracingEvent("parties-init-ember-app-settle")
                },
                didRender() {
                    this._super(...arguments), this._initialPerfMetricSent || this.debounceTask("_endPerformanceMeasurement", 250)
                },
                _endPerformanceMeasurement() {
                    s.Telemetry.endTracingEvent("parties-init-ember-app-settle"), this._initialPerfMetricSent = !0
                },
                isMatchmakingClassName: s.Ember.computed("isMatchmaking", (function() {
                    return this.get("isMatchmaking") ? "bg-current isMatchmaking" : "bg-current"
                })),
                updateBackgroundAnimation: function(e) {
                    const t = e.pageX - window.innerWidth / 2,
                        n = e.pageY - window.innerHeight / 2,
                        s = this.get("isMatchmaking"),
                        i = this.element.querySelector(".lol-uikit-background-switcher-image");
                    s || (i.style.cssText = `\n      transform: scale(1.125) translateX(-${50+t/75}px) translateY(-${50+n/75}px);\n    `)
                },
                mouseMove: function(e) {
                    this.get("animationsEnabled"), this.get("isTFT")
                },
                queueIdObserver: s.Ember.on("init", s.Ember.observer("queueId", "isCustom", (function() {
                    s.Ember.run.once(this, (function() {
                        this._updateSelectionFromCustomLobby()
                    }))
                }))),
                queueTransitionObserver: s.Ember.on("init", s.Ember.observer("partyId", "queueId", (function() {
                    s.Ember.run.once(this, (function() {
                        this.get("isLeader") || this._partyMemberTransition(this.get("partyId"), this.get("queueId"))
                    }))
                }))),
                isDisconnected: !1,
                loginConnectedObserver: s.Ember.computed("eligibilityService.loginConnected", (function() {
                    const e = this.get("eligibilityService.loginConnected");
                    !0 === e ? this.get("isDisconnected") && (s.logger.warning("Parties plugin thinks we reconnected!"), this.set("isDisconnected", !1), this.get("eligibilityService").refreshEligibilities()) : !1 === e && this.handleDisconnect()
                })),
                handleDisconnect: function() {
                    this.set("isDisconnected", !0), this.get("isShowingParty") || (this.get("lobbiesService.inLobby") ? (s.logger.warning("Parties plugin disconnected so returning to parties screen"), this.get("showingState").showParty()) : this.get("isShowingGameSelect") && (s.logger.warning("Parties plugin disconnected so hiding game select screen"), this.hideOurselves()))
                },
                refreshEligibilityObserver: s.Ember.on("init", s.Ember.observer("isShowingGameSelect", "lobbiesService.gameSelectEligibilityHash", "otherPartyMembers", (function() {
                    s.Ember.run.once(this, (function() {
                        const e = this.get("lobbiesService.gameSelectEligibilityHash");
                        s.logger.trace(`refreshEligibilityObserver: updated party hash: ${e}`), this.checkIfNeedToRefreshEligibility()
                    }))
                }))),
                checkIfNeedToRefreshEligibility: function() {
                    const e = this.get("isShowingGameSelect"),
                        t = this.get("eligibilityService.isTFTNPEEnabled") && [r.TFT_NORMAL_QUEUE_ID, r.TFT_NPE_QUEUE_ID].includes(this.get("queueId"));
                    (e || t) && this.get("eligibilityService").refreshEligibilities()
                },
                debugToolsEnabled: s.Ember.computed("lobbiesService.queues.[]", (function() {
                    const e = this.get("lobbiesService.queues");
                    if (e && e.length > 0) {
                        const t = e.findBy("id", 432);
                        return t && "Available" === t.queueAvailability
                    }
                    return !1
                })),
                handleWillDestroyElement: s.Ember.on("willDestroyElement", (function() {
                    this._destroyInviteDialog()
                })),
                gameflowObserver: s.Ember.computed("gameflowService.phase", "_inviteModal", (function() {
                    !this.get("gameflowService.isLobby") && this.get("_inviteModal") && this.get("ModalManager").remove(this.get("_inviteModal"))
                })),
                _destroyInviteDialog: function() {
                    const e = this.get("_inviteModal");
                    e && e.domNode && e.domNode.querySelector(".parties-invite-dialog").dispatchEvent(new Event("destroyComponent")), this.set("_inviteDialogComponent", null)
                },
                _getPartiesInviteDialog: function() {
                    let e = this.get("_inviteDialogComponent");
                    if (e) {
                        const {
                            domNode: t
                        } = e, n = t.querySelector(".parties-invite-dialog");
                        n && n.dispatchEvent(new Event("initInviteDialog"))
                    } else e = s.ComponentFactory.create("PartiesInviteDialog"), this.set("_inviteDialogComponent", e);
                    return this.get("_inviteDialogComponent")
                },
                showInviteModal: function() {
                    const e = this._getPartiesInviteDialog(),
                        t = this.get("tra.invite_dialog_send_invites_button");
                    return e.renderPromise.then((() => {
                        const {
                            domNode: n
                        } = e, s = this.get("ModalManager").add({
                            type: "DialogConfirm",
                            data: {
                                contents: n,
                                acceptText: t,
                                closeButton: !0
                            }
                        });
                        return n.addEventListener("disableacceptbutton", (e => {
                            s.disableAcceptButton(), e.stopPropagation()
                        })), n.addEventListener("enableacceptbutton", (e => {
                            s.enableAcceptButton(), e.stopPropagation()
                        })), n.addEventListener("closeinvitemodal", (e => {
                            this.get("ModalManager").remove(s), e.stopPropagation()
                        })), s.domNode.classList.add("parties-invite-dialog-modal"), s.acceptPromise.then((() => {
                            n.querySelector(".parties-invite-dialog").dispatchEvent(new Event("sendInvitesClicked"))
                        })).catch((() => {})), s
                    }))
                },
                _updateSelectionFromCustomLobby: function() {
                    const e = this.get("lobbiesService.gameConfig"),
                        t = this.get("queueId");
                    e && (this.get("lobbiesService.isCustom") ? (this.set("selected.isCreatingCustomGame", !0), this.set("selected.mapId", e.mapId), this.set("selected.gameMode", e.gameMode)) : s.lodash.isNumber(t) && (this.set("selected.queueId", t), this.set("selected.isCreatingCustomGame", !1)))
                },
                _partyMemberTransition: function(e, t) {
                    s.lodash.isNumber(t) && -1 !== t && e ? e === this.get("_lastPartyId") ? this.get("_lastQueueId") !== t && this._changedQueue(t) : this._changedParty(e, t) : this._clearPartyCache()
                },
                _clearPartyCache: function() {
                    this.set("_lastQueueId", null), this.set("_lastPartyId", null), this.set("_playedSoundQueueId", null)
                },
                _changedParty: function(e, t) {
                    this.set("_lastPartyId", e), this.set("_lastQueueId", t), this.set("_playedSoundQueueId", null), this.get("showingState").showParty()
                },
                _changedQueue: function(e) {
                    this._playQueueTransitionSound(e), this.set("_lastQueueId", e)
                },
                _playQueueTransitionSound: function(e) {
                    this.get("_playedSoundQueueId") !== e && (this.playSound(this.get("changeGameTypeSound")), this.set("_playedSoundQueueId", e))
                },
                actions: {
                    showGameSelect: function() {
                        this.set("showingState.showVerticalAnimation", !0), this.get("showingState").showGameSelect()
                    },
                    showInviteModal: function() {
                        this.showInviteModal().then((e => {
                            this.set("_inviteModal", e)
                        }))
                    },
                    cachePositionSelector: function(e, t) {
                        this.set("_positionSelectorEmberApp", e), this.set("_positionSelectorData", t)
                    }
                }
            })
        }, (e, t, n) => {
            "use strict";
            var s, i = n(1),
                o = (s = n(25)) && s.__esModule ? s : {
                    default: s
                };
            e.exports = i.Ember.Mixin.create({
                leaveParty: function() {
                    return this.hideOurselves().then((() => this.get("lobbiesService").leaveParty()))
                },
                hideOurselves: function() {
                    if (this.set("selected.isUpdatingSelection", !1), this.get("showingState.isInViewport")) {
                        const e = i.Viewport.main().getScreenRoot(o.default.get("viewportApiKey"), "rcp-fe-lol-parties");
                        return i.Navigation.showHome().then((() => e.release().then((() => {
                            this.get("showingState").set("isInViewport", !1)
                        }))))
                    }
                    return Promise.resolve()
                }
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "Sr1LYE1T",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\root-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\root-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\root-component\\\\index.js\\" "],["text","\\n"],["append",["helper",["parties-background"],null,[["selected","showingState","isMatchmakingClassName"],[["get",["selected"]],["get",["showingState"]],["get",["isMatchmakingClassName"]]]]],false],["text","\\n"],["append",["helper",["parties-ambience"],null,[["selected","showingState"],[["get",["selected"]],["get",["showingState"]]]]],false],["text","\\n"],["open-element","div",[]],["static-attr","class","parties-content"],["flush-element"],["text","\\n"],["block",["if"],[["get",["isShowingParty"]]],null,9],["block",["if"],[["get",["isCustomUI"]]],null,8,6],["text","\\n  "],["append",["helper",["game-select-root"],null,[["showingState","selected","queues"],[["get",["showingState"]],["get",["selected"]],["get",["queues"]]]]],false],["text","\\n\\n  "],["append",["unknown",["parties-notifications"]],false],["text","\\n\\n"],["block",["if"],[["get",["debugToolsEnabled"]]],null,0],["close-element"],["text","\\n"],["open-element","div",[]],["static-attr","style","display: none"],["flush-element"],["text","\\n  "],["comment"," here are some computeds we need in a template somewhere, so they update "],["text","\\n  "],["append",["unknown",["customGamesService","gameIdObserver"]],false],["text","\\n  "],["append",["unknown",["customGamesService","gameflowPhaseObserver"]],false],["text","\\n  "],["append",["unknown",["partyViewObserver"]],false],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["append",["helper",["parties-debug-tools"],null,[["selected","showingState"],[["get",["selected"]],["get",["showingState"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["append",["helper",["v2-header"],null,[["showingState","selected","isInQueue","queues","cancelFlow"],[["get",["showingState"]],["get",["selected"]],["get",["isInQueue"]],["get",["queues"]],"showGameSelect"]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["append",["helper",["v2-parties-root"],null,[["showingState","selected","showGameSelect","isInQueue","showInviteModal"],[["get",["showingState"]],["get",["selected"]],"showGameSelect",["get",["isInQueue"]],"showInviteModal"]]],false],["text","\\n    "]],"locals":[]},{"statements":[["text","      "],["append",["helper",["multiteam-lobby-root"],null,[["showingState","selected","showInviteModal"],[["get",["showingState"]],["get",["selected"]],"showInviteModal"]]],false],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["shouldShowMultiteamLobby"]]],null,3,2]],"locals":[]},{"statements":[["text","      "],["append",["helper",["tft-lobby"],null,[["showingState","selected","showGameSelect","isInQueue","showInviteModal"],[["get",["showingState"]],["get",["selected"]],"showGameSelect",["get",["isInQueue"]],"showInviteModal"]]],false],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["isTFT"]]],null,5,4],["block",["if"],[["get",["isShowingParty"]]],null,1]],"locals":[]},{"statements":[["text","      "],["append",["helper",["parties-header"],null,[["showingState","selected","isInQueue","queues"],[["get",["showingState"]],["get",["selected"]],["get",["isInQueue"]],["get",["queues"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["isShowingParty"]]],null,7],["text","    "],["append",["helper",["custom-game-root"],null,[["selected","showingState","showInviteModal"],[["get",["selected"]],["get",["showingState"]],"showInviteModal"]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","empty-header-spacer"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1),
                i = l(n(74)),
                o = l(n(136)),
                a = l(n(25));

            function l(e) {
                return e && e.__esModule ? e : {
                    default: e
                }
            }
            e.exports = s.Ember.Component.extend(i.default, {
                gameflowService: s.Ember.inject.service("gameflow"),
                assets: s.Ember.inject.service(),
                classNameBindings: ["stateMachine"],
                isShowingLobby: !0,
                mapId: s.Ember.computed.readOnly("selected.mapId"),
                gameMode: s.Ember.computed.readOnly("selected.gameMode"),
                assetMutator: s.Ember.computed.readOnly("selected.assetMutator"),
                queueId: s.Ember.computed.readOnly("selected.queueId"),
                insertListener: s.Ember.on("didInsertElement", (function() {
                    this.attachScreenRoot()
                })),
                attachScreenRoot: function() {
                    s.Viewport.main().getScreenRoot(a.default.get("viewportApiKey"), "rcp-fe-lol-parties").on("show", (() => {
                        this.determineState()
                    }))
                },
                lobbyAmbience: s.Ember.computed("mapId", "assets.availableMaps", (function() {
                    return this.getMapSoundUrl("sfx-ambience-pregame-loop-sound")
                })),
                matchmakingMusic: s.Ember.computed("queueId", "assets.availableMaps", (function() {
                    return this.getMapSoundUrl("music-inqueue-loop-sound")
                })),
                isLobby: s.Ember.computed.readOnly("gameflowService.isLobby"),
                isInQueue: s.Ember.computed.or("gameflowService.isMatchmaking", "gameflowService.isReadyCheck"),
                isChampSelect: s.Ember.computed.readOnly("gameflowService.isChampSelect"),
                stateMachine: s.Ember.computed("lobbyAmbience", "isChampSelect", "isInQueue", (function() {
                    return this.determineState()
                })),
                determineState: function() {
                    if (this.get("isChampSelect")) return o.default.stop(), "champSelect";
                    if (this.get("isInQueue")) {
                        const e = this.get("matchmakingMusic");
                        return e && o.default.playMusic(e), "queue"
                    }
                    if (this.get("isLobby")) {
                        const e = this.get("lobbyAmbience");
                        return e && o.default.playAmbience(e), "lobby"
                    }
                }
            })
        }, (e, t, n) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.default = void 0;
            var s = n(1),
                i = l(n(137)),
                o = l(n(25)),
                a = n(138);

            function l(e) {
                return e && e.__esModule ? e : {
                    default: e
                }
            }
            var r = new class {
                constructor() {
                    this.sfxChannel = new i.default("sfx-ambience"), this.musicChannel = new i.default("music-ambience"), this.isPlaying = null, this.attachToScreenRoot()
                }
                attachToScreenRoot() {
                    s.Viewport.main().getScreenRoot(o.default.get("viewportApiKey"), "rcp-fe-lol-parties").on("hide", (() => {
                        this.isPlaying === a.SOUND_TYPE_AMBIENCE && (this.sfxChannel.stop(), this.isPlaying = null)
                    }))
                }
                playAmbience(e) {
                    this.isPlaying === a.SOUND_TYPE_MUSIC && this.musicChannel.stop(), this.isPlaying = a.SOUND_TYPE_AMBIENCE, this.sfxChannel.play(e, {
                        allowConcurrency: !1
                    })
                }
                playMusic(e) {
                    this.isPlaying === a.SOUND_TYPE_AMBIENCE && this.sfxChannel.stop(), this.isPlaying = a.SOUND_TYPE_MUSIC, this.musicChannel.play(e, {
                        allowConcurrency: !1
                    })
                }
                stop() {
                    this.isPlaying === a.SOUND_TYPE_AMBIENCE ? this.sfxChannel.stop() : this.isPlaying === a.SOUND_TYPE_MUSIC && this.musicChannel.stop(), this.isPlaying = null
                }
            };
            t.default = r
        }, (e, t, n) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.default = void 0;
            var s = n(1);
            var i = class {
                constructor(e) {
                    this.channelName = e, this.channel = s.Audio.getChannel(e), this.playingSound = !1, this.currentSoundUrl = !1
                }
                _createSound(e) {
                    return this.channel.createSound(e, {
                        fadeIn: !0,
                        isLoop: !0
                    })
                }
                play(e) {
                    return this.currentSoundUrl === e ? Promise.resolve() : this.playingSound && this.playingSound.isPlaying() ? void(this.playingSound.isPlaying() && this.playingSound.stop().then((() => this._actuallyPlay(e))).catch((() => this._actuallyPlay(e)))) : this._actuallyPlay(e)
                }
                _actuallyPlay(e) {
                    return s.logger.trace(`Playing ${this.channelName} ${e}`), this.currentSoundUrl = e, this.playingSound = this._createSound(e), this.playingSound.on("stop", (e => (e.dispose(), null))), this.playingSound.play()
                }
                stop(e) {
                    this.playingSound && (s.logger.trace(`Stopping ${this.channelName} ${this.currentSoundUrl}`), this.playingSound.isPlaying() && (e = e || 100, this.playingSound.fadeOut(e, {
                        stop: !0
                    }).catch((() => {}))), this.playingSound = !1, this.currentSoundUrl = !1)
                }
            };
            t.default = i
        }, (e, t) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.SOUND_TYPE_MUSIC = t.SOUND_TYPE_AMBIENCE = void 0;
            t.SOUND_TYPE_AMBIENCE = 1;
            t.SOUND_TYPE_MUSIC = 2
        }, (e, t, n) => {
            "use strict";
            var s, i = n(1),
                o = (s = n(74)) && s.__esModule ? s : {
                    default: s
                };
            n(140), e.exports = i.Ember.Component.extend(o.default, {
                layout: n(141),
                assets: i.Ember.inject.service(),
                customGamesService: i.Ember.inject.service("custom-games"),
                partySettingsService: i.Ember.inject.service("party-settings"),
                bannerAnimationsEnabled: i.Ember.computed.alias("partySettingsService.bannerAnimationsEnabled"),
                classNames: ["parties-background"],
                classNameBindings: ["isShowingParty", "isShowingGameSelect", "bgVerticalAnimation", "isCustomGame"],
                backgroundAssets: i.Ember.computed.alias("assets.backgroundAssets"),
                haveBackgroundAssets: i.Ember.computed.gt("backgroundAssets.length", 0),
                currentBackgroundUrl: i.Ember.computed("backgroundAssets", "selected.mapId", "selected.gameMode", "selected.assetMutator", (function() {
                    const e = this.get("selected");
                    return this._backgroundById(e.mapId, e.gameMode, e.assetMutator)
                })),
                transitionType: i.Ember.computed("bannerAnimationsEnabled", (function() {
                    return this.get("bannerAnimationsEnabled") ? "fade" : "none"
                })),
                isShowingParty: i.Ember.computed.alias("showingState.isShowingParty"),
                isShowingGameSelect: i.Ember.computed.alias("showingState.isShowingGameSelect"),
                isCustomGame: i.Ember.computed.alias("customGamesService.isCustomUI"),
                bgVerticalAnimation: i.Ember.computed("isShowingParty", "isShowingGameSelect", (function() {
                    const e = this.get("isShowingParty"),
                        t = this.get("isShowingGameSelect");
                    let n, s = "";
                    return e ? (s = "parties-top-to-btm", n = "/fe/lol-parties/sfx-gameselect-trans-to-lobby.ogg") : t && (s = "parties-btm-to-top", n = "/fe/lol-parties/sfx-lobby-trans-to-gameselect.ogg"), this.get("showingState.showVerticalAnimation") ? (this.get("bannerAnimationsEnabled") || this.playSound(n), this.set("selected.animationLock", !0), s) : ""
                })),
                didInsertElementListener: i.Ember.on("didInsertElement", (function() {
                    this.element.querySelector(".bg-current").addEventListener("animationend", (() => {
                        this.onAnimationEnd()
                    })), i.Viewport.sidebar().on("backgroundUnset", this._setSidebarBackground.bind(this))
                })),
                onAnimationEnd: function() {
                    this.set("showingState.showVerticalAnimation", !1), this.set("selected.animationLock", !1)
                },
                _backgroundById: function(e, t, n) {
                    let s = this.get("assets").getBackgroundAsset(e, t, n);
                    s || (s = this.get("backgroundAssets").find((t => t.id === e && t.isDefault)));
                    let i = "";
                    s && s.url && (i = s.url);
                    let o = "";
                    return s && s.sidebarBackgroundColor && (o = s.sidebarBackgroundColor), this.set("sidebarBackgroundColor", o), this._setSidebarBackground(), i
                },
                _setSidebarBackground: function() {
                    const e = i.Viewport.main().getCurrentScreenRoot();
                    e && e._id && "rcp-fe-lol-parties" === e._id.name && i.Viewport.sidebar().setBackgroundGradient(this.get("sidebarBackgroundColor"))
                }
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "6qcrC2aO",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\background-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\background-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\background-component\\\\index.js\\" "],["text","\\n"],["append",["helper",["uikit-background-switcher"],null,[["class","src","transitionType"],[["get",["isMatchmakingClassName"]],["get",["currentBackgroundUrl"]],["get",["transitionType"]]]]],false],["text","\\n\\n"],["open-element","div",[]],["static-attr","class","parties-background-mask"],["flush-element"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1),
                i = c(n(74)),
                o = c(n(143)),
                a = n(41),
                l = n(5),
                r = c(n(12));

            function c(e) {
                return e && e.__esModule ? e : {
                    default: e
                }
            }
            n(144), e.exports = s.Ember.Component.extend(o.default, i.default, {
                layout: n(145),
                customGamesService: s.Ember.inject.service("custom-games"),
                lobbiesService: s.Ember.inject.service("lobbies"),
                assets: s.Ember.inject.service(),
                isCustomGame: s.Ember.computed.alias("customGamesService.isCustomUI"),
                mapId: s.Ember.computed.alias("selected.mapId"),
                gameMode: s.Ember.computed.alias("selected.queue.gameMode"),
                assetMutator: s.Ember.computed.alias("selected.queue.assetMutator"),
                category: s.Ember.computed.alias("selected.queue.category"),
                pickType: s.Ember.computed.alias("selected.pickType"),
                queueId: s.Ember.computed.alias("selected.queueId"),
                isTFT: s.Ember.computed.alias("customGamesService.isTFT"),
                tutorialData: s.Ember.computed("assets.availableMaps", "mapId", "gameMode", "assetMutator", (function() {
                    const e = {
                            tutorialCards: [],
                            title: null,
                            subheader: null
                        },
                        t = this.get("assets").getMap(this.get("mapId"), this.get("gameMode"), this.get("assetMutator"));
                    return t && (Array.isArray(t.tutorialCards) && (e.tutorialCards = t.tutorialCards), e.title = t.locStrings.tutorial_title, e.subheader = t.locStrings.tutorial_subheader, e.tutorialBg = t.assets["tutorial-bg"] || "", e.iconV2 = t.assets["icon-v2"] || ""), e
                })),
                hasGameModeTutorial: s.Ember.computed.alias("tutorialData.tutorialCards.length"),
                isNotTFT: s.Ember.computed.not("lobbiesService.isTFT"),
                showMapNameAndTeamSize: s.Ember.computed.and("isNotTFT"),
                showPointEligibility: s.Ember.computed.and("isNotTFT"),
                mapName: s.Ember.computed("mapId", "assets.availableMaps", (function() {
                    const e = this.get("mapId"),
                        t = this.get("assetMutator");
                    return this.get("assets").getMap(e, this.get("gameMode"), t).name
                })),
                customGameName: s.Ember.computed.alias("customGamesService.gameName"),
                customTeamSize: s.Ember.computed.alias("customGamesService.teamSize"),
                customMutatorName: s.Ember.computed("customGamesService.mutatorName", "tra.ready", "tra.custom_game_mutator_type_blind", (function() {
                    const e = this.get("customGamesService.mutatorName");
                    return a.CUSTOM_GAME_MUTATOR_NAMES[e] ? this.get(`tra.custom_game_mutator_type_${a.CUSTOM_GAME_MUTATOR_NAMES[e]}`) : e
                })),
                queueName: s.Ember.computed("queueId", "queues.platformJson", (function() {
                    const e = this.get("queueId"),
                        t = this.get("queues.platformJson"),
                        n = e && Array.isArray(t) ? t.find((t => t.id === e)) : null;
                    return n ? n.shortName : ""
                })),
                pickTypeNameHidden: s.Ember.computed.empty("pickTypeName"),
                pickTypeName: s.Ember.computed("pickType", "tra.ready", "lobbiesService.isMap21", "lobbiesService.isTFT", "tra.game_select_pick_type_name_blind", (function() {
                    if (this.get("lobbiesService.isTFT")) return "";
                    if (this.get("lobbiesService.isMap21")) return this.get("tra.game_select_pick_type_name_blind");
                    const e = this.get("pickType");
                    return e ? this.get(`tra.game_select_pick_type_name_${e}`) : ""
                })),
                teamSize: s.Ember.computed("selected.maxPlaying", "isCustomGame", "customTeamSize", (function() {
                    let e;
                    return e = this.get("isCustomGame") ? this.get("customTeamSize") : this.get("selected.maxPlaying"), e ? this.translate("game_select_team_size", {
                        size: e
                    }) : ""
                })),
                mapBackgroundClass: s.Ember.computed("mapId", "gameMode", "assets.availableMaps", "assetMutator", (function() {
                    const e = this.get("assets").getMap(this.get("mapId"), this.get("gameMode"), this.get("assetMutator"));
                    return e ? r.default.mapKey({
                        mapId: e.id,
                        gameMode: e.gameMode
                    }) : ""
                })),
                didInsertElement() {
                    this._super(...arguments);
                    if (this.get("tutorialData").tutorialCards.length > 0) {
                        const e = this.get("mapId"),
                            t = this.get("gameMode"),
                            n = this.get("tutorialData"),
                            i = this.get("assetMutator");
                        s.PartyAPI._showGameModeTutorialIfNeeded(e, t, n.tutorialCards, i, n.title, n.subheader, n.tutorialBg, n.iconV2)
                    }
                },
                actions: {
                    showGameModeTutorial: function() {
                        this.playSound(l.SFX_URLS.SFX_SOC_UI_CLICK_GENERIC);
                        const e = this.get("gameMode"),
                            t = this.get("tutorialData");
                        s.PartyAPI._showGameModeTutorial(e, t.tutorialCards, t.title, t.subheader, t.tutorialBg, t.iconV2)
                    }
                }
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            e.exports = s.Ember.Mixin.create({
                translate: function(e, t) {
                    return this.get("tra.formatString")(e, t)
                }
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "f5ZWQMAj",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\header-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\header-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\header-component\\\\index.js\\" "],["text","\\n"],["block",["if"],[["get",["isCustomGame"]]],null,6,4]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","            "],["open-element","div",[]],["static-attr","class","lobby-header-eligibility lobby-header-interactable"],["flush-element"],["text","\\n              "],["append",["helper",["point-eligibility"],null,[["selected","isCustomGame"],[["get",["selected"]],false]]],false],["text","\\n            "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","            "],["open-element","lol-uikit-info-icon",[]],["static-attr","class","show-tutorial-button lobby-header-interactable"],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"showGameModeTutorial"],null],null],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","            "],["open-element","div",[]],["static-attr","class","lobby-header-separator"],["flush-element"],["close-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","lobby-header-sub-detail-regalia"],["flush-element"],["append",["unknown",["mapName"]],false],["close-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","lobby-header-sub-detail-regalia small-spacing"],["flush-element"],["append",["unknown",["teamSize"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","            "],["open-element","div",[]],["static-attr","class","lobby-header-separator"],["flush-element"],["close-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","lobby-header-detail-regalia"],["flush-element"],["append",["unknown",["pickTypeName"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","\\n  "],["open-element","div",[]],["static-attr","class","parties-header-container"],["dynamic-attr","data-parties-selected-category",["concat",[["unknown",["selected","category"]]]]],["dynamic-attr","data-parties-selected-queue-id",["concat",[["unknown",["selected","queueId"]]]]],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","lobby-header-wrapper"],["flush-element"],["text","\\n      "],["open-element","div",[]],["dynamic-attr","class",["concat",["lobby-header-map-icon ",["unknown",["mapBackgroundClass"]]]]],["flush-element"],["close-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","lobby-header-right-regalia"],["flush-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","lobby-header-details-container-regalia"],["flush-element"],["text","\\n          "],["open-element","div",[]],["static-attr","class","lobby-header-detail-regalia"],["flush-element"],["append",["unknown",["queueName"]],false],["close-element"],["text","\\n"],["block",["unless"],[["get",["pickTypeNameHidden"]]],null,3],["text","        "],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","lobby-header-details-container-regalia"],["flush-element"],["text","\\n"],["block",["if"],[["get",["showMapNameAndTeamSize"]]],null,2],["block",["if"],[["get",["hasGameModeTutorial"]]],null,1],["block",["if"],[["get",["showPointEligibility"]]],null,0],["text","        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n\\n"]],"locals":[]},{"statements":[["text","            "],["open-element","span",[]],["static-attr","class","lobby-header-game-type-detail"],["flush-element"],["append",["unknown",["teamSize"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","\\n  "],["open-element","div",[]],["static-attr","class","parties-header-container custom-header-container"],["dynamic-attr","data-parties-selected-category",["concat",[["unknown",["selected","category"]]]]],["dynamic-attr","data-parties-selected-queue-id",["concat",[["unknown",["selected","queueId"]]]]],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","lobby-header-wrapper custom-header-wrapper"],["flush-element"],["text","\\n      "],["open-element","div",[]],["dynamic-attr","class",["concat",["lobby-header-map-icon ",["unknown",["mapBackgroundClass"]]]]],["flush-element"],["close-element"],["text","\\n\\n      "],["open-element","div",[]],["static-attr","class","lobby-header-right"],["flush-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","lobby-header-details"],["flush-element"],["text","\\n          "],["open-element","span",[]],["static-attr","class","lobby-header-detail uppercase"],["flush-element"],["append",["unknown",["customGameName"]],false],["close-element"],["text","\\n        "],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","lobby-header-game-type-details"],["flush-element"],["text","\\n          "],["open-element","span",[]],["static-attr","class","lobby-header-game-type-detail lobby-header-custom-map-name"],["flush-element"],["append",["unknown",["mapName"]],false],["close-element"],["text","\\n"],["block",["unless"],[["get",["isTFT"]]],null,5],["text","          "],["open-element","span",[]],["static-attr","class","lobby-header-game-type-detail"],["flush-element"],["append",["unknown",["customMutatorName"]],false],["close-element"],["text","\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n\\n"]],"locals":[]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            n(147), e.exports = s.Ember.Component.extend({
                layout: n(148),
                classNames: ["parties-debug-tools"],
                selectedTab: "queues",
                selectedTabIsQueues: s.Ember.computed("selectedTab", (function() {
                    return "queues" === this.get("selectedTab")
                })),
                selectedTabIsCustoms: s.Ember.computed("selectedTab", (function() {
                    return "customs" === this.get("selectedTab")
                })),
                handleDidInsertElement: s.Ember.on("didInsertElement", (function() {
                    this.set("_keyDown", this.onKeyDown.bind(this)), document.addEventListener("keydown", this.get("_keyDown"))
                })),
                handleWillDestroyElement: s.Ember.on("willDestroyElement", (function() {
                    document.removeEventListener("keydown", this.get("_keyDown"))
                })),
                onKeyDown: function(e) {
                    e.ctrlKey && 89 === e.keyCode && this.$(".parties-debug-queues").toggle()
                },
                actions: {
                    selectTab(e) {
                        this.set("selectedTab", e)
                    }
                }
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "CpAhc+tC",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\debug-tools-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\debug-tools-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\debug-tools-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","parties-debug-queues"],["flush-element"],["text"," \\n  "],["open-element","h1",[]],["static-attr","class","parties-debug-title"],["flush-element"],["text","PARTIES - DEBUG"],["close-element"],["text","\\n  "],["open-element","span",[]],["static-attr","class","parties-debug-tip"],["flush-element"],["text","[ctrl-y to dismiss]"],["close-element"],["text","\\n  "],["open-element","lol-uikit-navigation-bar",[]],["static-attr","type","nav-bar-secondary"],["static-attr","direction","left"],["static-attr","selectedIndex","0"],["flush-element"],["text","\\n    "],["open-element","lol-uikit-navigation-item",[]],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"selectTab","queues"],null],null],["flush-element"],["text","Queues"],["close-element"],["text","\\n    "],["open-element","lol-uikit-navigation-item",[]],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"selectTab","customs"],null],null],["flush-element"],["text","Custom Games"],["close-element"],["text","\\n  "],["close-element"],["text","\\n\\n  "],["open-element","div",[]],["static-attr","class","parties-debug-tab-content"],["flush-element"],["text","\\n"],["block",["if"],[["get",["selectedTabIsQueues"]]],null,1],["block",["if"],[["get",["selectedTabIsCustoms"]]],null,0],["text","  "],["close-element"],["text","\\n"],["close-element"],["text"," \\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["append",["unknown",["parties-debug-custom-lobby"]],false],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["append",["helper",["parties-debug-queue-lobby"],null,[["selected","showingState"],[["get",["selected"]],["get",["showingState"]]]]],false],["text"," \\n"]],"locals":[]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s, i = n(1),
                o = (s = n(16)) && s.__esModule ? s : {
                    default: s
                };
            n(150);
            var a = n(151);
            e.exports = i.Ember.Component.extend({
                layout: n(152),
                classNames: ["parties-debug-custom-lobby"],
                assetsService: i.Ember.inject.service("assets"),
                customGamesService: i.Ember.inject.service("custom-games"),
                platformConfigSingleton: o.default,
                availableMaps: i.Ember.computed.alias("assetsService.availableMaps"),
                availableModes: i.Ember.computed.alias("platformConfigSingleton.enabledCustomGameModes"),
                defaultGameName: i.Ember.computed.alias("customGamesService.defaultGameName"),
                supportedMapSummaries: i.Ember.computed("availableMaps", "availableModes", (function() {
                    const e = this.get("availableMaps"),
                        t = this.get("availableModes"),
                        n = this._mapsById(e),
                        s = i.Ember.A(this._reduceToMapSummaries(n, t)),
                        o = this.get("selectedMapId"),
                        a = this.get("selectedModeId");
                    for (let e = s.length - 1; e >= 0; --e)
                        if (s[e].mapId === o || 0 === e) {
                            const t = s[e];
                            t.selected = !0, this.set("selectedMapId", t.mapId);
                            let n = t.supportedModes[0];
                            if (a) {
                                const e = t.supportedModes.find((e => e.id === a));
                                e && (n = e)
                            }
                            n.selected = !0, this.set("selectedModeId", n.id);
                            break
                        } return s
                })),
                selectedMapId: 11,
                selectedModeId: null,
                selectedTeamSize: 5,
                selectedChampSelectId: 1,
                selectedGameServerRegion: null,
                errorText: null,
                selectedMapSummary: i.Ember.computed("supportedMapSummaries", "selectedMapId", (function() {
                    const e = this.get("supportedMapSummaries"),
                        t = this.get("selectedMapId");
                    let n = null;
                    if (e && t) {
                        const s = e.find((e => e.mapId === t));
                        s && (n = s)
                    }
                    return n
                })),
                selectedModeSummary: i.Ember.computed("selectedMapSummary", "selectedModeId", (function() {
                    const e = this.get("selectedMapSummary"),
                        t = this.get("selectedModeId");
                    let n = null;
                    if (e && t) {
                        const s = e.supportedModes.find((e => e.id === t));
                        s && (n = s)
                    }
                    return n
                })),
                teamSizeOptions: i.Ember.computed((function() {
                    const e = [],
                        t = this.get("selectedTeamSize");
                    for (let n = 1; n <= 5; ++n) e.push({
                        value: n,
                        selected: t === n
                    });
                    return e
                })),
                champSelectStrategyOptions: i.Ember.computed("selectedChampSelectId", (function() {
                    const e = i.Ember.A(),
                        t = this.get("selectedChampSelectId");
                    return a.DEBUG_CHAMP_SELECT_STRATEGIES.forEach((n => {
                        const s = {
                            name: n.name,
                            id: n.id,
                            selected: t === n.id || void 0
                        };
                        e.push(s)
                    })), e
                })),
                createButtonEnabled: i.Ember.computed("selectedModeSummary", (function() {
                    const e = this.get("selectedModeSummary");
                    return e && e.enabled
                })),
                gameServerRegionOptions: i.Ember.computed.alias("customGamesService.gameServerRegionOptions"),
                _mapsById: function(e) {
                    const t = {};
                    return e.forEach((e => {
                        const n = e.id;
                        t[n] || (t[n] = []), t[n].push(e)
                    })), t
                },
                _reduceToMapSummaries: function(e, t) {
                    const n = [];
                    return Object.keys(e).forEach((s => {
                        let i = e[s];
                        i.sort(((e, t) => e.gameMutator ? 1 : t.gameMutator ? -1 : 0));
                        const o = [];
                        i = i.filter((e => !o.includes(e.gameMode) && (o.push(e.gameMode), !0)));
                        const a = this._reduceToMapSummary(i, t);
                        a && n.push(a)
                    })), n
                },
                _reduceToMapSummary: function(e, t) {
                    let n = null;
                    return e.length > 0 && (n = {
                        mapId: e[0].id,
                        mapName: e[0].name,
                        supportedModes: []
                    }, n.mapName || (n.mapName = `Map ${n.mapId}`), e.forEach((e => {
                        const s = {
                            id: `${n.mapId}-${e.gameMode}`,
                            name: e.gameModeName,
                            gameMode: e.gameMode,
                            enabled: t && t.includes(e.gameMode)
                        };
                        n.supportedModes.push(s)
                    }))), n
                },
                _setSelectedMapId: function(e) {
                    const t = this.get("selectedMapId");
                    if (this.set("selectedMapId", e), e !== t) {
                        const e = this.get("selectedMapSummary");
                        e && this.set("selectedModeId", e.supportedModes[0].id)
                    }
                },
                _clearErrorText: function() {
                    this.set("errorText", null)
                },
                _nameInputElement: function() {
                    return this.element ? this.element.querySelector("input#debug-custom-game-name") : null
                },
                getLobbyName: function() {
                    const e = this._nameInputElement();
                    return e && e.value ? e.value : this.get("defaultGameName")
                },
                _buildV2LobbyPayload: function() {
                    const e = this.get("selectedMapSummary"),
                        t = this.get("selectedModeSummary"),
                        n = this.get("selectedTeamSize"),
                        s = this.get("selectedChampSelectId"),
                        i = this.get("selectedGameServerRegion"),
                        o = this.getLobbyName(),
                        a = {
                            customGameLobby: {
                                configuration: {
                                    gameMode: t.gameMode,
                                    mapId: e.mapId,
                                    gameTypeConfig: {
                                        id: s
                                    },
                                    spectatorPolicy: "AllAllowed",
                                    teamSize: n
                                },
                                lobbyName: o
                            },
                            isCustom: !0
                        };
                    return i && "default" !== i.toLowerCase() && (a.customGameLobby.configuration.gameServerRegion = i), a
                },
                _createDebugCustomLobby: function() {
                    const e = this._buildV2LobbyPayload(),
                        t = "v2/lobby";
                    return i.logger.trace(`Creating DEBUG custom-game using /lol-lobby/${t} endpoint: ${JSON.stringify(e)}`), (0, i.dataBinding)("/lol-lobby").post(t, e).catch((e => Promise.reject(e)))
                },
                actions: {
                    createDebugLobby() {
                        this._clearErrorText(), this._createDebugCustomLobby().then(null, (e => {
                            this.set("errorText", JSON.stringify(e, null, 2))
                        }))
                    },
                    toggleAdvancedOptions() {
                        const e = "hidden",
                            t = this.$(".parties-debug-advanced-options");
                        t.hasClass(e) ? t.removeClass(e) : t.addClass(e)
                    },
                    selectMap(e) {
                        this._clearErrorText(), this._setSelectedMapId(e)
                    },
                    selectMode(e) {
                        this._clearErrorText(), this.set("selectedModeId", e)
                    },
                    selectTeamSize(e) {
                        this._clearErrorText(), this.set("selectedTeamSize", e)
                    },
                    selectChampSelectId(e) {
                        this._clearErrorText(), this.set("selectedChampSelectId", e)
                    },
                    selectGameServerRegion(e) {
                        this._clearErrorText(), this.set("selectedGameServerRegion", e)
                    }
                }
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.DEBUG_CHAMP_SELECT_STRATEGIES = void 0;
            t.DEBUG_CHAMP_SELECT_STRATEGIES = [{
                name: "Blind",
                id: 1
            }, {
                name: "OFA Vote",
                id: 14
            }]
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "HMOYKfIs",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\debug-tools-component\\\\debug-custom-lobby-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\debug-tools-component\\\\debug-custom-lobby-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\debug-tools-component\\\\debug-custom-lobby-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","parties-debug-custom-lobby"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","parties-debug-custom-game-config"],["flush-element"],["text","\\n    "],["open-element","lol-uikit-scrollable",[]],["flush-element"],["text","\\n      "],["open-element","label",[]],["static-attr","for","parties-debug-maps-dropdown"],["flush-element"],["text","Map"],["close-element"],["text","\\n      "],["open-element","lol-uikit-framed-dropdown",[]],["static-attr","id","parties-debug-maps-dropdown"],["flush-element"],["text","\\n"],["block",["each"],[["get",["supportedMapSummaries"]]],null,8],["text","      "],["close-element"],["text","\\n\\n"],["block",["if"],[["get",["selectedMapSummary"]]],null,7],["text","\\n"],["block",["if"],[["get",["selectedModeSummary"]]],null,4],["text","    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n\\n  "],["open-element","label",[]],["static-attr","for","parties-debug-game-name-input"],["flush-element"],["text","Game Name"],["close-element"],["text","\\n  "],["open-element","lol-uikit-flat-input",[]],["static-attr","id","parties-debug-game-name-input"],["flush-element"],["text","\\n    "],["open-element","input",[]],["static-attr","type","text"],["static-attr","name","debug-custom-game-name"],["static-attr","id","debug-custom-game-name"],["dynamic-attr","value",["concat",[["unknown",["defaultGameName"]]]]],["static-attr","maxlength","30"],["flush-element"],["close-element"],["text","\\n  "],["close-element"],["text","\\n\\n  "],["open-element","label",[]],["static-attr","for","parties-debug-advanced-options"],["modifier",["action"],[["get",[null]],"toggleAdvancedOptions"],[["on"],["click"]]],["flush-element"],["text","Show Advanced Options"],["close-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","parties-debug-advanced-options hidden"],["flush-element"],["text","\\n    "],["open-element","label",[]],["static-attr","for","parties-debug-game-server-region-dropdown"],["flush-element"],["text","Game Region"],["close-element"],["text","\\n    "],["open-element","lol-uikit-framed-dropdown",[]],["static-attr","id","parties-debug-game-server-region-dropdown"],["flush-element"],["text","\\n      "],["open-element","lol-uikit-dropdown-option",[]],["static-attr","slot","lol-uikit-dropdown-option"],["static-attr","selected","true"],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"selectGameServerRegion","default"],null],null],["flush-element"],["text","Default"],["close-element"],["text","\\n"],["block",["each"],[["get",["gameServerRegionOptions"]]],null,1],["text","    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n\\n"],["block",["if"],[["get",["errorText"]]],null,0],["text","  "],["open-element","lol-uikit-flat-button",[]],["dynamic-attr","disabled",["helper",["if"],[["get",["createButtonEnabled"]],null,true],null],null],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"createDebugLobby"],null],null],["flush-element"],["text","Create Lobby"],["close-element"],["text"," \\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","parties-debug-custom-lobby-error"],["flush-element"],["text","\\n    "],["open-element","lol-uikit-scrollable",[]],["flush-element"],["text","\\n    "],["append",["unknown",["errorText"]],false],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","lol-uikit-dropdown-option",[]],["static-attr","slot","lol-uikit-dropdown-option"],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"selectGameServerRegion",["get",["gameServerRegionOption","value"]]],null],null],["flush-element"],["text","\\n          "],["append",["unknown",["gameServerRegionOption","value"]],false],["text","\\n        "],["close-element"],["text","\\n"]],"locals":["gameServerRegionOption"]},{"statements":[["text","        "],["open-element","lol-uikit-dropdown-option",[]],["static-attr","slot","lol-uikit-dropdown-option"],["dynamic-attr","selected",["unknown",["champSelectOption","selected"]],null],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"selectChampSelectId",["get",["champSelectOption","id"]]],null],null],["flush-element"],["text","\\n        "],["append",["unknown",["champSelectOption","name"]],false],["text","\\n        "],["close-element"],["text","\\n"]],"locals":["champSelectOption"]},{"statements":[["text","        "],["open-element","lol-uikit-dropdown-option",[]],["static-attr","slot","lol-uikit-dropdown-option"],["dynamic-attr","selected",["unknown",["sizeOption","selected"]],null],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"selectTeamSize",["get",["sizeOption","value"]]],null],null],["flush-element"],["text","\\n        "],["append",["unknown",["sizeOption","value"]],false],["text","\\n        "],["close-element"],["text","\\n"]],"locals":["sizeOption"]},{"statements":[["text","      "],["open-element","label",[]],["static-attr","for","parties-debug-teamsize-dropdown"],["flush-element"],["text","Team Size"],["close-element"],["text","\\n      "],["open-element","lol-uikit-framed-dropdown",[]],["static-attr","id","parties-debug-teamsize-dropdown"],["flush-element"],["text","\\n"],["block",["each"],[["get",["teamSizeOptions"]]],null,3],["text","      "],["close-element"],["text","\\n\\n      "],["open-element","label",[]],["static-attr","for","parties-debug-pick-format-dropdown"],["flush-element"],["text","Pick Format"],["close-element"],["text","\\n      "],["open-element","lol-uikit-framed-dropdown",[]],["static-attr","id","parties-debug-pick-format-dropdown"],["flush-element"],["text","\\n"],["block",["each"],[["get",["champSelectStrategyOptions"]]],null,2],["text","      "],["close-element"],["text","\\n\\n"]],"locals":[]},{"statements":[["text","          "],["open-element","span",[]],["static-attr","class","parties-debug-mode-disabled"],["flush-element"],["text","DISABLED - "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","lol-uikit-dropdown-option",[]],["static-attr","slot","lol-uikit-dropdown-option"],["dynamic-attr","selected",["unknown",["modeSummary","selected"]],null],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"selectMode",["get",["modeSummary","id"]]],[["on"],["click"]]],null],["flush-element"],["text","\\n"],["block",["unless"],[["get",["modeSummary","enabled"]]],null,5],["text","          "],["open-element","span",[]],["flush-element"],["append",["unknown",["modeSummary","gameMode"]],false],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":["modeSummary"]},{"statements":[["text","      "],["open-element","label",[]],["static-attr","for","parties-debug-modes-dropdown"],["flush-element"],["text","Mode"],["close-element"],["text","\\n      "],["open-element","lol-uikit-framed-dropdown",[]],["static-attr","id","parties-debug-modes-dropdown"],["flush-element"],["text","\\n"],["block",["each"],[["get",["selectedMapSummary","supportedModes"]]],null,6],["text","      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","lol-uikit-dropdown-option",[]],["static-attr","slot","lol-uikit-dropdown-option"],["dynamic-attr","selected",["unknown",["mapSummary","selected"]],null],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"selectMap",["get",["mapSummary","mapId"]]],[["on"],["click"]]],null],["flush-element"],["text","\\n        "],["append",["unknown",["mapSummary","mapName"]],false],["text","\\n        "],["close-element"],["text","\\n"]],"locals":["mapSummary"]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            n(154), e.exports = s.Ember.Component.extend({
                layout: n(155),
                classNames: ["parties-debug-queue-lobby"],
                omitDisabledQueues: !0,
                lobbiesService: s.Ember.inject.service("lobbies"),
                queues: s.Ember.computed.alias("lobbiesService.queues"),
                selectedQueueId: s.Ember.computed.alias("lobbiesService.queueId"),
                assetsService: s.Ember.inject.service("assets"),
                availableMaps: s.Ember.computed.alias("assetsService.availableMaps"),
                debugMaps: s.Ember.computed("availableMaps.[]", "availableMaps.@each.id", "queues.[]", "omitDisabledQueues", (function() {
                    const e = s.Ember.A();
                    let t = null;
                    if (this.get("availableMaps").forEach((n => {
                            const s = this.get("omitDisabledQueues") ? this.getFirstEnabledQueue(n) : this.get("queues");
                            if (!e.findBy("id", n.id) && s) {
                                const s = {},
                                    i = this.get("selectedMap");
                                s.id = n.id, i && i.id === n.id ? (s.selected = "selected", t = n.id) : s.selected = null, s.name = n.name || `Map ${n.id}`, 11 === s.id ? e.unshift(s) : e.push(s)
                            }
                        })), !t) {
                        this.set("selectedMap", {
                            id: 11
                        });
                        const t = e.findBy("id", 11);
                        t && (t.selected = "selected")
                    }
                    return e
                })),
                debugTypes: s.Ember.computed("queues.[]", "selectedMap", "debugMaps.@each.id", "omitDisabledQueues", (function() {
                    const e = s.Ember.A(),
                        t = this.queuesForSelectedMap(),
                        n = !this.get("omitDisabledQueues");
                    return t.forEach((t => {
                        if (!e.findBy("id", t.id)) {
                            if (!t.isTeamBuilderManaged) return;
                            const s = "Available" === t.queueAvailability;
                            if (s || !s && n) {
                                const n = {},
                                    i = this.get("selectedType");
                                n.id = t.id, n.selected = i && i.id === t.id ? "selected" : null, n.name = t.type, n.numPlayers = t.numPlayersPerTeam + "x" + t.numPlayersPerTeam, n.disabled = !s, n.isTeamBuilderManaged = t.isTeamBuilderManaged, e.push(n)
                            }
                        }
                    })), e.sortBy("id")
                })),
                typesDropdownDisabled: s.Ember.computed("selectedMap", "debugTypes", (function() {
                    return !this.get("selectedMap") || this.get("debugTypes").length < 1
                })),
                createButtonDisabled: s.Ember.computed("selectedMap", "debugTypes", "selectedType", (function() {
                    return !this.get("selectedMap") || !this.get("selectedType") || this.get("debugTypes").length < 1
                })),
                getFirstEnabledQueue: function(e) {
                    let t = null;
                    const n = this.get("queues");
                    for (let s = 0; s < n.length; s++) {
                        const n = this.get("queues")[s];
                        if (n.mapId === e.id && "Available" === n.queueAvailability) {
                            t = n;
                            break
                        }
                    }
                    return t
                },
                queuesForSelectedMap: function() {
                    const e = this.get("selectedMap");
                    return e ? this.get("queues").filterBy("mapId", e.id) : this.get("queues")
                },
                actions: {
                    debugSetGameMode: function() {
                        const e = this.get("selectedType").id;
                        this.set("selected.isUpdatingSelection", !0), this.set("selected.queueId", e), this.get("lobbiesService").createLobbyWithQueueId(e).then((() => {
                            this.set("selected.isUpdatingSelection", !1), this.get("showingState").showParty()
                        }))
                    },
                    setDebugMap: function(e) {
                        this.set("selectedMap", e), this.set("selectedType", null)
                    },
                    setDebugType: function(e) {
                        this.set("selectedType", e)
                    }
                }
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "g8ubmDbY",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\debug-tools-component\\\\debug-queue-lobby-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\debug-tools-component\\\\debug-queue-lobby-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\debug-tools-component\\\\debug-queue-lobby-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","parties-debug-queues-wrapper"],["flush-element"],["text","\\n  "],["open-element","lol-uikit-flat-checkbox",[]],["static-attr","class","parties-debug-show-disabled-queues"],["flush-element"],["text","\\n    "],["append",["helper",["input"],null,[["slot","id","type","checked"],["input","parties-debug-show-disabled-queues-check","checkbox",["get",["omitDisabledQueues"]]]]],false],["text","\\n    "],["open-element","label",[]],["static-attr","slot","label"],["static-attr","for","parties-debug-show-disabled-queues-check"],["flush-element"],["text","Hide Disabled Queues"],["close-element"],["text","\\n  "],["close-element"],["text","\\n\\n  "],["open-element","label",[]],["static-attr","for","parties-debug-maps-dropdown"],["flush-element"],["text","Map"],["close-element"],["text","\\n  "],["open-element","lol-uikit-framed-dropdown",[]],["static-attr","id","parties-debug-maps-dropdown"],["flush-element"],["text","\\n"],["block",["each"],[["get",["debugMaps"]]],null,2],["text","  "],["close-element"],["text","\\n\\n  "],["open-element","label",[]],["static-attr","for","parties-debug-types-dropdown"],["flush-element"],["text","Game Type"],["close-element"],["text","\\n  "],["open-element","lol-uikit-framed-dropdown",[]],["dynamic-attr","disabled",["helper",["if"],[["get",["typesDropdownDisabled"]],true,null],null],null],["static-attr","id","parties-debug-types-dropdown"],["flush-element"],["text","\\n"],["block",["each"],[["get",["debugTypes"]]],null,1],["text","  "],["close-element"],["text","\\n\\n  "],["open-element","span",[]],["static-attr","class","parties-debug-selected-queue"],["flush-element"],["text","\\n"],["block",["if"],[["get",["selectedType","id"]]],null,0],["text","  "],["close-element"],["text","\\n  "],["open-element","lol-uikit-flat-button",[]],["dynamic-attr","disabled",["helper",["if"],[["get",["createButtonDisabled"]],true,null],null],null],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"debugSetGameMode"],[["on"],["click"]]],null],["flush-element"],["text","Create Lobby"],["close-element"],["text","\\n"],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    Selected QueueId: "],["append",["unknown",["selectedType","id"]],false],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","lol-uikit-dropdown-option",[]],["static-attr","slot","lol-uikit-dropdown-option"],["dynamic-attr","selected",["unknown",["type","selected"]],null],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"setDebugType",["get",["type"]]],[["on"],["click"]]],null],["flush-element"],["text","\\n      "],["open-element","span",[]],["static-attr","class","parties-debug-disabled"],["flush-element"],["append",["helper",["if"],[["get",["type","disabled"]],"DISABLED - "],null],false],["close-element"],["text","\\n      "],["open-element","span",[]],["static-attr","class","parties-debug-tb"],["flush-element"],["append",["helper",["if"],[["get",["type","isTeamBuilderManaged"]],"TB - "],null],false],["close-element"],["text","\\n      "],["append",["unknown",["type","numPlayers"]],false],["text"," - "],["append",["unknown",["type","name"]],false],["text"," - ("],["append",["unknown",["type","id"]],false],["text",")\\n      "],["close-element"],["text","\\n"]],"locals":["type"]},{"statements":[["text","    "],["open-element","lol-uikit-dropdown-option",[]],["static-attr","slot","lol-uikit-dropdown-option"],["dynamic-attr","selected",["unknown",["map","selected"]],null],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"setDebugMap",["get",["map"]]],[["on"],["click"]]],null],["flush-element"],["text","\\n      "],["append",["unknown",["map","name"]],false],["text","\\n    "],["close-element"],["text","\\n"]],"locals":["map"]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            const i = [n(34).SEARCH_ERROR_TYPES.LEAVER_BUSTER_TAINTED_WARNING];
            e.exports = s.Ember.Component.extend({
                lobbiesService: s.Ember.inject.service("lobbies"),
                matchmakingService: s.Ember.inject.service("matchmaking"),
                summonerService: s.Ember.inject.service("summoner"),
                _isTransitioningState: null,
                _notifiedSearchErrorIds: s.Ember.Object.create({}),
                _visibleErrorModals: {},
                searchErrorObserver: s.Ember.on("init", s.Ember.observer("matchmakingService.longestSearchError", "matchmakingService.matchmakingErrorState", (function() {
                    s.Ember.run.once(this, (function() {
                        const e = this.get("matchmakingService.longestSearchError"),
                            t = e.id,
                            n = this.get("_notifiedSearchErrorIds"),
                            s = n.hasOwnProperty(e.id),
                            i = e.errorType,
                            o = "Error" === this.get("matchmakingService.matchmakingErrorState"),
                            a = this.get("lobbiesService.inLobby");
                        t > -1 && i && !s && o && a ? (n[e.get("id")] = !0, this.showQueueErrorModal(e.errorType, e.get("id"), e.penalizedSummonerId), this.set("_isTransitioningState", !1)) : this.hideVisibleExpiredErrors()
                    }))
                }))),
                hideVisibleExpiredErrors: function() {
                    const e = this.get("_visibleErrorModals"),
                        t = s.lodash.keys(e);
                    if (0 === t.length) return;
                    const n = this.get("matchmakingService.validSearchErrorIds"),
                        i = s.UIKit.getModalManager();
                    t.forEach((t => {
                        const s = parseInt(t, 10); - 1 === n.indexOf(s) && (i.remove(e[t]), delete e[t])
                    })), this.set("_visibleErrorModals", e)
                },
                isErrorHandledByOtherPlugin: function(e, t, n) {
                    return !(!i.includes(e) || t && !n)
                },
                showQueueErrorModal: function(e, t, n) {
                    const i = {
                            penalizedSummonerId: n
                        },
                        o = this.get("lobbiesService.isCurrentPlayerPartyLeader"),
                        a = this.get("summonerService.localSummonerId") === n;
                    if (this.isErrorHandledByOtherPlugin(e, o, a)) return;
                    const l = s.UIKit.getModalManager(),
                        r = s.ComponentFactory.create("PartyQueueErrorDialogComponent", {
                            errorType: e,
                            errorData: i
                        }),
                        {
                            domNode: c
                        } = r,
                        m = this.get("tra.lib_ui_dialog_alert_ok"),
                        u = this.get("_visibleErrorModals"),
                        d = l.add({
                            type: "DialogAlert",
                            data: {
                                contents: c,
                                okText: m
                            }
                        });
                    u[t] = d, this.set("_visibleErrorModals", u), d.okPromise.then((() => {
                        const e = this.get("_visibleErrorModals");
                        e[t] && (delete e[t], this.set("_visibleErrorModals", e))
                    }))
                }
            })
        }, (e, t, n) => {
            "use strict";
            var s, i = n(1),
                o = (s = n(19)) && s.__esModule ? s : {
                    default: s
                },
                a = n(15);
            n(158);
            const {
                RunMixin: l
            } = i.EmberAddons.EmberLifeline, r = i.UIKit.getTooltipManager(), c = i.UIKit.getTemplateHelper();
            e.exports = i.Ember.Component.extend(l, {
                layout: n(159),
                positionError: null,
                positionWarning: null,
                premadeSizeAllowed: null,
                allowablePremadeSizes: null,
                currentPartySize: null,
                autoFillEligible: !1,
                autoFillProtectedForStreaking: !1,
                autoFillProtectedForPromos: !1,
                autoFillProtectedForSoloing: !1,
                shouldShowBetaWatermark: !1,
                disabledReasons: i.Ember.A(),
                lobbiesService: i.Ember.inject.service("lobbies"),
                eligibilityService: i.Ember.inject.service("queue-eligibility"),
                eligibilitiesEntity: o.default,
                restrictions: i.Ember.computed.alias("eligibilitiesEntity.restrictions"),
                warnings: i.Ember.computed.alias("eligibilitiesEntity.warnings"),
                hasLobbyRestrictions: i.Ember.computed.or("eligibilitiesEntity.hasLobbyRestrictions", "shouldShowPremadeSizeError"),
                shouldShowRestrictionTooltip: i.Ember.computed("restrictions", (function() {
                    return this.get("restrictions").filter((e => e.restrictionCode !== a.TFT_NEW_PLAYER_RESTRICTION)).length > 0
                })),
                hasTFTNewPlayerRestriction: i.Ember.computed("restrictions", (function() {
                    return !!this.get("restrictions").find((e => e.restrictionCode === a.TFT_NEW_PLAYER_RESTRICTION))
                })),
                teamSizeRestrictionMembers: i.Ember.computed("restrictions", "restrictions.[]", (function() {
                    const e = this.get("restrictions");
                    if (e)
                        for (let t = 0; t < e.length; t++)
                            if ("TeamSizeRestriction" === e[t].restrictionCode) return e[t].summonerIds.length;
                    return 0
                })),
                hasQueueAvailabilityWarning: i.Ember.computed.alias("lobbiesService.hasQueueAvailabilityWarning"),
                queueAvailabilityWarningTooltip: i.Ember.computed.alias("lobbiesService.queueAvailabilityWarningTooltip"),
                mmrStandardDeviationWarning: i.Ember.computed.alias("tra.parties_large_skill_gap_warning"),
                mmrStandardDeviationWarningTooltip: i.Ember.computed.alias("tra.parties_large_skill_gap_warning_tooltip"),
                hasMmrStandardDeviationWarning: i.Ember.computed("warnings.[]", (function() {
                    const e = this.get("warnings");
                    if (e)
                        for (let t = 0; t < e.length; t++) {
                            if ("MmrStandardDeviationTooLarge" === e[t].restrictionCode) return !0
                        }
                    return !1
                })),
                shouldShowAutoFillStatus: i.Ember.computed("autoFillEligible", "autoFillProtectedForStreaking", "autoFillProtectedForPromos", "autoFillProtectedForSoloing", (function() {
                    return this.get("autoFillEligible") || this.get("autoFillProtectedForStreaking") || this.get("autoFillProtectedForPromos") || this.get("autoFillProtectedForSoloing")
                })),
                shouldShowPremadeSizeError: i.Ember.computed.not("premadeSizeAllowed"),
                premadeSizeErrorText: i.Ember.computed("premadeSizeAllowed", "tra.game_select_queue_restriction_party_teamsizerestriction", "tra.ready", "teamSizeRestrictionMembers", "tra.parties_premade_size_restriction", "tra.parties_premade_size_restriction_singular", "tra.parties_premade_size_fives", "allowablePremadeSizes", "restrictions", "restrictions.[]", "restrictions.@each.summonerIdsString", (function() {
                    const e = this.get("teamSizeRestrictionMembers"),
                        t = this.get("allowablePremadeSizes");
                    if (t && 1 === t.length && 5 === t[0]) return this.get("tra.parties_premade_size_fives");
                    if (e > 1) {
                        const t = {
                            teamSizeRestriction: e
                        };
                        return this.get("tra").formatString("game_select_queue_restriction_party_teamsizerestriction", t)
                    }
                    if (1 === e) return this.get("tra.parties_premade_size_restriction_singular");
                    const n = {
                        num: e
                    };
                    return this.get("tra").formatString("parties_premade_size_restriction", n)
                })),
                tftNewPlayerErrorText: i.Ember.computed("tra.game_select_queue_restriction_party_tftnewplayerlobbyrestriction", "lobbiesService.currentQueue", "eligibilityService.newTFTPlayers", "lobbiesService.currentPartyMembers.@each.puuid", (function() {
                    const e = this.get("lobbiesService.currentQueue"),
                        t = e ? e.description : "",
                        n = this.get("eligibilityService.newTFTPlayers"),
                        s = this.get("lobbiesService.currentPartyMembers"),
                        i = {
                            gameMode: t,
                            players: n.map((e => {
                                const t = s.find((t => t.summonerId === e));
                                return t ? t.summonerName : ""
                            })).join(",")
                        };
                    return this.get("tra").formatString("game_select_queue_restriction_party_tftnewplayerlobbyrestriction", i)
                })),
                shouldShowAutoFillProtection: i.Ember.computed("autoFillProtectedForStreaking", "autoFillProtectedForPromos", "autoFillProtectedForSoloing", (function() {
                    return this.get("autoFillProtectedForStreaking") || this.get("autoFillProtectedForPromos") || this.get("autoFillProtectedForSoloing")
                })),
                classNames: ["parties-footer-notifications"],
                warningTooltipText: i.Ember.computed("tra.parties_autofill_tooltip", "tra.parties_autofill_streak_protection", "tra.parties_autofill_promo_protection", "tra.parties_autofill_solo_protection", "autoFillEligible", "autoFillProtectedForStreaking", "autoFillProtectedForPromos", "autoFillProtectedForSoloing", (function() {
                    return this.get("autoFillEligible") ? this.get("tra.parties_autofill_tooltip") : this.get("autoFillProtectedForSoloing") ? this.get("tra.parties_autofill_solo_protection") : this.get("autoFillProtectedForPromos") ? this.get("tra.parties_autofill_promo_protection") : this.get("autoFillProtectedForStreaking") ? this.get("tra.parties_autofill_streak_protection") : void 0
                })),
                tooltipConfig: {
                    targetAnchor: {
                        x: "center",
                        y: "top"
                    },
                    tooltipAnchor: {
                        x: "center",
                        y: "bottom"
                    },
                    offset: {
                        x: 0,
                        y: 0
                    }
                },
                restrictionsText: i.Ember.computed("shouldShowPremadeSizeError", "hasLobbyRestrictions", "teamSizeRestrictionMembers", "hasTFTNewPlayerRestriction", "restrictions.@each.summonerIdsString", "tra.ready", "tra.game_select_queue_restriction_party_notification", "eligibilityService.partyHasNewTFTPlayer", "tftNewPlayerErrorText", (function() {
                    return this.get("shouldShowPremadeSizeError") ? this.get("premadeSizeErrorText") : this.get("teamSizeRestrictionMembers") > 0 ? this.get("tra.game_select_queue_restriction_party_notification") : this.get("hasTFTNewPlayerRestriction") && this.get("eligibilityService.partyHasNewTFTPlayer") ? this.get("tftNewPlayerErrorText") : ""
                })),
                restrictionsTooltipTextObserver: i.Ember.on("init", i.Ember.observer("hasLobbyRestrictions", "restrictions.@each.restrictionCode", "restrictions.@each.summonerIdsString", "restrictions", "lobbiesService.currentPartyMembers.@each.summonerId", "lobbiesService.queueId", "tra.ready", (function() {
                    i.Ember.run.once(this, (() => {
                        this.generateRestrictionStringsForParty()
                    }))
                }))),
                generateRestrictionStringsForParty: function() {
                    if (this.get("hasLobbyRestrictions")) {
                        const e = this.get("eligibilitiesEntity").groupMissingTokenRestrictions(this.get("restrictions")),
                            t = [];
                        if (e) {
                            const n = this.get("lobbiesService.queueId"),
                                s = this.get("eligibilityService");
                            return s && s.generateRestrictionForParty ? (e.forEach((e => {
                                e.restrictionCode !== a.TFT_NEW_PLAYER_RESTRICTION && (e.queueId = n, t.push(s.generateRestrictionForParty(e)))
                            })), Promise.all(t).then((e => {
                                this.set("disabledReasons", i.Ember.A(e))
                            }))) : Promise.resolve()
                        }
                    }
                    return Promise.resolve()
                },
                restrictionLeaderClass: i.Ember.computed("isCurrentPlayerPartyLeader", (function() {
                    return this.get("isCurrentPlayerPartyLeader") ? "leader" : ""
                })),
                showQueueAvailabilityTooltip: i.Ember.on("didInsertElement", i.Ember.observer("hasQueueAvailabilityWarning", (function() {
                    this.runTask((() => this.updateQueueAvailabilityWarningTooltip()), 250)
                }))),
                updateQueueAvailabilityWarningTooltip: function() {
                    const e = this.element.querySelector(".parties-queue-warning-error");
                    if (this.get("hasQueueAvailabilityWarning")) {
                        let t = this.get("_queueAvailabilityWarningTooltipDOM");
                        if (!t) {
                            t = document.createElement("lol-uikit-tooltip"), t.classList.add("parties-footer-tooltip");
                            const e = c.contentBlockDialogSimple(this.get("queueAvailabilityWarningTooltip"));
                            e.setAttribute("type", "tooltip-large"), t.appendChild(e), this.set("_queueAvailabilityWarningTooltipDOM", t)
                        }
                        r.assign(e, t, {}, this.get("tooltipConfig")), r.show(e)
                    } else r.unassign(e)
                }
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "dEE2vsH6",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\footer-notifications-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\footer-notifications-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\footer-notifications-component\\\\index.js\\" "],["text","\\n"],["block",["if"],[["get",["hasQueueAvailabilityWarning"]]],null,21,20]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","parties-beta-watermark"],["flush-element"],["text","\\n    "],["append",["unknown",["tra","parties_game_mode_beta"]],false],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["shouldShowBetaWatermark"]]],null,0]],"locals":[]},{"statements":[["text","      "],["open-element","lol-uikit-content-block",[]],["static-attr","class","parties-footer-tooltip"],["static-attr","type","tooltip-large"],["flush-element"],["text","\\n        "],["append",["unknown",["warningTooltipText"]],false],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","div",[]],["static-attr","class","parties-autofill-warning-icon"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","div",[]],["static-attr","class","parties-autofill-protection-icon"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["shouldShowAutoFillProtection"]]],null,4,3],["text","      "],["append",["unknown",["positionWarning"]],false],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","parties-footer-warning"],["flush-element"],["text","\\n"],["block",["if"],[["get",["positionWarning"]]],null,5],["block",["uikit-tooltip"],null,[["tooltipConfig"],[["get",["tooltipConfig"]]]],2],["text","  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["shouldShowAutoFillStatus"]]],null,6,1]],"locals":[]},{"statements":[["text","      "],["open-element","lol-uikit-content-block",[]],["static-attr","class","parties-footer-tooltip"],["static-attr","type","tooltip-large"],["flush-element"],["text","\\n        "],["append",["unknown",["mmrStandardDeviationWarningTooltip"]],false],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","parties-footer-warning"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","parties-mmr-warning-icon"],["flush-element"],["close-element"],["append",["unknown",["mmrStandardDeviationWarning"]],false],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipConfig"],[["get",["tooltipConfig"]]]],8],["text","  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["hasMmrStandardDeviationWarning"]]],null,9,7]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","parties-footer-error"],["flush-element"],["append",["unknown",["positionError"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["positionError"]]],null,11,10]],"locals":[]},{"statements":[["text","      "],["open-element","lol-uikit-content-block",[]],["static-attr","class","parties-footer-tooltip"],["static-attr","type","tooltip-large"],["flush-element"],["text","\\n        "],["append",["unknown",["readyWarningTooltip"]],false],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","parties-footer-warning parties-ready-warning"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","parties-ready-warning-icon"],["flush-element"],["close-element"],["text","\\n    "],["append",["unknown",["readyWarning"]],false],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipConfig"],[["get",["tooltipConfig"]]]],13],["text","  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["readyWarning"]]],null,14,12]],"locals":[]},{"statements":[["text","              "],["open-element","li",[]],["flush-element"],["append",["helper",["sanitize"],[["get",["reason"]]],null],false],["close-element"],["text","\\n"]],"locals":["reason"]},{"statements":[["text","        "],["open-element","lol-uikit-content-block",[]],["static-attr","class","parties-footer-tooltip"],["static-attr","type","tooltip-large"],["flush-element"],["text","\\n          "],["open-element","ul",[]],["flush-element"],["text","\\n"],["block",["each"],[["get",["disabledReasons"]]],null,16],["text","          "],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["uikit-tooltip"],null,[["tooltipConfig"],[["get",["tooltipConfig"]]]],17]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","parties-restrictions-warning-error"],["flush-element"],["text","\\n    "],["open-element","div",[]],["dynamic-attr","class",["concat",["parties-notification-warning-icon ",["unknown",["restrictionLeaderClass"]]]]],["flush-element"],["close-element"],["text","\\n    "],["append",["unknown",["restrictionsText"]],false],["text","\\n"],["block",["if"],[["get",["shouldShowRestrictionTooltip"]]],null,18],["text","  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["hasLobbyRestrictions"]]],null,19,15]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","parties-queue-warning-error"],["flush-element"],["text","\\n    "],["open-element","div",[]],["dynamic-attr","class",["concat",["parties-notification-warning-icon ",["unknown",["restrictionLeaderClass"]]]]],["flush-element"],["close-element"],["text","\\n    "],["append",["unknown",["tra","parties_roster_invite_disabled_eligibility_disabled"]],false],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1),
                i = n(161);
            e.exports = s.Ember.Component.extend({
                init(...e) {
                    this._super(...e), this._playerNames = s.playerNames
                },
                classNames: ["parties-notifications"],
                lobbiesService: s.Ember.inject.service("lobbies"),
                notifications: s.Ember.computed.alias("lobbiesService.notifications"),
                inLobby: s.Ember.computed.alias("lobbiesService.inLobby"),
                currentPlayer: s.Ember.computed.alias("lobbiesService.currentSummoner"),
                toastManager: s.UIKit.getToastManager(),
                templateHelper: s.UIKit.getTemplateHelper(),
                notificationsObserver: s.Ember.on("init", s.Ember.observer("notifications.@each.notificationId", (function() {
                    s.Ember.run.once(this, (() => {
                        const e = this.get("notifications");
                        e && 0 !== e.length && this._processQueueDodgeNotifications(e)
                    }))
                }))),
                _processQueueDodgeNotifications: function(e) {
                    e.forEach((e => {
                        e.notificationReason === i.MATCHMAKING_DODGE_NOTIFICATIONS.PARTY_DODGED ? (this._partyDodged(e), this._deleteNotification(e.notificationId)) : e.notificationReason === i.MATCHMAKING_DODGE_NOTIFICATIONS.STRANGER_DODGED && (this._strangerDodged(), this._deleteNotification(e.notificationId))
                    }))
                },
                _strangerDodged: function() {
                    const e = this.get("templateHelper").contentBlockNotification(this.get("tra.game_flow_champ_select_dodge_stranger_notification"), "lol-ready-check-notification-stranger-dodge");
                    return this._toastNotify(e)
                },
                _partyDodged: function(e) {
                    const t = this.get("currentPlayer"),
                        n = e.summonerIds[0];
                    n && t.summonerId === n ? this._notifySelfDodge(this.get("inLobby")) : this._notifyPartyMemberDodge(n)
                },
                _notifySelfDodge: function(e) {
                    const t = e ? this.get("tra.game_flow_champ_select_dodge_player_notification_lobby") : this.get("tra.game_flow_champ_select_dodge_player_notification"),
                        n = this.get("templateHelper").contentBlockNotification(t, "lol-ready-check-notification-party-dodge");
                    this._toastNotify(n)
                },
                async _notifyPartyMemberDodge(e) {
                    if (!e) throw new Error("Cannot notify party member dodge with falsy summonerId");
                    const {
                        playerNameFull: t
                    } = await this._playerNames.getDisplayNameBySummonerId(e), n = this.get("tra").formatString("game_flow_champ_select_dodge_party_notification", {
                        summonerName: t
                    }), s = this.get("templateHelper").contentBlockNotification(n, "lol-ready-check-notification-party-dodge");
                    this._toastNotify(s)
                },
                _toastNotify: function(e) {
                    this.get("toastManager").add({
                        type: "DialogToast",
                        data: {
                            contents: e,
                            dismissable: !0
                        },
                        timing: "slow"
                    })
                },
                _deleteNotification: function(e) {
                    this.get("lobbiesService").deleteNotification(e)
                }
            })
        }, (e, t) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.TEAM_BUILDER_REMOVAL_NOTIFICATIONS = t.MATCHMAKING_DODGE_NOTIFICATIONS = t.LEGACY_LOBBY_REMOVAL_NOTIFICATIONS = void 0;
            t.MATCHMAKING_DODGE_NOTIFICATIONS = {
                INVALID: "Invalid",
                PARTY_DODGED: "PartyDodged",
                STRANGER_DODGED: "StrangerDodged"
            };
            t.LEGACY_LOBBY_REMOVAL_NOTIFICATIONS = {
                KICKED: "KICKED",
                DESTROYED: "DESTROYED",
                PROGRESSED: "PROGRESSED"
            };
            t.TEAM_BUILDER_REMOVAL_NOTIFICATIONS = {
                NONE: "None",
                KICKED: "Kicked",
                DISBANDED: "Disbanded",
                LEFT: "Left",
                SERVICE_ERROR: "ServiceError",
                OTHER: "Other",
                TIMEOUT: "Timeout",
                GAME_START_ERROR: "GameStartError",
                SERVICE_SHUTDOWN: "ServiceShutdown"
            }
        }, (e, t, n) => {
            "use strict";
            var s = n(1),
                i = a(n(74)),
                o = a(n(122));

            function a(e) {
                return e && e.__esModule ? e : {
                    default: e
                }
            }
            n(163), e.exports = s.Ember.Component.extend(i.default, o.default, {
                ModalManager: s.UIKit.getModalManager(),
                classNames: ["parties-root"],
                classNameBindings: ["isShowingParty:parties-show:parties-hide"],
                lobbiesService: s.Ember.inject.service("lobbies"),
                matchmakingService: s.Ember.inject.service("matchmaking"),
                chatService: s.Ember.inject.service("chat"),
                playerNames: s.playerNames,
                inParty: s.Ember.computed.and("lobbiesService.inLobby", "isShowingParty"),
                isShowingParty: s.Ember.computed.alias("showingState.isShowingParty"),
                maxTeamSize: s.Ember.computed.alias("lobbiesService.maxTeamSize"),
                buttonsDisabled: s.Ember.computed.or("matchmakingService.isSearching", "matchmakingService.isMatchFound"),
                buttonsEnabled: s.Ember.computed.not("buttonsDisabled"),
                currentPlayer: s.Ember.computed.alias("lobbiesService.currentPlayer"),
                currentPartyMembers: s.Ember.computed.alias("lobbiesService.currentPartyMembers"),
                isCurrentPlayerPartyLeader: s.Ember.computed.alias("lobbiesService.isCurrentPlayerPartyLeader"),
                currentPartyLeader: s.Ember.computed.alias("lobbiesService.currentPartyLeader"),
                currentPlayerCanInvite: s.Ember.computed.alias("lobbiesService.currentPlayerCanInvite"),
                currentPlayerHasInvitePrivileges: s.Ember.computed.alias("currentPlayer.allowedInviteOthers"),
                partyInvitesAllowed: s.Ember.computed("currentPlayerCanInvite", "currentPartyIsFull", "buttonsEnabled", (function() {
                    const e = this.get("buttonsEnabled"),
                        t = this.get("currentPlayerCanInvite"),
                        n = this.get("currentPartyIsFull");
                    return e && t && !n
                })),
                _previousPartyLeaderId: null,
                _previousCanInvite: null,
                backButtonShown: s.Ember.computed.alias("isCurrentPlayerPartyLeader"),
                backButtonContainerClass: s.Ember.computed("backButtonShown", (function() {
                    return this.get("backButtonShown") ? "back-button-shown" : "back-button-hidden"
                })),
                backButtonDisabled: s.Ember.computed.alias("buttonsDisabled"),
                playerPlaceholders: s.Ember.computed("currentPartyMembers.[]", "otherPartyMembers.[]", "maxTeamSize", "lobbiesService.isTFT", "lobbiesService.maxLobbySize", (function() {
                    if (0 === (this.get("currentPartyMembers.length") || 0)) return s.Ember.A();
                    let e = this.get("lobbiesService.isTFT") ? this.get("lobbiesService.maxLobbySize") : this.get("maxTeamSize");
                    e || (e = 0);
                    const t = this.get("otherPartyMembers.length") || 0,
                        n = Math.max(e - t - 1, 0),
                        i = [];
                    for (let e = 0; e < n; e++) i.push(s.Ember.Object.create({
                        index: e,
                        isPlaceholder: !0
                    }));
                    return s.Ember.A(i)
                })),
                otherPartyMembers: s.Ember.computed.alias("lobbiesService.otherCurrentPartyMembers"),
                observeInvitePrivilegesChange: s.Ember.observer("currentPlayerHasInvitePrivileges", (function() {
                    s.Ember.run.once(this, this._handleInviteGrantedRevoked)
                })),
                _handleInviteGrantedRevoked: function() {
                    const e = this.get("currentPlayerHasInvitePrivileges"),
                        t = this.get("_previousCanInvite"),
                        n = this.get("isCurrentPlayerPartyLeader");
                    t !== e && null !== t && (!e || this.get("_hasPlayedInviteGranted") || n ? e || !this.get("_hasPlayedInviteGranted") || n || (this.get("chatService").sendChatMessage(this.get("tra.parties_invite_privileges_chat_notification_revoked"), this.get("chatConversationId")), this.playSound("/fe/lol-parties/sfx-lobby-notif-revoke.ogg"), this.set("_hasPlayedInviteGranted", !1)) : (this.playSound("/fe/lol-parties/sfx-lobby-notif-invite-granted.ogg"), this.get("chatService").sendChatMessage(this.get("tra.parties_invite_privileges_chat_notification_granted"), this.get("chatConversationId")), this.set("_hasPlayedInviteGranted", !0))), this.set("_previousCanInvite", e)
                },
                observePartyLeaderChange: s.Ember.observer("isCurrentPlayerPartyLeader", (function() {
                    s.Ember.run.once(this, this._handlePartyLeaderGranted)
                })),
                _handlePartyLeaderGranted: function() {
                    const e = this.get("currentPartyLeader.summonerId"),
                        t = this.get("currentPlayer.summonerId"),
                        n = this.get("isCurrentPlayerPartyLeader"),
                        s = this.get("_previousPartyLeaderId");
                    n && (s !== t && !!s) && !this.get("_hasPlayedLeaderSound") ? (this.get("chatService").sendChatMessage(this.get("tra.parties_promoted_to_leader_chat_notification"), this.get("chatConversationId")), this.playSound("/fe/lol-parties/sfx-lobby-notif-captain-granted.ogg"), this.set("_hasPlayedLeaderSound", !0)) : n || this.set("_hasPlayedLeaderSound", !1), this.set("_previousPartyLeaderId", e)
                },
                initializeObservedObjects: s.Ember.on("didInsertElement", (function() {
                    this.get("matchmakingService.isSearching"), this.get("matchmakingService.isLowPriorityQueue"), this.get("matchmakingService.hasLowPriorityPenaltyTimeRemaining")
                })),
                lowPriorityNotificationObserver: s.Ember.observer("matchmakingService.isSearching", (function() {
                    const e = this.get("selfLowPriorityModal");
                    this.get("matchmakingService.isSearching") && this.get("matchmakingService.isLowPriorityQueue") ? this.showLowPriorityNotification() : e && (this.removeModal(e), this.set("selfLowPriorityModal", void 0))
                })),
                lowPriorityNotificationRemovalObserver: s.Ember.observer("matchmakingService.hasLowPriorityPenaltyTimeRemaining", (function() {
                    const e = this.get("selfLowPriorityModal"),
                        t = this.get("matchmakingService.hasLowPriorityPenaltyTimeRemaining");
                    e && !t && this.removeModal(e)
                })),
                showLowPriorityNotification: function() {
                    this.get("matchmakingService.isQueueDelay") && this.get("isCurrentPlayerPartyLeader") ? this.showQueueDelayToast() : this.get("matchmakingService.isSelfInLowPriorityQueue") ? this.get("selfLowPriorityModal") || this.showSelfLowPriorityModal() : this.get("matchmakingService.lowPriorityData.penaltyTimeRemaining") > 0 && this.showLowPriorityToast()
                },
                showLowPriorityToast: function() {
                    const e = this.get("matchmakingService.lowPriorityData.penalizedSummonerIds");
                    if (!e || e.length < 1) return;
                    const t = e.map((e => this.get("playerNames").getDisplayNameBySummonerId(e)));
                    Promise.all(t).then((e => {
                        const t = s.ComponentFactory.create("LowPriorityQueueToastComponent", {
                            penalizedPlayerNames: s.lodash.map(e, "playerNameFull")
                        });
                        this.get("ToastManager").add({
                            type: "DialogToast",
                            data: {
                                contents: t.domNode
                            },
                            onRemove: () => t.onRemove()
                        })
                    }))
                },
                showSelfLowPriorityModal: function() {
                    const e = s.ComponentFactory.create("LowPriorityQueueModalComponent"),
                        t = this.showModal({
                            type: "DialogAlert",
                            data: {
                                contents: e.domNode,
                                okText: this.get("tra.low_priority_queue_modal_leave_queue"),
                                onOk: () => {
                                    this.get("lobbiesService").cancelMatchmakingSearch(), this.set("selfLowPriorityModal", void 0), e.onRemove()
                                }
                            }
                        });
                    this.set("selfLowPriorityModal", t)
                },
                showQueueDelayToast: function() {
                    const e = s.UIKit.getTemplateHelper().contentBlockTooltip(this.get("tra.low_priority_queue_delay_warning_header"), this.get("tra.low_priority_queue_delay_warning_body"), "notification");
                    this.get("ToastManager").add({
                        type: "DialogToast",
                        data: {
                            contents: e
                        }
                    })
                },
                actions: {
                    backButtonClick: function() {
                        this.get("backButtonDisabled") || this.sendAction("showGameSelect")
                    },
                    showInviteModal: function() {
                        this.sendAction("showInviteModal")
                    }
                },
                chatConversationId: s.Ember.computed.alias("lobbiesService.chatConversationId"),
                canStartMatchmaking: s.Ember.computed.alias("lobbiesService.canStartMatchmaking"),
                allowablePremadeSizes: s.Ember.computed.alias("lobbiesService.allowablePremadeSizes"),
                notInParty: s.Ember.computed.not("inParty"),
                hideReadyWarning: s.Ember.computed.or("notInParty", "canStartMatchmaking", "matchmakingService.isInQueue"),
                readyWarningTooltip: s.Ember.computed("currentPartyMembers.[]", "currentPartyMembers.@each.ready", "hideReadyWarning", "tra.ready", "tra.parties_ready_warning_tooltip", "playerNames.isUsingAlias", (function() {
                    if (this.get("hideReadyWarning")) return;
                    const e = [],
                        t = this.get("currentPartyMembers");
                    for (let n = 0; n < t.length; n++) {
                        const s = t[n];
                        s.ready || (this.get("playerNames.isUsingAlias") ? e.push(s?.displayName?.playerNameFull) : e.push(s.summonerName))
                    }
                    if (s.lodash.isEmpty(e)) return;
                    return this.get("tra.formatString")("parties_ready_warning_tooltip", {
                        notReadyMemberNames: e.join(", ")
                    })
                })),
                readyWarning: s.Ember.computed("readyWarningTooltip", "tra.ready", "tra.parties_ready_warning", (function() {
                    const e = this.get("readyWarningTooltip");
                    if (e && e.length > 0) return this.get("tra.parties_ready_warning")
                }))
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            "use strict";
            var s = n(1),
                i = m(n(74)),
                o = m(n(122)),
                a = m(n(143)),
                l = m(n(132)),
                r = m(n(16)),
                c = m(n(27));

            function m(e) {
                return e && e.__esModule ? e : {
                    default: e
                }
            }
            n(165);
            const {
                RunMixin: u
            } = s.EmberAddons.EmberLifeline, d = "QUEUE_DODGER", p = "LEAVER_BUSTED", h = "LEAVER_BUSTER_QUEUE_LOCKOUT", g = s.Ember.Object.extend(s.Ember.PromiseProxyMixin);
            e.exports = s.Ember.Component.extend(u, a.default, i.default, o.default, l.default, {
                classNames: ["parties-footer-container"],
                layout: n(166),
                init(...e) {
                    this._super(...e), this._playerNames = s.playerNames
                },
                _notifiedSearchErrorIds: s.Ember.A(),
                matchmakingService: s.Ember.inject.service("matchmaking"),
                lobbiesService: s.Ember.inject.service("lobbies"),
                customGamesService: s.Ember.inject.service("custom-games"),
                customGameListService: s.Ember.inject.service("custom-game-list"),
                gameflowService: s.Ember.inject.service("gameflow"),
                patcherService: s.Ember.inject.service("patcher"),
                partySettingsService: s.Ember.inject.service("party-settings"),
                queueEligibilityService: s.Ember.inject.service("queue-eligibility"),
                platformConfig: r.default,
                animationsEnabled: s.Ember.computed.alias("partySettingsService.animationsEnabled"),
                inLobby: s.Ember.computed.alias("lobbiesService.inLobby"),
                currentPartyMembers: s.Ember.computed.alias("lobbiesService.currentPartyMembers"),
                currentPartySize: s.Ember.computed.alias("lobbiesService.currentPartySize"),
                isPremadeRestrictedFives: s.Ember.computed.alias("lobbiesService.isPremadeRestrictedFives"),
                isLeader: s.Ember.computed.alias("lobbiesService.isCurrentPlayerPartyLeader"),
                isNotLeader: s.Ember.computed.not("isLeader"),
                isMember: s.Ember.computed.alias("lobbiesService.isCurrentPlayerPartyMember"),
                displayNotLeaderTooltip: s.Ember.computed.and("inLobby", "isMember", "isNotSearching", "isMatchNotFound"),
                searchState: s.Ember.computed.alias("matchmakingService.searchState"),
                isSearching: s.Ember.computed.alias("matchmakingService.isSearching"),
                isNotSearching: s.Ember.computed.alias("matchmakingService.isNotSearching"),
                isMatchFound: s.Ember.computed.alias("matchmakingService.isMatchFound"),
                isMatchNotFound: s.Ember.computed.alias("matchmakingService.isMatchNotFound"),
                isInQueue: s.Ember.computed.or("isSearching", "isMatchFound"),
                animationLock: s.Ember.computed.alias("selected.animationLock"),
                currentMapId: s.Ember.computed.alias("selected.mapId"),
                searchError: s.Ember.computed.readOnly("matchmakingService.longestSearchError"),
                searchErrorType: s.Ember.computed.readOnly("searchError.errorType"),
                isSearchError: s.Ember.computed.bool("searchError"),
                searchErrorHasTimeRemaining: s.Ember.computed.gt("matchmakingService.longestSearchErrorPenaltyTimeRemaining", 0),
                hasPenaltyTime: s.Ember.computed.and("isSearchError", "searchErrorHasTimeRemaining"),
                timeRemaining: s.Ember.computed.readOnly("matchmakingService.longestSearchErrorPenaltyTimeRemainingFormatted"),
                penalizedSummonerNameProxy: s.Ember.computed("searchError.penalizedSummonerId", (function() {
                    const e = this.get("searchError.penalizedSummonerId");
                    return e && g.create({
                        promise: this._playerNames.getDisplayNameBySummonerId(e)
                    })
                })),
                penalizedSummonerDisplayName: s.Ember.computed.alias("penalizedSummonerNameProxy.content.playerNameFull"),
                customGameRewardsDisabledModalElement: null,
                customGameRewardsDisabledReasons: s.Ember.A(),
                customGameChampSelectErrorElement: null,
                customGameChampSelectErrorBody: "",
                customGameChampSelectErrorPlayers: s.Ember.A(),
                hasQueueAvailabilityWarning: s.Ember.computed.alias("lobbiesService.hasQueueAvailabilityWarning"),
                queueAvailabilityWarningTooltip: s.Ember.computed.alias("lobbiesService.queueAvailabilityWarningTooltip"),
                showCustomGameContentWarning: s.Ember.computed("selected.isTrainingGame", "selected.isCreatingCustomGame", "tra.ready", (function() {
                    return this.get("selected.isTrainingGame") && this.get("selected.isCreatingCustomGame") && this.get("tra").exists("custom_game_training_content_warning") && this.get("tra").exists("custom_game_training_rewards_warning") && this.get("tra").exists("custom_game_training_question")
                })),
                hideCustomGameRewardsModal: !0,
                insertListener: s.Ember.on("didInsertElement", (function() {
                    const e = this.element.querySelector("lol-uikit-content-block#custom-games-disabled-reasons");
                    this.set("customGameRewardsDisabledModalElement", e);
                    const t = this.element.querySelector("lol-uikit-content-block#custom-games-champ-select-error");
                    this.set("customGameChampSelectErrorElement", t)
                })),
                queueErrorMessage: s.Ember.computed("searchErrorType", "penalizedSummonerDisplayName", "tra.ready", "tra.parties_queue_error_queue_dodge_myself_body", "tra.parties_queue_error_queue_dodge_other_body", "tra.parties_queue_error_generic_body", (function() {
                    const e = this.get("searchErrorType"),
                        t = this.get("searchError.penalizedSummonerId"),
                        n = this.get("matchmakingService.currentSummoner.summonerId");
                    switch (e) {
                        case d:
                            return t === n ? this.get("tra.parties_queue_error_queue_dodge_myself_body") : this.translate("parties_queue_error_queue_dodge_other_body", {
                                player: this.get("penalizedSummonerDisplayName")
                            });
                        case h:
                            return t === n ? this.get("tra.parties_queue_error_leaver_buster_lockout_restriction_tooltip_myself_body") : this.translate("parties_queue_error_leaver_buster_lockout_restriction_tooltip_other_body", {
                                player: this.get("penalizedSummonerDisplayName")
                            });
                        default:
                            return this.get("tra.parties_queue_error_generic_body$html")
                    }
                })),
                patcherDisconnected: s.Ember.computed.not("patcherService.isConnected"),
                showingPartyButNotLeader: s.Ember.computed.and("showingState.isShowingParty", "isNotLeader"),
                confirmButtonThrottled: !1,
                confirmButtonNotThrottled: s.Ember.computed.not("confirmButtonThrottled"),
                showingPartyButThrottled: s.Ember.computed.and("showingState.isShowingParty", "isLeader", "confirmButtonThrottled"),
                showingPartyAndInQueue: s.Ember.computed.and("showingState.isShowingParty", "isInQueue"),
                showingPartyAndPenaltyTime: s.Ember.computed("showingState.isShowingParty", "hasPenaltyTime", "customGamesService.isCustomUI", (function() {
                    return this.get("showingState.isShowingParty") && this.get("hasPenaltyTime") && !this.get("customGamesService.isCustomUI")
                })),
                hasRankedDivisionRestriction: s.Ember.computed.alias("queueEligibilityService.hasRankedDivisionRestriction"),
                showingPartyAndRankedDivisionRestriction: s.Ember.computed.and("showingState.isShowingParty", "hasRankedDivisionRestriction"),
                cannotStartMatchmaking: s.Ember.computed.not("lobbiesService.canStartMatchmaking"),
                showingPartyButCannotStartMatchmaking: s.Ember.computed.and("showingState.isShowingParty", "isLeader", "cannotStartMatchmaking"),
                confirmButtonDisabled: s.Ember.computed.or("animationLock", "patcherDisconnected", "selected.isUpdatingSelection", "lobbiesService.hasLobbyRestrictions", "showingPartyButNotLeader", "showingPartyButThrottled", "showingPartyAndRankedDivisionRestriction", "showingPartyAndInQueue", "showingPartyAndPenaltyTime", "showingPartyButCannotStartMatchmaking", "hasQueueAvailabilityWarning"),
                confirmButtonEnabled: s.Ember.computed.not("confirmButtonDisabled"),
                confirmButtonText: s.Ember.computed("tra.ready", "hasPenaltyTime", "isInQueue", "customGamesService.isCustomUI", "customGameListService.confirmButtonText", "tra.parties_button_in_queue", "tra.parties_button_find_match", "tra.parties_button_start_game", (function() {
                    if (this.get("isInQueue")) return this.get("tra.parties_button_in_queue");
                    if (this.get("customGamesService.isCustomUI")) return this.get("tra.parties_button_start_game");
                    if (this.get("hasPenaltyTime")) {
                        this.get("tra.parties_button_blocked");
                        return `${this.get("timeRemaining")}`
                    }
                    return this.get("tra.parties_button_find_match")
                })),
                buttonSounds: {
                    closeHover: "/fe/lol-parties/sfx-lobby-button-quit-hover.ogg",
                    closeClick: "/fe/lol-parties/sfx-lobby-button-quit-click.ogg",
                    confirmHover: "/fe/lol-parties/sfx-lobby-button-find-match-hover.ogg",
                    confirmClick: "/fe/lol-parties/sfx-lobby-button-find-match-click.ogg"
                },
                searchErrorLeaverBusterQueueDelay: s.Ember.computed.equal("searchErrorType", p),
                searchErrorLeaverBusterQueueLockout: s.Ember.computed.equal("searchErrorType", h),
                confirmButtonShowTooltip: s.Ember.computed("displayNotLeaderTooltip", "hasPenaltyTime", "searchErrorLeaverBusterQueueDelay", "isPremadeRestrictedFives", "isInQueue", "patcherService.isConnected", "hasQueueAvailabilityWarning", "showingState.isShowingGameSelect", "lobbiesService.canStartMatchmaking", "lobbiesService.premadeSizeAllowed", "lobbiesService.hasLobbyRestrictions", "customGamesService.isCustomUI", (function() {
                    return !(!this.get("displayNotLeaderTooltip") && !this.get("isPremadeRestrictedFives") && this.get("patcherService.isConnected")) || (!(!this.get("hasPenaltyTime") || this.get("searchErrorLeaverBusterQueueDelay") || this.get("showingState.isShowingGameSelect") || this.get("customGamesService.isCustomUI")) || (!(this.get("isInQueue") || this.get("lobbiesService.canStartMatchmaking") || !this.get("lobbiesService.premadeSizeAllowed")) || !!this.get("hasQueueAvailabilityWarning")))
                })),
                confirmButtonTooltipText: s.Ember.computed("displayNotLeaderTooltip", "hasPenaltyTime", "queueErrorMessage", "customGamesService.isCustomUI", "isPremadeRestrictedFives", "patcherService.isConnected", "lobbiesService.canStartMatchmaking", "hasQueueAvailabilityWarning", "tra.metadata", "tra.ready", "tra.parties_find_match_wait_for_captain", "tra.parties_start_game_wait_for_captain", "tra.parties_position_select_members_required_tooltip", "tra.parties_patcher_not_connected", "tra.parties_premade_size_five_restriction", "lobbiesService.hasLobbyRestrictions", (function() {
                    let e = "";
                    return this.get("patcherService.isConnected") || (e = s.tra.get("parties_patcher_not_connected")), this.get("hasRankedDivisionRestriction") ? e = this.get("tra.game_select_queue_restriction_party_teamdivisionrestriction") : this.get("isPremadeRestrictedFives") ? e = this.get("tra.parties_premade_size_five_restriction") : this.get("lobbiesService.canStartMatchmaking") || (e = this.get("readyWarning") ? this.get("readyWarning") : this.get("tra.parties_position_select_members_required_tooltip")), this.get("displayNotLeaderTooltip") ? e = this.get("customGamesService.isCustomUI") ? this.get("tra.parties_start_game_wait_for_captain") : this.get("tra.parties_find_match_wait_for_captain") : this.get("hasPenaltyTime") && (e = this.get("queueErrorMessage")), this.get("hasQueueAvailabilityWarning") ? this.get("queueAvailabilityWarningTooltip") : e.replace(/\n/, "<br>")
                })),
                closeButtonDisabled: s.Ember.computed.or("animationLock"),
                closeButtonText: s.Ember.computed("tra.ready", "tra.parties_button_quit", "tra.parties_button_quit_matchmaking", "isInQueue", (function() {
                    return this.get("isInQueue") ? this.get("tra.parties_button_quit_matchmaking") : this.get("tra.parties_button_quit")
                })),
                startMatchmaking: function() {
                    this.get("confirmButtonNotThrottled") && (this.set("confirmButtonThrottled", !0), this.enterQueueTimer = s.Telemetry.startTimer("parties-enter-queue"), this.get("lobbiesService").startMatchmakingSearch().then((() => {
                        this.set("confirmButtonThrottled", !1)
                    }), (e => {
                        c.default.sendTelemetryEvent("feature_error", {
                            id: "PARTIES_START_MATCHMAKING_ATTEMPT_FAILED",
                            severity: "blocker",
                            message: "failed http post request to /lol-lobby/v2/lobby/matchmaking/search"
                        }), this.set("confirmButtonThrottled", !1), this.set("_isTransitioningState", !1), s.logger.warning(`Start matchmaking search failed: ${e}`)
                    })))
                },
                enterQueueTelemetryObserver: s.Ember.observer("isInQueue", (function() {
                    this.get("isInQueue") && this.enterQueueTimer && (s.Telemetry.stopAndRecordTimer(this.enterQueueTimer), delete this.enterQueueTimer)
                })),
                cancelMatchmaking: function() {
                    this.get("isSearching") && this.get("lobbiesService").cancelMatchmakingSearch()
                },
                customTryToEnterChampSelect: function() {
                    return this.checkCustomTeamSizeRestrictions().then((() => this.checkCustomRewards())).then((() => this.customEnterChampSelect())).catch((() => {
                        this.set("_isTransitioningState", !1)
                    }))
                },
                checkCustomTeamSizeRestrictions: function() {
                    const e = this.get("customGamesService"),
                        t = this.get("currentMapId"),
                        n = e.findMinPlayersForMap(t),
                        i = e.get("minPlayers"),
                        o = e.get("currentNumPlayers"),
                        a = n > i ? n : i;
                    let l = "";
                    o < n && (l = this.translate("custom_game_champ_select_error_min_map_player", {
                        numPlayers: o,
                        minRequired: n
                    })), o < i && (l = this.translate("custom_game_champ_select_error_min_player", {
                        minPlayers: a
                    }));
                    const r = s.tra.get("parties_kicked_confirmation_ok");
                    return o < a ? (this.showModal({
                        type: "DialogAlert",
                        data: {
                            contents: l,
                            okText: r
                        }
                    }), Promise.reject()) : Promise.resolve()
                },
                checkCustomRewards: function() {
                    return this.get("hideCustomGameRewardsModal") ? Promise.resolve() : new Promise(((e, t) => {
                        document.activeElement.blur();
                        const n = this.get("customGamesService").getRewardsDisabledReasons();
                        if (!n || 0 === n.length) return void e();
                        const i = [];
                        n.forEach((e => {
                            const t = `tra.custom_game_rewards_disabled_reason_${e.toLowerCase()}`,
                                n = this.get(t);
                            n && n.length > 0 && i.push(n)
                        })), this.set("customGameRewardsDisabledReasons", s.Ember.A(i));
                        const o = this.showModal({
                            type: "DialogConfirm",
                            data: {
                                contents: this.get("customGameRewardsDisabledModalElement"),
                                acceptText: this.get("tra.custom_game_rewards_disabled_confirm_yes"),
                                declineText: this.get("tra.custom_game_rewards_disabled_confirm_no"),
                                onAccept: () => {
                                    e()
                                },
                                onDecline: () => {
                                    t()
                                }
                            }
                        });
                        o.domNode.classList.add("parties-custom-game-rewards-disabled-modal");
                        const a = o.domNode.querySelector(".button-accept");
                        a && a.focus()
                    }))
                },
                enterChampSelectLockTime: 300,
                customEnterChampSelect: function() {
                    return this.set("confirmButtonThrottled", !0), this.get("customGamesService").enterChampSelect().then((() => {
                        this.set("_isTransitioningState", !1), this.runTask((() => {
                            this.set("confirmButtonThrottled", !1)
                        }), this.get("enterChampSelectLockTime"))
                    }), (e => {
                        this.set("confirmButtonThrottled", !1), this.handleCustomGameChampSelectError(e)
                    }))
                },
                handleCustomGameChampSelectError: function(e) {
                    s.logger.warning(`Custom game encountered error when entering champ select: ${e}`);
                    const t = this.determineCustomGameErrorBody(e);
                    this.set("customGameChampSelectErrorBody", t);
                    const n = s.tra.get("parties_kicked_confirmation_ok");
                    this.showModal({
                        type: "DialogAlert",
                        data: {
                            contents: this.get("customGameChampSelectErrorElement"),
                            okText: n
                        }
                    }).domNode.classList.add("parties-custom-game-champ-select-errors-modal"), this.set("_isTransitioningState", !1), this.set("customGamesService.preventTeamChanges", !1)
                },
                aggregateCustomChampSelectErrorReasons: function(e) {
                    if (!e.data) return {};
                    let t = {};
                    if (e.data.failedPlayers && e.data.failedPlayers.length)
                        for (let n = 0; n < e.data.failedPlayers.length; n++) {
                            const s = e.data.failedPlayers[n];
                            t[s.reason] || (t[s.reason] = []), t[s.reason].push(s.summonerName)
                        }
                    return t = this.aggregateCustomChampSelectErrorByStatus(e, t), t
                },
                aggregateCustomChampSelectErrorByStatus: function(e, t) {
                    if (e.data.httpStatus) switch (e.data.httpStatus) {
                        case 435:
                            t.GAME_MODE_NOT_SUPPORTED = !0;
                            break;
                        case 436:
                            let n = !0;
                            if (e.data.message) {
                                const t = e.data.message.match(/([0-9]+) required/);
                                t && (n = t[1])
                            }
                            t.NOT_ENOUGH_PLAYERS_FOR_MAP = n
                    }
                    return t
                },
                determineCustomGameErrorBody: function(e) {
                    let t = "";
                    const n = this.aggregateCustomChampSelectErrorReasons(e);
                    if (this.set("customGameChampSelectErrorPlayers", s.Ember.A()), this.set("showCustomGameMinorRestrictionDetails", !1), n.RANKED_NUM_CHAMPS) t = this.get("tra.custom_game_champ_select_error_min_champions"), this.set("customGameChampSelectErrorPlayers", s.Ember.A(n.RANKED_NUM_CHAMPS));
                    else if (n.MINOR_RESTRICTED || n.PARENTAL_CONTROL_RESTRICTION || n.TIME_PLAYED_RESTRICTION) {
                        t = this.get("tra.custom_game_champ_select_error_generic_player_restriction");
                        const e = s.tra.metadata().locale.id.substr(0, 2).toLowerCase(),
                            i = s.lodash.union(n.MINOR_RESTRICTED, n.PARENTAL_CONTROL_RESTRICTION, n.TIME_PLAYED_RESTRICTION).sort(((t, n) => t.localeCompare(n, e)));
                        this.set("customGameChampSelectErrorPlayers", s.Ember.A(i)), this.set("showCustomGameMinorRestrictionDetails", !0)
                    } else if (n.NOT_ENOUGH_PLAYERS_FOR_MAP)
                        if (!0 === n.NOT_ENOUGH_PLAYERS_FOR_MAP) t = this.get("tra.custom_game_champ_select_error_min_player_unknown_required");
                        else {
                            const e = this.get("customGamesService").get("currentNumPlayers");
                            t = this.translate("custom_game_champ_select_error_min_map_player", {
                                numPlayers: e,
                                minRequired: n.NOT_ENOUGH_PLAYERS_FOR_MAP
                            })
                        }
                    else t = n.GAME_MODE_NOT_SUPPORTED ? this.get("tra.custom_game_champ_select_error_game_mode_unsupported") : this.get("tra.custom_game_champ_select_error_unknown");
                    return t
                },
                leavePartyModal: function() {
                    if (this.get("currentPartySize") > 1) {
                        this.showModal({
                            type: "DialogConfirm",
                            data: {
                                contents: this.get("tra.parties_leave_confirmation_text"),
                                acceptText: this.get("tra.parties_leave_confirmation_yes"),
                                declineText: this.get("tra.parties_leave_confirmation_no"),
                                onAccept: () => {
                                    this.leaveParty()
                                }
                            }
                        }).domNode.classList.add("parties-leave-party-modal")
                    } else this.leaveParty()
                },
                confirmButtonClicked: function() {
                    this.set("_isTransitioningState", !0), this.get("customGamesService.isCustom") ? this.customTryToEnterChampSelect() : this.startMatchmaking()
                },
                _hasClickedCloseDuringTransition: !1,
                handleCloseDuringTransition: s.Ember.computed("_hasClickedCloseDuringTransition", "isSearching", "isMatchFound", "hasPenaltyTime", (function() {
                    (this.get("isSearching") || this.get("isMatchFound") || this.get("hasPenaltyTime")) && (this.set("_isTransitioningState", !1), this.get("_hasClickedCloseDuringTransition") && (this.set("_hasClickedCloseDuringTransition", !1), this.cancelMatchmaking()))
                })),
                lobbyAvailabilityMatchmakingObserver: s.Ember.observer("hasQueueAvailabilityWarning", "isSearching", (function() {
                    this.get("hasQueueAvailabilityWarning") && this.get("isSearching") && this.get("lobbiesService").cancelMatchmakingSearch()
                })),
                closeButtonClicked: function() {
                    this.blurCloseButton(), this.get("isSearching") || this.get("isMatchFound") ? this.cancelMatchmaking() : this.get("_isTransitioningState") ? (this.set("_hasClickedCloseDuringTransition", !0), this.get("lobbiesService").leaveLobby().catch((e => {
                        s.logger.warning(`Leaving lobby failed: ${e}`), this.set("_isTransitioningState", !1)
                    }))) : this.leavePartyModal()
                },
                blurCloseButton: function() {
                    const e = this.element.querySelector("button.close");
                    e && e.blur()
                },
                actions: {
                    confirmButton: function() {
                        this.confirmButtonClicked()
                    },
                    closeButton: function() {
                        this.closeButtonClicked()
                    }
                }
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "dnH9FlSo",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\footer-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\footer-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\footer-component\\\\index.js\\" "],["text","\\n"],["append",["helper",["arrow-footer"],null,[["animationsEnabled","confirmButtonDisabled","confirmButtonText","confirmButtonShowTooltip","confirmButtonTooltipText","confirmButtonHoverSound","confirmButtonClickSound","closeButtonDisabled","closeButtonText","closeButtonHoverSound","closeButtonClickSound","closeButtonType","confirmButtonClicked","closeButtonClicked"],[["get",["animationsEnabled"]],["get",["confirmButtonDisabled"]],["get",["confirmButtonText"]],["get",["confirmButtonShowTooltip"]],["get",["confirmButtonTooltipText"]],["get",["buttonSounds","confirmHover"]],["get",["buttonSounds","confirmClick"]],["get",["closeButtonDisabled"]],["get",["closeButtonText"]],["get",["buttonSounds","closeHover"]],["get",["buttonSounds","closeClick"]],"close","confirmButton","closeButton"]]],false],["text","\\n"],["open-element","span",[]],["dynamic-attr","data-eligibility-observer",["concat",[["unknown",["eligibilityObserver"]]]]],["flush-element"],["close-element"],["text","\\n"],["open-element","span",[]],["dynamic-attr","data-showing-party-observer",["concat",[["unknown",["showingPartyObserver"]]]]],["flush-element"],["close-element"],["text","\\n"],["open-element","span",[]],["dynamic-attr","data-close-transition-observer",["concat",[["unknown",["handleCloseDuringTransition"]]]]],["flush-element"],["close-element"],["text","\\n"],["open-element","div",[]],["static-attr","style","display:none;"],["flush-element"],["text","\\n  "],["open-element","lol-uikit-content-block",[]],["static-attr","class","custom-games-error"],["static-attr","id","custom-games-disabled-reasons"],["static-attr","type","dialog-medium"],["flush-element"],["text","\\n"],["block",["if"],[["get",["showCustomGameContentWarning"]]],null,4,3],["text","  "],["close-element"],["text","\\n  "],["open-element","lol-uikit-content-block",[]],["static-attr","class","custom-games-error"],["static-attr","id","custom-games-champ-select-error"],["static-attr","type","dialog-medium"],["flush-element"],["text","\\n    "],["open-element","h5",[]],["static-attr","class","preserve-case"],["flush-element"],["append",["unknown",["tra","custom_game_champ_select_error_start_game"]],false],["close-element"],["text","\\n    "],["open-element","p",[]],["flush-element"],["append",["unknown",["customGameChampSelectErrorBody"]],false],["close-element"],["text","\\n    "],["open-element","ul",[]],["flush-element"],["text","\\n"],["block",["each"],[["get",["customGameChampSelectErrorPlayers"]]],null,1],["text","    "],["close-element"],["text","\\n"],["block",["if"],[["get",["showCustomGameMinorRestrictionDetails"]]],null,0],["text","  "],["close-element"],["text","\\n"],["close-element"],["text","\\n\\n"],["append",["helper",["matchmaking-errors"],null,[["_isTransitioningState"],[["get",["_isTransitioningState"]]]]],false],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","custom-games-minor-restriction-details"],["flush-element"],["text","\\n        "],["open-element","p",[]],["flush-element"],["append",["unknown",["tra","custom_game_minor_restriction_details_header"]],false],["close-element"],["text","\\n        "],["open-element","ul",[]],["flush-element"],["text","\\n          "],["open-element","li",[]],["flush-element"],["append",["unknown",["tra","custom_game_minor_restriction_details_real_name_auth"]],false],["close-element"],["text","\\n          "],["open-element","li",[]],["flush-element"],["append",["unknown",["tra","custom_game_minor_restriction_details_healthy_time"]],false],["close-element"],["text","\\n          "],["open-element","li",[]],["flush-element"],["append",["unknown",["tra","custom_game_minor_restriction_details_harmful_behavior"]],false],["close-element"],["text","\\n        "],["close-element"],["text","\\n        "],["open-element","p",[]],["flush-element"],["text","\\n          "],["append",["unknown",["tra","custom_game_minor_restriction_details_footer_text_before_link"]],false],["text","\\n          "],["open-element","a",[]],["static-attr","href","http://lol.qq.com/jksh"],["static-attr","target","_blank"],["flush-element"],["text","http://lol.qq.com/jksh"],["close-element"],["text","\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","li",[]],["flush-element"],["append",["get",["player"]],false],["close-element"],["text","\\n"]],"locals":["player"]},{"statements":[["text","        "],["open-element","li",[]],["flush-element"],["append",["get",["reason"]],false],["close-element"],["text","\\n"]],"locals":["reason"]},{"statements":[["text","      "],["open-element","h5",[]],["static-attr","class","preserve-case"],["flush-element"],["append",["unknown",["tra","custom_game_rewards_disabled_header"]],false],["close-element"],["text","\\n      "],["open-element","p",[]],["flush-element"],["append",["unknown",["tra","custom_game_rewards_disabled_question"]],false],["close-element"],["text","\\n      "],["open-element","p",[]],["flush-element"],["append",["unknown",["tra","custom_game_rewards_disabled_reasons_header"]],false],["close-element"],["text","\\n      "],["open-element","ul",[]],["flush-element"],["text","\\n"],["block",["each"],[["get",["customGameRewardsDisabledReasons"]]],null,2],["text","      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","ul",[]],["flush-element"],["text","\\n        "],["open-element","li",[]],["flush-element"],["append",["unknown",["tra","custom_game_training_content_warning"]],false],["close-element"],["text","\\n        "],["open-element","li",[]],["flush-element"],["append",["unknown",["tra","custom_game_training_rewards_warning"]],false],["close-element"],["text","\\n        "],["open-element","br",[]],["flush-element"],["close-element"],["text","\\n        "],["open-element","p",[]],["flush-element"],["append",["unknown",["tra","custom_game_training_question"]],false],["close-element"],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1),
                i = r(n(168)),
                o = r(n(143)),
                a = r(n(122)),
                l = r(n(74));

            function r(e) {
                return e && e.__esModule ? e : {
                    default: e
                }
            }
            n(169);
            e.exports = s.Ember.Component.extend(i.default, o.default, a.default, l.default, {
                layout: n(170),
                classNames: ["parties-lower-section"],
                classNameBindings: ["haveCurrentPlayer:parties-lower-section-fade-in", "friendDropping:droppable-dropping", "friendDragging:droppable-available", "animationsEnabled:animations-enabled:animations-disabled"],
                currentPlayer: null,
                haveCurrentPlayer: s.Ember.computed.notEmpty("currentPlayer"),
                lobbiesService: s.Ember.inject.service("lobbies"),
                matchmakingService: s.Ember.inject.service("matchmaking"),
                partySettingsService: s.Ember.inject.service("party-settings"),
                invitesService: s.Ember.inject.service("invites"),
                animationsEnabled: s.Ember.computed.alias("partySettingsService.animationsEnabled"),
                canInvite: s.Ember.computed.alias("lobbiesService.currentPlayerCanInvite"),
                tooltipText: s.Ember.computed("tra.ready", "tra.metadata", "lobbiesService.currentPlayerCanInvite", (function() {
                    return this.get("lobbiesService.currentPlayerCanInvite") ? this.get("tra.parties_drag_to_invite") : ""
                })),
                acceptMimes: ["application/riot.player+json"],
                isInQueue: s.Ember.computed.or("matchmakingService.isSearching", "matchmakingService.isMatchFound"),
                isNotInQueue: s.Ember.computed.not("isInQueue"),
                canReceiveDrops: s.Ember.computed.and("canInvite", "isNotInQueue"),
                friendDragging: s.Ember.computed.and("canReceiveDrops", "dropAvailable"),
                friendDropping: s.Ember.computed.and("canReceiveDrops", "dropping"),
                droppableDropped: function(e, t) {
                    if (!this.get("canReceiveDrops")) return !1;
                    const n = this.get("invitesService");
                    t && t.summonerId ? n.invitePlayer(t.summonerId, t.name).then((() => {
                        this.playSound("/fe/lol-parties/sfx-soc-ui-drop.ogg")
                    }), (() => {
                        this.playNotEligibleSound()
                    })) : this.playNotEligibleSound()
                },
                droppableDragEntered: function() {
                    this.playSound("/fe/lol-parties/sfx-soc-ui-drag.ogg")
                },
                playNotEligibleSound: function() {
                    this.playSound("/fe/lol-parties/sfx-lobby-notif-bad-invite.ogg")
                }
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            const i = ["dragenter", "dragleave", "dragover", "drop"],
                o = ["dragenter", "dragleave", "drop"];
            e.exports = s.Ember.Mixin.create({
                classNameBindings: [],
                droppable: !0,
                acceptMimes: [],
                dropEffect: "move",
                acceptedMime: "",
                canAcceptDrop: function(e) {
                    return this.get("acceptMimes").some((t => {
                        if (-1 !== e.types.indexOf(t)) return this.set("acceptedMime", t), !0
                    }))
                },
                _initDroppable: s.Ember.on("didInsertElement", (function() {
                    this._attachListeners()
                })),
                _cleanupDroppable: s.Ember.on("willDestroyElement", (function() {
                    this._detachListeners()
                })),
                _attachListeners: function() {
                    this._droppableEvent = this._droppableEvent.bind(this), i.forEach((e => {
                        this.element.addEventListener(e, this._droppableEvent)
                    })), this._droppableDocEvents = this._droppableDocEvents.bind(this), o.forEach((e => {
                        document.addEventListener(e, this._droppableDocEvents)
                    }))
                },
                _detachListeners: function() {
                    i.forEach((e => {
                        this.element.removeEventListener(e, this._droppableEvent)
                    })), o.forEach((e => {
                        document.removeEventListener(e, this._droppableDocEvents)
                    }))
                },
                _checkDropEvent: function(e) {
                    const t = e.dataTransfer,
                        n = this.get("droppable"),
                        s = this.canAcceptDrop(t);
                    return n && s
                },
                _updateDropState: s.Ember.observer("droppable", (function() {
                    this.get("droppable") || (this.set("dropping", !1), this.set("dropAvailable", !1))
                })),
                _droppableEvent: function(e) {
                    if (this._checkDropEvent(e))
                        if ("dragover" === e.type) e.preventDefault(), e.dataTransfer.dropEffect = this.get("dropEffect");
                        else if ("dragenter" === e.type) this.get("dropping") ? this.set("_ignoreNextDragLeave", !0) : (e.preventDefault(), this.set("dropping", !0), this.trigger("droppableDragEntered")), this.set("dropAvailable", !0);
                    else if ("dragleave" === e.type) this.get("_ignoreNextDragLeave") ? this.set("_ignoreNextDragLeave", !1) : (this.set("dropping", !1), this.trigger("droppableDragLeft"));
                    else if ("drop" === e.type) {
                        e.preventDefault(), this.set("dropping", !1), this.set("dropAvailable", !1);
                        const {
                            dataTransfer: t
                        } = e, n = this.get("acceptedMime");
                        let i = t.getData(n);
                        if (-1 !== n.indexOf("json")) try {
                            i = JSON.parse(i)
                        } catch (e) {
                            s.logger.error("Error parsing JSON drop data:", {
                                data: i,
                                e
                            })
                        }
                        this.trigger("droppableDropped", n, i, t)
                    }
                },
                _droppableDocEvents: function(e) {
                    this._checkDropEvent(e) && ("dragenter" === e.type ? this.get("dropAvailable") ? this.set("_ignoreNextDocLeave", !0) : this.set("dropAvailable", !0) : "dragleave" === e.type ? this.get("_ignoreNextDocLeave") ? this.set("_ignoreNextDocLeave", !1) : this.set("dropAvailable", !1) : "drop" === e.type && (this.set("_ignoreNextDocLeave", !1), this.set("dropAvailable", !1)))
                }
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "xY4VZrw2",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\lower-section-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\lower-section-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\lower-section-component\\\\index.js\\" "],["text","\\n"],["yield","default"],["text","\\n\\n"],["open-element","div",[]],["static-attr","class","parties-invite-dropzone"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","parties-invite-dropzone-icon"],["flush-element"],["close-element"],["text","\\n  "],["open-element","span",[]],["static-attr","class","parties-invite-dropzone-tooltip"],["flush-element"],["text","\\n    "],["append",["unknown",["tooltipText"]],false],["text","\\n  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":["default"],"blocks":[],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1),
                i = c(n(19)),
                o = c(n(13)),
                a = n(15);
            n(172);
            var l = c(n(122)),
                r = c(n(74));

            function c(e) {
                return e && e.__esModule ? e : {
                    default: e
                }
            }
            const m = (0, s.emberDataBinding)({
                Ember: s.Ember,
                websocket: (0, s.getProvider)().getSocket(),
                logPrefix: "parties:player-banner:component",
                basePaths: {
                    summoner: "/lol-summoner",
                    chat: "/lol-chat"
                }
            });
            e.exports = s.Ember.Component.extend(m, l.default, r.default, {
                layout: n(173),
                classNames: ["player-party-controls"],
                classNameBindings: ["isMe:main-player-controls:other-player-controls"],
                isLeader: !1,
                isMe: !1,
                playerNames: s.playerNames,
                chatService: s.Ember.inject.service("chat"),
                lobbiesService: s.Ember.inject.service("lobbies"),
                matchmakingService: s.Ember.inject.service("matchmaking"),
                partySettingsService: s.Ember.inject.service("party-settings"),
                eligibilitiesEntity: i.default,
                restrictions: s.Ember.computed.alias("eligibilitiesEntity.playerRestrictions"),
                observedRestrictions: [],
                memberRestrictions: null,
                contextMenuManager: s.UIKit.getContextMenuManager(),
                animationsEnabled: s.Ember.computed.alias("partySettingsService.bannerAnimationsEnabled"),
                isPlaceholder: s.Ember.computed.not("member"),
                isNotPlaceholder: s.Ember.computed.not("isPlaceholder"),
                currentTeamIsFull: s.Ember.computed.alias("lobbiesService.currentTeamIsFull"),
                summonerId: s.Ember.computed.alias("member.summonerId"),
                puuid: s.Ember.computed.alias("member.puuid"),
                showPartyOwnerTools: s.Ember.computed.and("currentPlayerIsLeader", "isNotMe", "notQueued"),
                isNotMe: s.Ember.computed.not("isMe"),
                showGhostedBanner: s.Ember.computed.alias("member.showGhostedBanner"),
                shouldShowGhostedBanner: s.Ember.computed.and("isNotPlaceholder", "isNotMe", "showGhostedBanner"),
                hasInvitePrivileges: s.Ember.computed.alias("member.allowedInviteOthers"),
                currentPlayerIsLeader: s.Ember.computed.alias("lobbiesService.isCurrentPlayerPartyLeader"),
                currentPlayerIsNotLeader: s.Ember.computed.not("currentPlayerIsLeader"),
                isMatchNotFound: s.Ember.computed.alias("matchmakingService.isMatchNotFound"),
                isNotSearching: s.Ember.computed.alias("matchmakingService.isNotSearching"),
                notQueued: s.Ember.computed.and("isMatchNotFound", "isNotSearching"),
                didReceiveAttrs: function() {
                    this._super(...arguments);
                    const e = this.get("queueId"),
                        t = o.default.getQueueById(e);
                    t && t.isRanked && e !== this.prevQueueId && s.LeagueTierNames.getTiersForQueue(t.type).then((e => {
                        this.set("rankedQueueTiers", e || [])
                    })), this.prevQueueId = e
                },
                showPositionSelector: s.Ember.computed("member", "lobbiesService.showPositionSelector", (function() {
                    return !!this.get("member") && !!this.get("lobbiesService.showPositionSelector")
                })),
                groupMissingTokenRestrictions: function(e) {
                    return this.get("eligibilitiesEntity").groupMissingTokenRestrictions(e)
                },
                _updateMemberRestrictions: function() {
                    const e = this.get("restrictions"),
                        t = this.get("member.summonerId"),
                        n = s.Ember.A();
                    if (s.Ember.isArray(e)) {
                        const s = this.groupMissingTokenRestrictions(e);
                        for (let e = 0; e < s.length; e++) {
                            const i = s[e]; - 1 !== i.summonerIds.indexOf(t) && n.pushObject(i)
                        }
                    }
                    this.set("memberRestrictions", n)
                },
                _updateRestrictionObservers: function() {
                    const e = [];
                    this.get("observedRestrictions").forEach((e => {
                        e.removeObserver("restrictionArgs.playerMinLevelRestriction", this, this._updateMemberRestrictions)
                    })), this.get("restrictions") && this.get("restrictions").forEach((t => {
                        t.addObserver("restrictionArgs.playerMinLevelRestriction", this, this._updateMemberRestrictions), e.push(t)
                    })), this.set("observedRestrictions", e)
                },
                observeRestrictionArgs: s.Ember.on("init", s.Ember.observer("restrictions", "restrictions.@each.restrictionCode", "restrictions.@each.summonerIds", "member.summonerId", (function() {
                    this._updateRestrictionObservers(), this._updateMemberRestrictions()
                }))),
                restrictionLeaderClass: s.Ember.computed("currentPlayerIsLeader", (function() {
                    return this.get("currentPlayerIsLeader") ? "leader" : ""
                })),
                hasMemberRestrictions: s.Ember.computed.gt("memberRestrictions.length", 0),
                shouldShowRestrictions: s.Ember.computed.and("member", "hasMemberRestrictions"),
                restrictionToolTipText: s.Ember.computed("tra.ready", "memberRestrictions.@each.restrictionCode", "isMe", "rankedQueueTiers.[]", "lobbiesService.currentQueue", (function() {
                    const e = this.get("memberRestrictions"),
                        t = s.Ember.A(),
                        n = this.get("isMe");
                    let o = !1;
                    for (let s = 0; s < e.length; s++) {
                        const l = e[s],
                            {
                                restrictionCode: r
                            } = l;
                        let c = l.restrictionArgs;
                        if (a.TENCENT_MINOR_RESTRICTIONS.includes(r)) {
                            if (o) continue;
                            o = !0
                        }
                        let m = `game_select_queue_restriction_player_${r.toLowerCase()}`;
                        if ("MissingToken" === r)
                            if (l.restrictionArgs.errorCodes.includes("3L")) m = "game_select_queue_restriction_player_leagues_missingtoken";
                            else {
                                m = `game_select_queue_restriction_${n?"self":"player"}_${r.toLowerCase()}`
                            }
                        else if ("PlayerRankSoloOnlyRestriction" === r) {
                            const e = this.get("rankedQueueTiers"),
                                t = i.default.getLocInfoForPlayerRankSoloOnlyRestriction(l, e);
                            m = t.key, c = t.args
                        } else if (r === a.TFT_NEW_PLAYER_RESTRICTION) {
                            const e = this.get("lobbiesService.currentQueue");
                            c = {
                                gameMode: e ? e.description : ""
                            }
                        }
                        t.pushObject(this.get("tra").formatString(m, c))
                    }
                    return t
                })),
                tooltipConfig: {
                    targetAnchor: {
                        x: "center",
                        y: "bottom"
                    },
                    tooltipAnchor: {
                        x: "center",
                        y: "top"
                    }
                },
                observeCurrentPlayerIsLeader: s.Ember.observer("currentPlayerIsLeader", (function() {
                    s.Ember.run.once(this, this._onCurrentPlayerIsLeader)
                })),
                _onCurrentPlayerIsLeader: function() {
                    this.set("_transferringLeadership", !1)
                },
                isFriended: s.Ember.computed("member", "member.summonerId", "chatService.friends.[]", (function() {
                    return this.get("chatService").isFriend(this.get("member.summonerId"))
                })),
                contextMenuModel: s.Ember.computed("showPartyOwnerTools", "hasInvitePrivileges", "isMe", "member", "isFriended", "tra.ready", "tra.context_menu_promote_to_leader", "tra.context_menu_kick", "tra.context_menu_friend_request", "tra.context_menu_revoke_invite_privilege", "tra.context_menu_grant_invite_privilege", (function() {
                    const e = this.get("isFriended"),
                        t = this.get("showPartyOwnerTools") || !e;
                    return !this.get("isMe") && this.get("member") && t ? [{
                        action: function() {
                            this.send("promoteToOwner")
                        },
                        class: "promote",
                        target: this,
                        label: this.get("tra.context_menu_promote_to_leader")
                    }, {
                        action: function() {
                            this.send("kick")
                        },
                        class: "kick",
                        target: this,
                        label: this.get("tra.context_menu_kick")
                    }, {
                        action: function() {
                            this.send("sendFriendRequest")
                        },
                        class: "add-friend",
                        target: this,
                        label: this.get("tra.context_menu_friend_request"),
                        hidden: e
                    }, {
                        action: function() {
                            this.send("toggleInvitePrivilege")
                        },
                        class: this.get("hasInvitePrivileges") ? "revoke-invite" : "grant-invite",
                        target: this,
                        label: this.get("hasInvitePrivileges") ? this.get("tra.context_menu_revoke_invite_privilege") : this.get("tra.context_menu_grant_invite_privilege")
                    }] : null
                })),
                promotePlayer: function() {
                    const e = this.get("member");
                    if (!e || !e.summonerId) throw new Error("Attempting to act on invalid party member: " + e);
                    this.set("_transferringLeadership", !0), this.get("lobbiesService").transferLeadershipToPlayer(e.summonerId)
                },
                blockPlayer: function(e) {
                    this.get("api.chat").post("/v1/blocked-players", e)
                },
                sendFriendRequest: function(e) {
                    this.get("api.chat").post("/v2/friend-requests", e)
                },
                actions: {
                    openCaptainMenu: function() {
                        this.get("contextMenuModel") && (this.contextMenuManager.setMenuItems(this.get("contextMenuModel")), this.contextMenuManager.openAtEvent(event))
                    },
                    sendFriendRequest: function() {
                        if (this.get("member")) {
                            const e = {
                                direction: "out",
                                puuid: this.get("puuid")
                            };
                            this.sendFriendRequest(e), this.set("isFriended", !0);
                            const t = this.get("tra").formatString("context_menu_friend_request_sent_to", {
                                summonerName: this.get("member.displayName.playerNameFull")
                            });
                            this.showToast(t)
                        }
                    },
                    kick: async function() {
                        if (!this.get("member")) throw new ReferenceError("game-select-lobby-panel-teams-player component must have a member");
                        const {
                            playerName: e
                        } = await this.get("playerNames").getDisplayNameByPUUID(this.get("puuid")), t = this.get("tra").formatString("lobby_kick_confirmation_text", {
                            summonerName: e
                        }), n = this.$(`<lol-uikit-content-block type="dialog-small">\n          <p>${t}</p>\n        </lol-uikit-content-block>`), s = this.get("member.summonerId");
                        if (this.get("currentPlayerIsLeader") && !this.get("_transferringLeadership")) {
                            this.showModal({
                                type: "DialogConfirm",
                                data: {
                                    contents: n,
                                    acceptText: this.get("tra.parties_button_kick"),
                                    declineText: this.get("tra.parties_button_cancel"),
                                    onAccept: () => {
                                        this.get("lobbiesService").removePlayerFromParty(s)
                                    }
                                }
                            }).domNode.classList.add("parties-kick-player-modal")
                        }
                    },
                    toggleInvitePrivilege: function() {
                        const e = this.get("member"),
                            t = this.get("currentPlayerIsLeader");
                        if (!this.get("_transferringLeadership") && t && e && !this.get("isMe")) {
                            const t = e.allowedInviteOthers ? "revoke-invite" : "grant-invite",
                                n = this.get("member.summonerId");
                            this.get("lobbiesService").sendInvitePrivilegeAction(n, t)
                        }
                    },
                    promoteToOwner: function() {
                        this.get("member") && this.promotePlayer()
                    },
                    block: function() {
                        if (this.get("member")) {
                            const e = {
                                summonerId: this.get("member.summonerId")
                            };
                            this.blockPlayer(e)
                        }
                    }
                }
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "2etMwXrt",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\player-banners\\\\player-party-controls-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\player-banners\\\\player-party-controls-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\player-banners\\\\player-party-controls-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","parties-player-labels-wrapper"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","parties-player-name-container"],["flush-element"],["text","\\n"],["block",["if"],[["get",["isLeader"]]],null,12],["text","    "],["open-element","lol-uikit-resizing-text-field",[]],["static-attr","class","parties-player-name"],["static-attr","data-max-width","140"],["flush-element"],["text","\\n      "],["append",["helper",["player-name"],null,[["format","puuid","summonerName"],["tooltip",["get",["member","puuid"]],["get",["member","summonerName"]]]]],false],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n"],["close-element"],["text","\\n\\n"],["block",["if"],[["get",["isNotMe"]]],null,11],["text","\\n\\n\\n"],["open-element","div",[]],["static-attr","class","lol-not-ready-loader"],["flush-element"],["text","\\n"],["block",["if"],[["get",["shouldShowGhostedBanner"]]],null,4],["close-element"],["text","\\n"],["block",["if"],[["get",["shouldShowRestrictions"]]],null,3],["text","\\n\\n"],["block",["if"],[["get",["showPositionSelector"]]],null,0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["append",["helper",["player-positions"],null,[["member","isMe","currentTeamIsFull","animationsEnabled","positionSelectorEmberApp","positionSelectorData","cachePositionSelector"],[["get",["member"]],["get",["isMe"]],["get",["currentTeamIsFull"]],["get",["animationsEnabled"]],["get",["positionSelectorEmberApp"]],["get",["positionSelectorData"]],["helper",["action"],[["get",[null]],["get",["cachePositionSelector"]]],null]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["open-element","p",[]],["flush-element"],["append",["get",["restriction"]],false],["close-element"],["text","\\n"]],"locals":["restriction"]},{"statements":[["text","      "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n"],["block",["each"],[["get",["restrictionToolTipText"]]],null,1],["text","      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["dynamic-attr","class",["concat",["player-lobby-restrictions ",["unknown",["restrictionLeaderClass"]]]]],["flush-element"],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipConfig"],[["get",["tooltipConfig"]]]],2],["text","  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","lol-not-ready-loader-segment"],["flush-element"],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","lol-not-ready-loader-segment"],["flush-element"],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","lol-not-ready-loader-segment"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n          "],["open-element","p",[]],["flush-element"],["text","\\n            "],["append",["unknown",["tra","captain_controls_tooltip"]],false],["text","\\n          "],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["player-management-button"],null,[["type","action"],["options","openCaptainMenu"]],5]],"locals":[]},{"statements":[["text","        "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n          "],["open-element","p",[]],["flush-element"],["text","\\n            "],["append",["unknown",["tra","context_menu_friend_request"]],false],["text","\\n          "],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["player-management-button"],null,[["type","action"],["add-friend","sendFriendRequest"]],7]],"locals":[]},{"statements":[["text","        "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n          "],["open-element","p",[]],["flush-element"],["text","\\n            "],["append",["unknown",["tra","kick_tooltip"]],false],["text","\\n          "],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["comment"," kick button is for party owners only "],["text","\\n"],["block",["player-management-button"],null,[["type","action"],["kick","kick"]],9]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","player-party-tools"],["flush-element"],["text","\\n"],["block",["if"],[["get",["showPartyOwnerTools"]]],null,10],["text","\\n    "],["comment"," any party member can Add Friend "],["text","\\n"],["block",["unless"],[["get",["isFriended"]]],null,8],["text","\\n    "],["comment"," options menu button is for party owners only "],["text","\\n"],["block",["if"],[["get",["showPartyOwnerTools"]]],null,6],["text","  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","parties-player-leader-icon"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            e.exports = s.Ember.Component.extend({
                layout: n(175),
                classNames: ["parties-invite-button"],
                currentPlayerCanInvite: null,
                buttonsDisabled: null,
                currentPartyIsFull: null,
                isCurrentPlayerPartyLeader: null,
                isLobbyFull: null,
                partiesInviteButtonText: s.Ember.computed("tra.ready", "tra.parties_invite_button", (function() {
                    return this.get("tra.parties_invite_button")
                })),
                inviteButtonTooltip: s.Ember.computed("currentPartyIsFull", "isCurrentPlayerPartyLeader", "tra.ready", "tra.parties_invite_full_party_tooltip", "tra.parties_invite_privileges_tooltip_none", "buttonsDisabled", "cannotInviteOthers", (function() {
                    return this.get("buttonsDisabled") ? this.get("tra.parties_matchmaking_searching_tooltip") : this.get("currentPartyIsFull") || this.get("cannotInviteOthers") ? this.get("tra.parties_invite_full_party_tooltip") : this.get("tra.parties_invite_privileges_tooltip_none")
                })),
                cannotInviteOthers: s.Ember.computed.not("currentPlayerCanInvite"),
                inviteButtonDisabled: s.Ember.computed.or("buttonsDisabled", "currentPartyIsFull", "cannotInviteOthers", "isLobbyFull"),
                inviteButtonEnabled: s.Ember.computed.not("inviteButtonDisabled"),
                actions: {
                    showInvite: function() {
                        this.get("inviteButtonEnabled") && this.sendAction("showInviteModal")
                    }
                }
            })
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "WNOI+/Gp",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\invite-button-component\\\\layout.hbs\\" style-path=\\"null\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\invite-button-component\\\\index.js\\" "],["text","\\n"],["open-element","lol-uikit-flat-button",[]],["static-attr","class","parties-invite-button"],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"showInvite"],null],null],["dynamic-attr","disabled",["unknown",["inviteButtonDisabled"]],null],["flush-element"],["text","\\n  "],["append",["unknown",["partiesInviteButtonText"]],false],["text","\\n"],["block",["if"],[["get",["cannotInviteOthers"]]],null,1],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n        "],["open-element","p",[]],["flush-element"],["text","\\n          "],["append",["unknown",["inviteButtonTooltip"]],false],["text","\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["uikit-tooltip"],null,[["tooltipPosition","type"],["bottom","system"]],0]],"locals":[]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s, i = n(1),
                o = (s = n(74)) && s.__esModule ? s : {
                    default: s
                },
                a = n(18);
            n(177);
            e.exports = i.Ember.Component.extend(o.default, {
                layout: n(178),
                classNames: ["parties-invite-info-panel"],
                currentPlayerCanInvite: !1,
                isCustom: !1,
                isTFT: !1,
                isNotTFT: i.Ember.computed.not("isTFT"),
                lobbiesService: i.Ember.inject.service("lobbies"),
                tftService: i.Ember.inject.service("tft"),
                activeMilestonesProgress: i.Ember.computed.alias("tftService.activeMilestonesProgress"),
                invitedPlayerIds: i.Ember.computed.alias("lobbiesService.invitedPlayerIds"),
                invites: i.Ember.computed.alias("lobbiesService.invites"),
                hasInvites: i.Ember.computed.gt("invites.length", 0),
                isNotCustom: i.Ember.computed.not("isCustom"),
                _tryingToViewProgression: !0,
                viewingProgression: i.Ember.computed.and("_tryingToViewProgression", "progressionEnabled", "isTFT", "showingState.isInViewport"),
                progressionEnabled: !0,
                _tryingToViewSuggested: !0,
                viewingSuggested: i.Ember.computed.and("_tryingToViewSuggested", "suggestedEnabled", "isNotTFT"),
                suggestedPlayers: i.Ember.computed.alias("lobbiesService.currentPartySuggestedPlayers"),
                panelIsCollapsed: !1,
                suggestedInvites: i.Ember.computed("suggestedPlayers.[]", "suggestedPlayers.@each.summonerId", "invitedPlayerIds.[]", (function() {
                    const e = this.get("suggestedPlayers") || [],
                        t = this.get("invitedPlayerIds");
                    let n = i.Ember.A(),
                        s = i.Ember.A();
                    return e.forEach((e => {
                        const i = e.get("summonerId");
                        t && t.indexOf(i) >= 0 || (e.get("reason") === a.SUGGESTED_TYPES.FRIEND ? n.push(e) : s.push(e))
                    })), n = n.sortBy("summonerName"), s = s.sortBy("summonerName"), s.forEach((e => {
                        n.push(e)
                    })), this.get("isTFT") && n.length > 4 && (n = n.slice(0, 3)), n
                })),
                noSuggestedInvites: i.Ember.computed.equal("suggestedInvites.length", 0),
                currentPlayerCannotInvite: i.Ember.computed.not("currentPlayerCanInvite"),
                suggestedDisabled: i.Ember.computed.or("noSuggestedInvites", "currentPlayerCannotInvite", "isCustom"),
                suggestedEnabled: i.Ember.computed.not("suggestedDisabled"),
                actions: {
                    viewSuggested() {
                        (!this.get("suggestedDisabled") && !this.get("_tryingToViewSuggested") || this.get("viewingProgression")) && (this.set("_tryingToViewSuggested", !0), this.set("_tryingToViewProgression", !1), this.playSound("/fe/lol-uikit/sfx-uikit-text-click-small.ogg"))
                    },
                    viewInvited() {
                        (this.get("_tryingToViewSuggested") || this.get("viewingProgression")) && (this.set("_tryingToViewSuggested", !1), this.set("_tryingToViewProgression", !1), this.playSound("/fe/lol-uikit/sfx-uikit-text-click-small.ogg"))
                    },
                    viewProgression() {
                        this.set("_tryingToViewSuggested", !1), this.set("_tryingToViewProgression", !0), this.playSound("/fe/lol-uikit/sfx-uikit-text-click-small.ogg")
                    },
                    toggleCollapsed() {
                        this.toggleProperty("panelIsCollapsed"), this.get("element").classList.toggle("collapsed"), this.playSound("/fe/lol-uikit/sfx-uikit-text-click-small.ogg")
                    }
                }
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "IwjuWpkt",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\invite-info-panel\\\\component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\invite-info-panel\\\\component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\invite-info-panel\\\\component\\\\index.js\\" "],["text","\\n"],["block",["if"],[["get",["isTFT"]]],null,14,13],["text","\\n"],["open-element","div",[]],["dynamic-attr","class",["concat",["parties-invite-info-panel-body ",["helper",["if"],[["get",["panelIsCollapsed"]],"collapsed"],null]]]],["flush-element"],["text","\\n  "],["open-element","ul",[]],["dynamic-attr","class",["concat",["parties-invite-info-panel-list\\n  ",["helper",["if"],[["get",["viewingSuggested"]],"viewing-suggested"],null],"\\n  ",["helper",["if"],[["get",["isCustom"]],"parties-invite-info-is-custom"],null]]]],["flush-element"],["text","\\n"],["block",["if"],[["get",["viewingSuggested"]]],null,10,8],["text","  "],["close-element"],["text","\\n"],["close-element"],["text","\\n\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","        "],["open-element","li",[]],["static-attr","class","parties-invite-info-empty"],["flush-element"],["text","\\n          "],["open-element","span",[]],["static-attr","class","parties-invite-info-empty-text"],["flush-element"],["text","\\n            "],["append",["unknown",["tra","custom_game_invited_panel_no_invites"]],false],["text","\\n          "],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["append",["helper",["invite-info-panel-player"],null,[["currentPlayerCanInvite","invitedPlayer","isSuggested"],[["get",["currentPlayerCanInvite"]],["get",["invite"]],false]]],false],["text","\\n"]],"locals":["invite"]},{"statements":[["block",["each"],[["get",["invites"]]],null,1]],"locals":[]},{"statements":[["text","            "],["append",["helper",["invite-info-panel-player"],null,[["currentPlayerCanInvite","player","isSuggested"],[["get",["currentPlayerCanInvite"]],["get",["suggestedPlayer"]],true]]],false],["text","\\n"]],"locals":["suggestedPlayer"]},{"statements":[["block",["each"],[["get",["suggestedInvites"]]],null,3]],"locals":[]},{"statements":[["block",["unless"],[["get",["suggestedDisabled"]]],null,4]],"locals":[]},{"statements":[["block",["if"],[["get",["isTFT"]]],null,5],["block",["if"],[["get",["hasInvites"]]],null,2,0],["text","    "]],"locals":[]},{"statements":[["text","      "],["append",["helper",["invite-info-panel-tft-progression"],null,[["class","activeMilestonesProgress"],["tft-progression",["get",["activeMilestonesProgress"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["viewingProgression"]]],null,7,6]],"locals":[]},{"statements":[["text","        "],["append",["helper",["invite-info-panel-player"],null,[["currentPlayerCanInvite","player","isSuggested"],[["get",["currentPlayerCanInvite"]],["get",["suggestedPlayer"]],true]]],false],["text","\\n"]],"locals":["suggestedPlayer"]},{"statements":[["block",["each"],[["get",["suggestedInvites"]]],null,9]],"locals":[]},{"statements":[["text","  "],["comment"," Do not show tabbed header with suggested if invite info only "],["text","\\n  "],["comment"," Note: this file should be revised into parties-v2 "],["text","\\n  "],["open-element","div",[]],["static-attr","class","custom-invite-header"],["flush-element"],["text","\\n    "],["open-element","span",[]],["static-attr","class","custom-invite-header-text"],["flush-element"],["text","\\n      "],["append",["unknown",["tra","invited_panel_title"]],false],["text"," ("],["append",["unknown",["invites","length"]],false],["text",")\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["dynamic-attr","class",["concat",["split-panel-header ",["helper",["if"],[["get",["viewingSuggested"]],"left-tab-active","right-tab-active"],null]]]],["flush-element"],["text","\\n    "],["open-element","a",[]],["static-attr","id","invite-header-suggested"],["dynamic-attr","class",["concat",["split-panel-header-title\\n        ",["helper",["if"],[["get",["viewingSuggested"]],"active"],null],"\\n        ",["helper",["if"],[["get",["suggestedDisabled"]],"disabled"],null]]]],["modifier",["action"],[["get",[null]],"viewSuggested"]],["flush-element"],["text","\\n        "],["append",["unknown",["tra","suggested_panel_lobby_title"]],false],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","a",[]],["static-attr","id","invite-header-invited"],["dynamic-attr","class",["concat",["split-panel-header-title ",["helper",["if"],[["get",["viewingSuggested"]],"","active"],null]]]],["modifier",["action"],[["get",[null]],"viewInvited"]],["flush-element"],["text","\\n          "],["append",["unknown",["tra","invited_panel_title"]],false],["text"," ("],["append",["unknown",["invites","length"]],false],["text",")\\n    "],["close-element"],["text","\\n    "],["open-element","div",[]],["dynamic-attr","class",["concat",["split-panel-arrow ",["helper",["if"],[["get",["panelIsCollapsed"]],"collapsed"],null]]]],["modifier",["action"],[["get",[null]],"toggleCollapsed"]],["flush-element"],["close-element"],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["isNotCustom"]]],null,12,11]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["dynamic-attr","class",["concat",["split-panel-header ",["helper",["if"],[["get",["viewingProgression"]],"left-tab-active","right-tab-active"],null]]]],["flush-element"],["text","\\n    "],["open-element","a",[]],["static-attr","id","invite-header-progression"],["dynamic-attr","class",["concat",["split-panel-header-title\\n        ",["helper",["if"],[["get",["viewingProgression"]],"active"],null],"\\n        ",["helper",["unless"],[["get",["progressionEnabled"]],"disabled"],null]]]],["modifier",["action"],[["get",[null]],"viewProgression"]],["flush-element"],["text","\\n        "],["append",["unknown",["tra","tft_progression_panel_title"]],false],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","a",[]],["static-attr","id","invite-header-invited"],["dynamic-attr","class",["concat",["split-panel-header-title ",["helper",["if"],[["get",["viewingProgression"]],"","active"],null]]]],["modifier",["action"],[["get",[null]],"viewInvited"]],["flush-element"],["text","\\n          "],["append",["unknown",["tra","invited_panel_title"]],false],["text"," ("],["append",["unknown",["invites","length"]],false],["text",")\\n    "],["close-element"],["text","\\n    "],["open-element","div",[]],["dynamic-attr","class",["concat",["split-panel-arrow ",["helper",["if"],[["get",["panelIsCollapsed"]],"collapsed"],null]]]],["modifier",["action"],[["get",[null]],"toggleCollapsed"]],["flush-element"],["close-element"],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1),
                i = a(n(74)),
                o = a(n(122));

            function a(e) {
                return e && e.__esModule ? e : {
                    default: e
                }
            }
            n(180);
            const l = (0, s.emberDataBinding)({
                Ember: s.Ember,
                websocket: (0, s.getProvider)().getSocket(),
                logPrefix: "parties:invite-info-panel-player:component",
                basePaths: {
                    lobby: "/lol-lobby"
                }
            });
            e.exports = s.Ember.Component.extend(l, i.default, o.default, {
                tagName: "li",
                classNames: "parties-invite-info-panel-player",
                classNameBindings: ["isSuggested:parties-suggested-player", "showPendingIndicator:parties-pending-invite", "isKicked:parties-kicked-invite", "isDeclined:parties-declined-invite", "isAccepted:parties-accepted-invite", "isError:parties-error-invite", "currentPlayerCanInvite:enabled:disabled"],
                attributeBindings: ["summonerId"],
                customGamesService: s.Ember.inject.service("custom-games"),
                lobbiesService: s.Ember.inject.service("lobbies"),
                invitesService: s.Ember.inject.service("invites"),
                disabled: !1,
                _invitedFromSuggested: !1,
                _previousSummonerId: null,
                isSuggested: null,
                player: null,
                invitedPlayer: null,
                summonerId: s.Ember.computed("player.summonerId", "invitedPlayer.toSummonerId", (function() {
                    return this.get("invitedPlayer.toSummonerId") || this.get("player.summonerId")
                })),
                recycle: s.Ember.computed("summonerId", (function() {
                    const e = this.get("summonerId");
                    e && e !== this.get("_previousSummonerId") && (this.set("_invitedFromSuggested", !1), this.set("_previousSummonerId", e))
                })),
                layout: n(181),
                name: s.Ember.computed("player.summonerName", "invitedPlayer.toSummonerName", (function() {
                    return this.get("player.summonerName") || this.get("invitedPlayer.toSummonerName") || ""
                })),
                isPending: s.Ember.computed.equal("invitedPlayer.state", "Pending"),
                isAccepted: s.Ember.computed.equal("invitedPlayer.state", "Accepted"),
                isDeclined: s.Ember.computed.equal("invitedPlayer.state", "Declined"),
                isKicked: s.Ember.computed.equal("invitedPlayer.state", "Kicked"),
                isError: s.Ember.computed.equal("invitedPlayer.state", "Error"),
                showPendingIndicator: s.Ember.computed.or("isPending", "isRequested"),
                errorObserver: s.Ember.computed("isError", "name", (function() {
                    this.get("isError") && this.get("customGamesService.isCustomUI") && this.get("name") && this._showCustomBannedToast()
                })),
                _showCustomBannedToast: function() {
                    const e = this.get("lobbiesService.invitations") || [],
                        t = this.get("summonerId");
                    for (let n = 0; n < e.length; n++) {
                        const s = e[n];
                        if (s.get("toSummonerId").toString() !== t.toString() || !s.get("errorType").match(/NotInvitableException/)) continue;
                        const i = this.get("name"),
                            o = this.get("tra.formatString")("custom_game_invite_banned_error", {
                                summonerName: i
                            });
                        this.showToast(o);
                        break
                    }
                },
                actions: {
                    remove: function() {
                        this.get("lobbiesService").removeSuggestedPlayer(this.get("player.summonerId"))
                    }
                },
                click: function() {
                    if (this.get("isSuggested") && this.get("currentPlayerCanInvite") && !this.get("disabled") && !this.get("_invitedFromSuggested")) {
                        this.set("_invitedFromSuggested", !0), this.playSound("/fe/lol-uikit/sfx-uikit-generic-click-small.ogg");
                        const e = this.get("summonerId");
                        this.get("lobbiesService").removeSuggestedPlayer(e);
                        const t = this.get("name");
                        this.get("invitesService").invitePlayer(e, t)
                    }
                }
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "V/3u3Ry4",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\invite-info-panel\\\\player-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\invite-info-panel\\\\player-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\invite-info-panel\\\\player-component\\\\index.js\\" "],["text","\\n"],["block",["if"],[["get",["showPendingIndicator"]]],null,1],["open-element","span",[]],["static-attr","class","invite-info-name"],["flush-element"],["text","\\n  "],["append",["helper",["player-name"],null,[["format","summonerId","summonerName"],["tooltip",["get",["summonerId"]],["get",["name"]]]]],false],["text","\\n"],["close-element"],["text","\\n"],["block",["if"],[["get",["isSuggested"]]],null,0],["comment"," Work around for Ember.computed to act like an observer. "],["text","\\n"],["open-element","div",[]],["static-attr","style","display: none;"],["flush-element"],["text","\\n  "],["append",["unknown",["recycle"]],false],["text"," "],["append",["unknown",["errorObserver"]],false],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["open-element","button",[]],["static-attr","class","parties-remove-suggested-player"],["modifier",["action"],[["get",[null]],"remove"],[["bubbles"],[false]]],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","lol-pending-loader"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","lol-pending-loader-segment"],["flush-element"],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","lol-pending-loader-segment"],["flush-element"],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","lol-pending-loader-segment"],["flush-element"],["close-element"],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            n(183);
            const {
                RunMixin: i
            } = s.EmberAddons.EmberLifeline;
            e.exports = s.Ember.Component.extend(i, {
                layout: n(184),
                classNames: ["parties-invite-panel-tft-progression"],
                tftService: s.Ember.inject.service("tft"),
                media: s.Ember.computed.alias("tftService.media"),
                previousMilestone: s.Ember.computed("activeMilestonesProgress.0.{isPaid,isLocked,pointsEarnedForMilestone,missionId,status,state}", (function() {
                    return s.Ember.copy(this.get("activeMilestonesProgress.0"))
                })),
                nextMilestone: s.Ember.computed("activeMilestonesProgress.1.{isPaid,isLocked,pointsEarnedForMilestone,missionId,status,state}", (function() {
                    return s.Ember.copy(this.get("activeMilestonesProgress.1"))
                })),
                actions: {
                    navigateToTft() {
                        s.Router.navigateTo("rcp-fe-lol-tft", {
                            page: "battle-pass"
                        })
                    },
                    claim(e) {
                        if (this.get("loadingTimeoutId")) return;
                        if ("REWARDABLE" !== e.state || "DUMMY" === e.status) return void this.send("navigateToTft");
                        const t = this.runTask((() => {
                            this.set("loadingTimeoutId", null)
                        }), 5e3);
                        this.set("loadingTimeoutId", t);
                        const n = this.get("tftService");
                        s.Telemetry.sendEvent("tft-claim-reward-button-clicked", e.missionInternalName), n.claimRewards(e)
                    }
                }
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "h1AYKLT8",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\invite-info-panel\\\\tft-progression-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\invite-info-panel\\\\tft-progression-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\invite-info-panel\\\\tft-progression-component\\\\index.js\\" "],["text","\\n"],["block",["if"],[["get",["nextMilestone"]]],null,2,0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","progression-complete"],["modifier",["action"],[["get",[null]],"navigateToTft"]],["flush-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","progression-complete-title"],["flush-element"],["append",["unknown",["tra","tft_progression_complete_title"]],false],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","progression-complete-body"],["flush-element"],["append",["unknown",["tra","tft_progression_complete_body"]],false],["close-element"],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","              "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-small"],["flush-element"],["text","\\n                "],["open-element","p",[]],["flush-element"],["text","\\n                  "],["append",["unknown",["tra","tft_progression_description"]],false],["text","\\n                "],["close-element"],["text","\\n              "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","progression-milestone-container"],["flush-element"],["text","\\n        "],["append",["helper",["battlepass-milestone"],null,[["milestone","click","isSmall","displayIndex","media"],[["get",["previousMilestone"]],["helper",["action"],[["get",[null]],"claim",["get",["previousMilestone"]]],null],true,0,["get",["media"]]]]],false],["text","\\n\\n        "],["append",["helper",["battlepass-milestone"],null,[["milestone","click","isSmall","displayIndex","media"],[["get",["nextMilestone"]],["helper",["action"],[["get",[null]],"navigateToTft"],null],true,1,["get",["media"]]]]],false],["text","\\n        "],["open-element","div",[]],["static-attr","class","reward-container"],["modifier",["action"],[["get",[null]],"navigateToTft"]],["flush-element"],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipPosition","type"],["top","small"]],1],["text","            "],["open-element","div",[]],["static-attr","class","reward-label"],["flush-element"],["append",["unknown",["tra","tft_progression_next"]],false],["close-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","reward-title"],["flush-element"],["append",["unknown",["nextMilestone","title"]],false],["close-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","progress-container"],["flush-element"],["text","\\n                "],["open-element","div",[]],["static-attr","class","progress-current"],["flush-element"],["append",["unknown",["nextMilestone","pointsEarnedForMilestone"]],false],["close-element"],["text","\\n                "],["open-element","div",[]],["static-attr","class","progress-divider"],["flush-element"],["text","/"],["close-element"],["text","\\n                "],["open-element","div",[]],["static-attr","class","progress-total"],["flush-element"],["append",["unknown",["nextMilestone","pointsNeededForMilestone"]],false],["close-element"],["text","\\n            "],["close-element"],["text","\\n        "],["close-element"],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            n(186);
            var i, o = (i = n(74)) && i.__esModule ? i : {
                default: i
            };
            const {
                RunMixin: a
            } = s.EmberAddons.EmberLifeline;
            e.exports = s.Ember.Component.extend(a, o.default, {
                layout: n(187),
                tagName: "button",
                classNameBindings: ["typeClass"],
                disabled: !1,
                disabledAfterClickDelay: 0,
                typeClass: s.Ember.computed("type", (function() {
                    return "player-management-button-" + this.get("type")
                })),
                onDidInsertElement: s.Ember.on("didInsertElement", (function() {
                    this.addHoverClickSound(this.element, "/fe/lol-uikit/sfx-uikit-button-circlegold-hover.ogg", "/fe/lol-parties/sfx-lobby-button-banner-click.ogg")
                })),
                enableInviteButton: function(e = 0) {
                    this.runTask((() => this.set("disabled", !1)), e)
                },
                click: function() {
                    this.get("disabled") || (this.sendAction("action"), this.set("disabled", !0), this.enableInviteButton(this.get("disabledAfterClickDelay")))
                }
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "OdqjjaUv",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\player-management-button-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\player-management-button-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\player-management-button-component\\\\index.js\\" "],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipPosition","type"],["top","system"]],0]],"locals":[],"named":[],"yields":["default"],"blocks":[{"statements":[["text","  "],["yield","default"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1),
                i = a(n(16)),
                o = a(n(74));

            function a(e) {
                return e && e.__esModule ? e : {
                    default: e
                }
            }
            n(189), e.exports = s.Ember.Component.extend(o.default, {
                layout: n(190),
                classNameBindings: ["isCustomGame:parties-point-eligibility-custom"],
                platformConfig: i.default,
                platformEternalsEnabled: s.Ember.computed.alias("platformConfig.eternalsEnabled"),
                eternalsService: s.Ember.inject.service("eternals"),
                isCustomGame: !1,
                tooltipConfig: s.Ember.computed("isCustomGame", "tooltipConfigCustom", "tooltipConfigParties", (function() {
                    return this.get("isCustomGame") ? this.get("tooltipConfigCustom") : this.get("tooltipConfigParties")
                })),
                tooltipConfigParties: {
                    targetAnchor: {
                        x: "center",
                        y: "bottom"
                    },
                    tooltipAnchor: {
                        x: "center",
                        y: "top"
                    },
                    offset: {
                        x: 0,
                        y: 5
                    }
                },
                tooltipConfigCustom: {
                    targetAnchor: {
                        x: "right",
                        y: "center"
                    },
                    tooltipAnchor: {
                        x: "left",
                        y: "center"
                    },
                    offset: {
                        x: 5,
                        y: 0
                    }
                },
                xpEnabled: s.Ember.computed.alias("selected.queue.queueRewards.isXpEnabled"),
                xpDisabledClass: s.Ember.computed("xpEnabled", (function() {
                    return this.get("xpEnabled") ? "" : "disabled"
                })),
                championMasteryEnabled: s.Ember.computed.alias("selected.queue.queueRewards.isChampionPointsEnabled"),
                championMasteryDisabledClass: s.Ember.computed("championMasteryEnabled", (function() {
                    return this.get("championMasteryEnabled") ? "" : "disabled"
                })),
                eternalsEnabledForQueue: s.Ember.computed("eternalsService.enabledQueues", "selected.queue.id", (function() {
                    const e = this.get("selected.queue.id"),
                        t = this.get("eternalsService.enabledQueues");
                    return !(!t || null === t) && t.includes(e)
                })),
                eternalsDisabledClass: s.Ember.computed("eternalsEnabledForQueue", (function() {
                    return this.get("eternalsEnabledForQueue") ? "" : "disabled"
                }))
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "vsAFNky4",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\point-eligibility-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\point-eligibility-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\point-eligibility-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","parties-point-eligibility-content"],["flush-element"],["text","\\n  "],["open-element","ul",[]],["static-attr","class","parties-point-eligibility-list"],["flush-element"],["text","\\n    "],["open-element","li",[]],["dynamic-attr","class",["concat",["parties-point-eligibility-experience ",["unknown",["xpDisabledClass"]]]]],["flush-element"],["close-element"],["text","\\n    "],["open-element","li",[]],["dynamic-attr","class",["concat",["parties-point-eligibility-mastery ",["unknown",["championMasteryDisabledClass"]]]]],["flush-element"],["close-element"],["text","\\n"],["block",["if"],[["get",["platformEternalsEnabled"]]],null,2],["text","  "],["close-element"],["text","\\n"],["close-element"],["text","\\n\\n"],["block",["uikit-tooltip"],null,[["tooltipConfig"],[["get",["tooltipConfig"]]]],1],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["open-element","li",[]],["dynamic-attr","class",["concat",["parties-point-eligibility-tooltip-content-eternals ",["unknown",["eternalsDisabledClass"]]]]],["flush-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","parties-point-eligibility-tooltip-content-eternals-icon"],["flush-element"],["text","\\n        "],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","parties-point-eligibility-tooltip-content-eternals-description"],["flush-element"],["text","\\n          "],["append",["unknown",["tra","parties_point_eligibility_tooltip_eternals"]],false],["text","\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","lol-uikit-content-block",[]],["static-attr","padding","medium"],["static-attr","class","parties-point-eligibility-tooltip-content"],["flush-element"],["text","\\n    "],["open-element","h6",[]],["static-attr","class","parties-point-eligibility-tooltip-content-title"],["flush-element"],["text","\\n      "],["append",["unknown",["tra","parties_point_eligibility_tooltip_title"]],false],["text","\\n    "],["close-element"],["text","\\n\\n    "],["open-element","ul",[]],["static-attr","class","parties-point-eligibility-tooltip-content-list"],["flush-element"],["text","\\n      "],["open-element","li",[]],["dynamic-attr","class",["concat",["parties-point-eligibility-tooltip-content-experience ",["unknown",["xpDisabledClass"]]]]],["flush-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","parties-point-eligibility-tooltip-content-experience-icon"],["flush-element"],["text","\\n        "],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","parties-point-eligibility-tooltip-content-experience-description"],["flush-element"],["text","\\n          "],["append",["unknown",["tra","parties_point_eligibility_tooltip_experience"]],false],["text","\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n      "],["open-element","li",[]],["dynamic-attr","class",["concat",["parties-point-eligibility-tooltip-content-mastery ",["unknown",["championMasteryDisabledClass"]]]]],["flush-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","parties-point-eligibility-tooltip-content-mastery-icon"],["flush-element"],["text","\\n        "],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","parties-point-eligibility-tooltip-content-mastery-description"],["flush-element"],["text","\\n          "],["append",["unknown",["tra","parties_point_eligibility_tooltip_masteries"]],false],["text","\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n      \\n"],["block",["if"],[["get",["platformEternalsEnabled"]]],null,0],["text","    "],["close-element"],["text","\\n    \\n  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","li",[]],["dynamic-attr","class",["concat",["parties-point-eligibility-eternals ",["unknown",["eternalsDisabledClass"]]]]],["flush-element"],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            n(192);
            const i = 6e5;
            e.exports = s.Ember.Component.extend({
                layout: n(193),
                classNames: ["parties-disband-countdown"],
                classNameBindings: ["shouldDisplayCountdown::hidden-countdown", "timerEnabled::timer-disabled"],
                _haveLobbyTimer: !1,
                counter: 0,
                gameflowService: s.Ember.inject.service("gameflow"),
                lobbiesService: s.Ember.inject.service("lobbies"),
                timerEnabled: s.Ember.computed.alias("lobbiesService.lobbyTimerEnabled"),
                timerCountdown: s.Ember.computed.alias("lobbiesService.lobbyTimerCountdown"),
                shouldDisplayCountdown: s.Ember.computed.and("gameflowService.isLobby", "_haveLobbyTimer"),
                partiesCountdownObserver: s.Ember.computed("timerCountdown", "timerEnabled", "gameflowService.isLobby", (function() {
                    if (this.get("gameflowService.isLobby") && this.get("timerEnabled")) {
                        const e = 1e3 * this.get("timerCountdown"),
                            t = (new Date).getTime(),
                            n = e - i;
                        this.mLobbyTimeout = t + e, this.mLobbyTimeoutNotification = t + n, this.startCountdown()
                    } else this.set("_haveLobbyTimer", !1), this._clearTimer()
                })),
                toTimeString: function(e) {
                    if (e >= 0) {
                        e = Math.floor(e);
                        const t = Math.floor(e / 60);
                        let n = "" + e % 60;
                        return n.length < 2 && (n = `0${n}`), `${t}:${n}`
                    }
                },
                countdownInterval: 250,
                startCountdown: function() {
                    this.timer || (this.timer = setInterval(function() {
                        const e = (new Date).getTime();
                        if (e <= this.mLobbyTimeout && e >= this.mLobbyTimeoutNotification) {
                            this.set("_haveLobbyTimer", !0);
                            const t = (i - e + this.mLobbyTimeoutNotification) / 1e3;
                            this.set("countdown", this.toTimeString(Math.floor(t)))
                        }
                        e > this.mLobbyTimeout && (this.set("_haveLobbyTimer", !1), this._clearTimer())
                    }.bind(this), this.get("countdownInterval")))
                },
                _clearTimer: function() {
                    this.timer && (clearInterval(this.timer), this.timer = null)
                }
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "z8KqruW9",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\disband-countdown-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\disband-countdown-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\disband-countdown-component\\\\index.js\\" "],["text","\\n"],["append",["unknown",["tra","parties_disbanded_countdown_title"]],false],["text"," "],["append",["unknown",["countdown"]],false],["text"," "],["append",["unknown",["partiesCountdownObserver"]],false],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s, i = n(1),
                o = (s = n(74)) && s.__esModule ? s : {
                    default: s
                },
                a = n(18);
            n(195);
            const {
                RunMixin: l
            } = i.EmberAddons.EmberLifeline;
            e.exports = i.Ember.Component.extend(l, o.default, {
                layout: n(196),
                classNames: ["open-party-toggle"],
                lobbiesService: i.Ember.inject.service("lobbies"),
                gameflowService: i.Ember.inject.service("gameflow"),
                isPartyLeader: i.Ember.computed.alias("lobbiesService.isCurrentPlayerPartyLeader"),
                partyType: i.Ember.computed.alias("lobbiesService.partyType"),
                isInLobby: i.Ember.computed.alias("gameflowService.isLobby"),
                disabled: i.Ember.computed("isPartyLeader", "isInLobby", (function() {
                    return !this.get("isPartyLeader") || !this.get("isInLobby")
                })),
                requestedPartyType: null,
                tooltipDelayTime: 750,
                isToggleAnimating: !1,
                toggleDelayTime: 500,
                _firstExperienceContextualNotification: null,
                shownOpenPartyFirstExperience: !1,
                settingsService: i.Ember.inject.service("party-settings"),
                hasSeenOpenPartyFirstExperience: i.Ember.computed.alias("settingsService.hasSeenOpenPartyFirstExperience"),
                hoverSoundDisabled: i.Ember.computed.alias("disabled"),
                isOpenParty: i.Ember.computed("partyType", (function() {
                    return this.runTask((function() {
                        this._checkIfShowFirstExperience()
                    }), 1), this.get("partyType") === a.PARTY_TYPES.OPEN
                })),
                showPartyOpen: i.Ember.computed("isOpenParty", "requestedPartyType", (function() {
                    return this.get("requestedPartyType") !== a.PARTY_TYPES.CLOSED && !(this.get("requestedPartyType") !== a.PARTY_TYPES.OPEN && !this.get("isOpenParty"))
                })),
                initObserver: i.Ember.on("init", (function() {
                    i.Ember.run.once(this, (function() {
                        if (this.element) {
                            const e = this._getToggleContainer();
                            this.attachHoverSoundWithDisabledCheck(e, "/fe/lol-parties/sfx-uikit-button-circlegold-hover.ogg")
                        }
                    }))
                })),
                gameflowPhaseObserver: i.Ember.on("init", i.Ember.observer("gameflowService.phase", (function() {
                    "Lobby" === this.get("gameflowService.phase") ? this._checkIfShowFirstExperience() : this._hideOpenFirstExperienceContextualNofication()
                }))),
                isInViewportObserver: i.Ember.on("init", i.Ember.observer("showingState.isInViewport", (function() {
                    this._checkIfShowFirstExperience()
                }))),
                openPartyToggleTooltip: i.Ember.computed("isOpenParty", "tra.ready", "tra.parties_toggle_open", "tra.parties_toggle_closed", "tra.parties_toggle_not_party_leader", "isPartyLeader", (function() {
                    return this.get("isPartyLeader") ? this.get("isOpenParty") ? this.get("tra.parties_toggle_closed") : this.get("tra.parties_toggle_open") : this.get("tra.parties_toggle_not_party_leader")
                })),
                _setIsTogglingAnimationComplete: function() {
                    setTimeout((() => {
                        this.set("isToggleAnimating", !1)
                    }), this.toggleDelayTime)
                },
                _toggle: function() {
                    if (this.get("isPartyLeader") && !this.get("requestedPartyType")) return this.playSound("/fe/lol-parties/sfx-parties-button-toggle.ogg"), this.set("isToggleAnimating", !0), this.get("isOpenParty") ? (this.set("requestedPartyType", a.PARTY_TYPES.CLOSED), this.get("lobbiesService").setPartyType(a.PARTY_TYPES.CLOSED).then((() => {
                        this.set("requestedPartyType", null)
                    })).catch((() => {
                        this.set("requestedPartyType", null)
                    })).finally((() => {
                        this._setIsTogglingAnimationComplete()
                    }))) : (this.set("requestedPartyType", a.PARTY_TYPES.OPEN), this.get("lobbiesService").setPartyType(a.PARTY_TYPES.OPEN).then((() => {
                        this.set("requestedPartyType", null)
                    })).catch((() => {
                        this.set("requestedPartyType", null)
                    })).finally((() => {
                        this._setIsTogglingAnimationComplete()
                    })))
                },
                _getToggleContainer: function() {
                    return this.element ? this.element.querySelector(".toggle-container") : null
                },
                _checkIfShowFirstExperience: function() {
                    "Lobby" === this.get("gameflowService.phase") && !this.get("hasSeenOpenPartyFirstExperience") && this.get("isOpenParty") && this.get("showingState.isInViewport") && !this.get("shownOpenPartyFirstExperience") && this._showOpenPartyFirstExperienceContextualNotification()
                },
                _showOpenPartyFirstExperienceContextualNotification: function() {
                    if (this._getToggleContainer()) {
                        let e;
                        e = this.get("isPartyLeader") ? this.get("tra.parties_open_party_first_experience_owner") : this.get("tra.parties_open_party_first_experience_member");
                        const t = this.get("tra.parties_open_party_first_experience_header"),
                            n = i.UIKit.getContextualNotificationManager(),
                            s = i.UIKit.getTemplateHelper().contentBlockTooltip(t, e, "tooltip-system", "parties-first-experience-tooltip");
                        this.set("shownOpenPartyFirstExperience", !0), setTimeout((() => {
                            const e = this.get("settingsService");
                            e && e.set && e.set("hasSeenOpenPartyFirstExperience", !0);
                            const t = n.add(s, {
                                target: {
                                    domNode: this.element,
                                    anchor: {
                                        x: "center",
                                        y: "bottom"
                                    }
                                },
                                orientation: "bottom",
                                anchor: {
                                    x: "center",
                                    y: "top"
                                },
                                offset: {
                                    x: 0,
                                    y: 15
                                },
                                dismissable: !0
                            });
                            this.set("_firstExperienceContextualNotification", t)
                        }), this.get("tooltipDelayTime"))
                    }
                },
                _hideOpenFirstExperienceContextualNofication: function() {
                    const e = this.get("_firstExperienceContextualNotification");
                    if (e) {
                        i.UIKit.getContextualNotificationManager().remove(e)
                    }
                },
                actions: {
                    toggle: function() {
                        this.get("disabled") || this.get("isToggleAnimating") || this._toggle()
                    }
                }
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "KplZ+9ug",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\open-party-toggle-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\open-party-toggle-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\open-party-toggle-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","open-party-toggle-wrapper"],["dynamic-attr","class",["concat",[["unknown",["partyType"]]," ",["helper",["if"],[["get",["showPartyOpen"]],"right"],null]," ",["helper",["if"],[["get",["disabled"]],"disabled"],null]]]],["flush-element"],["text","\\n  "],["open-element","div",[]],["dynamic-attr","class",["concat",["toggle-container animated ",["helper",["if"],[["get",["isToggleAnimating"]],"is-animating"],null]," "]]],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"toggle"],null],null],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","open"],["flush-element"],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","toggle-button animated"],["flush-element"],["close-element"],["text","\\n  "],["close-element"],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipPosition","type"],["bottom","system"]],0],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-small"],["flush-element"],["text","\\n      "],["open-element","p",[]],["flush-element"],["text","\\n        "],["append",["unknown",["openPartyToggleTooltip"]],false],["text","\\n      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            n(198), e.exports = s.Ember.Component.extend({
                classNames: ["parties-game-select-screen"],
                classNameBindings: ["isShowing:game-select-show:game-select-hide"],
                customGamesService: s.Ember.inject.service("custom-games"),
                layout: n(199),
                isCreatingCustomGame: s.Ember.computed.alias("selected.isCreatingCustomGame"),
                needsAdditionalGameConfig: s.Ember.computed.alias("selected.needsAdditionalGameConfig"),
                isJoiningCustomGame: s.Ember.computed.alias("selected.isJoiningCustomGame"),
                currentCategory: s.Ember.computed.alias("selected.category"),
                isShowing: s.Ember.computed.alias("showingState.isShowingGameSelect"),
                isShowingGameSelectObserver: s.Ember.observer("isShowing", (function() {
                    this.get("isShowing") && s.PartyAPI._showFlexRestrictionModalIfNeeded()
                }))
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "gRZw0H15",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\game-select-root-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\game-select-root-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\game-select-root-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","parties-game-select-wrapper"],["flush-element"],["text","\\n\\n  "],["append",["helper",["category-select"],null,[["currentCategory","selected","queues"],[["get",["currentCategory"]],["get",["selected"]],["get",["queues"]]]]],false],["text","\\n\\n"],["block",["if"],[["get",["needsAdditionalGameConfig"]]],null,3,2],["text","\\n"],["close-element"],["text","\\n\\n"],["append",["helper",["game-select-footer"],null,[["showingState","selected"],[["get",["showingState"]],["get",["selected"]]]]],false],["text","\\n\\n"],["open-element","div",[]],["static-attr","style","display: none"],["flush-element"],["text","\\n\\n  "],["append",["unknown",["customGamesService","subcategoriesObserver"]],false],["text","\\n\\n"],["close-element"],["text","\\n\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","\\n    "],["append",["helper",["game-type-select"],null,[["showingState","currentCategory","selected","queues"],[["get",["showingState"]],["get",["currentCategory"]],["get",["selected"]],["get",["queues"]]]]],false],["text","\\n\\n  "]],"locals":[]},{"statements":[["text","\\n    "],["append",["unknown",["custom-game-list"]],false],["text","\\n\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["isJoiningCustomGame"]]],null,1,0]],"locals":[]},{"statements":[["text","\\n    "],["append",["helper",["custom-game-setup"],null,[["showingState","currentMode","selected","queues"],[["get",["showingState"]],["get",["currentMode"]],["get",["selected"]],["get",["queues"]]]]],false],["text","\\n\\n"]],"locals":[]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1),
                i = u(n(74)),
                o = u(n(122)),
                a = u(n(143)),
                l = u(n(132)),
                r = n(41),
                c = n(15),
                m = u(n(25));

            function u(e) {
                return e && e.__esModule ? e : {
                    default: e
                }
            }
            n(201), e.exports = s.Ember.Component.extend(a.default, i.default, o.default, l.default, {
                classNames: ["game-select-footer-container"],
                layout: n(202),
                eligibilityService: s.Ember.inject.service("queue-eligibility"),
                lobbiesService: s.Ember.inject.service("lobbies"),
                customGamesService: s.Ember.inject.service("custom-games"),
                customGameListService: s.Ember.inject.service("custom-game-list"),
                patcherService: s.Ember.inject.service("patcher"),
                gameflowService: s.Ember.inject.service("gameflow"),
                partySettingsService: s.Ember.inject.service("party-settings"),
                inLobby: s.Ember.computed.alias("lobbiesService.inLobby"),
                animationLock: s.Ember.computed.alias("selected.animationLock"),
                animationsEnabled: s.Ember.computed.alias("partySettingsService.animationsEnabled"),
                hasQueueAvailabilityWarning: s.Ember.computed.alias("lobbiesService.hasQueueAvailabilityWarning"),
                queueAvailabilityWarningTooltip: s.Ember.computed.alias("lobbiesService.queueAvailabilityWarningTooltip"),
                closeButtonType: s.Ember.computed("selected.isUpdatingSelection", "animationLock", "inLobby", (function() {
                    return this.get("selected.isUpdatingSelection") || this.get("animationLock") ? "close" : this.get("inLobby") ? "back" : "close"
                })),
                listenToViewport: function() {
                    s.Viewport.main().getScreenRoot(m.default.get("viewportApiKey"), "rcp-fe-lol-parties").on("willHide", (() => {
                        this.get("showingState.isShowingGameSelect") && this.restoreLastSelection()
                    }))
                },
                listenToCustomGameListService: function() {
                    this.get("customGameListService").on("showParty", (() => {
                        this.set("selected.isJoiningCustomGame", !1), this.showParty()
                    }))
                },
                insertListener: s.Ember.on("didInsertElement", (function() {
                    this.listenToViewport(), this.listenToCustomGameListService()
                })),
                showingPartyObserver: s.Ember.computed("showingState.isShowingParty", (function() {
                    if (!this.get("showingState.isShowingParty")) return;
                    !1 === this.get("justShowedParty") && this.restoreLastSelection(), this.set("justShowedParty", !1)
                })),
                practiceToolMinLevelEligible: s.Ember.computed("customGamesService.localSummonerLevel", "customGameSubCategoryMinLevel", (function() {
                    const e = c.TUTORIAL_TYPE_MAPS.PRACTICETOOL,
                        t = c.TRAINING_TYPES.PRACTICE_TOOL;
                    return this.get("customGamesService.localSummonerLevel") >= this.get("customGamesService").getSubcategoryMinLevel(e, t)
                })),
                creatingCustomGameAndHaveNameError: s.Ember.computed.and("showingState.isShowingGameSelect", "selected.isCreatingCustomGame", "customGamesService.haveNameError"),
                trainingGameModeIsEmpty: s.Ember.computed.empty("selected.trainingGameMode"),
                selectingTrainingGameButNoMode: s.Ember.computed.and("showingState.isShowingGameSelect", "selected.isTrainingGame", "trainingGameModeIsEmpty"),
                joiningCustomGameButNoneSelected: s.Ember.computed.and("showingState.isShowingGameSelect", "selected.isJoiningCustomGame", "customGameListService.noSelectedGame"),
                patcherDisconnected: s.Ember.computed.not("patcherService.isConnected"),
                confirmButtonDisabled: s.Ember.computed.or("animationLock", "patcherDisconnected", "selected.isUpdatingSelection", "confirmDisabledByLobby", "creatingCustomGameAndHaveNameError", "selectingTrainingGameButNoMode", "joiningCustomGameButNoneSelected", "allQueuesForCategoryDisabled"),
                allQueuesForCategoryDisabled: s.Ember.computed("selected.category", "selected.queues.availableQueues", "eligibilityService.eligibilites.[]", (function() {
                    const e = this.get("selected.category");
                    if (e) {
                        if ("Training" === e) {
                            return this.get("eligibilityService").getIneligibleQueues(c.TUTORIAL_QUEUE_IDS).length === c.TUTORIAL_QUEUE_IDS.length && !this.get("practiceToolMinLevelEligible")
                        }
                        const t = this.get("selected.queues.availableQueues");
                        if (t && t[e]) {
                            const n = t[e];
                            let s = 0,
                                i = 0;
                            for (const e in n) {
                                const t = n[e];
                                if (!t || !t.queues) return !1;
                                {
                                    const e = t.queues;
                                    s += this.get("eligibilityService").getIneligibleQueues(e).length, i += e.length
                                }
                            }
                            return s === i
                        }
                        return !1
                    }
                    return !1
                })),
                confirmButtonEnabled: s.Ember.computed.not("confirmButtonDisabled"),
                confirmButtonText: s.Ember.computed("tra.ready", "selected.isJoiningCustomGame", "customGameListService.confirmButtonText", "tra.parties_button_confirm", (function() {
                    return this.get("selected.isJoiningCustomGame") ? this.get("customGameListService.confirmButtonText") : this.get("tra.parties_button_confirm")
                })),
                buttonSounds: {
                    closeHover: "/fe/lol-parties/sfx-lobby-button-quit-hover.ogg",
                    closeClick: "/fe/lol-parties/sfx-lobby-button-quit-click.ogg",
                    confirmHover: "/fe/lol-parties/sfx-gameselect-button-confirm-hover.ogg",
                    confirmClick: "/fe/lol-parties/sfx-gameselect-button-confirm-click.ogg"
                },
                confirmButtonShowTooltip: s.Ember.computed.or("patcherDisconnected", "confirmDisabledByLobby"),
                confirmButtonTooltipText: s.Ember.computed("patcherDisconnected", "confirmDisabledByLobby", "tra.ready", "tra.parties_patcher_not_connected", (function() {
                    let e = "";
                    return this.get("patcherDisconnected") ? e = s.tra.get("parties_patcher_not_connected") : this.get("confirmDisabledByLobby") && (e = this.get("queueAvailabilityWarningTooltip")), e
                })),
                confirmDisabledByLobby: s.Ember.computed.and("hasQueueAvailabilityWarning", "selectedQueueIsLobbyQueue"),
                selectedQueueIsLobbyQueue: s.Ember.computed("selected.queueId", "lobbiesService.queueId", (function() {
                    const e = this.get("selected.queueId"),
                        t = this.get("lobbiesService.queueId");
                    return !!e && !!t && e === t
                })),
                closeButtonDisabled: s.Ember.computed.or("animationLock", "hasQueueAvailabilityWarning"),
                closeButtonText: s.Ember.computed("tra.ready", "tra.parties_button_cancel", (function() {
                    return this.get("tra.parties_button_cancel")
                })),
                closeButtonShowTooltip: s.Ember.computed.or("hasQueueAvailabilityWarning"),
                closeButtonTooltipText: s.Ember.computed("selected.queueId", "hasQueueAvailabilityWarning", "queueAvailabilityWarningTooltip", "tra.ready", (function() {
                    return this.get("hasQueueAvailabilityWarning") ? this.get("queueAvailabilityWarningTooltip") : ""
                })),
                eligibilityObserver: s.Ember.computed("eligibilityService.upToDate", (function() {
                    if (!this.get("eligibilityService.upToDate")) return;
                    const e = this.get("selected.queueId"),
                        t = this.get("eligibilityService.eligibilities");
                    t[e] && t[e].eligible || this.restoreLastSelection()
                })),
                changePartyGameConfig: function() {
                    const e = this.get("selected"),
                        t = this.get("customGamesService.isCustomUI"),
                        n = this.get("lobbiesService.queueId"),
                        i = e.get("queueId");
                    return !t && e.get("isCreatingCustomGame") ? (e.set("animationLock", !0), this.get("customGamesService").changeQueueToCustom()) : i !== n ? (e.set("animationLock", !0), this._createLobbyTimer = s.Telemetry.startTimer("parties-create-new-lobby"), this.get("lobbiesService").createLobbyWithQueueId(i)) : Promise.resolve()
                },
                lobbyTransitionTelemetryObserver: s.Ember.observer("showingState.isShowingGameSelect", (function() {
                    !this.get("showingState.isShowingGameSelect") && this._createLobbyTimer && window.requestAnimationFrame((() => {
                        this.isDestroying || this.isDestroyed || (s.Telemetry.stopAndRecordTimer(this._createLobbyTimer), delete this._createLobbyTimer)
                    }))
                })),
                justShowedParty: null,
                showParty: function() {
                    this.set("justShowedParty", !0), this.get("showingState").showParty()
                },
                gameSelectErrorHandler: function(e) {
                    let t;
                    if (this.set("selected.isUpdatingSelection", !1), this.set("selected.animationLock", !1), this.get("selected.isCreatingCustomGame")) {
                        if (t = this.getCustomGameErrorMessage(e), e === r.CUSTOM_GAME_ERROR_CODES[423]) return void this.showGameSelectErrorModal(t, this.leaveParty.bind(this));
                        if (!t) return
                    } else if (t = this.get("tra.parties_game_select_confirm_error"), e && e.data) {
                        const {
                            httpStatus: n
                        } = e.data;
                        if (n && 423 === n) return t = this.get("tra.parties_game_select_patching_error"), void this.showGameSelectErrorModal(t, this.leaveParty.bind(this));
                        if (n && 503 === n) return void s.logger.trace("gameSelectErrorHandler ignoring SERVICE_UNAVAILABLE error");
                        n && 403 === n && (t = this.get("tra.parties_game_select_confirm_error_restricted"))
                    }
                    this.showGameSelectErrorModal(t)
                },
                getCustomGameErrorMessage: function(e) {
                    if (e && "" !== e && 500 !== e.status) {
                        if ("GameNameNotUniqueException" === e || "nameError" === e) return !1;
                        if ("InvalidCustomGameNameException" === e) return this.get("tra.custom_game_setup_name_error_invalid");
                        if (e === r.CUSTOM_GAME_ERROR_CODES[423]) return this.get("tra.parties_game_select_patching_error")
                    } else e = "UnknownException";
                    return this.get(`tra.custom_game_setup_error_${e.toLowerCase()}`)
                },
                startTutorial: function() {
                    switch (this.get("selected.trainingGameMode")) {
                        case "TUTORIAL_FLOW":
                            this.get("gameflowService").startTutorialFlow();
                            break;
                        case "BATTLE_TRAINING":
                            this.get("gameflowService").startBattleTraining();
                            break;
                        default:
                            this.get("gameflowService").startBasicTutorial()
                    }
                },
                joinCustomGame: function() {
                    const e = this.get("customGameListService.selectedCustomGame.id"),
                        t = this.get("customGameListService.selectedCustomGame.partyId"),
                        n = this.get("customGameListService.isSelectedCustomGameFull"),
                        s = this.get("customGameListService.isSelectedCustomGameSpectatorsFull"),
                        i = n && !s,
                        o = this.get("customGameListService.selectedCustomGame.hasPassword");
                    this.set("selected.isUpdatingSelection", !0);
                    const a = {
                        spectator: i,
                        hasPassword: o
                    };
                    e ? a.id = e : a.partyId = t, this.get("customGameListService").joinCustomGame(a).then((() => {
                        this.isDestroying || this.isDestroyed || (this.set("selected.isUpdatingSelection", !1), this.set("selected.isJoiningCustomGame", !1), this.showParty())
                    })).catch((() => {
                        this.set("selected.isUpdatingSelection", !1)
                    }))
                },
                confirmButtonClicked: function() {
                    if (this.get("selected.isTrainingGame") && !this.get("selected.isCreatingCustomGame")) return this.startTutorial();
                    if (!this.get("selected.isJoiningCustomGame")) {
                        const e = () => {
                            this.set("selected.isUpdatingSelection", !1), this.get("selected.isCreatingCustomGame") || this.set("showingState.showVerticalAnimation", !0), this.showParty()
                        };
                        return this.set("selected.isUpdatingSelection", !0), this.changePartyGameConfig().then(e, (e => {
                            this.gameSelectErrorHandler(e)
                        }))
                    }
                    this.joinCustomGame()
                },
                closeButtonClicked: function() {
                    if (this.restoreLastSelection(), this.get("lobbiesService.inLobby")) return this.set("showingState.showVerticalAnimation", !0), void this.showParty();
                    this.hideOurselves()
                },
                restoreLastSelection() {
                    const e = this.get("lobbiesService.queueId");
                    null !== e && this.set("selected.queueId", e);
                    const t = this.get("customGamesService.isCustomUI");
                    this.set("selected.isCreatingCustomGame", t), t || this.set("selected.needsAdditionalGameConfig", !1), this.set("selected.isJoiningCustomGame", !1), this.set("selected.isTrainingGame", !1)
                },
                actions: {
                    confirmButton: function() {
                        this.confirmButtonClicked()
                    },
                    closeButton: function() {
                        this.closeButtonClicked()
                    }
                }
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "yWmbFFtf",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\footer-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\footer-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\footer-component\\\\index.js\\" "],["text","\\n"],["append",["helper",["arrow-footer"],null,[["animationsEnabled","confirmButtonDisabled","confirmButtonText","confirmButtonShowTooltip","confirmButtonTooltipText","confirmButtonHoverSound","confirmButtonClickSound","closeButtonDisabled","closeButtonText","closeButtonShowTooltip","closeButtonTooltipText","closeButtonHoverSound","closeButtonClickSound","closeButtonType","confirmButtonClicked","closeButtonClicked"],[["get",["animationsEnabled"]],["get",["confirmButtonDisabled"]],["get",["confirmButtonText"]],["get",["confirmButtonShowTooltip"]],["get",["confirmButtonTooltipText"]],["get",["buttonSounds","confirmHover"]],["get",["buttonSounds","confirmClick"]],["get",["closeButtonDisabled"]],["get",["closeButtonText"]],["get",["closeButtonShowTooltip"]],["get",["closeButtonTooltipText"]],["get",["buttonSounds","closeHover"]],["get",["buttonSounds","closeClick"]],["get",["closeButtonType"]],"confirmButton","closeButton"]]],false],["text","\\n"],["open-element","span",[]],["dynamic-attr","data-eligibility-observer",["concat",[["unknown",["eligibilityObserver"]]]]],["flush-element"],["close-element"],["text","\\n"],["open-element","span",[]],["dynamic-attr","data-showing-party-observer",["concat",[["unknown",["showingPartyObserver"]]]]],["flush-element"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            n(204), e.exports = s.Ember.Component.extend({
                classNames: ["parties-game-type-select-wrapper"],
                customGamesService: s.Ember.inject.service("custom-games"),
                layout: n(205),
                showingState: null,
                currentCategory: null,
                selected: null,
                queues: null,
                gameTypes: s.Ember.computed("currentCategory", "queues.queuesByCategory", (function() {
                    const e = this.get("queues").getAllAvailableGameTypesForCategory(this.get("currentCategory"));
                    return s.Ember.A(e)
                })),
                actions: {
                    selectQueue: function(e) {
                        e.queueId ? this.set("selected.queueId", e.queueId) : e.trainingGameMode && (this.set("selected.trainingGameMode", e.trainingGameMode), this.get("customGamesService").subCategoryExists(this.get("selected.mapId"), this.get("selected.trainingGameMode")) ? (this.set("selected.isCreatingCustomGame", !0), this.get("customGamesService").selectSubcategoryByMapMode(this.get("selected.mapId"), this.get("selected.trainingGameMode"))) : (this.set("selected.isCreatingCustomGame", !1), this.get("customGamesService").resetSelectedSubcategory()))
                    }
                }
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "HWq5qLN8",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\game-type-select-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\game-type-select-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\game-type-select-component\\\\index.js\\" "],["text","\\n"],["open-element","hr",[]],["flush-element"],["close-element"],["text","\\n"],["block",["each"],[["get",["gameTypes"]]],null,0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["append",["helper",["game-type-card"],null,[["showingState","mapId","gameMode","assetMutator","requiresCustomGameSubCategory","queues","animationLock","selectedCategory","selectedMapId","selectedGameMode","selectedQueueId","selectedTrainingGameMode","selectQueue"],[["get",["showingState"]],["get",["gameType","mapId"]],["get",["gameType","gameMode"]],["get",["gameType","assetMutator"]],["get",["gameType","requiresCustomGameSubCategory"]],["get",["queues"]],["get",["selected","animationLock"]],["get",["selected","category"]],["get",["selected","mapId"]],["get",["selected","gameMode"]],["get",["selected","queueId"]],["get",["selected","trainingGameMode"]],"selectQueue"]]],false],["text","\\n"]],"locals":["gameType"]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1),
                i = r(n(143));
            n(207);
            var o = r(n(74)),
                a = n(15),
                l = r(n(16));

            function r(e) {
                return e && e.__esModule ? e : {
                    default: e
                }
            }
            e.exports = s.Ember.Component.extend(i.default, o.default, {
                classNames: ["game-type-card"],
                classNameBindings: ["isDisabled:disabled", "isCurrentlySelected:selected", "animationLock:animation-lock"],
                attributeBindings: ["mapId:data-map-id", "gameMode:data-game-mode"],
                layout: n(208),
                summonerService: s.Ember.inject.service("summoner"),
                eligibilityService: s.Ember.inject.service("queue-eligibility"),
                customGamesService: s.Ember.inject.service("custom-games"),
                tftNPEService: s.Ember.inject.service("tft-npe"),
                assets: s.Ember.inject.service("assets"),
                platformConfigSingleton: l.default,
                showingState: null,
                mapId: !1,
                gameMode: !1,
                assetMutator: !1,
                requiresCustomGameSubCategory: !1,
                queues: null,
                selectedCategory: !1,
                selectedMapId: !1,
                selectedGameMode: !1,
                selectedQueueId: !1,
                selectedTrainingGameMode: !1,
                animationLock: !1,
                isCurrentlySelected: s.Ember.computed("mapId", "gameMode", "selectedMapId", "isTraining", "selectedGameMode", "selectedCategory", "selectedTrainingGameMode", (function() {
                    if (this.get("isTraining")) {
                        this.get("eligibilityService").isTutorialRestricted() && this.set("selectedTrainingGameMode", a.TRAINING_TYPES.PRACTICE_TOOL);
                        return this.get("mapId") === this.get("selectedMapId") && this.get("gameMode") === this.get("selectedTrainingGameMode")
                    }
                    return this.get("mapId") === this.get("selectedMapId") && this.get("gameMode") === this.get("selectedGameMode")
                })),
                gameTypeQueues: s.Ember.computed("mapId", "gameMode", "selectedCategory", "queues.availableQueues", "queues.availableQueueIds", "eligiblityService.isSolo", "eligibilityService.shouldShowNPEQueue", (function() {
                    const e = this.get("queues"),
                        t = this.get("selectedCategory"),
                        n = this.get("mapId"),
                        i = this.get("gameMode");
                    let o = s.Ember.A(e.getAvailableQueuesForCategoryAndGameType(t, n, i));
                    return this.get("eligibilityService.shouldShowNPEQueue") || (o = o.without(a.TFT_NPE_QUEUE_ID)), o
                })),
                mapTeamSizeGreedy: s.Ember.computed("mapId", "gameMode", "selectedCategory", (function() {
                    const e = this.get("queues"),
                        t = this.get("selectedCategory"),
                        n = this.get("mapId"),
                        s = this.get("gameMode"),
                        i = e.getAvailableQueuesForCategoryAndGameType(t, n, s);
                    let o = 0;
                    return i.forEach((t => {
                        const n = e.getQueueById(t);
                        n.numPlayersPerTeam && n.numPlayersPerTeam > o && (o = n.numPlayersPerTeam)
                    })), o
                })),
                mapTeamSize: s.Ember.computed("mapId", "selectedCategory", "defaultQueue.numPlayersPerTeam", (function() {
                    let e = this.get("defaultQueue.numPlayersPerTeam");
                    return e || (e = this.get("mapTeamSizeGreedy")), e
                })),
                queueEligibilities: s.Ember.computed("gameTypeQueues", "eligibilityService.eligibilities.[]", (function() {
                    const e = this.get("gameTypeQueues");
                    return this.get("eligibilityService").getQueueEligibilities(e)
                })),
                teamQueueEligibilities: s.Ember.computed("gameTypeQueues", "eligibilityService.eligibilities.[]", (function() {
                    const e = this.get("gameTypeQueues");
                    return this.get("eligibilityService").getTeamQueueEligibilities(e)
                })),
                eligibleQueues: s.Ember.computed("queueEligibilities.[]", (function() {
                    const e = this.get("queueEligibilities");
                    if (!e) return s.Ember.A();
                    return e.filterBy("eligible")
                })),
                noQueues: s.Ember.computed.lt("gameTypeQueues.length", 1),
                noEligibleQueues: s.Ember.computed.lt("eligibleQueues.length", 1),
                customGameSubCategoryExists: s.Ember.computed("mapId", "gameMode", (function() {
                    const e = this.get("mapId"),
                        t = this.get("gameMode"),
                        n = this.get("customGamesService").subCategoryExists(e, t);
                    return n ? this.set("customGameSubCategoryMinLevel", this.get("customGamesService").getSubcategoryMinLevel(e, t)) : this.set("customGameSubCategoryMinLevel", 1), n
                })),
                customGameSubCategoryMinLevel: 1,
                customGameSubCategoryMinLevelEligible: s.Ember.computed("customGamesService.localSummonerLevel", "customGameSubCategoryMinLevel", (function() {
                    return this.get("customGamesService.localSummonerLevel") >= this.get("customGameSubCategoryMinLevel")
                })),
                isDisabled: s.Ember.computed("noQueues", "noEligibleQueues", "isTraining", "customGameSubCategoryExists", "customGameSubCategoryMinLevelEligible", "hasSoloEligibilityWarning", (function() {
                    return this.get("requiresCustomGameSubCategory") ? !this.get("customGameSubCategoryExists") || !this.get("customGameSubCategoryMinLevelEligible") : this.get("isTraining") ? this.get("eligibilityService").isTutorialRestricted() : !!this.get("hasSoloEligibilityWarning") || this.get("noQueues")
                })),
                shouldShowEligibilityWarning: s.Ember.computed.or("hasTeamEligibilityWarning", "hasSoloEligibilityWarning"),
                hasSoloEligibilityWarning: s.Ember.computed("eligibilityService.isSolo", "gameTypeQueues.[]", "eligibilityService.eligibilities.@each.summoners", "customGameSubCategoryMinLevelEligible", "isTraining", (function() {
                    if (this.get("eligibilityService.isSolo")) {
                        const e = this.get("gameTypeQueues");
                        if (this.get("isTraining")) {
                            if (this.get("gameMode") === a.TRAINING_TYPES.PRACTICE_TOOL) return !this.get("customGameSubCategoryMinLevelEligible");
                            if (this.get("gameMode") === a.TRAINING_TYPES.TUTORIAL) return this.get("eligibilityService").isTutorialRestricted()
                        } else if (e.length > 0) {
                            return this.get("eligibilityService").getSoloIneligibleQueues(e).length === this.get("gameTypeQueues.length") && this.get("gameTypeQueues.length") > 0
                        }
                    }
                    return !1
                })),
                soloEligibilityWarningText: s.Ember.computed("hasSoloEligibilityWarning", (function() {
                    if (this.get("hasSoloEligibilityWarning")) {
                        const e = this._getSoloEligibilities();
                        return this.getEligibilityStrings(e, !0, "player_solo_queue_restriction")
                    }
                    return []
                })),
                _getSoloEligibilities: function() {
                    const e = this.get("gameTypeQueues")[0];
                    return this.get("eligibilityService").getSoloEligibilities(e)
                },
                hasTeamEligibilityWarning: s.Ember.computed("teamQueueEligibilities.[]", "gameTypeQueues.[]", (function() {
                    const e = this.get("teamQueueEligibilities.length");
                    return 0 !== e && e === this.get("gameTypeQueues.length")
                })),
                _handleRestriction: function(e, t, n, s, i) {
                    const {
                        restrictionCode: o
                    } = e;
                    let l = !1;
                    if (a.TENCENT_MINOR_RESTRICTIONS.includes(o) && s) return !0;
                    a.TENCENT_MINOR_RESTRICTIONS.includes(o) && (l = !0);
                    let r = `${i}_${o.toLowerCase()}`;
                    "TeamMaxSizeRestriction" === o && (r = "parties_premade_size_restriction");
                    const c = this.get("tra").formatString(r, e.restrictionArgs);
                    return t.push(o), n.push(c), l || s
                },
                getEligibilityStrings: function(e, t = !1, n = "game_select_queue_restriction_party") {
                    const s = [],
                        i = [],
                        o = e && e.length || 0;
                    for (let a = 0; a < o; a++) {
                        let {
                            restrictions: o
                        } = e[a];
                        o = this.get("eligibilityService").groupMissingTokenRestrictions(o);
                        const l = o && o.length || 0;
                        let r = !1;
                        for (let e = 0; e < l; e++) {
                            const a = o[e];
                            !a.restrictionCode || !a.restrictionArgs || t && -1 !== i.indexOf(a.restrictionCode) || (r = this._handleRestriction(a, i, s, r, n))
                        }
                    }
                    return s
                },
                gameTypeCardRestrictionsText: s.Ember.computed("teamRestrictionsText", "soloEligibilityWarningText", (function() {
                    return this.get("teamRestrictionsText").concat(this.get("soloEligibilityWarningText"))
                })),
                teamRestrictionsText: s.Ember.computed("tra.ready", "shouldShowEligibilityWarning", (function() {
                    return this.get("shouldShowEligibilityWarning") ? this.getEligibilityStrings(this.get("teamQueueEligibilities"), !0) : []
                })),
                disabledReasons: s.Ember.A(),
                computeDisabledReasons: s.Ember.computed("isDisabledFeaturedGameMode", "noQueues", "tra.ready", "tra.game_select_category_not_available", "shouldShowEligibilityWarning", (function() {
                    if (this.get("requiresCustomGameSubCategory"))
                        if (this.get("customGameSubCategoryMinLevelEligible")) this.set("disabledReasons", s.Ember.A([this.get("tra.game_select_category_not_available")]));
                        else {
                            const e = {
                                    playerMinLevelRestriction: this.get("customGameSubCategoryMinLevel")
                                },
                                t = this.get("tra").formatString("parties_queue_restriction_player_playerminlevelrestriction", e);
                            this.set("disabledReasons", s.Ember.A([t]))
                        }
                    else if (this.get("isDisabledFeaturedGameMode")) this.set("disabledReasons", s.Ember.A([this.get("tra.game_select_featured_game_mode_not_available")]));
                    else if (this.get("shouldShowEligibilityWarning")) this.set("disabledReasons", this.get("gameTypeCardRestrictionsText"));
                    else {
                        if (!this.get("noQueues")) return "";
                        this.set("disabledReasons", s.Ember.A([this.get("tra.game_select_category_not_available")]))
                    }
                })),
                tooltipConfig: {
                    targetAnchor: {
                        x: "center",
                        y: "bottom"
                    },
                    tooltipAnchor: {
                        x: "center",
                        y: "top"
                    },
                    offset: {
                        x: 0,
                        y: 0
                    },
                    caretPosition: "auto"
                },
                gameTypeName: s.Ember.computed("selectedCategory", "mapId", "gameMode", "assetMutator", "tra.ready", "tra.game_select_game_type_name_11_CLASSIC", (function() {
                    const e = this.get("selectedCategory"),
                        t = this.get("mapId");
                    let n = this.get("gameMode");
                    const s = this.get("assetMutator");
                    let i;
                    if (e === a.CATEGORY_NAMES.PVP) {
                        const e = this.get("assets").getMap(t, n, s);
                        e && e.gameModeName && (i = e.gameModeName)
                    }
                    if (!i) {
                        n = n.toLowerCase();
                        const e = `game_select_game_type_name_${t}_${n}`;
                        i = this.get(`tra.${e}`)
                    }
                    return i
                })),
                gameTypeDescription: s.Ember.computed("selectedCategory", "mapId", "tra.ready", "gameMode", "assetMutator", "tra.game_select_category_description_pvp_11_classic", (function() {
                    let e = this.get("selectedCategory");
                    const t = this.get("mapId");
                    let n = this.get("gameMode");
                    const s = this.get("assetMutator");
                    let i;
                    if (e === a.CATEGORY_NAMES.PVP) {
                        const e = this.get("assets").getMap(t, n, s);
                        e && e.gameModeDescription && (i = e.gameModeDescription)
                    }
                    if (!i) {
                        if (this.get("isDisabledFeaturedGameMode")) return "";
                        n = n.toLowerCase(), e = e.toLowerCase();
                        const s = `game_select_category_description_${e}_${t}_${n}`;
                        i = this.get(`tra.${s}`)
                    }
                    return i
                })),
                isTraining: s.Ember.computed.equal("selectedCategory", "Training"),
                isDisabledFeaturedGameMode: s.Ember.computed("mapId", "gameMode", (function() {
                    return this.get("mapId") === a.DISABLED_RGM_GAME_TYPE.mapId && this.get("gameMode") === a.DISABLED_RGM_GAME_TYPE.gameMode
                })),
                mapVersus: s.Ember.computed("gameMode", "isTraining", "isDisabledFeaturedGameMode", "mapTeamSize", "tra.ready", "tra.game_select_team_size", (function() {
                    const e = this.get("gameMode");
                    if ("TFT" === e) return this.get("tra.game_select_team_size_free_for_all_acronym");
                    if ("CHERRY" === e) return this.get("tra.game_select_team_size_multiteam");
                    const t = this.get("mapTeamSize");
                    return this.get("isTraining") || this.get("isDisabledFeaturedGameMode") || 0 === t ? null : this.translate("game_select_team_size", {
                        size: t
                    })
                })),
                defaultQueueId: s.Ember.computed("gameTypeQueues.[]", "isTraining", (function() {
                    const e = this.get("gameTypeQueues"),
                        t = this.get("isTraining");
                    if (!e || e.length < 1 || t) return;
                    return e[0]
                })),
                defaultQueue: s.Ember.computed("defaultQueueId", (function() {
                    const e = this.get("defaultQueueId");
                    return this.get("queues").getQueueById(e)
                })),
                shouldDisplayQueueSelect: s.Ember.computed("isDisabled", "isTraining", (function() {
                    const e = this.get("isDisabled"),
                        t = this.get("isTraining");
                    return !e && !t
                })),
                hoverSoundDisabled: s.Ember.computed.or("isDisabled", "isCurrentlySelected"),
                onDidInsertElement: s.Ember.on("didInsertElement", s.Ember.observer("mapId", "gameMode", "assetMutator", "assets.availableMaps", (function() {
                    if (this.element) {
                        const e = this.element.querySelector(".parties-game-type-icon"),
                            t = this.getMapSoundUrl("gameselect-button-hover-sound");
                        this.attachHoverSoundWithDisabledCheck(e, t)
                    }
                }))),
                gameServerRegionOptions: s.Ember.computed.alias("customGamesService.gameServerRegionOptions"),
                gameServerRegionsExist: s.Ember.computed.gt("gameServerRegionOptions.length", 0),
                shouldDisplayGameServerRegionOptions: s.Ember.computed.and("gameServerRegionsExist", "isTraining", "customGameSubCategoryExists"),
                updateGameServerRegionSelection: function(e) {
                    if (e) this.set("customGamesService.playerInputs.gameServerRegion", e);
                    else {
                        const e = this.get("gameServerRegionOptions");
                        for (let t = 0; t < e.length; t++)
                            if (e[t].isSelected) {
                                this.set("customGamesService.playerInputs.gameServerRegion", e[t].value);
                                break
                            }
                    }
                },
                _selectQueue: function() {
                    this.get("shouldDisplayGameServerRegionOptions") ? this.updateGameServerRegionSelection() : this.set("customGamesService.playerInputs.gameServerRegion", "");
                    const e = this.get("isTraining"),
                        t = this.get("defaultQueueId"),
                        n = e ? this.get("gameMode") : null;
                    (t || e) && (this.playSound("/fe/lol-parties/sfx-gameselect-button-map-click.ogg"), this.sendAction("selectQueue", {
                        queueId: t,
                        trainingGameMode: n
                    }))
                },
                shouldShowTFTNPEQueueUnlock: s.Ember.computed("tftNPEService.shouldShowTFTNPEQueueUnlock", "gameMode", "isCurrentlySelected", "eligibilityService.isTFTNPEEnabled", "eligibilityService.isNewTFTPlayer", (function() {
                    const e = this.get("tftNPEService.shouldShowTFTNPEQueueUnlock"),
                        t = this.get("gameMode"),
                        n = this.get("isCurrentlySelected"),
                        s = this.get("eligibilityService.isTFTNPEEnabled"),
                        i = this.get("eligibilityService.isNewTFTPlayer");
                    return !!e && (!("TFT" !== t || !n) && !(!s || i))
                })),
                didRender: function() {
                    this._super(...arguments), this.updateTFTNPEUnlocking()
                },
                updateTFTNPEUnlocking: function() {
                    const e = this.get("tftNPEService"),
                        t = this.get("shouldShowTFTNPEQueueUnlock");
                    if (e && t) {
                        const t = this.element.querySelectorAll(".parties-game-type-card-category-unlock-video");
                        for (const e of t) e.play();
                        e.updateShouldShowTFTNPEQueueUnlock(!1)
                    }
                },
                actions: {
                    selectGameType: function() {
                        this.get("animationLock") || (this.get("isDisabled") ? this.playSound("/fe/lol-uikit/sfx-uikit-button-locked-click.ogg") : this.get("isCurrentlySelected") || this._selectQueue())
                    },
                    selectCategory: function(e) {
                        this.get("isCurrentlySelected") && !this.get("isDisabled") && this.sendAction("selectQueue", {
                            queueId: e
                        })
                    },
                    gameServerRegionChange: function(e) {
                        this.updateGameServerRegionSelection(e)
                    }
                }
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "WfQNdnJe",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\game-type-select-component\\\\game-type-card\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\game-type-select-component\\\\game-type-card\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\game-type-select-component\\\\game-type-card\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","parties-game-type-upper-half"],["modifier",["action"],[["get",[null]],"selectGameType"]],["flush-element"],["text","\\n  "],["append",["helper",["game-type-icon"],null,[["mapId","currentlySelected","gameTypeName","mapSubtitle","isTraining","isDisabledFeaturedGameMode","gameMode","assetMutator"],[["get",["mapId"]],["get",["isCurrentlySelected"]],["get",["gameTypeName"]],["get",["mapVersus"]],["get",["isTraining"]],["get",["isDisabledFeaturedGameMode"]],["get",["gameMode"]],["get",["assetMutator"]]]]],false],["text","\\n"],["block",["if"],[["get",["shouldShowEligibilityWarning"]]],null,8],["close-element"],["text","\\n"],["open-element","div",[]],["static-attr","class","parties-game-type-lower-half"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","parties-game-type-card-intro"],["flush-element"],["append",["unknown",["gameTypeDescription"]],false],["close-element"],["text","\\n"],["block",["if"],[["get",["shouldDisplayGameServerRegionOptions"]]],null,5],["text","\\n"],["block",["if"],[["get",["shouldDisplayQueueSelect"]]],null,1],["close-element"],["text","\\n"],["append",["unknown",["computeDisabledReasons"]],false],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","        "],["append",["helper",["game-type-category-select"],null,[["queues","queueId","selectedQueueId","selectCategory"],[["get",["queues"]],["get",["queueId"]],["get",["selectedQueueId"]],"selectCategory"]]],false],["text","\\n"]],"locals":["queueId"]},{"statements":[["text","  "],["open-element","hr",[]],["flush-element"],["close-element"],["text","\\n  "],["open-element","lol-uikit-scrollable",[]],["static-attr","class","parties-game-type-card-categories"],["flush-element"],["text","\\n"],["block",["each"],[["get",["gameTypeQueues"]]],null,0],["text","  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["open-element","lol-uikit-dropdown-option",[]],["static-attr","slot","lol-uikit-dropdown-option"],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"gameServerRegionChange",["get",["option","value"]]],null],null],["flush-element"],["text","\\n            "],["append",["unknown",["option","value"]],false],["text","\\n          "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["open-element","lol-uikit-dropdown-option",[]],["static-attr","slot","lol-uikit-dropdown-option"],["static-attr","selected",""],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"gameServerRegionChange",["get",["option","value"]]],null],null],["flush-element"],["text","\\n            "],["append",["unknown",["option","value"]],false],["text","\\n          "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["option","isSelected"]]],null,3,2]],"locals":["option"]},{"statements":[["text","    "],["open-element","label",[]],["static-attr","for","custom-game-region"],["flush-element"],["append",["unknown",["tra","custom_game_setup_region_label"]],false],["close-element"],["text","\\n    "],["open-element","lol-uikit-framed-dropdown",[]],["static-attr","id","custom-game-region"],["flush-element"],["text","\\n"],["block",["each"],[["get",["gameServerRegionOptions"]]],null,4],["text","    "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","              "],["open-element","li",[]],["flush-element"],["append",["helper",["sanitize"],[["get",["reason"]]],null],false],["close-element"],["text","\\n"]],"locals":["reason"]},{"statements":[["text","        "],["open-element","lol-uikit-content-block",[]],["static-attr","class","game-type-category-disabled"],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n          "],["open-element","ul",[]],["flush-element"],["text","\\n"],["block",["each"],[["get",["disabledReasons"]]],null,6],["text","          "],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","parties-eligibility-error"],["flush-element"],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipConfig"],[["get",["tooltipConfig"]]]],7],["text","    "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s, i = n(1),
                o = n(104),
                a = (s = n(25)) && s.__esModule ? s : {
                    default: s
                };
            n(210);
            const l = "hidden",
                r = "clicked",
                c = "active";
            e.exports = i.Ember.Component.extend({
                classNames: ["parties-game-type-icon"],
                classNameBindings: ["mapIdClassName"],
                layout: n(211),
                assets: i.Ember.inject.service("assets"),
                partySettingsService: i.Ember.inject.service("party-settings"),
                animationsEnabled: i.Ember.computed.alias("partySettingsService.animationsEnabled"),
                animationsDisabled: i.Ember.computed.not("partySettingsService.animationsEnabled"),
                mapId: null,
                gameMode: null,
                assetMutator: null,
                currentlySelected: !1,
                gameTypeName: "",
                mapSubtitle: !1,
                isTraining: !1,
                isDisabledFeaturedGameMode: !1,
                _initialLoad: !0,
                viewportStateIsShow: !0,
                mapIdClassName: i.Ember.computed("mapId", (function() {
                    return `map-${this.get("mapId")}`
                })),
                videoState: i.Ember.computed("currentlySelected", "animationsDisabled", "viewportStateIsShow", (function() {
                    if (!0 === this.get("viewportStateIsShow")) {
                        const e = this.get("currentlySelected");
                        let t, n;
                        return !0 === this._initialLoad ? (t = !0, this._initialLoad = !1) : t = !this.get("animationsDisabled"), n = e && t ? c : e ? r : l, this.sendVideoEvent(n), n
                    }
                    return this.sendVideoEvent(l), l
                })),
                sendVideoEvent: function(e) {
                    e = e || this.get("videoState");
                    const t = this.videoWrapper(),
                        n = this.get("haveVideoUrls");
                    t && n && t.dispatchEvent(new Event(e))
                },
                _getTrainingAssetUrl: function(e) {
                    const t = this.get("gameMode");
                    return o.TUTORIAL_ASSETS[t][e]
                },
                activeVideoUrl: i.Ember.computed("isTraining", "mapId", "assets.availableMaps", (function() {
                    return this._getAssetUrl("game-select-icon-active-video")
                })),
                introVideoUrl: i.Ember.computed("isTraining", "mapId", "assets.availableMaps", (function() {
                    return this._getAssetUrl("game-select-icon-intro-video")
                })),
                backgroundDefaultUrl: i.Ember.computed("isTraining", "mapId", "assets.availableMaps", (function() {
                    return this._getAssetUrl("game-select-icon-default")
                })),
                backgroundHoverUrl: i.Ember.computed("isTraining", "mapId", "assets.availableMaps", (function() {
                    return this._getAssetUrl("game-select-icon-hover")
                })),
                backgroundDisabledUrl: i.Ember.computed("isTraining", "mapId", "assets.availableMaps", (function() {
                    return this._getAssetUrl("game-select-icon-disabled")
                })),
                backgroundActiveUrl: i.Ember.computed("isTraining", "mapId", "assets.availableMaps", (function() {
                    return this._getAssetUrl("icon-victory")
                })),
                backgroundFillerUrl: i.Ember.computed("isTraining", "mapId", "assets.availableMaps", (function() {
                    return this._getAssetUrl("game-select-icon-active")
                })),
                backgroundFillerImageClass: i.Ember.computed("videoState", (function() {
                    return this.get("videoState") === r ? "icon-bg-filler-fade-in" : "icon-bg-filler-show"
                })),
                mapSubtitleBreakClass: i.Ember.computed("isDisabledFeaturedGameMode", (function() {
                    return this.get("isDisabledFeaturedGameMode") ? "parties-disabled-featured-game-mode-break" : ""
                })),
                mapSubtitleText: i.Ember.computed("mapSubtitle", (function() {
                    return this.get("mapSubtitle") ? this.get("mapSubtitle") : ""
                })),
                haveVideoUrls: i.Ember.computed("activeVideoUrl", "introVideoUrl", (function() {
                    const e = this.get("activeVideoUrl"),
                        t = this.get("introVideoUrl");
                    return e && "/" !== e && t && "/" !== t
                })),
                videoWrapper: function() {
                    return this.element ? this.element.querySelector("#game-type-icon-state-machine") : null
                },
                _getAssetUrl: function(e) {
                    return this.get("isTraining") ? this._getTrainingAssetUrl(e) : this._getMapAssetUrl(e)
                },
                _getMapAssetUrl: function(e) {
                    const t = this.get("assets").getMap(this.get("mapId"), this.get("gameMode"), this.get("assetMutator"));
                    return `/${t&&t.assets?t.assets[e]:""}`
                },
                videoURLObserver: i.Ember.computed("haveVideoUrls", (function() {
                    this.get("haveVideoUrls") && this.sendVideoEvent()
                })),
                _screenRootShowListener: null,
                _screenRootHideListener: null,
                _attachViewportListeners: function() {
                    const e = i.Viewport.main().getScreenRoot(a.default.get("viewportApiKey"), "rcp-fe-lol-parties");
                    this._screenRootShowListener = function() {
                        this._initialLoad = !0, this.set("viewportStateIsShow", !0)
                    }.bind(this), this._screenRootHideListener = function() {
                        this.set("viewportStateIsShow", !1)
                    }.bind(this), e.on("show", this._screenRootShowListener), e.on("hide", this._screenRootHideListener)
                },
                _detachViewportListeners: function() {
                    const e = i.Viewport.main().getScreenRoot(a.default.get("viewportApiKey"), "rcp-fe-lol-parties");
                    this._screenRootShowListener && (e.off("show", this._screenRootShowListener), this._screenRootShowListener = null), this._screenRootHideListener && (e.off("hide", this._screenRootHideListener), this._screenRootHideListener = null)
                },
                didInsertElement: function() {
                    this._super(...arguments), this._attachViewportListeners()
                },
                willDestroyElement: function() {
                    this._super(...arguments), this._detachViewportListeners()
                }
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "P8P8GS6m",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\game-type-select-component\\\\game-type-card\\\\game-type-icon-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\game-type-select-component\\\\game-type-card\\\\game-type-icon-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\game-type-select-component\\\\game-type-card\\\\game-type-icon-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","parties-game-type-card-selected-glow"],["flush-element"],["close-element"],["text","\\n"],["open-element","div",[]],["static-attr","class","icon-frame"],["flush-element"],["text","\\n"],["block",["if"],[["get",["animationsEnabled"]]],null,2],["text","  "],["open-element","div",[]],["static-attr","class","icon-bg icon-bg-default"],["dynamic-attr","style",["concat",["background-image: url(\'",["unknown",["backgroundDefaultUrl"]],"\');"]]],["flush-element"],["close-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","icon-bg icon-bg-hover"],["dynamic-attr","style",["concat",["background-image: url(\'",["unknown",["backgroundHoverUrl"]],"\');"]]],["flush-element"],["close-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","icon-bg icon-bg-disabled"],["dynamic-attr","style",["concat",["background-image: url(\'",["unknown",["backgroundDisabledUrl"]],"\');"]]],["flush-element"],["close-element"],["text","\\n\\n"],["block",["if"],[["get",["animationsDisabled"]]],null,1,0],["close-element"],["text","\\n"],["open-element","div",[]],["dynamic-attr","class",["concat",["parties-game-type-card-break ",["unknown",["mapSubtitleBreakClass"]]]]],["flush-element"],["append",["unknown",["mapSubtitleText"]],false],["close-element"],["text","\\n"],["open-element","div",[]],["static-attr","class","parties-game-type-card-name"],["flush-element"],["append",["unknown",["gameTypeName"]],false],["close-element"],["text","\\n\\n"],["append",["unknown",["videoURLObserver"]],false],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["open-element","lol-uikit-video-state-machine",[]],["static-attr","id","game-type-icon-state-machine"],["dynamic-attr","data-map-id",["concat",[["unknown",["mapId"]]]]],["flush-element"],["text","\\n      "],["open-element","lol-uikit-video-group",[]],["flush-element"],["text","\\n        "],["open-element","lol-uikit-video-state",[]],["static-attr","state","active"],["flush-element"],["text","\\n          "],["open-element","lol-uikit-video",[]],["static-attr","type","idle"],["static-attr","class","icon-bg video-icon"],["dynamic-attr","src",["concat",[["unknown",["activeVideoUrl"]]]]],["static-attr","fade-in","0"],["static-attr","fade-out","333"],["flush-element"],["close-element"],["text","\\n        "],["close-element"],["text","\\n\\n        "],["open-element","lol-uikit-video-state",[]],["static-attr","state","clicked"],["flush-element"],["text","\\n          "],["open-element","lol-uikit-video",[]],["static-attr","type","intro"],["static-attr","class","icon-bg video-icon"],["dynamic-attr","src",["concat",[["unknown",["introVideoUrl"]]]]],["flush-element"],["close-element"],["text","\\n\\n          "],["open-element","lol-uikit-video",[]],["static-attr","type","idle"],["static-attr","class","icon-bg video-icon"],["dynamic-attr","src",["concat",[["unknown",["activeVideoUrl"]]]]],["static-attr","fade-out","333"],["flush-element"],["close-element"],["text","\\n        "],["close-element"],["text","\\n\\n        "],["open-element","lol-uikit-video-state",[]],["static-attr","state","hidden"],["static-attr","no-preserve-state",""],["flush-element"],["close-element"],["text","\\n      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","icon-bg icon-bg-active"],["dynamic-attr","style",["concat",["background-image: url(\'",["unknown",["backgroundActiveUrl"]],"\');"]]],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["dynamic-attr","class",["concat",["icon-bg icon-bg-filler ",["unknown",["backgroundFillerImageClass"]]]]],["dynamic-attr","style",["concat",["background-image: url(\'",["unknown",["backgroundFillerUrl"]],"\');"]]],["flush-element"],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1),
                i = l(n(74)),
                o = l(n(16)),
                a = n(15);

            function l(e) {
                return e && e.__esModule ? e : {
                    default: e
                }
            }
            n(213);
            const r = [n(214), n(215), n(216), n(217)];
            e.exports = s.Ember.Component.extend(i.default, {
                classNames: ["parties-game-type-card-category-div"],
                classNameBindings: ["isSelected:selected", "isDisabled:disabled"],
                eligibilityService: s.Ember.inject.service("queue-eligibility"),
                summonerService: s.Ember.inject.service("summoner"),
                platformConfigSingleton: o.default,
                layout: n(218),
                summonerId: s.Ember.computed.alias("summonerService.localSummonerId"),
                isSelected: s.Ember.computed("selectedQueueId", "queueId", "isDisabled", (function() {
                    return this.get("selectedQueueId") === this.get("queueId") && !this.get("isDisabled")
                })),
                queueObj: s.Ember.computed("queueId", (function() {
                    return this.get("queues").getQueueById(this.get("queueId"))
                })),
                eligibility: s.Ember.computed("queueId", "eligibilityService.eligibilities", (function() {
                    const e = this.get("queueId"),
                        t = this.get("eligibilityService.eligibilities");
                    let n = {};
                    return t && t[e] && (n = t[e], n.restrictions = this.get("eligibilityService").applyRestrictionGroupRules(n.restrictions)), n
                })),
                isDisabled: !1,
                isEligibilityRestricted: s.Ember.computed.not("eligibility.eligible"),
                gameTypeQueueName: s.Ember.computed("queueId", "queues.platformJson", (function() {
                    const e = this.get("queueId"),
                        t = this.get("queues.platformJson"),
                        n = e && t ? t.find((t => t.id === e)) : null;
                    return n ? n.description : ""
                })),
                queueGameMode: s.Ember.computed("queueId", "queues.platformJson", (function() {
                    const e = this.get("queueId"),
                        t = this.get("queues.platformJson"),
                        n = e && t ? t.find((t => t.id === e)) : null;
                    return n ? n.gameMode : ""
                })),
                tooltipConfig: {
                    targetAnchor: {
                        x: "center",
                        y: "bottom"
                    },
                    tooltipAnchor: {
                        x: "center",
                        y: "top"
                    },
                    offset: {
                        x: 0,
                        y: 0
                    }
                },
                disabledReasons: s.Ember.A(),
                disabledReasonsObserver: s.Ember.on("init", s.Ember.observer("eligibility", (function() {
                    s.Ember.run.once(this, (function() {
                        this.computeDisabledReasons()
                    }))
                }))),
                computeDisabledReasons: function() {
                    const e = this.get("eligibility");
                    if (!e || !e.eligible) {
                        const t = this.get("eligibilityService");
                        return t.generateDisabledReasonForParty(e).then((n => {
                            this.set("isDisabled", t.isSummonerRestricted(e, this.get("summonerId"))), this.set("disabledReasons", s.Ember.A(n))
                        }))
                    }
                    return this.set("isDisabled", !1), Promise.resolve()
                },
                click: function() {
                    if (!this.get("isSelected") && !this.get("isDisabled")) {
                        const e = this.get("queueId");
                        this.sendAction("selectCategory", e), this.playSound("/fe/lol-uikit/sfx-uikit-radio-click.ogg")
                    }
                    return !1
                },
                isSoloRewardsEnabled: s.Ember.computed.or("soloIpIncentivesEnabled", "soloAutofillProtectionEnabled"),
                soloIpIncentivesEnabled: s.Ember.computed.alias("platformConfigSingleton.soloIpRewardsForQueueId440"),
                soloAutofillProtectionEnabled: s.Ember.computed.alias("platformConfigSingleton.soloAutoFillProtectionForQueueId440"),
                shouldShowSoloRewards: s.Ember.computed("queueId", "isSoloRewardsEnabled", "isDisabled", (function() {
                    return 440 === this.get("queueId") && this.get("isSoloRewardsEnabled") && !this.get("isDisabled")
                })),
                allowablePremadeSizesForQueue440: s.Ember.computed.alias("platformConfigSingleton.allowablePremadeSizesForQueue440"),
                shouldShowAllowablePremadeSizes: s.Ember.computed("queueId", (function() {
                    return 440 === this.get("queueId")
                })),
                allowablePremadeSizesString: s.Ember.computed("tra", "tra.ready", "tra.game_select_flex_premade_size_any", "tra.game_select_flex_premade_size_fours_disabled", "tra.game_select_flex_premade_size_fives_only", "shouldShowAllowablePremadeSizes", "allowablePremadeSizesForQueue440", (function() {
                    if (!this.get("shouldShowAllowablePremadeSizes") || !this.get("platformConfigSingleton")) return "";
                    const e = this.get("allowablePremadeSizesForQueue440");
                    return "1,2,3,4,5" === e ? this.get("tra.game_select_flex_premade_size_any") : "1,2,3,5" === e ? this.get("tra.game_select_flex_premade_size_fours_disabled") : "5" === e ? this.get("tra.game_select_flex_premade_size_fives_only") : ""
                })),
                shouldShowUnlockVideo: s.Ember.computed("queueId", "queueGameMode", (function() {
                    const e = this.get("queueId");
                    return "TFT" === this.get("queueGameMode") && !a.TFT_AVAILABLE_NPE_QUEUE_IDS.includes(e)
                })),
                unlockVideo: s.Ember.computed("queueId", (function() {
                    const e = this.get("queueId");
                    return r[e % r.length]
                }))
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            "use strict";
            e.exports = n.p + "tft_npe_mode_unlock_1.webm"
        }, (e, t, n) => {
            "use strict";
            e.exports = n.p + "tft_npe_mode_unlock_2.webm"
        }, (e, t, n) => {
            "use strict";
            e.exports = n.p + "tft_npe_mode_unlock_3.webm"
        }, (e, t, n) => {
            "use strict";
            e.exports = n.p + "tft_npe_mode_unlock_4.webm"
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "sa2vOq7Y",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\game-type-select-component\\\\game-type-card\\\\game-type-category-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\game-type-select-component\\\\game-type-card\\\\game-type-category-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\game-type-select-component\\\\game-type-card\\\\game-type-category-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","parties-game-type-card-category-radio-option"],["flush-element"],["close-element"],["text","\\n"],["open-element","div",[]],["dynamic-attr","class",["concat",["queue-eligibility-error queue-status-icon ",["helper",["if"],[["get",["isEligibilityRestricted"]],"queue-status-icon-visible"],null]]]],["flush-element"],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipConfig"],[["get",["tooltipConfig"]]]],6],["close-element"],["text","\\n"],["open-element","div",[]],["dynamic-attr","class",["concat",["solo-rewards-icon queue-status-icon ",["helper",["if"],[["get",["shouldShowSoloRewards"]],"queue-status-icon-visible"],null]]]],["flush-element"],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipConfig"],[["get",["tooltipConfig"]]]],4],["close-element"],["text","\\n"],["open-element","div",[]],["dynamic-attr","data-queue-id",["concat",[["unknown",["queueId"]]]]],["dynamic-attr","data-disabled-reason",["concat",[["unknown",["computeDisabledReasons"]]]]],["dynamic-attr","class",["concat",[["helper",["if"],[["get",["isSelected"]],"current"],null]," ",["helper",["if"],[["get",["isDisabled"]],"disabled"],null]," parties-game-type-card-category-btn"]]],["flush-element"],["text","\\n  "],["append",["unknown",["gameTypeQueueName"]],false],["text","\\n"],["block",["if"],[["get",["shouldShowAllowablePremadeSizes"]]],null,1],["close-element"],["text","\\n"],["block",["if"],[["get",["shouldShowUnlockVideo"]]],null,0],["append",["helper",["tft-event-countdown"],null,[["queueId"],[["get",["queueId"]]]]],false]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["open-element","uikit-video",[]],["static-attr","class","parties-game-type-card-category-unlock-video"],["static-attr","cache-name","rcp-fe-lol-parties"],["static-attr","preload",""],["dynamic-attr","src",["concat",[["unknown",["unlockVideo"]]]]],["flush-element"],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","span",[]],["static-attr","class","allowable-premade-sizes-text"],["flush-element"],["append",["unknown",["allowablePremadeSizesString"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","p",[]],["static-attr","class","game-select-solo-rewards-item"],["flush-element"],["append",["unknown",["tra","game_select_solo_rewards_ip_incentive"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","p",[]],["static-attr","class","game-select-solo-rewards-item"],["flush-element"],["append",["unknown",["tra","game_select_solo_rewards_autofill_protection"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-large"],["flush-element"],["text","\\n      "],["open-element","h5",[]],["flush-element"],["append",["unknown",["tra","game_select_solo_rewards_title"]],false],["close-element"],["text","\\n      "],["open-element","hr",[]],["flush-element"],["close-element"],["text","\\n"],["block",["if"],[["get",["soloAutofillProtectionEnabled"]]],null,3],["block",["if"],[["get",["soloIpIncentivesEnabled"]]],null,2],["text","    "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["open-element","li",[]],["flush-element"],["append",["helper",["sanitize"],[["get",["reason"]]],null],false],["close-element"],["text","\\n"]],"locals":["reason"]},{"statements":[["text","    "],["open-element","lol-uikit-content-block",[]],["static-attr","class","game-type-category-disabled"],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n      "],["open-element","ul",[]],["flush-element"],["text","\\n"],["block",["each"],[["get",["disabledReasons"]]],null,5],["text","      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s, i = n(1),
                o = (s = n(16)) && s.__esModule ? s : {
                    default: s
                },
                a = n(15);
            e.exports = i.Ember.Component.extend({
                classNames: ["parties-game-navs"],
                classNameBindings: ["hasAlphaQueues"],
                layout: n(220),
                customGamesService: i.Ember.inject.service("custom-games"),
                eligibilityService: i.Ember.inject.service("queue-eligibility"),
                platformConfigSingleton: o.default,
                categories: i.Ember.computed("queues.queuesByCategory", (function() {
                    return this.convertCategories("primary")
                })),
                secondaryCategories: i.Ember.computed("queues", (function() {
                    return this.convertCategories("secondary")
                })),
                selectedIndex: i.Ember.computed("categories", "selected.category", (function() {
                    const e = [].concat(a.CATEGORIES_DISPLAY_ORDER.primary, a.CATEGORIES_DISPLAY_ORDER.secondary),
                        t = this.get("selected.category"),
                        n = e.indexOf(t);
                    return Math.max(n, 0)
                })),
                actions: {
                    selectCategory(e) {
                        this.setCategory(e)
                    }
                },
                setCategory: function(e) {
                    if (this.set("selected.category", e), this.set("selected.needsAdditionalGameConfig", !1), this.set("selected.isCreatingCustomGame", !1), this.set("selected.isJoiningCustomGame", !1), this.set("selected.isTrainingGame", !1), this.set("selected.queueId", null), "CreateCustom" === e) {
                        this.get("customGamesService").resetSelectedSubcategory(), this.set("selected.isCreatingCustomGame", !0), this.set("selected.needsAdditionalGameConfig", !0);
                        const e = this.get("customGamesService.selectedSubcategory.mapId");
                        this.set("selected.mapId", e)
                    } else if ("JoinCustom" === e) this.set("selected.isJoiningCustomGame", !0);
                    else if ("Training" === e) {
                        this.set("selected.isTrainingGame", !0);
                        const e = this.get("queues").getTutorialQueues();
                        e && e.length > 0 && (this.get("eligibilityService").isTutorialRestricted() && e.length > 1 ? (this.set("selected.trainingGameMode", e[1].gameMode), this.set("selected.isCreatingCustomGame", !0)) : this.set("selected.trainingGameMode", e[0].gameMode))
                    } else {
                        const t = this.getDefaultQueue(e);
                        t && this.set("selected.queueId", t)
                    }
                },
                getDefaultQueue: function(e) {
                    const t = this.get("queues"),
                        n = t.getAllAvailableGameTypesForCategory(e);
                    for (const s of n) {
                        const n = t.getAvailableQueuesForCategoryAndGameType(e, s.mapId, s.gameMode),
                            i = this.get("eligibilityService").getQueueEligibilities(n);
                        for (let e = 0; e < n.length; e++) {
                            const t = i[e];
                            if (t && t.eligible) return n[e]
                        }
                    }
                    return !1
                },
                convertCategories: function(e) {
                    const t = [],
                        n = this.get("queues");
                    return a.CATEGORIES_DISPLAY_ORDER[e].forEach((e => {
                        const s = n.categoryHasQueues(e);
                        t.push(i.Ember.Object.create({
                            name: e,
                            hasQueues: s
                        }))
                    })), i.Ember.A(t)
                }
            })
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "OIktvXi/",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\category-select-component\\\\layout.hbs\\" style-path=\\"null\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\category-select-component\\\\index.js\\" "],["text","\\n"],["open-element","lol-uikit-navigation-bar",[]],["dynamic-attr","selectedindex",["concat",[["unknown",["selectedIndex"]]]]],["static-attr","type","nav-bar-secondary"],["static-attr","class","parties-game-navs-list"],["flush-element"],["text","\\n"],["block",["each"],[["get",["categories"]]],null,1],["text","  "],["open-element","span",[]],["static-attr","class","parties-game-navs-break"],["flush-element"],["close-element"],["text","\\n"],["block",["each"],[["get",["secondaryCategories"]]],null,0],["close-element"],["text","\\n"],["append",["unknown",["custom-game-tournament-code"]],false]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["append",["helper",["playable-category"],null,[["category","selected","action"],[["get",["catObj"]],["get",["selected"]],"selectCategory"]]],false],["text","\\n"]],"locals":["catObj"]},{"statements":[["text","    "],["append",["helper",["playable-category"],null,[["category","selected","action"],[["get",["catObj"]],["get",["selected"]],"selectCategory"]]],false],["text","\\n"]],"locals":["catObj"]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s, i = n(1),
                o = (s = n(16)) && s.__esModule ? s : {
                    default: s
                };
            e.exports = i.Ember.Component.extend({
                tagName: "lol-uikit-navigation-item",
                classNames: ["parties-game-navs-item"],
                customGamesService: i.Ember.inject.service("custom-games"),
                attributeBindings: ["disabled:disabled", "active:active", "category.name:data-category"],
                layout: n(222),
                platformConfigSingleton: o.default,
                active: i.Ember.computed("category.name", "selected.category", (function() {
                    return this.get("category.name") === this.get("selected.category")
                })),
                isCreateCustom: i.Ember.computed.equal("category.name", "CreateCustom"),
                isJoinCustom: i.Ember.computed.equal("category.name", "JoinCustom"),
                isTraining: i.Ember.computed.equal("category.name", "Training"),
                disabled: i.Ember.computed("category.hasQueues", "isCreateCustom", "isJoinCustom", "isTraining", "customGamesService.available", "platformConfigSingleton.tutorialEnabled", (function() {
                    return this.get("isTraining") ? !this.get("platformConfigSingleton.tutorialEnabled") : this.get("isCreateCustom") || this.get("isJoinCustom") ? !this.get("customGamesService.available") : !this.get("category.hasQueues")
                })),
                name: i.Ember.computed("category.name", "tra.ready", "tra.parties_game_category_pvp", (function() {
                    const e = this.get("category.name");
                    return e ? this.get(`tra.parties_game_category_${e.toLowerCase()}`) : ""
                })),
                tooltipConfig: {
                    targetAnchor: {
                        x: "center",
                        y: "bottom"
                    },
                    tooltipAnchor: {
                        x: "center",
                        y: "top"
                    },
                    offset: {
                        x: 0,
                        y: 0
                    }
                },
                click: function() {
                    this.get("disabled") || this.get("active") || this.sendAction("action", this.get("category.name"))
                }
            })
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "tnLDfvgU",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\category-select-component\\\\category-component\\\\layout.hbs\\" style-path=\\"null\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\category-select-component\\\\category-component\\\\index.js\\" "],["text","\\n"],["append",["unknown",["name"]],false],["text","\\n"],["block",["if"],[["get",["disabled"]]],null,1]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n      "],["open-element","p",[]],["flush-element"],["append",["unknown",["tra","game_select_category_nav_not_available"]],false],["close-element"],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["uikit-tooltip"],null,[["tooltipConfig"],[["get",["tooltipConfig"]]]],0]],"locals":[]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s, i = n(1),
                o = n(41),
                a = (s = n(122)) && s.__esModule ? s : {
                    default: s
                };
            n(224);
            const l = i.UIKit.getTooltipManager(),
                r = i.UIKit.getTemplateHelper();
            e.exports = i.Ember.Component.extend(a.default, {
                classNames: ["parties-custom-game-setup"],
                classNameBindings: ["haveNameError:name-error"],
                customGamesService: i.Ember.inject.service("custom-games"),
                layout: n(225),
                showingState: null,
                selected: null,
                queues: null,
                playerInputs: i.Ember.computed.alias("customGamesService.playerInputs"),
                selectedSubcategory: i.Ember.computed.alias("customGamesService.selectedSubcategory"),
                subcategories: i.Ember.computed.alias("customGamesService.shownCustomSubcategories"),
                spectatorTypes: i.Ember.computed.alias("customGamesService.spectatorTypes"),
                onDidInsertListener: i.Ember.on("didInsertElement", (function() {
                    this.set("playerInputs.password", ""), this.set("playerInputs.name", this.get("defaultGameName"))
                })),
                maxTeamSize: i.Ember.computed("selectedSubcategory.numPlayersPerTeam", "selectedSubcategory.mutators", "playerInputs.mutatorId", (function() {
                    const e = this.get("selectedSubcategory.numPlayersPerTeam"),
                        t = this.get("selectedSubcategory.mutators"),
                        n = this.get("playerInputs.mutatorId");
                    if (t) {
                        const e = t.find((e => e.id === n));
                        if (e && e.numPlayersPerTeamOverride) return e.numPlayersPerTeamOverride
                    }
                    return e
                })),
                teamSizeOptions: i.Ember.computed("maxTeamSize", "minPlayersPerTeam", (function() {
                    const e = this.get("maxTeamSize");
                    this.get("playerInputs.numPlayersPerTeam") > e && this.set("playerInputs.numPlayersPerTeam", e);
                    const t = this.get("playerInputs.numPlayersPerTeam"),
                        n = [];
                    for (let s = this.get("minPlayersPerTeam"); s <= e; s++) {
                        const e = s === t;
                        n.push({
                            value: s,
                            isSelected: e
                        })
                    }
                    return i.Ember.A(n)
                })),
                minPlayersPerTeam: i.Ember.computed("customGamesService.gameMapMinPlayers.[]", "customGamesService.gameMapMinPlayers.@each.minPlayers", "customGamesService.minPlayers", "selected.mapId", (function() {
                    let e = 1;
                    const t = this.get("selected.mapId"),
                        n = this.get("customGamesService.minPlayers");
                    e = this.get("customGamesService").findMinPlayersForMap(t), n && n > e && (e = n);
                    const s = Math.ceil(e / 2);
                    return this.get("playerInputs.numPlayersPerTeam") < s && this.send("teamSizeChange", s), s
                })),
                gameServerRegionOptions: i.Ember.computed.alias("customGamesService.gameServerRegionOptions"),
                mutatorOptions: i.Ember.computed("tra.ready", "selectedSubcategory.mutators.@each.name", (function() {
                    const e = this.get("selectedSubcategory.mutators");
                    if (!e || e.length < 1) return;
                    this.resetMutatorOverrides(this.get("selectedSubcategory.mapId"), this.get("playerInputs.mutatorId"));
                    const t = [],
                        n = this.get("playerInputs.mutatorId");
                    for (let s = 0; s < e.length; s++) {
                        const i = e[s].get("name");
                        let a = e[s].get("id");
                        a = parseInt(a, 10);
                        const l = this.get("selectedSubcategory.mapId");
                        if (-1 === o.CUSTOM_GAME_NORMAL_MUTATORS.indexOf(a) && !this.isValidMutatorOverride(l, e[s])) continue;
                        let r = i;
                        o.CUSTOM_GAME_MUTATOR_NAMES[i] && (r = this.get(`tra.custom_game_mutator_type_${o.CUSTOM_GAME_MUTATOR_NAMES[i]}`));
                        const c = a === n;
                        t.push({
                            value: a,
                            label: r,
                            isSelected: c
                        })
                    }
                    return i.Ember.A(t)
                })),
                spectatorOptions: i.Ember.computed("tra.ready", "spectatorTypes", "selectedSubcategory.customSpectatorPolicies", (function() {
                    const e = this.get("playerInputs.spectatorType");
                    let t = this.get("spectatorTypes");
                    const n = this.get("selectedSubcategory.customSpectatorPolicies");
                    t && t.length || (t = ["NotAllowed"]), n && n.length > 0 && (t = n);
                    const s = [];
                    let i = !1;
                    return t.forEach((t => {
                        let n = t;
                        o.CUSTOM_GAME_SPECTATOR_TYPES[t] && (n = this.get(`tra.custom_game_setup_spectator_type_${o.CUSTOM_GAME_SPECTATOR_TYPES[t]}`));
                        const a = t === e;
                        a && (i = !0);
                        const l = {
                            value: t,
                            label: n,
                            isSelected: a
                        };
                        s.push(l)
                    })), i || (s[0].isSelected = !0, this.set("playerInputs.spectatorType", s[0].value)), s
                })),
                spectatorDelayOptions: i.Ember.computed("tra.ready", (function() {
                    const e = this.get("playerInputs.spectatorDelay"),
                        t = [];
                    let n = !1;
                    for (const s in o.CUSTOM_GAME_SPECTATOR_DELAY_OPTIONS) {
                        const i = s === e;
                        i && (n = !0);
                        const a = {
                            value: s,
                            label: this.get(`tra.custom_game_setup_spectator_delay_${o.CUSTOM_GAME_SPECTATOR_DELAY_OPTIONS[s]}`),
                            isSelected: i
                        };
                        t.push(a)
                    }
                    return n || (t[0].isSelected = !0, this.set("playerInputs.spectatorDelay", t[0].value)), t
                })),
                spectatorDelayConfigurable: i.Ember.computed.and("customGamesService.spectatorV3Enabled", "customGamesService.spectatorV3DelayConfigurable"),
                defaultGameName: i.Ember.computed.alias("customGamesService.defaultGameName"),
                nameError: i.Ember.computed.alias("customGamesService.nameError"),
                haveNameError: i.Ember.computed.alias("customGamesService.haveNameError"),
                nameErrorMessage: "",
                nameInput: function() {
                    return this.element ? this.element.querySelector("input#custom-game-name") : null
                },
                nameErrorObserver: i.Ember.computed("tra.ready", "nameError", (function() {
                    const e = this.get("nameError");
                    if (null === e) return;
                    let t = "";
                    switch (e) {
                        case "length":
                            t = this.get("tra.custom_game_setup_name_error_length");
                            break;
                        case "duplicate":
                            t = this.get("tra.formatString")("custom_game_setup_name_error_duplicate", {
                                name: this.get("playerInputs.name")
                            })
                    }
                    t && this.set("nameErrorMessage", t)
                })),
                nameErrorTooltipObserver: i.Ember.computed("nameErrorMessage", (function() {
                    const e = this.nameInput();
                    if (!e) return;
                    const t = this.get("nameErrorMessage");
                    if (!t) return void l.unassign(e);
                    const n = this.createTooltip(t);
                    l.assign(e, n, {}, {
                        type: "info",
                        showDelay: 0,
                        targetAnchor: {
                            x: "center",
                            y: "top"
                        },
                        tooltipAnchor: {
                            x: "center",
                            y: "bottom"
                        },
                        showEvent: "nothing",
                        hideEvent: "nothing"
                    }), l.show(e)
                })),
                createTooltip: function(e) {
                    const t = document.createElement("lol-uikit-tooltip");
                    t.classList.add("parties-custom-game-name-error-tooltip"), t.setAttribute("position", "bottom");
                    const n = r.contentBlockDialogSimple(e);
                    return n.setAttribute("padding", "small"), t.appendChild(n), t
                },
                haveNameLengthError: function() {
                    const e = this.nameInput();
                    return !e || (!e.value || e.value.trim().length < 3) && (this.set("nameError", "length"), !0)
                },
                clearNameError: function() {
                    this.set("nameError", null), this.set("nameErrorMessage", null)
                },
                resetMutatorOverrides: function(e, t) {
                    if (!this.get("selectedSubcategory.mutators")) return;
                    const n = this.get("selectedSubcategory.mutators").find((e => e.id === t));
                    if (n && -1 === o.CUSTOM_GAME_NORMAL_MUTATORS.indexOf(t) && !this.isValidMutatorOverride(e, n)) {
                        const e = this.get("selectedSubcategory.mutators")[0].id;
                        this.set("playerInputs.mutatorId", e), this.set("playerInputs.queueId", this.get("customGamesService").getQueueId(e))
                    }
                },
                isValidMutatorOverride: function(e, t) {
                    return !(!o.CUSTOM_GAME_MAP_MUTATOR_OVERRIDES[e] || -1 === o.CUSTOM_GAME_MAP_MUTATOR_OVERRIDES[e].indexOf(t.id)) && (t.gameModeOverride || t.numPlayersPerTeamOverride)
                },
                actions: {
                    nameKeyUp: function() {
                        this.haveNameLengthError() || this.clearNameError()
                    },
                    nameChange: function() {
                        const e = this.nameInput();
                        if (!e || this.haveNameLengthError()) return;
                        const t = e.value.trim();
                        this.clearNameError(), this.set("playerInputs.name", t)
                    },
                    passwordChange: function() {
                        const e = this.element.querySelector("input#custom-game-password");
                        e && e.value && this.set("playerInputs.password", e.value)
                    },
                    teamSizeChange: function(e) {
                        e >= this.get("minPlayersPerTeam") && this.set("playerInputs.numPlayersPerTeam", e)
                    },
                    gameServerRegionChange: function(e) {
                        this.set("playerInputs.gameServerRegion", e)
                    },
                    mutatorChanged: function() {
                        const e = this.element.querySelector("#custom-game-mutator lol-uikit-radio-input-option[selected]");
                        if (!e) return;
                        let t = e.getAttribute("value");
                        t = parseInt(t, 10), this.set("playerInputs.mutatorId", t), this.set("playerInputs.queueId", this.get("customGamesService").getQueueId(t))
                    },
                    spectatorChanged: function() {
                        const e = this.element.querySelector("#custom-game-spectator lol-uikit-radio-input-option[selected]");
                        e && this.set("playerInputs.spectatorType", e.getAttribute("value"))
                    },
                    spectatorDelayChanged: function() {
                        const e = this.element.querySelector("#custom-game-spectator-delay lol-uikit-radio-input-option[selected]");
                        e && this.set("playerInputs.spectatorDelay", e.getAttribute("value"))
                    },
                    selectSubcategory: function(e) {
                        if (this.get("customGamesService").selectSubcategory(e)) {
                            const e = this.get("selectedSubcategory.mapId");
                            this.set("selected.mapId", e)
                        }
                    }
                }
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "CU4VL6e3",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\custom-game-setup-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\custom-game-setup-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\custom-game-setup-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","parties-custom-game-subcategory-select"],["flush-element"],["text","\\n"],["block",["each"],[["get",["subcategories"]]],null,18],["close-element"],["text","\\n"],["open-element","div",[]],["static-attr","class","parties-custom-game-lower-half"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","parties-custom-game-text-inputs"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","parties-custom-game-name-field"],["flush-element"],["text","\\n      "],["open-element","label",[]],["static-attr","for","custom-game-name"],["flush-element"],["append",["unknown",["tra","custom_game_setup_name_label"]],false],["close-element"],["text","\\n      "],["open-element","lol-uikit-flat-input",[]],["flush-element"],["text","\\n        "],["open-element","input",[]],["static-attr","type","text"],["static-attr","name","custom-game-name"],["static-attr","id","custom-game-name"],["dynamic-attr","value",["concat",[["unknown",["defaultGameName"]]]]],["static-attr","maxlength","30"],["modifier",["action"],[["get",[null]],"nameChange"],[["on"],["focusOut"]]],["modifier",["action"],[["get",[null]],"nameKeyUp"],[["on"],["keyUp"]]],["flush-element"],["close-element"],["text","\\n      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","ul",[]],["static-attr","class","parties-custom-game-dropdown-fields"],["flush-element"],["text","\\n      "],["open-element","li",[]],["static-attr","class","parties-custom-game-size-field"],["flush-element"],["text","\\n        "],["open-element","label",[]],["static-attr","for","custom-game-size"],["flush-element"],["append",["unknown",["tra","custom_game_setup_team_size_label"]],false],["close-element"],["text","\\n        "],["open-element","lol-uikit-framed-dropdown",[]],["static-attr","id","custom-game-size"],["flush-element"],["text","\\n"],["block",["each"],[["get",["teamSizeOptions"]]],null,17],["text","        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n"],["block",["if"],[["get",["gameServerRegionOptions"]]],null,14],["text","    "],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","parties-custom-game-password-field"],["flush-element"],["text","\\n      "],["open-element","label",[]],["static-attr","for","custom-game-password"],["flush-element"],["append",["unknown",["tra","custom_game_setup_password_label"]],false],["close-element"],["text","\\n      "],["open-element","lol-uikit-flat-input",[]],["flush-element"],["text","\\n        "],["open-element","input",[]],["static-attr","type","password"],["static-attr","name","custom-game-password"],["static-attr","id","custom-game-password"],["modifier",["action"],[["get",[null]],"passwordChange"],[["on"],["change"]]],["flush-element"],["close-element"],["text","\\n      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","parties-custom-game-radio-options"],["flush-element"],["text","\\n"],["block",["if"],[["get",["mutatorOptions","length"]]],null,10],["text","    "],["open-element","div",[]],["static-attr","class","parties-custom-game-spectator-field"],["flush-element"],["text","\\n      "],["open-element","label",[]],["static-attr","for","custom-game-spectator"],["flush-element"],["append",["unknown",["tra","custom_game_setup_spectator_label"]],false],["close-element"],["text","\\n      "],["open-element","lol-uikit-radio-input",[]],["static-attr","id","custom-game-spectator"],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"spectatorChanged"],null],null],["flush-element"],["text","\\n"],["block",["each"],[["get",["spectatorOptions"]]],null,6],["text","      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n"],["block",["if"],[["get",["spectatorDelayConfigurable"]]],null,3],["text","  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"],["open-element","div",[]],["static-attr","style","display: none;"],["flush-element"],["text","\\n  "],["append",["unknown",["nameErrorObserver"]],false],["text","\\n  "],["append",["unknown",["nameErrorTooltipObserver"]],false],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","          "],["open-element","lol-uikit-radio-input-option",[]],["dynamic-attr","value",["concat",[["unknown",["option","value"]]]]],["flush-element"],["text","\\n            "],["append",["unknown",["option","label"]],false],["text","\\n          "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["open-element","lol-uikit-radio-input-option",[]],["static-attr","selected",""],["dynamic-attr","value",["concat",[["unknown",["option","value"]]]]],["flush-element"],["text","\\n            "],["append",["unknown",["option","label"]],false],["text","\\n          "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["option","isSelected"]]],null,1,0]],"locals":["option"]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","parties-custom-game-spectator-delay-field"],["flush-element"],["text","\\n      "],["open-element","label",[]],["static-attr","for","custom-game-spectator-delay"],["flush-element"],["append",["unknown",["tra","custom_game_setup_spectator_delay_label"]],false],["close-element"],["text","\\n      "],["open-element","lol-uikit-radio-input",[]],["static-attr","id","custom-game-spectator-delay"],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"spectatorDelayChanged"],null],null],["flush-element"],["text","\\n"],["block",["each"],[["get",["spectatorDelayOptions"]]],null,2],["text","      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["open-element","lol-uikit-radio-input-option",[]],["dynamic-attr","value",["concat",[["unknown",["option","value"]]]]],["flush-element"],["text","\\n            "],["append",["unknown",["option","label"]],false],["text","\\n          "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["open-element","lol-uikit-radio-input-option",[]],["static-attr","selected",""],["dynamic-attr","value",["concat",[["unknown",["option","value"]]]]],["flush-element"],["text","\\n            "],["append",["unknown",["option","label"]],false],["text","\\n          "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["option","isSelected"]]],null,5,4]],"locals":["option"]},{"statements":[["text","          "],["open-element","lol-uikit-radio-input-option",[]],["dynamic-attr","value",["concat",[["unknown",["option","value"]]]]],["flush-element"],["text","\\n            "],["append",["unknown",["option","label"]],false],["text","\\n          "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["open-element","lol-uikit-radio-input-option",[]],["static-attr","selected",""],["dynamic-attr","value",["concat",[["unknown",["option","value"]]]]],["flush-element"],["text","\\n            "],["append",["unknown",["option","label"]],false],["text","\\n          "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["option","isSelected"]]],null,8,7]],"locals":["option"]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","parties-custom-game-type-field"],["flush-element"],["text","\\n      "],["open-element","label",[]],["static-attr","for","custom-game-mutator"],["flush-element"],["append",["unknown",["tra","custom_game_setup_type_label"]],false],["close-element"],["text","\\n      "],["open-element","lol-uikit-radio-input",[]],["static-attr","id","custom-game-mutator"],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"mutatorChanged"],null],null],["flush-element"],["text","\\n"],["block",["each"],[["get",["mutatorOptions"]]],null,9],["text","      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","                "],["open-element","lol-uikit-dropdown-option",[]],["static-attr","slot","lol-uikit-dropdown-option"],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"gameServerRegionChange",["get",["option","value"]]],null],null],["flush-element"],["text","\\n                  "],["append",["unknown",["option","value"]],false],["text","\\n                "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","                "],["open-element","lol-uikit-dropdown-option",[]],["static-attr","slot","lol-uikit-dropdown-option"],["static-attr","selected",""],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"gameServerRegionChange",["get",["option","value"]]],null],null],["flush-element"],["text","\\n                  "],["append",["unknown",["option","value"]],false],["text","\\n                "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["option","isSelected"]]],null,12,11]],"locals":["option"]},{"statements":[["text","        "],["open-element","li",[]],["static-attr","class","parties-custom-game-region-field"],["flush-element"],["text","\\n          "],["open-element","label",[]],["static-attr","for","custom-game-region"],["flush-element"],["append",["unknown",["tra","custom_game_setup_region_label"]],false],["close-element"],["text","\\n          "],["open-element","lol-uikit-framed-dropdown",[]],["static-attr","id","custom-game-region"],["flush-element"],["text","\\n"],["block",["each"],[["get",["gameServerRegionOptions"]]],null,13],["text","          "],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","              "],["open-element","lol-uikit-dropdown-option",[]],["static-attr","slot","lol-uikit-dropdown-option"],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"teamSizeChange",["get",["option","value"]]],null],null],["flush-element"],["text","\\n                "],["append",["unknown",["option","value"]],false],["text","\\n              "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","              "],["open-element","lol-uikit-dropdown-option",[]],["static-attr","slot","lol-uikit-dropdown-option"],["static-attr","selected",""],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"teamSizeChange",["get",["option","value"]]],null],null],["flush-element"],["text","\\n                "],["append",["unknown",["option","value"]],false],["text","\\n              "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["option","isSelected"]]],null,16,15]],"locals":["option"]},{"statements":[["text","    "],["append",["helper",["custom-game-subcategory-card"],null,[["index","animationLock","subcategory","selectedSubcategoryIndex","selected"],[["get",["index"]],["get",["selected","animationLock"]],["get",["subcategory"]],["get",["playerInputs","subcategoryIndex"]],"selectSubcategory"]]],false],["text","\\n"]],"locals":["subcategory","index"]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s, i = n(1),
                o = (s = n(74)) && s.__esModule ? s : {
                    default: s
                },
                a = n(41);
            e.exports = i.Ember.Component.extend(o.default, {
                classNames: ["parties-custom-game-subcategory-card"],
                classNameBindings: ["currentlySelected:selected", "unavailable:disabled", "animationLock:animation-lock"],
                attributeBindings: ["mapId:data-map-id"],
                index: null,
                subcategory: null,
                selectedSubcategoryIndex: null,
                animationLock: !1,
                layout: n(227),
                assets: i.Ember.inject.service(),
                mapId: i.Ember.computed.alias("subcategory.mapId"),
                availability: i.Ember.computed("subcategory.queueAvailability", (function() {
                    const e = this.get("subcategory.queueAvailability");
                    return !!a.GAME_AVAILABILITY_TYPES[e] && a.GAME_AVAILABILITY_TYPES[e]
                })),
                available: i.Ember.computed.equal("availability", "available"),
                unavailable: i.Ember.computed.not("available"),
                unavailableTooltip: i.Ember.computed("tra.ready", "tra.custom_game_setup_subcategory_unavailable_generic", (function() {
                    return this.get("tra.custom_game_setup_subcategory_unavailable_generic")
                })),
                currentlySelected: i.Ember.computed("index", "selectedSubcategoryIndex", (function() {
                    return this.get("index") === this.get("selectedSubcategoryIndex")
                })),
                name: i.Ember.computed("tra.ready", "subcategory.mapId", "subcategory.modifiers", "subcategory.gameMode", "assets", (function() {
                    const e = this.get("mapId"),
                        t = this.get("gameMode"),
                        n = this.get("assets").getMap(e, t);
                    return n && n.name ? n.name : this.get(`tra.game_select_map_name_${e}`)
                })),
                hoverSoundDisabled: i.Ember.computed.or("currentlySelected", "unavailable"),
                onDidInsertElement: i.Ember.on("didInsertElement", i.Ember.observer("mapId", "assets.availableMaps", (function() {
                    const e = this.element.querySelector(".subcategory-map-icon"),
                        t = this.getMapSoundUrl("gameselect-button-hover-sound");
                    this.attachHoverSoundWithDisabledCheck(e, t)
                }))),
                tooltipConfig: {
                    targetAnchor: {
                        x: "center",
                        y: "bottom"
                    },
                    tooltipAnchor: {
                        x: "center",
                        y: "top"
                    },
                    offset: {
                        x: 0,
                        y: 0
                    }
                },
                actions: {
                    selectSubcategory: function() {
                        this.get("animationLock") || (this.get("unavailable") ? this.playSound("/fe/lol-parties/sfx-uikit-button-locked-click.ogg") : this.get("currentlySelected") || (this.playSound("/fe/lol-parties/sfx-gameselect-button-map-click.ogg"), this.sendAction("selected", this.get("index"))))
                    }
                }
            })
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "0tGrPfcR",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\custom-game-setup-component\\\\subcategory-card-component\\\\layout.hbs\\" style-path=\\"null\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\custom-game-setup-component\\\\subcategory-card-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","subcategory-map-icon"],["modifier",["action"],[["get",[null]],"selectSubcategory"]],["flush-element"],["text","\\n  "],["append",["helper",["game-type-icon"],null,[["mapId","currentlySelected","gameTypeName"],[["get",["mapId"]],["get",["currentlySelected"]],["get",["name"]]]]],false],["text","\\n"],["block",["if"],[["get",["unavailable"]]],null,1],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","        "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n          "],["open-element","p",[]],["flush-element"],["append",["unknown",["unavailableTooltip"]],false],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","subcategory-tooltip-proxy"],["flush-element"],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipConfig"],[["get",["tooltipConfig"]]]],0],["text","    "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1),
                i = n(41);
            n(229), e.exports = s.Ember.Component.extend({
                layout: n(230),
                classNames: ["custom-root"],
                classNameBindings: ["isShowingParty:custom-lobby-show:custom-lobby-hide"],
                lobbiesService: s.Ember.inject.service("lobbies"),
                matchmakingService: s.Ember.inject.service("matchmaking"),
                customGameService: s.Ember.inject.service("custom-games"),
                selected: !1,
                isTFT: s.Ember.computed.alias("customGameService.isTFT"),
                isShowingParty: s.Ember.computed.alias("showingState.isShowingParty"),
                currentPlayer: s.Ember.computed.alias("lobbiesService.currentPlayer"),
                currentPlayerCanInvite: s.Ember.computed.alias("lobbiesService.currentPlayerCanInvite"),
                isCurrentPlayerPartyLeader: s.Ember.computed.alias("lobbiesService.isCurrentPlayerPartyLeader"),
                inviteButtonDisabled: s.Ember.computed.or("matchmakingService.isSearching", "matchmakingService.isMatchFound"),
                currentPartyIsFull: s.Ember.computed.alias("lobbiesService.currentPartyIsFull"),
                showSpectators: s.Ember.computed("customGameService.spectatorPolicy", (function() {
                    const e = this.get("customGameService.spectatorPolicy");
                    return !(!e || !i.CUSTOM_GAME_SPECTATOR_TYPES[e] || "none" === i.CUSTOM_GAME_SPECTATOR_TYPES[e] || "dropin" === i.CUSTOM_GAME_SPECTATOR_TYPES[e])
                })),
                isLobbyFull: s.Ember.computed.alias("customGameService.isLobbyFull"),
                didInsertElementListener: s.Ember.on("didInsertElement", (function() {
                    this.get("customGameService.isCustomUI") && this.set("selected.animationLock", !1)
                })),
                actions: {
                    showInviteModal: function() {
                        this.sendAction("showInviteModal")
                    }
                }
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "YZ/8yvWR",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\custom-game\\\\custom-game-root-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\custom-game\\\\custom-game-root-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\custom-game\\\\custom-game-root-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","custom-game-invite-button-container"],["flush-element"],["text","\\n  "],["append",["helper",["invite-button"],null,[["currentPlayerCanInvite","buttonsDisabled","currentPartyIsFull","isCurrentPlayerPartyLeader","showInviteModal","isLobbyFull"],[["get",["currentPlayerCanInvite"]],["get",["inviteButtonDisabled"]],["get",["currentPartyIsFull"]],["get",["isCurrentPlayerPartyLeader"]],"showInviteModal",["get",["isLobbyFull"]]]]],false],["text","\\n"],["close-element"],["text","\\n\\n"],["block",["lower-section"],null,[["currentPlayer"],[["get",["currentPlayer"]]]],2],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["append",["unknown",["spectator-info"]],false],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["append",["helper",["point-eligibility"],null,[["selected","isCustomGame"],[["get",["selected"]],true]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","\\n"],["block",["unless"],[["get",["isTFT"]]],null,1],["text","\\n  "],["append",["helper",["custom-teams"],null,[["isTFT"],[["get",["isTFT"]]]]],false],["text","\\n\\n  "],["append",["helper",["invite-info-panel"],null,[["currentPlayerCanInvite","isCustom"],[["get",["currentPlayerCanInvite"]],true]]],false],["text","\\n\\n"],["block",["if"],[["get",["showSpectators"]]],null,0],["text","\\n  "],["append",["helper",["parties-footer"],null,[["showingState","selected"],[["get",["showingState"]],["get",["selected"]]]]],false],["text","\\n\\n  "],["open-element","div",[]],["static-attr","class","parties-chat-room-custom"],["flush-element"],["text","\\n    "],["open-element","lol-social-chat-room",[]],["static-attr","type","lobby"],["static-attr","disabled-when-connecting",""],["flush-element"],["close-element"],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s, i = n(1),
                o = (s = n(74)) && s.__esModule ? s : {
                    default: s
                };
            n(232), e.exports = i.Ember.Component.extend(o.default, {
                classNames: ["custom-game-spectator-info"],
                layout: n(233),
                customGamesService: i.Ember.inject.service("custom-games"),
                summonerService: i.Ember.inject.service("summoner"),
                _buttonClickSound: "/fe/lol-parties/sfx-lobby-button-banner-click.ogg",
                _spectatorSummoners: i.Ember.A(),
                spectateButtonDisabled: i.Ember.computed("spectatorSlotsFull", "onlyOnePlayerOnTeams", "customGamesService.preventTeamChanges", "customGamesService.isSwitchingTeamsOrSpectating", "customGameService.isTFT", (function() {
                    return this.get("spectatorSlotsFull") || !this.get("customGamesService.isTFT") && this.get("onlyOnePlayerOnTeams") || this.get("customGamesService.preventTeamChanges") || this.get("customGamesService.isSwitchingTeamsOrSpectating")
                })),
                spectatorSlotsFull: i.Ember.computed("spectators", "spectators.@each.summonerId", "spectatorSlotLimit", (function() {
                    const e = this.get("spectatorSlotLimit");
                    if (!e) return !0;
                    const t = this.get("spectators");
                    return !t || t.length >= e
                })),
                currentPlayerIsSpectator: i.Ember.computed.alias("customGamesService.currentPlayerIsSpectator"),
                currentPlayerIsNotSpectator: i.Ember.computed.not("currentPlayerIsSpectator"),
                currentNumPlayers: i.Ember.computed.alias("customGamesService.currentNumPlayers"),
                onlyOnePlayerOnTeams: i.Ember.computed.equal("currentNumPlayers", 1),
                showSpectatorButton: i.Ember.computed.and("currentPlayerIsNotSpectator"),
                spectatorSlotLimit: i.Ember.computed.alias("customGamesService.spectatorSlotLimit"),
                spectators: i.Ember.computed.alias("customGamesService.spectators"),
                hasSpectators: i.Ember.computed.notEmpty("spectatorSummoners"),
                spectatorsCountText: i.Ember.computed("tra.custom_game_spectators_count", "spectators", "spectatorSlotLimit", (function() {
                    const e = this.get("spectators"),
                        t = this.get("spectatorSlotLimit");
                    return this.get("tra.formatString")("custom_game_spectators_count", {
                        currentNumber: e.length,
                        maxNumber: t
                    })
                })),
                spectateDisabledTooltip: i.Ember.computed("tra.ready", "tra.custom_game_spectating_disabled", "spectateButtonDisabled", (function() {
                    return this.get("spectatorSlotsFull") ? this.get("tra.custom_game_spectator_slots_full") : this.get("onlyOnePlayerOnTeams") ? this.get("tra.custom_game_spectator_need_players") : this.get("tra.custom_game_spectating_disabled")
                })),
                spectatorsObserver: i.Ember.computed("spectators.[]", (function() {
                    const e = this.get("spectators"),
                        t = e.map((e => this.get("summonerService").getSummoner(e.summonerId)));
                    return Promise.all(t).then((e => {
                        if (e && e.length > 0) {
                            const t = i.Ember.A();
                            e.forEach((e => {
                                e && e.summonerId && t.push(e)
                            })), this.set("_spectatorSummoners", i.Ember.A(t))
                        }
                    })), e
                })),
                spectatorSummoners: i.Ember.computed("spectators.[]", "_spectatorSummoners", "_spectatorSummoners.[]", (function() {
                    const e = this.get("_spectatorSummoners");
                    if (!e) return i.Ember.A();
                    const t = i.Ember.A();
                    return this.get("spectators").forEach((n => {
                        const s = e.findBy("summonerId", n.summonerId);
                        s && t.push(s)
                    })), t
                })),
                actions: {
                    currentPlayerToSpectator: function() {
                        this.get("customGamesService.isSwitchingTeamsOrSpectating") || (this.playSound(this._buttonClickSound), this.get("customGamesService").joinSpectators())
                    }
                }
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "4Q5rYGAu",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\custom-game\\\\spectator-info-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\custom-game\\\\spectator-info-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\custom-game\\\\spectator-info-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","spectator-info-header-wrapper"],["flush-element"],["text","\\n  "],["open-element","span",[]],["static-attr","class","spectator-info-header"],["flush-element"],["text","\\n    "],["append",["unknown",["tra","custom_game_spectators"]],false],["text"," ("],["append",["unknown",["spectatorsCountText"]],false],["text",")\\n  "],["close-element"],["text","\\n"],["block",["if"],[["get",["showSpectatorButton"]]],null,5],["close-element"],["text","\\n\\n"],["open-element","div",[]],["static-attr","class","spectator-info-spectators"],["flush-element"],["text","\\n  "],["open-element","ul",[]],["static-attr","class","spectator-info-spectators-list"],["flush-element"],["text","\\n"],["block",["if"],[["get",["hasSpectators"]]],null,2,0],["text","  "],["close-element"],["text","\\n"],["close-element"],["text","\\n\\n"],["comment"," We need to include spectatorsObserver in the layout or Ember will not fire that computed, for shame. "],["text","\\n"],["open-element","div",[]],["static-attr","style","display: none"],["flush-element"],["append",["unknown",["spectatorsObserver"]],false],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["open-element","li",[]],["static-attr","class","spectator-info-spectators-list-item"],["flush-element"],["text","\\n        "],["open-element","span",[]],["static-attr","class","spectator-info-empty"],["flush-element"],["append",["unknown",["tra","custom_game_no_spectators"]],false],["close-element"],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["append",["helper",["spectator-member"],null,[["spectator"],[["get",["spectator"]]]]],false],["text","\\n"]],"locals":["spectator"]},{"statements":[["block",["each"],[["get",["spectatorSummoners"]]],null,1]],"locals":[]},{"statements":[["text","          "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n            "],["open-element","p",[]],["flush-element"],["text","\\n              "],["append",["unknown",["spectateDisabledTooltip"]],false],["text","\\n            "],["close-element"],["text","\\n          "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["uikit-tooltip"],null,[["tooltipPosition","type"],["top","system"]],3]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","custom-game-spectate-button-wrapper"],["flush-element"],["text","\\n      "],["open-element","lol-uikit-flat-button-secondary",[]],["static-attr","class","custom-game-spectate-button"],["dynamic-attr","disabled",["unknown",["spectateButtonDisabled"]],null],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"currentPlayerToSpectator"],null],null],["flush-element"],["text","\\n        "],["append",["unknown",["tra","custom_game_spectate"]],false],["text","\\n"],["block",["if"],[["get",["spectateButtonDisabled"]]],null,4],["text","      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s, i = n(1),
                o = (s = n(122)) && s.__esModule ? s : {
                    default: s
                };
            n(235), e.exports = i.Ember.Component.extend(o.default, {
                layout: n(236),
                tagName: "li",
                classNames: ["spectator-info-spectators-list-item"],
                lobbiesService: i.Ember.inject.service("lobbies"),
                chatService: i.Ember.inject.service("chat"),
                customGamesService: i.Ember.inject.service("custom-games"),
                contextMenuManager: i.UIKit.getContextMenuManager(),
                playerNames: i.playerNames,
                spectator: null,
                spectatorId: i.Ember.computed.alias("spectator.summonerId"),
                spectatorPuuid: i.Ember.computed.alias("spectator.puuid"),
                currentPlayer: i.Ember.computed.alias("customGamesService.currentPlayer"),
                currentPlayerId: i.Ember.computed.alias("currentPlayer.summonerId"),
                currentPlayerIsLeader: i.Ember.computed.alias("lobbiesService.isCurrentPlayerPartyLeader"),
                showManagementTools: i.Ember.computed.and("currentPlayerIsLeader", "spectator"),
                spectators: i.Ember.computed.alias("customGamesService.spectators"),
                isLeader: i.Ember.computed("lobbiesService.currentPartyLeader.summonerId", "spectatorId", (function() {
                    return this.get("spectatorId") === this.get("lobbiesService.currentPartyLeader.summonerId")
                })),
                canInviteOthers: i.Ember.computed("spectators.[]", "spectators.@each.allowedInviteOthers", "spectatorId", (function() {
                    const e = this.get("spectators").find((e => e.summonerId === this.get("spectatorId")));
                    return !!e && e.allowedInviteOthers
                })),
                contextMenuModel: i.Ember.computed("showManagementTools", "currentPlayerId", "spectatorId", "chatService.friends.[]", "canInviteOthers", "tra.ready", "tra.context_menu_kick", "tra.context_menu_friend_request", "tra.context_menu_revoke_invite_privilege", "tra.context_menu_grant_invite_privilege", (function() {
                    return this.get("currentPlayerId") === this.get("spectatorId") ? null : [{
                        action: function() {
                            this.send("kick")
                        },
                        class: "kick",
                        target: this,
                        label: this.get("tra.context_menu_kick"),
                        hidden: !this.get("showManagementTools")
                    }, {
                        action: function() {
                            this.send("sendFriendRequest")
                        },
                        class: "add-friend",
                        target: this,
                        label: this.get("tra.context_menu_friend_request"),
                        hidden: this.get("chatService").isFriend(this.get("spectatorId"))
                    }, {
                        action: function() {
                            this.send("toggleInvitePrivilege")
                        },
                        class: this.get("canInviteOthers") ? "revoke-invite" : "grant-invite",
                        target: this,
                        label: this.get("canInviteOthers") ? this.get("tra.context_menu_revoke_invite_privilege") : this.get("tra.context_menu_grant_invite_privilege"),
                        hidden: !this.get("showManagementTools")
                    }]
                })),
                contextMenu: function(e) {
                    this.contextMenuManager.setMenuItems(this.get("contextMenuModel")), this.contextMenuManager.openAtEvent(e)
                },
                actions: {
                    sendFriendRequest: function() {
                        if (this.get("spectator")) {
                            const e = {
                                direction: "out",
                                puuid: this.get("spectatorPuuid")
                            };
                            this.get("chatService").sendFriendRequest(e)
                        }
                    },
                    kick: async function() {
                        if (!this.get("spectator")) return;
                        const {
                            playerName: e
                        } = await this.get("playerNames").getDisplayNameByPUUID(this.get("spectatorPuuid")), t = this.get("tra").formatString("lobby_kick_confirmation_text", {
                            summonerName: e
                        }), n = this.$(`<lol-uikit-content-block type="dialog-small">\n          <p>${t}</p>\n        </<lol-uikit-content-block>`);
                        if (this.get("currentPlayerIsLeader")) {
                            this.showModal({
                                type: "DialogConfirm",
                                data: {
                                    contents: n,
                                    acceptText: this.get("tra.parties_button_kick"),
                                    declineText: this.get("tra.parties_button_cancel"),
                                    onAccept: () => {
                                        this.get("lobbiesService").removePlayerFromParty(this.get("spectator.summonerId"))
                                    }
                                }
                            }).domNode.classList.add("parties-kick-player-modal")
                        }
                    },
                    toggleInvitePrivilege: function() {
                        if (this.get("showManagementTools")) {
                            const e = this.get("canInviteOthers") ? "revoke-invite" : "grant-invite";
                            this.get("lobbiesService").sendInvitePrivilegeAction(this.get("spectatorId"), e)
                        }
                    }
                }
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "ET+kk6F1",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\custom-game\\\\spectator-info-component\\\\spectator-member-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\custom-game\\\\spectator-info-component\\\\spectator-member-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\custom-game\\\\spectator-info-component\\\\spectator-member-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","spectator-info-container"],["flush-element"],["text","\\n  "],["open-element","span",[]],["static-attr","class","spectator-info-name"],["flush-element"],["text","\\n    "],["append",["helper",["player-name"],null,[["format","gameName","tagLine","summonerName"],["tooltip",["get",["spectator","gameName"]],["get",["spectator","tagLine"]],["get",["spectator","summonerName"]]]]],false],["text","\\n  "],["close-element"],["text","\\n  "],["open-element","span",[]],["flush-element"],["text","\\n"],["block",["if"],[["get",["isLeader"]]],null,1],["text","  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","          "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n            "],["open-element","p",[]],["flush-element"],["text","\\n              "],["append",["unknown",["tra","custom_game_is_leader"]],false],["text","\\n            "],["close-element"],["text","\\n          "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","custom-leader-icon"],["flush-element"],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipPosition","type"],["top","system"]],0],["text","      "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            n(238), e.exports = s.Ember.Component.extend({
                classNames: ["custom-game-teams"],
                layout: n(239),
                customGameService: s.Ember.inject.service("custom-games"),
                playbook: s.Ember.inject.service("tft-playbook"),
                teamSize: s.Ember.computed.alias("customGameService.teamSize"),
                currentPlayer: s.Ember.computed.alias("customGameService.currentPlayer"),
                currentPlayersTeam: s.Ember.computed.alias("customGameService.currentPlayersTeam"),
                init() {
                    this._super(...arguments), this.set("playbook", s.Ember.inject.service("tft-playbook")), this.set("playbookEnabled", s.Ember.computed.alias("playbook.playbookEnabled"))
                },
                team100: s.Ember.computed("customGameService.team100", "customGameService.team100.[]", "customGameService.team100.@each.id", "customGameService.team100.@each.isBotLoading", "teamSize", (function() {
                    const e = this.get("customGameService.team100");
                    return this._addTeamMembers(e)
                })),
                team200: s.Ember.computed("customGameService.team200", "customGameService.team200.[]", "customGameService.team200.@each.id", "customGameService.team200.@each.isBotLoading", "teamSize", (function() {
                    const e = this.get("customGameService.team200");
                    return this._addTeamMembers(e)
                })),
                availableBotsForTeam100: s.Ember.computed("customGameService.availableBotDetails", "customGameService.availableBotDetails.[]", "customGameService.team100", "customGameService.team100.[]", "customGameService.team100.@each.id", (function() {
                    return this._getAvailableBotsForTeam(this.get("customGameService.team100"))
                })),
                availableBotsForTeam200: s.Ember.computed("customGameService.availableBotDetails", "customGameService.availableBotDetails.[]", "customGameService.team200", "customGameService.team200.[]", "customGameService.team200.@each.id", (function() {
                    return this._getAvailableBotsForTeam(this.get("customGameService.team200"))
                })),
                _getAvailableBotsForTeam: function(e) {
                    const t = this.get("customGameService.availableBotDetails");
                    if (!t) return s.Ember.A();
                    const n = s.Ember.A(e.filterBy("isBot", !0)),
                        i = t.reject((e => n.isAny("botChampionId", e.id)));
                    return s.Ember.A(i)
                },
                _addTeamMembers: function(e) {
                    const t = this.get("teamSize"),
                        n = s.Ember.A();
                    return this._addPlayers(n, e), this._addPlaceholders(n, t), n
                },
                _addPlaceholders: function(e, t) {
                    if (e.length >= t) return;
                    let n = !0;
                    for (let i = 0; i < t; i++)
                        if (!e[i]) {
                            const t = s.Ember.Object.create({
                                isPlaceholder: !0,
                                isFirstPlaceholder: n
                            });
                            e[i] = t, n = !1
                        }
                },
                _addPlayers: function(e, t) {
                    t && t.length > 0 && t.forEach((function(t) {
                        e.push(t)
                    }))
                }
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "sqsgLxvW",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\custom-game\\\\custom-teams-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\custom-game\\\\custom-teams-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\custom-game\\\\custom-teams-component\\\\index.js\\" "],["text","\\n"],["block",["unless"],[["get",["isTFT"]]],null,4,1]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["append",["helper",["custom-team-member"],null,[["id","member","currentPlayersTeam","team","availableBotsForTeam","isTFT"],[["get",["team100Member","summonerId"]],["get",["team100Member"]],["get",["currentPlayersTeam"]],1,["get",["availableBotsForTeam100"]],["get",["isTFT"]]]]],false],["text","\\n"]],"locals":["team100Member"]},{"statements":[["open-element","div",[]],["static-attr","class","custom-game-team custom-game-team-tft"],["flush-element"],["text","\\n  "],["open-element","ul",[]],["static-attr","class","custom-game-team-members"],["flush-element"],["text","\\n"],["block",["each"],[["get",["team100"]]],null,0],["text","  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["append",["helper",["custom-team-member"],null,[["id","member","currentPlayersTeam","team","availableBotsForTeam","isTFT"],[["get",["team200Member","summonerId"]],["get",["team200Member"]],["get",["currentPlayersTeam"]],2,["get",["availableBotsForTeam200"]],["get",["isTFT"]]]]],false],["text","\\n"]],"locals":["team200Member"]},{"statements":[["text","      "],["append",["helper",["custom-team-member"],null,[["id","member","currentPlayersTeam","team","availableBotsForTeam","isTFT"],[["get",["team100Member","summonerId"]],["get",["team100Member"]],["get",["currentPlayersTeam"]],1,["get",["availableBotsForTeam100"]],["get",["isTFT"]]]]],false],["text","\\n"]],"locals":["team100Member"]},{"statements":[["open-element","div",[]],["static-attr","class","custom-game-team custom-game-team-one"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","team-header"],["flush-element"],["append",["unknown",["tra","custom_game_team_one"]],false],["close-element"],["text","\\n  "],["open-element","ul",[]],["static-attr","class","custom-game-team-members"],["flush-element"],["text","\\n"],["block",["each"],[["get",["team100"]]],null,3],["text","  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"],["open-element","div",[]],["static-attr","class","custom-game-team custom-game-team-two"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","team-header"],["flush-element"],["append",["unknown",["tra","custom_game_team_two"]],false],["close-element"],["text","\\n  "],["open-element","ul",[]],["static-attr","class","custom-game-team-members"],["flush-element"],["text","\\n"],["block",["each"],[["get",["team200"]]],null,2],["text","  "],["close-element"],["text","\\n"],["close-element"],["text","\\n\\n"]],"locals":[]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1),
                i = l(n(122)),
                o = l(n(74)),
                a = l(n(241));

            function l(e) {
                return e && e.__esModule ? e : {
                    default: e
                }
            }
            n(242);
            const {
                RunMixin: r
            } = s.EmberAddons.EmberLifeline, c = (0, s.emberDataBinding)({
                Ember: s.Ember,
                websocket: (0, s.getProvider)().getSocket(),
                logPrefix: "parties:player-banner:component",
                basePaths: {
                    gameData: "/lol-game-data",
                    ranked: "/lol-ranked"
                },
                boundProperties: {
                    _botChampionDetails: {
                        api: "gameData",
                        path: "/assets/v1/champions/{{botChampionId}}.json"
                    },
                    _rankedData: {
                        api: "ranked",
                        path: "/v1/ranked-stats/{{member.puuid}}"
                    },
                    _profileIcons: {
                        api: "gameData",
                        path: "/assets/v1/summoner-icons.json"
                    }
                }
            }), m = s.UIKit.getModalManager();
            e.exports = s.Ember.Component.extend(r, c, i.default, o.default, a.default, {
                playerNames: s.playerNames,
                tagName: "li",
                classNames: ["custom-game-team-member"],
                classNameBindings: ["isCurrentPlayer:is-current-custom-player", "canHover:is-other-player", "currentPlayerIsLeader:can-moderate", "isLeader:is-custom-leader", "isFriend:is-custom-friend:is-not-custom-friend", "isBot:is-bot"],
                attributeBindings: ["memberType:data-custom-member-type", "id:data-custom-member-summoner-id", "botChampionId:data-bot-champion"],
                layout: n(243),
                id: null,
                member: null,
                currentPlayersTeam: null,
                team: null,
                availableBotsForTeam: null,
                inviteDisabled: !1,
                _friendRequestSent: !1,
                _buttonClickSound: "/fe/lol-parties/sfx-lobby-button-banner-click.ogg",
                _modal: null,
                _joinLocked: !1,
                joinDisabled: s.Ember.computed.or("_joinLocked", "customGameService.preventTeamChanges", "customGameService.isSwitchingTeamsOrSpectating"),
                _isUpdatingBot: !1,
                _isBotLoading: s.Ember.computed("id", "member.isBot", (function() {
                    return this.get("member.isBot") && -1 === this.get("id")
                })),
                updatingBotDisabled: s.Ember.computed.or("_isUpdatingBot", "_isBotLoading", "customGameService.preventTeamChanges"),
                customGameService: s.Ember.inject.service("custom-games"),
                chatService: s.Ember.inject.service("chat"),
                lobbiesService: s.Ember.inject.service("lobbies"),
                tftCosmeticsService: s.Ember.inject.service("tft-cosmetics"),
                playbook: s.Ember.inject.service("tft-playbook"),
                puuid: s.Ember.computed.alias("member.puuid"),
                summonerName: s.Ember.computed.alias("member.summonerName"),
                summonerLevel: s.Ember.computed.alias("member.summonerLevel"),
                accountId: s.Ember.computed.alias("member.accountId"),
                internalName: s.Ember.computed.alias("member.summonerInternalName"),
                botId: s.Ember.computed.alias("member.botId"),
                rankedWins: s.Ember.computed.alias("_rankedStats.wins"),
                rankedTier: s.Ember.computed.alias("_rankedStats.tier"),
                rankedDivision: s.Ember.computed.alias("_rankedStats.division"),
                currentPlayer: s.Ember.computed.alias("customGameService.currentPlayer"),
                isPlaybookEnabled: s.Ember.computed.alias("playbook.playbookEnabled"),
                currentPlayerIsLeader: s.Ember.computed.alias("currentPlayer.isLeader"),
                currentPlayerIsNotLeader: s.Ember.computed.not("currentPlayerIsLeader"),
                isNotCurrentPlayersTeam: s.Ember.computed.not("isCurrentPlayersTeam"),
                isNotCurrentPlayer: s.Ember.computed.not("isCurrentPlayer"),
                isBotOrPlaceholder: s.Ember.computed.or("isBot", "isPlaceholder"),
                isPlayer: s.Ember.computed.not("isBotOrPlaceholder"),
                isPlaceholder: s.Ember.computed.alias("member.isPlaceholder"),
                isFirstPlaceholder: s.Ember.computed.alias("member.isFirstPlaceholder"),
                isRanked: s.Ember.computed.notEmpty("_rankedStats"),
                isLeader: s.Ember.computed.alias("member.isLeader"),
                hasInvitePrivileges: s.Ember.computed.alias("member.allowedInviteOthers"),
                canHover: s.Ember.computed.and("isPlayer", "isNotCurrentPlayer"),
                isNotFriend: s.Ember.computed.not("isFriend"),
                isBot: s.Ember.computed.alias("member.isBot"),
                botChampionId: s.Ember.computed.alias("member.botChampionId"),
                botDifficulty: s.Ember.computed.alias("member.botDifficulty"),
                botsButtonDisabled: s.Ember.computed.or("customGameService.customBotsDisabled", "customGameService.preventTeamChanges", "_availableBotsForCurrentTeamEmpty"),
                _availableBotsForCurrentTeamEmpty: s.Ember.computed.empty("availableBotsForCurrentTeam"),
                currentBot: s.Ember.computed("botChampionId", "botDifficulty", "customGameService.availableBotDetails", "customGameService.availableBotDetails.[]", (function() {
                    this.set("_isUpdatingBot", !1);
                    const e = this.get("customGameService.availableBotDetails");
                    return e ? e.findBy("id", this.get("botChampionId")) : null
                })),
                currentBotDifficulties: s.Ember.computed("botDifficulty", "currentBot", "currentBot.botDifficulties", "currentBot.botDifficulties.[]", (function() {
                    const e = this.get("currentBot.botDifficulties");
                    return e ? (e.forEach((e => {
                        e.difficulty === this.get("botDifficulty") ? s.Ember.set(e, "selected", "selected") : s.Ember.set(e, "selected", null)
                    })), e) : s.Ember.A()
                })),
                availableBotsForCurrentTeam: s.Ember.computed("currentBot", "availableBotsForTeam", "availableBotsForTeam.[]", (function() {
                    const e = s.Ember.A(),
                        t = this.get("currentBot");
                    return t && (s.Ember.set(t, "selected", "selected"), e.pushObject(t)), this.get("availableBotsForTeam").forEach((t => {
                        s.Ember.set(t, "selected", null), e.pushObject(t)
                    })), e.sortBy("name")
                })),
                memberType: s.Ember.computed("isPlayer", "isBot", "isPlaceholder", (function() {
                    let e = "";
                    return this.get("isPlayer") ? e = "player" : this.get("isBot") ? e = "bot" : this.get("isPlaceholder") && (e = "placeholder"), e
                })),
                isCurrentPlayer: s.Ember.computed("currentPlayer", "id", (function() {
                    return this.get("currentPlayer.summonerId") === this.get("id")
                })),
                isCurrentPlayersTeam: s.Ember.computed("team", "currentPlayersTeam", (function() {
                    const e = this.get("currentPlayersTeam");
                    return null !== e && e === this.get("team")
                })),
                isFriend: s.Ember.computed("chatService.friends.[]", "id", (function() {
                    const e = this.get("chatService").get("friends");
                    return !!(e && e.length > 0) && e.isAny("summonerId", this.get("id"))
                })),
                rankedTierAndDivisionText: s.Ember.computed("rankedTier", "rankedDivision", (function() {
                    const e = this.get("rankedTier"),
                        t = this.get("rankedDivision");
                    return s.LeagueTierNames.getFullTierDivisionName(e, t)
                })),
                botName: s.Ember.computed.alias("_botChampionDetails.name"),
                botProfileIconUrl: s.Ember.computed.alias("_botChampionDetails.squarePortraitPath"),
                botDifficultyString: s.Ember.computed("botDifficulty", (function() {
                    return this.get("customGameService").getDifficultyDisplayName(this.get("botDifficulty"))
                })),
                disableInviteButton: function() {
                    this.set("inviteDisabled", !0)
                },
                enableInviteButton: function(e = 0) {
                    this.runTask((() => this.set("inviteDisabled", !1)), e)
                },
                _updateModalShowNone(e) {
                    e && (this._showNoneOption ? e.setAttribute("show-none", "") : e.removeAttribute("show-none"))
                },
                companionIconUrl: s.Ember.computed("companionIconId", (function() {
                    return this.get("tftCosmeticsService.companionIconUrls")[this.get("companionIconId")]
                })),
                _rankedStats: s.Ember.computed("_rankedData.highestRankedEntrySR", (function() {
                    return this.get("_rankedData.highestRankedEntrySR") || null
                })),
                actions: {
                    joinOtherTeam: function() {
                        if (this.get("joinDisabled")) return;
                        this.set("_joinLocked", !0), this.playSound(this._buttonClickSound);
                        const e = this.get("team");
                        e && this.get("customGameService").switchTeams(e)
                    },
                    addBot: function() {
                        const e = this.get("availableBotsForCurrentTeam");
                        if (this.get("updatingBotDisabled") || this.get("botsButtonDisabled") || e.length < 1) return;
                        this.playSound(this._buttonClickSound);
                        const t = Math.floor(Math.random() * e.length),
                            n = e.objectAt(t);
                        this.get("customGameService").addBot(this.get("team"), n.id, n.botDifficulties[0].difficulty)
                    },
                    changeBotChampion: function(e) {
                        e && e.id !== this.get("botChampionId") && !this.get("updatingBotDisabled") && (this.set("_isUpdatingBot", !0), this.get("customGameService").changeBot(this.get("botId"), this.get("team"), e.id, e.botDifficulties[0].difficulty))
                    },
                    changeBotDifficulty: function(e) {
                        this.get("updatingBotDisabled") || e === this.get("botDifficulty") || this.get("_isUpdatingBot") || (this.set("_isUpdatingBot", !0), this.get("customGameService").changeBot(this.get("botId"), this.get("team"), this.get("botChampionId"), e))
                    },
                    toggleInvite: function() {
                        this.playSound(this._buttonClickSound);
                        const e = this.get("member");
                        if (this.get("currentPlayerIsLeader") && !this.get("inviteDisabled")) {
                            this.disableInviteButton();
                            const t = e.allowedInviteOthers ? "revoke-invite" : "grant-invite";
                            this.get("lobbiesService").sendInvitePrivilegeAction(this.get("id"), t), this.enableInviteButton(1e3)
                        }
                    },
                    addFriend: function() {
                        if (this.playSound(this._buttonClickSound), this.get("member")) {
                            const e = {
                                direction: "out",
                                puuid: this.get("puuid")
                            };
                            this.get("chatService").sendFriendRequest(e), this.set("_friendRequestSent", !0)
                        }
                    },
                    kick: async function() {
                        if (this.get("updatingBotDisabled")) return;
                        this.playSound(this._buttonClickSound);
                        const {
                            playerName: e
                        } = await this.get("playerNames").getDisplayNameByPUUID(this.get("puuid")), t = this.get("tra").formatString("lobby_kick_confirmation_text", {
                            summonerName: e
                        }), n = this.$(`<lol-uikit-content-block type="dialog-small">\n          <p>${t}</p>\n        </lol-uikit-content-block>`);
                        this.get("currentPlayerIsLeader") && this.showModal({
                            type: "DialogConfirm",
                            data: {
                                contents: n,
                                acceptText: this.get("tra.parties_button_kick"),
                                declineText: this.get("tra.parties_button_cancel"),
                                onAccept: () => {
                                    this.get("lobbiesService").removePlayerFromParty(this.get("id"))
                                }
                            }
                        })
                    },
                    removeBot: function() {
                        this.get("updatingBotDisabled") || (this.playSound(this._buttonClickSound), this.get("customGameService").removeBot(this.get("botId")))
                    },
                    openLoadoutsModal: function() {
                        this._modal || (this._modal = document.createElement("lol-parties-loadouts-modal")), this._modal.setAttribute("set-name", "tft"), this._modal.setAttribute("types", ["companions", "tft_map_skins", "tft_damage_skins"]), this._modal.setAttribute("active-type", "companions"), this._updateModalShowNone(this._modal), this._modalRoot = m.add({
                            type: "DialogAlert",
                            data: {
                                contents: this._modal,
                                dismissible: !0,
                                dismissibleType: "inside"
                            }
                        })
                    }
                }
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            e.exports = s.Ember.Mixin.create({
                chatParticipants: s.Ember.computed.alias("lobbiesService.chatParticipantsObserver"),
                myChatParticipant: s.Ember.computed("chatParticipants.[]", "chatParticipants.@each.id", "chatParticipants.@each.availability", "chatParticipants.@each.icon", "chatParticipants.@each.lol.companionId", (function() {
                    const e = this.get("chatParticipants");
                    return e ? e.findBy("summonerId", this.get("member.summonerId")) : null
                })),
                _chatIcon: s.Ember.computed.alias("myChatParticipant.icon"),
                _chatAvailability: s.Ember.computed.alias("myChatParticipant.availability"),
                profileIconId: s.Ember.computed("member.summonerIconId", "_chatIcon", (function() {
                    const e = this.get("_chatIcon");
                    return Number.isInteger(e) ? e : this.get("member.summonerIconId")
                })),
                companionIconId: s.Ember.computed("chatParticipants", "lobbiesService.me.lol.companionId", "myChatParticipant.lol.companionId", (function() {
                    const e = this.get("chatParticipants");
                    return Number(e ? this.get("myChatParticipant.lol.companionId") : this.get("lobbiesService.me.lol.companionId"))
                })),
                mapSkinIconId: s.Ember.computed("chatParticipants", "lobbiesService.me.lol.mapSkinId", "myChatParticipant.lol.mapSkinId", (function() {
                    const e = this.get("chatParticipants");
                    return Number(e ? this.get("myChatParticipant.lol.mapSkinId") : this.get("lobbiesService.me.lol.mapSkinId"))
                })),
                damageSkinIconId: s.Ember.computed("chatParticipants", "lobbiesService.me.lol.damageSkinId", "myChatParticipant.lol.damageSkinId", (function() {
                    const e = this.get("chatParticipants");
                    return Number(e ? this.get("myChatParticipant.lol.damageSkinId") : this.get("lobbiesService.me.lol.damageSkinId"))
                })),
                chatIconOverride: s.Ember.computed("myChatParticipant.lol.iconOverride", (function() {
                    return this.get("myChatParticipant.lol.iconOverride")
                })),
                profileIconUrl: s.Ember.computed("profileIconId", "_profileIcons", (function() {
                    const e = "src/images/lobby/player-object-ring-obfuscated.png",
                        t = this.get("_profileIcons"),
                        n = this.get("profileIconId");
                    if (!t || !Number.isInteger(n)) return e;
                    for (const e of t)
                        if (e.id === n) return e.imagePath;
                    return e
                }))
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "LpxNHn26",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\custom-game\\\\custom-teams-component\\\\custom-team-member-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\custom-game\\\\custom-teams-component\\\\custom-team-member-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\custom-game\\\\custom-teams-component\\\\custom-team-member-component\\\\index.js\\" "],["text","\\n"],["comment"," PLACEHOLDER MEMBER "],["text","\\n"],["block",["if"],[["get",["isPlaceholder"]]],null,31],["text","\\n"],["comment"," PLAYER MEMBER "],["text","\\n"],["block",["if"],[["get",["isPlayer"]]],null,25],["text","\\n"],["comment"," BOTS "],["text","\\n"],["block",["if"],[["get",["isBot"]]],null,4]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","            "],["open-element","lol-uikit-dropdown-option",[]],["static-attr","slot","lol-uikit-dropdown-option"],["dynamic-attr","selected",["unknown",["botDifficulty","selected"]],null],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"changeBotDifficulty",["get",["botDifficulty","difficulty"]]],[["on"],["click"]]],null],["flush-element"],["text","\\n              "],["append",["unknown",["botDifficulty","difficultyDisplayName"]],false],["text","\\n            "],["close-element"],["text","\\n"]],"locals":["botDifficulty"]},{"statements":[["text","            "],["open-element","lol-uikit-dropdown-option",[]],["static-attr","slot","lol-uikit-dropdown-option"],["static-attr","class","custom-bot-champions-dropdown-option"],["dynamic-attr","selected",["unknown",["availableBot","selected"]],null],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"changeBotChampion",["get",["availableBot"]]],[["on"],["click"]]],null],["flush-element"],["text","\\n                "],["open-element","div",[]],["static-attr","class","custom-bot-champions-dropdown-option-content"],["flush-element"],["text","\\n                  "],["open-element","div",[]],["static-attr","class","custom-member-icon ui-dropdown-option-only"],["flush-element"],["text","\\n                    "],["open-element","div",[]],["static-attr","class","custom-member-bot-icon"],["flush-element"],["text","\\n                      "],["open-element","img",[]],["static-attr","class","custom-member-bot-icon-img"],["dynamic-attr","src",["concat",[["unknown",["availableBot","botIconUrl"]]]]],["flush-element"],["close-element"],["text","\\n                      "],["open-element","div",[]],["static-attr","class","ring"],["flush-element"],["close-element"],["text","\\n                    "],["close-element"],["text","\\n                  "],["close-element"],["text","\\n                  "],["open-element","div",[]],["static-attr","class","custom-bot-champion-name"],["flush-element"],["text","\\n                    "],["append",["unknown",["availableBot","name"]],false],["text","\\n                  "],["close-element"],["text","\\n                "],["close-element"],["text","\\n            "],["close-element"],["text","\\n"]],"locals":["availableBot"]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","custom-bot-options"],["flush-element"],["text","\\n        "],["open-element","lol-uikit-framed-dropdown",[]],["static-attr","direction","downward"],["static-attr","class","custom-bot-champions-dropdown"],["dynamic-attr","disabled",["unknown",["updatingBotDisabled"]],null],["flush-element"],["text","\\n"],["block",["each"],[["get",["availableBotsForCurrentTeam"]]],null,1],["text","        "],["close-element"],["text","\\n        "],["open-element","lol-uikit-framed-dropdown",[]],["static-attr","class","custom-bot-difficulties-dropdown"],["dynamic-attr","disabled",["unknown",["updatingBotDisabled"]],null],["flush-element"],["text","\\n"],["block",["each"],[["get",["currentBotDifficulties"]]],null,0],["text","        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","            "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n              "],["open-element","p",[]],["flush-element"],["text","\\n                "],["append",["unknown",["tra","custom_game_bot_remove"]],false],["text","\\n              "],["close-element"],["text","\\n            "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","custom-member-info-left"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","custom-info-left-first"],["flush-element"],["text","\\n        "],["open-element","span",[]],["static-attr","class","custom-summoner-level"],["flush-element"],["open-element","hr",[]],["flush-element"],["close-element"],["close-element"],["text","\\n        "],["open-element","span",[]],["static-attr","class","custom-kick-member-button"],["modifier",["action"],[["get",[null]],"removeBot"]],["flush-element"],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipPosition","type"],["top","system"]],3],["text","        "],["close-element"],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","custom-member-icon"],["flush-element"],["text","\\n      "],["comment"," TODO: This is a hacky copy of lol-social-avatar since it does not support champion icons as of this writing, but should just use lol-social-avatar if we can "],["text","\\n      "],["open-element","div",[]],["static-attr","class","custom-member-bot-icon"],["flush-element"],["text","\\n        "],["open-element","img",[]],["static-attr","class","custom-member-bot-icon-img"],["dynamic-attr","data-bot-icon-id",["unknown",["botChampionId"]],null],["dynamic-attr","src",["unknown",["botProfileIconUrl"]],null],["static-attr","draggable","false"],["flush-element"],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","ring"],["flush-element"],["close-element"],["text","\\n      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","custom-member-bot-name"],["flush-element"],["append",["unknown",["botName"]],false],["text"," "],["append",["unknown",["tra","custom_game_bot_name"]],false],["close-element"],["text","\\n  "],["close-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","custom-member-info-right"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","custom-member-bot-skill-level"],["flush-element"],["append",["unknown",["botDifficultyString"]],false],["close-element"],["text","\\n"],["block",["if"],[["get",["currentPlayerIsLeader"]]],null,2],["text","  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","                      "],["append",["unknown",["tra","context_menu_friend_request"]],false],["text","\\n"]],"locals":[]},{"statements":[["text","                      "],["append",["unknown",["tra","custom_game_friend_request_sent"]],false],["text","\\n"]],"locals":[]},{"statements":[["text","                "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n                  "],["open-element","p",[]],["flush-element"],["text","\\n"],["block",["if"],[["get",["_friendRequestSent"]]],null,6,5],["text","                  "],["close-element"],["text","\\n                "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","custom-add-friend"],["flush-element"],["text","\\n        "],["open-element","button",[]],["static-attr","class","custom-add-friend-button"],["dynamic-attr","disabled",["unknown",["_friendRequestSent"]],null],["modifier",["action"],[["get",[null]],"addFriend"]],["flush-element"],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipPosition","type"],["top","system"]],7],["text","        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","                "],["append",["unknown",["tra","grant_invite_privileges_tooltip"]],false],["text","\\n"]],"locals":[]},{"statements":[["text","                "],["append",["unknown",["tra","revoke_invite_privileges_tooltip"]],false],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n            "],["open-element","p",[]],["flush-element"],["text","\\n"],["block",["if"],[["get",["hasInvitePrivileges"]]],null,10,9],["text","            "],["close-element"],["text","\\n          "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","            "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n              "],["open-element","p",[]],["flush-element"],["text","\\n                "],["append",["unknown",["tra","kick_tooltip"]],false],["text","\\n              "],["close-element"],["text","\\n            "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","span",[]],["static-attr","class","custom-kick-member-button custom-kick-member-button-tft"],["modifier",["action"],[["get",[null]],"kick"]],["flush-element"],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipPosition","type"],["top","system"]],12],["text","        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["append",["helper",["tft-playbook-icon"],null,[["class"],["custom-member-playbook-container"]]],false],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["isPlaybookEnabled"]]],null,14],["text","        "],["open-element","lol-uikit-flat-button-secondary",[]],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"openLoadoutsModal"],null],null],["static-attr","class","custom-loadouts-button"],["flush-element"],["text","\\n          "],["append",["unknown",["tra","custom_game_loadouts_button"]],false],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["isCurrentPlayer"]]],null,15]],"locals":[]},{"statements":[["text","          "],["comment"," TODO: normal wins here "],["text","\\n          "],["open-element","span",[]],["static-attr","class","custom-member-info-wins"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["open-element","span",[]],["static-attr","class","custom-member-info-ranked-tier"],["flush-element"],["text","\\n            "],["append",["unknown",["rankedTierAndDivisionText"]],false],["text","\\n          "],["close-element"],["text","\\n          "],["open-element","span",[]],["static-attr","class","custom-member-info-ranked-wins"],["flush-element"],["text","\\n            "],["append",["unknown",["tra","custom_game_wins"]],false],["text"," "],["append",["unknown",["rankedWins"]],false],["text"," "],["append",["unknown",["tra","custom_game_ranked"]],false],["text","\\n          "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","custom-member-info-stats"],["flush-element"],["text","\\n"],["block",["if"],[["get",["isRanked"]]],null,18,17],["text","      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n          "],["open-element","p",[]],["flush-element"],["text","\\n            "],["append",["unknown",["tra","custom_game_is_leader"]],false],["text","\\n          "],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","lol-social-avatar-icon",[]],["dynamic-attr","icon-url",["unknown",["companionIconUrl"]],null],["dynamic-attr","availability",["concat",[["unknown",["_chatAvailability"]]]]],["static-attr","show-availability","true"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","lol-social-avatar-icon",[]],["dynamic-attr","icon-id",["unknown",["profileIconId"]],null],["dynamic-attr","availability",["concat",[["unknown",["_chatAvailability"]]]]],["static-attr","show-availability","true"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","            "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n              "],["open-element","p",[]],["flush-element"],["text","\\n                "],["append",["unknown",["tra","kick_tooltip"]],false],["text","\\n              "],["close-element"],["text","\\n            "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","custom-info-left-first"],["flush-element"],["text","\\n        "],["open-element","span",[]],["static-attr","class","custom-summoner-level"],["flush-element"],["append",["unknown",["summonerLevel"]],false],["close-element"],["text","\\n        "],["open-element","span",[]],["static-attr","class","custom-kick-member-button"],["modifier",["action"],[["get",[null]],"kick"]],["flush-element"],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipPosition","type"],["top","system"]],23],["text","        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["comment"," items in this list are hidden and displayed on hover in styles "],["text","\\n  "],["open-element","div",[]],["static-attr","class","custom-member-info-left"],["flush-element"],["text","\\n"],["block",["unless"],[["get",["isTFT"]]],null,24],["text","    "],["open-element","div",[]],["static-attr","class","custom-member-icon"],["flush-element"],["text","\\n"],["block",["unless"],[["get",["isTFT"]]],null,22,21],["text","    "],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","custom-member-name"],["flush-element"],["text","\\n      "],["append",["helper",["player-name"],null,[["format","puuid","summonerName"],["short",["get",["puuid"]],["get",["summonerName"]]]]],false],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","custom-leader-icon"],["flush-element"],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipPosition","type"],["top","system"]],20],["text","    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","custom-member-info-right"],["flush-element"],["text","\\n"],["block",["unless"],[["get",["isTFT"]]],null,19,16],["text","    "],["open-element","div",[]],["static-attr","class","custom-invite-privileges"],["flush-element"],["text","\\n"],["block",["if"],[["get",["isTFT"]]],null,13],["text","      "],["open-element","button",[]],["dynamic-attr","class",["concat",["custom-invite-privilege-button ",["helper",["if"],[["get",["hasInvitePrivileges"]],"privileges-granted"],null]]]],["modifier",["action"],[["get",[null]],"toggleInvite"]],["flush-element"],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipPosition","type"],["top","system"]],11],["text","      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n"],["block",["if"],[["get",["isNotFriend"]]],null,8],["text","  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","                "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n                  "],["open-element","p",[]],["flush-element"],["text","\\n                    "],["append",["unknown",["tra","custom_game_bot_add_disabled_no_available_bots"]],false],["text","\\n                  "],["close-element"],["text","\\n                "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["uikit-tooltip"],null,[["tooltipPosition","type"],["bottom","system"]],26]],"locals":[]},{"statements":[["text","        "],["open-element","div",[]],["static-attr","class","member-add-bot"],["flush-element"],["text","\\n          "],["open-element","lol-uikit-flat-button-secondary",[]],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"addBot"],null],null],["dynamic-attr","disabled",["unknown",["botsButtonDisabled"]],null],["flush-element"],["text","\\n            "],["append",["unknown",["tra","custom_game_bot_add"]],false],["text","\\n"],["block",["if"],[["get",["botsButtonDisabled"]]],null,27],["text","          "],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","div",[]],["static-attr","class","member-join-other-team"],["flush-element"],["text","\\n          "],["open-element","lol-uikit-flat-button-secondary",[]],["static-attr","class","member-join-other-team-button"],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"joinOtherTeam"],null],null],["dynamic-attr","disabled",["unknown",["joinDisabled"]],null],["flush-element"],["text","\\n            "],["append",["unknown",["tra","custom_game_join"]],false],["text","\\n          "],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","custom-member-info-right custom-placeholder-buttons"],["flush-element"],["text","\\n      "],["comment"," JOIN OTHER TEAM "],["text","\\n"],["block",["if"],[["get",["isNotCurrentPlayersTeam"]]],null,29],["text","      "],["comment"," ADD BOT "],["text","\\n"],["block",["unless"],[["get",["isTFT"]]],null,28],["text","    "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","custom-member-info-left"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","custom-team-member-placeholder member-info-left"],["flush-element"],["text","\\n      "],["append",["unknown",["tra","custom_game_empty"]],false],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n\\n"],["block",["if"],[["get",["isFirstPlaceholder"]]],null,30]],"locals":[]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1),
                i = a(n(74)),
                o = a(n(245));

            function a(e) {
                return e && e.__esModule ? e : {
                    default: e
                }
            }
            n(246);
            const l = new o.default([], {
                keys: [{
                    name: "lobbyName",
                    weight: "1"
                }, {
                    name: "ownerDisplayName",
                    weight: "0.5"
                }]
            });
            e.exports = s.Ember.Component.extend(i.default, {
                layout: n(247),
                classNames: ["custom-game-list"],
                classNameBindings: ["searchString:custom-game-list-searched"],
                customGameListService: s.Ember.inject.service("custom-game-list"),
                customGames: s.Ember.computed.readOnly("customGameListService.customGames"),
                refreshEnabled: !0,
                refreshDisabled: s.Ember.computed.not("refreshEnabled"),
                sortBy: "lobbyName",
                selectedCustomGame: null,
                isSortReversed: !1,
                lobbyNameSorted: !0,
                ownerDisplayNameSorted: !1,
                mapNameSorted: !1,
                _isSelectingCustomGame: !1,
                isNotSearched: s.Ember.computed.empty("searchString"),
                showLobbyNameSorted: s.Ember.computed.and("lobbyNameSorted", "isNotSearched"),
                showOwnerDisplayNameSorted: s.Ember.computed.and("ownerDisplayNameSorted", "isNotSearched"),
                showMapNameSorted: s.Ember.computed.and("mapNameSorted", "isNotSearched"),
                handleWillDestroyElement: s.Ember.on("willDestroyElement", (function() {
                    this.set("customGameListService.selectedCustomGame", null)
                })),
                sortOrder: s.Ember.computed("isSortReversed", (function() {
                    return this.get("isSortReversed") ? "desc" : "asc"
                })),
                sortOrderClass: s.Ember.computed("sortOrder", (function() {
                    return `custom-game-header-${this.get("sortOrder")}`
                })),
                sortDefinition: s.Ember.computed("sortBy", "isSortReversed", (function() {
                    return [`${this.get("sortBy")}:${this.get("sortOrder")}`]
                })),
                filteredCustomGames: s.Ember.computed("customGames.@each.{lobbyName,ownerDisplayName,maxSpectatorSlots,hasPassword}", "shouldShowSpectators", "shouldShowPrivateOnly", "searchString", (function() {
                    const e = this.get("shouldShowSpectators"),
                        t = this.get("shouldShowPrivateOnly"),
                        n = this.get("customGames");
                    if (!n) return;
                    const i = n.filter((n => !(t && !n.get("hasPassword")) && !(e && !n.get("maxSpectatorSlots")))),
                        o = this.get("searchString");
                    return o ? (l.list !== i && l.set(i), s.Ember.A(l.search(o))) : s.Ember.A(i)
                })),
                sortedFilteredCustomGames: s.Ember.computed.sort("filteredCustomGames", "sortDefinition"),
                customGameRenderList: s.Ember.computed("filteredCustomGames", "sortedFilteredCustomGames", "searchString", (function() {
                    return this.get("searchString") ? this.get("filteredCustomGames") : this.get("sortedFilteredCustomGames")
                })),
                clearHeaderFlags: function() {
                    this.set("lobbyNameSorted", !1), this.set("ownerDisplayNameSorted", !1), this.set("mapNameSorted", !1)
                },
                setHeaderFlag: function(e) {
                    const t = this.get("sortOrder");
                    this.clearHeaderFlags(), this.set(`${e}Sorted`, t)
                },
                handleDidInsertElement: s.Ember.on("didInsertElement", (function() {
                    this.get("customGameListService").refreshGameList()
                })),
                actions: {
                    sort: function(e) {
                        this.get("sortBy") === e ? this.toggleProperty("isSortReversed") : this.set("isSortReversed", !1), this.set("sortBy", e), this.setHeaderFlag(e)
                    },
                    selectCustomGame: function(e) {
                        this.get("_isSelectingCustomGame") || (this.set("_isSelectingCustomGame", !0), this.set("selectedCustomGame", e), this.set("customGameListService.selectedCustomGame", e), this.set("_isSelectingCustomGame", !1))
                    },
                    joinSelectedCustomGame: function(e = {
                        spectator: !1
                    }) {
                        if (this.get("_isSelectingCustomGame")) return;
                        const t = this.get("selectedCustomGame.id"),
                            n = this.get("selectedCustomGame.partyId"),
                            s = this.get("selectedCustomGame.hasPassword"),
                            i = {
                                spectator: e.spectator,
                                hasPassword: s
                            };
                        t ? i.id = t : i.partyId = n, this.get("customGameListService").joinCustomGame(i).then((() => {
                            this.isDestroying || this.isDestroyed || this.get("customGameListService").triggerShowParty()
                        }))
                    },
                    refresh: function() {
                        this.get("refreshEnabled") && (this.playSound("/fe/lol-uikit/sfx-uikit-text-click-small.ogg"), this.set("refreshEnabled", !1), s.bluebird.all([this.get("customGameListService").refreshGameList(), s.bluebird.delay(500)]).then((() => {
                            this.isDestroying || this.isDestroyed || this.set("refreshEnabled", !0)
                        })))
                    }
                }
            })
        }, function(e) {
            ! function(t) {
                "use strict";

                function n() {
                    console.log.apply(console, arguments)
                }
                var s = {
                    id: null,
                    caseSensitive: !1,
                    include: [],
                    shouldSort: !0,
                    searchFn: a,
                    sortFn: function(e, t) {
                        return e.score - t.score
                    },
                    getFn: function e(t, n, s) {
                        var i, a, l, r, c, m;
                        if (n) {
                            if (-1 !== (l = n.indexOf(".")) ? (i = n.slice(0, l), a = n.slice(l + 1)) : i = n, null != (r = t[i]))
                                if (a || "string" != typeof r && "number" != typeof r)
                                    if (o(r))
                                        for (c = 0, m = r.length; c < m; c++) e(r[c], a, s);
                                    else a && e(r, a, s);
                            else s.push(r)
                        } else s.push(t);
                        return s
                    },
                    keys: [],
                    verbose: !1,
                    tokenize: !1,
                    matchAllTokens: !1,
                    tokenSeparator: / +/g,
                    minMatchCharLength: 1,
                    findAllMatches: !1
                };

                function i(e, t) {
                    var n;
                    for (n in this.list = e, this.options = t = t || {}, s) s.hasOwnProperty(n) && ("boolean" == typeof s[n] ? this.options[n] = n in t ? t[n] : s[n] : this.options[n] = t[n] || s[n])
                }

                function o(e) {
                    return "[object Array]" === Object.prototype.toString.call(e)
                }

                function a(e, t) {
                    t = t || {}, this.options = t, this.options.location = t.location || a.defaultOptions.location, this.options.distance = "distance" in t ? t.distance : a.defaultOptions.distance, this.options.threshold = "threshold" in t ? t.threshold : a.defaultOptions.threshold, this.options.maxPatternLength = t.maxPatternLength || a.defaultOptions.maxPatternLength, this.pattern = t.caseSensitive ? e : e.toLowerCase(), this.patternLen = e.length, this.patternLen <= this.options.maxPatternLength && (this.matchmask = 1 << this.patternLen - 1, this.patternAlphabet = this._calculatePatternAlphabet())
                }
                i.VERSION = "2.7.3", i.prototype.set = function(e) {
                    return this.list = e, e
                }, i.prototype.search = function(e) {
                    return this.options.verbose && n("\nSearch term:", e, "\n"), this.pattern = e, this.results = [], this.resultMap = {}, this._keyMap = null, this._prepareSearchers(), this._startSearch(), this._computeScore(), this._sort(), this._format()
                }, i.prototype._prepareSearchers = function() {
                    var e = this.options,
                        t = this.pattern,
                        n = e.searchFn,
                        s = t.split(e.tokenSeparator),
                        i = 0,
                        o = s.length;
                    if (this.options.tokenize)
                        for (this.tokenSearchers = []; i < o; i++) this.tokenSearchers.push(new n(s[i], e));
                    this.fullSeacher = new n(t, e)
                }, i.prototype._startSearch = function() {
                    var e, t, n, s, i = this.options.getFn,
                        o = this.list,
                        a = o.length,
                        l = this.options.keys,
                        r = l.length,
                        c = null;
                    if ("string" == typeof o[0])
                        for (n = 0; n < a; n++) this._analyze("", o[n], n, n);
                    else
                        for (this._keyMap = {}, n = 0; n < a; n++)
                            for (c = o[n], s = 0; s < r; s++) {
                                if ("string" != typeof(e = l[s])) {
                                    if (t = 1 - e.weight || 1, this._keyMap[e.name] = {
                                            weight: t
                                        }, e.weight <= 0 || e.weight > 1) throw new Error("Key weight has to be > 0 and <= 1");
                                    e = e.name
                                } else this._keyMap[e] = {
                                    weight: 1
                                };
                                this._analyze(e, i(c, e, []), c, n)
                            }
                }, i.prototype._analyze = function(e, t, s, i) {
                    var a, l, r, c, m, u, d, p, h, g, b, f, y, _, v, S = this.options,
                        E = !1;
                    if (null != t) {
                        l = [];
                        var x = 0;
                        if ("string" == typeof t) {
                            if (a = t.split(S.tokenSeparator), S.verbose && n("---------\nKey:", e), this.options.tokenize) {
                                for (_ = 0; _ < this.tokenSearchers.length; _++) {
                                    for (p = this.tokenSearchers[_], S.verbose && n("Pattern:", p.pattern), h = [], f = !1, v = 0; v < a.length; v++) {
                                        g = a[v];
                                        var k = {};
                                        (b = p.search(g)).isMatch ? (k[g] = b.score, E = !0, f = !0, l.push(b.score)) : (k[g] = 1, this.options.matchAllTokens || l.push(1)), h.push(k)
                                    }
                                    f && x++, S.verbose && n("Token scores:", h)
                                }
                                for (c = l[0], u = l.length, _ = 1; _ < u; _++) c += l[_];
                                c /= u, S.verbose && n("Token score average:", c)
                            }
                            d = this.fullSeacher.search(t), S.verbose && n("Full text score:", d.score), m = d.score, void 0 !== c && (m = (m + c) / 2), S.verbose && n("Score average:", m), y = !this.options.tokenize || !this.options.matchAllTokens || x >= this.tokenSearchers.length, S.verbose && n("Check Matches", y), (E || d.isMatch) && y && ((r = this.resultMap[i]) ? r.output.push({
                                key: e,
                                score: m,
                                matchedIndices: d.matchedIndices
                            }) : (this.resultMap[i] = {
                                item: s,
                                output: [{
                                    key: e,
                                    score: m,
                                    matchedIndices: d.matchedIndices
                                }]
                            }, this.results.push(this.resultMap[i])))
                        } else if (o(t))
                            for (_ = 0; _ < t.length; _++) this._analyze(e, t[_], s, i)
                    }
                }, i.prototype._computeScore = function() {
                    var e, t, s, i, o, a, l, r, c = this._keyMap,
                        m = this.results;
                    for (this.options.verbose && n("\n\nComputing score:\n"), e = 0; e < m.length; e++) {
                        for (s = 0, o = (i = m[e].output).length, l = 1, t = 0; t < o; t++) r = i[t].score * (a = c ? c[i[t].key].weight : 1), 1 !== a ? l = Math.min(l, r) : (s += r, i[t].nScore = r);
                        m[e].score = 1 === l ? s / o : l, this.options.verbose && n(m[e])
                    }
                }, i.prototype._sort = function() {
                    var e = this.options;
                    e.shouldSort && (e.verbose && n("\n\nSorting...."), this.results.sort(e.sortFn))
                }, i.prototype._format = function() {
                    var e, t, s, i, o = this.options,
                        a = o.getFn,
                        l = [],
                        r = this.results,
                        c = o.include;
                    for (o.verbose && n("\n\nOutput:\n\n", r), s = o.id ? function(e) {
                            r[e].item = a(r[e].item, o.id, [])[0]
                        } : function() {}, i = function(e) {
                            var t, n, s, i, o, a = r[e];
                            if (c.length > 0) {
                                if (t = {
                                        item: a.item
                                    }, -1 !== c.indexOf("matches"))
                                    for (s = a.output, t.matches = [], n = 0; n < s.length; n++) o = {
                                        indices: (i = s[n]).matchedIndices
                                    }, i.key && (o.key = i.key), t.matches.push(o); - 1 !== c.indexOf("score") && (t.score = r[e].score)
                            } else t = a.item;
                            return t
                        }, e = 0, t = r.length; e < t; e++) s(e), l.push(i(e));
                    return l
                }, a.defaultOptions = {
                    location: 0,
                    distance: 100,
                    threshold: .6,
                    maxPatternLength: 32
                }, a.prototype._calculatePatternAlphabet = function() {
                    var e = {},
                        t = 0;
                    for (t = 0; t < this.patternLen; t++) e[this.pattern.charAt(t)] = 0;
                    for (t = 0; t < this.patternLen; t++) e[this.pattern.charAt(t)] |= 1 << this.pattern.length - t - 1;
                    return e
                }, a.prototype._bitapScore = function(e, t) {
                    var n = e / this.patternLen,
                        s = Math.abs(this.options.location - t);
                    return this.options.distance ? n + s / this.options.distance : s ? 1 : n
                }, a.prototype.search = function(e) {
                    var t, n, s, i, o, a, l, r, c, m, u, d, p, h, g, b, f, y, _, v, S, E, x, k = this.options;
                    if (e = k.caseSensitive ? e : e.toLowerCase(), this.pattern === e) return {
                        isMatch: !0,
                        score: 0,
                        matchedIndices: [
                            [0, e.length - 1]
                        ]
                    };
                    if (this.patternLen > k.maxPatternLength) {
                        if (_ = !!(y = e.match(new RegExp(this.pattern.replace(k.tokenSeparator, "|")))))
                            for (S = [], t = 0, E = y.length; t < E; t++) x = y[t], S.push([e.indexOf(x), x.length - 1]);
                        return {
                            isMatch: _,
                            score: _ ? .5 : 1,
                            matchedIndices: S
                        }
                    }
                    for (i = k.findAllMatches, o = k.location, s = e.length, a = k.threshold, l = e.indexOf(this.pattern, o), v = [], t = 0; t < s; t++) v[t] = 0;
                    for (-1 != l && (a = Math.min(this._bitapScore(0, l), a), -1 != (l = e.lastIndexOf(this.pattern, o + this.patternLen)) && (a = Math.min(this._bitapScore(0, l), a))), l = -1, b = 1, f = [], m = this.patternLen + s, t = 0; t < this.patternLen; t++) {
                        for (r = 0, c = m; r < c;) this._bitapScore(t, o + c) <= a ? r = c : m = c, c = Math.floor((m - r) / 2 + r);
                        for (m = c, u = Math.max(1, o - c + 1), d = i ? s : Math.min(o + c, s) + this.patternLen, (p = Array(d + 2))[d + 1] = (1 << t) - 1, n = d; n >= u; n--)
                            if ((g = this.patternAlphabet[e.charAt(n - 1)]) && (v[n - 1] = 1), p[n] = (p[n + 1] << 1 | 1) & g, 0 !== t && (p[n] |= (h[n + 1] | h[n]) << 1 | 1 | h[n + 1]), p[n] & this.matchmask && (b = this._bitapScore(t, n - 1)) <= a) {
                                if (a = b, l = n - 1, f.push(l), l <= o) break;
                                u = Math.max(1, 2 * o - l)
                            } if (this._bitapScore(t + 1, o) > a) break;
                        h = p
                    }
                    return {
                        isMatch: l >= 0,
                        score: 0 === b ? .001 : b,
                        matchedIndices: S = this._getMatchedIndices(v)
                    }
                }, a.prototype._getMatchedIndices = function(e) {
                    for (var t, n = [], s = -1, i = -1, o = 0, a = e.length; o < a; o++)(t = e[o]) && -1 === s ? s = o : t || -1 === s || ((i = o - 1) - s + 1 >= this.options.minMatchCharLength && n.push([s, i]), s = -1);
                    return e[o - 1] && o - 1 - s + 1 >= this.options.minMatchCharLength && n.push([s, o - 1]), n
                }, e.exports = i
            }()
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "kfK8qkg1",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\custom-game-list\\\\custom-game-list-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\custom-game-list\\\\custom-game-list-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\custom-game-list\\\\custom-game-list-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","custom-game-list-header"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","custom-game-list-title"],["flush-element"],["append",["unknown",["tra","custom_game_list_title"]],false],["close-element"],["text","\\n"],["close-element"],["text","\\n"],["open-element","div",[]],["static-attr","class","custom-game-list-subheader"],["flush-element"],["text","\\n"],["block",["uikit-framed-icon"],null,[["onclick","class","borderWidth","disabled"],[["helper",["action"],[["get",[null]],"refresh"],null],"custom-game-list-button-refresh",2,["get",["refreshDisabled"]]]],1],["text","  "],["open-element","div",[]],["static-attr","class","custom-game-list-filters"],["flush-element"],["text","\\n    "],["open-element","lol-uikit-flat-input",[]],["static-attr","class","custom-game-list-search"],["flush-element"],["text","\\n      "],["append",["helper",["input"],null,[["type","name","maxlength","placeholder","disabled","value","autocomplete","autocorrect","autocapitalize","spellcheck"],["search","search","48",["get",["tra","custom_game_list_search_placeholder"]],false,["get",["searchString"]],"off","off","off",false]]],false],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","lol-uikit-flat-checkbox",[]],["static-attr","class","custom-game-list-filters-checkbox"],["flush-element"],["text","\\n      "],["append",["helper",["input"],null,[["slot","id","type","checked"],["input","custom-game-filter-spectators","checkbox",["get",["shouldShowSpectators"]]]]],false],["text","\\n      "],["open-element","label",[]],["static-attr","slot","label"],["static-attr","for","custom-game-filter-spectators"],["flush-element"],["append",["unknown",["tra","custom_game_list_spectators_allowed"]],false],["close-element"],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","lol-uikit-flat-checkbox",[]],["static-attr","class","custom-game-list-filters-checkbox"],["flush-element"],["text","\\n      "],["append",["helper",["input"],null,[["slot","id","type","checked"],["input","custom-game-filter-private","checkbox",["get",["shouldShowPrivateOnly"]]]]],false],["text","\\n      "],["open-element","label",[]],["static-attr","slot","label"],["static-attr","for","custom-game-filter-private"],["flush-element"],["append",["unknown",["tra","custom_game_list_private_only"]],false],["close-element"],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n"],["close-element"],["text","\\n\\n"],["open-element","div",[]],["static-attr","class","custom-game-list-body"],["flush-element"],["text","\\n  "],["open-element","table",[]],["static-attr","class","custom-game-list-table"],["flush-element"],["text","\\n    "],["open-element","thead",[]],["static-attr","class","custom-game-list-table-header"],["flush-element"],["text","\\n      "],["open-element","tr",[]],["static-attr","class","custom-game-list-table-header-row"],["flush-element"],["text","\\n        "],["open-element","th",[]],["static-attr","class","custom-game-list-table-header-private"],["flush-element"],["close-element"],["text","\\n"],["text","        "],["open-element","th",[]],["dynamic-attr","class",["concat",["custom-game-list-table-header-name ",["helper",["if"],[["get",["showLobbyNameSorted"]],["get",["sortOrderClass"]],""],null]]]],["modifier",["action"],[["get",[null]],"sort","lobbyName"]],["flush-element"],["append",["unknown",["tra","custom_game_list_header_lobby_name"]],false],["close-element"],["text","\\n        "],["open-element","th",[]],["dynamic-attr","class",["concat",["custom-game-list-table-header-owner ",["helper",["if"],[["get",["showOwnerDisplayNameSorted"]],["get",["sortOrderClass"]],""],null]]]],["modifier",["action"],[["get",[null]],"sort","ownerDisplayName"]],["flush-element"],["append",["unknown",["tra","custom_game_list_header_owner"]],false],["close-element"],["text","\\n        "],["open-element","th",[]],["dynamic-attr","class",["concat",["custom-game-list-table-header-map ",["helper",["if"],[["get",["showMapNameSorted"]],["get",["sortOrderClass"]],""],null]]]],["modifier",["action"],[["get",[null]],"sort","mapName"]],["flush-element"],["append",["unknown",["tra","custom_game_list_header_map"]],false],["close-element"],["text","\\n        "],["open-element","th",[]],["static-attr","class","custom-game-list-table-header-slots"],["flush-element"],["close-element"],["text","\\n        "],["open-element","th",[]],["static-attr","class","custom-game-list-table-header-spectators"],["flush-element"],["close-element"],["text","\\n      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n\\n    "],["open-element","lol-uikit-scrollable",[]],["static-attr","class","custom-game-list-table-scroll"],["static-attr","overflow-masks","enabled"],["flush-element"],["text","\\n      "],["open-element","tbody",[]],["static-attr","class","custom-game-list-table-body"],["flush-element"],["text","\\n"],["block",["each"],[["get",["customGameRenderList"]]],null,0],["text","      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","          "],["append",["helper",["custom-game-row"],null,[["customGame","selectedCustomGame","joinSelectedCustomGame","selectCustomGame"],[["get",["customGame"]],["get",["selectedCustomGame"]],"joinSelectedCustomGame","selectCustomGame"]]],false],["text","\\n"]],"locals":["customGame"]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","custom-game-list-button-icon"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1),
                i = a(n(74)),
                o = a(n(118));

            function a(e) {
                return e && e.__esModule ? e : {
                    default: e
                }
            }
            n(249), e.exports = s.Ember.Component.extend(i.default, {
                layout: n(250),
                classNames: ["custom-game-tournament-code-container"],
                customGameListService: s.Ember.inject.service("custom-game-list"),
                tournamentCodeInput: null,
                tournamentCodeFlatInput: null,
                tournamentCodeInputListener: null,
                tournamentCodeReadyToSubmit: !0,
                tournamentCodeEnabled: s.Ember.computed.and("customGameListService.tournamentShortCodesEnabled", "tournamentCodeReadyToSubmit"),
                tournamentCodeDisabled: s.Ember.computed.not("tournamentCodeEnabled"),
                handleDidInsertElement: s.Ember.on("didInsertElement", (function() {
                    const e = this.element.querySelector("lol-uikit-flat-input.custom-game-list-tournament-code");
                    this.set("tournamentCodeFlatInput", e);
                    const t = e.querySelector("input");
                    this.set("tournamentCodeInput", t);
                    const n = () => {
                        this.checkForValidValue()
                    };
                    t.addEventListener("keyup", n), this.set("tournamentCodeInputListener", n), this.element.removeChild(e)
                })),
                handleWillDestroyElement: s.Ember.on("willDestroyElement", (function() {
                    const e = this.get("tournamentCodeInput"),
                        t = this.get("tournamentCodeInputListener");
                    e && t && e.removeEventListener("keyup", t)
                })),
                tooltipText: s.Ember.computed("tournamentCodeEnabled", "tra.custom_game_list_tournament_code_tooltip", "tra.custom_game_list_tournament_code_disabled_tooltip", (function() {
                    return this.get("tournamentCodeEnabled") ? this.get("tra.custom_game_list_tournament_code_tooltip") : this.get("tra.custom_game_list_tournament_code_disabled_tooltip")
                })),
                click: function() {
                    if (this.playSound("/fe/lol-uikit/sfx-uikit-text-click-small.ogg"), this.get("tournamentCodeDisabled")) return;
                    const e = this.get("tournamentCodeFlatInput"),
                        t = document.createElement("lol-uikit-content-block");
                    t.setAttribute("type", "dialog-small"), t.innerHTML = `<h4>${this.get("tra.custom_game_list_tournament_code_header")}</h4>\n       <hr class="heading-spacer">`, t.appendChild(e);
                    const n = s.UIKit.getModalManager().add({
                        type: "DialogConfirm",
                        data: {
                            contents: t,
                            acceptText: this.get("tra.custom_game_list_tournament_code_join"),
                            declineText: this.get("tra.custom_game_list_tournament_code_cancel"),
                            closeButton: !1
                        }
                    });
                    return n.domNode.classList.add("custom-game-tournament-code-modal"), this.set("tournamentCodeModal", n), this.checkForValidValue(), n.acceptPromise.then((() => {
                        this.joinWithTournamentCode(), this.set("tournamentCodeModal", !1)
                    }), (() => {
                        this.resetInputValue(), this.set("tournamentCodeModal", !1)
                    }))
                },
                inputValue: function() {
                    const e = this.get("tournamentCodeInput");
                    return !(!e || !e.value) && e.value
                },
                resetInputValue: function() {
                    const e = this.get("tournamentCodeInput");
                    e && (e.value = "")
                },
                checkForValidValue: function() {
                    const e = this.get("tournamentCodeModal");
                    if (!e) return;
                    this.inputValue() ? e.enableAcceptButton() : e.disableAcceptButton()
                },
                joinWithTournamentCode: function() {
                    const e = this.inputValue();
                    this.set("tournamentCodeReadyToSubmit", !1), this.get("customGameListService").joinWithTournamentCode(e).then((() => {
                        this.isDestroying || this.isDestroyed || (this.set("tournamentCodeReadyToSubmit", !0), this.get("customGameListService").triggerShowParty())
                    })).catch((e => {
                        this.isDestroying || this.isDestroyed || (this.set("tournamentCodeReadyToSubmit", !0), this.showTournamentCodeError(e))
                    }))
                },
                showTournamentCodeError: function(e) {
                    this.resetInputValue();
                    const t = 438 === e.status ? this.get("tra.custom_game_list_error_438") : this.get("tra.custom_game_list_tournament_code_error_body");
                    o.default.promptJoinErrorModal(t)
                }
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "OxDyKHQk",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\custom-game-tournament-code-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\custom-game-tournament-code-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-select\\\\custom-game-tournament-code-component\\\\index.js\\" "],["text","\\n"],["open-element","button",[]],["static-attr","class","show-tournament-code-entry-modal"],["dynamic-attr","disabled",["unknown",["tournamentCodeDisabled"]],null],["flush-element"],["text"," "],["close-element"],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipPosition","type"],["bottom","system"]],0],["open-element","lol-uikit-flat-input",[]],["static-attr","class","custom-game-list-tournament-code"],["flush-element"],["text","\\n  "],["open-element","input",[]],["static-attr","class","custom-game-list-tournament-code-input"],["static-attr","type","text"],["static-attr","name","search"],["static-attr","maxlength","48"],["static-attr","autocomplete","off"],["static-attr","autocorrect","off"],["static-attr","autocapitalize","off"],["static-attr","spellcheck","false"],["flush-element"],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n    "],["open-element","p",[]],["flush-element"],["text","\\n      "],["append",["unknown",["tooltipText"]],false],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            e.exports = s.Ember.Component.extend({
                customGame: null,
                layout: n(252),
                classNames: ["custom-game-list-table-body-row"],
                classNameBindings: ["isSelected:custom-list-row-selected"],
                tagName: "tr",
                contextMenuManager: s.UIKit.getContextMenuManager(),
                isSelected: s.Ember.computed("selectedCustomGame", "selectedCustomGame.id", "customGame.id", (function() {
                    return this.get("selectedCustomGame.id") === this.get("customGame.id")
                })),
                slotString: s.Ember.computed("customGame.filledPlayerSlots", "customGame.maxPlayerSlots", (function() {
                    return this.get("customGame.filledPlayerSlots") + "/" + this.get("customGame.maxPlayerSlots")
                })),
                spectatorString: s.Ember.computed("customGame.filledSpectatorSlots", "customGame.maxSpectatorSlots", (function() {
                    const e = this.get("customGame.maxSpectatorSlots");
                    return e ? this.get("customGame.filledSpectatorSlots") + "/" + e : "-"
                })),
                isJoinable: s.Ember.computed("customGame.filledPlayerSlots", "customGame.maxPlayerSlots", (function() {
                    return this.get("customGame.filledPlayerSlots") < this.get("customGame.maxPlayerSlots")
                })),
                isSpectateable: s.Ember.computed("customGame.filledSpectatorSlots", "customGame.maxSpectatorSlots", (function() {
                    return this.get("customGame.filledSpectatorSlots") < this.get("customGame.maxSpectatorSlots")
                })),
                click: function() {
                    this.sendAction("selectCustomGame", this.get("customGame"))
                },
                doubleClick: function() {
                    this.sendAction("selectCustomGame", this.get("customGame")), this.joinGame()
                },
                spectateGame: function() {
                    this.sendAction("joinSelectedCustomGame", {
                        spectator: !0
                    })
                },
                joinGame: function() {
                    this.sendAction("joinSelectedCustomGame")
                },
                contextMenu: function(e) {
                    this.sendAction("selectCustomGame", this.get("customGame")), this.contextMenuManager.setMenuItems([{
                        label: this.get("tra.custom_game_join"),
                        action: "joinGame",
                        class: "custom-game-join-game",
                        target: this,
                        disabled: !this.get("isJoinable")
                    }, {
                        label: this.get("tra.custom_game_spectate"),
                        action: "spectateGame",
                        class: "custom-game-spectate-game",
                        target: this,
                        disabled: !this.get("isSpectateable")
                    }]), this.contextMenuManager.openAtEvent(e)
                }
            })
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "0gH1Cn4S",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\custom-game-list\\\\custom-game-row-component\\\\layout.hbs\\" style-path=\\"null\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\custom-game-list\\\\custom-game-row-component\\\\index.js\\" "],["text","\\n"],["open-element","td",[]],["dynamic-attr","class",["concat",["custom-game-list-table-body-private ",["helper",["if"],[["get",["customGame","hasPassword"]],"","custom-lock-hidden"],null]]]],["flush-element"],["close-element"],["text","\\n"],["open-element","td",[]],["static-attr","class","custom-game-list-table-body-name"],["flush-element"],["append",["unknown",["customGame","lobbyName"]],false],["close-element"],["text","\\n"],["open-element","td",[]],["static-attr","class","custom-game-list-table-body-owner"],["flush-element"],["append",["unknown",["customGame","ownerDisplayName"]],false],["close-element"],["text","\\n"],["open-element","td",[]],["static-attr","class","custom-game-list-table-body-map"],["flush-element"],["append",["unknown",["customGame","mapName"]],false],["close-element"],["text","\\n"],["open-element","td",[]],["static-attr","class","custom-game-list-table-body-slots"],["flush-element"],["append",["unknown",["slotString"]],false],["close-element"],["text","\\n"],["open-element","td",[]],["static-attr","class","custom-game-list-table-body-spectators"],["flush-element"],["append",["unknown",["spectatorString"]],false],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1),
                i = l(n(162)),
                o = (n(18), n(15)),
                a = l(n(16));

            function l(e) {
                return e && e.__esModule ? e : {
                    default: e
                }
            }
            n(254), e.exports = i.default.extend({
                classNames: ["tft-lobby"],
                classNameBindings: ["isPair:tft-lobby-pair"],
                layout: n(255),
                platformConfigSingleton: a.default,
                playbookEnabled: !1,
                init() {
                    this._super(...arguments), this.set("playbook", s.Ember.inject.service("tft-playbook")), this.set("playbookEnabled", s.Ember.computed.alias("playbook.playbookEnabled")), this.checkForNormalSwap()
                },
                lobbiesService: s.Ember.inject.service("lobbies"),
                eligibilityService: s.Ember.inject.service("queue-eligibility"),
                pendingInviteCount: s.Ember.computed.alias("lobbiesService.pendingInvites.length"),
                queueId: s.Ember.computed.alias("lobbiesService.queueId"),
                patchNotesUrl: s.Ember.computed.alias("platformConfigSingleton.TftPatchNotesUrl"),
                hasNoPatchNotes: s.Ember.computed.empty("patchNotesUrl"),
                isPair: s.Ember.computed("lobbiesService.queueId", (function() {
                    return o.PAIRS_QUEUE_IDS.includes(this.get("lobbiesService.queueId"))
                })),
                checkForNormalSwap: function() {
                    if (this.get("eligibilityService.isTFTNPEEnabled") && this.get("lobbiesService.isCurrentPlayerPartyLeader") && [o.TFT_NORMAL_QUEUE_ID, o.TFT_NPE_QUEUE_ID].includes(this.get("queueId"))) {
                        const e = this.get("eligibilityService.partyHasNewTFTPlayerWithoutBypass") ? o.TFT_NPE_QUEUE_ID : o.TFT_NORMAL_QUEUE_ID;
                        this.get("queueId") !== e && this.get("eligibilityService").isQueueAvailable(e) && this.get("lobbiesService").createLobbyWithQueueId(e)
                    }
                },
                observePartiesCompositionChange: s.Ember.observer("eligibilityService.partyHasNewTFTPlayerWithoutBypass", "lobbiesService.isCurrentPlayerPartyLeader", (function() {
                    this.checkForNormalSwap()
                })),
                nonSelfCards: s.Ember.computed("otherPartyMembers.[]", "playerPlaceholders.[]", "pendingInviteCount", "isPair", (function() {
                    const e = this.get("otherPartyMembers"),
                        t = this.get("playerPlaceholders"),
                        n = s.Ember.Object.create({
                            left: s.Ember.A(),
                            right: s.Ember.A(),
                            bottom: s.Ember.A()
                        });
                    let i = this.get("isPair") ? 1 : 0;

                    function o(e) {
                        i > 3 ? n.get("bottom").push(e) : i % 2 == 0 ? n.get("left").push(e) : n.get("right").push(e), i++
                    }
                    if (e && e.length > 0)
                        for (let t = 0; t < e.length; t++) o(e[t]);
                    let a = this.get("pendingInviteCount");
                    if (s.lodash.isNumber(a) || (a = 0), t && t.length > 0)
                        for (let e = 0; e < t.length; e++) a > 0 ? (o(s.Ember.Object.create({
                            isInvited: !0
                        })), a--) : o(t[e]);
                    return n
                }))
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "9IZ2Fljb",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-lobby-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-lobby-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-lobby-component\\\\index.js\\" "],["text","\\n"],["block",["lower-section"],null,[["currentPlayer"],[["get",["currentPlayer"]]]],8],["text","\\n"],["open-element","div",[]],["static-attr","style","display: none;"],["flush-element"],["text","\\n  "],["append",["unknown",["invitationsObserver"]],false],["text","\\n"],["close-element"],["text","\\n\\n"],["append",["unknown",["tft-emerald-rank-modal"]],false]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","            "],["append",["helper",["tft-player-card"],null,[["isPlaceholder","isInvited","partyInvitesAllowed","member","isInQueue","selected","showInviteModal","isFullCard"],[["get",["member","isPlaceholder"]],["get",["member","isInvited"]],["get",["partyInvitesAllowed"]],["get",["member"]],["get",["isInQueue"]],["get",["selected"]],"showInviteModal",["get",["isPair"]]]]],false],["text","\\n"]],"locals":["member"]},{"statements":[["text","        "],["open-element","div",[]],["static-attr","class","tft-cards-second-row"],["flush-element"],["text","\\n"],["block",["each"],[["get",["nonSelfCards","bottom"]]],[["key"],["puuid"]],0],["text","        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","            "],["append",["helper",["tft-player-card"],null,[["isPlaceholder","isInvited","partyInvitesAllowed","member","isInQueue","selected","showInviteModal","isFullCard"],[["get",["member","isPlaceholder"]],["get",["member","isInvited"]],["get",["partyInvitesAllowed"]],["get",["member"]],["get",["isInQueue"]],["get",["selected"]],"showInviteModal",["get",["isPair"]]]]],false],["text","\\n"]],"locals":["member"]},{"statements":[["text","              "],["append",["helper",["tft-playbook-icon"],null,[["queueId"],[["get",["queueId"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","            "],["append",["helper",["tft-player-card"],null,[["member","isMe","isInQueue","selected","isFullCard"],[["get",["currentPlayer"]],true,["get",["isInQueue"]],["get",["selected"]],["get",["isPair"]]]]],false],["text","\\n"],["block",["if"],[["get",["playbookEnabled"]]],null,3]],"locals":[]},{"statements":[["text","              "],["append",["helper",["tft-player-card"],null,[["isInvited","isPlaceholder","partyInvitesAllowed","member","isInQueue","selected","showInviteModal","isFullCard"],[["get",["member","isInvited"]],["get",["member","isPlaceholder"]],["get",["partyInvitesAllowed"]],["get",["member"]],["get",["isInQueue"]],["get",["selected"]],"showInviteModal",["get",["isPair"]]]]],false],["text","\\n"]],"locals":["member"]},{"statements":[["text","          "],["open-element","div",[]],["static-attr","class","tft-cards-first-row-left"],["flush-element"],["text","\\n"],["block",["each"],[["get",["nonSelfCards","left"]]],[["key"],["puuid"]],5],["text","          "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","tft-cards-container"],["flush-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","tft-cards-first-row"],["flush-element"],["text","\\n"],["block",["unless"],[["get",["isPair"]]],null,6],["text","        "],["open-element","div",[]],["static-attr","class","tft-cards-first-row-middle"],["flush-element"],["text","\\n"],["block",["if"],[["get",["currentPlayer"]]],null,4],["text","        "],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","tft-cards-first-row-right"],["flush-element"],["text","\\n"],["block",["each"],[["get",["nonSelfCards","right"]]],[["key"],["puuid"]],2],["text","        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n"],["block",["unless"],[["get",["isPair"]]],null,1],["text","    "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","\\n  "],["open-element","div",[]],["static-attr","class","upper-right-container"],["flush-element"],["text","\\n    "],["append",["unknown",["disband-countdown"]],false],["text","\\n  "],["close-element"],["text","\\n\\n"],["block",["if"],[["get",["inParty"]]],null,7],["text","\\n  "],["append",["helper",["parties-footer-notifications"],null,[["positionError","positionWarning","readyWarning","readyWarningTooltip","premadeSizeAllowed","allowablePremadeSizes","currentPartySize","isCurrentPlayerPartyLeader","shouldShowBetaWatermark"],[["get",["positionError"]],["get",["positionWarning"]],["get",["readyWarning"]],["get",["readyWarningTooltip"]],["get",["lobbiesService","premadeSizeAllowed"]],["get",["lobbiesService","allowablePremadeSizes"]],["get",["lobbiesService","currentPartySize"]],["get",["isCurrentPlayerPartyLeader"]],false]]],false],["text","\\n\\n  "],["append",["helper",["tft-footer"],null,[["showingState","selected","readyWarning"],[["get",["showingState"]],["get",["selected"]],["get",["readyWarning"]]]]],false],["text","\\n\\n  "],["append",["helper",["invite-info-panel"],null,[["showingState","currentPlayerCanInvite","isTFT"],[["get",["showingState"]],["get",["currentPlayerCanInvite"]],true]]],false],["text","\\n\\n  "],["open-element","div",[]],["static-attr","class","parties-chat-room"],["flush-element"],["text","\\n    "],["open-element","lol-social-chat-room",[]],["static-attr","type","lobby"],["static-attr","disabled-when-connecting",""],["flush-element"],["close-element"],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1),
                i = m(n(74)),
                o = m(n(122)),
                a = m(n(143)),
                l = m(n(132)),
                r = m(n(16)),
                c = m(n(27));

            function m(e) {
                return e && e.__esModule ? e : {
                    default: e
                }
            }
            n(257);
            const {
                RunMixin: u
            } = s.EmberAddons.EmberLifeline, d = "QUEUE_DODGER", p = "LEAVER_BUSTED", h = "LEAVER_BUSTER_QUEUE_LOCKOUT", g = s.Ember.Object.extend(s.Ember.PromiseProxyMixin);
            e.exports = s.Ember.Component.extend(u, a.default, i.default, o.default, l.default, {
                classNames: ["tft-footer-container"],
                layout: n(258),
                _notifiedSearchErrorIds: s.Ember.A(),
                matchmakingService: s.Ember.inject.service("matchmaking"),
                lobbiesService: s.Ember.inject.service("lobbies"),
                summonerService: s.Ember.inject.service("summoner"),
                customGamesService: s.Ember.inject.service("custom-games"),
                customGameListService: s.Ember.inject.service("custom-game-list"),
                gameflowService: s.Ember.inject.service("gameflow"),
                patcherService: s.Ember.inject.service("patcher"),
                partySettingsService: s.Ember.inject.service("party-settings"),
                queueEligibilityService: s.Ember.inject.service("queue-eligibility"),
                assetsService: s.Ember.inject.service("assets"),
                platformConfig: r.default,
                animationsEnabled: !1,
                inLobby: s.Ember.computed.alias("lobbiesService.inLobby"),
                currentPartyMembers: s.Ember.computed.alias("lobbiesService.currentPartyMembers"),
                currentPartySize: s.Ember.computed.alias("lobbiesService.currentPartySize"),
                isPremadeRestrictedFives: s.Ember.computed.alias("lobbiesService.isPremadeRestrictedFives"),
                isLeader: s.Ember.computed.alias("lobbiesService.isCurrentPlayerPartyLeader"),
                isNotLeader: s.Ember.computed.not("isLeader"),
                isMember: s.Ember.computed.alias("lobbiesService.isCurrentPlayerPartyMember"),
                displayNotLeaderTooltip: s.Ember.computed.and("inLobby", "isMember", "isNotSearching", "isMatchNotFound"),
                searchState: s.Ember.computed.alias("matchmakingService.searchState"),
                isSearching: s.Ember.computed.alias("matchmakingService.isSearching"),
                isNotSearching: s.Ember.computed.alias("matchmakingService.isNotSearching"),
                isMatchFound: s.Ember.computed.alias("matchmakingService.isMatchFound"),
                isMatchNotFound: s.Ember.computed.alias("matchmakingService.isMatchNotFound"),
                isInQueue: s.Ember.computed.or("isSearching", "isMatchFound"),
                animationLock: s.Ember.computed.alias("selected.animationLock"),
                currentMapId: s.Ember.computed.alias("selected.mapId"),
                searchError: s.Ember.computed.readOnly("matchmakingService.longestSearchError"),
                searchErrorType: s.Ember.computed.readOnly("searchError.errorType"),
                isSearchError: s.Ember.computed.bool("searchError"),
                searchErrorHasTimeRemaining: s.Ember.computed.gt("matchmakingService.longestSearchErrorPenaltyTimeRemaining", 0),
                hasPenaltyTime: s.Ember.computed.and("isSearchError", "searchErrorHasTimeRemaining"),
                timeRemaining: s.Ember.computed.readOnly("matchmakingService.longestSearchErrorPenaltyTimeRemainingFormatted"),
                customGameRewardsDisabledModalElement: null,
                customGameRewardsDisabledReasons: s.Ember.A(),
                customGameChampSelectErrorElement: null,
                customGameChampSelectErrorBody: "",
                customGameChampSelectErrorPlayers: s.Ember.A(),
                hasQueueAvailabilityWarning: s.Ember.computed.alias("lobbiesService.hasQueueAvailabilityWarning"),
                queueAvailabilityWarningTooltip: s.Ember.computed.alias("lobbiesService.queueAvailabilityWarningTooltip"),
                showCustomGameContentWarning: s.Ember.computed("selected.isTrainingGame", "selected.isCreatingCustomGame", "tra.ready", (function() {
                    return this.get("selected.isTrainingGame") && this.get("selected.isCreatingCustomGame") && this.get("tra").exists("custom_game_training_content_warning") && this.get("tra").exists("custom_game_training_rewards_warning") && this.get("tra").exists("custom_game_training_question")
                })),
                hideCustomGameRewardsModal: !0,
                insertListener: s.Ember.on("didInsertElement", (function() {
                    const e = this.element.querySelector("lol-uikit-content-block#custom-games-disabled-reasons");
                    this.set("customGameRewardsDisabledModalElement", e);
                    const t = this.element.querySelector("lol-uikit-content-block#custom-games-champ-select-error");
                    this.set("customGameChampSelectErrorElement", t)
                })),
                penalizedSummonerNameProxy: s.Ember.computed("searchError.penalizedSummonerId", (function() {
                    const e = this.get("searchError.penalizedSummonerId");
                    return e && g.create({
                        promise: s.playerNames.getDisplayNameBySummonerId(e)
                    })
                })),
                penalizedSummonerDisplayName: s.Ember.computed.alias("penalizedSummonerNameProxy.content.playerNameFull"),
                queueErrorMessage: s.Ember.computed("searchErrorType", "penalizedSummonerDisplayName", "tra.ready", "tra.parties_queue_error_queue_dodge_myself_body", "tra.parties_queue_error_queue_dodge_other_body", "tra.parties_queue_error_generic_body", (function() {
                    const e = this.get("searchErrorType"),
                        t = this.get("searchError.penalizedSummonerId"),
                        n = this.get("matchmakingService.currentSummoner.summonerId");
                    switch (e) {
                        case d:
                            return t === n ? this.get("tra.parties_queue_error_queue_dodge_myself_body") : this.translate("parties_queue_error_queue_dodge_other_body", {
                                player: this.get("penalizedSummonerDisplayName")
                            });
                        case h:
                            return t === n ? this.get("tra.parties_queue_error_leaver_buster_lockout_restriction_tooltip_myself_body") : this.translate("parties_queue_error_leaver_buster_lockout_restriction_tooltip_other_body", {
                                player: this.get("penalizedSummonerDisplayName")
                            });
                        default:
                            return this.get("tra.parties_queue_error_generic_body$html")
                    }
                })),
                patcherDisconnected: s.Ember.computed.not("patcherService.isConnected"),
                showingPartyButNotLeader: s.Ember.computed.and("showingState.isShowingParty", "isNotLeader"),
                confirmButtonThrottled: !1,
                confirmButtonNotThrottled: s.Ember.computed.not("confirmButtonThrottled"),
                showingPartyButThrottled: s.Ember.computed.and("showingState.isShowingParty", "isLeader", "confirmButtonThrottled"),
                showingPartyAndInQueue: s.Ember.computed.and("showingState.isShowingParty", "isInQueue"),
                showingPartyAndPenaltyTime: s.Ember.computed("showingState.isShowingParty", "hasPenaltyTime", "customGamesService.isCustomUI", (function() {
                    return this.get("showingState.isShowingParty") && this.get("hasPenaltyTime") && !this.get("customGamesService.isCustomUI")
                })),
                hasRankedDivisionRestriction: s.Ember.computed.alias("queueEligibilityService.hasRankedDivisionRestriction"),
                showingPartyAndRankedDivisionRestriction: s.Ember.computed.and("showingState.isShowingParty", "hasRankedDivisionRestriction"),
                cannotStartMatchmaking: s.Ember.computed.not("lobbiesService.canStartMatchmaking"),
                showingPartyButCannotStartMatchmaking: s.Ember.computed.and("showingState.isShowingParty", "isLeader", "cannotStartMatchmaking"),
                confirmButtonDisabled: s.Ember.computed.or("animationLock", "patcherDisconnected", "selected.isUpdatingSelection", "lobbiesService.hasLobbyRestrictions", "showingPartyButNotLeader", "showingPartyButThrottled", "showingPartyAndRankedDivisionRestriction", "showingPartyAndInQueue", "showingPartyAndPenaltyTime", "showingPartyButCannotStartMatchmaking", "hasQueueAvailabilityWarning"),
                confirmButtonEnabled: s.Ember.computed.not("confirmButtonDisabled"),
                confirmButtonText: s.Ember.computed("tra.ready", "hasPenaltyTime", "isInQueue", "customGamesService.isCustomUI", "customGameListService.confirmButtonText", "tra.parties_button_in_queue", "tra.parties_button_find_match", "tra.parties_button_start_game", (function() {
                    if (this.get("isInQueue")) return this.get("tra.parties_button_in_queue");
                    if (this.get("customGamesService.isCustomUI")) return this.get("tra.parties_button_start_game");
                    if (this.get("hasPenaltyTime")) {
                        this.get("tra.parties_button_blocked");
                        return `${this.get("timeRemaining")}`
                    }
                    return this.get("tra.parties_button_find_match")
                })),
                buttonSounds: {
                    closeHover: "/fe/lol-parties/sfx-lobby-button-quit-hover.ogg",
                    closeClick: "/fe/lol-parties/sfx-lobby-button-quit-click.ogg",
                    confirmHover: "/fe/lol-parties/sfx-lobby-button-find-match-hover.ogg",
                    confirmClick: "/fe/lol-parties/sfx-lobby-button-find-match-click.ogg",
                    teamPlannerClick: "/fe/lol-static-assets/sounds/sfx-uikit-grid-click.ogg",
                    teamPlannerHover: "/fe/lol-static-assets/sounds/sfx-uikit-button-circlegold-hover.ogg"
                },
                searchErrorLeaverBusterQueueDelay: s.Ember.computed.equal("searchErrorType", p),
                searchErrorLeaverBusterQueueLockout: s.Ember.computed.equal("searchErrorType", h),
                confirmButtonShowTooltip: s.Ember.computed("displayNotLeaderTooltip", "hasPenaltyTime", "searchErrorLeaverBusterQueueDelay", "isPremadeRestrictedFives", "isInQueue", "patcherService.isConnected", "hasQueueAvailabilityWarning", "showingState.isShowingGameSelect", "lobbiesService.canStartMatchmaking", "lobbiesService.premadeSizeAllowed", "lobbiesService.hasLobbyRestrictions", "customGamesService.isCustomUI", (function() {
                    return !(!this.get("displayNotLeaderTooltip") && !this.get("isPremadeRestrictedFives") && this.get("patcherService.isConnected")) || (!(!this.get("hasPenaltyTime") || this.get("searchErrorLeaverBusterQueueDelay") || this.get("showingState.isShowingGameSelect") || this.get("customGamesService.isCustomUI")) || (!(this.get("isInQueue") || this.get("lobbiesService.canStartMatchmaking") || !this.get("lobbiesService.premadeSizeAllowed")) || !!this.get("hasQueueAvailabilityWarning")))
                })),
                confirmButtonTooltipText: s.Ember.computed("displayNotLeaderTooltip", "hasPenaltyTime", "queueErrorMessage", "customGamesService.isCustomUI", "isPremadeRestrictedFives", "patcherService.isConnected", "lobbiesService.canStartMatchmaking", "hasQueueAvailabilityWarning", "tra.metadata", "tra.ready", "tra.parties_find_match_wait_for_captain", "tra.parties_start_game_wait_for_captain", "tra.parties_position_select_members_required_tooltip", "tra.parties_patcher_not_connected", "tra.parties_premade_size_five_restriction", "lobbiesService.hasLobbyRestrictions", (function() {
                    let e = "";
                    return this.get("patcherService.isConnected") || (e = s.tra.get("parties_patcher_not_connected")), this.get("hasRankedDivisionRestriction") ? e = this.get("tra.game_select_queue_restriction_party_teamdivisionrestriction") : this.get("isPremadeRestrictedFives") ? e = this.get("tra.parties_premade_size_five_restriction") : this.get("lobbiesService.canStartMatchmaking") || (e = this.get("readyWarning") ? this.get("readyWarning") : this.get("tra.parties_position_select_members_required_tooltip")), this.get("displayNotLeaderTooltip") ? e = this.get("customGamesService.isCustomUI") ? this.get("tra.parties_start_game_wait_for_captain") : this.get("tra.parties_find_match_wait_for_captain") : this.get("hasPenaltyTime") && (e = this.get("queueErrorMessage")), this.get("hasQueueAvailabilityWarning") ? this.get("queueAvailabilityWarningTooltip") : e.replace(/\n/, "<br>")
                })),
                closeButtonDisabled: s.Ember.computed.or("animationLock"),
                closeButtonText: s.Ember.computed("tra.ready", "tra.parties_button_quit", "tra.parties_button_quit_matchmaking", "isInQueue", (function() {
                    return this.get("isInQueue") ? this.get("tra.parties_button_quit_matchmaking") : this.get("tra.parties_button_quit")
                })),
                startMatchmaking: function() {
                    this.get("confirmButtonNotThrottled") && (this.set("confirmButtonThrottled", !0), this.enterQueueTimer = s.Telemetry.startTimer("parties-enter-queue"), this.get("lobbiesService").startMatchmakingSearch().then((() => {
                        this.set("confirmButtonThrottled", !1)
                    }), (e => {
                        c.default.sendTelemetryEvent("feature_error", {
                            id: "PARTIES_START_MATCHMAKING_ATTEMPT_FAILED",
                            severity: "blocker",
                            message: "failed http post request to /lol-lobby/v2/lobby/matchmaking/search"
                        }), this.set("confirmButtonThrottled", !1), this.set("_isTransitioningState", !1), s.logger.warning(`Start matchmaking search failed: ${e}`)
                    })))
                },
                enterQueueTelemetryObserver: s.Ember.observer("isInQueue", (function() {
                    this.get("isInQueue") && this.enterQueueTimer && (s.Telemetry.stopAndRecordTimer(this.enterQueueTimer), delete this.enterQueueTimer)
                })),
                cancelMatchmaking: function() {
                    this.get("isSearching") && this.get("lobbiesService").cancelMatchmakingSearch()
                },
                customTryToEnterChampSelect: function() {
                    return this.checkCustomTeamSizeRestrictions().then((() => this.checkCustomRewards())).then((() => this.customEnterChampSelect())).catch((() => {
                        this.set("_isTransitioningState", !1)
                    }))
                },
                checkCustomTeamSizeRestrictions: function() {
                    const e = this.get("customGamesService"),
                        t = this.get("currentMapId"),
                        n = e.findMinPlayersForMap(t),
                        i = e.get("minPlayers"),
                        o = e.get("currentNumPlayers"),
                        a = n > i ? n : i;
                    let l = "";
                    o < n && (l = this.translate("custom_game_champ_select_error_min_map_player", {
                        numPlayers: o,
                        minRequired: n
                    })), o < i && (l = this.translate("custom_game_champ_select_error_min_player", {
                        minPlayers: a
                    }));
                    const r = s.tra.get("parties_kicked_confirmation_ok");
                    return o < a ? (this.showModal({
                        type: "DialogAlert",
                        data: {
                            contents: l,
                            okText: r
                        }
                    }), Promise.reject()) : Promise.resolve()
                },
                checkCustomRewards: function() {
                    return this.get("hideCustomGameRewardsModal") ? Promise.resolve() : new Promise(((e, t) => {
                        document.activeElement.blur();
                        const n = this.get("customGamesService").getRewardsDisabledReasons();
                        if (!n || 0 === n.length) return void e();
                        const i = [];
                        n.forEach((e => {
                            const t = `tra.custom_game_rewards_disabled_reason_${e.toLowerCase()}`,
                                n = this.get(t);
                            n && n.length > 0 && i.push(n)
                        })), this.set("customGameRewardsDisabledReasons", s.Ember.A(i));
                        const o = this.showModal({
                            type: "DialogConfirm",
                            data: {
                                contents: this.get("customGameRewardsDisabledModalElement"),
                                acceptText: this.get("tra.custom_game_rewards_disabled_confirm_yes"),
                                declineText: this.get("tra.custom_game_rewards_disabled_confirm_no"),
                                onAccept: () => {
                                    e()
                                },
                                onDecline: () => {
                                    t()
                                }
                            }
                        });
                        o.domNode.classList.add("parties-custom-game-rewards-disabled-modal");
                        const a = o.domNode.querySelector(".button-accept");
                        a && a.focus()
                    }))
                },
                enterChampSelectLockTime: 300,
                customEnterChampSelect: function() {
                    return this.set("confirmButtonThrottled", !0), this.get("customGamesService").enterChampSelect().then((() => {
                        this.set("_isTransitioningState", !1), this.runTask((() => {
                            this.set("confirmButtonThrottled", !1)
                        }), this.get("enterChampSelectLockTime"))
                    }), (e => {
                        this.set("confirmButtonThrottled", !1), this.handleCustomGameChampSelectError(e)
                    }))
                },
                handleCustomGameChampSelectError: function(e) {
                    s.logger.warning(`Custom game encountered error when entering champ select: ${e}`);
                    const t = this.determineCustomGameErrorBody(e);
                    this.set("customGameChampSelectErrorBody", t);
                    const n = s.tra.get("parties_kicked_confirmation_ok");
                    this.showModal({
                        type: "DialogAlert",
                        data: {
                            contents: this.get("customGameChampSelectErrorElement"),
                            okText: n
                        }
                    }).domNode.classList.add("parties-custom-game-champ-select-errors-modal"), this.set("_isTransitioningState", !1), this.set("customGamesService.preventTeamChanges", !1)
                },
                aggregateCustomChampSelectErrorReasons: function(e) {
                    if (!e.data) return {};
                    let t = {};
                    if (e.data.failedPlayers && e.data.failedPlayers.length)
                        for (let n = 0; n < e.data.failedPlayers.length; n++) {
                            const s = e.data.failedPlayers[n];
                            t[s.reason] || (t[s.reason] = []), t[s.reason].push(s.summonerName)
                        }
                    return t = this.aggregateCustomChampSelectErrorByStatus(e, t), t
                },
                aggregateCustomChampSelectErrorByStatus: function(e, t) {
                    if (e.data.httpStatus) switch (e.data.httpStatus) {
                        case 435:
                            t.GAME_MODE_NOT_SUPPORTED = !0;
                            break;
                        case 436:
                            let n = !0;
                            if (e.data.message) {
                                const t = e.data.message.match(/([0-9]+) required/);
                                t && (n = t[1])
                            }
                            t.NOT_ENOUGH_PLAYERS_FOR_MAP = n
                    }
                    return t
                },
                determineCustomGameErrorBody: function(e) {
                    let t = "";
                    const n = this.aggregateCustomChampSelectErrorReasons(e);
                    if (this.set("customGameChampSelectErrorPlayers", s.Ember.A()), this.set("showCustomGameMinorRestrictionDetails", !1), n.RANKED_NUM_CHAMPS) t = this.get("tra.custom_game_champ_select_error_min_champions"), this.set("customGameChampSelectErrorPlayers", s.Ember.A(n.RANKED_NUM_CHAMPS));
                    else if (n.MINOR_RESTRICTED || n.PARENTAL_CONTROL_RESTRICTION || n.TIME_PLAYED_RESTRICTION) {
                        t = this.get("tra.custom_game_champ_select_error_generic_player_restriction");
                        const e = s.tra.metadata().locale.id.substr(0, 2).toLowerCase(),
                            i = s.lodash.union(n.MINOR_RESTRICTED, n.PARENTAL_CONTROL_RESTRICTION, n.TIME_PLAYED_RESTRICTION).sort(((t, n) => t.localeCompare(n, e)));
                        this.set("customGameChampSelectErrorPlayers", s.Ember.A(i)), this.set("showCustomGameMinorRestrictionDetails", !0)
                    } else if (n.NOT_ENOUGH_PLAYERS_FOR_MAP)
                        if (!0 === n.NOT_ENOUGH_PLAYERS_FOR_MAP) t = this.get("tra.custom_game_champ_select_error_min_player_unknown_required");
                        else {
                            const e = this.get("customGamesService").get("currentNumPlayers");
                            t = this.translate("custom_game_champ_select_error_min_map_player", {
                                numPlayers: e,
                                minRequired: n.NOT_ENOUGH_PLAYERS_FOR_MAP
                            })
                        }
                    else t = n.GAME_MODE_NOT_SUPPORTED ? this.get("tra.custom_game_champ_select_error_game_mode_unsupported") : this.get("tra.custom_game_champ_select_error_unknown");
                    return t
                },
                leavePartyModal: function() {
                    if (this.get("currentPartySize") > 1) {
                        this.showModal({
                            type: "DialogConfirm",
                            data: {
                                contents: this.get("tra.parties_leave_confirmation_text"),
                                acceptText: this.get("tra.parties_leave_confirmation_yes"),
                                declineText: this.get("tra.parties_leave_confirmation_no"),
                                onAccept: () => {
                                    this.leaveParty()
                                }
                            }
                        }).domNode.classList.add("parties-leave-party-modal")
                    } else this.leaveParty()
                },
                confirmButtonClicked: function() {
                    this.set("_isTransitioningState", !0), this.get("customGamesService.isCustom") ? this.customTryToEnterChampSelect() : this.startMatchmaking()
                },
                _hasClickedCloseDuringTransition: !1,
                handleCloseDuringTransition: s.Ember.computed("_hasClickedCloseDuringTransition", "isSearching", "isMatchFound", "hasPenaltyTime", (function() {
                    (this.get("isSearching") || this.get("isMatchFound") || this.get("hasPenaltyTime")) && (this.set("_isTransitioningState", !1), this.get("_hasClickedCloseDuringTransition") && (this.set("_hasClickedCloseDuringTransition", !1), this.cancelMatchmaking()))
                })),
                lobbyAvailabilityMatchmakingObserver: s.Ember.observer("hasQueueAvailabilityWarning", "isSearching", (function() {
                    this.get("hasQueueAvailabilityWarning") && this.get("isSearching") && this.get("lobbiesService").cancelMatchmakingSearch()
                })),
                closeButtonClicked: function() {
                    this.blurCloseButton(), this.get("isSearching") || this.get("isMatchFound") ? this.cancelMatchmaking() : this.get("_isTransitioningState") ? (this.set("_hasClickedCloseDuringTransition", !0), this.get("lobbiesService").leaveLobby().catch((e => {
                        s.logger.warning(`Leaving lobby failed: ${e}`), this.set("_isTransitioningState", !1)
                    }))) : this.leavePartyModal()
                },
                blurCloseButton: function() {
                    const e = this.element.querySelector("button.close");
                    e && e.blur()
                },
                teamPlannerEnabled: s.Ember.computed("TeamPlanner", (() => s.TeamPlanner && s.TeamPlanner.getEnabled())),
                teamPlannerButtonAssets: s.Ember.computed.alias("assetsService.teamPlannerButtonAssets"),
                actions: {
                    confirmButton: function() {
                        this.confirmButtonClicked()
                    },
                    closeButton: function() {
                        this.closeButtonClicked()
                    },
                    showTeamPlanner: function() {
                        s.TeamPlanner && s.TeamPlanner.show("tft-lobby")
                    }
                }
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "RbBasoBp",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-footer-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-footer-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-footer-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","tft-center-container"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","tft-close-button-container"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","tft-close-button"],["flush-element"],["text","\\n      "],["append",["helper",["generic-button"],null,[["onClick","baseImgPath","overImgPath","downImgPath","onClickSound","onHoverSound"],[["helper",["action"],[["get",[null]],"closeButton"],null],"/fe/lol-parties/button-x.png","/fe/lol-parties/button-x-over.png","/fe/lol-parties/button-x-down.png",["get",["buttonSounds","closeClick"]],["get",["buttonSounds","closeHover"]]]]],false],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","tft-find-match-button-container"],["flush-element"],["text","\\n"],["block",["unless"],[["get",["animationsEnabled"]]],null,9,8],["text","    "],["open-element","div",[]],["static-attr","class","left-wing"],["flush-element"],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","right-wing"],["flush-element"],["close-element"],["text","\\n"],["block",["if"],[["get",["confirmButtonShowTooltip"]]],null,7],["text","  "],["close-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","team-planner-button-container"],["flush-element"],["text","\\n"],["block",["if"],[["get",["teamPlannerEnabled"]]],null,5],["text","  "],["close-element"],["text","\\n"],["close-element"],["text","\\n\\n"],["open-element","span",[]],["dynamic-attr","data-eligibility-observer",["concat",[["unknown",["eligibilityObserver"]]]]],["flush-element"],["close-element"],["text","\\n"],["open-element","span",[]],["dynamic-attr","data-showing-party-observer",["concat",[["unknown",["showingPartyObserver"]]]]],["flush-element"],["close-element"],["text","\\n"],["open-element","span",[]],["dynamic-attr","data-close-transition-observer",["concat",[["unknown",["handleCloseDuringTransition"]]]]],["flush-element"],["close-element"],["text","\\n"],["open-element","div",[]],["static-attr","style","display:none;"],["flush-element"],["text","\\n  "],["open-element","lol-uikit-content-block",[]],["static-attr","class","custom-games-error"],["static-attr","id","custom-games-disabled-reasons"],["static-attr","type","dialog-medium"],["flush-element"],["text","\\n"],["block",["if"],[["get",["showCustomGameContentWarning"]]],null,4,3],["text","  "],["close-element"],["text","\\n  "],["open-element","lol-uikit-content-block",[]],["static-attr","class","custom-games-error"],["static-attr","id","custom-games-champ-select-error"],["static-attr","type","dialog-medium"],["flush-element"],["text","\\n    "],["open-element","h5",[]],["static-attr","class","preserve-case"],["flush-element"],["append",["unknown",["tra","custom_game_champ_select_error_start_game"]],false],["close-element"],["text","\\n    "],["open-element","p",[]],["flush-element"],["append",["unknown",["customGameChampSelectErrorBody"]],false],["close-element"],["text","\\n    "],["open-element","ul",[]],["flush-element"],["text","\\n"],["block",["each"],[["get",["customGameChampSelectErrorPlayers"]]],null,1],["text","    "],["close-element"],["text","\\n"],["block",["if"],[["get",["showCustomGameMinorRestrictionDetails"]]],null,0],["text","  "],["close-element"],["text","\\n"],["close-element"],["text","\\n\\n"],["append",["helper",["matchmaking-errors"],null,[["_isTransitioningState"],[["get",["_isTransitioningState"]]]]],false],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","custom-games-minor-restriction-details"],["flush-element"],["text","\\n        "],["open-element","p",[]],["flush-element"],["append",["unknown",["tra","custom_game_minor_restriction_details_header"]],false],["close-element"],["text","\\n        "],["open-element","ul",[]],["flush-element"],["text","\\n          "],["open-element","li",[]],["flush-element"],["append",["unknown",["tra","custom_game_minor_restriction_details_real_name_auth"]],false],["close-element"],["text","\\n          "],["open-element","li",[]],["flush-element"],["append",["unknown",["tra","custom_game_minor_restriction_details_healthy_time"]],false],["close-element"],["text","\\n          "],["open-element","li",[]],["flush-element"],["append",["unknown",["tra","custom_game_minor_restriction_details_harmful_behavior"]],false],["close-element"],["text","\\n        "],["close-element"],["text","\\n        "],["open-element","p",[]],["flush-element"],["text","\\n          "],["append",["unknown",["tra","custom_game_minor_restriction_details_footer_text_before_link"]],false],["text","\\n          "],["open-element","a",[]],["static-attr","href","http://lol.qq.com/jksh"],["static-attr","target","_blank"],["flush-element"],["text","http://lol.qq.com/jksh"],["close-element"],["text","\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","li",[]],["flush-element"],["append",["get",["player"]],false],["close-element"],["text","\\n"]],"locals":["player"]},{"statements":[["text","        "],["open-element","li",[]],["flush-element"],["append",["get",["reason"]],false],["close-element"],["text","\\n"]],"locals":["reason"]},{"statements":[["text","      "],["open-element","h5",[]],["static-attr","class","preserve-case"],["flush-element"],["append",["unknown",["tra","custom_game_rewards_disabled_header"]],false],["close-element"],["text","\\n      "],["open-element","p",[]],["flush-element"],["append",["unknown",["tra","custom_game_rewards_disabled_question"]],false],["close-element"],["text","\\n      "],["open-element","p",[]],["flush-element"],["append",["unknown",["tra","custom_game_rewards_disabled_reasons_header"]],false],["close-element"],["text","\\n      "],["open-element","ul",[]],["flush-element"],["text","\\n"],["block",["each"],[["get",["customGameRewardsDisabledReasons"]]],null,2],["text","      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","ul",[]],["flush-element"],["text","\\n        "],["open-element","li",[]],["flush-element"],["append",["unknown",["tra","custom_game_training_content_warning"]],false],["close-element"],["text","\\n        "],["open-element","li",[]],["flush-element"],["append",["unknown",["tra","custom_game_training_rewards_warning"]],false],["close-element"],["text","\\n        "],["open-element","br",[]],["flush-element"],["close-element"],["text","\\n        "],["open-element","p",[]],["flush-element"],["append",["unknown",["tra","custom_game_training_question"]],false],["close-element"],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","team-planner-button"],["flush-element"],["text","\\n      "],["append",["helper",["generic-button"],null,[["onClick","baseBgPath","overBgPath","downBgPath","disabledBgPath","baseImgPath","downImgPath","disabledImgPath","onClickSound","onHoverSound"],[["helper",["action"],[["get",[null]],"showTeamPlanner"],null],"/fe/lol-parties/button-bg.png","/fe/lol-parties/button-bg-over.png","/fe/lol-parties/button-bg-down.png","/fe/lol-parties/button-bg-disabled.png",["get",["teamPlannerButtonAssets","team-planner-icon-lobby"]],["get",["teamPlannerButtonAssets","team-planner-icon-clicked"]],["get",["teamPlannerButtonAssets","team-planner-icon-disabled"]],["get",["buttonSounds","teamPlannerClick"]],["get",["buttonSounds","teamPlannerHover"]]]]],false],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n          "],["open-element","p",[]],["flush-element"],["text","\\n            "],["append",["unknown",["confirmButtonTooltipText"]],false],["text","\\n          "],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["uikit-tooltip"],null,[["tooltipPosition","type"],["top","system"]],6]],"locals":[]},{"statements":[["text","      "],["append",["helper",["animated-find-match-button"],null,[["confirmButton","baseImgPath","overImgPath","downImgPath","disabledImgPath","buttonText","onClickSound","onHoverSound","disabledStyle","clickedStyle","isEnabled"],["confirmButton","/fe/lol-static-assets/images/buttons/find_match_default.png","/fe/lol-static-assets/images/buttons/find_match_hover.png","/fe/lol-static-assets/images/buttons/find_match_active.png","/fe/lol-parties/button-find-match-disabled.png",["get",["confirmButtonText"]],["get",["buttonSounds","confirmClick"]],["get",["buttonSounds","confirmHover"]],"color: grey","color: #005A82",["get",["confirmButtonEnabled"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["append",["helper",["generic-button"],null,[["onClick","baseImgPath","overImgPath","downImgPath","disabledImgPath","upText","overText","downText","disabledText","onClickSound","onHoverSound","disabledStyle","isEnabled"],[["helper",["action"],[["get",[null]],"confirmButton"],null],"/fe/lol-parties/button-find-match.png","/fe/lol-parties/button-find-match-over.png","/fe/lol-parties/button-find-match-down.png","/fe/lol-parties/button-find-match-disabled.png",["get",["confirmButtonText"]],["get",["confirmButtonText"]],["get",["confirmButtonText"]],["get",["confirmButtonText"]],["get",["buttonSounds","confirmClick"]],["get",["buttonSounds","confirmHover"]],"color: grey",["get",["confirmButtonEnabled"]]]]],false],["text","\\n"]],"locals":[]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1),
                i = n(260),
                o = l(n(241));
            n(278);
            var a = l(n(5));

            function l(e) {
                return e && e.__esModule ? e : {
                    default: e
                }
            }
            const r = "companion",
                c = "summonerIcon",
                m = (0, s.emberDataBinding)({
                    Ember: s.Ember,
                    websocket: (0, s.getProvider)().getSocket(),
                    logPrefix: "party:tft-player-card",
                    basePaths: {
                        regalia: "/lol-regalia",
                        gameData: "/lol-game-data",
                        ranked: "/lol-ranked",
                        cosmetics: "/lol-cosmetics"
                    },
                    boundProperties: {
                        regaliaHash: {
                            api: "regalia",
                            path: "/v2/summoners/{{summonerId}}/regalia/async"
                        },
                        _rankedData: {
                            api: "ranked",
                            path: "/v1/ranked-stats/{{puuid}}"
                        },
                        _profileIcons: {
                            api: "gameData",
                            path: "/assets/v1/summoner-icons.json"
                        },
                        _companions: {
                            api: "cosmetics",
                            path: "/v1/inventories/tft/companions"
                        }
                    }
                });
            e.exports = s.Ember.Component.extend(m, o.default, {
                layout: n(279),
                classNames: ["tft-player-card"],
                classNameBindings: ["isMe:tft-player-card-self", "isPlaceholder:tft-player-placeholder", "isInvited:tft-player-invited", "isNotReady:tft-player-not-ready", "isFullCard:tft-player-card-full"],
                member: null,
                isMe: !1,
                isInQueue: !1,
                isInvited: !1,
                isPlaceholder: !1,
                lobbiesService: s.Ember.inject.service("lobbies"),
                matchmakingService: s.Ember.inject.service("matchmaking"),
                tftCosmeticsService: s.Ember.inject.service("tft-cosmetics"),
                summonerId: s.Ember.computed.alias("member.summonerId"),
                puuid: s.Ember.computed.alias("member.puuid"),
                summonerLevel: s.Ember.computed.alias("member.summonerLevel"),
                queueType: s.Ember.computed.alias("selected.queue.type"),
                settingsService: s.Ember.inject.service("party-settings"),
                myIconOverride: s.Ember.computed.alias("settingsService.iconOverride"),
                currentQueue: s.Ember.computed("_rankedData.queues.@each.queueType", (function() {
                    const e = this.get("_rankedData.queues"),
                        t = this.get("queueType");
                    if (e && t)
                        for (let n = 0; n < e.length; n++)
                            if (e[n].queueType === t) return e[n];
                    return {}
                })),
                highestRankedQueue: s.Ember.computed("_rankedData.queues.@each.queueType", (function() {
                    return (this.get("_rankedData.queues") || []).find((e => i.QUEUES.RANKED_TFT_QUEUE_TYPES.includes(e.queueType))) || {}
                })),
                isReady: s.Ember.computed.equal("member.ready", !0),
                isSearching: s.Ember.computed.alias("matchmakingService.isSearching"),
                isReadyOrSearching: s.Ember.computed.or("isReady", "isSearching"),
                isNotReady: s.Ember.computed.not("isReady"),
                rankedTier: s.Ember.computed("currentQueue.tier", "isRatedQueue", "highestRankedQueue.tier", (function() {
                    return this.get("isRatedQueue") ? this.get("highestRankedQueue.tier") : this.get("currentQueue.tier")
                })),
                isRanked: s.Ember.computed("rankedTier", "queueType", "isRatedQueue", "highestRankedQueue", (function() {
                    const e = this.get("rankedTier");
                    return (this.get("isRatedQueue") || i.QUEUES.RANKED_TFT_QUEUE_TYPES.includes(this.get("queueType"))) && e && e !== s.LeagueTierNames.getConstants().TIER_NAME_NONE
                })),
                isRatedQueue: s.Ember.computed("queueType", (function() {
                    return i.QUEUES.RATED_TFT_QUEUE_TYPES.includes(this.get("queueType"))
                })),
                isRated: s.Ember.computed("currentQueue", "isRatedQueue", "queueType", (function() {
                    return this.get("isRatedQueue") && "NONE" !== this.get("currentQueue").ratedTier
                })),
                showRanked: s.Ember.computed.and("isRanked", "isReadyOrSearching"),
                showRankedOrRated: s.Ember.computed.or("isRanked", "isRated"),
                rankedDivision: s.Ember.computed("currentQueue.division", "isRatedQueue", "highestRankedQueue.division", (function() {
                    return this.get("isRatedQueue") ? this.get("highestRankedQueue.division") : this.get("currentQueue.division")
                })),
                rankedLeaguePoints: s.Ember.computed("currentQueue.leaguePoints", "isRatedQueue", "highestRankedQueue.leaguePoints", (function() {
                    return this.get("isRatedQueue") ? this.get("highestRankedQueue.leaguePoints") : this.get("currentQueue.leaguePoints")
                })),
                rankedTierAndDivisionText: s.Ember.computed("rankedTier", "rankedDivision", (function() {
                    const e = this.get("rankedTier"),
                        t = this.get("rankedDivision");
                    return "NONE" === e ? "" : s.LeagueTierNames.getFullTierDivisionName(e, t)
                })),
                rankedIcon: s.Ember.computed("rankedTier", (function() {
                    const e = this.get("rankedTier");
                    return s.LeagueTierNames.getRankedMiniRegaliaSvg(e)
                })),
                rankedLeaguePointsText: s.Ember.computed("rankedLeaguePoints", "rankedTier", (function() {
                    if ("NONE" === this.get("rankedTier")) return "";
                    const e = this.get("rankedLeaguePoints");
                    return this.get("tra.formatString")("ranked_lp", {
                        num_points: e
                    })
                })),
                showRated: s.Ember.computed.and("isRated", "isReadyOrSearching"),
                ratedRating: s.Ember.computed.alias("currentQueue.ratedRating"),
                ratedTier: s.Ember.computed.alias("currentQueue.ratedTier"),
                ratiedTierIcon: s.Ember.computed("ratedTier", "queueType", (function() {
                    const e = this.get("ratedTier"),
                        t = this.get("queueType");
                    return s.LeagueTierNames.getTFTRatedMiniBadge(e, t)
                })),
                iconOverride: s.Ember.computed("chatIconOverride", "myIconOverride", (function() {
                    return this.get("isMe") ? this.get("myIconOverride") : this.get("chatIconOverride")
                })),
                hasSummonerIcon: s.Ember.computed("profileIconId", (function() {
                    return this.get("profileIconId") !== i.SOCIAL.DEFAULT_SUMMONER_ICON_ID
                })),
                showIconToggle: s.Ember.computed.and("hasSummonerIcon", "isMe"),
                allIconUrls: s.Ember.computed.alias("tftCosmeticsService.companionIconUrls"),
                hasCompanion: s.Ember.computed("companionIconId", "_companions.defaultItemId", (function() {
                    const e = this.get("_companions.defaultItemId"),
                        t = this.get("companionIconId");
                    return t && t !== e
                })),
                shouldShowSummonerIcon: s.Ember.computed("hasCompanion", "hasSummonerIcon", "iconOverride", (function() {
                    const e = this.get("iconOverride");
                    return !(e === r || !this.get("hasSummonerIcon")) && (e === c || !this.get("hasCompanion"))
                })),
                shouldShowSummonerLevel: s.Ember.computed("shouldShowSummonerIcon", "isMe", "isFullCard", (function() {
                    return this.get("shouldShowSummonerIcon") && (this.get("isMe") || this.get("isFullCard"))
                })),
                displayedIcon: s.Ember.computed("shouldShowSummonerIcon", "allIconUrls", "profileIconUrl", "companionIconId", (function() {
                    const e = this.get("profileIconUrl"),
                        t = this.get("allIconUrls")[this.get("companionIconId")];
                    return this.get("shouldShowSummonerIcon") ? e : t
                })),
                showCosmetics: s.Ember.computed.or("isMe", "isFullCard"),
                shouldEnableRandomize: !0,
                shouldShowRandomize: s.Ember.computed.and("isMe", "tftCosmeticsService.isTFTRandomizeLoadoutsEnabled"),
                isLeader: s.Ember.computed("member.isLeader", "lobbiesService.otherCurrentPartyMembers.@each.isLeader", (function() {
                    const e = this.get("member");
                    return !!e && e.isLeader
                })),
                setIconOverride: function(e) {
                    this.set("myIconOverride", e)
                },
                actions: {
                    showInviteModal: function() {
                        this.get("partyInvitesAllowed") && this.sendAction("showInviteModal")
                    },
                    handleMouseOver: function() {
                        this.get("hasSummonerIcon") && this.get("isMe") && s.Audio.getChannel(a.default.SFX_CHANNEL).playSound(a.default.SFX_URLS.SFX_COMPANION_PICKER_HOVER)
                    },
                    iconClick: function() {
                        if (this.get("hasSummonerIcon") && this.get("isMe")) {
                            const e = this.get("iconOverride");
                            switch (s.Audio.getChannel(a.default.SFX_CHANNEL).playSound(a.default.SFX_URLS.SFX_COMPANION_PICKER_CLICK), e) {
                                case r:
                                    this.setIconOverride(c);
                                    break;
                                case c:
                                    this.setIconOverride(r);
                                    break;
                                default:
                                    this.setIconOverride(this.get("hasCompanion") ? c : r)
                            }
                        }
                    },
                    randomizeLoadout: function() {
                        this.get("shouldEnableRandomize") && (this.get("tftCosmeticsService").randomizeAll(), this.set("shouldEnableRandomize", !1), s.Telemetry.sendCustomData("TFT_randomize_loadouts", {
                            party_id: this.get("lobbiesService.partyId")
                        }), s.Ember.run.later((() => this.set("shouldEnableRandomize", !0)), 1e4))
                    }
                }
            })
        }, (e, t, n) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), Object.defineProperty(t, "PAW", {
                enumerable: !0,
                get: function() {
                    return s.default
                }
            }), Object.defineProperty(t, "PROFILE_PRIVACY", {
                enumerable: !0,
                get: function() {
                    return r.default
                }
            }), Object.defineProperty(t, "QUEUES", {
                enumerable: !0,
                get: function() {
                    return i.default
                }
            }), Object.defineProperty(t, "REWARD_TRACKER", {
                enumerable: !0,
                get: function() {
                    return o.default
                }
            }), Object.defineProperty(t, "SETTINGS", {
                enumerable: !0,
                get: function() {
                    return l.default
                }
            }), Object.defineProperty(t, "SOCIAL", {
                enumerable: !0,
                get: function() {
                    return a.default
                }
            }), Object.defineProperty(t, "TIME", {
                enumerable: !0,
                get: function() {
                    return c.default
                }
            });
            var s = m(n(261)),
                i = m(n(272)),
                o = m(n(273)),
                a = m(n(274)),
                l = m(n(275)),
                r = m(n(276)),
                c = m(n(277));

            function m(e) {
                return e && e.__esModule ? e : {
                    default: e
                }
            }
        }, (e, t, n) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.default = void 0;
            var s = p(n(262)),
                i = p(n(263)),
                o = p(n(264)),
                a = p(n(265)),
                l = p(n(266)),
                r = p(n(267)),
                c = p(n(268)),
                m = p(n(269)),
                u = p(n(270)),
                d = p(n(271));

            function p(e) {
                return e && e.__esModule ? e : {
                    default: e
                }
            }
            var h = {
                COMPONENT_TYPES: s.default,
                CURRENCY_TYPES: i.default,
                INVENTORY_TYPES: o.default,
                MEDIA_TYPES: a.default,
                MEDIA_LOAD_TYPES: l.default,
                MODAL_TYPES: r.default,
                OFFER_PURCHASE_STATES: c.default,
                OFFER_VALIDATION_STATES: m.default,
                SCROLL_LIST_DISPLAY_TYPES: u.default,
                TEMPLATE_TYPES: d.default
            };
            t.default = h
        }, (e, t) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.default = void 0;
            var n = {
                TEXT: "TEXT",
                TITLE_SUBTITLE: "TITLE_SUBTITLE",
                PURCHASE: "PURCHASE",
                MEDIA: "MEDIA",
                IMAGE_CAROUSEL: "IMAGE_CAROUSEL",
                SCROLL_LIST: "SCROLL_LIST",
                VERTICAL_LIST: "VERTICAL_LIST"
            };
            t.default = n
        }, (e, t) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.default = void 0;
            var n = {
                RP: "RP",
                IP: "IP",
                BE: "lol_blue_essence"
            };
            t.default = n
        }, (e, t) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.default = void 0;
            var n = {
                CHAMPION: "CHAMPION",
                CHAMPION_SKIN: "CHAMPION_SKIN",
                WARD_SKIN: "WARD_SKIN",
                BATTLE_BOOST: "BATTLE_BOOST",
                GIFT: "GIFT",
                MYSTERY: "MYSTERY",
                BUNDLES: "BUNDLES",
                SUMMONER_ICON: "SUMMONER_ICON",
                STATSTONE: "STATSTONE"
            };
            t.default = n
        }, (e, t) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.default = void 0;
            var n = {
                SVG: "SVG",
                IMAGE: "IMAGE",
                VIDEO: "VIDEO"
            };
            t.default = n
        }, (e, t) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.default = void 0;
            var n = {
                LOCAL_ASSET: "LOCAL_ASSET",
                EXTERNAL_URL: "EXTERNAL_URL",
                GAME_DATA: "GAME_DATA"
            };
            t.default = n
        }, (e, t) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.default = void 0;
            var n = {
                CHAMPION_MODAL: "CHAMPION_MODAL",
                SKIN_VIEWER_MODAL: "SKIN_VIEWER_MODAL",
                MULTIPLE_PURCHASE_MODAL: "MULTIPLE_PURCHASE_MODAL",
                CHROMA_MODAL: "CHROMA_MODAL",
                CHROMA_BUNDLE_MODAL: "CHROMA_BUNDLE_MODAL",
                SUMMONER_ICON_MODAL: "SUMMONER_ICON_MODAL",
                WARD_SKIN_MODAL: "WARD_SKIN_MODAL",
                SKIN_WITH_DEPENDENCY_MODAL: "SKIN_WITH_DEPENDENCY_MODAL",
                PAW_GENERIC_MODAL: "PAW_GENERIC_MODAL"
            };
            t.default = n
        }, (e, t) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.default = void 0;
            var n = {
                NOT_STARTED: "NOT_STARTED",
                IN_PROGRESS: "IN_PROGRESS",
                SUCCESS: "SUCCESS",
                FAIL: "FAIL"
            };
            t.default = n
        }, (e, t) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.default = void 0;
            var n = {
                NOT_STARTED: "NOT_STARTED",
                IN_PROGRESS: "IN_PROGRESS",
                COMPLETED: "COMPLETED"
            };
            t.default = n
        }, (e, t) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.default = void 0;
            var n = {
                EXPANDED: "EXPANDED",
                COMPACT: "COMPACT",
                DETAILED: "DETAILED"
            };
            t.default = n
        }, (e, t) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.default = void 0;
            var n = {
                LARGE_TWO_COLUMN_LANDSCAPE: "LARGE_TWO_COLUMN_LANDSCAPE"
            };
            t.default = n
        }, (e, t) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.default = void 0;
            const n = "RANKED_SOLO_5x5",
                s = "RANKED_FLEX_SR",
                i = "RANKED_FLEX_TT",
                o = "CHERRY",
                a = "RANKED_TFT",
                l = "RANKED_TFT_DOUBLE_UP",
                r = "RANKED_TFT_TURBO",
                c = "RANKED_TFT_PAIRS",
                m = [n, s],
                u = [...m, i],
                d = [o],
                p = [a, l],
                h = [r, c],
                g = [...p, ...h],
                b = [...u, ...p],
                f = [...h, ...d];
            var y = {
                RANKED_SOLO_5x5_QUEUE_TYPE: n,
                RANKED_FLEX_SR_QUEUE_TYPE: s,
                RANKED_FLEX_TT_QUEUE_TYPE: i,
                RANKED_CHERRY_QUEUE_TYPE: o,
                RANKED_TFT_QUEUE_TYPE: a,
                RANKED_TFT_DOUBLE_UP_QUEUE_TYPE: l,
                RANKED_TFT_TURBO_QUEUE_TYPE: r,
                RANKED_TFT_PAIRS_QUEUE_TYPE: c,
                RANKED_LOL_QUEUE_TYPES: u,
                RANKED_SR_QUEUE_TYPES: m,
                RANKED_TFT_QUEUE_TYPES: p,
                RATED_TFT_QUEUE_TYPES: h,
                RANKED_AND_RATED_TFT_QUEUE_TYPES: g,
                ALL_RANKED_QUEUE_TYPES: b,
                ALL_RATED_QUEUE_TYPES: f,
                ALL_RANKED_AND_RATED_QUEUE_TYPES: [...b, ...f]
            };
            t.default = y
        }, (e, t) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.default = void 0;
            var n = {
                REWARD_TAGS: {
                    INSTANT: "Instant",
                    RARE: "Rare",
                    CHOICE: "Choice",
                    MULTIPLE: "Multiple"
                },
                MILESTONE_STAGES: {
                    COMPLETED: "completed",
                    CURRENT: "current",
                    FUTURE: "future",
                    HOVERING_COMPLETED: "future-completed"
                },
                REWARD_STATE: {
                    LOCKED: "Locked",
                    UNLOCKED: "Unlocked",
                    UNSELECTED: "Unselected",
                    SELECTED: "Selected"
                },
                TRACKER_SIZE: {
                    SMALL: "tracker-size-small",
                    MEDIUM: "tracker-size-medium"
                },
                REWARD_OPTION_HEADER_TYPE: {
                    FREE: "FREE",
                    PREMIUM: "PREMIUM",
                    NONE: "NONE"
                }
            };
            t.default = n
        }, (e, t) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.default = void 0;
            var n = {
                DEFAULT_SUMMONER_ICON_ID: 29
            };
            t.default = n
        }, (e, t) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.default = void 0;
            var n = {
                AUTO: "auto",
                ALWAYS: "always",
                NEVER: "never"
            };
            t.default = n
        }, (e, t) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.default = void 0;
            const n = {
                    UNKNOWN: "UNKNOWN",
                    ENABLED: "ENABLED",
                    DISABLED: "DISABLED"
                },
                s = {
                    PRIVATE: "PRIVATE",
                    PUBLIC: "PUBLIC"
                };
            var i = {
                ProfilePrivacyEnabledState: n,
                ProfilePrivacySetting: s,
                DEFAULT_PROFILE_PRIVACY: {
                    enabledState: n.UNKNOWN,
                    setting: s.PUBLIC
                }
            };
            t.default = i
        }, (e, t) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.default = t.TIME_UNITS = t.TIME_CONVERSIONS = void 0;
            const n = {
                MILLISECONDS: "milliseconds",
                SECONDS: "seconds",
                MINUTES: "minutes",
                HOURS: "hours",
                DAYS: "days",
                WEEKS: "weeks",
                MONTHS: "months",
                YEARS: "years"
            };
            t.TIME_UNITS = n;
            const s = 36e5,
                i = 864e5,
                o = 6048e5,
                a = {
                    MILLISECONDS_IN_A_SECOND: 1e3,
                    MILLISECONDS_IN_A_MINUTE: 6e4,
                    MILLISECONDS_IN_A_HOUR: s,
                    MILLISECONDS_IN_A_DAY: i,
                    MILLISECONDS_IN_A_WEEK: o,
                    MILLISECONDS_IN_A_YEAR: 314496e5
                };
            t.TIME_CONVERSIONS = a;
            var l = {
                TIME_UNITS: n,
                TIME_CONVERSIONS: a
            };
            t.default = l
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "Ltu8e4vb",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-player-card-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-player-card-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-player-card-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","inner-border-1"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","inner-border-2"],["flush-element"],["text","\\n"],["block",["if"],[["get",["isInvited"]]],null,14,13],["text","  "],["close-element"],["text","\\n"],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","        "],["append",["helper",["tft-player-card-cosmetics"],null,[["isMe","companionIconId","mapSkinIconId","damageSkinIconId","isFullCard"],[["get",["isMe"]],["get",["companionIconId"]],["get",["mapSkinIconId"]],["get",["damageSkinIconId"]],["get",["isFullCard"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["open-element","div",[]],["static-attr","class","rank-wrapper"],["flush-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","rated-tier-icon"],["dynamic-attr","style",["concat",["background-image: url(",["unknown",["ratiedTierIcon"]],");"]]],["flush-element"],["close-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","rated-rating"],["flush-element"],["append",["unknown",["ratedRating"]],false],["close-element"],["text","\\n          "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["open-element","span",[]],["static-attr","class","rank-rated-divider"],["flush-element"],["text","/ "],["close-element"]],"locals":[]},{"statements":[["text","          "],["open-element","div",[]],["static-attr","class","rank-wrapper"],["flush-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","rank-icon"],["dynamic-attr","style",["concat",["background-image: url(",["unknown",["rankedIcon"]],");"]]],["flush-element"],["close-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","rank-name"],["flush-element"],["append",["unknown",["rankedTierAndDivisionText"]],false],["text"," "],["append",["unknown",["rankedLeaguePointsText"]],false],["text"," "],["block",["if"],[["get",["showRated"]]],null,2],["close-element"],["text","\\n          "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","div",[]],["static-attr","class","randomize-button"],["flush-element"],["text","\\n          "],["append",["helper",["generic-button"],null,[["onClick","isEnabled","baseBgPath","overBgPath","downBgPath","disabledBgPath","baseImgPath","downImgPath","disabledImgPath"],[["helper",["action"],[["get",[null]],"randomizeLoadout"],null],["get",["shouldEnableRandomize"]],"/fe/lol-parties/button-bg.png","/fe/lol-parties/button-bg-over.png","/fe/lol-parties/button-bg-down.png","/fe/lol-parties/button-bg-disabled.png","/fe/lol-parties/dice.png","/fe/lol-parties/Dice-Pressed.png","/fe/lol-parties/Dice-Disabled.png"]]],false],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["open-element","div",[]],["static-attr","class","level-label"],["flush-element"],["append",["unknown",["summonerLevel"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","                "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n                  "],["open-element","p",[]],["flush-element"],["append",["unknown",["tra","tft_icon_tooltip"]],false],["close-element"],["text","\\n                "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["uikit-tooltip"],null,[["tooltipPosition"],["bottom"]],6]],"locals":[]},{"statements":[["block",["if"],[["get",["isMe"]]],null,7]],"locals":[]},{"statements":[["text","      "],["append",["helper",["player-party-controls"],null,[["member","isLeader","isMe","queueId"],[["get",["member"]],["get",["isLeader"]],["get",["isMe"]],["get",["selected","queueId"]]]]],false],["text","\\n\\n      "],["open-element","div",[]],["static-attr","class","icon-wrapper"],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"iconClick"],null],null],["flush-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","icon-image"],["dynamic-attr","style",["concat",["background-image:url(",["unknown",["displayedIcon"]],");"]]],["flush-element"],["text","\\n        "],["close-element"],["text","\\n        "],["open-element","div",[]],["dynamic-attr","onmouseover",["helper",["action"],[["get",[null]],"handleMouseOver"],null],null],["dynamic-attr","class",["concat",["icon-frame ",["helper",["if"],[["get",["showIconToggle"]],"has-toggle",""],null]," ",["helper",["if"],[["get",["shouldShowSummonerIcon"]],"","no-level"],null]]]],["flush-element"],["text","\\n"],["block",["if"],[["get",["hasSummonerIcon"]]],null,8],["text","        "],["close-element"],["text","\\n                \\n"],["block",["if"],[["get",["shouldShowSummonerLevel"]]],null,5],["text","      "],["close-element"],["text","\\n\\n"],["block",["if"],[["get",["shouldShowRandomize"]]],null,4],["text","\\n      "],["open-element","div",[]],["static-attr","class","current-rank"],["flush-element"],["text","\\n"],["block",["if"],[["get",["showRanked"]]],null,3],["block",["if"],[["get",["showRated"]]],null,1],["text","      "],["close-element"],["text","\\n\\n"],["block",["if"],[["get",["showCosmetics"]]],null,0],["text","    "]],"locals":[]},{"statements":[["text","            "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n              "],["open-element","p",[]],["flush-element"],["text","\\n                "],["append",["unknown",["tra","invite_tooltip"]],false],["text","\\n              "],["close-element"],["text","\\n            "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","div",[]],["static-attr","class","placeholder-invite-button"],["flush-element"],["text","\\n"],["block",["player-management-button"],null,[["type","action"],["invite","showInviteModal"]],10],["text","        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["partyInvitesAllowed"]]],null,11]],"locals":[]},{"statements":[["block",["if"],[["get",["isPlaceholder"]]],null,12,9]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","invited-spinner"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            n(281), e.exports = s.Ember.Component.extend({
                layout: n(282),
                classNames: ["cosmetics-section"],
                classNameBindings: ["isMe:cosmetics-section-self", "isFullCard:cosmetics-section-full"],
                tftCosmeticsService: s.Ember.inject.service("tft-cosmetics"),
                companionIcon: s.Ember.computed("tftCosmeticsService.companionIconUrls", "companionIconId", (function() {
                    return this.get("tftCosmeticsService.companionIconUrls")[this.get("companionIconId") || 1]
                })),
                mapSkinIcon: s.Ember.computed("tftCosmeticsService.mapSkinIconUrls", "mapSkinIconId", (function() {
                    return this.get("tftCosmeticsService.mapSkinIconUrls")[this.get("mapSkinIconId") || 1]
                })),
                damageSkinIcon: s.Ember.computed("tftCosmeticsService.damageSkinIconUrls", "damageSkinIconId", (function() {
                    return this.get("tftCosmeticsService.damageSkinIconUrls")[this.get("damageSkinIconId") || 1]
                }))
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "ztXt8BBI",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-player-card-cosmetics-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-player-card-cosmetics-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-player-card-cosmetics-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","cosmetics-wrapper"],["flush-element"],["text","\\n    "],["open-element","div",[]],["flush-element"],["append",["unknown",["tra","tft_companions_label"]],false],["close-element"],["text","\\n"],["block",["if"],[["get",["isMe"]]],null,5,4],["close-element"],["text","\\n"],["open-element","div",[]],["static-attr","class","cosmetics-wrapper"],["flush-element"],["text","\\n    "],["open-element","div",[]],["flush-element"],["append",["unknown",["tra","tft_map_skins_label"]],false],["close-element"],["text","\\n"],["block",["if"],[["get",["isMe"]]],null,3,2],["close-element"],["text","\\n"],["open-element","div",[]],["static-attr","class","cosmetics-wrapper"],["flush-element"],["text","\\n    "],["open-element","div",[]],["flush-element"],["append",["unknown",["tra","tft_damage_skins_label"]],false],["close-element"],["text","\\n"],["block",["if"],[["get",["isMe"]]],null,1,0],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","        "],["open-element","div",[]],["static-attr","class","loadouts-icon-container"],["dynamic-attr","style",["concat",["background-image: url(",["unknown",["damageSkinIcon"]],");"]]],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","lol-parties-cosmetics-picker",[]],["static-attr","type","tft_damage_skins"],["static-attr","set-name","tft"],["static-attr","orientation","right"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","div",[]],["static-attr","class","loadouts-icon-container"],["dynamic-attr","style",["concat",["background-image: url(",["unknown",["mapSkinIcon"]],");"]]],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","lol-parties-cosmetics-picker",[]],["static-attr","type","tft_map_skins"],["static-attr","set-name","tft"],["static-attr","orientation","left"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","div",[]],["static-attr","class","loadouts-icon-container"],["dynamic-attr","style",["concat",["background-image: url(",["unknown",["companionIcon"]],");"]]],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","lol-parties-cosmetics-picker",[]],["static-attr","type","companions"],["static-attr","set-name","tft"],["static-attr","orientation","left"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            e.exports = s.Ember.Component.extend({
                classNames: ["parties-tft-event-countdown-component"],
                layout: n(284),
                style: n(285),
                activeEventIcon: n(286),
                activeEventBackground: n(287),
                queueId: null,
                tftEventService: s.Ember.inject.service("tft-events"),
                tftEventEnabled: s.Ember.computed.alias("tftEventService.eventEnabled"),
                isTftEventQueue: s.Ember.computed("tftEventService", "tftEventService.eventQueues", "queueId", (function() {
                    return this.get("tftEventService").isTftEventQueue(this.get("queueId"))
                })),
                isActiveEventQueue: s.Ember.computed("isTftEventQueue", "tftEventEnabled", (function() {
                    return this.get("isTftEventQueue") && this.get("tftEventEnabled")
                }))
            })
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "nLRpWMFV",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-event-countdown-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-event-countdown-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-event-countdown-component\\\\index.js\\" "],["text","\\n"],["block",["if"],[["get",["isActiveEventQueue"]]],null,0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","parties-tft-event-countdown-component_iconBackground"],["dynamic-attr","style",["concat",["background-image: url(\'",["unknown",["activeEventBackground"]],"\')"]]],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","parties-tft-event-countdown-component_icon"],["dynamic-attr","style",["concat",["background-image: url(\'",["unknown",["activeEventIcon"]],"\')"]]],["flush-element"],["close-element"],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            "use strict";
            e.exports = n.p + "time-remaining-clock.svg"
        }, (e, t, n) => {
            "use strict";
            e.exports = n.p + "time-remaining-icon-background.svg"
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            n(289), e.exports = s.Ember.Component.extend({
                layout: n(290),
                classNames: ["tft-emerald-rank-modal"],
                lobbiesService: s.Ember.inject.service("lobbies"),
                shouldDisplay: s.Ember.computed.alias("lobbiesService.shouldShowTFTEmeraldModal"),
                actions: {
                    markTFTEmeraldModalAsSeen: function() {
                        this.get("lobbiesService").markTFTEmeraldModalAsSeen()
                    }
                }
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "0jDpQAlx",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-emerald-rank-modal\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-emerald-rank-modal\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-emerald-rank-modal\\\\index.js\\" "],["text","\\n"],["block",["if"],[["get",["shouldDisplay"]]],null,1]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","tft-emerald-rank-modal__contents"],["flush-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","tft-emerald-rank-modal__text-container"],["flush-element"],["text","\\n            "],["open-element","h2",[]],["static-attr","class","tft-emerald-rank-modal__subtitle"],["flush-element"],["append",["unknown",["tra","tft_emerald_rank_modal_subtitle"]],false],["close-element"],["text","\\n            "],["open-element","h1",[]],["static-attr","class","tft-emerald-rank-modal__title"],["flush-element"],["append",["unknown",["tra","tft_emerald_rank_modal_title"]],false],["close-element"],["text","\\n            "],["open-element","p",[]],["static-attr","class","tft-emerald-rank-modal__description"],["flush-element"],["append",["unknown",["tra","tft_emerald_rank_modal_description"]],false],["close-element"],["text","\\n            "],["open-element","a",[]],["dynamic-attr","href",["unknown",["tra","tft_emerald_rank_modal_url"]],null],["static-attr","class","tft-emerald-rank-modal__link"],["static-attr","target","_blank"],["flush-element"],["append",["unknown",["tra","tft_emerald_rank_modal_faq"]],false],["close-element"],["text","\\n        "],["close-element"],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["uikit-modal"],null,[["type","closeButton","dismissible","dismissibleType","onClose","primaryButton","okText"],["DialogAlert",true,true,"inside",["helper",["action"],[["get",[null]],"markTFTEmeraldModalAsSeen"],null],true,["get",["tra","tft_emerald_rank_modal_button"]]]],0]],"locals":[]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s, i = n(1),
                o = (s = n(292)) && s.__esModule ? s : {
                    default: s
                },
                a = n(15),
                l = n(293);
            n(294);
            const {
                RunMixin: r
            } = i.EmberAddons.EmberLifeline;
            e.exports = i.Ember.Component.extend(r, o.default, {
                classNames: ["social-leaderboard-button"],
                layout: n(295),
                isPipShown: !1,
                socialLeaderboardService: i.Ember.inject.service("socialLeaderboard"),
                numFriends: i.Ember.computed("friendsList", (function() {
                    const e = this.get("friendsList");
                    return (0, l.friendsWithSummonerNamesCount)(e)
                })),
                isButtonShown: i.Ember.computed("isSocialLeaderboardEnabled", "queueType", (function() {
                    const e = this.get("isSocialLeaderboardEnabled"),
                        t = this.get("queueType");
                    return e && this.isQueueEnabledForSocialLeaderboard(t)
                })),
                createFlyout() {
                    const e = this.element,
                        t = {
                            showEvent: "show",
                            hideEvent: "hide",
                            targetAnchor: {
                                x: "center",
                                y: "bottom"
                            },
                            tooltipAnchor: {
                                x: "center",
                                y: "top"
                            },
                            offset: {
                                x: -1,
                                y: 15
                            },
                            orientation: "bottom",
                            animated: "true",
                            ComponentFactory: i.ComponentFactory
                        },
                        n = {
                            caller: this.element,
                            selected: this.get("selected"),
                            currentSummonerName: this.get("currentPlayer.summonerName"),
                            onResetNextUpdateTime: e => {
                                this.setPipTimer(e)
                            },
                            numFriends: this.get("numFriends"),
                            minFriendCount: this.get("minFriendCount"),
                            closeSocialLeaderboard: () => {
                                this.closeSocialLeaderboard()
                            }
                        };
                    e.addEventListener("willHide", this.handleHideEvent), i.FlyoutManager.assignFlyout(e, "SocialLeaderboardFeatureFlyoutComponent", n, t)
                },
                init() {
                    this._super(...arguments), this.handleHideEvent = this.handleHideEvent.bind(this)
                },
                willDestroyElement() {
                    this._super(...arguments), this.element.removeEventListener("willHide", this.handleHideEvent), this.cancelTimer()
                },
                didReceiveAttrs() {
                    this._super(...arguments);
                    const e = this.get("queueType");
                    if (this.isQueueEnabledForSocialLeaderboard(e)) {
                        this.get("socialLeaderboardService").getSocialLeaderboardNextUpdateTime(e).then(((e, t) => {
                            t || this.handleGetSocialLeaderboardNextUpdateTime(1e3 * e)
                        }))
                    }
                },
                handleGetSocialLeaderboardNextUpdateTime(e) {
                    const t = e;
                    0 !== t && (t < Date.now() ? this.setPipToShow() : this.setPipTimer(t))
                },
                handleHideEvent() {
                    this.set("isFlyoutOpen", !1)
                },
                setPipTimer(e) {
                    this.cancelTimer();
                    const t = e - Date.now();
                    this.set("timer", i.Ember.run.later(this, (() => {
                        this.setPipToShow()
                    }), t))
                },
                setPipToShow() {
                    this.get("isFlyoutOpen") || this.set("isPipShown", !0)
                },
                cancelTimer() {
                    const e = this.get("timer");
                    e && (i.Ember.run.cancel(e), this.set("timer", null))
                },
                isQueueEnabledForSocialLeaderboard: e => e === a.QUEUE_TYPE.RANKED_FLEX_SR || e === a.QUEUE_TYPE.RANKED_SOLO_5x5,
                toggleSocialLeaderboardFlyoutHelper() {
                    this.get("isFlyoutOpen") ? this.closeSocialLeaderboard() : (i.Telemetry.sendEvent("social-leaderboard-open-on-button-click"), this.set("isPipShown", !1), this.createFlyout(), i.FlyoutManager.sendEvent(this.element, "show"), this.set("isFlyoutOpen", !0))
                },
                closeSocialLeaderboard() {
                    i.FlyoutManager.sendEvent(this.element, "hide"), this.runTask((() => {
                        i.FlyoutManager.unassignFlyout(this.element)
                    }), 133), this.set("isFlyoutOpen", !1)
                },
                actions: {
                    toggleSocialLeaderboardFlyout() {
                        this.toggleSocialLeaderboardFlyoutHelper()
                    }
                }
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            const i = (0, s.emberDataBinding)({
                Ember: s.Ember,
                websocket: (0, s.getProvider)().getSocket(),
                basePaths: {
                    platformConfig: "/lol-platform-config",
                    chat: "/lol-chat"
                },
                boundProperties: {
                    isSocialLeaderboardEnabled: {
                        api: "platformConfig",
                        path: "/v1/namespaces/SocialLeaderboard/IsSocialLeaderboardEnabled",
                        default: !0
                    },
                    minFriendCount: {
                        api: "platformConfig",
                        path: "/v1/namespaces/SocialLeaderboard/MinFriendCount",
                        default: 3
                    },
                    friendsList: {
                        api: "chat",
                        path: "/v1/friends",
                        default: []
                    }
                }
            });
            e.exports = i
        }, (e, t) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.friendsWithSummonerNamesCount = void 0;
            t.friendsWithSummonerNamesCount = e => e.filter((e => !(!e || "" === e.name))).length
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "C+H5EsY4",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\button-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\button-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\button-component\\\\index.js\\" "],["text","\\n"],["block",["if"],[["get",["isButtonShown"]]],null,1]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","social-leaderboard-pip-cta"],["flush-element"],["text","\\n        "],["append",["unknown",["call-to-action-pip"]],false],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","social-leaderboard-button-container"],["flush-element"],["text","\\n    "],["open-element","lol-uikit-flat-button",[]],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"toggleSocialLeaderboardFlyout"],null],null],["static-attr","remove-padding",""],["flush-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","social-leaderboard-button-icon"],["flush-element"],["close-element"],["text","\\n    "],["close-element"],["text","\\n"],["block",["if"],[["get",["isPipShown"]]],null,0],["text","  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1),
                i = n(109),
                o = n(297);
            n(298);
            var a, l = (a = n(16)) && a.__esModule ? a : {
                default: a
            };
            const r = Object.freeze({
                    NONE: "none",
                    PRESTIGE: "prestige",
                    RANKED: "ranked"
                }),
                c = (0, s.emberDataBinding)({
                    Ember: s.Ember,
                    websocket: (0, s.getProvider)().getSocket(),
                    logPrefix: "parties:player-banner:component",
                    basePaths: {
                        ranked: "/lol-ranked"
                    },
                    boundProperties: {
                        rankedData: {
                            api: "ranked",
                            path: "/v1/ranked-stats/{{puuid}}"
                        }
                    }
                });
            e.exports = s.Ember.Component.extend(c, {
                layout: n(299),
                classNames: ["v2-banner-component"],
                classNameBindings: ["lobbyChallengesEnabled:challenges-enabled:challenges-disabled"],
                selected: null,
                puuid: null,
                summonerId: null,
                member: null,
                isLocalPlayer: !1,
                rankedData: null,
                crestType: null,
                animationsEnabled: !1,
                showQuickPlaySelections: !1,
                isPlayerPartyControlsDisabled: !1,
                lobbiesService: s.Ember.inject.service("lobbies"),
                matchmakingService: s.Ember.inject.service("matchmaking"),
                isNotLocalPlayer: s.Ember.computed.not("isLocalPlayer"),
                isEmpty: s.Ember.computed.empty("member"),
                queueType: s.Ember.computed.alias("selected.queue.type"),
                isRanked: s.Ember.computed.alias("selected.queue.isRanked"),
                isSearching: s.Ember.computed.alias("matchmakingService.isSearching"),
                isMatchFound: s.Ember.computed.alias("matchmakingService.isMatchFound"),
                isRankedCrestEquipped: s.Ember.computed.equal("crestType", r.RANKED),
                waitingInPostgame: s.Ember.computed.and("member.showGhostedBanner"),
                returnedFromPostgame: s.Ember.computed.not("waitingInPostgame"),
                isCherry: s.Ember.computed.equal("queueType", "CHERRY"),
                isMap21: s.Ember.computed.alias("lobbiesService.isMap21"),
                showPositionSelector: s.Ember.computed.and("lobbiesService.showPositionSelector", "returnedFromPostgame"),
                primaryPosition: s.Ember.computed.alias("member.firstPositionPreference"),
                secondaryPosition: s.Ember.computed.alias("member.secondPositionPreference"),
                isPrimaryFill: s.Ember.computed.equal("primaryPosition", i.POSITIONS.FILL),
                currentTeamIsFull: s.Ember.computed.alias("lobbiesService.currentTeamIsFull"),
                playerTitle: s.Ember.computed.alias("challengesSummary.title.name"),
                scarcePositions: s.Ember.computed.alias("lobbiesService.scarcePositions"),
                shouldForceScarcePositionSelection: s.Ember.computed.alias("lobbiesService.shouldForceScarcePositionSelection"),
                shouldHideSecondaryPosition: s.Ember.computed("primaryPosition", "currentTeamIsFull", "shouldForceScarcePositionSelection", "scarcePositions", "lobbiesService", (function() {
                    const e = this.get("lobbiesService");
                    return !!e && e.shouldHideSecondaryPosition(this.get("primaryPosition"))
                })),
                quickPlayViewSlots: s.Ember.computed("member.playerSlots.@each.championId", "member.playerSlots.@each.positionPreference", "member.playerSlots.@each.perks", "member.playerSlots.@each.spell1", "member.playerSlots.@each.spell2", "member.playerSlots.@each.skinId", "shouldHideSecondaryPosition", (function() {
                    return (this.get("member.playerSlots") || []).map(((e, t) => ({
                        championId: e.championId,
                        positionPreference: e.positionPreference,
                        spell1: e.spell1,
                        spell2: e.spell2,
                        skinId: e.skinId,
                        isPrimary: 0 === t,
                        hide: 0 !== t && this.get("shouldHideSecondaryPosition"),
                        perks: e.perks
                    })))
                })),
                platformConfigSingleton: l.default,
                lobbyChallengesEnabled: s.Ember.computed.alias("platformConfigSingleton.lobbyChallengesEnabled"),
                overallChallengeLevel: s.Ember.computed.alias("challengesSummary.overallChallengeLevel"),
                crystalImagePath: s.Ember.computed("overallChallengeLevel", (function() {
                    const e = this.get("overallChallengeLevel");
                    return e ? `/fe/lol-static-assets/images/challenges-shared/crystal_${e.toLowerCase()}.png` : ""
                })),
                isLeader: s.Ember.computed("member.isLeader", "lobbiesService.otherCurrentPartyMembers.@each.isLeader", (function() {
                    const e = this.get("member");
                    return !!e && e.isLeader
                })),
                memberType: s.Ember.computed("isLocalPlayer", (function() {
                    return this.get("isLocalPlayer") ? o.BANNER_TYPES.CURRENT_PLAYER : o.BANNER_TYPES.OTHER_PLAYER
                })),
                primaryTooltipConfig: {
                    targetAnchor: {
                        x: "left",
                        y: "center"
                    },
                    tooltipAnchor: {
                        x: "right",
                        y: "center"
                    },
                    offset: {
                        x: 0,
                        y: 0
                    }
                },
                secondaryTooltipConfig: {
                    targetAnchor: {
                        x: "right",
                        y: "center"
                    },
                    tooltipAnchor: {
                        x: "left",
                        y: "center"
                    },
                    offset: {
                        x: 0,
                        y: 0
                    }
                },
                primaryPositionLabelText: s.Ember.computed("isPrimaryFill", "tra.parties_primary_position", "tra.parties_primary_fill", (function() {
                    return this.get("isPrimaryFill") ? this.get("tra.parties_primary_fill") : this.get("tra.parties_primary_position")
                })),
                primaryPositionText: s.Ember.computed("isPrimaryFill", "primaryPosition", (function() {
                    if (this.get("isPrimaryFill")) return "";
                    if (this.get("isMap21") && this.get("primaryPosition") === i.POSITIONS.BOTTOM) {
                        const e = i.MAP21_LANE_ROLE.toLowerCase();
                        return this.get(`tra.parties_position_${e}`)
                    } {
                        const e = (this.get("primaryPosition") || "").toLowerCase();
                        return this.get(`tra.parties_position_${e}`)
                    }
                })),
                secondaryPositionText: s.Ember.computed("secondaryPosition", (function() {
                    if (this.get("isMap21") && this.get("secondaryPosition") === i.POSITIONS.BOTTOM) {
                        const e = i.MAP21_LANE_ROLE.toLowerCase();
                        return this.get(`tra.parties_position_${e}`)
                    } {
                        const e = (this.get("secondaryPosition") || "").toLowerCase();
                        return this.get(`tra.parties_position_${e}`)
                    }
                })),
                showRankTooltip: s.Ember.computed("rankedData.queueMap", "queueType", "isRanked", "isRankedCrestEquipped", (function() {
                    if (!this.get("isRankedCrestEquipped")) return !1;
                    if (!this.get("isRanked")) return !0;
                    const e = this.get("rankedData.queueMap"),
                        t = this.get("queueType");
                    if (e && t) {
                        const n = e[t];
                        if (!n || "NONE" === n.tier) return !1
                    }
                    return !0
                })),
                init() {
                    this._super(...arguments), this.challengesBinding = (0, s.dataBinding)("/lol-challenges", (0, s.getProvider)().getSocket()), this.regaliaBinding = (0, s.dataBinding)("/lol-regalia", (0, s.getProvider)().getSocket()), this.chatBinding = (0, s.dataBinding)("/lol-chat", (0, s.getProvider)().getSocket())
                },
                didReceiveAttrs() {
                    this._super(...arguments);
                    const e = this.get("summonerId");
                    if (this.getRegaliaCached(e), !this.get("lobbyChallengesEnabled")) return;
                    const t = this.get("puuid"),
                        n = t && this._prevPuuid && t !== this._prevPuuid || !t && this._prevPuuid,
                        s = t && t !== this._prevPuuid;
                    n && this.challengesBinding.unobserve(this.challengesDataPath, this), s && (this.challengesDataPath = `v1/summary-player-data/player/${t}`, this.challengesBinding.observe(this.challengesDataPath, this, this.handleSummaryPlayerData))
                },
                willDestroyElement() {
                    this._super(...arguments), this.challengesBinding.unobserve(this.challengesDataPath, this), this.regaliaBinding.unobserve(this.regaliaSummonerPath, this), this.chatBinding.unobserve(this.chatParticipantsPath)
                },
                handleSummaryPlayerData(e) {
                    this.set("challengesSummary", e)
                },
                getRegaliaCached(e) {
                    e && this._prevSummonerId !== e && (this.getRegalia(e, !1), this._prevSummonerId && this.regaliaSummonerPath && this.regaliaBinding.unobserve(this.regaliaSummonerPath, this), this.regaliaSummonerPath = `/v2/summoners/${e}/regalia/async`, this.regaliaBinding.observe(this.regaliaSummonerPath, this, this.handleRegaliaAsync)), this._prevSummonerId = e
                },
                handleRegaliaAsync(e) {
                    const t = this.get("summonerId");
                    e && e.md5 !== this._regaliaMd5 && t && (this.getRegalia(t, !0), this._regaliaMd5 = e.md5)
                },
                getRegalia(e, t) {
                    const n = `/v2/summoners/${e}/regalia`;
                    return this.regaliaBinding.get(n, {
                        skipCache: t
                    }).then((e => {
                        e && (this.set("crestType", e.crestType), this.set("summonerRegalia", e))
                    }))
                },
                actions: {
                    quickPlayPrefsSelect(e) {
                        this.sendAction("onQuickPlaySelectButtonClick", !0, e)
                    },
                    showInvite() {
                        this.get("isEmpty") && this.sendAction("showInviteModal")
                    },
                    onTokenHover(e) {
                        s.Telemetry.sendEvent("challenges-lobby-token-hover", e)
                    }
                }
            })
        }, (e, t) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.BANNER_VIDEO_STATES = t.BANNER_TYPES = void 0;
            t.BANNER_TYPES = {
                CURRENT_PLAYER: "current-player",
                OTHER_PLAYER: "other-player",
                INVITED_PLACEHOLDER: "invited-placeholder",
                EMPTY_PLACEHOLDER: "empty-placeholder"
            };
            t.BANNER_VIDEO_STATES = {
                INTRO: "intro",
                IDLE: "idle",
                INVITED: "invited",
                OWNER_INTRO: "ownerIntro",
                EMPTY: "empty",
                LEFT: "left"
            }
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "PS3D4TrX",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\banner-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\banner-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\banner-component\\\\index.js\\" "],["text","\\n"],["block",["unless"],[["get",["isEmpty"]]],null,14]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","          "],["append",["helper",["v2-player-party-controls"],null,[["member","isLeader","isMe"],[["get",["member"]],["get",["isLeader"]],["get",["isLocalPlayer"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","                    "],["open-element","h5",[]],["static-attr","class","position-text"],["flush-element"],["append",["unknown",["primaryPositionText"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","                "],["open-element","lol-uikit-content-block",[]],["static-attr","class","position-tooltip"],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n                  "],["open-element","h5",[]],["static-attr","class","position-label"],["flush-element"],["append",["unknown",["primaryPositionLabelText"]],false],["close-element"],["text","\\n"],["block",["if"],[["get",["primaryPositionText"]]],null,1],["text","                "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","                    "],["open-element","h5",[]],["static-attr","class","position-text"],["flush-element"],["append",["unknown",["secondaryPositionText"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","                "],["open-element","lol-uikit-content-block",[]],["static-attr","class","position-tooltip"],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n                  "],["open-element","h5",[]],["static-attr","class","position-label"],["flush-element"],["append",["unknown",["tra","parties_secondary_position"]],false],["close-element"],["text","\\n"],["block",["if"],[["get",["secondaryPositionText"]]],null,3],["text","                "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["open-element","div",[]],["dynamic-attr","class",["concat",["position-icons-container ",["helper",["if"],[["get",["shouldHideSecondaryPosition"]],"single-selector"],null]]]],["flush-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","position-element secondary"],["flush-element"],["text","\\n              "],["append",["helper",["v2-banner-position-icon"],null,[["position","isPrimary"],[["get",["secondaryPosition"]],false]]],false],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipConfig"],[["get",["secondaryTooltipConfig"]]]],4],["text","            "],["close-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","position-element primary"],["flush-element"],["text","\\n              "],["append",["helper",["v2-banner-position-icon"],null,[["position","isPrimary"],[["get",["primaryPosition"]],true]]],false],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipConfig"],[["get",["primaryTooltipConfig"]]]],2],["text","            "],["close-element"],["text","\\n          "],["close-element"],["text","\\n        "]],"locals":[]},{"statements":[["block",["if"],[["get",["showPositionSelector"]]],null,5]],"locals":[]},{"statements":[["text","                "],["append",["helper",["quick-play-selection-renderer"],null,[["isLocalPlayer","position","playerSlot","isPrimary","championId","disabled","onClick"],[["get",["isLocalPlayer"]],["get",["playerSlot","positionPreference"]],["get",["playerSlot"]],["get",["playerSlot","isPrimary"]],["get",["playerSlot","championId"]],["get",["isNotLocalPlayer"]],["helper",["action"],[["get",[null]],"quickPlayPrefsSelect",["get",["index"]]],null]]]],false],["text","\\n"]],"locals":[]},{"statements":[["block",["unless"],[["get",["playerSlot","hide"]]],null,7]],"locals":["playerSlot","index"]},{"statements":[["text","          "],["open-element","div",[]],["static-attr","class","quick-play-spacer"],["flush-element"],["close-element"],["text","\\n          "],["open-element","div",[]],["static-attr","class","quick-play-selections-container"],["flush-element"],["text","\\n"],["block",["each"],[["get",["quickPlayViewSlots"]]],null,8],["text","          "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","            "],["open-element","div",[]],["static-attr","class","leader-icon"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["append",["helper",["cherry-rating"],null,[["rankedData","queueType","tooltipEnabled"],[["get",["rankedData"]],["get",["queueType"]],true]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["open-element","div",[]],["static-attr","class","player-restriction-info-container"],["flush-element"],["text","\\n            "],["append",["unknown",["player-restriction-info"]],false],["text","\\n          "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","            "],["append",["helper",["identity-tooltip"],null,[["rankedData","selectedQueue","player","showRank","challengesSummary","crystalImagePath","lobbyChallengesEnabled","summonerRegalia"],[["get",["rankedData"]],["get",["selected","queue"]],["get",["member"]],["get",["showRankTooltip"]],["get",["challengesSummary"]],["get",["crystalImagePath"]],["get",["lobbyChallengesEnabled"]],["get",["summonerRegalia"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","lobby-banner-animation-container"],["flush-element"],["text","\\n    "],["open-element","lol-uikit-lottie",[]],["static-attr","src","/fe/lol-parties/lottie/parties-v2/intro-banner.json"],["static-attr","autoplay","false"],["flush-element"],["close-element"],["text","\\n  "],["close-element"],["text","\\n\\n  "],["open-element","div",[]],["dynamic-attr","class",["concat",["lobby-banner ",["helper",["if"],[["get",["isLocalPlayer"]],"local"],null]," ",["helper",["if"],[["get",["isEmpty"]],"empty"],null]," ",["helper",["if"],[["get",["showQuickPlaySelections"]],"quick-play"],null]]]],["flush-element"],["text","\\n    "],["open-element","lol-regalia-parties-v2-element",[]],["dynamic-attr","summoner-id",["unknown",["member","summonerId"]],null],["dynamic-attr","puuid",["unknown",["member","puuid"]],null],["dynamic-attr","queue",["unknown",["queueType"]],null],["dynamic-attr","member-type",["unknown",["memberType"]],null],["dynamic-attr","waiting-in-postgame",["unknown",["waitingInPostgame"]],null],["dynamic-attr","animations",["unknown",["animationsEnabled"]],null],["dynamic-attr","is-quick-play",["unknown",["showQuickPlaySelections"]],null],["flush-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","lobby-banner-contents"],["flush-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","banner-highlight"],["flush-element"],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","banner-spacer"],["flush-element"],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","player-identity-container"],["flush-element"],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipPosition","type"],["right","system"]],13],["text","        "],["close-element"],["text","\\n"],["block",["if"],[["get",["isLocalPlayer"]]],null,12],["block",["if"],[["get",["isCherry"]]],null,11],["text","        "],["open-element","div",[]],["static-attr","class","player-name-container"],["flush-element"],["text","\\n"],["block",["if"],[["get",["isLeader"]]],null,10],["text","          "],["open-element","div",[]],["static-attr","class","player-name"],["flush-element"],["text","\\n            "],["append",["helper",["player-name"],null,[["format","puuid","summonerName"],["tooltip",["get",["member","puuid"]],["get",["member","summonerName"]]]]],false],["text","\\n          "],["close-element"],["text","\\n        "],["close-element"],["text","\\n        "],["open-element","div",[]],["dynamic-attr","class",["concat",["player-achievements-container ",["helper",["if"],[["get",["isEmpty"]],"hide"],null]]]],["flush-element"],["text","\\n          "],["append",["helper",["challenge-banner-token-container"],null,[["puuid","isLocalPlayer","chatConversationId","allowPresenceUpdates","showTitleOnly"],[["get",["puuid"]],["get",["isLocalPlayer"]],["get",["chatConversationId"]],["get",["allowPresenceUpdates"]],["get",["waitingInPostgame"]]]]],false],["text","\\n        "],["close-element"],["text","\\n"],["block",["if"],[["get",["showQuickPlaySelections"]]],null,9,6],["block",["unless"],[["get",["isPlayerPartyControlsDisabled"]]],null,0],["text","      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n\\n  "],["open-element","div",[]],["dynamic-attr","class",["concat",["player-identity-animation-container ",["helper",["if"],[["get",["isLocalPlayer"]],"local"],null]," ",["helper",["if"],[["get",["showQuickPlaySelections"]],"quick-play"],null]," ",["helper",["if"],[["get",["isNotLocalPlayer"]],"member"],null]]]],["flush-element"],["text","\\n    "],["open-element","lol-uikit-video",[]],["static-attr","class","player-identity-gem-animation"],["static-attr","fade-in","0"],["static-attr","fade-out","0"],["dynamic-attr","src",["concat",[["unknown",["gemAnimVideoPath"]]]]],["static-attr","preload",""],["flush-element"],["close-element"],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            n(301);
            var i = n(109),
                o = n(5),
                a = c(n(27)),
                l = c(n(122)),
                r = c(n(132));

            function c(e) {
                return e && e.__esModule ? e : {
                    default: e
                }
            }
            const m = (0, s.emberDataBinding)({
                    Ember: s.Ember,
                    websocket: (0, s.getProvider)().getSocket(),
                    boundProperties: {
                        uxSettings: "/lol-settings/v2/local/lol-user-experience"
                    }
                }),
                u = s.Ember.Object.extend(s.Ember.PromiseProxyMixin),
                d = "QUEUE_DODGER",
                p = "LEAVER_BUSTED",
                h = "LEAVER_BUSTER_QUEUE_LOCKOUT";
            e.exports = s.Ember.Component.extend(l.default, r.default, m, {
                layout: n(302),
                classNames: ["v2-footer-component"],
                init(...e) {
                    this._super(...e), this._playerNames = s.playerNames
                },
                currentPlayerCanInvite: !1,
                penalizedSummonerNameProxy: s.Ember.computed("searchError.penalizedSummonerId", (function() {
                    const e = this.get("searchError.penalizedSummonerId");
                    return e && u.create({
                        promise: this._playerNames.getDisplayNameBySummonerId(e)
                    })
                })),
                penalizedSummonerDisplayName: s.Ember.computed.alias("penalizedSummonerNameProxy.content.playerNameFull"),
                buttonSounds: {
                    closeHover: o.SFX_URLS.SFX_LOBBY_QUIT_HOVER,
                    closeClick: o.SFX_URLS.SFX_LOBBY_QUIT_CLICK,
                    confirmHover: o.SFX_URLS.SFX_FIND_MATCH_HOVER,
                    confirmClick: o.SFX_URLS.SFX_FIND_MATCH_CLICK
                },
                lobbiesService: s.Ember.inject.service("lobbies"),
                gameflowService: s.Ember.inject.service("gameflow"),
                customGamesService: s.Ember.inject.service("custom-games"),
                patcherService: s.Ember.inject.service("patcher"),
                queueEligibilityService: s.Ember.inject.service("queue-eligibility"),
                matchmakingService: s.Ember.inject.service("matchmaking"),
                partySettingsService: s.Ember.inject.service("party-settings"),
                animationLock: s.Ember.computed.alias("selected.animationLock"),
                hasRankedDivisionRestriction: s.Ember.computed.alias("queueEligibilityService.hasRankedDivisionRestriction"),
                currentPartyMembers: s.Ember.computed.alias("lobbiesService.currentPartyMembers"),
                currentPartyIsFull: s.Ember.computed.alias("lobbiesService.currentPartyIsFull"),
                currentTeamIsFull: s.Ember.computed.alias("lobbiesService.currentTeamIsFull"),
                isPremadeRestrictedFives: s.Ember.computed.alias("lobbiesService.isPremadeRestrictedFives"),
                currentPlayer: s.Ember.computed.alias("lobbiesService.currentPlayer"),
                primaryPosition: s.Ember.computed.alias("currentPlayer.firstPositionPreference"),
                secondaryPosition: s.Ember.computed.alias("currentPlayer.secondPositionPreference"),
                isInQueue: s.Ember.computed.or("isSearching", "isMatchFound"),
                hasQueueAvailabilityWarning: s.Ember.computed.alias("lobbiesService.hasQueueAvailabilityWarning"),
                canStartMatchmaking: s.Ember.computed.alias("lobbiesService.canStartMatchmaking"),
                isCurrentPlayerPartyLeader: s.Ember.computed.alias("lobbiesService.isCurrentPlayerPartyLeader"),
                inLobby: s.Ember.computed.alias("lobbiesService.inLobby"),
                isMember: s.Ember.computed.alias("lobbiesService.isCurrentPlayerPartyMember"),
                isLeader: s.Ember.computed.alias("lobbiesService.isCurrentPlayerPartyLeader"),
                isNotLeader: s.Ember.computed.not("isLeader"),
                isSearching: s.Ember.computed.alias("matchmakingService.isSearching"),
                isNotSearching: s.Ember.computed.alias("matchmakingService.isNotSearching"),
                isMatchFound: s.Ember.computed.alias("matchmakingService.isMatchFound"),
                isMatchNotFound: s.Ember.computed.alias("matchmakingService.isMatchNotFound"),
                searchError: s.Ember.computed.readOnly("matchmakingService.longestSearchError"),
                searchErrorType: s.Ember.computed.readOnly("searchError.errorType"),
                isSearchError: s.Ember.computed.bool("searchError"),
                searchErrorHasTimeRemaining: s.Ember.computed.gt("matchmakingService.longestSearchErrorPenaltyTimeRemaining", 0),
                hasPenaltyTime: s.Ember.computed.and("isSearchError", "searchErrorHasTimeRemaining"),
                timeRemaining: s.Ember.computed.readOnly("matchmakingService.longestSearchErrorPenaltyTimeRemainingFormatted"),
                shouldForceScarcePositionSelection: s.Ember.computed.alias("lobbiesService.shouldForceScarcePositionSelection"),
                showPositionSelector: s.Ember.computed.alias("lobbiesService.showPositionSelector"),
                scarcePositions: s.Ember.computed.alias("lobbiesService.scarcePositions"),
                currentPartySize: s.Ember.computed.alias("lobbiesService.currentPartySize"),
                animationsEnabled: s.Ember.computed.alias("partySettingsService.animationsEnabled"),
                displayNotLeaderTooltip: s.Ember.computed.and("inLobby", "isMember", "isNotSearching", "isMatchNotFound"),
                notInParty: s.Ember.computed.not("inParty"),
                hideReadyWarning: s.Ember.computed.or("notInParty", "canStartMatchmaking", "matchmakingService.isInQueue", "_isTransitioningState"),
                allMembersHaveSelectedPositions: s.Ember.computed("currentTeamIsFull", "currentPartyMembers.@each.firstPositionPreference", "currentPartyMembers.@each.secondPositionPreference", "lobbiesService", "lobbiesService.isPositionAScarcePosition", "shouldForceScarcePositionSelection", (function() {
                    const e = this.get("lobbiesService"),
                        t = this.get("currentPartyMembers") || [],
                        n = this.get("currentTeamIsFull"),
                        s = this.get("shouldForceScarcePositionSelection");
                    return !t.some((function(t) {
                        const o = t.firstPositionPreference,
                            a = !o || o === i.POSITIONS.UNSELECTED;
                        let l = !1;
                        if (!n && o !== i.POSITIONS.FILL) {
                            const n = t.secondPositionPreference,
                                a = !n || n === i.POSITIONS.UNSELECTED;
                            if (s) {
                                l = !e.isPositionAScarcePosition(o) && a
                            } else l = a
                        }
                        return a || l
                    }))
                })),
                readyWarning: s.Ember.computed("readyWarningTooltip", "tra.ready", "tra.parties_ready_warning", (function() {
                    const e = this.get("readyWarningTooltip");
                    if (e && e.length > 0) return this.get("tra.parties_ready_warning")
                })),
                readyWarningTooltip: s.Ember.computed("currentPartyMembers.[]", "currentPartyMembers.@each.ready", "hideReadyWarning", "tra.ready", "tra.parties_ready_warning_tooltip", (function() {
                    if (this.get("hideReadyWarning")) return;
                    const e = [],
                        t = this.get("currentPartyMembers");
                    for (let n = 0; n < t.length; n++) {
                        const s = t[n];
                        s.ready || (this._playerNames.isUsingAlias ? e.push(s?.displayName?.playerNameFull) : e.push(s.summonerName))
                    }
                    if (!e.length) return;
                    return this.get("tra.formatString")("parties_ready_warning_tooltip", {
                        notReadyMemberNames: e.join(", ")
                    })
                })),
                positionError: s.Ember.computed("matchmakingService.isInQueue", "canStartMatchmaking", "showPositionSelector", "_isTransitioningState", "tra.ready", "tra.game_select_queue_restriction_party_canStartMatchmaking", "tra.game_select_queue_restriction_party_uniqueprimarypositionrestriction", "allMembersHaveSelectedPositions", "shouldForceScarcePositionSelection", (function() {
                    return !this.get("showPositionSelector") || this.get("matchmakingService.isInQueue") || this.get("canStartMatchmaking") || this.get("_isTransitioningState") || !this.get("allMembersHaveSelectedPositions") ? "" : this.get("shouldForceScarcePositionSelection") ? this.get("tra.game_select_queue_restriction_party_uniqueprimarypositionrestriction") : this.get("tra.game_select_queue_restriction_party_canStartMatchmaking")
                })),
                searchErrorLeaverBusterQueueDelay: s.Ember.computed.equal("searchErrorType", p),
                searchErrorLeaverBusterQueueLockout: s.Ember.computed.equal("searchErrorType", h),
                queueErrorMessage: s.Ember.computed("searchErrorType", "penalizedSummonerDisplayName", "tra.ready", "tra.parties_queue_error_queue_dodge_myself_body", "tra.parties_queue_error_queue_dodge_other_body", "tra.parties_queue_error_generic_body", (function() {
                    const e = this.get("searchErrorType"),
                        t = this.get("searchError.penalizedSummonerId"),
                        n = this.get("matchmakingService.currentSummoner.summonerId"),
                        s = this.get("penalizedSummonerDisplayName");
                    switch (e) {
                        case d:
                            return t === n ? this.get("tra.parties_queue_error_queue_dodge_myself_body") : this.get("tra").formatString("parties_queue_error_queue_dodge_other_body", {
                                player: s
                            });
                        case h:
                            return t === n ? this.get("tra.parties_queue_error_leaver_buster_lockout_restriction_tooltip_myself_body") : this.get("tra").formatString("parties_queue_error_leaver_buster_lockout_restriction_tooltip_other_body", {
                                player: s
                            });
                        default:
                            return this.get("tra.parties_queue_error_generic_body$html")
                    }
                })),
                patcherDisconnected: s.Ember.computed.not("patcherService.isConnected"),
                showingPartyButNotLeader: s.Ember.computed.and("showingState.isShowingParty", "isNotLeader"),
                confirmButtonThrottled: !1,
                confirmButtonNotThrottled: s.Ember.computed.not("confirmButtonThrottled"),
                showingPartyButThrottled: s.Ember.computed.and("showingState.isShowingParty", "isLeader", "confirmButtonThrottled"),
                showingPartyAndInQueue: s.Ember.computed.and("showingState.isShowingParty", "isInQueue"),
                showingPartyAndPenaltyTime: s.Ember.computed("showingState.isShowingParty", "hasPenaltyTime", "customGamesService.isCustomUI", (function() {
                    return this.get("showingState.isShowingParty") && this.get("hasPenaltyTime") && !this.get("customGamesService.isCustomUI")
                })),
                showingPartyAndRankedDivisionRestriction: s.Ember.computed.and("showingState.isShowingParty", "hasRankedDivisionRestriction"),
                cannotStartMatchmaking: s.Ember.computed.not("lobbiesService.canStartMatchmaking"),
                showingPartyButCannotStartMatchmaking: s.Ember.computed.and("showingState.isShowingParty", "isLeader", "cannotStartMatchmaking"),
                confirmButtonDisabled: s.Ember.computed.or("animationLock", "patcherDisconnected", "selected.isUpdatingSelection", "lobbiesService.hasLobbyRestrictions", "showingPartyButNotLeader", "showingPartyButThrottled", "showingPartyAndRankedDivisionRestriction", "showingPartyAndInQueue", "showingPartyAndPenaltyTime", "showingPartyButCannotStartMatchmaking", "hasQueueAvailabilityWarning"),
                confirmButtonEnabled: s.Ember.computed.not("confirmButtonDisabled"),
                confirmButtonText: s.Ember.computed("tra.ready", "hasPenaltyTime", "isInQueue", "customGamesService.isCustomUI", "customGameListService.confirmButtonText", "tra.parties_button_in_queue", "tra.parties_button_find_match", "tra.parties_button_start_game", (function() {
                    if (this.get("isInQueue")) return this.get("tra.parties_button_in_queue");
                    if (this.get("customGamesService.isCustomUI")) return this.get("tra.parties_button_start_game");
                    if (this.get("hasPenaltyTime")) {
                        return `${this.get("timeRemaining")}`
                    }
                    return this.get("tra.parties_button_find_match")
                })),
                confirmButtonTooltipText: s.Ember.computed("displayNotLeaderTooltip", "hasPenaltyTime", "queueErrorMessage", "customGamesService.isCustomUI", "isPremadeRestrictedFives", "patcherService.isConnected", "lobbiesService.canStartMatchmaking", "hasQueueAvailabilityWarning", "hasRankedDivisionRestriction", "readyWarning", "positionError", "tra.metadata", "tra.ready", "tra.parties_find_match_wait_for_captain", "tra.parties_start_game_wait_for_captain", "tra.parties_position_select_members_required_tooltip", "tra.parties_patcher_not_connected", "tra.parties_premade_size_five_restriction", "lobbiesService.hasLobbyRestrictions", (function() {
                    let e = "";
                    return this.get("patcherService.isConnected") || (e = this.get("tra.parties_patcher_not_connected")), this.get("hasRankedDivisionRestriction") ? e = this.get("tra.game_select_queue_restriction_party_teamdivisionrestriction") : this.get("isPremadeRestrictedFives") ? e = this.get("tra.parties_premade_size_five_restriction") : this.get("lobbiesService.canStartMatchmaking") || (e = this.get("readyWarning") ? this.get("readyWarning") : this.get("positionError") ? this.get("positionError") : this.get("tra.parties_position_select_members_required_tooltip")), this.get("displayNotLeaderTooltip") ? e = this.get("customGamesService.isCustomUI") ? this.get("tra.parties_start_game_wait_for_captain") : this.get("tra.parties_find_match_wait_for_captain") : this.get("hasPenaltyTime") && (e = this.get("queueErrorMessage")), this.get("hasQueueAvailabilityWarning") ? this.get("queueAvailabilityWarningTooltip") : e.replace(/\n/, "<br>")
                })),
                confirmButtonShowTooltip: s.Ember.computed("displayNotLeaderTooltip", "hasPenaltyTime", "searchErrorLeaverBusterQueueDelay", "isPremadeRestrictedFives", "isInQueue", "hasRankedDivisionRestriction", "patcherService.isConnected", "hasQueueAvailabilityWarning", "showingState.isShowingGameSelect", "lobbiesService.canStartMatchmaking", "lobbiesService.premadeSizeAllowed", "lobbiesService.hasLobbyRestrictions", "customGamesService.isCustomUI", (function() {
                    return !!this.get("hasRankedDivisionRestriction") || (!(!this.get("displayNotLeaderTooltip") && !this.get("isPremadeRestrictedFives") && this.get("patcherService.isConnected")) || (!(!this.get("hasPenaltyTime") || this.get("searchErrorLeaverBusterQueueDelay") || this.get("showingState.isShowingGameSelect") || this.get("customGamesService.isCustomUI")) || (!(this.get("isInQueue") || this.get("lobbiesService.canStartMatchmaking") || !this.get("lobbiesService.premadeSizeAllowed")) || !!this.get("hasQueueAvailabilityWarning"))))
                })),
                _hasClickedCloseDuringTransition: !1,
                handleCloseDuringTransitionObserver: s.Ember.observer("_hasClickedCloseDuringTransition", "isSearching", "isMatchFound", "hasPenaltyTime", (function() {
                    (this.get("isSearching") || this.get("isMatchFound") || this.get("hasPenaltyTime")) && (this.set("_isTransitioningState", !1), this.get("_hasClickedCloseDuringTransition") && (this.set("_hasClickedCloseDuringTransition", !1), this.cancelMatchmaking()))
                })),
                lobbyAvailabilityMatchmakingObserver: s.Ember.observer("hasQueueAvailabilityWarning", "isSearching", (function() {
                    this.get("hasQueueAvailabilityWarning") && this.get("isSearching") && this.get("lobbiesService").cancelMatchmakingSearch()
                })),
                startMatchmaking: function() {
                    this.get("confirmButtonNotThrottled") && (this.set("confirmButtonThrottled", !0), this.enterQueueTimer = s.Telemetry.startTimer("parties-enter-queue"), this.get("lobbiesService").startMatchmakingSearch().then((() => {
                        this.set("confirmButtonThrottled", !1)
                    }), (e => {
                        a.default.sendTelemetryEvent("feature_error", {
                            id: "PARTIES_START_MATCHMAKING_ATTEMPT_FAILED",
                            severity: "blocker",
                            message: "failed http post request to /lol-lobby/v2/lobby/matchmaking/search"
                        }), this.set("confirmButtonThrottled", !1), this.set("_isTransitioningState", !1), s.logger.warning(`Start matchmaking search failed: ${e}`)
                    })))
                },
                cancelMatchmaking: function() {
                    this.get("isSearching") && this.get("lobbiesService").cancelMatchmakingSearch()
                },
                confirmButtonClicked: function() {
                    this.set("_isTransitioningState", !0), this.startMatchmaking()
                },
                closeButtonClicked: function() {
                    this.blurCloseButton(), this.get("isSearching") || this.get("isMatchFound") ? this.cancelMatchmaking() : this.get("_isTransitioningState") ? (this.set("_hasClickedCloseDuringTransition", !0), this.get("lobbiesService").leaveLobby().catch((e => {
                        s.logger.warning(`Leaving lobby failed: ${e}`), this.set("_isTransitioningState", !1)
                    }))) : this.leavePartyModal()
                },
                blurCloseButton: function() {
                    const e = this.element.querySelector("button.close");
                    e && e.blur()
                },
                leavePartyModal: function() {
                    if (this.get("currentPartySize") > 1) {
                        this.showModal({
                            type: "DialogConfirm",
                            data: {
                                contents: this.get("tra.parties_leave_confirmation_text"),
                                acceptText: this.get("tra.parties_leave_confirmation_yes"),
                                declineText: this.get("tra.parties_leave_confirmation_no"),
                                onAccept: () => {
                                    this.leaveParty()
                                }
                            }
                        }).domNode.classList.add("parties-leave-party-modal")
                    } else this.leaveParty()
                },
                enterQueueTelemetryObserver: s.Ember.observer("isInQueue", (function() {
                    this.get("isInQueue") && this.enterQueueTimer && (s.Telemetry.stopAndRecordTimer(this.enterQueueTimer), delete this.enterQueueTimer)
                })),
                actions: {
                    confirmButton() {
                        this.confirmButtonClicked()
                    },
                    closeButton() {
                        this.closeButtonClicked()
                    },
                    openOverlay(e, t) {
                        this.sendAction("openOverlay", e, t)
                    }
                }
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "qLLJtSxY",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\footer-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\footer-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\footer-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","left-container"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","chat-container"],["flush-element"],["text","\\n    "],["open-element","lol-social-chat-room",[]],["static-attr","type","lobby"],["static-attr","disabled-when-connecting",""],["flush-element"],["close-element"],["text","\\n  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"],["open-element","div",[]],["static-attr","class","center-container"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","close-button-container"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","close-button"],["flush-element"],["text","\\n      "],["append",["helper",["generic-button"],null,[["onClick","baseImgPath","overImgPath","downImgPath","onClickSound","onHoverSound"],[["helper",["action"],[["get",[null]],"closeButton"],null],"/fe/lol-parties/button-x.png","/fe/lol-parties/button-x-over.png","/fe/lol-parties/button-x-down.png",["get",["buttonSounds","closeClick"]],["get",["buttonSounds","closeHover"]]]]],false],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","find-match-button-container"],["flush-element"],["text","\\n"],["block",["unless"],[["get",["animationsEnabled"]]],null,4,3],["text","    "],["open-element","div",[]],["static-attr","class","left-wing"],["flush-element"],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","right-wing"],["flush-element"],["close-element"],["text","\\n"],["block",["if"],[["get",["confirmButtonShowTooltip"]]],null,2],["text","  "],["close-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","role-selectors-container"],["flush-element"],["text","\\n"],["block",["if"],[["get",["showPositionSelector"]]],null,0],["text","  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"],["open-element","div",[]],["static-attr","class","right-container"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","invite-info-panel-container"],["flush-element"],["text","\\n    "],["append",["helper",["v2-invite-info-panel"],null,[["currentPlayerCanInvite"],[["get",["currentPlayerCanInvite"]]]]],false],["text","\\n  "],["close-element"],["text","\\n"],["close-element"],["text","\\n\\n"],["append",["helper",["v2-footer-notifications"],null,[["readyWarning","readyWarningTooltip","positionError"],[["get",["readyWarning"]],["get",["readyWarningTooltip"]],["get",["positionError"]]]]],false],["text","\\n\\n"],["append",["helper",["matchmaking-errors"],null,[["_isTransitioningState"],[["get",["_isTransitioningState"]]]]],false],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["append",["helper",["v2-position-selector"],null,[["primaryPosition","secondaryPosition","shouldHideSecondaryPosition","isInQueue","currentPartyIsFull","openOverlay"],[["get",["primaryPosition"]],["get",["secondaryPosition"]],["get",["shouldHideSecondaryPosition"]],["get",["isInQueue"]],["get",["currentPartyIsFull"]],["helper",["action"],[["get",[null]],"openOverlay"],null]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n          "],["open-element","p",[]],["flush-element"],["text","\\n            "],["append",["unknown",["confirmButtonTooltipText"]],false],["text","\\n          "],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["uikit-tooltip"],null,[["tooltipPosition","type"],["top","system"]],1]],"locals":[]},{"statements":[["text","      "],["append",["helper",["animated-find-match-button"],null,[["confirmButton","baseImgPath","overImgPath","downImgPath","disabledImgPath","buttonText","onClickSound","onHoverSound","disabledStyle","clickedStyle","isEnabled"],["confirmButton","/fe/lol-static-assets/images/buttons/find_match_default.png","/fe/lol-static-assets/images/buttons/find_match_hover.png","/fe/lol-static-assets/images/buttons/find_match_active.png","/fe/lol-parties/button-find-match-disabled.png",["get",["confirmButtonText"]],["get",["buttonSounds","confirmClick"]],["get",["buttonSounds","confirmHover"]],"color: grey","color: #005A82",["get",["confirmButtonEnabled"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["append",["helper",["generic-button"],null,[["onClick","baseImgPath","overImgPath","downImgPath","disabledImgPath","upText","overText","downText","disabledText","onClickSound","onHoverSound","disabledStyle","isEnabled"],[["helper",["action"],[["get",[null]],"confirmButton"],null],"/fe/lol-parties/button-find-match.png","/fe/lol-parties/button-find-match-over.png","/fe/lol-parties/button-find-match-down.png","/fe/lol-parties/button-find-match-disabled.png",["get",["confirmButtonText"]],["get",["confirmButtonText"]],["get",["confirmButtonText"]],["get",["confirmButtonText"]],["get",["buttonSounds","confirmClick"]],["get",["buttonSounds","confirmHover"]],"color: grey",["get",["confirmButtonEnabled"]]]]],false],["text","\\n"]],"locals":[]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1),
                i = l(n(19));
            n(304);
            var o = l(n(13)),
                a = n(18);

            function l(e) {
                return e && e.__esModule ? e : {
                    default: e
                }
            }
            const {
                RunMixin: r
            } = s.EmberAddons.EmberLifeline, c = s.UIKit.getTooltipManager(), m = s.UIKit.getTemplateHelper();
            e.exports = s.Ember.Component.extend(r, {
                layout: n(305),
                classNames: ["v2-footer-notifications"],
                disabledReasons: s.Ember.A(),
                isQuickPlayModal: !1,
                lobbiesService: s.Ember.inject.service("lobbies"),
                matchmakingService: s.Ember.inject.service("matchmaking"),
                eligibilityService: s.Ember.inject.service("queue-eligibility"),
                eligibilitiesEntity: i.default,
                queuesEntity: o.default,
                restrictions: s.Ember.computed.alias("eligibilitiesEntity.restrictions"),
                warnings: s.Ember.computed.alias("eligibilitiesEntity.warnings"),
                currentPlayer: s.Ember.computed.alias("lobbiesService.currentPlayer"),
                scarcePositions: s.Ember.computed.alias("lobbiesService.scarcePositions"),
                canStartMatchmaking: s.Ember.computed.alias("lobbiesService.canStartMatchmaking"),
                currentTeamIsFull: s.Ember.computed.alias("lobbiesService.currentTeamIsFull"),
                currentPartyMembers: s.Ember.computed.alias("lobbiesService.currentPartyMembers"),
                currentPartySize: s.Ember.computed.alias("lobbiesService.currentPartySize"),
                hasQueueAvailabilityWarning: s.Ember.computed.alias("lobbiesService.hasQueueAvailabilityWarning"),
                queueAvailabilityWarningTooltip: s.Ember.computed.alias("lobbiesService.queueAvailabilityWarningTooltip"),
                allowablePremadeSizes: s.Ember.computed.alias("lobbiesService.allowablePremadeSizes"),
                premadeSizeAllowed: s.Ember.computed.alias("lobbiesService.premadeSizeAllowed"),
                shouldShowPremadeSizeError: s.Ember.computed.not("premadeSizeAllowed"),
                isCurrentPlayerPartyLeader: s.Ember.computed.alias("lobbiesService.isCurrentPlayerPartyLeader"),
                showPositionSelector: s.Ember.computed.alias("lobbiesService.showPositionSelector"),
                autoFillDisabled: s.Ember.computed.alias("lobbiesService.shouldForceScarcePositionSelection"),
                autoFillEligible: s.Ember.computed.alias("currentPlayer.autoFillEligible"),
                autoFillProtectedForStreaking: s.Ember.computed.alias("currentPlayer.autoFillProtectedForStreaking"),
                autoFillProtectedForPromos: s.Ember.computed.alias("currentPlayer.autoFillProtectedForPromos"),
                autoFillProtectedForSoloing: s.Ember.computed.alias("currentPlayer.autoFillProtectedForSoloing"),
                autoFillProtectedForScarcePosition: s.Ember.computed("scarcePositions", "currentPlayer.firstPositionPreference", "currentPlayer.secondPositionPreference", (function() {
                    const e = [this.get("currentPlayer.firstPositionPreference"), this.get("currentPlayer.secondPositionPreference")];
                    if (this.get("scarcePositions")) return e.some((e => this.get("scarcePositions").includes(e)))
                })),
                autoFillProtected: s.Ember.computed.or("autoFillProtectedForPromos", "autoFillProtectedForSoloing", "autoFillProtectedForStreaking", "autoFillProtectedForScarcePosition"),
                notDraftPick: s.Ember.computed.not("showPositionSelector"),
                hasLobbyRestrictions: s.Ember.computed.or("eligibilitiesEntity.hasLobbyRestrictions", "eligibilitiesEntity.playerRestrictions", "shouldShowPremadeSizeError"),
                hidePositionWarning: s.Ember.computed.or("matchmakingService.isInQueue", "currentTeamIsFull", "notDraftPick"),
                hideAutofillStatus: s.Ember.computed.alias("hidePositionWarning"),
                positionWarning: s.Ember.computed("autoFillEligible", "autoFillProtected", "hidePositionWarning", "autoFillProtectedForScarcePosition", "autoFillDisabled", "tra.ready", "tra.parties_autofill_activated", "tra.parties_autofill_disabled", "tra.parties_autofill_protected", (function() {
                    if (!this.get("hidePositionWarning")) return this.get("autoFillDisabled") ? this.get("tra.parties_autofill_disabled") : this.get("autoFillProtectedForScarcePosition") ? this.get("tra.parties_autofill_protected") : this.get("autoFillEligible") ? this.get("tra.parties_autofill_activated") : this.get("autoFillProtected") ? this.get("tra.parties_autofill_protected") : void 0
                })),
                teamSizeRestrictionMembers: s.Ember.computed("restrictions", "restrictions.[]", (function() {
                    const e = this.get("restrictions");
                    if (e)
                        for (let t = 0; t < e.length; t++)
                            if ("TeamSizeRestriction" === e[t].restrictionCode) return e[t].summonerIds.length;
                    return 0
                })),
                QPPriorityPositionRestriction: s.Ember.computed("restrictions", "restrictions.[]", (function() {
                    const e = this.get("restrictions");
                    return !!e && e.find((e => "QPPlayerScarcePositionCoverageRestriction" === e.restrictionCode))
                })),
                QPLobbyRestrictions: s.Ember.computed("restrictions", "restrictions.[]", "QPPriorityPositionRestriction", "currentPlayer.summonerId", "tra.ready", (function() {
                    const e = this.get("restrictions");
                    if (!Boolean(e)) return;
                    const t = e.find((e => "QPScarcePositionsNotAvailableRestriction" === e.restrictionCode));
                    if (Boolean(t)) return this.get("tra.game_select_queue_restriction_party_qpscarcepositionsnotavailablerestriction");
                    const n = this.get("QPPriorityPositionRestriction");
                    if (Boolean(n) && n.summonerIds.includes(this.get("currentPlayer.summonerId"))) return this.get("tra.game_select_queue_restriction_party_qpplayerscarcepositioncoveragerestriction_self");
                    if (Boolean(n) && !n.summonerIds.includes(this.get("currentPlayer.summonerId"))) return this.get("tra.game_select_queue_restriction_party_qpplayerscarcepositioncoveragerestriction");
                    const s = e.find((e => "QPNonUniquePrimarySlotRestriction" === e.restrictionCode));
                    if (Boolean(s)) return this.get("game_select_queue_restriction_party_qpnonuniqueprimaryslotrestriction");
                    const i = e.find((e => "QPPartyChampionCoverageRestriction" === e.restrictionCode));
                    return Boolean(i) ? this.get("game_select_queue_restriction_party_qppartychampioncoveragerestriction") : void 0
                })),
                showQPModalRestriction: s.Ember.computed("QPPriorityPositionRestriction", "isQuickPlayModal", (function() {
                    return Boolean(this.get("QPPriorityPositionRestriction")) && this.get("isQuickPlayModal")
                })),
                QPModalRestrictionText: s.Ember.computed("QPPriorityPositionRestriction", "QPPriorityPositionRestriction.summonerIds", "currentPlayer.summonerId", "tra.ready", (function() {
                    const e = this.get("QPPriorityPositionRestriction");
                    if (Boolean(e) && e.summonerIds.includes(this.get("currentPlayer.summonerId"))) return this.get("tra.game_select_queue_restriction_party_qpplayerscarcepositioncoveragerestriction_self")
                })),
                mmrStandardDeviationWarning: s.Ember.computed.alias("tra.parties_large_skill_gap_warning"),
                mmrStandardDeviationWarningTooltip: s.Ember.computed.alias("tra.parties_large_skill_gap_warning_tooltip"),
                hasMmrStandardDeviationWarning: s.Ember.computed("warnings.[]", (function() {
                    const e = this.get("warnings");
                    if (e)
                        for (let t = 0; t < e.length; t++) {
                            if ("MmrStandardDeviationTooLarge" === e[t].restrictionCode) return !0
                        }
                    return !1
                })),
                shouldShowAutoFillStatus: s.Ember.computed("autoFillEligible", "autoFillProtectedForScarcePosition", "autoFillProtectedForStreaking", "autoFillProtectedForPromos", "autoFillProtectedForSoloing", "autoFillDisabled", "hideAutofillStatus", (function() {
                    return !this.get("hideAutofillStatus") && (this.get("autoFillEligible") || this.get("autoFillDisabled") || this.get("autoFillProtectedForStreaking") || this.get("autoFillProtectedForPromos") || this.get("autoFillProtectedForSoloing") || this.get("autoFillProtectedForScarcePosition"))
                })),
                premadeSizeErrorText: s.Ember.computed("premadeSizeAllowed", "tra.game_select_queue_restriction_party_teamsizerestriction", "tra.ready", "teamSizeRestrictionMembers", "tra.parties_premade_size_restriction", "tra.parties_premade_size_restriction_singular", "tra.parties_premade_size_fives", "allowablePremadeSizes", "restrictions", "restrictions.[]", "restrictions.@each.summonerIdsString", (function() {
                    const e = this.get("teamSizeRestrictionMembers"),
                        t = this.get("allowablePremadeSizes");
                    if (t && 1 === t.length && 5 === t[0]) return this.get("tra.parties_premade_size_fives");
                    if (e > 1) {
                        const t = {
                            teamSizeRestriction: e
                        };
                        return this.get("tra").formatString("game_select_queue_restriction_party_teamsizerestriction", t)
                    }
                    if (1 === e) return this.get("tra.parties_premade_size_restriction_singular");
                    const n = {
                        num: e
                    };
                    return this.get("tra").formatString("parties_premade_size_restriction", n)
                })),
                shouldShowAutoFillProtection: s.Ember.computed("autoFillDisabled", "autoFillProtectedForStreaking", "autoFillProtectedForPromos", "autoFillProtectedForSoloing", "autoFillProtectedForScarcePosition", (function() {
                    return this.get("autoFillDisabled") || this.get("autoFillProtectedForStreaking") || this.get("autoFillProtectedForPromos") || this.get("autoFillProtectedForSoloing") || this.get("autoFillProtectedForScarcePosition")
                })),
                warningTooltipText: s.Ember.computed("tra.parties_autofill_tooltip", "tra.parties_autofill_streak_protection", "tra.parties_autofill_promo_protection", "tra.parties_autofill_solo_protection", "autoFillDisabled", "autoFillEligible", "autoFillProtectedForStreaking", "autoFillProtectedForScarcePosition", "autoFillProtectedForPromos", "autoFillProtectedForSoloing", (function() {
                    return this.get("autoFillDisabled") ? this.get("tra.parties_autofill_force_scarce_position_protection") : this.get("autoFillProtectedForScarcePosition") ? this.get("tra.parties_autofill_scarce_position_protection") : this.get("autoFillEligible") ? this.get("tra.parties_autofill_tooltip") : this.get("autoFillProtectedForSoloing") ? this.get("tra.parties_autofill_solo_protection") : this.get("autoFillProtectedForPromos") ? this.get("tra.parties_autofill_promo_protection") : this.get("autoFillProtectedForStreaking") ? this.get("tra.parties_autofill_streak_protection") : void 0
                })),
                tooltipConfig: {
                    targetAnchor: {
                        x: "center",
                        y: "top"
                    },
                    tooltipAnchor: {
                        x: "center",
                        y: "bottom"
                    },
                    offset: {
                        x: 0,
                        y: 0
                    }
                },
                restrictionsText: s.Ember.computed("shouldShowPremadeSizeError", "hasLobbyRestrictions", "teamSizeRestrictionMembers", "restrictions.@each.summonerIdsString", "tra.ready", "tra.game_select_queue_restriction_party_notification", "disabledReasons", "QPLobbyRestrictions", "queuesEntity", "lobbiesService.queueId", (function() {
                    const e = this.get("QPLobbyRestrictions");
                    if (Boolean(e)) return e;
                    if (this.get("shouldShowPremadeSizeError")) return this.get("premadeSizeErrorText");
                    if (this.get("teamSizeRestrictionMembers") > 0) {
                        const e = this.get("queuesEntity"),
                            t = this.get("lobbiesService.queueId"),
                            n = e.getQueueById(t);
                        return n && n.gameMode === a.CHERRY_GAME_MODE ? this.get("tra.game_select_queue_restriction_party_cherrypartyineligiblesize") : this.get("tra.game_select_queue_restriction_party_notification")
                    }
                    const t = this.get("disabledReasons");
                    return t && t.length > 0 ? t.find((e => e[0])) : ""
                })),
                restrictionsTooltipTextObserver: s.Ember.on("init", s.Ember.observer("hasLobbyRestrictions", "restrictions.@each.restrictionCode", "restrictions.@each.summonerIdsString", "restrictions", "lobbiesService.currentPartyMembers.@each.summonerId", "lobbiesService.queueId", "tra.ready", (function() {
                    s.Ember.run.once(this, (() => {
                        this.generateRestrictionStringsForParty()
                    }))
                }))),
                generateRestrictionStringsForParty: function() {
                    if (this.get("hasLobbyRestrictions")) {
                        const e = this.get("eligibilitiesEntity").applyRestrictionGroupRules(this.get("restrictions")),
                            t = [];
                        if (e) {
                            const n = this.get("lobbiesService.queueId"),
                                i = this.get("eligibilityService");
                            return i && i.generateRestrictionForParty ? (e.forEach((e => {
                                e.queueId = n, t.push(i.generateRestrictionForParty(e))
                            })), Promise.all(t).then((e => {
                                this.set("disabledReasons", s.Ember.A(e))
                            }))) : Promise.resolve()
                        }
                    }
                    return Promise.resolve()
                },
                restrictionClass: s.Ember.computed("eligibilitiesEntity.restrictions", "restrictions.[]", (function() {
                    return this.get("eligibilitiesEntity.restrictions") && this.get("eligibilitiesEntity.restrictions").length > 0 ? "high-severity" : ""
                })),
                showQueueAvailabilityTooltip: s.Ember.on("didInsertElement", s.Ember.observer("hasQueueAvailabilityWarning", (function() {
                    this.runTask((() => this.updateQueueAvailabilityWarningTooltip()), 250)
                }))),
                updateQueueAvailabilityWarningTooltip: function() {
                    const e = this.element.querySelector(".parties-queue-warning-error");
                    if (this.get("hasQueueAvailabilityWarning")) {
                        let t = this.get("_queueAvailabilityWarningTooltipDOM");
                        if (!t) {
                            t = document.createElement("lol-uikit-tooltip"), t.classList.add("parties-footer-tooltip");
                            const e = m.contentBlockDialogSimple(this.get("queueAvailabilityWarningTooltip"));
                            e.setAttribute("type", "tooltip-large"), t.appendChild(e), this.set("_queueAvailabilityWarningTooltipDOM", t)
                        }
                        c.assign(e, t, {}, this.get("tooltipConfig")), c.show(e)
                    } else c.unassign(e)
                }
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "E2rtEeCa",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\footer-notifications-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\footer-notifications-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\footer-notifications-component\\\\index.js\\" "],["text","\\n"],["block",["if"],[["get",["isQuickPlayModal"]]],null,20,17]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","        "],["open-element","lol-uikit-content-block",[]],["static-attr","class","parties-footer-tooltip"],["static-attr","type","tooltip-large"],["flush-element"],["text","\\n          "],["append",["unknown",["warningTooltipText"]],false],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["open-element","svg",[]],["static-attr","class","parties-autofill-warning-icon"],["static-attr","width","21"],["static-attr","height","20"],["static-attr","viewBox","0 0 21 20"],["static-attr","fill","none"],["static-attr","xmlns","http://www.w3.org/2000/svg","http://www.w3.org/2000/xmlns/"],["flush-element"],["text","\\n            "],["open-element","path",[]],["static-attr","fill-rule","evenodd"],["static-attr","clip-rule","evenodd"],["static-attr","d","M11.3889 3L18.5 15.25L17.6111 17H3.38889L2.5 15.25L9.61111 3H11.3889ZM9.61111 11.75L8.72222 7.375L10.5 6.5L12.2778 7.375L11.3889 11.75H9.61111ZM12.2778 14.375L10.5 16.125L8.72222 14.375L10.5 12.625L12.2778 14.375Z"],["flush-element"],["close-element"],["text","\\n          "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["open-element","div",[]],["static-attr","class","parties-autofill-protection-icon"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["shouldShowAutoFillProtection"]]],null,2,1],["text","        "],["append",["unknown",["positionWarning"]],false],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","parties-footer-warning"],["flush-element"],["text","\\n"],["block",["if"],[["get",["positionWarning"]]],null,3],["block",["uikit-tooltip"],null,[["tooltipConfig"],[["get",["tooltipConfig"]]]],0],["text","    "],["close-element"],["text","\\n  "]],"locals":[]},{"statements":[["block",["if"],[["get",["shouldShowAutoFillStatus"]]],null,4]],"locals":[]},{"statements":[["text","        "],["open-element","lol-uikit-content-block",[]],["static-attr","class","parties-footer-tooltip"],["static-attr","type","tooltip-large"],["flush-element"],["text","\\n          "],["append",["unknown",["mmrStandardDeviationWarningTooltip"]],false],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","parties-footer-warning"],["flush-element"],["text","\\n      "],["open-element","svg",[]],["static-attr","class","parties-mmr-warning-icon"],["static-attr","width","21"],["static-attr","height","20"],["static-attr","viewBox","0 0 21 20"],["static-attr","fill","none"],["static-attr","xmlns","http://www.w3.org/2000/svg","http://www.w3.org/2000/xmlns/"],["flush-element"],["text","\\n        "],["open-element","path",[]],["static-attr","fill-rule","evenodd"],["static-attr","clip-rule","evenodd"],["static-attr","d","M11.3889 3L18.5 15.25L17.6111 17H3.38889L2.5 15.25L9.61111 3H11.3889ZM9.61111 11.75L8.72222 7.375L10.5 6.5L12.2778 7.375L11.3889 11.75H9.61111ZM12.2778 14.375L10.5 16.125L8.72222 14.375L10.5 12.625L12.2778 14.375Z"],["flush-element"],["close-element"],["text","\\n      "],["close-element"],["text","\\n      "],["append",["unknown",["mmrStandardDeviationWarning"]],false],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipConfig"],[["get",["tooltipConfig"]]]],6],["text","    "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["hasMmrStandardDeviationWarning"]]],null,7,5]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["dynamic-attr","class",["concat",["parties-footer-error ",["unknown",["restrictionClass"]]]]],["flush-element"],["text","\\n      "],["open-element","svg",[]],["static-attr","class","parties-notification-warning-icon"],["static-attr","width","21"],["static-attr","height","20"],["static-attr","viewBox","0 0 21 20"],["static-attr","fill","none"],["static-attr","xmlns","http://www.w3.org/2000/svg","http://www.w3.org/2000/xmlns/"],["flush-element"],["text","\\n        "],["open-element","path",[]],["static-attr","fill-rule","evenodd"],["static-attr","clip-rule","evenodd"],["static-attr","d","M11.3889 3L18.5 15.25L17.6111 17H3.38889L2.5 15.25L9.61111 3H11.3889ZM9.61111 11.75L8.72222 7.375L10.5 6.5L12.2778 7.375L11.3889 11.75H9.61111ZM12.2778 14.375L10.5 16.125L8.72222 14.375L10.5 12.625L12.2778 14.375Z"],["flush-element"],["close-element"],["text","\\n      "],["close-element"],["text","\\n      "],["append",["unknown",["positionError"]],false],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["positionError"]]],null,9,8]],"locals":[]},{"statements":[["text","        "],["open-element","lol-uikit-content-block",[]],["static-attr","class","parties-footer-tooltip"],["static-attr","type","tooltip-large"],["flush-element"],["text","\\n          "],["append",["unknown",["readyWarningTooltip"]],false],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","parties-footer-warning parties-ready-warning"],["flush-element"],["text","\\n      "],["open-element","svg",[]],["static-attr","class","parties-ready-warning-icon"],["static-attr","width","21"],["static-attr","height","20"],["static-attr","viewBox","0 0 21 20"],["static-attr","fill","none"],["static-attr","xmlns","http://www.w3.org/2000/svg","http://www.w3.org/2000/xmlns/"],["flush-element"],["text","\\n        "],["open-element","path",[]],["static-attr","fill-rule","evenodd"],["static-attr","clip-rule","evenodd"],["static-attr","d","M11.3889 3L18.5 15.25L17.6111 17H3.38889L2.5 15.25L9.61111 3H11.3889ZM9.61111 11.75L8.72222 7.375L10.5 6.5L12.2778 7.375L11.3889 11.75H9.61111ZM12.2778 14.375L10.5 16.125L8.72222 14.375L10.5 12.625L12.2778 14.375Z"],["flush-element"],["close-element"],["text","\\n      "],["close-element"],["text","\\n      "],["append",["unknown",["readyWarning"]],false],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipConfig"],[["get",["tooltipConfig"]]]],11],["text","    "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["readyWarning"]]],null,12,10]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["dynamic-attr","class",["concat",["parties-restrictions-warning-error ",["unknown",["restrictionClass"]]]]],["flush-element"],["text","\\n      "],["open-element","svg",[]],["static-attr","class","parties-notification-warning-icon"],["static-attr","width","21"],["static-attr","height","20"],["static-attr","viewBox","0 0 21 20"],["static-attr","fill","none"],["static-attr","xmlns","http://www.w3.org/2000/svg","http://www.w3.org/2000/xmlns/"],["flush-element"],["text","\\n        "],["open-element","path",[]],["static-attr","fill-rule","evenodd"],["static-attr","clip-rule","evenodd"],["static-attr","d","M11.3889 3L18.5 15.25L17.6111 17H3.38889L2.5 15.25L9.61111 3H11.3889ZM9.61111 11.75L8.72222 7.375L10.5 6.5L12.2778 7.375L11.3889 11.75H9.61111ZM12.2778 14.375L10.5 16.125L8.72222 14.375L10.5 12.625L12.2778 14.375Z"],["flush-element"],["close-element"],["text","\\n      "],["close-element"],["text","\\n      "],["append",["helper",["sanitize"],[["get",["restrictionsText"]]],null],false],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["hasLobbyRestrictions"]]],null,14,13]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["dynamic-attr","class",["concat",["parties-queue-warning-error ",["unknown",["restrictionClass"]]]]],["flush-element"],["text","\\n      "],["open-element","svg",[]],["static-attr","class","parties-notification-warning-icon"],["static-attr","width","21"],["static-attr","height","20"],["static-attr","viewBox","0 0 21 20"],["static-attr","fill","none"],["static-attr","xmlns","http://www.w3.org/2000/svg","http://www.w3.org/2000/xmlns/"],["flush-element"],["text","\\n        "],["open-element","path",[]],["static-attr","fill-rule","evenodd"],["static-attr","clip-rule","evenodd"],["static-attr","d","M11.3889 3L18.5 15.25L17.6111 17H3.38889L2.5 15.25L9.61111 3H11.3889ZM9.61111 11.75L8.72222 7.375L10.5 6.5L12.2778 7.375L11.3889 11.75H9.61111ZM12.2778 14.375L10.5 16.125L8.72222 14.375L10.5 12.625L12.2778 14.375Z"],["flush-element"],["close-element"],["text","\\n      "],["close-element"],["text","\\n      "],["append",["unknown",["tra","parties_roster_invite_disabled_eligibility_disabled"]],false],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["hasQueueAvailabilityWarning"]]],null,16,15]],"locals":[]},{"statements":[["text","        "],["open-element","lol-uikit-content-block",[]],["static-attr","class","parties-footer-tooltip"],["static-attr","type","tooltip-large"],["flush-element"],["text","\\n          "],["append",["unknown",["QPModalRestrictionText"]],false],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["dynamic-attr","class",["concat",["parties-restrictions-warning-error ",["unknown",["restrictionClass"]]]]],["flush-element"],["text","\\n      "],["open-element","svg",[]],["static-attr","class","parties-notification-warning-icon parties-notification-warning-icon-tooltip"],["static-attr","width","21"],["static-attr","height","20"],["static-attr","viewBox","0 0 21 20"],["static-attr","fill","none"],["static-attr","xmlns","http://www.w3.org/2000/svg","http://www.w3.org/2000/xmlns/"],["flush-element"],["text","\\n        "],["open-element","path",[]],["static-attr","fill-rule","evenodd"],["static-attr","clip-rule","evenodd"],["static-attr","d","M11.3889 3L18.5 15.25L17.6111 17H3.38889L2.5 15.25L9.61111 3H11.3889ZM9.61111 11.75L8.72222 7.375L10.5 6.5L12.2778 7.375L11.3889 11.75H9.61111ZM12.2778 14.375L10.5 16.125L8.72222 14.375L10.5 12.625L12.2778 14.375Z"],["flush-element"],["close-element"],["text","\\n      "],["close-element"],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipConfig"],[["get",["tooltipConfig"]]]],18],["text","    "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["showQPModalRestriction"]]],null,19]],"locals":[]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1),
                i = r(n(74)),
                o = r(n(12)),
                a = r(n(16)),
                l = n(5);

            function r(e) {
                return e && e.__esModule ? e : {
                    default: e
                }
            }
            n(307), e.exports = s.Ember.Component.extend(i.default, {
                layout: n(308),
                classNames: ["v2-header-component"],
                classNameBindings: ["willAnimate:hidden"],
                platformConfigSingleton: a.default,
                lobbiesService: s.Ember.inject.service("lobbies"),
                assets: s.Ember.inject.service("assets"),
                mapId: s.Ember.computed.alias("selected.mapId"),
                gameMode: s.Ember.computed.alias("selected.queue.gameMode"),
                assetMutator: s.Ember.computed.alias("selected.queue.assetMutator"),
                category: s.Ember.computed.alias("selected.queue.category"),
                pickType: s.Ember.computed.alias("selected.pickType"),
                queueId: s.Ember.computed.alias("selected.queueId"),
                currentPlayer: s.Ember.computed.alias("lobbiesService.currentPlayer"),
                notInQueue: s.Ember.computed.not("isInQueue"),
                isGameModeSelectionEnabled: s.Ember.computed.and("currentPlayer.isLeader", "notInQueue"),
                isTFT: s.Ember.computed.alias("lobbiesService.isTFT"),
                patchNotesUrl: s.Ember.computed("isTFT", "platformConfigSingleton.TftPatchNotesUrl", (function() {
                    return this.get("isTFT") ? this.get("platformConfigSingleton.TftPatchNotesUrl") : ""
                })),
                mapName: s.Ember.computed("mapId", "assets.availableMaps", (function() {
                    const e = this.get("mapId"),
                        t = this.get("assetMutator");
                    return this.get("assets").getMap(e, this.get("gameMode"), t).name
                })),
                mapNameShorthand: s.Ember.computed("mapId", "assets.availableMaps", "tra", (function() {
                    const e = this.get("mapId"),
                        t = this.get("assetMutator"),
                        n = this.get("assets").getMap(e, this.get("gameMode"), t);
                    return this.get(`tra.map_name_short_${n.mapStringId}`)
                })),
                queueName: s.Ember.computed("lobbiesService.currentQueue", (function() {
                    const e = this.get("lobbiesService.currentQueue");
                    return e ? e.shortName : ""
                })),
                pickTypeName: s.Ember.computed("pickType", "tra.ready", "lobbiesService.isMap21", "tra.game_select_pick_type_name_blind", (function() {
                    if (this.get("lobbiesService.isMap21")) return this.get("tra.game_select_pick_type_name_blind");
                    const e = this.get("pickType");
                    return e ? this.get(`tra.game_select_pick_type_name_${e}`) : ""
                })),
                mapBackgroundClass: s.Ember.computed("mapId", "gameMode", "assets.availableMaps", "assetMutator", (function() {
                    const e = this.get("assets").getMap(this.get("mapId"), this.get("gameMode"), this.get("assetMutator"));
                    return e ? o.default.mapKey({
                        mapId: e.id,
                        gameMode: e.gameMode
                    }) : ""
                })),
                tutorialData: s.Ember.computed("assets.availableMaps", "mapId", "gameMode", "assetMutator", (function() {
                    const e = {
                            tutorialCards: [],
                            title: null,
                            subheader: null
                        },
                        t = this.get("assets").getMap(this.get("mapId"), this.get("gameMode"), this.get("assetMutator"));
                    return t && (Array.isArray(t.tutorialCards) && (e.tutorialCards = t.tutorialCards), e.title = t.locStrings.tutorial_title, e.subheader = t.locStrings.tutorial_subheader, e.tutorialBg = t.assets["tutorial-bg"] || "", e.iconV2 = t.assets["icon-v2"] || ""), e
                })),
                hasGameModeTutorial: s.Ember.computed.alias("tutorialData.tutorialCards.length"),
                didInsertElement() {
                    this._super(...arguments);
                    if (this.get("tutorialData").tutorialCards.length > 0) {
                        const e = this.get("mapId"),
                            t = this.get("gameMode"),
                            n = this.get("tutorialData"),
                            i = this.get("assetMutator");
                        s.PartyAPI._showGameModeTutorialIfNeeded(e, t, n.tutorialCards, i, n.title, n.subheader, n.tutorialBg, n.iconV2)
                    }
                },
                actions: {
                    cancelFlow() {
                        this.sendAction("cancelFlow")
                    },
                    showGameModeTutorial: function() {
                        this.playSound(l.SFX_URLS.SFX_SOC_UI_CLICK_GENERIC);
                        const e = this.get("gameMode"),
                            t = this.get("tutorialData");
                        s.PartyAPI._showGameModeTutorial(e, t.tutorialCards, t.title, t.subheader, t.tutorialBg, t.iconV2)
                    }
                }
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "1ktJvH0R",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\header-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\header-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\header-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","lobby-header-overlay"],["flush-element"],["close-element"],["text","\\n"],["open-element","div",[]],["static-attr","class","lobby-header-content"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","lobby-back-button-container"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","lobby-back-button"],["flush-element"],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipPosition","type"],["right","system"]],10],["text","      "],["append",["helper",["generic-button"],null,[["baseImgPath","overImgPath","downImgPath","disabledImgPath","onClickSound","onHoverSound","onClick","isEnabled"],["/fe/lol-parties/button-back-arrow.png","/fe/lol-parties/button-back-arrow-over.png","/fe/lol-parties/button-back-arrow-down.png","/fe/lol-parties/button-back-arrow-disabled.png","/fe/lol-uikit/sfx-uikit-button-gold-click.ogg","/fe/lol-uikit/sfx-uikit-button-gold-hover.ogg",["helper",["action"],[["get",[null]],"cancelFlow"],null],["get",["isGameModeSelectionEnabled"]]]]],false],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","lobby-header-vertical-line"],["flush-element"],["close-element"],["text","\\n  "],["close-element"],["text","\\n  "],["open-element","div",[]],["dynamic-attr","class",["concat",["lobby-header-map-icon ",["unknown",["mapBackgroundClass"]]]]],["flush-element"],["close-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","lobby-header-description"],["flush-element"],["text","\\n"],["block",["unless"],[["get",["isTFT"]]],null,5],["text","    "],["open-element","div",[]],["static-attr","class","lobby-header-detail"],["flush-element"],["append",["unknown",["queueName"]],false],["close-element"],["text","\\n"],["block",["unless"],[["get",["isTFT"]]],null,4],["text","  "],["close-element"],["text","\\n"],["block",["unless"],[["get",["isTFT"]]],null,3],["block",["if"],[["get",["hasGameModeTutorial"]]],null,2],["text","  "],["open-element","div",[]],["static-attr","class","lobby-header-buttons-container"],["flush-element"],["text","\\n"],["block",["if"],[["get",["patchNotesUrl"]]],null,1],["text","    "],["append",["helper",["social-leaderboard-button"],null,[["selected","queueType","currentPlayer"],[["get",["selected"]],["get",["selected","queue","type"]],["get",["currentPlayer"]]]]],false],["text","\\n"],["block",["if"],[["get",["lobbiesService","isOpenPartyEnabled"]]],null,0],["text","  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["append",["helper",["open-party-toggle"],null,[["showingState"],[["get",["showingState"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","a",[]],["dynamic-attr","href",["concat",[["unknown",["tftPatchNotesUrl"]]]]],["static-attr","target","_new"],["static-attr","class","patch-notes-button"],["flush-element"],["text","\\n        "],["append",["unknown",["tra","tft_patch_notes"]],false],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","lol-uikit-info-icon",[]],["static-attr","class","show-tutorial-button lobby-header-interactable"],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"showGameModeTutorial"],null],null],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","lobby-header-tooltip"],["flush-element"],["text","\\n      "],["append",["helper",["v2-point-eligibility"],null,[["selected","mapBackgroundClass","mapName","queueName","pickTypeName"],[["get",["selected"]],["get",["mapBackgroundClass"]],["get",["mapName"]],["get",["queueName"]],["get",["pickTypeName"]]]]],false],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","lobby-header-separator"],["flush-element"],["close-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","lobby-header-detail"],["flush-element"],["append",["unknown",["pickTypeName"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","lobby-header-detail"],["flush-element"],["append",["unknown",["mapNameShorthand"]],false],["close-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","lobby-header-separator"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","              "],["append",["unknown",["tra","parties_button_change_mode_in_queue"]],false],["text","\\n"]],"locals":[]},{"statements":[["text","                "],["append",["unknown",["tra","parties_button_change_mode_disabled"]],false],["text","\\n"]],"locals":[]},{"statements":[["text","                "],["append",["unknown",["tra","parties_button_change_mode"]],false],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["isGameModeSelectionEnabled"]]],null,8,7]],"locals":[]},{"statements":[["text","        "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n          "],["open-element","p",[]],["flush-element"],["text","\\n"],["block",["if"],[["get",["notInQueue"]]],null,9,6],["text","          "],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1),
                i = l(n(74)),
                o = l(n(122));
            n(310);
            var a = n(109);

            function l(e) {
                return e && e.__esModule ? e : {
                    default: e
                }
            }
            const {
                RunMixin: r
            } = s.EmberAddons.EmberLifeline;
            e.exports = s.Ember.Component.extend(r, i.default, o.default, {
                layout: n(311),
                classNames: ["v2-lobby-root-component"],
                classNameBindings: ["willAnimate:hidden"],
                init(...e) {
                    this._super(...e), this._playerNames = s.playerNames
                },
                queues: null,
                selected: null,
                showingState: null,
                prevPartyId: null,
                introAnimationComplete: !0,
                lobbiesService: s.Ember.inject.service("lobbies"),
                gameflowService: s.Ember.inject.service("gameflow"),
                chatService: s.Ember.inject.service("chat"),
                partySettings: s.Ember.inject.service("partySettings"),
                matchmakingService: s.Ember.inject.service("matchmaking"),
                quickPlayService: s.Ember.inject.service("quick-play"),
                partyId: s.Ember.computed.alias("lobbiesService.partyId"),
                scarcePositions: s.Ember.computed.alias("lobbiesService.scarcePositions"),
                isShowingParty: s.Ember.computed.alias("showingState.isShowingParty"),
                inParty: s.Ember.computed.and("lobbiesService.inLobby", "isShowingParty"),
                otherPartyMembers: s.Ember.computed.alias("lobbiesService.otherCurrentPartyMembers"),
                currentPartyMembers: s.Ember.computed.alias("lobbiesService.currentPartyMembers"),
                maxTeamSize: s.Ember.computed.alias("lobbiesService.maxTeamSize"),
                canStartMatchmaking: s.Ember.computed.alias("lobbiesService.canStartMatchmaking"),
                isSearching: s.Ember.computed.alias("matchmakingService.isSearching"),
                isMatchFound: s.Ember.computed.alias("matchmakingService.isMatchFound"),
                isInQueue: s.Ember.computed.or("isSearching", "isMatchFound"),
                isCurrentPlayerPartyLeader: s.Ember.computed.alias("lobbiesService.isCurrentPlayerPartyLeader"),
                currentPartyLeader: s.Ember.computed.alias("lobbiesService.currentPartyLeader"),
                chatConversationId: s.Ember.computed.alias("lobbiesService.chatConversationId"),
                currentPartyIsFull: s.Ember.computed.alias("lobbiesService.currentPartyIsFull"),
                currentPlayerCanInvite: s.Ember.computed.alias("lobbiesService.currentPlayerCanInvite"),
                autoFillEligible: s.Ember.computed.alias("currentPlayer.autoFillEligible"),
                shouldForceScarcePositionSelection: s.Ember.computed.alias("lobbiesService.shouldForceScarcePositionSelection"),
                buttonsDisabled: s.Ember.computed.or("matchmakingService.isSearching", "matchmakingService.isMatchFound"),
                buttonsEnabled: s.Ember.computed.not("buttonsDisabled"),
                currentPlayer: s.Ember.computed.alias("lobbiesService.currentPlayer"),
                currentPlayerHasInvitePrivileges: s.Ember.computed.alias("currentPlayer.allowedInviteOthers"),
                primaryPosition: s.Ember.computed.alias("currentPlayer.firstPositionPreference"),
                secondaryPosition: s.Ember.computed.alias("currentPlayer.secondPositionPreference"),
                animationsEnabled: s.Ember.computed.alias("partySettings.largeAreaAnimationsEnabled"),
                showAnimations: s.Ember.computed.and("animationsEnabled", "isShowingParty"),
                hasNotAnimatedForPartyId: s.Ember.computed.not("hasAnimatedForPartyId"),
                willAnimateIntro: s.Ember.computed.and("showAnimations", "hasNotAnimatedForPartyId"),
                willAnimateIdle: s.Ember.computed.and("showAnimations", "hasAnimatedForPartyId", "introAnimationComplete"),
                currentTeamIsFull: s.Ember.computed.alias("lobbiesService.currentTeamIsFull"),
                hasAnimatedForPartyId: s.Ember.computed("prevPartyId", "partyId", (function() {
                    return this.get("prevPartyId") && this.get("prevPartyId") === this.get("partyId")
                })),
                positionSelectorOverlayPrimaryVisible: !1,
                positionSelectorOverlaySecondaryVisible: !1,
                initializeObservedObjects: s.Ember.on("didInsertElement", (function() {
                    this.get("matchmakingService.isSearching"), this.get("matchmakingService.isLowPriorityQueue"), this.get("matchmakingService.hasLowPriorityPenaltyTimeRemaining"), this.autoFillEligibleObserver()
                })),
                showingPartyObserver: s.Ember.on("didInsertElement", s.Ember.observer("isShowingParty", (function() {
                    this.get("willAnimateIdle") && this.runTask((() => {
                        this._startBannerIdleAnimations()
                    }), 100)
                }))),
                animationObserver: s.Ember.on("didInsertElement", s.Ember.observer("willAnimateIntro", (function() {
                    this.get("willAnimateIntro") && (this.set("introAnimationComplete", !1), this.runTask((() => {
                        this._startAnimations()
                    }), 100))
                }))),
                _startBannerIdleAnimations() {
                    const e = this.element.querySelectorAll(".lobby-banner > lol-regalia-parties-v2-element"),
                        t = new s.gsap.TimelineMax({
                            paused: !0
                        });
                    e && e.forEach((e => {
                        const n = e.querySelector(".lobby-banner-contents");
                        e.setAttribute("show-intro", !1), t.add((() => {
                            e.setAttribute("animations", !0)
                        }), "start"), n && t.fromTo(n, .2, {
                            opacity: 0
                        }, {
                            opacity: 1
                        }, "start+=0.7")
                    })), t.play()
                },
                _startAnimations() {
                    const e = this.element.querySelectorAll(".lobby-banner > lol-regalia-parties-v2-element"),
                        t = this.element.querySelectorAll(".invite-button-container"),
                        n = this.element.querySelector(".footer-container"),
                        i = this.element.querySelector(".lobby-footer-notifications-container"),
                        o = this.element.querySelector("#lottie-intro-anim"),
                        a = this.element.querySelector("#player-banner-gem-intro"),
                        l = new s.gsap.TimelineMax({
                            paused: !0
                        });
                    l.add("start", "+=0.1"), l.add((() => {
                        this.set("prevPartyId", this.get("partyId"))
                    }), "start"), l.add((() => {
                        this.set("introAnimationComplete", !0)
                    }), "start+=2.5"), o && l.add((() => {
                        o.animation.play()
                    }), "start+=0.75"), a && l.add((() => {
                        a && a.play(), this.playSound("/fe/lol-parties/sfx-lobby-banner-intro-flare.ogg")
                    }), "start"), e && e.forEach((e => {
                        const t = e.querySelector(".lobby-banner-contents");
                        l.add((() => {
                            e.setAttribute("hide-crest", !0), e.setAttribute("hide-banner", !0)
                        }), "start"), l.add((() => {
                            e.removeAttribute("hide-banner"), e.setAttribute("animations", !0), e.setAttribute("show-intro", !0)
                        }), "start+=0.3"), l.add((() => {
                            e.removeAttribute("hide-crest")
                        }), "start+=0.7"), t && l.fromTo(t, .2, {
                            opacity: 0
                        }, {
                            opacity: 1
                        }, "start+=0.7")
                    })), t && t.forEach((e => {
                        l.fromTo(e, .2, {
                            opacity: 0
                        }, {
                            opacity: 1
                        }, "start+=0.7")
                    })), n && l.fromTo(n, .1, {
                        opacity: 0
                    }, {
                        opacity: 1
                    }, "start+=1.2"), i && l.fromTo(i, .1, {
                        opacity: 0
                    }, {
                        opacity: 1
                    }, "start+=1.2"), l.play()
                },
                partyInvitesAllowed: s.Ember.computed("currentPlayerCanInvite", "currentPartyIsFull", "buttonsEnabled", (function() {
                    const e = this.get("buttonsEnabled"),
                        t = this.get("currentPlayerCanInvite"),
                        n = this.get("currentPartyIsFull");
                    return e && t && !n
                })),
                playerPlaceholders: s.Ember.computed("currentPartyMembers.[]", "otherPartyMembers.[]", "maxTeamSize", "lobbiesService.isCherry", "lobbiesService.maxLobbySize", (function() {
                    if (0 === (this.get("currentPartyMembers.length") || 0)) return s.Ember.A();
                    let e = this.get("lobbiesService.isCherry") ? this.get("lobbiesService.maxLobbySize") : this.get("maxTeamSize");
                    e || (e = 0);
                    const t = this.get("otherPartyMembers.length") || 0,
                        n = Math.max(e - t - 1, 0),
                        i = [];
                    for (let e = 0; e < n; e++) i.push(s.Ember.Object.create({
                        isPlaceholder: !0
                    }));
                    return s.Ember.A(i)
                })),
                observeInvitePrivilegesChange: s.Ember.observer("currentPlayerHasInvitePrivileges", (function() {
                    s.Ember.run.once(this, this._handleInviteGrantedRevoked)
                })),
                _handleInviteGrantedRevoked: function() {
                    const e = this.get("currentPlayerHasInvitePrivileges"),
                        t = this.get("_previousCanInvite"),
                        n = this.get("isCurrentPlayerPartyLeader");
                    t !== e && null !== t && (!e || this.get("_hasPlayedInviteGranted") || n ? e || !this.get("_hasPlayedInviteGranted") || n || (this.get("chatService").sendChatMessage(this.get("tra.parties_invite_privileges_chat_notification_revoked"), this.get("chatConversationId")), this.playSound("/fe/lol-parties/sfx-lobby-notif-revoke.ogg"), this.set("_hasPlayedInviteGranted", !1)) : (this.playSound("/fe/lol-parties/sfx-lobby-notif-invite-granted.ogg"), this.get("chatService").sendChatMessage(this.get("tra.parties_invite_privileges_chat_notification_granted"), this.get("chatConversationId")), this.set("_hasPlayedInviteGranted", !0))), this.set("_previousCanInvite", e)
                },
                observePartyLeaderChange: s.Ember.observer("isCurrentPlayerPartyLeader", (function() {
                    s.Ember.run.once(this, this._handlePartyLeaderGranted)
                })),
                _handlePartyLeaderGranted: function() {
                    const e = this.get("currentPartyLeader.summonerId"),
                        t = this.get("currentPlayer.summonerId"),
                        n = this.get("isCurrentPlayerPartyLeader"),
                        s = this.get("_previousPartyLeaderId");
                    n && (s !== t && !!s) && !this.get("_hasPlayedLeaderSound") ? (this.get("chatService").sendChatMessage(this.get("tra.parties_promoted_to_leader_chat_notification"), this.get("chatConversationId")), this.playSound("/fe/lol-parties/sfx-lobby-notif-captain-granted.ogg"), this.set("_hasPlayedLeaderSound", !0)) : n || this.set("_hasPlayedLeaderSound", !1), this.set("_previousPartyLeaderId", e)
                },
                autoFillEligibleObserver: s.Ember.observer("autoFillEligible", "shouldForceScarcePositionSelection", (function() {
                    s.Ember.run.once(this, (function() {
                        this.get("_showingAutofillModal") || !this.get("autoFillEligible") || this.get("shouldForceScarcePositionSelection") || (this.set("_showingAutofillModal", !0), this.get("partySettings").shouldHideAutofillModal().then((e => {
                            e ? this.set("_showingAutofillModal", !1) : this.showAutoFillSettingModal()
                        })))
                    }))
                })),
                showAutoFillSettingModal: function() {
                    const e = s.ComponentFactory.create("AutofillSettingComponent", {
                            partySettings: this.get("partySettings")
                        }),
                        {
                            domNode: t
                        } = e,
                        n = this.get("ModalManager").add({
                            type: "DialogAlert",
                            data: {
                                contents: t,
                                okText: this.get("tra.parties_autofill_settings_dialog_confirm")
                            }
                        });
                    return n.domNode.classList.add("parties-autofill-eligible-modal"), n.okPromise.then((() => {
                        this.get("partySettings").set("sessionHideAutofillModal", !0), this.set("_showingAutofillModal", !1)
                    })), n
                },
                lowPriorityNotificationObserver: s.Ember.observer("matchmakingService.isSearching", (function() {
                    const e = this.get("selfLowPriorityModal");
                    this.get("matchmakingService.isSearching") && this.get("matchmakingService.isLowPriorityQueue") ? this.showLowPriorityNotification() : e && (this.removeModal(e), this.set("selfLowPriorityModal", void 0))
                })),
                lowPriorityNotificationRemovalObserver: s.Ember.observer("matchmakingService.hasLowPriorityPenaltyTimeRemaining", (function() {
                    const e = this.get("selfLowPriorityModal"),
                        t = this.get("matchmakingService.hasLowPriorityPenaltyTimeRemaining");
                    e && !t && this.removeModal(e)
                })),
                showLowPriorityNotification: function() {
                    this.get("matchmakingService.isQueueDelay") && this.get("isCurrentPlayerPartyLeader") ? this.showQueueDelayToast() : this.get("matchmakingService.isSelfInLowPriorityQueue") ? this.get("selfLowPriorityModal") || this.showSelfLowPriorityModal() : this.get("matchmakingService.lowPriorityData.penaltyTimeRemaining") > 0 && this.showLowPriorityToast()
                },
                showLowPriorityToast: function() {
                    const e = this.get("matchmakingService.lowPriorityData.penalizedSummonerIds");
                    if (!e || e.length < 1) return;
                    const t = e.map((e => this._playerNames.getDisplayNameBySummonerId(e)));
                    Promise.all(t).then((e => {
                        const t = s.ComponentFactory.create("LowPriorityQueueToastComponent", {
                            penalizedPlayerNames: s.lodash.map(e, "playerNameFull")
                        });
                        this.get("ToastManager").add({
                            type: "DialogToast",
                            data: {
                                contents: t.domNode
                            },
                            onRemove: () => t.onRemove()
                        })
                    }))
                },
                showSelfLowPriorityModal: function() {
                    const e = s.ComponentFactory.create("LowPriorityQueueModalComponent"),
                        t = this.showModal({
                            type: "DialogAlert",
                            data: {
                                contents: e.domNode,
                                okText: this.get("tra.low_priority_queue_modal_leave_queue"),
                                onOk: () => {
                                    this.get("lobbiesService").cancelMatchmakingSearch(), this.set("selfLowPriorityModal", void 0), e.onRemove()
                                }
                            }
                        });
                    this.set("selfLowPriorityModal", t)
                },
                showQueueDelayToast: function() {
                    const e = s.UIKit.getTemplateHelper().contentBlockTooltip(this.get("tra.low_priority_queue_delay_warning_header"), this.get("tra.low_priority_queue_delay_warning_body"), "notification");
                    this.get("ToastManager").add({
                        type: "DialogToast",
                        data: {
                            contents: e
                        }
                    })
                },
                _setPositionPreferences(e, t) {
                    const n = this.get("primaryPosition"),
                        s = this.get("secondaryPosition");
                    let i = e === a.POSITION_ROLES.PRIMARY ? t : n,
                        o = e === a.POSITION_ROLES.SECONDARY ? t : s;
                    if (i !== n || o !== s) return n !== t && s !== t || (i = s, o = s === a.POSITIONS.FILL ? a.POSITIONS.UNSELECTED : n), this.get("lobbiesService").shouldHideSecondaryPosition(i) && (o = a.POSITIONS.UNSELECTED), this.get("lobbiesService").setPositionPreferences({
                        firstPreference: i,
                        secondPreference: o
                    })
                },
                visibleSecondaryPosition: s.Ember.computed("shouldHideSecondaryPositionForLocalPlayer", "secondaryPosition", (function() {
                    return this.get("shouldHideSecondaryPositionForLocalPlayer") ? a.POSITIONS.UNSELECTED : this.get("secondaryPosition")
                })),
                shouldHideSecondaryPositionForLocalPlayer: s.Ember.computed("primaryPosition", "scarcePositions", "shouldForceScarcePositionSelection", "currentTeamIsFull", "lobbiesService", (function() {
                    const e = this.get("lobbiesService");
                    if (!e) return !1;
                    const t = this.get("primaryPosition");
                    return e.shouldHideSecondaryPosition(t)
                })),
                shouldSecondaryButtonHideNonScarcePositions: s.Ember.computed("primaryPosition", "scarcePositions", "shouldForceScarcePositionSelection", "lobbiesService", (function() {
                    const e = this.get("lobbiesService");
                    if (!e) return !1;
                    const t = this.get("primaryPosition");
                    return e.shouldSecondaryButtonHideNonScarcePositions(t)
                })),
                showQuickPlaySelections: s.Ember.computed("lobbiesService.lobby.gameConfig.showQuickPlaySlotSelection", (function() {
                    return this.get("lobbiesService.lobby.gameConfig.showQuickPlaySlotSelection")
                })),
                _setQuickPlaySelectingSlotIndex(e, t) {
                    const n = e ? t : null;
                    this.set("selectingSlotIndex", n)
                },
                actions: {
                    setShowQuickPlayModal(e, t) {
                        this._setQuickPlaySelectingSlotIndex(e, t), this.set("showQuickPlayModal", e)
                    },
                    setQuickPlaySelectingSlotIndex(e) {
                        this._setQuickPlaySelectingSlotIndex(!0, e)
                    },
                    showInviteModal: function() {
                        this.sendAction("showInviteModal")
                    },
                    openOverlay(e, t) {
                        e === a.POSITION_ROLES.PRIMARY ? (this.set("positionSelectorOverlayPrimaryPosition", t), this.set("positionSelectorOverlayPrimaryVisible", !0)) : e === a.POSITION_ROLES.SECONDARY && (this.set("positionSelectorOverlaySecondaryPosition", t), this.set("positionSelectorOverlaySecondaryVisible", !0))
                    },
                    closeOverlay(e) {
                        e === a.POSITION_ROLES.PRIMARY ? this.set("positionSelectorOverlayPrimaryVisible", !1) : e === a.POSITION_ROLES.SECONDARY && this.set("positionSelectorOverlaySecondaryVisible", !1)
                    },
                    setPositionPreferences(e, t) {
                        this._setPositionPreferences(e, t)
                    }
                }
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "sMi9iZKf",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\parties-root-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\parties-root-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\parties-root-component\\\\index.js\\" "],["text","\\n"],["block",["if"],[["get",["inParty"]]],null,6]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["append",["helper",["v2-position-selector-modal"],null,[["animationsEnabled","childrenPositionStyle","selectingOrdinal","scarcePositions","primaryPosition","secondaryPosition","currentPartyIsFull","shouldHideNonScarcePositions","openOverlay","closeOverlay","setPositionPreferences"],[["get",["animationsEnabled"]],["get",["positionSelectorOverlaySecondaryPosition"]],"SECONDARY",["get",["scarcePositions"]],["get",["primaryPosition"]],["get",["visibleSecondaryPosition"]],["get",["currentPartyIsFull"]],["get",["shouldSecondaryButtonHideNonScarcePositions"]],["helper",["action"],[["get",[null]],"openOverlay"],null],["helper",["action"],[["get",[null]],"closeOverlay"],null],["helper",["action"],[["get",[null]],"setPositionPreferences"],null]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["append",["helper",["v2-position-selector-modal"],null,[["animationsEnabled","childrenPositionStyle","selectingOrdinal","scarcePositions","primaryPosition","secondaryPosition","currentPartyIsFull","openOverlay","closeOverlay","setPositionPreferences"],[["get",["animationsEnabled"]],["get",["positionSelectorOverlayPrimaryPosition"]],"PRIMARY",["get",["scarcePositions"]],["get",["primaryPosition"]],["get",["visibleSecondaryPosition"]],["get",["currentPartyIsFull"]],["helper",["action"],[["get",[null]],"openOverlay"],null],["helper",["action"],[["get",[null]],"closeOverlay"],null],["helper",["action"],[["get",[null]],"setPositionPreferences"],null]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["append",["helper",["v2-banner-placeholder"],null,[["placeholder","isInQueue","partyInvitesAllowed","showInviteModal"],[["get",["placeholder"]],["get",["isInQueue"]],["get",["partyInvitesAllowed"]],"showInviteModal"]]],false],["text","\\n"]],"locals":["placeholder"]},{"statements":[["text","      "],["append",["helper",["v2-banner"],null,[["selected","member","puuid","summonerId","chatConversationId","allowPresenceUpdates","animationsEnabled","showQuickPlaySelections"],[["get",["selected"]],["get",["member"]],["get",["member","puuid"]],["get",["member","summonerId"]],["get",["chatConversationId"]],true,["get",["animationsEnabled"]],["get",["showQuickPlaySelections"]]]]],false],["text","\\n"]],"locals":["member"]},{"statements":[["text","      "],["append",["helper",["v2-banner"],null,[["selected","member","puuid","isLocalPlayer","summonerId","chatConversationId","animationsEnabled","showQuickPlaySelections","onQuickPlaySelectButtonClick"],[["get",["selected"]],["get",["currentPlayer"]],["get",["currentPlayer","puuid"]],true,["get",["currentPlayer","summonerId"]],["get",["chatConversationId"]],["get",["animationsEnabled"]],["get",["showQuickPlaySelections"]],"setShowQuickPlayModal"]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","party-members-container"],["flush-element"],["text","\\n"],["block",["if"],[["get",["currentPlayer"]]],null,4],["block",["each"],[["get",["otherPartyMembers"]]],[["key"],["puuid"]],3],["block",["each"],[["get",["playerPlaceholders"]]],[["key"],["index"]],2],["text","  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["lower-section"],null,[["currentPlayer"],[["get",["currentPlayer"]]]],5],["text","  "],["open-element","div",[]],["static-attr","class","footer-container"],["flush-element"],["text","\\n    "],["append",["helper",["v2-footer"],null,[["showingState","selected","currentPlayerCanInvite","shouldHideSecondaryPosition","openOverlay","closeOverlay","inParty"],[["get",["showingState"]],["get",["selected"]],["get",["currentPlayerCanInvite"]],["get",["shouldHideSecondaryPositionForLocalPlayer"]],["helper",["action"],[["get",[null]],"openOverlay"],null],["helper",["action"],[["get",[null]],"closeOverlay"],null],["get",["inParty"]]]]],false],["text","\\n  "],["close-element"],["text","\\n\\n  "],["open-element","div",[]],["static-attr","class","navbar-blur"],["flush-element"],["close-element"],["text","\\n\\n  "],["open-element","div",[]],["static-attr","class","lobby-intro-animation-container"],["flush-element"],["text","\\n    "],["open-element","lol-uikit-lottie",[]],["static-attr","id","lottie-intro-anim"],["static-attr","src","/fe/lol-parties/lottie/parties-v2/intro-party.json"],["static-attr","autoplay","false"],["flush-element"],["close-element"],["text","\\n    "],["open-element","lol-uikit-video",[]],["static-attr","id","player-banner-gem-intro"],["static-attr","fade-in","0"],["static-attr","fade-out","0"],["static-attr","src","/fe/lol-static-assets/videos/lobby-crystal-intro-player.webm"],["flush-element"],["close-element"],["text","\\n  "],["close-element"],["text","\\n\\n  "],["open-element","lc-confirm-modal",[]],["dynamic-attr","acceptText",["unknown",["tra","parties_button_confirm"]],null],["dynamic-attr","closeButton",true,null],["dynamic-attr","onYes",["helper",["action"],[["get",[null]],"setShowQuickPlayModal",false],null],null],["dynamic-attr","onHide",["helper",["action"],[["get",[null]],"setShowQuickPlayModal",false],null],null],["dynamic-attr","open",["unknown",["showQuickPlayModal"]],null],["static-attr","dismissibleType","inside"],["flush-element"],["text","\\n    "],["open-element","lc-modal-content",[]],["flush-element"],["text","\\n      "],["append",["helper",["quick-play-loadout-selector"],null,[["showQuickPlaySelections","defaultSelections","localPlayer","selectingSlotIndex","shouldHideSecondaryPosition","setSelectingSlotIndex","setShowQuickPlayModal"],[["get",["lobbiesService","lobby","gameConfig","showQuickPlaySlotSelection"]],["get",["quickPlayService","quickPlayDefaultSelections"]],["get",["currentPlayer"]],["get",["selectingSlotIndex"]],["get",["shouldHideSecondaryPositionForLocalPlayer"]],"setQuickPlaySelectingSlotIndex","setShowQuickPlayModal"]]],false],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n\\n"],["block",["if"],[["get",["positionSelectorOverlayPrimaryVisible"]]],null,1],["block",["if"],[["get",["positionSelectorOverlaySecondaryVisible"]]],null,0]],"locals":[]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s, i = n(1),
                o = (s = n(74)) && s.__esModule ? s : {
                    default: s
                };
            n(313);
            const {
                RunMixin: a
            } = i.EmberAddons.EmberLifeline;
            e.exports = i.Ember.Component.extend(a, o.default, {
                layout: n(314),
                classNames: ["v2-player-management-button-component"],
                tagName: "button",
                classNameBindings: ["typeClass"],
                disabled: !1,
                disabledAfterClickDelay: 0,
                typeClass: i.Ember.computed("type", (function() {
                    return "v2-player-management-button-" + this.get("type")
                })),
                onDidInsertElement: i.Ember.on("didInsertElement", (function() {
                    this.addHoverClickSound(this.element, "/fe/lol-uikit/sfx-uikit-button-circlegold-hover.ogg", "/fe/lol-parties/sfx-lobby-button-banner-click.ogg")
                })),
                enableInviteButton: function(e = 0) {
                    this.runTask((() => this.set("disabled", !1)), e)
                },
                click: function() {
                    this.get("disabled") || (this.sendAction("action"), this.set("disabled", !0), this.enableInviteButton(this.get("disabledAfterClickDelay")))
                }
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "dv1JujXN",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\player-management-button-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\player-management-button-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\player-management-button-component\\\\index.js\\" "],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipPosition","type"],["top","system"]],0]],"locals":[],"named":[],"yields":["default"],"blocks":[{"statements":[["text","  "],["yield","default"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1),
                i = a(n(122)),
                o = a(n(74));

            function a(e) {
                return e && e.__esModule ? e : {
                    default: e
                }
            }
            n(316);
            const l = (0, s.emberDataBinding)({
                Ember: s.Ember,
                websocket: (0, s.getProvider)().getSocket(),
                logPrefix: "parties:player-banner:component",
                basePaths: {
                    summoner: "/lol-summoner",
                    chat: "/lol-chat"
                }
            });
            e.exports = s.Ember.Component.extend(l, i.default, o.default, {
                layout: n(317),
                classNames: ["v2-player-party-controls"],
                classNameBindings: ["isMe:main-player-controls:other-player-controls"],
                isLeader: !1,
                isMe: !1,
                isMultiteamLobby: !1,
                chatService: s.Ember.inject.service("chat"),
                lobbiesService: s.Ember.inject.service("lobbies"),
                matchmakingService: s.Ember.inject.service("matchmaking"),
                partySettingsService: s.Ember.inject.service("party-settings"),
                contextMenuManager: s.UIKit.getContextMenuManager(),
                playerNames: s.playerNames,
                animationsEnabled: s.Ember.computed.alias("partySettingsService.bannerAnimationsEnabled"),
                isPlaceholder: s.Ember.computed.not("member"),
                isNotPlaceholder: s.Ember.computed.not("isPlaceholder"),
                currentTeamIsFull: s.Ember.computed.alias("lobbiesService.currentTeamIsFull"),
                summonerId: s.Ember.computed.alias("member.summonerId"),
                puuid: s.Ember.computed.alias("member.puuid"),
                showPartyOwnerTools: s.Ember.computed.and("currentPlayerIsLeader", "isNotMe", "notQueued"),
                showPartyMemberTools: s.Ember.computed.and("isNotMe", "notQueued"),
                showPlayerOptionsTools: s.Ember.computed.or("showPartyOwnerTools", "showPartyMemberTools"),
                isNotMe: s.Ember.computed.not("isMe"),
                showGhostedBanner: s.Ember.computed.alias("member.showGhostedBanner"),
                shouldShowGhostedBanner: s.Ember.computed.and("isNotPlaceholder", "isNotMe", "showGhostedBanner"),
                hasInvitePrivileges: s.Ember.computed.alias("member.allowedInviteOthers"),
                currentPlayerIsLeader: s.Ember.computed.alias("lobbiesService.isCurrentPlayerPartyLeader"),
                currentPlayerIsNotLeader: s.Ember.computed.not("currentPlayerIsLeader"),
                isMatchNotFound: s.Ember.computed.alias("matchmakingService.isMatchNotFound"),
                isNotSearching: s.Ember.computed.alias("matchmakingService.isNotSearching"),
                notQueued: s.Ember.computed.and("isMatchNotFound", "isNotSearching"),
                playerControlTooltipText: s.Ember.computed("showPartyOwnerTools", "showPartyOwnerTools", "tra", "tra.captain_controls_tooltip", "tra.player_controls_tooltip", (function() {
                    return this.get("showPartyOwnerTools") ? this.get("tra.captain_controls_tooltip") : this.get("tra.player_controls_tooltip")
                })),
                showPositionSelector: s.Ember.computed("member", "lobbiesService.showPositionSelector", (function() {
                    return !!this.get("member") && !!this.get("lobbiesService.showPositionSelector")
                })),
                observeCurrentPlayerIsLeader: s.Ember.observer("currentPlayerIsLeader", (function() {
                    s.Ember.run.once(this, this._onCurrentPlayerIsLeader)
                })),
                _onCurrentPlayerIsLeader: function() {
                    this.set("_transferringLeadership", !1)
                },
                isFriended: s.Ember.computed("member", "member.summonerId", "chatService.friends.[]", (function() {
                    return this.get("chatService").isFriend(this.get("member.summonerId"))
                })),
                contextMenuModel: s.Ember.computed("showPartyOwnerTools", "showPlayerOptionsTools", "showPartyMemberTools", "hasInvitePrivileges", "isMe", "member", "isFriended", "tra.ready", "tra.context_menu_promote_to_leader", "tra.context_menu_kick", "tra.context_menu_friend_request", "tra.context_menu_block", "tra.context_menu_revoke_invite_privilege", "tra.context_menu_grant_invite_privilege", "tra.context_menu_view_profile", (function() {
                    const e = this.get("isFriended"),
                        t = this.get("showPartyOwnerTools"),
                        n = this.get("showPartyOwnerTools") || !e || this.get("showPartyMemberTools");
                    return !this.get("isMe") && this.get("member") && n ? t ? [{
                        action: function() {
                            this.send("promoteToOwner")
                        },
                        class: "promote",
                        target: this,
                        label: this.get("tra.context_menu_promote_to_leader")
                    }, {
                        action: function() {
                            this.send("kick")
                        },
                        class: "kick",
                        target: this,
                        label: this.get("tra.context_menu_kick")
                    }, {
                        action: function() {
                            this.send("sendFriendRequest")
                        },
                        class: "add-friend",
                        target: this,
                        label: this.get("tra.context_menu_friend_request"),
                        hidden: e
                    }, {
                        action: function() {
                            this.send("toggleInvitePrivilege")
                        },
                        class: this.get("hasInvitePrivileges") ? "revoke-invite" : "grant-invite",
                        target: this,
                        label: this.get("hasInvitePrivileges") ? this.get("tra.context_menu_revoke_invite_privilege") : this.get("tra.context_menu_grant_invite_privilege")
                    }, {
                        action: function() {
                            this.send("viewProfile")
                        },
                        class: "view-profile",
                        target: this,
                        label: this.get("tra.context_menu_view_profile")
                    }] : [{
                        action: function() {
                            this.send("sendFriendRequest")
                        },
                        class: "add-friend",
                        target: this,
                        label: this.get("tra.context_menu_friend_request"),
                        hidden: e
                    }, {
                        action: function() {
                            this.send("block")
                        },
                        class: "block",
                        target: this,
                        label: this.get("tra.context_menu_block")
                    }, {
                        action: function() {
                            this.send("viewProfile")
                        },
                        class: "view-profile",
                        target: this,
                        label: this.get("tra.context_menu_view_profile")
                    }] : null
                })),
                promotePlayer: function() {
                    const e = this.get("member");
                    if (!e || !e.summonerId) throw new Error("Attempting to act on invalid party member: " + e);
                    this.set("_transferringLeadership", !0), this.get("lobbiesService").transferLeadershipToPlayer(e.summonerId)
                },
                blockPlayer: function(e) {
                    this.get("api.chat").post("/v1/blocked-players", e)
                },
                sendFriendRequest: function(e) {
                    this.get("api.chat").post("/v2/friend-requests", e)
                },
                viewProfile: function(e) {
                    return (0, s.getProvider)().getOptional("rcp-fe-lol-profiles").then((t => {
                        t.showOverlay({
                            summonerId: e.summonerId
                        })
                    }), (e => {
                        s.logger.error("Provider getOptional failure")
                    }))
                },
                actions: {
                    openPlayerMenu: function() {
                        this.get("contextMenuModel") && (this.contextMenuManager.setMenuItems(this.get("contextMenuModel")), this.contextMenuManager.openAtEvent(event))
                    },
                    sendFriendRequest: function() {
                        if (this.get("member")) {
                            const e = {
                                direction: "out",
                                puuid: this.get("puuid")
                            };
                            this.sendFriendRequest(e), this.set("isFriended", !0);
                            const t = this.get("tra").formatString("context_menu_friend_request_sent_to", {
                                summonerName: this.get("member.displayName.playerNameFull")
                            });
                            this.showToast(t)
                        }
                    },
                    kick: async function() {
                        if (!this.get("member")) throw new ReferenceError("game-select-lobby-panel-teams-player component must have a member");
                        const {
                            playerName: e
                        } = await this.get("playerNames").getDisplayNameByPUUID(this.get("puuid")), t = this.get("tra").formatString("lobby_kick_confirmation_text", {
                            summonerName: e
                        }), n = this.$(`<lol-uikit-content-block type="dialog-small">\n          <p>${t}</p>\n        </lol-uikit-content-block>`), s = this.get("member.summonerId");
                        if (this.get("currentPlayerIsLeader") && !this.get("_transferringLeadership")) {
                            this.showModal({
                                type: "DialogConfirm",
                                data: {
                                    contents: n,
                                    acceptText: this.get("tra.parties_button_kick"),
                                    declineText: this.get("tra.parties_button_cancel"),
                                    onAccept: () => {
                                        this.get("lobbiesService").removePlayerFromParty(s)
                                    }
                                }
                            }).domNode.classList.add("parties-kick-player-modal")
                        }
                    },
                    toggleInvitePrivilege: function() {
                        const e = this.get("member"),
                            t = this.get("currentPlayerIsLeader");
                        if (!this.get("_transferringLeadership") && t && e && !this.get("isMe")) {
                            const t = e.allowedInviteOthers ? "revoke-invite" : "grant-invite",
                                n = this.get("member.summonerId");
                            this.get("lobbiesService").sendInvitePrivilegeAction(n, t)
                        }
                    },
                    promoteToOwner: function() {
                        this.get("member") && this.promotePlayer()
                    },
                    block: function() {
                        if (this.get("member")) {
                            const e = {
                                summonerId: this.get("member.summonerId")
                            };
                            this.blockPlayer(e)
                        }
                    },
                    viewProfile: function() {
                        if (this.get("member")) {
                            const e = {
                                summonerId: this.get("member.summonerId")
                            };
                            return this.viewProfile(e)
                        }
                    }
                }
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "CzUy1y5D",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\player-party-controls-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\player-party-controls-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\player-party-controls-component\\\\index.js\\" "],["text","\\n"],["block",["if"],[["get",["isNotMe"]]],null,3],["text","\\n"],["block",["if"],[["get",["shouldShowGhostedBanner"]]],null,0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","lol-not-ready-loader"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","lol-not-ready-loader-segment"],["flush-element"],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","lol-not-ready-loader-segment"],["flush-element"],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","lol-not-ready-loader-segment"],["flush-element"],["close-element"],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n          "],["open-element","p",[]],["flush-element"],["text","\\n            "],["append",["unknown",["playerControlTooltipText"]],false],["text","\\n          "],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["v2-player-management-button"],null,[["type","action"],["options","openPlayerMenu"]],1]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["dynamic-attr","class",["concat",["player-party-tools ",["helper",["if"],[["get",["isMultiteamLobby"]],"player-party-tools__is-multiteam-lobby"],null]]]],["flush-element"],["text","\\n"],["block",["if"],[["get",["showPlayerOptionsTools"]]],null,2],["text","  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1),
                i = l(n(16)),
                o = l(n(74));
            n(319);
            var a = n(15);

            function l(e) {
                return e && e.__esModule ? e : {
                    default: e
                }
            }
            e.exports = s.Ember.Component.extend(o.default, {
                layout: n(320),
                classNames: ["v2-point-eligibility-component"],
                classNameBindings: ["isCustomGame:parties-point-eligibility-custom"],
                platformConfig: i.default,
                platformEternalsEnabled: s.Ember.computed.alias("platformConfig.eternalsEnabled"),
                lobbyChallengesEnabled: s.Ember.computed.alias("platformConfig.lobbyChallengesEnabled"),
                eternalsService: s.Ember.inject.service("eternals"),
                challengesService: s.Ember.inject.service("challenges"),
                isCustomGame: !1,
                tooltipConfig: s.Ember.computed("isCustomGame", "tooltipConfigCustom", "tooltipConfigParties", (function() {
                    return this.get("isCustomGame") ? this.get("tooltipConfigCustom") : this.get("tooltipConfigParties")
                })),
                tooltipConfigParties: {
                    targetAnchor: {
                        x: "center",
                        y: "bottom"
                    },
                    tooltipAnchor: {
                        x: "center",
                        y: "top"
                    },
                    offset: {
                        x: 0,
                        y: 5
                    }
                },
                tooltipConfigCustom: {
                    targetAnchor: {
                        x: "right",
                        y: "center"
                    },
                    tooltipAnchor: {
                        x: "left",
                        y: "center"
                    },
                    offset: {
                        x: 5,
                        y: 0
                    }
                },
                teamSize: s.Ember.computed("selected.maxPlaying", (function() {
                    if (a.MULTI_TEAM_GAME_MODES.includes(this.get("selected.gameMode"))) return this.get("tra.game_select_team_size_multiteam_lowercase");
                    const e = this.get("selected.maxPlaying");
                    return this.get("tra").formatString("game_select_team_size", {
                        size: e
                    })
                })),
                xpEnabled: s.Ember.computed.alias("selected.queue.queueRewards.isXpEnabled"),
                xpDisabledClass: s.Ember.computed("xpEnabled", (function() {
                    return this.get("xpEnabled") ? "" : "disabled"
                })),
                championMasteryEnabled: s.Ember.computed.alias("selected.queue.queueRewards.isChampionPointsEnabled"),
                championMasteryDisabledClass: s.Ember.computed("championMasteryEnabled", (function() {
                    return this.get("championMasteryEnabled") ? "" : "disabled"
                })),
                eternalsEnabledForQueue: s.Ember.computed("eternalsService.enabledQueues", "selected.queue.id", (function() {
                    const e = this.get("selected.queue.id"),
                        t = this.get("eternalsService.enabledQueues");
                    return !(!t || null === t) && t.includes(e)
                })),
                eternalsDisabledClass: s.Ember.computed("eternalsEnabledForQueue", (function() {
                    return this.get("eternalsEnabledForQueue") ? "" : "disabled"
                })),
                challengesEnabledForQueue: s.Ember.computed("challengesService.enabledQueues", "selected.queue.id", (function() {
                    const e = this.get("selected.queue.id"),
                        t = this.get("challengesService.enabledQueues");
                    return !!t && t.includes(e)
                })),
                challengesDisabledClass: s.Ember.computed("challengesEnabledForQueue", (function() {
                    return this.get("challengesEnabledForQueue") ? "" : "disabled"
                }))
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "JuDbw4MC",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\point-eligibility-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\point-eligibility-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\point-eligibility-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","lobby-point-eligibility-content"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","point-eligibility-icon"],["flush-element"],["close-element"],["text","\\n"],["close-element"],["text","\\n\\n"],["block",["uikit-tooltip"],null,[["tooltipConfig"],[["get",["tooltipConfig"]]]],2],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["open-element","li",[]],["dynamic-attr","class",["concat",["lobby-point-eligibility-tooltip-content-challenges ",["unknown",["challengesDisabledClass"]]]]],["flush-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","lobby-point-eligibility-tooltip-content-challenges-icon"],["flush-element"],["text","\\n        "],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","lobby-point-eligibility-tooltip-content-description"],["flush-element"],["text","\\n          "],["append",["unknown",["tra","challenges_point_eligibility_tooltip_challenges"]],false],["text","\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","li",[]],["dynamic-attr","class",["concat",["lobby-point-eligibility-tooltip-content-eternals ",["unknown",["eternalsDisabledClass"]]]]],["flush-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","lobby-point-eligibility-tooltip-content-eternals-icon"],["flush-element"],["text","\\n        "],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","lobby-point-eligibility-tooltip-content-description"],["flush-element"],["text","\\n          "],["append",["unknown",["tra","parties_point_eligibility_tooltip_eternals"]],false],["text","\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","lol-uikit-content-block",[]],["static-attr","padding","medium"],["static-attr","class","lobby-point-eligibility-tooltip-content"],["flush-element"],["text","\\n\\n    "],["open-element","div",[]],["static-attr","class","lobby-point-eligibility-tooltip-content-header"],["flush-element"],["text","\\n      "],["open-element","div",[]],["dynamic-attr","class",["concat",["lobby-header-map-icon ",["unknown",["mapBackgroundClass"]]]]],["flush-element"],["close-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","lobby-point-eligibility-tooltip-content-header-title"],["flush-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","lobby-point-eligibility-tooltip-content-header-map"],["flush-element"],["append",["unknown",["mapName"]],false],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","lobby-point-eligibility-tooltip-content-header-mode"],["flush-element"],["append",["unknown",["queueName"]],false],["text"," "],["append",["unknown",["pickTypeName"]],false],["text"," ("],["append",["unknown",["teamSize"]],false],["text",")"],["close-element"],["text","\\n      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n\\n    "],["open-element","div",[]],["static-attr","class","lobby-point-eligibility-tooltip-content-divider-container"],["flush-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","lobby-point-eligibility-tooltip-content-divider"],["flush-element"],["close-element"],["text","\\n    "],["close-element"],["text","\\n\\n    "],["open-element","h6",[]],["static-attr","class","lobby-point-eligibility-tooltip-content-title"],["flush-element"],["text","\\n      "],["append",["unknown",["tra","parties_point_eligibility_tooltip_title"]],false],["text","\\n    "],["close-element"],["text","\\n\\n    "],["open-element","ul",[]],["static-attr","class","lobby-point-eligibility-tooltip-content-list"],["flush-element"],["text","\\n      "],["open-element","li",[]],["dynamic-attr","class",["concat",["lobby-point-eligibility-tooltip-content-experience ",["unknown",["xpDisabledClass"]]]]],["flush-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","lobby-point-eligibility-tooltip-content-experience-icon"],["flush-element"],["text","\\n        "],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","lobby-point-eligibility-tooltip-content-description"],["flush-element"],["text","\\n          "],["append",["unknown",["tra","parties_point_eligibility_tooltip_experience"]],false],["text","\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n      "],["open-element","li",[]],["dynamic-attr","class",["concat",["lobby-point-eligibility-tooltip-content-mastery ",["unknown",["championMasteryDisabledClass"]]]]],["flush-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","lobby-point-eligibility-tooltip-content-mastery-icon"],["flush-element"],["text","\\n        "],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","lobby-point-eligibility-tooltip-content-description"],["flush-element"],["text","\\n          "],["append",["unknown",["tra","parties_point_eligibility_tooltip_masteries"]],false],["text","\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n\\n"],["block",["if"],[["get",["platformEternalsEnabled"]]],null,1],["text","\\n"],["block",["if"],[["get",["lobbyChallengesEnabled"]]],null,0],["text","    "],["close-element"],["text","\\n\\n  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1),
                i = n(109);
            n(322);
            e.exports = s.Ember.Component.extend({
                layout: n(323),
                classNames: ["v2-position-selector-component"],
                isInQueue: !1,
                lobbiesService: s.Ember.inject.service("lobbies"),
                partySettingsService: s.Ember.inject.service("party-settings"),
                currentTeamIsFull: s.Ember.computed.alias("lobbiesService.currentTeamIsFull"),
                currentPartyMembers: s.Ember.computed.alias("lobbiesService.currentPartyMembers"),
                currentPartySize: s.Ember.computed.alias("lobbiesService.currentPartySize"),
                scarcePositions: s.Ember.computed.alias("lobbiesService.scarcePositions"),
                getPositionStyles(e) {
                    const t = this.element.querySelector(`.position-selector-button.${e}`);
                    if (!t) return "";
                    const n = t.getBoundingClientRect();
                    return `position: absolute; top: ${n.top-102}px; left: ${n.left+n.width/2-178}px;`
                },
                isPrimaryDisabled: s.Ember.computed("isInQueue", (function() {
                    return this.get("isInQueue")
                })),
                isSecondaryDisabled: s.Ember.computed("primaryPosition", "secondaryPosition", "isInQueue", (function() {
                    const e = this.get("primaryPosition"),
                        t = this.get("secondaryPosition");
                    return e === i.POSITIONS.UNSELECTED && t === i.POSITIONS.UNSELECTED || this.get("isInQueue")
                })),
                actions: {
                    openOverlay(e) {
                        const t = this.getPositionStyles(e);
                        this.sendAction("openOverlay", e, t)
                    }
                }
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "Q+2wf5Is",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\position-selector\\\\v2-position-selector\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\position-selector\\\\v2-position-selector\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\position-selector\\\\v2-position-selector\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","position-selector-buttons-container"],["flush-element"],["text","\\n  "],["append",["helper",["v2-position-selector-button"],null,[["ordinal","position","disabled","handleClick"],["PRIMARY",["get",["primaryPosition"]],["get",["isPrimaryDisabled"]],["helper",["action"],[["get",[null]],"openOverlay"],null]]]],false],["text","\\n  "],["append",["helper",["v2-position-selector-button"],null,[["ordinal","position","disabled","hidden","handleClick"],["SECONDARY",["get",["secondaryPosition"]],["get",["isSecondaryDisabled"]],["get",["shouldHideSecondaryPosition"]],["helper",["action"],[["get",[null]],"openOverlay"],null]]]],false],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s, i = n(1),
                o = (s = n(74)) && s.__esModule ? s : {
                    default: s
                };
            n(325);
            var a = n(109),
                l = n(5);
            const r = [a.POSITIONS.TOP, a.POSITIONS.JUNGLE, a.POSITIONS.MIDDLE, a.POSITIONS.BOTTOM, a.POSITIONS.UTILITY],
                c = [a.POSITIONS.JUNGLE, a.POSITIONS.BOTTOM];
            e.exports = i.Ember.Component.extend(o.default, {
                layout: n(326),
                classNames: ["horizontal-options-showcase"],
                classNameBindings: ["isQuickPlayModal:quick-play"],
                isQuickPlayModal: !1,
                isAnyPositionHovered: !1,
                lobbiesService: i.Ember.inject.service("lobbies"),
                isMap21: i.Ember.computed.alias("lobbiesService.isMap21"),
                init() {
                    this._super(...arguments);
                    const e = this.get("scarcePositions") || [];
                    this.get("isMap21") ? this.set("positionOptions", c.map((e => ({
                        position: e
                    })))) : this.set("positionOptions", r.map((t => ({
                        position: t,
                        inDemand: e.includes(t)
                    }))))
                },
                selectedPosition: i.Ember.computed("selectingOrdinal", "primaryPosition", "secondaryPosition", (function() {
                    const e = this.get("selectingOrdinal");
                    return e === a.POSITION_ROLES.PRIMARY ? this.get("primaryPosition") : e === a.POSITION_ROLES.SECONDARY ? this.get("secondaryPosition") : null
                })),
                isPrimaryCentered: i.Ember.computed("selectingOrdinal", "primaryPosition", "currentPartyIsFull", (function() {
                    return this.get("currentPartyIsFull") || this.get("selectingOrdinal") === a.POSITION_ROLES.PRIMARY && this.get("primaryPosition") === a.POSITIONS.FILL
                })),
                isAnimatingIntroObserver: i.Ember.on("didInsertElement", i.Ember.observer("isAnimatingIntro", (function() {
                    this.get("isAnimatingIntro") && this._startIntroAnimation()
                }))),
                isAnimatingOutroObserver: i.Ember.on("didInsertElement", i.Ember.observer("isAnimatingOutro", (function() {
                    this.get("isAnimatingOutro") && this._startOutroAnimation()
                }))),
                _initIntroAnimation() {
                    const e = this.element.querySelector("#lottie-intro-animation"),
                        t = this.element.querySelectorAll(".position-selector-option-container"),
                        n = this.element.querySelector(".horizontal-options-showcase-content"),
                        s = new i.gsap.TimelineMax({
                            paused: !0
                        });
                    s.add("start", "+=0"), e && (s.add((() => {
                        e && e.play()
                    }), "start"), s.fromTo(e, .1, {
                        opacity: 0
                    }, {
                        opacity: 1
                    }, "start"), s.fromTo(e, .5, {
                        opacity: 1
                    }, {
                        opacity: 0
                    }, "start+=0.1"), s.add((() => {
                        e && e.stop()
                    }), "start+=0.7")), n && s.add((() => n.classList.add("no-overflow")), "start");
                    for (let e = 0; e < t.length; e++) {
                        const n = t[e];
                        s.fromTo(n, .12, {
                            y: 25
                        }, {
                            y: 0
                        }, "start+=" + (.0175 * e + .03))
                    }
                    s.add((() => {
                        this.sendAction("completeIntroAnimation")
                    }), "start+=0.7"), s.eventCallback("onComplete", (() => {
                        n.classList.remove("no-overflow")
                    })), this.set("introAnimation", s)
                },
                _initOutroAnimation() {
                    const e = this.get("selectingOrdinal"),
                        t = this.element.querySelector("#outro-base"),
                        n = this.element.querySelector("#outro-magic"),
                        s = this.element.querySelector(".horizontal-options-showcase-content"),
                        o = this.element.querySelector(".horizontal-options-showcase-background"),
                        r = new i.gsap.TimelineMax({
                            paused: !0
                        });
                    r.add("start", "+=0"), t && r.add((() => {
                        t && t.play()
                    }), "start"), n && r.add((() => {
                        n && n.play()
                    }), "start"), s && r.to(s, .2, {
                        opacity: 0
                    }, "start"), o && r.to(o, .2, {
                        opacity: 0
                    }, "start"), r.add((() => {
                        t.pause(), n.pause(), this.sendAction("completeOutroAnimation")
                    }), "start+=0.5"), r.eventCallback("onComplete", (() => {
                        s.removeAttribute("style"), o.removeAttribute("style")
                    }));
                    const c = e === a.POSITION_ROLES.PRIMARY ? l.SFX_URLS.SFX_RADIALMENU_PRIMARY_CLOSE : l.SFX_URLS.SFX_RADIALMENU_SECONDARY_CLOSE;
                    r.add((() => {
                        this.playSound(c)
                    }), "start"), this.set("outroAnimation", r)
                },
                _startIntroAnimation() {
                    this.get("introAnimation") || this._initIntroAnimation();
                    const e = this.get("introAnimation");
                    e && e.restart()
                },
                _startOutroAnimation() {
                    this.get("outroAnimation") || this._initOutroAnimation();
                    const e = this.get("outroAnimation");
                    e && e.restart()
                },
                actions: {
                    selectPosition(e, t) {
                        this.sendAction("selectPosition", e, t)
                    },
                    setIsPositionHovered(e) {
                        this.set("isAnyPositionHovered", e)
                    }
                }
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "LqZIGS3E",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\position-selector\\\\v2-horizontal-options-showcase\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\position-selector\\\\v2-horizontal-options-showcase\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\position-selector\\\\v2-horizontal-options-showcase\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","horizontal-options-showcase-background"],["flush-element"],["text","\\n"],["close-element"],["text","\\n"],["open-element","div",[]],["static-attr","class","horizontal-options-showcase-content"],["flush-element"],["text","\\n"],["block",["each"],[["get",["positionOptions"]]],null,2],["block",["unless"],[["get",["isQuickPlayModal"]]],null,1],["close-element"],["text","\\n\\n"],["block",["unless"],[["get",["isQuickPlayModal"]]],null,0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["comment"," animation elements "],["text","\\n  "],["open-element","div",[]],["static-attr","class","animations-wrapper"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","animation-intro-container"],["flush-element"],["text","\\n      "],["open-element","lol-uikit-lottie",[]],["static-attr","id","lottie-intro-animation"],["static-attr","src","/fe/lol-parties/lottie/parties-v2/intro-role-selector.json"],["static-attr","autoplay","false"],["static-attr","loop","true"],["flush-element"],["close-element"],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","animation-outro-base-container"],["flush-element"],["text","\\n      "],["open-element","lol-uikit-video",[]],["static-attr","class","animation-outro"],["static-attr","id","outro-base"],["static-attr","fade-in","0"],["static-attr","fade-out","0"],["static-attr","preload",""],["static-attr","src","/fe/lol-parties/parties-v2/outro-role-selector.webm"],["flush-element"],["close-element"],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","div",[]],["dynamic-attr","class",["concat",["animation-outro-magic-container ",["helper",["if"],[["get",["isPrimaryCentered"]],"centered"],null]]]],["flush-element"],["text","\\n      "],["open-element","lol-uikit-video",[]],["static-attr","class","animation-outro"],["static-attr","id","outro-magic"],["static-attr","fade-in","0"],["static-attr","fade-out","0"],["static-attr","preload",""],["static-attr","src","/fe/lol-parties/parties-v2/outro-role-selector-magic.webm"],["flush-element"],["close-element"],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","animation-button-icon"],["flush-element"],["text","\\n      "],["append",["helper",["v2-position-selector-button"],null,[["ordinal","position"],["PRIMARY",["get",["selectedPosition"]]]]],false],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","horizontal-options-showcase-vertical-divider"],["flush-element"],["close-element"],["text","\\n    "],["append",["helper",["v2-position-selector-option"],null,[["position","primaryPosition","secondaryPosition","ordinal","isAnyPositionHovered","selectPosition","setIsPositionHovered","useGenerousHitbox"],["FILL",["get",["primaryPosition"]],["get",["secondaryPosition"]],["get",["selectingOrdinal"]],["get",["isAnyPositionHovered"]],["helper",["action"],[["get",[null]],"selectPosition"],null],["helper",["action"],[["get",[null]],"setIsPositionHovered"],null],true]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["append",["helper",["v2-position-selector-option"],null,[["position","inDemand","primaryPosition","secondaryPosition","shouldHideNonScarcePositions","ordinal","isQuickPlayModal","isAnyPositionHovered","selectPosition","setIsPositionHovered","useGenerousHitbox"],[["get",["positionOption","position"]],["get",["positionOption","inDemand"]],["get",["primaryPosition"]],["get",["secondaryPosition"]],["get",["shouldHideNonScarcePositions"]],["get",["selectingOrdinal"]],["get",["isQuickPlayModal"]],["get",["isAnyPositionHovered"]],["helper",["action"],[["get",[null]],"selectPosition"],null],["helper",["action"],[["get",[null]],"setIsPositionHovered"],null],true]]],false],["text","\\n"]],"locals":["positionOption"]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            n(328), e.exports = s.Ember.Component.extend({
                layout: n(329),
                classNames: ["v2-position-icon-component"],
                classNameBindings: ["position", "selected", "hovered", "inDemand", "isQuickPlayModal:quick-play"]
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "cvdA0fst",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\position-selector\\\\v2-position-icon\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\position-selector\\\\v2-position-icon\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\position-selector\\\\v2-position-icon\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["dynamic-attr","class",["concat",["position-image-container ",["unknown",["size"]]]]],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","position-image"],["flush-element"],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            n(331), e.exports = s.Ember.Component.extend({
                layout: n(332),
                classNames: ["v2-banner-position-icon-component"],
                isPrimary: !1,
                isQuickplayModal: !1,
                positionImagePath: s.Ember.computed("isQuickplayModal", "imagePath", "imagePathBlue", (function() {
                    return this.get("isQuickplayModal") ? this.get("imagePathBlue") : this.get("imagePath")
                })),
                imagePath: s.Ember.computed("position", "isPrimary", (function() {
                    const e = (this.get("position") || "").toLowerCase();
                    return `/fe/lol-parties/icon-position-banner-${this.get("isPrimary")?"primary":"secondary"}-${e}.png`
                })),
                imagePathBlue: s.Ember.computed("position", "isPrimary", (function() {
                    const e = (this.get("position") || "").toLowerCase();
                    this.get("isPrimary");
                    return `/fe/lol-parties/icon-position-button-${e}.png`
                }))
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "IPbK74Em",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\position-selector\\\\v2-banner-position-icon\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\position-selector\\\\v2-banner-position-icon\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\position-selector\\\\v2-banner-position-icon\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","position-image-container"],["flush-element"],["text","\\n  "],["open-element","img",[]],["static-attr","class","position-image"],["dynamic-attr","src",["unknown",["positionImagePath"]],null],["flush-element"],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s, i = n(1),
                o = (s = n(74)) && s.__esModule ? s : {
                    default: s
                },
                a = n(5);
            n(334);
            var l = n(109);
            const {
                RunMixin: r
            } = i.EmberAddons.EmberLifeline;
            e.exports = i.Ember.Component.extend(r, o.default, {
                layout: n(335),
                classNames: ["position-selector-button"],
                classNameBindings: ["ordinal", "position", "disabled:disabled", "hidden:hidden"],
                disabled: !1,
                hidden: !1,
                isHintAnimationVisible: i.Ember.computed("position", "disabled", (function() {
                    return this.get("position") === l.POSITIONS.UNSELECTED && !this.get("disabled")
                })),
                didInsertElement() {
                    this._super(...arguments), this.runTask((() => {
                        const e = this.element.querySelector("#lottie-intro-animation");
                        e && e.play()
                    }), 100)
                },
                positionImagePath: i.Ember.computed("position", (function() {
                    return `/fe/lol-parties/icon-position-button-${(this.get("position")||"").toLowerCase()}.png`
                })),
                actions: {
                    openOverlay: function(e) {
                        this.get("handleClick")(e), this.playSound(a.SFX_URLS.SFX_RADIALMENU_OPEN)
                    },
                    onHover() {
                        this.playSound(a.SFX_URLS.SFX_GOLD_HOVER)
                    }
                }
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "ZO3ulinT",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\position-selector\\\\v2-position-selector-button\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\position-selector\\\\v2-position-selector-button\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\position-selector\\\\v2-position-selector-button\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","position-selector-button-background"],["dynamic-attr","onmousedown",["helper",["action"],[["get",[null]],"openOverlay",["get",["ordinal"]]],null],null],["dynamic-attr","onmouseenter",["helper",["action"],[["get",[null]],"onHover"],null],null],["flush-element"],["text","\\n  "],["open-element","img",[]],["static-attr","class","position-image"],["dynamic-attr","src",["unknown",["positionImagePath"]],null],["flush-element"],["close-element"],["text","\\n"],["close-element"],["text","\\n"],["open-element","div",[]],["dynamic-attr","class",["concat",["position-selector-button-animation-container ",["helper",["if"],[["get",["isHintAnimationVisible"]],"visible"],null]]]],["flush-element"],["text","\\n  "],["open-element","lol-uikit-lottie",[]],["static-attr","id","lottie-intro-animation"],["static-attr","src","/fe/lol-parties/lottie/parties-v2/intro-role-selector-button.json"],["static-attr","autoplay","false"],["static-attr","loop","true"],["flush-element"],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            n(337);
            var i, o = (i = n(74)) && i.__esModule ? i : {
                    default: i
                },
                a = n(5),
                l = n(109);
            e.exports = s.Ember.Component.extend(o.default, {
                layout: n(338),
                classNames: ["v2-position-selector-option"],
                classNameBindings: ["position", "isPositionAlreadySelected:already-selected", "inDemand", "hovered", "showPositionText:show-text", "isFill:fill", "isQuickPlayModal:quick-play"],
                useGenerousHitbox: !1,
                hovered: !1,
                isAnyPositionHovered: !1,
                isFill: s.Ember.computed.equal("position", l.POSITIONS.FILL),
                lobbiesService: s.Ember.inject.service("lobbies"),
                isMap21: s.Ember.computed.alias("lobbiesService.isMap21"),
                isPositionAlreadySelected: s.Ember.computed("primaryPosition", "secondaryPosition", "position", (function() {
                    const e = this.get("position");
                    return this.get("primaryPosition") === e || this.get("secondaryPosition") === e
                })),
                showPositionSelectedText: s.Ember.computed("isPositionAlreadySelected", "isAnyPositionHovered", "isQuickPlayModal", (function() {
                    return !!this.get("isQuickPlayModal") && (this.get("isPositionAlreadySelected") && !this.get("isAnyPositionHovered"))
                })),
                showPositionText: s.Ember.computed.or("showPositionSelectedText", "hovered"),
                positionText: s.Ember.computed("tra", "position", (function() {
                    const e = this.get("position");
                    return this.get("isMap21") && e === l.POSITIONS.BOTTOM ? e ? this.get(`tra.parties_position_${l.MAP21_LANE_ROLE.toLowerCase()}`) : "" : e ? this.get(`tra.parties_position_${e.toLowerCase()}`) : ""
                })),
                shouldShow: s.Ember.computed("shouldHideNonScarcePositions", "inDemand", "isFill", (function() {
                    const e = this.get("shouldHideNonScarcePositions"),
                        t = this.get("inDemand"),
                        n = this.get("isFill");
                    return !e || t || n
                })),
                actions: {
                    handlePositionSelected(e, t) {
                        this.get("selectPosition")(e, t), this.playSound(a.SFX_URLS.SFX_RADIALMENU_ROLE_SELECT)
                    },
                    onHoverIn() {
                        this.playSound(a.SFX_URLS.SFX_RADIALMENU_ROLE_HOVER), this.set("hovered", !0), this.sendAction("setIsPositionHovered", !0)
                    },
                    onHoverOut() {
                        this.set("hovered", !1), this.sendAction("setIsPositionHovered", !1)
                    }
                }
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "Xk/L1Euc",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\position-selector\\\\v2-position-selector-option\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\position-selector\\\\v2-position-selector-option\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\position-selector\\\\v2-position-selector-option\\\\index.js\\" "],["text","\\n"],["block",["if"],[["get",["shouldShow"]]],null,0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","position-selector-option-container"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","position-selector-text position"],["flush-element"],["text","\\n      "],["append",["unknown",["positionText"]],false],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","div",[]],["dynamic-attr","class",["concat",["position-selector-text in-demand ",["helper",["if"],[["get",["inDemand"]],"visible"],null]]]],["flush-element"],["text","\\n      "],["append",["unknown",["tra","parties_position_in_demand"]],false],["text","\\n    "],["close-element"],["text","\\n    "],["append",["helper",["v2-position-icon"],null,[["position","selected","hovered","inDemand","isQuickPlayModal"],[["get",["position"]],["get",["isPositionAlreadySelected"]],["get",["hovered"]],["get",["inDemand"]],["get",["isQuickPlayModal"]]]]],false],["text","\\n  "],["close-element"],["text","\\n  "],["open-element","div",[]],["dynamic-attr","class",["concat",["position-selector-wrapper ",["helper",["if"],[["get",["useGenerousHitbox"]],"visible"],null]]]],["dynamic-attr","onmouseup",["helper",["action"],[["get",[null]],"handlePositionSelected",["get",["ordinal"]],["get",["position"]]],null],null],["dynamic-attr","onmouseenter",["helper",["action"],[["get",[null]],"onHoverIn"],null],null],["dynamic-attr","onmouseleave",["helper",["action"],[["get",[null]],"onHoverOut"],null],null],["flush-element"],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            n(340);
            e.exports = s.Ember.Component.extend({
                layout: n(341),
                classNames: ["selection-modal"],
                classNameBindings: ["isAnimatingOutro:is-closing", "isQuickPlayModal:quick-play"],
                selectingOrdinal: null,
                childrenPositionStyle: null,
                isQuickPlayModal: !1,
                init() {
                    this._super(...arguments), this.keypressEventHandler = this.keypressEventHandler.bind(this)
                },
                didInsertElement() {
                    this._super(...arguments), this.get("animationsEnabled") && this.set("isAnimatingIntro", !0), document.addEventListener("keyup", this.keypressEventHandler)
                },
                keypressEventHandler(e) {
                    27 === e.which && this._closeSelectionModal()
                },
                willDestroy() {
                    this._super(...arguments), document.removeEventListener("keyup", this.keypressEventHandler), this._closeSelectionModal()
                },
                _closeSelectionModal() {
                    if (this.get("isAnimatingOutro")) return;
                    this.set("isAnimatingIntro", !1), this.set("isAnimatingOutro", !1);
                    const e = this.get("selectingOrdinal");
                    this.sendAction("closeOverlay", e)
                },
                actions: {
                    selectPosition(e, t) {
                        this.sendAction("setPositionPreferences", e, t), this.get("animationsEnabled") ? this.set("isAnimatingOutro", !0) : this.sendAction("closeOverlay", e)
                    },
                    handleClick() {
                        this._closeSelectionModal()
                    },
                    onIntroAnimationComplete() {
                        this.set("isAnimatingIntro", !1)
                    },
                    onOutroAnimationComplete() {
                        this.set("isAnimatingOutro", !1), this._closeSelectionModal()
                    }
                }
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "TRHOfPQE",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\position-selector\\\\v2-position-selector-modal\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\position-selector\\\\v2-position-selector-modal\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\position-selector\\\\v2-position-selector-modal\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","selection-modal-wrapper"],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"handleClick"],null],null],["flush-element"],["close-element"],["text","\\n"],["open-element","div",[]],["static-attr","class","selection-modal-content"],["dynamic-attr","style",["unknown",["childrenPositionStyle"]],null],["flush-element"],["text","\\n  "],["append",["helper",["v2-horizontal-options-showcase"],null,[["isAnimatingIntro","isAnimatingOutro","scarcePositions","completeIntroAnimation","completeOutroAnimation","selectingOrdinal","primaryPosition","secondaryPosition","currentPartyIsFull","shouldHideNonScarcePositions","isQuickPlayModal","selectPosition"],[["get",["isAnimatingIntro"]],["get",["isAnimatingOutro"]],["get",["scarcePositions"]],["helper",["action"],[["get",[null]],"onIntroAnimationComplete"],null],["helper",["action"],[["get",[null]],"onOutroAnimationComplete"],null],["get",["selectingOrdinal"]],["get",["primaryPosition"]],["get",["secondaryPosition"]],["get",["currentPartyIsFull"]],["get",["shouldHideNonScarcePositions"]],["get",["isQuickPlayModal"]],"selectPosition"]]],false],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s, i = n(1),
                o = (s = n(74)) && s.__esModule ? s : {
                    default: s
                },
                a = n(18);
            n(343);
            e.exports = i.Ember.Component.extend(o.default, {
                layout: n(344),
                classNames: ["v2-parties-invite-info-panel"],
                currentPlayerCanInvite: !1,
                isCustom: !1,
                isTFT: !1,
                isNotTFT: i.Ember.computed.not("isTFT"),
                lobbiesService: i.Ember.inject.service("lobbies"),
                tftService: i.Ember.inject.service("tft"),
                activeMilestonesProgress: i.Ember.computed.alias("tftService.activeMilestonesProgress"),
                honorSuggestionsEnabled: i.Ember.computed.alias("lobbiesService.honorSuggestionsEnabled"),
                invitedPlayerIds: i.Ember.computed.alias("lobbiesService.invitedPlayerIds"),
                hasInvites: i.Ember.computed.gt("invites.length", 0),
                isNotCustom: i.Ember.computed.not("isCustom"),
                _tryingToViewProgression: !0,
                viewingProgression: i.Ember.computed.and("_tryingToViewProgression", "progressionEnabled", "isTFT", "showingState.isInViewport"),
                progressionEnabled: !0,
                _tryingToViewSuggested: !0,
                viewingSuggested: i.Ember.computed.and("_tryingToViewSuggested", "suggestedEnabled", "isNotTFT"),
                suggestedPlayers: i.Ember.computed.alias("lobbiesService.currentPartySuggestedPlayers"),
                panelIsCollapsed: !1,
                invites: i.Ember.computed("lobbiesService.invites.[]", "lobbiesService.currentPartyLeader", (function() {
                    const e = this.get("lobbiesService.invites"),
                        t = this.get("lobbiesService.currentPartyLeader");
                    return e.filter((e => e.toSummonerId !== t.summonerId))
                })),
                suggestedInvites: i.Ember.computed("suggestedPlayers.[]", "suggestedPlayers.@each.summonerId", "invitedPlayerIds.[]", (function() {
                    const e = this.get("suggestedPlayers") || [],
                        t = this.get("invitedPlayerIds");
                    let n = i.Ember.A(),
                        s = i.Ember.A(),
                        o = i.Ember.A();
                    return e.forEach((e => {
                        const i = e.get("summonerId");
                        t && t.indexOf(i) >= 0 || (e.get("reason") === a.SUGGESTED_TYPES.FRIEND ? n.push(e) : e.get("reason") === a.SUGGESTED_TYPES.HONORED ? o.push(e) : s.push(e))
                    })), n = n.sortBy("summonerName"), s = s.sortBy("summonerName"), o = o.sortBy("gameId").reverse().slice(0, 2), s.forEach((e => {
                        n.push(e)
                    })), n.forEach((e => {
                        o.push(e)
                    })), this.get("isTFT") ? (n.length > 4 && (n = n.slice(0, 3)), n) : o
                })),
                noSuggestedInvites: i.Ember.computed.equal("suggestedInvites.length", 0),
                currentPlayerCannotInvite: i.Ember.computed.not("currentPlayerCanInvite"),
                suggestedDisabled: i.Ember.computed.or("noSuggestedInvites", "currentPlayerCannotInvite", "isCustom"),
                suggestedEnabled: i.Ember.computed.not("suggestedDisabled"),
                suggestedTooltipDescription: i.Ember.computed("tra.suggested_info_tooltip_description", (function() {
                    return this.get("tra.suggested_info_tooltip_description")
                })),
                suggestedTooltipRecentlyHonoredText: i.Ember.computed("tra.suggested_info_tooltip_recently_honored", (function() {
                    return this.get("tra.suggested_info_tooltip_recently_honored")
                })),
                suggestedTooltipRecentlyPlayedText: i.Ember.computed("tra.suggested_info_tooltip_recently_played", (function() {
                    return this.get("tra.suggested_info_tooltip_recently_played")
                })),
                suggestedTooltipFriendText: i.Ember.computed("tra.suggested_info_tooltip_friend", (function() {
                    return this.get("tra.suggested_info_tooltip_friend")
                })),
                actions: {
                    viewSuggested() {
                        (!this.get("suggestedDisabled") && !this.get("_tryingToViewSuggested") || this.get("viewingProgression")) && (this.set("_tryingToViewSuggested", !0), this.set("_tryingToViewProgression", !1), this.playSound("/fe/lol-uikit/sfx-uikit-text-click-small.ogg"))
                    },
                    viewInvited() {
                        (this.get("_tryingToViewSuggested") || this.get("viewingProgression")) && (this.set("_tryingToViewSuggested", !1), this.set("_tryingToViewProgression", !1), this.playSound("/fe/lol-uikit/sfx-uikit-text-click-small.ogg"))
                    },
                    viewProgression() {
                        this.set("_tryingToViewSuggested", !1), this.set("_tryingToViewProgression", !0), this.playSound("/fe/lol-uikit/sfx-uikit-text-click-small.ogg")
                    },
                    toggleCollapsed() {
                        this.toggleProperty("panelIsCollapsed"), this.get("element").classList.toggle("collapsed"), this.playSound("/fe/lol-uikit/sfx-uikit-text-click-small.ogg")
                    }
                }
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "XkF5tDmh",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\invite-info-panel\\\\component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\invite-info-panel\\\\component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\invite-info-panel\\\\component\\\\index.js\\" "],["text","\\n"],["block",["if"],[["get",["isTFT"]]],null,16,15],["text","\\n"],["open-element","div",[]],["dynamic-attr","class",["concat",["parties-invite-info-panel-body ",["helper",["if"],[["get",["panelIsCollapsed"]],"collapsed"],null]]]],["flush-element"],["text","\\n  "],["open-element","ul",[]],["dynamic-attr","class",["concat",["parties-invite-info-panel-list\\n  ",["helper",["if"],[["get",["viewingSuggested"]],"viewing-suggested"],null],"\\n  ",["helper",["if"],[["get",["isCustom"]],"parties-invite-info-is-custom"],null]]]],["flush-element"],["text","\\n"],["block",["if"],[["get",["viewingSuggested"]]],null,10,8],["text","  "],["close-element"],["text","\\n"],["close-element"],["text","\\n\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","        "],["open-element","li",[]],["static-attr","class","parties-invite-info-empty"],["flush-element"],["text","\\n          "],["open-element","span",[]],["static-attr","class","parties-invite-info-empty-text"],["flush-element"],["text","\\n            "],["append",["unknown",["tra","custom_game_invited_panel_no_invites"]],false],["text","\\n          "],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["append",["helper",["v2-invite-info-panel-player"],null,[["currentPlayerCanInvite","invitedPlayer","isSuggested","isTFT"],[["get",["currentPlayerCanInvite"]],["get",["invite"]],false,["get",["isTFT"]]]]],false],["text","\\n"]],"locals":["invite"]},{"statements":[["block",["each"],[["get",["invites"]]],[["key"],["toSummonerId"]],1]],"locals":[]},{"statements":[["text","            "],["append",["helper",["v2-invite-info-panel-player"],null,[["currentPlayerCanInvite","player","isSuggested","isTFT"],[["get",["currentPlayerCanInvite"]],["get",["suggestedPlayer"]],true,["get",["isTFT"]]]]],false],["text","\\n"]],"locals":["suggestedPlayer"]},{"statements":[["block",["each"],[["get",["suggestedInvites"]]],null,3]],"locals":[]},{"statements":[["block",["unless"],[["get",["suggestedDisabled"]]],null,4]],"locals":[]},{"statements":[["block",["if"],[["get",["isTFT"]]],null,5],["block",["if"],[["get",["hasInvites"]]],null,2,0],["text","    "]],"locals":[]},{"statements":[["text","      "],["append",["helper",["invite-info-panel-tft-progression"],null,[["class","activeMilestonesProgress"],["tft-progression",["get",["activeMilestonesProgress"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["viewingProgression"]]],null,7,6]],"locals":[]},{"statements":[["text","        "],["append",["helper",["v2-invite-info-panel-player"],null,[["currentPlayerCanInvite","player","isSuggested","isTFT"],[["get",["currentPlayerCanInvite"]],["get",["suggestedPlayer"]],true,["get",["isTFT"]]]]],false],["text","\\n"]],"locals":["suggestedPlayer"]},{"statements":[["block",["each"],[["get",["suggestedInvites"]]],null,9]],"locals":[]},{"statements":[["text","  "],["comment"," Do not show tabbed header with suggested if invite info only "],["text","\\n  "],["open-element","div",[]],["static-attr","class","custom-invite-header"],["flush-element"],["text","\\n    "],["open-element","span",[]],["static-attr","class","custom-invite-header-text"],["flush-element"],["text","\\n      "],["append",["unknown",["tra","custom_game_invited_panel_title"]],false],["text"," ("],["append",["unknown",["invites","length"]],false],["text",")\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","            "],["open-element","lol-uikit-content-block",[]],["static-attr","class","invite-header-suggested-tooltip-content"],["flush-element"],["text","\\n              "],["open-element","p",[]],["static-attr","class","invite-header-suggested-tooltip-content-title"],["flush-element"],["text","\\n                "],["append",["unknown",["suggestedTooltipDescription"]],false],["text","\\n              "],["close-element"],["text","\\n\\n              "],["open-element","div",[]],["static-attr","class","invite-header-suggested-tooltip-content-divider-container"],["flush-element"],["text","\\n                "],["open-element","div",[]],["static-attr","class","invite-header-suggested-tooltip-content-divider"],["flush-element"],["close-element"],["text","\\n              "],["close-element"],["text","\\n\\n              "],["open-element","ul",[]],["static-attr","class","invite-header-suggested-tooltip-content-list"],["flush-element"],["text","\\n                "],["open-element","li",[]],["static-attr","class","invite-header-suggested-tooltip-content-honors"],["flush-element"],["text","\\n                  "],["open-element","img",[]],["static-attr","src","/fe/lol-parties/recently-honored-tooltip-icon.png"],["static-attr","class","invite-header-suggested-tooltip-content-honors-icon"],["flush-element"],["close-element"],["text","\\n                  "],["open-element","div",[]],["static-attr","class","invite-header-suggested-tooltip-content-description"],["flush-element"],["text","\\n                    "],["append",["unknown",["suggestedTooltipRecentlyHonoredText"]],false],["text","\\n                  "],["close-element"],["text","\\n                "],["close-element"],["text","\\n                "],["open-element","li",[]],["static-attr","class","invite-header-suggested-tooltip-content-friends"],["flush-element"],["text","\\n                  "],["open-element","img",[]],["static-attr","src","/fe/lol-parties/friend-tooltip-icon.png"],["static-attr","class","invite-header-suggested-tooltip-content-friend-icon"],["flush-element"],["close-element"],["text","\\n                  "],["open-element","div",[]],["static-attr","class","invite-header-suggested-tooltip-content-description"],["flush-element"],["text","\\n                    "],["append",["unknown",["suggestedTooltipFriendText"]],false],["text","\\n                  "],["close-element"],["text","\\n                "],["close-element"],["text","\\n                "],["open-element","li",[]],["static-attr","class","invite-header-suggested-tooltip-content-recently-played"],["flush-element"],["text","\\n                  "],["open-element","img",[]],["static-attr","src","/fe/lol-parties/recently-played-tooltip-icon.png"],["static-attr","class","invite-header-suggested-tooltip-content-recently-played-icon"],["flush-element"],["close-element"],["text","\\n                  "],["open-element","div",[]],["static-attr","class","invite-header-suggested-tooltip-content-description"],["flush-element"],["text","\\n                    "],["append",["unknown",["suggestedTooltipRecentlyPlayedText"]],false],["text","\\n                  "],["close-element"],["text","\\n                "],["close-element"],["text","\\n              "],["close-element"],["text","\\n            "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["open-element","div",[]],["static-attr","class","invite-header-suggested-info-icon"],["flush-element"],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipPosition","padding"],["top","large"]],12],["text","          "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["dynamic-attr","class",["concat",["split-panel-header ",["helper",["if"],[["get",["viewingSuggested"]],"left-tab-active","right-tab-active"],null]]]],["flush-element"],["text","\\n    "],["open-element","a",[]],["static-attr","id","invite-header-suggested"],["dynamic-attr","class",["concat",["split-panel-header-title\\n        ",["helper",["if"],[["get",["viewingSuggested"]],"active"],null],"\\n        ",["helper",["if"],[["get",["suggestedDisabled"]],"disabled"],null]]]],["modifier",["action"],[["get",[null]],"viewSuggested"]],["flush-element"],["text","\\n        "],["append",["unknown",["tra","suggested_panel_lobby_title"]],false],["text","\\n\\n"],["block",["if"],[["get",["honorSuggestionsEnabled"]]],null,13],["text","    "],["close-element"],["text","\\n    "],["open-element","a",[]],["static-attr","id","invite-header-invited"],["dynamic-attr","class",["concat",["split-panel-header-title ",["helper",["if"],[["get",["viewingSuggested"]],"","active"],null]]]],["modifier",["action"],[["get",[null]],"viewInvited"]],["flush-element"],["text","\\n          "],["append",["unknown",["tra","invited_panel_title"]],false],["text"," ("],["append",["unknown",["invites","length"]],false],["text",")\\n    "],["close-element"],["text","\\n    "],["open-element","div",[]],["dynamic-attr","class",["concat",["split-panel-arrow ",["helper",["if"],[["get",["panelIsCollapsed"]],"collapsed"],null]]]],["modifier",["action"],[["get",[null]],"toggleCollapsed"]],["flush-element"],["close-element"],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["isNotCustom"]]],null,14,11]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["dynamic-attr","class",["concat",["split-panel-header ",["helper",["if"],[["get",["viewingProgression"]],"left-tab-active","right-tab-active"],null]]]],["flush-element"],["text","\\n    "],["open-element","a",[]],["static-attr","id","invite-header-progression"],["dynamic-attr","class",["concat",["split-panel-header-title\\n        ",["helper",["if"],[["get",["viewingProgression"]],"active"],null],"\\n        ",["helper",["unless"],[["get",["progressionEnabled"]],"disabled"],null]]]],["modifier",["action"],[["get",[null]],"viewProgression"]],["flush-element"],["text","\\n        "],["append",["unknown",["tra","tft_progression_panel_title"]],false],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","a",[]],["static-attr","id","invite-header-invited"],["dynamic-attr","class",["concat",["split-panel-header-title ",["helper",["if"],[["get",["viewingProgression"]],"","active"],null]]]],["modifier",["action"],[["get",[null]],"viewInvited"]],["flush-element"],["text","\\n          "],["append",["unknown",["tra","invited_panel_title"]],false],["text"," ("],["append",["unknown",["invites","length"]],false],["text",")\\n    "],["close-element"],["text","\\n    "],["open-element","div",[]],["dynamic-attr","class",["concat",["split-panel-arrow ",["helper",["if"],[["get",["panelIsCollapsed"]],"collapsed"],null]]]],["modifier",["action"],[["get",[null]],"toggleCollapsed"]],["flush-element"],["close-element"],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1),
                i = l(n(74)),
                o = l(n(122)),
                a = n(18);

            function l(e) {
                return e && e.__esModule ? e : {
                    default: e
                }
            }
            n(346);
            const r = (0, s.emberDataBinding)({
                Ember: s.Ember,
                websocket: (0, s.getProvider)().getSocket(),
                logPrefix: "parties:invite-info-panel-player:component",
                basePaths: {
                    lobby: "/lol-lobby"
                }
            });
            e.exports = s.Ember.Component.extend(r, i.default, o.default, {
                tagName: "li",
                classNames: "v2-parties-invite-info-panel-player",
                classNameBindings: ["isSuggested:parties-suggested-player", "showPendingIndicator:parties-pending-invite", "isKicked:parties-kicked-invite", "isDeclined:parties-declined-invite", "isAccepted:parties-accepted-invite", "isError:parties-error-invite", "currentPlayerCanInvite:enabled:disabled"],
                attributeBindings: ["summonerId"],
                customGamesService: s.Ember.inject.service("custom-games"),
                lobbiesService: s.Ember.inject.service("lobbies"),
                invitesService: s.Ember.inject.service("invites"),
                disabled: !1,
                _invitedFromSuggested: !1,
                _previousSummonerId: null,
                isSuggested: null,
                player: null,
                invitedPlayer: null,
                isTFT: null,
                summonerId: s.Ember.computed("player.summonerId", "invitedPlayer.toSummonerId", (function() {
                    return this.get("invitedPlayer.toSummonerId") || this.get("player.summonerId")
                })),
                isNotTFT: s.Ember.computed.not("isTFT"),
                recycle: s.Ember.computed("summonerId", (function() {
                    const e = this.get("summonerId");
                    e && e !== this.get("_previousSummonerId") && (this.set("_invitedFromSuggested", !1), this.set("_previousSummonerId", e))
                })),
                layout: n(347),
                name: s.Ember.computed("player.summonerName", "invitedPlayer.toSummonerName", (function() {
                    return this.get("player.summonerName") || this.get("invitedPlayer.toSummonerName") || ""
                })),
                isRecentlyHonored: s.Ember.computed.equal("player.reason", a.SUGGESTED_TYPES.HONORED),
                isFriend: s.Ember.computed.equal("player.reason", a.SUGGESTED_TYPES.FRIEND),
                isVictorious: s.Ember.computed.equal("player.reason", a.SUGGESTED_TYPES.VICTORIOUS),
                isPremade: s.Ember.computed.equal("player.reason", a.SUGGESTED_TYPES.PREMADE),
                isRecentlyPlayed: s.Ember.computed.or("isVictorious", "isPremade"),
                isPending: s.Ember.computed.equal("invitedPlayer.state", "Pending"),
                isAccepted: s.Ember.computed.equal("invitedPlayer.state", "Accepted"),
                isDeclined: s.Ember.computed.equal("invitedPlayer.state", "Declined"),
                isKicked: s.Ember.computed.equal("invitedPlayer.state", "Kicked"),
                isError: s.Ember.computed.equal("invitedPlayer.state", "Error"),
                showPendingIndicator: s.Ember.computed.or("isPending", "isRequested"),
                errorObserver: s.Ember.computed("isError", "name", (function() {
                    this.get("isError") && this.get("customGamesService.isCustomUI") && this.get("name") && this._showCustomBannedToast()
                })),
                _showCustomBannedToast: function() {
                    const e = this.get("lobbiesService.invitations") || [],
                        t = this.get("summonerId");
                    for (let n = 0; n < e.length; n++) {
                        const s = e[n];
                        if (s.get("toSummonerId").toString() !== t.toString() || !s.get("errorType").match(/NotInvitableException/)) continue;
                        const i = this.get("name"),
                            o = this.get("tra.formatString")("custom_game_invite_banned_error", {
                                summonerName: i
                            });
                        this.showToast(o);
                        break
                    }
                },
                actions: {
                    remove: function() {
                        this.get("lobbiesService").removeSuggestedPlayer(this.get("player.summonerId"))
                    }
                },
                click: function() {
                    if (this.get("isSuggested") && this.get("currentPlayerCanInvite") && !this.get("disabled") && !this.get("_invitedFromSuggested")) {
                        this.set("_invitedFromSuggested", !0), this.playSound("/fe/lol-uikit/sfx-uikit-generic-click-small.ogg");
                        const e = this.get("summonerId");
                        this.get("lobbiesService").removeSuggestedPlayer(e);
                        const t = this.get("name");
                        this.get("invitesService").invitePlayer(e, t)
                    }
                }
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "0MvdMfiF",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\invite-info-panel\\\\player-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\invite-info-panel\\\\player-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\invite-info-panel\\\\player-component\\\\index.js\\" "],["text","\\n"],["block",["if"],[["get",["showPendingIndicator"]]],null,7],["open-element","span",[]],["static-attr","class","invite-info-name"],["flush-element"],["text","\\n"],["block",["if"],[["get",["isNotTFT"]]],null,6],["text","  "],["append",["helper",["player-name"],null,[["format","summonerId"],["tooltip",["get",["summonerId"]]]]],false],["text","\\n"],["close-element"],["text","\\n"],["block",["if"],[["get",["isSuggested"]]],null,0],["comment"," Work around for Ember.computed to act like an observer. "],["text","\\n"],["open-element","div",[]],["static-attr","style","display: none;"],["flush-element"],["text","\\n  "],["append",["unknown",["recycle"]],false],["text"," "],["append",["unknown",["errorObserver"]],false],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["open-element","button",[]],["static-attr","class","parties-remove-suggested-player"],["modifier",["action"],[["get",[null]],"remove"],[["bubbles"],[false]]],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","img",[]],["static-attr","src","/fe/lol-parties/recently-played-default-icon.png"],["static-attr","class","invite-info-recently-played-icon"],["flush-element"],["close-element"],["text","\\n      "],["open-element","img",[]],["static-attr","src","/fe/lol-parties/recently-played-hover-icon.png"],["static-attr","class","invite-info-recently-played-hover-icon"],["flush-element"],["close-element"],["text","\\n    "]],"locals":[]},{"statements":[["block",["if"],[["get",["isRecentlyPlayed"]]],null,1]],"locals":[]},{"statements":[["text","      "],["open-element","img",[]],["static-attr","src","/fe/lol-parties/friend-default-icon.png"],["static-attr","class","invite-info-friend-icon"],["flush-element"],["close-element"],["text","\\n      "],["open-element","img",[]],["static-attr","src","/fe/lol-parties/friend-hover-icon.png"],["static-attr","class","invite-info-friend-hover-icon"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["isFriend"]]],null,3,2]],"locals":[]},{"statements":[["text","      "],["open-element","img",[]],["static-attr","src","/fe/lol-parties/recently-honored-default-icon.png"],["static-attr","class","invite-info-recently-honored-icon"],["flush-element"],["close-element"],["text","\\n      "],["open-element","img",[]],["static-attr","src","/fe/lol-parties/recently-honored-hover-icon.png"],["static-attr","class","invite-info-recently-honored-hover-icon"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["isRecentlyHonored"]]],null,5,4]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","lol-pending-loader"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","lol-pending-loader-segment"],["flush-element"],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","lol-pending-loader-segment"],["flush-element"],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","lol-pending-loader-segment"],["flush-element"],["close-element"],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            n(349);
            const {
                RunMixin: i
            } = s.EmberAddons.EmberLifeline;
            e.exports = s.Ember.Component.extend(i, {
                layout: n(350),
                classNames: ["v2-parties-invite-panel-tft-progression"],
                tftService: s.Ember.inject.service("tft"),
                media: s.Ember.computed.alias("tftService.media"),
                previousMilestone: s.Ember.computed("activeMilestonesProgress.0.{isPaid,isLocked,pointsEarnedForMilestone,missionId,status,state}", (function() {
                    return s.Ember.copy(this.get("activeMilestonesProgress.0"))
                })),
                nextMilestone: s.Ember.computed("activeMilestonesProgress.1.{isPaid,isLocked,pointsEarnedForMilestone,missionId,status,state}", (function() {
                    return s.Ember.copy(this.get("activeMilestonesProgress.1"))
                })),
                actions: {
                    navigateToTft() {
                        s.Router.navigateTo("rcp-fe-lol-tft", {
                            page: "battle-pass"
                        })
                    },
                    claim(e) {
                        if (this.get("loadingTimeoutId")) return;
                        if ("REWARDABLE" !== e.state || "DUMMY" === e.status) return void this.send("navigateToTft");
                        const t = this.runTask((() => {
                            this.set("loadingTimeoutId", null)
                        }), 5e3);
                        this.set("loadingTimeoutId", t);
                        const n = this.get("tftService");
                        s.Telemetry.sendEvent("tft-claim-reward-button-clicked", e.missionInternalName), n.claimRewards(e)
                    }
                }
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "+Te//ibn",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\invite-info-panel\\\\tft-progression-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\invite-info-panel\\\\tft-progression-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\invite-info-panel\\\\tft-progression-component\\\\index.js\\" "],["text","\\n"],["block",["if"],[["get",["nextMilestone"]]],null,2,0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","progression-complete"],["modifier",["action"],[["get",[null]],"navigateToTft"]],["flush-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","progression-complete-title"],["flush-element"],["append",["unknown",["tra","tft_progression_complete_title"]],false],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","progression-complete-body"],["flush-element"],["append",["unknown",["tra","tft_progression_complete_body"]],false],["close-element"],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","              "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-small"],["flush-element"],["text","\\n                "],["open-element","p",[]],["flush-element"],["text","\\n                  "],["append",["unknown",["tra","tft_progression_description"]],false],["text","\\n                "],["close-element"],["text","\\n              "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","progression-milestone-container"],["flush-element"],["text","\\n        "],["open-element","lol-tft-battlepass-milestone",[]],["static-attr","size","small"],["static-attr","class","progression-milestone"],["dynamic-attr","milestone",["unknown",["previousMilestone"]],null],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"claim",["get",["previousMilestone"]]],null],null],["static-attr","is-smooth-progress","true"],["dynamic-attr","media",["unknown",["media"]],null],["flush-element"],["close-element"],["text","\\n        "],["open-element","lol-tft-battlepass-milestone",[]],["static-attr","size","small"],["static-attr","isSelected","false"],["static-attr","class","progression-milestone"],["dynamic-attr","milestone",["unknown",["nextMilestone"]],null],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"navigateToTft"],null],null],["static-attr","is-smooth-progress","true"],["dynamic-attr","media",["unknown",["media"]],null],["flush-element"],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","reward-container"],["modifier",["action"],[["get",[null]],"navigateToTft"]],["flush-element"],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipPosition","type"],["top","small"]],1],["text","            "],["open-element","div",[]],["static-attr","class","reward-label"],["flush-element"],["append",["unknown",["tra","tft_progression_next"]],false],["close-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","reward-title"],["flush-element"],["append",["unknown",["nextMilestone","title"]],false],["close-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","progress-container"],["flush-element"],["text","\\n                "],["open-element","div",[]],["static-attr","class","progress-current"],["flush-element"],["append",["unknown",["nextMilestone","pointsEarnedForMilestone"]],false],["close-element"],["text","\\n                "],["open-element","div",[]],["static-attr","class","progress-divider"],["flush-element"],["text","/"],["close-element"],["text","\\n                "],["open-element","div",[]],["static-attr","class","progress-total"],["flush-element"],["append",["unknown",["nextMilestone","pointsNeededForMilestone"]],false],["close-element"],["text","\\n            "],["close-element"],["text","\\n        "],["close-element"],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            n(352);
            const i = "NONE";
            e.exports = s.Ember.Component.extend({
                layout: n(353),
                classNames: ["banner-crystal-tooltip-component"],
                challengesSummary: null,
                crystalImagePath: "",
                categoryProgress: s.Ember.computed.alias("challengesSummary.categoryProgress"),
                positionPercentile: s.Ember.computed.alias("challengesSummary.positionPercentile"),
                overallChallengeLevel: s.Ember.computed.alias("challengesSummary.overallChallengeLevel"),
                totalChallengeScore: s.Ember.computed.alias("challengesSummary.totalChallengeScore"),
                pointsUntilNextRank: s.Ember.computed.alias("challengesSummary.pointsUntilNextRank"),
                isApex: s.Ember.computed.alias("challengesSummary.isApex"),
                apexLeaderboardPosition: s.Ember.computed.alias("challengesSummary.apexLeaderboardPosition"),
                progressTowardsNextChallengeLevel: s.Ember.computed("totalChallengeScore", "pointsUntilNextRank", (function() {
                    return this.get("totalChallengeScore") / this.get("pointsUntilNextRank")
                })),
                localizedChallengeLevel: s.Ember.computed("tra", "overallChallengeLevel", (function() {
                    const e = this.get("overallChallengeLevel") || i;
                    return this.get(`tra.challenge_level_${e.toLowerCase()}`)
                })),
                topPercentileText: s.Ember.computed("tra.challenge_percentile_players", "positionPercentile", (function() {
                    const e = this.get("positionPercentile");
                    return e ? e.toFixed(2) : ""
                })),
                toolTipPositionText: s.Ember.computed("isApex", "topPercentileText", "apexLeaderboardPosition", (function() {
                    if (this.get("isApex") || !1) {
                        return `#${this.get("apexLeaderboardPosition")}`
                    }
                    return `${this.get("topPercentileText")}%`
                })),
                categories: s.Ember.computed("categoryProgress", (function() {
                    return (this.get("categoryProgress") || []).filter((e => "LEGACY" !== e.category)).map((e => {
                        const t = e.level || i;
                        return {
                            category: e.category,
                            level: t,
                            percentage: e.percentage,
                            localizedCategory: this.get(`tra.challenge_category_${e.category}`),
                            localizedLevel: this.get(`tra.challenge_level_${t}`)
                        }
                    }))
                }))
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "meAWGG9/",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\banner-crystal-tooltip-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\banner-crystal-tooltip-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\banner-crystal-tooltip-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","overall-progress-container"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","overall-challenge-level-image-container"],["flush-element"],["text","\\n    "],["open-element","img",[]],["static-attr","class","overall-challenge-level-image"],["dynamic-attr","src",["concat",[["unknown",["crystalImagePath"]]]]],["flush-element"],["close-element"],["text","\\n  "],["close-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","overall-challenge-details-container"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","overall-header-container"],["flush-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","overall-title"],["flush-element"],["append",["unknown",["localizedChallengeLevel"]],false],["close-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","overall-header-separator"],["flush-element"],["close-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","overall-percentile"],["flush-element"],["append",["unknown",["toolTipPositionText"]],false],["close-element"],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","per-category-progress-container"],["flush-element"],["text","\\n"],["block",["each"],[["get",["categories"]]],null,0],["text","    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","        "],["open-element","div",[]],["static-attr","class","category-progress-radial-container"],["flush-element"],["text","\\n          "],["open-element","div",[]],["static-attr","class","category-progress-border"],["flush-element"],["close-element"],["text","\\n          "],["open-element","div",[]],["dynamic-attr","class",["concat",["category-icon ",["unknown",["categoryProgress","category"]]," color-",["unknown",["categoryProgress","level"]]]]],["flush-element"],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":["categoryProgress"]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s, i = n(1),
                o = (s = n(25)) && s.__esModule ? s : {
                    default: s
                };
            n(355), e.exports = i.Ember.Component.extend({
                layout: n(356),
                classNames: ["v2-banner-placeholder"],
                lobbiesService: i.Ember.inject.service("lobbies"),
                partySettingsService: i.Ember.inject.service("party-settings"),
                animationsEnabled: i.Ember.computed.alias("partySettingsService.bannerAnimationsEnabled"),
                pendingInvites: i.Ember.computed.alias("lobbiesService.pendingInvites"),
                partiesViewport: o.default,
                partiesViewportIsShowing: i.Ember.computed.alias("partiesViewport.isShowing"),
                placeholder: null,
                isInQueue: !1,
                partyInvitesAllowed: !1,
                invitedVideoSrc: "/fe/lol-parties/parties-v2/invited-banner.webm",
                videoPausedObserver: i.Ember.on("init", i.Ember.observer("partiesViewportIsShowing", (function() {
                    if (this.element && this.get("isInvitedBanner") && this.get("animationsEnabled")) {
                        const e = this.element.querySelector(".placeholder-invited-video");
                        if (e) {
                            const t = this.get("partiesViewportIsShowing");
                            e.paused && t && e.play()
                        }
                    }
                }))),
                isInvitedBanner: i.Ember.computed("isInQueue", "placeholder", "pendingInvites.[]", (function() {
                    if (this.get("isInQueue")) return !0;
                    const e = this.get("placeholder") || 0;
                    return this.get("pendingInvites").length > e
                })),
                actions: {
                    showInviteModal: function() {
                        this.get("partyInvitesAllowed") && this.sendAction("showInviteModal")
                    }
                }
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "1KfzH+Lg",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\banner-placeholder-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\banner-placeholder-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\banner-placeholder-component\\\\index.js\\" "],["text","\\n"],["block",["if"],[["get",["isInvitedBanner"]]],null,3],["text","\\n"],["block",["if"],[["get",["partyInvitesAllowed"]]],null,0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","invite-button-container"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","invite-button"],["flush-element"],["text","\\n      "],["append",["helper",["generic-button"],null,[["baseImgPath","overImgPath","downImgPath","onClick"],["/fe/lol-parties/banner-invite.png","/fe/lol-parties/banner-invite-hover.png","/fe/lol-parties/banner-invite-click.png",["helper",["action"],[["get",[null]],"showInviteModal"],null]]]],false],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","placeholder-invited-image"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","video",[]],["static-attr","class","placeholder-invited-video"],["static-attr","autoplay","true"],["static-attr","preload","auto"],["static-attr","loop","true"],["dynamic-attr","src",["unknown",["invitedVideoSrc"]],null],["flush-element"],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","placeholder-invited-container"],["flush-element"],["text","\\n"],["block",["if"],[["get",["animationsEnabled"]]],null,2,1],["text","  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            n(358), e.exports = s.Ember.Component.extend({
                layout: n(359),
                classNames: ["identity-tooltip-component"],
                challengesSummary: null,
                lobbyChallengesEnabled: !0,
                rankedData: null,
                selectedQueue: null,
                player: null,
                showRank: !1,
                crystalImagePath: "",
                summonerRegalia: null,
                summonerIconId: s.Ember.computed.alias("player.summonerIconId")
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "NH2E3Lds",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\identity-tooltip-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\identity-tooltip-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\identity-tooltip-component\\\\index.js\\" "],["text","\\n"],["block",["if"],[["get",["showRank"]]],null,3,2],["text","\\n"],["append",["helper",["summoner-icon-identity-tooltip"],null,[["player"],[["get",["player"]]]]],false],["text","\\n\\n"],["block",["if"],[["get",["lobbyChallengesEnabled"]]],null,0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","identity-tooltip-divider"],["flush-element"],["close-element"],["text","\\n\\n  "],["append",["helper",["v2-banner-crystal-tooltip"],null,[["challengesSummary","crystalImagePath"],[["get",["challengesSummary"]],["get",["crystalImagePath"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["append",["helper",["prestige-identity-tooltip"],null,[["player","summonerRegalia"],[["get",["player"]],["get",["summonerRegalia"]]]]],false],["text","\\n    "],["open-element","div",[]],["static-attr","class","identity-tooltip-divider"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["lobbyChallengesEnabled"]]],null,1]],"locals":[]},{"statements":[["text","  "],["append",["helper",["rank-identity-tooltip"],null,[["rankedData","selectedQueue","player"],[["get",["rankedData"]],["get",["selectedQueue"]],["get",["player"]]]]],false],["text","\\n  "],["open-element","div",[]],["static-attr","class","identity-tooltip-divider"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            n(361), e.exports = s.Ember.Component.extend({
                layout: n(362),
                classNames: ["rank-identity-tooltip-component"],
                rankedData: null,
                selectedQueue: null,
                player: null,
                useRankFromQueue: s.Ember.computed.alias("selectedQueue.isRanked"),
                highestRankTier: s.Ember.computed.alias("rankedData.highestRankedEntry.tier"),
                highestRankDivision: s.Ember.computed.alias("rankedData.highestRankedEntry.division"),
                highestRankLeaguePoints: s.Ember.computed.alias("rankedData.highestRankedEntry.leaguePoints"),
                highestRankTierUnranked: s.Ember.computed.equal("highestRankTier", "NONE"),
                highestRankTierDivisionText: s.Ember.computed("highestRankTier", "highestRankDivision", "selectedQueue", "tra.ready", (function() {
                    const e = this.get("highestRankTier"),
                        t = this.get("highestRankDivision"),
                        n = this.get("selectedQueue"),
                        i = (s.LeagueTierNames.getFullTierDivisionName(e, t), n && n.isProvisional);
                    return this.formatDivisionText(e, t, i)
                })),
                highestRankLeaguePointsText: s.Ember.computed("highestRankLeaguePoints", "tra.ready", (function() {
                    return this.formatLeaguePointsText(this.get("highestRankLeaguePoints"))
                })),
                rankedQueue: s.Ember.computed("rankedData.queueMap", "selectedQueue.type", (function() {
                    const e = this.get("rankedData.queueMap"),
                        t = this.get("selectedQueue");
                    if (!t || !e) return null;
                    return e[t.type] || null
                })),
                rankedQueueTierDivisionText: s.Ember.computed("rankedQueue.tier", "rankedQueue.division", "rankedQueue.isProvisional", (function() {
                    const e = this.get("rankedQueue.tier"),
                        t = this.get("rankedQueue.division"),
                        n = this.get("rankedQueue.isProvisional");
                    return this.formatDivisionText(e, t, n)
                })),
                rankedQueueDivision: s.Ember.computed.alias("rankedQueue.division"),
                rankedQueueLeaguePointsText: s.Ember.computed("rankedQueue.leaguePoints", "tra.ready", (function() {
                    return this.formatLeaguePointsText(this.get("rankedQueue.leaguePoints"))
                })),
                pastRankTierUnranked: s.Ember.computed.equal("rankedData.highestPreviousSeasonEndTier", "NONE"),
                hasPastRank: s.Ember.computed.not("pastRankTierUnranked"),
                pastMiniRegaliaIconPath: s.Ember.computed("rankedData.highestPreviousSeasonEndTier", (function() {
                    const e = this.get("rankedData.highestPreviousSeasonEndTier");
                    return s.LeagueTierNames.getRankedMiniRegaliaSvg(e)
                })),
                pastRankedTierText: s.Ember.computed("rankedData.highestPreviousSeasonEndTier", "tra.ready", (function() {
                    const e = this.get("rankedData.highestPreviousSeasonEndTier");
                    return this.get("tra.formatString")("parties_past_rank", {
                        rankedTier: s.LeagueTierNames.getTierName(e)
                    })
                })),
                formatLeaguePointsText: function(e) {
                    return this.get("tra.formatString")("ranked_lp", {
                        num_points: e
                    })
                },
                formatDivisionText: function(e, t, n) {
                    const i = s.LeagueTierNames.getFullTierDivisionName(e, t);
                    if (n) {
                        return this.get("tra.formatString")("parties_provisional_rank", {
                            tierDivisionLoc: i
                        })
                    }
                    return i
                }
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "7lIzWKmh",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\identity-tooltip-component\\\\rank\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\identity-tooltip-component\\\\rank\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\identity-tooltip-component\\\\rank\\\\index.js\\" "],["text","\\n"],["block",["if"],[["get",["rankedData"]]],null,3]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","rank-identity-tooltip-past-rank"],["flush-element"],["text","\\n        "],["open-element","img",[]],["static-attr","class","rank-identity-tooltip-past-rank-icon"],["dynamic-attr","src",["concat",[["unknown",["pastMiniRegaliaIconPath"]]]]],["flush-element"],["close-element"],["text","\\n        "],["append",["unknown",["pastRankedTierText"]],false],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","rank-identity-tooltip-rank"],["flush-element"],["append",["unknown",["highestRankTierDivisionText"]],false],["open-element","span",[]],["flush-element"],["text"," - "],["append",["unknown",["highestRankLeaguePointsText"]],false],["close-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","rank-identity-tooltip-rank"],["flush-element"],["append",["unknown",["rankedQueueTierDivisionText"]],false],["open-element","span",[]],["flush-element"],["text"," - "],["append",["unknown",["rankedQueueLeaguePointsText"]],false],["close-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","lol-regalia-emblem-element",[]],["static-attr","class","rank-identity-tooltip-rank-icon"],["dynamic-attr","ranked-tier",["concat",[["helper",["if"],[["get",["useRankFromQueue"]],["get",["rankedQueue","tier"]],["get",["highestRankTier"]]],null]]]],["flush-element"],["text","\\n  "],["close-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","rank-identity-tooltip-details"],["flush-element"],["text","\\n"],["block",["if"],[["get",["useRankFromQueue"]]],null,2,1],["block",["if"],[["get",["hasPastRank"]]],null,0],["text","  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            n(364);
            const i = {
                1: {
                    traKey: "tra.parties_tooltip_icon_rare",
                    gemIcon: "/fe/lol-static-assets/images/summoner-icon/summoner-icon-rare.png"
                },
                2: {
                    traKey: "tra.parties_tooltip_icon_epic",
                    gemIcon: "/lol-game-data/assets/v1/rarity-gem-icons/epic.png"
                },
                3: {
                    traKey: "tra.parties_tooltip_icon_legendary",
                    gemIcon: "/lol-game-data/assets/v1/rarity-gem-icons/legendary.png"
                },
                4: {
                    traKey: "tra.parties_tooltip_icon_mythic",
                    gemIcon: "/lol-game-data/assets/v1/rarity-gem-icons/mythic.png"
                },
                5: {
                    traKey: "tra.parties_tooltip_icon_ultimate",
                    gemIcon: "/lol-game-data/assets/v1/rarity-gem-icons/ultimate.png"
                }
            };
            e.exports = s.Ember.Component.extend({
                layout: n(365),
                classNames: ["icon-identity-tooltip-component"],
                assets: s.Ember.inject.service(),
                player: null,
                regionLocale: s.Ember.computed.alias("assets.regionLocale"),
                summonerIcons: s.Ember.computed.alias("assets.summonerIcons"),
                summonerIconId: s.Ember.computed.alias("player.summonerIconId"),
                summonerIcon: s.Ember.computed("summonerIcons", "summonerIconId", (function() {
                    const e = this.get("summonerIcons"),
                        t = this.get("summonerIconId");
                    return e && e.length > 0 && (t || 0 === t) ? e.findBy("id", t) : {}
                })),
                iconRarity: s.Ember.computed("regionLocale", "summonerIcon.rarities.[]", (function() {
                    const e = this.get("regionLocale.region"),
                        t = this.get("summonerIcon.rarities") || [];
                    let n = 0;
                    if (Array.isArray(t)) {
                        let s = t.find((t => t.region === e));
                        s ? n = s.rarity : (s = t.find((e => "riot" === e.region)), n = s ? s.rarity : 0)
                    }
                    return i[n]
                })),
                iconRarityText: s.Ember.computed("tra.ready", "iconRarity", (function() {
                    const e = this.get("iconRarity");
                    return e ? this.get(e.traKey) : ""
                }))
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "2BKBDvmC",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\identity-tooltip-component\\\\summoner-icon\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\identity-tooltip-component\\\\summoner-icon\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\identity-tooltip-component\\\\summoner-icon\\\\index.js\\" "],["text","\\n"],["block",["if"],[["get",["summonerIcon"]]],null,1]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","        "],["open-element","div",[]],["static-attr","class","icon-identity-tooltip-desc"],["flush-element"],["text","\\n          "],["open-element","img",[]],["static-attr","class","icon-identity-tooltip-rarity-icon"],["dynamic-attr","src",["concat",[["unknown",["iconRarity","gemIcon"]]]]],["flush-element"],["close-element"],["text","\\n          "],["open-element","div",[]],["static-attr","class","icon-identity-tooltip-rarity-desc"],["flush-element"],["append",["unknown",["iconRarityText"]],false],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","lol-social-avatar-icon",[]],["static-attr","class","icon-identity-tooltip-icon"],["dynamic-attr","icon-id",["unknown",["summonerIcon","id"]],null],["static-attr","availability","online"],["flush-element"],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","icon-identity-tooltip-details"],["flush-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","icon-identity-tooltip-name"],["flush-element"],["append",["unknown",["summonerIcon","title"]],false],["close-element"],["text","\\n"],["block",["if"],[["get",["iconRarity"]]],null,0],["text","    "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            n(367), e.exports = s.Ember.Component.extend({
                layout: n(368),
                classNames: ["prestige-identity-tooltip-component"],
                player: null,
                summonerRegalia: null,
                showPrestige: !1,
                playerLevel: s.Ember.computed.alias("player.summonerLevel"),
                selectedPrestigeBorder: s.Ember.computed.alias("summonerRegalia.selectedPrestigeCrest"),
                playerLevelText: s.Ember.computed("playerLevel", "tra.ready", (function() {
                    return this.get("tra.formatString")("parties_tooltip_prestige_level", {
                        level: this.get("playerLevel")
                    })
                })),
                prestigeEarnedAtLevel: s.Ember.computed("selectedPrestigeBorder", "tra.ready", (function() {
                    const e = this.get("selectedPrestigeBorder"),
                        t = this.calcPrestigeEarnedAtLevel(e);
                    return this.get(`tra.parties_tooltip_prestige_${t}`)
                })),
                calcPrestigeEarnedAtLevel: function(e) {
                    return e ? s.SharedChallengesConstants.PRESTIGE_LEVELS[e - 1] : 1
                }
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "Td/9q6E8",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\identity-tooltip-component\\\\prestige\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\identity-tooltip-component\\\\prestige\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\identity-tooltip-component\\\\prestige\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","level-ring-wrapper"],["flush-element"],["text","\\n  "],["open-element","lol-uikit-themed-level-ring-v2",[]],["dynamic-attr","prestige-crest-id",["concat",[["unknown",["selectedPrestigeBorder"]]]]],["static-attr","size","fill"],["static-attr","class","prestige-identity-tooltip-icon"],["flush-element"],["text","\\n  "],["close-element"],["text","\\n"],["close-element"],["text","\\n\\n"],["open-element","div",[]],["static-attr","class","prestige-identity-tooltip-details"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","prestige-identity-tooltip-level"],["flush-element"],["append",["unknown",["playerLevelText"]],false],["close-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","prestige-identity-tooltip-desc"],["flush-element"],["append",["unknown",["prestigeEarnedAtLevel"]],false],["close-element"],["text","\\n"],["close-element"],["text","\\n\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1),
                i = n(370);
            n(371);
            const o = "sfx-ui",
                a = s.Ember.Component.extend({
                    classNames: ["generic-button"],
                    classNameBindings: ["matchHeight:match-h", "matchWidth:match-w", "isImgFlippedX:flip-x", "isImgFlippedY:flip-y"],
                    layout: n(372),
                    canBeSelected: !1,
                    triggerSelected: !1,
                    selectionGroup: null,
                    isEnabled: !0,
                    text: null,
                    baseBgPath: null,
                    upBgPath: null,
                    overBgPath: null,
                    downBgPath: null,
                    disabledBgPath: null,
                    baseImgPath: null,
                    upImgPath: null,
                    overImgPath: null,
                    downImgPath: null,
                    disabledImgPath: null,
                    noDisabledBg: !1,
                    isImgFlippedX: !1,
                    isImgFlippedY: !1,
                    useCustomContent: !1,
                    iconSizeModifier: 1,
                    matchHeight: !0,
                    matchWidth: !0,
                    tooltipText: null,
                    tooltipPosition: "bottom",
                    tooltipType: "system",
                    disabledTooltipText: null,
                    disabledTooltipPosition: "bottom",
                    disabledTooltipType: "system",
                    onHoverSound: null,
                    onClickSound: null,
                    onClickReleaseSound: null,
                    currentState: null,
                    isClickTarget: !1,
                    isSelected: !1,
                    onInit: s.Ember.on("init", (function() {
                        this._changeState(i.ButtonState.UP)
                    })),
                    upBgPathInternal: s.Ember.computed.or("upBgPath", "baseBgPath"),
                    overBgPathInternal: s.Ember.computed.or("overBgPath", "baseBgPath"),
                    downBgPathInternal: s.Ember.computed.or("downBgPath", "baseBgPath"),
                    disabledBgPathInternal: s.Ember.computed("disabledBgPath", "baseBgPath", "noDisabledBg", (function() {
                        return this.get("noDisabledBg") ? "" : this.get("disabledBgPath") || this.get("baseBgPath")
                    })),
                    upImgPathInternal: s.Ember.computed.or("upImgPath", "baseImgPath"),
                    overImgPathInternal: s.Ember.computed.or("overImgPath", "baseImgPath"),
                    downImgPathInternal: s.Ember.computed.or("downImgPath", "baseImgPath"),
                    disabledImgPathInternal: s.Ember.computed.or("disabledImgPath", "baseImgPath"),
                    customContentUp: {
                        isUp: !0,
                        isAny: !0
                    },
                    customContentOver: {
                        isOver: !0,
                        isAny: !0
                    },
                    customContentDown: {
                        isDown: !0,
                        isAny: !0
                    },
                    customContentDisabled: {
                        isDisabled: !0,
                        isAny: !0
                    },
                    iconSizeModifierStyle: s.Ember.computed("iconSizeModifier", (function() {
                        const e = this.get("iconSizeModifier");
                        if (1 === e) return null;
                        const t = 100 * Math.max(e, 0),
                            n = this.get("matchHeight");
                        let s = "";
                        return this.get("matchWidth") && (s += `width: ${t}%;`), n && (s += `height: ${t}%`), s
                    })),
                    triggerSelectedObserver: s.Ember.computed("triggerSelected", (function() {
                        this.get("triggerSelected") && (this._setSelected(!0), s.Ember.run.next((() => {
                            this.set("triggerSelected", !1)
                        })))
                    })),
                    isEnabledObserver: s.Ember.computed("isEnabled", (function() {
                        const e = this.get("currentState") !== i.ButtonState.DISABLED,
                            t = this.get("isEnabled");
                        e && !t ? this._changeState(i.ButtonState.DISABLED) : !e && t && this._changeState(i.ButtonState.UP)
                    })),
                    _changeState(e) {
                        const t = this.get("currentState"),
                            n = this.get("isClickTarget");
                        e === i.ButtonState.OVER && (this.get("onHoverSound") && s.Audio.getChannel(o).playSound(this.get("onHoverSound")), n && (e = i.ButtonState.DOWN)), this.set("isState_" + t, !1), this.set("isState_" + e, !0), this.set("currentState", e)
                    },
                    _processClick() {
                        this.attrs.onClick && this.attrs.onClick();
                        const e = this.get("selectionGroup"),
                            t = this.get("isSelected");
                        e && t || this._setSelected(!t)
                    },
                    _setSelected(e) {
                        if (!this.get("canBeSelected")) return;
                        const t = this.get("isSelected");
                        if (t !== e) {
                            if (e) {
                                const e = this.get("selectionGroup");
                                a.setSelection(e, this)
                            }
                            t && this.attrs.onDeselected ? this.attrs.onDeselected() : e && this.attrs.onSelected && this.attrs.onSelected(), this.set("isSelected", e)
                        }
                    },
                    actions: {
                        changeState(e) {
                            this.get("currentState") !== i.ButtonState.DISABLED && this._changeState(e)
                        },
                        beginClick() {
                            if (this.get("currentState") === i.ButtonState.DISABLED) return;
                            this.get("onClickSound") && s.Audio.getChannel(o).playSound(this.get("onClickSound")), this._changeState(i.ButtonState.DOWN), this.set("isClickTarget", !0);
                            const e = () => {
                                this.set("isClickTarget", !1), document.removeEventListener("mouseup", e)
                            };
                            document.addEventListener("mouseup", e)
                        },
                        endClick() {
                            if (this.get("currentState") === i.ButtonState.DISABLED) return;
                            this.get("isClickTarget") && (this.get("onClickReleaseSound") && s.Audio.getChannel(o).playSound(this.get("onClickReleaseSound")), this._processClick(), this.set("isClickTarget", !1), this._changeState(i.ButtonState.OVER))
                        },
                        onHover() {
                            this.get("currentState") !== i.ButtonState.DISABLED && (this._changeState(i.ButtonState.OVER), this.attrs.onHover && this.attrs.onHover())
                        },
                        onHoverLeave() {
                            this.get("currentState") !== i.ButtonState.DISABLED && (this._changeState(i.ButtonState.UP), this.attrs.onHoverLeave && this.attrs.onHoverLeave())
                        }
                    }
                });
            a.reopenClass({
                currentSelectionMap: {},
                setSelection(e, t) {
                    if (!e || !t || !t.get("canBeSelected")) return;
                    const n = a.currentSelectionMap[e];
                    n && n._setSelected(!1), a.currentSelectionMap[e] = t
                }
            }), e.exports = a
        }, (e, t) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.ButtonState = void 0;
            const n = Object.freeze({
                UP: "up",
                OVER: "over",
                DOWN: "down",
                DISABLED: "disabled"
            });
            t.ButtonState = n
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "LqeMgPgT",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\generic-button-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\generic-button-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\generic-button-component\\\\index.js\\" "],["text","\\n"],["append",["unknown",["isEnabledObserver"]],false],["text","\\n"],["append",["unknown",["triggerSelectedObserver"]],false],["text","\\n"],["open-element","div",[]],["static-attr","class","generic-button-root"],["modifier",["action"],[["get",[null]],"onHoverLeave"],[["on"],["mouseLeave"]]],["modifier",["action"],[["get",[null]],"onHover"],[["on"],["mouseEnter"]]],["modifier",["action"],[["get",[null]],"beginClick"],[["on"],["mouseDown"]]],["modifier",["action"],[["get",[null]],"endClick"],[["on"],["mouseUp"]]],["flush-element"],["text","\\n\\n"],["text","  "],["open-element","div",[]],["dynamic-attr","class",["concat",["generic-button-state up ",["helper",["if"],[["get",["isSelected"]],"selected"],null]," ",["helper",["if"],[["get",["isState_up"]],"active"],null]]]],["dynamic-attr","style",["unknown",["upStyle"]],null],["flush-element"],["text","\\n    "],["block",["if"],[["get",["upBgPathInternal"]]],null,27],["text","\\n    "],["open-element","div",[]],["dynamic-attr","class",["concat",["generic-button-primary-img-container ",["helper",["if"],[["get",["upBgPathInternal"]],"has-bg"],null]]]],["flush-element"],["text","\\n      "],["block",["if"],[["get",["upImgPathInternal"]]],null,26],["text","\\n    "],["close-element"],["text","\\n"],["block",["if"],[["get",["text"]]],null,25,24],["text","    "],["block",["if"],[["get",["useCustomContent"]]],null,22],["text","\\n  "],["close-element"],["text","\\n\\n"],["text","  "],["open-element","div",[]],["dynamic-attr","class",["concat",["generic-button-state over ",["helper",["if"],[["get",["isSelected"]],"selected"],null]," ",["helper",["if"],[["get",["isState_over"]],"active"],null]]]],["dynamic-attr","style",["unknown",["overStyle"]],null],["flush-element"],["text","\\n    "],["block",["if"],[["get",["overBgPathInternal"]]],null,21],["text","\\n    "],["open-element","div",[]],["dynamic-attr","class",["concat",["generic-button-primary-img-container ",["helper",["if"],[["get",["overBgPathInternal"]],"has-bg"],null]]]],["flush-element"],["text","\\n      "],["block",["if"],[["get",["overImgPathInternal"]]],null,20],["text","\\n    "],["close-element"],["text","\\n"],["block",["if"],[["get",["text"]]],null,19,18],["text","    "],["block",["if"],[["get",["useCustomContent"]]],null,16],["text","\\n"],["block",["if"],[["get",["tooltipText"]]],null,15],["text","  "],["close-element"],["text","\\n\\n"],["text","  "],["open-element","div",[]],["dynamic-attr","class",["concat",["generic-button-state down ",["helper",["if"],[["get",["isSelected"]],"selected"],null]," ",["helper",["if"],[["get",["isState_down"]],"active"],null]]]],["dynamic-attr","style",["unknown",["downStyle"]],null],["flush-element"],["text","\\n    "],["block",["if"],[["get",["downBgPathInternal"]]],null,13],["text","\\n    "],["open-element","div",[]],["dynamic-attr","class",["concat",["generic-button-primary-img-container ",["helper",["if"],[["get",["downBgPathInternal"]],"has-bg"],null]]]],["flush-element"],["text","\\n      "],["block",["if"],[["get",["downImgPathInternal"]]],null,12],["text","\\n    "],["close-element"],["text","\\n"],["block",["if"],[["get",["text"]]],null,11,10],["text","    "],["block",["if"],[["get",["useCustomContent"]]],null,8],["text","\\n  "],["close-element"],["text","\\n\\n"],["text","  "],["open-element","div",[]],["dynamic-attr","class",["concat",["generic-button-state disabled ",["helper",["if"],[["get",["isSelected"]],"selected"],null]," ",["helper",["if"],[["get",["isState_disabled"]],"active"],null]]]],["dynamic-attr","style",["unknown",["disabledStyle"]],null],["flush-element"],["text","\\n    "],["block",["if"],[["get",["disabledBgPathInternal"]]],null,7],["text","\\n    "],["open-element","div",[]],["dynamic-attr","class",["concat",["generic-button-primary-img-container ",["helper",["if"],[["get",["disabledBgPathInternal"]],"has-bg"],null]]]],["flush-element"],["text","\\n      "],["block",["if"],[["get",["disabledImgPathInternal"]]],null,6],["text","\\n    "],["close-element"],["text","\\n"],["block",["if"],[["get",["text"]]],null,5,4],["text","    "],["block",["if"],[["get",["useCustomContent"]]],null,2],["text","\\n"],["block",["if"],[["get",["disabledTooltipText"]]],null,1],["text","  "],["close-element"],["text","\\n\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":["default"],"blocks":[{"statements":[["text","        "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n          "],["open-element","p",[]],["flush-element"],["append",["unknown",["disabledTooltipText"]],false],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["uikit-tooltip"],null,[["tooltipPosition","type"],[["get",["disabledTooltipPosition"]],["get",["disabledTooltipType"]]]],0]],"locals":[]},{"statements":[["open-element","div",[]],["static-attr","class","generic-button-custom-content"],["flush-element"],["yield","default",[["get",["customContentDisabled"]]]],["close-element"]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","generic-button-text"],["flush-element"],["append",["unknown",["disabledText"]],false],["close-element"],["text","\\n    "]],"locals":[]},{"statements":[["block",["if"],[["get",["disabledText"]]],null,3]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","generic-button-text"],["flush-element"],["append",["unknown",["text"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["open-element","img",[]],["dynamic-attr","src",["concat",[["unknown",["disabledImgPathInternal"]]]]],["dynamic-attr","style",["unknown",["iconSizeModifierStyle"]],null],["flush-element"],["close-element"]],"locals":[]},{"statements":[["open-element","img",[]],["dynamic-attr","src",["concat",[["unknown",["disabledBgPathInternal"]]]]],["flush-element"],["close-element"]],"locals":[]},{"statements":[["open-element","div",[]],["static-attr","class","generic-button-custom-content"],["flush-element"],["yield","default",[["get",["customContentDown"]]]],["close-element"]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","generic-button-text"],["flush-element"],["append",["unknown",["downText"]],false],["close-element"],["text","\\n    "]],"locals":[]},{"statements":[["block",["if"],[["get",["downText"]]],null,9]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","generic-button-text"],["flush-element"],["append",["unknown",["text"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["open-element","img",[]],["dynamic-attr","src",["concat",[["unknown",["downImgPathInternal"]]]]],["dynamic-attr","style",["unknown",["iconSizeModifierStyle"]],null],["flush-element"],["close-element"]],"locals":[]},{"statements":[["open-element","img",[]],["dynamic-attr","src",["concat",[["unknown",["downBgPathInternal"]]]]],["flush-element"],["close-element"]],"locals":[]},{"statements":[["text","        "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n          "],["open-element","p",[]],["flush-element"],["append",["unknown",["tooltipText"]],false],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["uikit-tooltip"],null,[["tooltipPosition","type"],[["get",["tooltipPosition"]],["get",["tooltipType"]]]],14]],"locals":[]},{"statements":[["open-element","div",[]],["static-attr","class","generic-button-custom-content"],["flush-element"],["yield","default",[["get",["customContentOver"]]]],["close-element"]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","generic-button-text"],["flush-element"],["append",["unknown",["overText"]],false],["close-element"],["text","\\n    "]],"locals":[]},{"statements":[["block",["if"],[["get",["overText"]]],null,17]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","generic-button-text"],["flush-element"],["append",["unknown",["text"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["open-element","img",[]],["dynamic-attr","src",["concat",[["unknown",["overImgPathInternal"]]]]],["dynamic-attr","style",["unknown",["iconSizeModifierStyle"]],null],["flush-element"],["close-element"]],"locals":[]},{"statements":[["open-element","img",[]],["dynamic-attr","src",["concat",[["unknown",["overBgPathInternal"]]]]],["flush-element"],["close-element"]],"locals":[]},{"statements":[["open-element","div",[]],["static-attr","class","generic-button-custom-content"],["flush-element"],["yield","default",[["get",["customContentUp"]]]],["close-element"]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","generic-button-text"],["flush-element"],["append",["unknown",["upText"]],false],["close-element"],["text","\\n    "]],"locals":[]},{"statements":[["block",["if"],[["get",["upText"]]],null,23]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","generic-button-text"],["flush-element"],["append",["unknown",["text"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["open-element","img",[]],["dynamic-attr","src",["concat",[["unknown",["upImgPathInternal"]]]]],["dynamic-attr","style",["unknown",["iconSizeModifierStyle"]],null],["flush-element"],["close-element"]],"locals":[]},{"statements":[["open-element","img",[]],["dynamic-attr","src",["concat",[["unknown",["upBgPathInternal"]]]]],["flush-element"],["close-element"]],"locals":[]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s, i = n(1),
                o = (s = n(374)) && s.__esModule ? s : {
                    default: s
                };
            n(375);
            var a = n(370);
            const l = "/fe/lol-static-assets/videos",
                r = "sfx-ui",
                c = "intro",
                m = "hover",
                u = "active",
                d = "idle",
                p = "disabled";
            e.exports = i.Ember.Component.extend({
                layout: o.default,
                classNames: ["find-match-button-wrapper"],
                videoSource: {
                    intro: `${l}/find-match-button-intro.webm`,
                    active: `${l}/find-match-button-active.webm`,
                    idle: `${l}/find-match-button-idle.webm`,
                    hover: `${l}/find-match-button-hover.webm`
                },
                partySettingsService: i.Ember.inject.service("party-settings"),
                videoStateMachine: null,
                currentState: a.ButtonState.UP,
                isState_down: i.Ember.computed.equal("currentState", a.ButtonState.DOWN),
                isState_up: i.Ember.computed.equal("currentState", a.ButtonState.UP),
                isState_over: i.Ember.computed.equal("currentState", a.ButtonState.OVER),
                isState_disabled: i.Ember.computed.equal("currentState", a.ButtonState.DISABLED),
                animationsEnabled: i.Ember.computed.alias("partySettingsService.animationsEnabled"),
                hasPlayedIntroAnimation: !1,
                currentImgPath: i.Ember.computed("currentState", "animationsEnabled", (function() {
                    const e = this.get("animationsEnabled");
                    switch (this.get("currentState")) {
                        case a.ButtonState.UP:
                            return this.get("baseImgPath");
                        case a.ButtonState.DOWN:
                            return this.get("downImgPath");
                        case a.ButtonState.OVER:
                            return e ? this.get("baseImgPath") : this.get("overImgPath");
                        case a.ButtonState.DISABLED:
                            return this.get("disabledImgPath");
                        default:
                            return this.get("baseImgPath")
                    }
                })),
                didReceiveAttrs() {
                    this._super(...arguments);
                    this.get("currentState"), a.ButtonState.DISABLED;
                    this.get("isEnabled") ? this._changeState(a.ButtonState.UP) : this._changeState(a.ButtonState.DISABLED)
                },
                didInsertElement() {
                    this._super(...arguments);
                    const e = this.element.querySelector("lol-uikit-video-state-machine");
                    this.set("videoStateMachine", e);
                    this.get("isEnabled") && (this._dispatchButtonEvent(), this.set("hasPlayedIntroAnimation", !0), this._dispatchButtonEvent(a.ButtonState.UP))
                },
                didUpdateAttrs() {
                    this._super(...arguments);
                    const e = this.get("currentState") !== a.ButtonState.DISABLED,
                        t = this.get("isEnabled");
                    e && !t ? this._changeState(a.ButtonState.DISABLED) : !e && t && (this.get("hasPlayedIntroAnimation") ? this._changeState(a.ButtonState.UP) : this._dispatchButtonEvent())
                },
                mouseUp: function(e) {
                    e.preventDefault();
                    const t = this.get("currentState"),
                        n = this.get("isEnabled"),
                        s = this.get("onClickReleaseSound");
                    t !== a.ButtonState.DISABLED && (s && i.Audio.getChannel(r).playSound(s), n && this.sendAction("confirmButton"), this.set("isClickTarget", !1))
                },
                mouseDown: function(e) {
                    e.preventDefault();
                    const t = this.get("currentState"),
                        n = this.get("onClickSound");
                    t !== a.ButtonState.DISABLED && (n && i.Audio.getChannel(r).playSound(n), this._changeState(a.ButtonState.DOWN), this.set("isClickTarget", !0))
                },
                mouseEnter() {
                    if (this.get("currentState") === a.ButtonState.DISABLED) return;
                    const e = this.get("onHoverSound");
                    e && i.Audio.getChannel(r).playSound(e), this._changeState(a.ButtonState.OVER)
                },
                mouseLeave() {
                    this.get("currentState") !== a.ButtonState.DISABLED && this._changeState(a.ButtonState.UP)
                },
                _changeState(e) {
                    e ? (this.set("currentState", e), this._dispatchButtonEvent(e)) : this._dispatchButtonEvent(e)
                },
                _dispatchButtonEvent(e) {
                    const t = this.get("videoStateMachine");
                    t && (e ? e === a.ButtonState.UP ? t.dispatchEvent(new Event(d)) : e === a.ButtonState.OVER ? t.dispatchEvent(new Event(m)) : e === a.ButtonState.DOWN ? t.dispatchEvent(new Event(u)) : e === a.ButtonState.DISABLED && t.dispatchEvent(new Event(p)) : t.dispatchEvent(new Event(c)))
                }
            })
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "eamHMMHT",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\animated-find-match-button\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\animated-find-match-button\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\animated-find-match-button\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","find-match-button"],["flush-element"],["text","\\n  "],["open-element","div",[]],["dynamic-attr","class",["concat",["find-match-state ",["unknown",["currentState"]]]]],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","img-container"],["flush-element"],["open-element","img",[]],["dynamic-attr","src",["concat",[["unknown",["currentImgPath"]]]]],["flush-element"],["close-element"],["close-element"],["text","\\n  "],["close-element"],["text","\\n  "],["open-element","lol-uikit-video-state-machine",[]],["flush-element"],["text","\\n    "],["open-element","lol-uikit-video-group",[]],["static-attr","class","find-match-button-video"],["flush-element"],["text","\\n      "],["open-element","lol-uikit-video-state",[]],["static-attr","state","disabled"],["flush-element"],["close-element"],["text","\\n      "],["open-element","lol-uikit-video-state",[]],["static-attr","state","intro"],["static-attr","wait-for-end",""],["flush-element"],["text","\\n        "],["open-element","lol-uikit-video",[]],["static-attr","fade-in","0"],["static-attr","type","intro"],["dynamic-attr","src",["unknown",["videoSource","intro"]],null],["static-attr","preload",""],["flush-element"],["text","\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n      "],["open-element","lol-uikit-video-state",[]],["static-attr","state","idle"],["flush-element"],["text","\\n        "],["open-element","lol-uikit-video",[]],["static-attr","fade-in","0"],["static-attr","fade-out","0"],["static-attr","type","idle"],["dynamic-attr","src",["unknown",["videoSource","idle"]],null],["flush-element"],["text","\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n      "],["open-element","lol-uikit-video-state",[]],["static-attr","state","active"],["static-attr","wait-for-end",""],["flush-element"],["text","\\n        "],["open-element","lol-uikit-video",[]],["static-attr","fade-in","0"],["static-attr","fade-out","0"],["static-attr","type","outro"],["dynamic-attr","src",["unknown",["videoSource","active"]],null],["flush-element"],["text","\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n      "],["open-element","lol-uikit-video-state",[]],["static-attr","state","hover"],["static-attr","no-preserve-state",""],["flush-element"],["text","\\n        "],["open-element","lol-uikit-video",[]],["static-attr","fade-in","0"],["static-attr","fade-out","0"],["static-attr","type","idle"],["dynamic-attr","src",["unknown",["videoSource","hover"]],null],["flush-element"],["text","\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n  "],["open-element","div",[]],["dynamic-attr","class",["concat",["button-text ",["unknown",["currentState"]]]]],["flush-element"],["append",["unknown",["buttonText"]],false],["close-element"],["text","\\n"],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            n(377);
            e.exports = s.Ember.Component.extend({
                layout: n(378),
                classNames: ["cherry-rating-component"],
                tooltipEnabled: !1,
                ratedRating: s.Ember.computed.alias("currentQueue.ratedRating"),
                ratedTier: s.Ember.computed.alias("currentQueue.ratedTier"),
                currentQueue: s.Ember.computed("rankedData.queueMap", "queueType", (function() {
                    const e = this.get("rankedData.queueMap"),
                        t = this.get("queueType");
                    if (e && t) return e[t]
                })),
                isCherryRatingShown: s.Ember.computed("currentQueue", (function() {
                    const e = this.get("currentQueue");
                    return e && (e.wins || e.losses)
                })),
                cherryRatedTierNameLoc: s.Ember.computed("ratedTier", (function() {
                    const e = this.get("ratedTier");
                    return s.LeagueTierNames.getCherryRatedTierNameLoc(e)
                })),
                cherryRatedIcon: s.Ember.computed("ratedTier", (function() {
                    const e = this.get("ratedTier");
                    return s.LeagueTierNames.getCherryRatedMiniCrest(e)
                })),
                cherryRatedMedallion: s.Ember.computed("ratedTier", (function() {
                    const e = this.get("ratedTier");
                    return s.LeagueTierNames.getCherryRatedMedallion(e)
                })),
                cherryTooltipRatedRatingText: s.Ember.computed("ratedRating", (function() {
                    const e = this.get("tra"),
                        t = this.get("ratedRating");
                    return t ? e.formatString("cherry_tooltip_rated_rating_text", {
                        cherry_rated_rating: t
                    }) : e.formatString("cherry_tooltip_rated_rating_text", {
                        cherry_rated_rating: 0
                    })
                }))
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "XdJsU8+5",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\cherry-rating\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\cherry-rating\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\cherry-rating\\\\index.js\\" "],["text","\\n"],["block",["if"],[["get",["isCherryRatingShown"]]],null,2]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","        "],["open-element","div",[]],["static-attr","class","cherry-rating-tooltip-container"],["flush-element"],["text","\\n          "],["open-element","img",[]],["static-attr","class","cherry-rating-medallion"],["dynamic-attr","src",["unknown",["cherryRatedMedallion"]],null],["flush-element"],["close-element"],["text","\\n          "],["open-element","div",[]],["static-attr","class","rating-text-container"],["flush-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","rating-text-inner-container"],["flush-element"],["text","\\n              "],["open-element","div",[]],["static-attr","class","rated-rating-tier"],["flush-element"],["append",["unknown",["cherryRatedTierNameLoc"]],false],["close-element"],["text","\\n              "],["open-element","div",[]],["static-attr","class","rated-rating-points"],["flush-element"],["append",["unknown",["cherryTooltipRatedRatingText"]],false],["close-element"],["text","\\n            "],["close-element"],["text","\\n          "],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["uikit-tooltip"],null,[["type","tooltipPosition"],["system","right"]],0]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","cherry-rating-container"],["flush-element"],["text","\\n    "],["open-element","img",[]],["static-attr","class","cherry-rating-icon"],["dynamic-attr","src",["unknown",["cherryRatedIcon"]],null],["flush-element"],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","cherry-rating-text"],["flush-element"],["append",["unknown",["ratedRating"]],false],["close-element"],["text","\\n"],["block",["if"],[["get",["tooltipEnabled"]]],null,1],["text","  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1),
                i = n(109);
            n(380);
            var o = n(125),
                a = n(381);
            const {
                RunMixin: l
            } = s.EmberAddons.EmberLifeline;
            e.exports = s.Ember.Component.extend(l, {
                layout: n(382),
                classNames: ["quick-play-loadout-selector-component"],
                quickPlayService: s.Ember.inject.service("quick-play"),
                selectingSlotIndex: null,
                localPlayer: null,
                shouldHideSecondaryPosition: !1,
                didUpdateAttrs: function() {
                    this._super(...arguments), this.shouldAutoSetQuickPlaySlots() && this.autoSelectQuickPlaySlots()
                },
                shouldAutoSetQuickPlaySlots() {
                    const e = this.get("defaultSelections.length"),
                        t = this.get("showQuickPlaySelections"),
                        n = this.get("localPlayer.playerSlots") || [],
                        s = 0 === n.length,
                        i = n.filter(this.isDefaultSlotState).length === n.length,
                        o = Boolean(this.get("ongoingRequestedSlots"));
                    return t && (s || i) && !o && 2 === e
                },
                isDefaultSlotState: e => 0 === e.championId && e.positionPreference === i.POSITIONS.UNSELECTED,
                autoSelectQuickPlaySlots() {
                    const e = (this.get("defaultSelections") || []).map((e => ({
                        ...e
                    })));
                    return Promise.allSettled(e.map((e => Boolean(e.perks) ? Promise.resolve(e.perks) : this.getLastUsedQuickPlayPageForChampPosition(e.championId, e.positionPreference)))).then((t => (t.forEach(((t, n) => {
                        t.value ? e[n].perks = t.value : s.logger.error(`Failed to get perks page for champId: ${e[n].championId} position: \n            ${e[n].positionPreference} error: ${t.reason}`)
                    })), this.putQuickPlaySlots(e))))
                },
                skins: s.Ember.computed("quickPlayService.championByChampId", "selectingSlotIndex", "quickPlayViewSlots", "localPlayer.playerSlots.@each.championId", (function() {
                    const e = this.get("selectingSlotIndex");
                    if (!Number.isInteger(e)) return [];
                    const t = this.get("quickPlayViewSlots") || [],
                        n = this.get("quickPlayService"),
                        s = t[e].championId,
                        i = n.getChampionData(s);
                    return Boolean(i) && Boolean(i.skins) ? i.skins.filter((e => Boolean(e.name))) : []
                })),
                selectingSlot: s.Ember.computed("localPlayer.playerSlots.[]", "selectingSlotIndex", (function() {
                    return (this.get("localPlayer.playerSlots") || [])[this.get("selectingSlotIndex") || 0] || {}
                })),
                quickPlayViewSlots: s.Ember.computed("localPlayer.playerSlots.@each.championId", "localPlayer.playerSlots.@each.positionPreference", "localPlayer.playerSlots.@each.perks", "localPlayer.playerSlots.@each.spell1", "localPlayer.playerSlots.@each.spell2", "localPlayer.playerSlots.@each.skinId", "selectingSlotIndex", "shouldHideSecondaryPosition", (function() {
                    return (this.get("localPlayer.playerSlots") || []).map(((e, t) => ({
                        championId: e.championId,
                        positionPreference: e.positionPreference,
                        spell1: e.spell1,
                        spell2: e.spell2,
                        skinId: e.skinId,
                        isPrimary: 0 === t,
                        hide: 0 !== t && this.get("shouldHideSecondaryPosition"),
                        perks: e.perks,
                        isSelected: this.get("selectingSlotIndex") === t
                    })))
                })),
                perksPageForSelectingChampion: s.Ember.computed("selectingSlot.championId", "quickPlayService.perksPages.@each.quickPlayChampionIds", (function() {
                    const e = this.get("selectingSlot.championId") || 0,
                        t = this.get("quickPlayService.perksPages") || [];
                    return t.find((t => t && (t.quickPlayChampionIds || []).includes(e))) || t[0]
                })),
                getLastUsedQuickPlayPageForChampPosition(e, t) {
                    const n = `/v1/quick-play-selections/champion/${e}/position/${t}`;
                    return (0, s.dataBinding)("/lol-perks").get(n, {
                        skipCache: !0
                    })
                },
                updateQuickPlayPerksPage: function(e, t) {
                    const n = this.getPlayerSlotsSetRequestBase();
                    return n[t] ? (n[t].perks = JSON.stringify((0, a.getPerkSettingsFromPage)(e)), this.putQuickPlaySlots(n)) : Promise.reject(`Unable to set perks page for Quickplay slotIndex: ${t} pageId: ${e.id}.`)
                },
                _setCurrentSelectedSkin(e) {
                    if (!e) return;
                    const t = this.get("selectingSlotIndex"),
                        n = this.getPlayerSlotsSetRequestBase();
                    if (n[t].skinId !== e) {
                        n[t].skinId = e;
                        const s = n[t].championId;
                        return this.putQuickPlaySlots(n).then((() => this.get("quickPlayService").saveLastSelectedSkinForChampion(s, e)))
                    }
                },
                putQuickPlaySlots(e) {
                    const t = this.get("localPlayer.playerSlots") || [],
                        n = this.get("ongoingRequestedSlots") || [],
                        i = (0, a.areQuickPlaySlotArraysEqual)(e, t),
                        o = (0, a.areQuickPlaySlotArraysEqual)(e, n);
                    return i || o ? Promise.reject(`Put slots request matches ${i?"current":"ongoing requested"} slots`) : (this.set("ongoingRequestedSlots", e), (0, s.dataBinding)("/lol-lobby").put("/v1/lobby/members/localMember/player-slots", e).then((() => this.get("quickPlayService").saveQuickPlaySelections(e))).finally((() => {
                        this.set("ongoingRequestedSlots", void 0)
                    })))
                },
                _setCurrentSelectedChampion(e) {
                    if (!e) return;
                    const t = this.get("selectingSlotIndex"),
                        n = this.getPlayerSlotsSetRequestBase();
                    if (n.map((e => e.championId)).includes(e)) return this.putQuickPlaySlots(n.reverse());
                    const s = n[t],
                        i = this.get("quickPlayService");
                    return s.championId = e, s.skinId = i.getDefaultSkinForChampion(e), this.getLastUsedQuickPlayPageForChampPosition(e, s.positionPreference).then((e => (s.perks = e, this.putQuickPlaySlots(n))))
                },
                _setPositionPreferences(e, t) {
                    const n = this.getPlayerSlotsSetRequestBase(),
                        s = e === i.POSITION_ROLES.PRIMARY ? 0 : 1,
                        a = n[0].positionPreference,
                        l = n[1].positionPreference;
                    let r = e === i.POSITION_ROLES.PRIMARY ? t : a,
                        c = e === i.POSITION_ROLES.SECONDARY ? t : l,
                        m = !1;
                    if (r === a && c === l) return;
                    a === t || l === t ? (r = l, c = l === i.POSITIONS.FILL ? i.POSITIONS.UNSELECTED : a, n[0].positionPreference = r, n[1].positionPreference = c, m = !0) : n[s].positionPreference = t;
                    const u = this.get("quickPlayService.gameModeSummonerSpells") || [];
                    return (n || []).forEach((e => {
                        const t = [e.spell1, e.spell2],
                            n = (0, o.getSpellIdsWithSmiteAssignedIfAppropriate)(t, e.positionPreference, u, m);
                        e.spell1 = n[0], e.spell2 = n[1]
                    })), this.putQuickPlaySlots(n)
                },
                getPlayerSlotsSetRequestBase() {
                    const e = this.get("localPlayer.playerSlots") || [];
                    return (0, a.copyArrayOfObjects)(e)
                },
                actions: {
                    openPositionSelector(e) {
                        this.set("positionSelectorOpenIndex", e)
                    },
                    closePositionSelector(e) {
                        this.get("positionSelectorOpenIndex") === e && this.set("positionSelectorOpenIndex", -1)
                    },
                    handleChampionSelected(e) {
                        return this._setCurrentSelectedChampion(e)
                    },
                    handleSkinSelected(e) {
                        this._setCurrentSelectedSkin(e)
                    },
                    handleQuickPlaySlotChange(e) {
                        this.set("selectingSlotIndex", e), this.sendAction("setSelectingSlotIndex", e)
                    },
                    handleQPModalClose(e, t) {
                        this.sendAction("setShowQuickPlayModal", e, t)
                    },
                    handlePerksPageSelected(e, t) {
                        return this.updateQuickPlayPerksPage(e, t)
                    },
                    handleSpellsSelected(e) {
                        const t = this.getPlayerSlotsSetRequestBase(),
                            n = this.get("selectingSlotIndex");
                        return t[n].spell1 = e[0], t[n].spell2 = e[1], this.putQuickPlaySlots(t)
                    },
                    setPositionPreferences(e, t) {
                        this._setPositionPreferences(e, t)
                    },
                    putQuickPlaySlotsAction(e) {
                        return this.putQuickPlaySlots(e)
                    }
                }
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.areQuickPlaySlotArraysEqual = function(e = [], t = [], i = n) {
                if (e.length === t.length) {
                    for (let n = 0; n < e.length; n++) {
                        if (!s(e[n], t[n], i)) return !1
                    }
                    return !0
                }
                return !1
            }, t.copyArrayOfObjects = function(e) {
                return e.map((e => ({
                    ...e
                })))
            }, t.getPerkSettingsFromPage = function(e) {
                return {
                    perkIds: e.selectedPerkIds,
                    perkStyle: e.primaryStyleId,
                    perkSubStyle: e.subStyleId
                }
            };
            const n = ["championId", "positionPreference", "skinId", "spell1", "spell2", "perks"];

            function s(e, t, n) {
                for (let s = 0; s < n.length; s++) {
                    const i = n[s];
                    if (e[i] !== t[i]) return !1
                }
                return !0
            }
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "Fwlgv3dN",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-loadout-selector\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-loadout-selector\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-loadout-selector\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","quick-play-loadout-container"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","quick-play-loadout-grid-container"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","quick-play-loadout-title"],["flush-element"],["append",["unknown",["tra","quick_play_modal_title"]],false],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","quick-play-selection-rules-tooltip"],["flush-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","quick-play-selection-rules-tooltip-icon"],["flush-element"],["close-element"],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipPosition","type"],["bottom","system"]],2],["text","    "],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","quick-play-error-tootlip"],["flush-element"],["text","\\n      "],["append",["helper",["v2-footer-notifications"],null,[["isQuickPlayModal"],[true]]],false],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","quick-play-loadout-selections-container"],["flush-element"],["text","\\n"],["block",["each"],[["get",["quickPlayViewSlots"]]],null,1],["text","    "],["close-element"],["text","\\n    "],["append",["helper",["quick-play-champion-selector"],null,[["champions","selectChampion","selectingSlotIndex","selectingSlotSkinIndex"],[["get",["quickPlayService","champs"]],"handleChampionSelected",["get",["selectingSlotIndex"]],["get",["selectingSlotSkinIndex"]]]]],false],["text","\\n  "],["close-element"],["text","\\n  \\n  "],["open-element","div",[]],["static-attr","class","quick-play-loadout-champion-customization-container"],["flush-element"],["text","\\n    "],["append",["helper",["quick-play-skin-select"],null,[["skins","selectingSlot","setSkin"],[["get",["skins"]],["get",["selectingSlot"]],"handleSkinSelected"]]],false],["text","\\n    "],["open-element","div",[]],["static-attr","class","quick-play-loadout-customization-group"],["flush-element"],["text","\\n      "],["append",["helper",["quick-play-perks-selector"],null,[["perksPages","selectingPerksPage","selectingSlotIndex","playerSlots","setShowQuickPlayModal","setPerksPage","setQuickPlaySlots"],[["get",["quickPlayService","perksPages"]],["get",["perksPageForSelectingChampion"]],["get",["selectingSlotIndex"]],["get",["localPlayer","playerSlots"]],"handleQPModalClose",["helper",["action"],[["get",[null]],"handlePerksPageSelected"],null],["helper",["action"],[["get",[null]],"putQuickPlaySlotsAction"],null]]]],false],["text","\\n\\n      "],["append",["helper",["quick-play-summoner-spell-select"],null,[["selectingSlot","handleSpellsSelected"],[["get",["selectingSlot"]],"handleSpellsSelected"]]],false],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","          "],["open-element","div",[]],["dynamic-attr","class",["concat",["quick-play-loadout-selection-hitbox ",["helper",["if"],[["get",["playerSlot","isSelected"]],"selected"],null]]]],["flush-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","quick-play-loadout-selection-title"],["flush-element"],["append",["helper",["if"],[["get",["playerSlot","isPrimary"]],["get",["tra","quick_play_position_primary"]],["get",["tra","quick_play_position_secondary"]]],null],false],["close-element"],["text","\\n            "],["append",["helper",["quick-play-selection-renderer"],null,[["isLocalPlayer","position","playerSlot","isPrimary","championId","disabled","isQuickplayModal","isPositionOverlayOpen","onClick","setPositionPreferences","closePositionSelector","openPositionSelector"],[true,["get",["playerSlot","positionPreference"]],["get",["playerSlot"]],["get",["playerSlot","isPrimary"]],["get",["playerSlot","championId"]],false,true,["helper",["eq"],[["get",["positionSelectorOpenIndex"]],["get",["index"]]],null],["helper",["action"],[["get",[null]],"handleQuickPlaySlotChange",["get",["index"]]],null],"setPositionPreferences",["helper",["action"],[["get",[null]],"closePositionSelector",["get",["index"]]],null],["helper",["action"],[["get",[null]],"openPositionSelector",["get",["index"]]],null]]]],false],["text","\\n          "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["unless"],[["get",["playerSlot","hide"]]],null,0]],"locals":["playerSlot","index"]},{"statements":[["text","        "],["open-element","lol-uikit-content-block",[]],["static-attr","class","quick-play-selection-rules-tooltip-content"],["flush-element"],["text","\\n          "],["open-element","h3",[]],["static-attr","class","quick-play-selection-rules-tooltip-title"],["flush-element"],["append",["unknown",["tra","quick_play_tooltip_title"]],false],["close-element"],["text","\\n          "],["open-element","h4",[]],["static-attr","class","quick-play-selection-rules-tooltip-header"],["flush-element"],["append",["unknown",["tra","quick_play_tooltip_solo_header"]],false],["close-element"],["text","\\n          "],["open-element","ul",[]],["static-attr","class","quick-play-selection-rules-tooltip-list"],["flush-element"],["text","\\n            "],["open-element","li",[]],["flush-element"],["append",["unknown",["tra","quick_play_tooltip_solo_rule_1"]],false],["close-element"],["text","\\n            "],["open-element","li",[]],["flush-element"],["append",["unknown",["tra","quick_play_tooltip_solo_rule_2"]],false],["close-element"],["text","\\n          "],["close-element"],["text","\\n          "],["open-element","h4",[]],["static-attr","class","quick-play-selection-rules-tooltip-header"],["flush-element"],["append",["unknown",["tra","quick_play_tooltip_2_4_player_header"]],false],["close-element"],["text","\\n          "],["open-element","ul",[]],["static-attr","class","quick-play-selection-rules-tooltip-list"],["flush-element"],["text","\\n            "],["open-element","li",[]],["flush-element"],["append",["unknown",["tra","quick_play_tooltip_2_4_rule_1"]],false],["close-element"],["text","\\n            "],["open-element","li",[]],["flush-element"],["append",["unknown",["tra","quick_play_tooltip_2_4_rule_2"]],false],["close-element"],["text","\\n            "],["open-element","li",[]],["flush-element"],["append",["unknown",["tra","quick_play_tooltip_2_4_rule_3"]],false],["close-element"],["text","\\n          "],["close-element"],["text","\\n          "],["open-element","h4",[]],["static-attr","class","quick-play-selection-rules-tooltip-header"],["flush-element"],["append",["unknown",["tra","quick_play_tooltip_5_player_header"]],false],["close-element"],["text","\\n          "],["open-element","ul",[]],["static-attr","class","quick-play-selection-rules-tooltip-list"],["flush-element"],["text","\\n            "],["open-element","li",[]],["flush-element"],["append",["unknown",["tra","quick_play_tooltip_5_rule_1"]],false],["close-element"],["text","\\n            "],["open-element","li",[]],["flush-element"],["append",["unknown",["tra","quick_play_tooltip_5_rule_2"]],false],["close-element"],["text","\\n          "],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1),
                i = n(109);
            n(384), e.exports = s.Ember.Component.extend({
                layout: n(385),
                classNames: ["quick-play-selection-renderer-component"],
                classNameBindings: ["isLocalPlayer", "disabled"],
                lobbiesService: s.Ember.inject.service("lobbies"),
                isQuickplayModal: !1,
                isPrimary: !0,
                championId: 0,
                playerSlot: {},
                selectingOrdinal: null,
                scarcePositions: s.Ember.computed.alias("lobbiesService.scarcePositions"),
                selectedSlot: s.Ember.computed("isPrimary", (function() {
                    return this.get("isPrimary") ? i.POSITION_ROLES.PRIMARY : i.POSITION_ROLES.SECONDARY
                })),
                secondaryPosition: s.Ember.computed("playerSlot", (function() {
                    const e = this.get("playerSlot");
                    return e.isPrimary ? i.POSITIONS.UNSELECTED : e.positionPreference
                })),
                _handleSetPositionPreferences(e, t) {
                    this.sendAction("setPositionPreferences", e, t)
                },
                actions: {
                    selectChampionSlot() {
                        this.get("disabled") || this.sendAction("onClick")
                    },
                    openOverlay() {
                        this.sendAction("onClick"), this.sendAction("openPositionSelector")
                    },
                    closeOverlay() {
                        this.sendAction("closePositionSelector")
                    },
                    setPositionPreferences(e, t) {
                        this._handleSetPositionPreferences(e, t)
                    }
                }
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "/721ciJU",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-selection-renderer\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-selection-renderer\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-selection-renderer\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","quick-play-selected-champion-renderer"],["flush-element"],["text","\\n"],["block",["unless"],[["get",["isQuickplayModal"]]],null,2],["text","  "],["open-element","div",[]],["static-attr","class","quick-play-selected-champion-container"],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"selectChampionSlot"],null],null],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","quick-play-selected-champion-frame"],["flush-element"],["text","\\n      "],["append",["helper",["quick-play-champion-square"],null,[["championId"],[["get",["championId"]]]]],false],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","quick-play-selected-position-container"],["dynamic-attr","onmousedown",["helper",["action"],[["get",[null]],"openOverlay",["get",["selectedSlot"]]],null],null],["flush-element"],["text","\\n    "],["append",["helper",["v2-banner-position-icon"],null,[["position","isPrimary","isQuickplayModal"],[["get",["position"]],["get",["isPrimary"]],["get",["isQuickplayModal"]]]]],false],["text","\\n  "],["close-element"],["text","\\n"],["block",["if"],[["get",["isPositionOverlayOpen"]]],null,0],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["append",["helper",["v2-position-selector-modal"],null,[["animationsEnabled","selectingOrdinal","scarcePositions","primaryPosition","secondaryPosition","isQuickPlayModal","shouldHideNonScarcePositions","closeOverlay","setPositionPreferences"],[["get",["animationsEnabled"]],["get",["selectedSlot"]],["get",["scarcePositions"]],["get",["position"]],["get",["secondaryPosition"]],true,false,"closeOverlay","setPositionPreferences"]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["append",["helper",["quick-play-loadout-tooltip"],null,[["playerSlot"],[["get",["playerSlot"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["block",["uikit-tooltip"],null,[["tooltipConfig","tooltipPosition"],[["get",["tooltipConfig"]],"top"]],1]],"locals":[]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            n(387), e.exports = s.Ember.Component.extend({
                layout: n(388),
                classNames: ["champion-square-component"],
                quickPlayService: s.Ember.inject.service("quick-play"),
                championData: s.Ember.computed("quickPlayService.championByChampId", "championId", (function() {
                    const e = this.get("quickPlayService"),
                        t = this.get("championId");
                    return e.getChampionData(t)
                }))
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "jvy4hKF+",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-champion-square-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-champion-square-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-champion-square-component\\\\index.js\\" "],["text","\\n"],["open-element","img",[]],["static-attr","class","champion-square-portrait"],["dynamic-attr","src",["unknown",["championData","squarePortraitPath"]],null],["flush-element"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s, i = n(1),
                o = (s = n(390)) && s.__esModule ? s : {
                    default: s
                };
            n(391);
            e.exports = i.Ember.Component.extend({
                layout: n(392),
                classNames: ["quick-play-champion-grid-component"],
                init: function() {
                    this._super(...arguments);
                    const e = this.get("gridCellWidth") || 91,
                        t = this.get("gridCellHeight") || 110,
                        n = this.get("gridEstimatedWidth") || 560,
                        s = this.get("gridEstimatedHeight") || 400;
                    this.set("gridChampionLayout", new o.default(e, t)), this.set("gridEstimatedClientWidth", n), this.set("gridEstimatedClientHeight", s)
                },
                actions: {
                    handleItemClick(e) {
                        this.sendAction("handleItemClick", e)
                    }
                }
            })
        }, (e, t, n) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.default = void 0;
            const s = n(1).SharedEmberComponents.EmberCollectionApi.Layouts.GridLayout;
            t.default = class extends s {
                constructor(e, t) {
                    super(e, t), this._csCellWidth = e, this._csCellHeight = t, this._animationEnabled = !1
                }
                widthAt(e) {
                    return this._csCellWidth
                }
                heightAt(e) {
                    return this._csCellHeight
                }
            }
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "wIJvSNsB",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-champion-grid\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-champion-grid\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-champion-grid\\\\index.js\\" "],["text","\\n"],["block",["ember-collection"],null,[["class","estimated-width","estimated-height","scroll-top","items","cell-layout"],["quick-play-champions-container",["get",["gridEstimatedClientWidth"]],["get",["gridEstimatedClientHeight"]],["get",["gridScrollTop"]],["get",["items"]],["get",["gridChampionLayout"]]]],0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["append",["helper",["component"],[["get",["itemRendererComponentName"]]],[["handleItemClick","data"],["handleItemClick",["get",["item"]]]]],false],["text","\\n"]],"locals":["item","index"]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            n(394);
            var i = n(5);
            e.exports = s.Ember.Component.extend({
                layout: n(395),
                classNames: ["quick-play-grid-champion-component"],
                classNameBindings: ["champion.selectedPosition:selected", "champion.disabled:disabled"],
                champion: s.Ember.computed.alias("data"),
                playSound: function(e) {
                    return s.Audio.getChannel(i.SFX_CHANNEL).playSound(e)
                },
                actions: {
                    handleClick: function(e) {
                        this.get("champion.disabled") || (this.playSound("/fe/lol-static-assets/sounds/sfx-uikit-grid-click.ogg"), this.get("handleItemClick") && this.sendAction("handleItemClick", e))
                    },
                    handleMouseOver: function() {
                        this.get("champion.disabled") || this.playSound("/fe/lol-static-assets/sounds/sfx-uikit-grid-hover.ogg")
                    }
                }
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "QugKlOhZ",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-grid-champion\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-grid-champion\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-grid-champion\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","quick-play-grid-champion-champion-container"],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"handleClick",["get",["champion","id"]]],null],null],["flush-element"],["text","\\n"],["block",["if"],[["get",["champion","disabled"]]],null,1],["text","  "],["open-element","div",[]],["static-attr","class","quick-play-grid-champion-frame"],["flush-element"],["text","\\n    "],["append",["helper",["quick-play-champion-square"],null,[["championId"],[["get",["champion","id"]]]]],false],["text","\\n  "],["close-element"],["text","\\n  "],["open-element","div",[]],["dynamic-attr","class",["concat",["quick-play-grid-champion-overlay ",["unknown",["champion","selectedPosition"]]]]],["flush-element"],["close-element"],["text","\\n  "],["open-element","div",[]],["dynamic-attr","class",["concat",["quick-play-grid-champion-inventory-flag ",["unknown",["champion","ownershipType"]]]]],["flush-element"],["close-element"],["text","\\n"],["close-element"],["text","\\n"],["open-element","lol-uikit-resizing-text-field",[]],["static-attr","class","quick-play-grid-champion-name"],["static-attr","data-max-width","100"],["flush-element"],["append",["unknown",["champion","name"]],false],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n        "],["open-element","p",[]],["flush-element"],["text","\\n          "],["append",["unknown",["tra","quick_play_champion_disabled"]],false],["text","\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["uikit-tooltip"],null,[["tooltipPosition","type"],["bottom","system"]],0]],"locals":[]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            n(397);
            var i = n(109);
            const {
                RunMixin: o
            } = s.EmberAddons.EmberLifeline, a = s.ChampionStatistics.getPlayRates(), l = [i.POSITIONS.TOP, i.POSITIONS.JUNGLE, i.POSITIONS.MIDDLE, i.POSITIONS.BOTTOM, i.POSITIONS.UTILITY], r = document.documentElement.lang, c = [{
                field: "name",
                traKey: "quick_play_sort_by_name"
            }];
            e.exports = s.Ember.Component.extend(o, {
                layout: n(398),
                classNames: ["quick-play-champion-selector-component"],
                activeSort: null,
                didInsertElement() {
                    this._super(...arguments), this.send("sort", this.get("sortOptions.0"))
                },
                championPositionFilters: s.Ember.computed("playablePositions", "activeFilter.name", (function() {
                    const e = this.get("activeFilter.name");
                    return (this.get("playablePositions") || l).map((t => {
                        const n = t === i.POSITIONS.UTILITY ? i.CHAMP_STATS_POSITION_UTILITY : t;
                        return {
                            name: t,
                            iconPath: `/fe/lol-parties/icon-position-${t.toLowerCase()}.png`,
                            isSelected: e === t,
                            matches: e => a[n].hasOwnProperty(e.id)
                        }
                    }))
                })),
                sortOptions: s.Ember.computed("tra", (function() {
                    return c.map((e => s.Ember.Object.create(Object.assign({
                        displayName: this.get("tra").get(e.traKey),
                        selected: !1
                    }, e))))
                })),
                sanitizedSearchText: s.Ember.computed("searchInputValue", (function() {
                    return (this.get("searchInputValue") || "").toLocaleLowerCase(r).trim()
                })),
                filterAndSortedChampions: s.Ember.computed("champions", "activeFilter", "sanitizedSearchText", "activeSort", (function() {
                    const e = this.get("activeFilter"),
                        t = this.get("activeSort");
                    let n = this.get("champions");
                    Boolean(e) && (n = n.filter(e.matches)), Boolean(t) && (n = n.sort(((e, n) => e[t.field] - n[t.field])));
                    const s = this.get("sanitizedSearchText") || "";
                    return s && (n = n.filter((e => (e.searchMatchingTerms || "").includes(s)))), n
                })),
                actions: {
                    sort(e) {
                        if (!e) return;
                        const t = this.get("activeSort");
                        t && t.set("selected", !1), e.set("selected", !0), this.set("activeSort", e)
                    },
                    handleInputChanged(e) {
                        const t = e.target.value;
                        this.set("searchInputValue", t)
                    },
                    handleChampionClicked(e) {
                        this.sendAction("selectChampion", e)
                    },
                    handleFilterClick(e) {
                        const t = this.get("activeFilter.name");
                        e.name === t ? this.set("activeFilter", void 0) : this.set("activeFilter", e)
                    }
                }
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "MCD7WxqV",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-champion-selector\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-champion-selector\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-champion-selector\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","quick-play-champion-grid-header"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","quick-play-champion-grid-filters-container"],["flush-element"],["text","\\n"],["block",["each"],[["get",["championPositionFilters"]]],null,1],["text","  "],["close-element"],["text","\\n\\n  "],["open-element","div",[]],["static-attr","class","quick-play-sort-and-filter-container"],["flush-element"],["text","\\n    "],["open-element","lol-uikit-framed-dropdown",[]],["static-attr","class","quick-play-grid-sort-dropdown"],["flush-element"],["text","\\n"],["block",["each"],[["get",["sortOptions"]]],null,0],["text","    "],["close-element"],["text","\\n\\n    "],["open-element","lol-uikit-flat-input",[]],["static-attr","class","quick-play-champion-selector-filter-input"],["flush-element"],["text","\\n      "],["open-element","input",[]],["static-attr","type","search"],["static-attr","maxlength","50"],["dynamic-attr","placeholder",["unknown",["tra","quick_play_search"]],null],["dynamic-attr","oninput",["helper",["action"],[["get",[null]],"handleInputChanged"],null],null],["flush-element"],["close-element"],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"],["append",["helper",["quick-play-champion-grid"],null,[["itemRendererComponentName","items","handleItemClick"],["quick-play-grid-champion",["get",["filterAndSortedChampions"]],"handleChampionClicked"]]],false]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","        "],["open-element","lol-uikit-dropdown-option",[]],["static-attr","slot","lol-uikit-dropdown-option"],["dynamic-attr","selected",["unknown",["sort","selected"]],null],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"sort",["get",["sort"]]],null],null],["flush-element"],["text","\\n          "],["append",["unknown",["sort","displayName"]],false],["text","\\n        "],["close-element"],["text","\\n"]],"locals":["sort"]},{"statements":[["text","      "],["open-element","div",[]],["dynamic-attr","class",["concat",["quick-play-champion-grid-filter ",["helper",["if"],[["get",["filterData","isSelected"]],"selected"],null]]]],["flush-element"],["text","\\n        "],["append",["helper",["clickable-icon-button"],null,[["widthStyleOverride","heightStyleOverride","selected","handleClick","iconPath"],["24px","24px",["get",["filterData","isSelected"]],["helper",["action"],[["get",[null]],"handleFilterClick",["get",["filterData"]]],null],["get",["filterData","iconPath"]]]]],false],["text","\\n        "],["open-element","div",[]],["static-attr","class","quick-play-grid-filter-selected-underline"],["flush-element"],["close-element"],["text","\\n      "],["close-element"],["text","\\n"]],"locals":["filterData"]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            n(400);
            var i = n(401),
                o = n(381);
            e.exports = s.Ember.Component.extend({
                layout: n(402),
                classNames: ["quick-play-perks-selector-component"],
                matchmakingService: s.Ember.inject.service("matchmaking"),
                isPerkSelectionDisabled: s.Ember.computed("matchmakingService.isNotSearching", (function() {
                    return !(this.get("matchmakingService.isNotSearching") || !1)
                })),
                hidePerksModal(e) {
                    return new Promise(((e, t) => {
                        (0, i.usePerksApi)((e => e.hide())), e()
                    })).then((() => {
                        this.sendAction("setShowQuickPlayModal", !0, e)
                    }))
                },
                getRuneRecommenderContext(e) {
                    const t = (this.get("playerSlots") || [])[e];
                    return t ? {
                        champId: t.championId,
                        position: t.positionPreference,
                        mapId: 11,
                        spellIds: [t.spell1, t.spell2],
                        setRecommendedPage: (t, n) => this._setRecommendedPage(t, n, e),
                        setPerksPage: t => this._setPerksPage(t, e)
                    } : {}
                },
                _setPerksPage(e, t) {
                    return this.get("setPerksPage")(e, t).catch((n => {
                        s.logger.error(`Error setting Quickplay perks page: ${JSON.stringify(e)} for slot: ${t}. ${n}`)
                    }))
                },
                _setRecommendedPage(e, t, n) {
                    const s = (0, o.copyArrayOfObjects)(this.get("playerSlots") || []);
                    t && 2 === t.length && (s[n].spell1 = t[0], s[n].spell2 = t[1]);
                    const i = JSON.stringify(e);
                    return s[n].perks = i, this.get("setQuickPlaySlots")(s)
                },
                actions: {
                    showPerksModal() {
                        const e = this.get("selectingSlotIndex"),
                            t = this.getRuneRecommenderContext(e),
                            n = this.get("selectingPerksPage.id");
                        return new Promise(((t, n) => {
                            this.sendAction("setShowQuickPlayModal", !1, e), t()
                        })).then((() => {
                            (0, i.usePerksApi)((s => s.edit(n, !0, (() => this.hidePerksModal(e)), t)))
                        }))
                    },
                    showRuneRecommenderModal() {
                        const e = this.get("selectingSlotIndex"),
                            t = this.getRuneRecommenderContext(e);
                        return new Promise(((t, n) => {
                            this.sendAction("setShowQuickPlayModal", !1, e), t()
                        })).then((() => {
                            (0, i.usePerksApi)((n => n.runeRecommender(!0, (() => this.hidePerksModal(e)), t)))
                        }))
                    },
                    selectPerksPage(e, t) {
                        this.sendAction("setPerksPage", e, t)
                    }
                }
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.usePerksApi = function(e) {
                return s.default.getProvider().getOptional("rcp-fe-lol-collections").then((t => e(t.perksApi())), (e => s.logger.error("Provider getOptional failure", e)))
            };
            var s = function(e, t) {
                if (!t && e && e.__esModule) return e;
                if (null === e || "object" != typeof e && "function" != typeof e) return {
                    default: e
                };
                var n = i(t);
                if (n && n.has(e)) return n.get(e);
                var s = {},
                    o = Object.defineProperty && Object.getOwnPropertyDescriptor;
                for (var a in e)
                    if ("default" !== a && Object.prototype.hasOwnProperty.call(e, a)) {
                        var l = o ? Object.getOwnPropertyDescriptor(e, a) : null;
                        l && (l.get || l.set) ? Object.defineProperty(s, a, l) : s[a] = e[a]
                    } s.default = e, n && n.set(e, s);
                return s
            }(n(1));

            function i(e) {
                if ("function" != typeof WeakMap) return null;
                var t = new WeakMap,
                    n = new WeakMap;
                return (i = function(e) {
                    return e ? n : t
                })(e)
            }
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "+0YyV3KX",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-perks-selector\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-perks-selector\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-perks-selector\\\\index.js\\" "],["text","\\n"],["append",["helper",["framed-icon-button"],null,[["disabled","disabledTooltipText","iconPath","clickSfxPath","hoverSfxPath","onButtonClick"],[["get",["isPerkSelectionDisabled"]],["get",["disabledTooltipText"]],"/fe/lol-champ-select/images/perks/rune-recommender-icon.png","/fe/lol-champ-select/sounds/sfx-uikit-edit-click.ogg","/fe/lol-champ-select/sounds/sfx-uikit-grid-hover.ogg",["helper",["action"],[["get",[null]],"showRuneRecommenderModal"],null]]]],false],["text","\\n\\n"],["append",["helper",["framed-icon-button"],null,[["disabled","iconPath","clickSfxPath","hoverSfxPath","onButtonClick"],[["get",["isPerkSelectionDisabled"]],"/fe/lol-champ-select/images/config/edit-perks-button.png","/fe/lol-champ-select/sounds/sfx-uikit-edit-click.ogg","/fe/lol-champ-select/sounds/sfx-uikit-grid-hover.ogg",["helper",["action"],[["get",[null]],"showPerksModal"],null]]]],false],["text","\\n\\n"],["append",["helper",["quick-play-perks-page-dropdown"],null,[["perksPages","selectingPerksPage","playerSlots","selectingSlotIndex","handleDropdownOptionSelected"],[["get",["perksPages"]],["get",["selectingPerksPage"]],["get",["playerSlots"]],["get",["selectingSlotIndex"]],"selectPerksPage"]]],false],["text","\\n "]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            n(404);
            e.exports = s.Ember.Component.extend({
                layout: n(405),
                classNames: ["quick-play-perks-page-dropdown-component"],
                tooltipConfig: {
                    targetAnchor: {
                        x: "right",
                        y: "center"
                    },
                    tooltipAnchor: {
                        x: "left",
                        y: "center"
                    },
                    showDelay: 175
                },
                matchmakingService: s.Ember.inject.service("matchmaking"),
                disabled: s.Ember.computed("matchmakingService.isNotSearching", (function() {
                    return !(this.get("matchmakingService.isNotSearching") || !1)
                })),
                actions: {
                    selectPerksPage(e, t) {
                        this.sendAction("handleDropdownOptionSelected", e, t)
                    }
                }
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "vef/36EG",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-perks-page-dropdown\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-perks-page-dropdown\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-perks-page-dropdown\\\\index.js\\" "],["text","\\n"],["open-element","lol-uikit-framed-dropdown",[]],["static-attr","stylablecontent",""],["static-attr","direction","upward"],["dynamic-attr","disabled",["unknown",["disabled"]],null],["static-attr","class","quick-play-perks-page-dropdown"],["flush-element"],["text","\\n"],["block",["each"],[["get",["perksPages"]]],[["key"],["id"]],2],["close-element"],["text","\\n"],["block",["if"],[["get",["selectingPerksPage"]]],null,1]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["append",["helper",["perk-page-tooltip"],null,[["page"],[["get",["selectingPerksPage"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["block",["uikit-tooltip"],null,[["tooltipConfig"],[["get",["tooltipConfig"]]]],0]],"locals":[]},{"statements":[["text","    "],["open-element","lol-uikit-dropdown-option",[]],["static-attr","slot","lol-uikit-dropdown-option"],["dynamic-attr","selected",["helper",["eq"],[["get",["page","id"]],["get",["selectingPerksPage","id"]]],null],null],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"selectPerksPage",["get",["page"]],["get",["selectingSlotIndex"]]],null],null],["flush-element"],["text","\\n      "],["append",["helper",["quick-play-perks-page-dropdown-option"],null,[["tooltipConfig","page"],[["get",["tooltipConfig"]],["get",["page"]]]]],false],["text","\\n    "],["close-element"],["text","\\n"]],"locals":["page"]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            n(407), e.exports = s.Ember.Component.extend({
                layout: n(408),
                classNames: ["quick-play-perks-page-dropdown-option-component"],
                iconClassName: s.Ember.computed("page.isValid", "page.isTemporary", "page.autoModifiedSelections.length", (function() {
                    return this.get("page.isValid") ? this.get("page.isTemporary") ? "recommended-page" : this.get("page.autoModifiedSelections.length") ? "modified" : "removed" : "invalid"
                }))
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "ZEZqWbpJ",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-perks-page-dropdown-option\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-perks-page-dropdown-option\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-perks-page-dropdown-option\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","perks-page-dropdown-option-content"],["flush-element"],["text","\\n  "],["open-element","div",[]],["dynamic-attr","class",["concat",["perks-page-dropdown-option-icon ",["unknown",["iconClassName"]]]]],["flush-element"],["text","\\n    "],["open-element","lol-perks-glowing-dot",[]],["static-attr","class","perks-page-dropdown-option-dot"],["flush-element"],["close-element"],["text","\\n  "],["close-element"],["text","\\n\\n  "],["open-element","div",[]],["static-attr","class","perks-page-name"],["flush-element"],["text","\\n    "],["append",["unknown",["page","name"]],false],["text","\\n  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipConfig"],[["get",["tooltipConfig"]]]],0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["append",["helper",["perk-page-tooltip"],null,[["page"],[["get",["page"]]]]],false],["text","\\n"]],"locals":[]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1),
                i = n(260);
            n(410);
            const {
                RunMixin: o
            } = s.EmberAddons.EmberLifeline, a = "skinsViewer", l = "quest-skin";
            e.exports = s.Ember.Component.extend(o, {
                layout: n(411),
                classNames: ["quick-play-skin-carousel-component"],
                selectingSkinIndex: 0,
                selectedSkin: null,
                selectedChroma: null,
                selectedForm: null,
                skins: [],
                carouselOffset: 0,
                initialOffset: -100,
                thumbnailWidth: 100,
                selectedThumbnailWidth: 128,
                thumbnailAnimationCacheSize: 1,
                maxThumbnailsVisible: 3,
                didUpdateAttrs() {
                    this._super(...arguments);
                    const e = this.get("selectedSkin.id"),
                        t = this.get("selectedChroma.id"),
                        n = this.get("selectedForm.id");
                    if (e !== this._prevSelectedSkinId) {
                        const s = this.get("skins").indexOf(this.get("selectedSkin"));
                        this.set("selectingSkinIndex", s), this._prevSelectedSkinId = e, t !== this._prevSelectedChromaId ? (this._prevSelectedChromaId = t, this._setCarouselOffset(s)) : n !== this._prevSelectedFormId ? (this._prevSelectedFormId = n, this._setCarouselOffset(s)) : this._switchSkin(s)
                    }
                },
                showArrows: s.Ember.computed("skins.length", "maxThumbnailsVisible", (function() {
                    return this.get("skins.length") > this.get("maxThumbnailsVisible")
                })),
                carouselWidth: s.Ember.computed("skins.length", "maxThumbnailsVisible", (function() {
                    const e = this.get("skins.length");
                    return e > this.get("maxThumbnailsVisible") ? 4 * this.get("thumbnailWidth") + this.get("selectedThumbnailWidth") : this.get("selectedThumbnailWidth") + (e - 1) * this.get("thumbnailWidth")
                })),
                _getSkinPurchaseCallback(e, t) {
                    if (t) {
                        const t = (this.get("selectedSkin").chromas || []).find((t => t.id === e));
                        if (!Boolean(t)) return;
                        s.Ember.set(t, "ownership.owned", !0), s.Ember.set(t, "unlocked", !0)
                    } else {
                        const t = this.get("skins").find((t => t.id === e));
                        if (!Boolean(t)) return;
                        s.Ember.set(t, "ownership.owned", !0), s.Ember.set(t, "unlocked", !0)
                    }
                    this.sendAction("setSkin", e)
                },
                _createTemplatePaw(e) {
                    const t = {
                            templateType: i.PAW.TEMPLATE_TYPES.LARGE_TWO_COLUMN_LANDSCAPE
                        },
                        n = () => this._getSkinPurchaseCallback(e && (e.itemId || e.id), !1);
                    return s.pawApi.createPawTemplateModalAsync(e.offerId, t, a).then((() => {
                        s.pawApi.getBaseSkinLineData(e.offerId).then((e => {
                            e.onPurchaseComplete = n, s.pawApi.populatePawTemplateModal(e)
                        }))
                    }))
                },
                _openPawModal(e) {
                    const {
                        item: t,
                        inventoryType: n,
                        modalType: o,
                        ownerElement: r
                    } = e;
                    let c = !1;
                    const m = o === i.PAW.MODAL_TYPES.CHROMA_MODAL,
                        u = () => this._getSkinPurchaseCallback(t && (t.itemId || t.id), m);
                    c = t.tags && t.tags.includes(l) ? this._createTemplatePaw(t) : s.pawApi.createPAWModal({
                        itemId: t.itemId || t.id,
                        inventoryType: n
                    }, a, o, r, u), c && this.set("pawModalOpening", !0)
                },
                _setCarouselOffset(e) {
                    if (this.get("showArrows")) {
                        const t = this.get("initialOffset") + this.get("thumbnailWidth") - this.get("thumbnailWidth") * (e - 1);
                        this.set("carouselOffset", t)
                    } else this.set("carouselOffset", 0)
                },
                _switchSkin(e) {
                    this._setCarouselOffset(e);
                    const t = this.get("skins");
                    if (this.set("selectingSkinIndex", e), Boolean(t[e])) {
                        const n = t[e].id;
                        this.sendAction("setSkin", n)
                    }
                },
                _onSkinThumbnailClick(e) {
                    const t = this.get("selectingSkinIndex"),
                        n = e - t <= 0 ? "/fe/lol-collections/audio/sfx-collection-browse-left-click.ogg" : "/fe/lol-collections/audio/sfx-collection-browse-right-click.ogg";
                    this._switchSkin(e), t !== e && s.Audio.getChannel("sfx-ui").playSound(n)
                },
                _onChildSkinSelect(e) {
                    e && this.sendAction("setSkin", e.id)
                },
                actions: {
                    moveSkinSelection(e) {
                        let t = this.get("selectingSkinIndex");
                        const n = this.get("skins");
                        t = -1 === e ? Math.max(0, t - 1) : Math.min(n.length - 1, t + 1), this._switchSkin(t)
                    },
                    showSkinPurchaseModal(e) {
                        this._openPawModal(e)
                    },
                    skinThumbnailClicked(e) {
                        this._onSkinThumbnailClick(e)
                    },
                    setChildSkin(e) {
                        this._onChildSkinSelect(e)
                    }
                }
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "OapJ9koZ",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-skin-carousel\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-skin-carousel\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-skin-carousel\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","quick-play-skin-carousel"],["flush-element"],["text","\\n"],["block",["if"],[["get",["showArrows"]]],null,7],["text","\\n  "],["open-element","div",[]],["static-attr","class","carousel-track-container"],["dynamic-attr","style",["concat",["width:",["unknown",["carouselWidth"]],"px"]]],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","carousel-track"],["dynamic-attr","style",["concat",["transform: translateX(",["unknown",["carouselOffset"]],"px)"]]],["flush-element"],["text","\\n"],["block",["each"],[["get",["skins"]]],[["key"],["id"]],6],["text","    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n\\n"],["block",["if"],[["get",["showArrows"]]],null,1],["close-element"],["text","\\n\\n"],["open-element","div",[]],["static-attr","class","quick-play-skin-selection-indicator"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","line line-left"],["flush-element"],["close-element"],["text","\\n  "],["open-element","ul",[]],["static-attr","class","skin-selection-indicator-list"],["flush-element"],["text","\\n"],["block",["each"],[["get",["skins"]]],null,0],["text","  "],["close-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","line line-right"],["flush-element"],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["open-element","li",[]],["dynamic-attr","class",["concat",["skin-pip ",["helper",["if"],[["helper",["eq"],[["get",["selectingSkinIndex"]],["get",["index"]]],null],"skin-pip-selected"],null]]]],["dynamic-attr","onClick",["helper",["action"],[["get",[null]],"skinThumbnailClicked",["get",["index"]]],null],null],["flush-element"],["close-element"],["text","\\n"]],"locals":["skin","index"]},{"statements":[["text","    "],["open-element","lol-uikit-arrow-button",[]],["static-attr","direction","right"],["static-attr","class","next-button"],["dynamic-attr","onClick",["helper",["action"],[["get",[null]],"moveSkinSelection",1],null],null],["static-attr","click-sfx-src","/fe/lol-collections/audio/sfx-collection-browse-right-click.ogg"],["flush-element"],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","              "],["append",["helper",["skin-quest-form-modal"],null,[["baseSkin","questForms","selectedForm","skinIsOwned","enabled","setSkin","openPawModal"],[["get",["skin"]],["get",["skin","questSkinInfo","tiers"]],["get",["selectedForm"]],["get",["skin","unlocked"]],["helper",["eq"],[["get",["index"]],["get",["selectingSkinIndex"]]],null],"setChildSkin",["helper",["action"],[["get",[null]],"showSkinPurchaseModal"],null]]]],false],["text","\\n              "],["append",["helper",["skin-chroma-modal"],null,[["baseSkin","chromas","selectedChroma","skinIsOwned","enabled","setSkin","openPawModal"],[["get",["skin"]],["get",["skin","chromas"]],["get",["selectedChroma"]],["get",["skin","unlocked"]],["helper",["eq"],[["get",["index"]],["get",["selectingSkinIndex"]]],null],"setChildSkin",["helper",["action"],[["get",[null]],"showSkinPurchaseModal"],null]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","            "],["open-element","div",[]],["static-attr","class","gem-overlay"],["flush-element"],["text","\\n              "],["open-element","img",[]],["dynamic-attr","src",["concat",[["unknown",["skin","rarityGemPath"]]]]],["flush-element"],["close-element"],["text","\\n            "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","            "],["open-element","div",[]],["static-attr","class","skin-thumbnail-img"],["dynamic-attr","style",["concat",["background-image:url(",["helper",["if"],[["get",["skin","questSkinInfo","tilePath"]],["get",["skin","questSkinInfo","tilePath"]],["get",["skin","tilePath"]]],null],")"]]],["dynamic-attr","onClick",["helper",["action"],[["get",[null]],"skinThumbnailClicked",["get",["index"]]],null],null],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","            "],["open-element","div",[]],["static-attr","class","skin-thumbnail-img"],["dynamic-attr","style",["concat",["background-image:url(",["helper",["if"],[["get",["skin","questSkinInfo","tilePath"]],["get",["selectedForm","tilePath"]],["get",["skin","tilePath"]]],null],")"]]],["dynamic-attr","onClick",["helper",["action"],[["get",[null]],"skinThumbnailClicked",["get",["index"]]],null],null],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","div",[]],["dynamic-attr","class",["concat",["thumbnail-wrapper\\n          ",["helper",["if"],[["get",["skin","purchaseEnabled"]],"purchase-available"],null],"\\n          ",["helper",["if"],[["helper",["eq"],[["get",["index"]],["get",["selectingSkinIndex"]]],null],"active-skin"],null],"\\n          ",["helper",["unless"],[["get",["skin","unlocked"]],"unowned"],null],"\\n          ",["helper",["if"],[["get",["skin","ownership","loyaltyReward"]],"loyalty-reward"],null],"\\n          ",["helper",["if"],[["get",["skin","ownership","rental","rented"]],"rental"],null]]]],["flush-element"],["text","\\n          "],["open-element","div",[]],["dynamic-attr","class",["concat",["skin-purchase-button-container ",["helper",["if"],[["helper",["eq"],[["get",["index"]],["get",["selectingSkinIndex"]]],null],"visible"],null]]]],["flush-element"],["text","\\n            "],["append",["helper",["skin-purchase-button"],null,[["skin","openPawModal"],[["get",["skin"]],["helper",["action"],[["get",[null]],"showSkinPurchaseModal"],null]]]],false],["text","\\n          "],["close-element"],["text","\\n"],["block",["if"],[["helper",["eq"],[["get",["index"]],["get",["selectingSkinIndex"]]],null]],null,5,4],["block",["if"],[["get",["skin","rarityGemPath"]]],null,3],["text","\\n          "],["open-element","div",[]],["static-attr","class","related"],["flush-element"],["text","\\n"],["block",["if"],[["get",["skin","unlocked"]]],null,2],["text","          "],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":["skin","index"]},{"statements":[["text","    "],["open-element","lol-uikit-arrow-button",[]],["static-attr","direction","left"],["static-attr","class","prev-button"],["dynamic-attr","onClick",["helper",["action"],[["get",[null]],"moveSkinSelection",-1],null],null],["static-attr","click-sfx-src","/fe/lol-collections/audio/sfx-collection-browse-left-click.ogg"],["flush-element"],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            n(413), e.exports = s.Ember.Component.extend({
                layout: n(414),
                classNames: ["quick-play-skin-select-component"],
                selectingSlot: {},
                skins: [],
                viewSkin: null,
                viewChroma: null,
                viewForm: null,
                savedSkinSelections: new Map,
                shouldShowVideoForSkin: s.Ember.computed.and("animationsEnabled", "currentSkinSplashVideoPath"),
                hasQuestForms: s.Ember.computed.bool("viewSkin.questSkinInfo.tiers.length"),
                animationsEnabled: s.Ember.computed.alias("uxSettings.largeAreaAnimationsEnabled"),
                displayedSkin: s.Ember.computed("viewChroma", "viewSkin", "viewForm", (function() {
                    const e = this.get("viewChroma"),
                        t = this.get("viewSkin"),
                        n = this.get("viewForm");
                    return e || t || n || null
                })),
                currentSkinSplashVideoPath: s.Ember.computed("viewSkin.splashVideoPath", "viewSkin.skinSplashVideoOverride", "viewForm.splashVideoPath", "hasQuestForms", (function() {
                    const e = this.get("viewSkin.collectionSplashVideoPath"),
                        t = this.get("hasQuestForms"),
                        n = this.get("viewSkin.skinSplashVideoOverride");
                    return n || (t && Boolean(this.get("viewForm")) ? this.get("viewForm.splashVideoPath") || null : e)
                })),
                skinSplashPath: s.Ember.computed("viewSkin", "viewSkin.splashPath", "viewSkin.skinSplashOverride", "currentSkinSplashVideoPath", "shouldShowVideoForSkin", "hasQuestForms", "viewForm", "viewForm.splashPath", (function() {
                    if (this.get("shouldShowVideoForSkin")) return this.get("currentSkinSplashVideoPath");
                    {
                        const e = this.get("viewSkin.skinSplashOverride");
                        return e || (this.get("hasQuestForms") && Boolean(this.get("viewForm")) ? this.get("viewForm.splashPath") || null : this.get("viewSkin.splashPath"))
                    }
                })),
                init() {
                    this._super(...arguments), this._uxSettingsListener = this._uxSettingsObserver.bind(this), s.UXSettings.addObserver(this._uxSettingsListener)
                },
                willDestroy() {
                    this._super(...arguments), s.UXSettings.removeObserver(this._uxSettingsListener)
                },
                didUpdateAttrs() {
                    this._super(...arguments);
                    const e = this.get("selectingSlot.skinId"),
                        t = this.get("displayedSkin"),
                        n = this.get("selectingSlot.championId");
                    (0 !== e && (!Boolean(t) || Boolean(t) && t.championId !== n) || n !== this._currentSlotChampId) && (this._getSelectedSkin(e), this._currentSlotChampId = n)
                },
                _uxSettingsObserver(e) {
                    this.set("uxSettings", e)
                },
                _getSelectedSkin(e) {
                    const t = this.get("skins");
                    for (let n = 0; n < t.length; n++) {
                        const s = t[n];
                        if (!Boolean(s)) return;
                        const i = (s.questSkinInfo.tiers || []).find((t => t.id === e));
                        if (i && i.id) return this.set("viewSkin", s), this.set("viewChroma", s), this.set("viewForm", i), this._updateSavedSkinSelectionList(i, s), i;
                        if (s.id === e) {
                            this.set("viewSkin", s);
                            const e = this._getSavedSkinSelection(s);
                            return this.set("viewChroma", e), this.set("viewForm", null), s
                        }
                        const o = (s.chromas || []).find((t => t.id === e));
                        if (o && o.id) return this.set("viewSkin", s), this.set("viewChroma", o), this.set("viewForm", null), this._updateSavedSkinSelectionList(o, s), o
                    }
                },
                _getSavedSkinSelection(e) {
                    if (!Boolean(e)) return;
                    const t = this.get("savedSkinSelections").get(e.id),
                        n = (e.chromas || []).find((e => e.id === t));
                    return Boolean(n) ? n : e
                },
                _updateSavedSkinSelectionList(e, t) {
                    if (!Boolean(e) && !Boolean(t)) return;
                    const n = this.get("savedSkinSelections").set(t.id, e.id);
                    return this.set("savedSkinSelections", n)
                },
                _setSkin(e) {
                    const t = this._getSelectedSkin(e);
                    Boolean(t) && t.unlocked && this.sendAction("setSkin", e)
                },
                actions: {
                    setSkin(e) {
                        this._setSkin(e)
                    }
                }
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "5ITmt3qW",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-skin-select\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-skin-select\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-skin-select\\\\index.js\\" "],["text","\\n\\n"],["append",["helper",["uikit-background-switcher"],null,[["src"],[["get",["skinSplashPath"]]]]],false],["text","\\n"],["open-element","lol-uikit-section-controller",[]],["static-attr","animation","crossfade"],["static-attr","selected-item","showcase-view"],["static-attr","class","section-controller"],["flush-element"],["text","\\n  "],["open-element","lol-uikit-section",[]],["static-attr","section-id","showcase-view"],["static-attr","class","showcase-section"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","background-shader"],["flush-element"],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","showcase-wrapper"],["flush-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","top-part"],["flush-element"],["text","\\n      "],["close-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","bottom-part"],["flush-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","skin-title"],["flush-element"],["text","\\n"],["block",["if"],[["get",["viewSkin","rarity","gemIcon"]]],null,2],["text","          "],["open-element","div",[]],["static-attr","class","skin-name"],["flush-element"],["append",["unknown",["viewSkin","name"]],false],["close-element"],["text","\\n        "],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","quick-play-skin-carousel-visibility-wrapper"],["flush-element"],["text","\\n          "],["append",["helper",["quick-play-skin-carousel"],null,[["selectedSkin","selectedChroma","selectedForm","skins","setSkin"],[["get",["viewSkin"]],["get",["viewChroma"]],["get",["viewForm"]],["get",["skins"]],"setSkin"]]],false],["text","\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n\\n  "],["open-element","lol-uikit-section",[]],["static-attr","section-id","splash-view"],["static-attr","class","splash-view-section"],["flush-element"],["text","\\n  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"],["block",["if"],[["get",["viewSkin","emblems"]]],null,1]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["open-element","img",[]],["dynamic-attr","src",["concat",[["unknown",["emblem","emblemPath","large"]]]]],["flush-element"],["close-element"],["text","\\n"]],"locals":["emblem"]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","emblem-overlay"],["flush-element"],["text","\\n"],["block",["each"],[["get",["viewSkin","emblems"]]],null,0],["text","  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","            "],["open-element","div",[]],["static-attr","class","tier-icon"],["flush-element"],["text","\\n              "],["open-element","img",[]],["dynamic-attr","src",["concat",[["unknown",["viewSkin","rarity","gemIcon"]]]]],["flush-element"],["close-element"],["text","\\n            "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            n(416), e.exports = s.Ember.Component.extend({
                layout: n(417),
                classNames: ["quick-play-summoner-spell-popup-component"],
                contextSpellLockedDescription: s.Ember.computed("contextSpell.isEligibleToUseSpell", "contextSpell.isSpellDisabledForMode", "tra.quick_play_spell_modal_spell_requires_level", "tra.quick_play_spell_modal_spell_disabled", (function() {
                    const e = this.get("contextSpell.isEligibleToUseSpell"),
                        t = this.get("contextSpell.isSpellDisabledForMode");
                    return e ? t ? this.get("tra.quick_play_spell_modal_spell_disabled") : "" : this.get("tra").formatString("quick_play_spell_modal_spell_requires_level", {
                        level: this.get("contextSpell.summonerLevel")
                    })
                })),
                contextSpellCooldownDescription: s.Ember.computed("contextSpell.cooldown", "tra.quick_play_spell_modal_spell_cooldown", (function() {
                    const e = this.get("contextSpell.cooldown");
                    if (e) return this.get("tra").formatString("quick_play_spell_modal_spell_cooldown", {
                        cooldown: e
                    })
                })),
                contextSpell: s.Ember.computed("hoveredSpell", "changingSpell", (function() {
                    const e = this.get("hoveredSpell"),
                        t = this.get("changingSpell");
                    return e || t
                })),
                actions: {
                    onFlyoutSpellHover(e) {
                        this.set("hoveredSpell", e)
                    },
                    onSummonerSpellClicked(e) {
                        this.sendAction("handleSpellSelected", e)
                    }
                }
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "at4BYZN9",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-summoner-spell-popup\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-summoner-spell-popup\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-summoner-spell-popup\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","spell-information"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","spell-title"],["flush-element"],["text","\\n    "],["append",["unknown",["contextSpell","name"]],false],["text","\\n  "],["close-element"],["text","\\n"],["block",["if"],[["get",["contextSpell","isDisabled"]]],null,1],["text","  "],["open-element","div",[]],["static-attr","class","spell-description"],["flush-element"],["text","\\n    "],["append",["unknown",["contextSpell","description"]],false],["text","\\n  "],["close-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","spell-cooldown"],["flush-element"],["text","\\n    "],["append",["unknown",["contextSpellCooldownDescription"]],false],["text","\\n  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"],["open-element","div",[]],["static-attr","class","spell-divider"],["flush-element"],["close-element"],["text","\\n"],["open-element","lol-uikit-scrollable",[]],["static-attr","class","summoner-spells"],["flush-element"],["text","\\n"],["block",["each"],[["get",["spells"]]],null,0],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","summoner-spell-container"],["flush-element"],["text","\\n      "],["append",["helper",["quick-play-summoner-spell-renderer"],null,[["isDisabled","spell","onRendererMouseOver","onRendererClicked"],[["get",["spell","isDisabled"]],["get",["spell"]],"onFlyoutSpellHover",["helper",["action"],[["get",[null]],"onSummonerSpellClicked",["get",["spell"]]],null]]]],false],["text","\\n      "],["open-element","div",[]],["dynamic-attr","class",["concat",["quick-play-summoner-spell-selected-border-overlay ",["helper",["if"],[["helper",["eq"],[["get",["spell","id"]],["get",["changingSpell","id"]]],null],"","hidden"],null]]]],["flush-element"],["close-element"],["text","\\n    "],["close-element"],["text","\\n"]],"locals":["spell"]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","spell-locked-description"],["flush-element"],["text","\\n    "],["append",["unknown",["contextSpellLockedDescription"]],false],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            n(419), e.exports = s.Ember.Component.extend({
                layout: n(420),
                classNames: ["quick-play-summoner-spell-renderer-component"],
                classNameBindings: ["isDisabled:is-disabled"],
                actions: {
                    handleSummonerSpellMouseOver(e) {
                        this.sendAction("onRendererMouseOver", e)
                    },
                    handleSummonerSpellClick() {
                        this.get("isDisabled") || this.onRendererClicked()
                    }
                }
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "peQvYbI0",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-summoner-spell-renderer\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-summoner-spell-renderer\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-summoner-spell-renderer\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","summoner-spell-renderer-frame"],["dynamic-attr","onmouseover",["helper",["action"],[["get",[null]],"handleSummonerSpellMouseOver",["get",["spell"]]],null],null],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"handleSummonerSpellClick",["get",["spell"]]],null],null],["flush-element"],["text","\\n  "],["open-element","img",[]],["static-attr","class","summoner-spell-renderer-icon"],["dynamic-attr","src",["unknown",["spell","iconPath"]],null],["flush-element"],["close-element"],["text","\\n"],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s, i = n(1),
                o = (s = n(5)) && s.__esModule ? s : {
                    default: s
                };
            n(422);
            e.exports = i.Ember.Component.extend({
                layout: n(423),
                classNames: ["quick-play-summoner-spell-select-component"],
                classNameBindings: [],
                flyoutOptions: {
                    targetAnchor: {
                        x: "center",
                        y: "top"
                    },
                    tooltipAnchor: {
                        x: "center",
                        y: "bottom"
                    },
                    offset: {
                        x: 0,
                        y: -20
                    },
                    backdropCutout: null,
                    orientation: "top",
                    animated: !1
                },
                quickPlayService: i.Ember.inject.service("quick-play"),
                selectingSlotSummonerSpells: i.Ember.computed("selectingSlot.spell1", "selectingSlot.spell2", "quickPlayService.gameModeSummonerSpells.[]", (function() {
                    const e = this.get("selectingSlot.spell1") || 0,
                        t = this.get("selectingSlot.spell2") || 0,
                        n = this.get("quickPlayService.gameModeSummonerSpells") || [];
                    return [e, t].map((e => n.find((t => t.id === e))))
                })),
                _toggleFlyout(e) {
                    void 0 !== e ? this.set("isFlyoutOpen", e) : this.set("isFlyoutOpen", !this.get("isFlyoutOpen"))
                },
                playSpellSelectSound(e) {
                    i.Audio.getChannel(o.default.SFX_CHANNEL).playSound(e.sfxPath)
                },
                actions: {
                    toggleFlyout: function(e) {
                        this._toggleFlyout(e)
                    },
                    handleSummonerSpellFlyoutTrigger: function(e, t) {
                        this.set("changingSpell", e), this.set("summonerSpellFlyoutIndex", t), this.set("isFlyoutOpen", !0)
                    },
                    handleSummonerSpellSelected: function(e) {
                        this._toggleFlyout(!1);
                        const t = this.get("summonerSpellFlyoutIndex"),
                            n = [this.get("selectingSlot.spell1"), this.get("selectingSlot.spell2")],
                            s = n.findIndex((t => t === e.id));
                        if (t !== s && s >= 0) n.reverse();
                        else {
                            if (-1 !== s) return;
                            n[t] = e.id, this.playSpellSelectSound(e)
                        }
                        this.sendAction("handleSpellsSelected", n)
                    }
                }
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "pJp/ZlDe",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-summoner-spell-select\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-summoner-spell-select\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-summoner-spell-select\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","quick-play-summoner-spells-container"],["flush-element"],["text","\\n"],["block",["each"],[["get",["selectingSlotSummonerSpells"]]],null,0],["close-element"],["text","\\n"],["open-element","lc-flyout",[]],["dynamic-attr","open",["unknown",["isFlyoutOpen"]],null],["dynamic-attr","onHide",["helper",["action"],[["get",[null]],"toggleFlyout",false],null],null],["dynamic-attr","uiKitOptionOverrides",["unknown",["flyoutOptions"]],null],["flush-element"],["text","\\n  "],["open-element","lc-flyout-content",[]],["flush-element"],["text","\\n    "],["append",["helper",["quick-play-summoner-spell-popup"],null,[["changingSpell","spells","handleSpellSelected"],[["get",["changingSpell"]],["get",["quickPlayService","gameModeSummonerSpells"]],"handleSummonerSpellSelected"]]],false],["text","\\n  "],["close-element"],["text","\\n"],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["append",["helper",["quick-play-summoner-spell-renderer"],null,[["spell","onRendererClicked"],[["get",["spell"]],["helper",["action"],[["get",[null]],"handleSummonerSpellFlyoutTrigger",["get",["spell"]],["get",["index"]]],null]]]],false],["text","\\n"]],"locals":["spell","index"]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            n(425), e.exports = s.Ember.Component.extend({
                layout: n(426),
                classNames: ["quick-play-loadout-tootip-component"],
                quickPlayService: s.Ember.inject.service("quick-play"),
                getSpellData(e) {
                    return (this.get("quickPlayService.gameModeSummonerSpells") || []).find((t => t.id === e))
                },
                spell1: s.Ember.computed("playerSlot.spell1", "quickPlayService.gameModeSummonerSpells", (function() {
                    const e = this.get("playerSlot.spell1");
                    return this.getSpellData(e)
                })),
                spell2: s.Ember.computed("playerSlot.spell2", "quickPlayService.gameModeSummonerSpells", (function() {
                    const e = this.get("playerSlot.spell2");
                    return this.getSpellData(e)
                })),
                selectedSkin: s.Ember.computed("playerSlot", "playerSlot.championId", "playerSlot.skinId", "quickPlayService.getLastSelectedSkinForChampion", (function() {
                    const e = this.get("playerSlot.championId"),
                        t = this.get("quickPlayService"),
                        n = this.get("playerSlot.skinId"),
                        s = t.getChampionData(e).skins || [];
                    for (let e = 0; e < s.length; e++) {
                        const t = s[e];
                        if (t.id === n) return t;
                        const i = t.questSkinInfo?.tiers.find((e => e.id === n));
                        if (i) return i;
                        const o = t.chromas.find((e => e.id === n));
                        if (o) return {
                            name: o.name || t.name,
                            splashPath: t.splashPath
                        }
                    }
                })),
                selectedPerkPage: s.Ember.computed("playerSlot.championId", "quickPlayService.perksPages.@each.quickPlayChampionIds", (function() {
                    const e = this.get("playerSlot.championId") || 0;
                    return (this.get("quickPlayService.perksPages") || []).find((t => t && (t.quickPlayChampionIds || []).includes(e)))
                })),
                secondaryStyleIconStyle: s.Ember.computed("selectedPerkPage.secondaryStyleIconPath", (function() {
                    return `-webkit-mask-image: url(${this.get("selectedPerkPage.secondaryStyleIconPath")});`
                }))
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "w98pV48f",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-loadout-tooltip-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-loadout-tooltip-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties-v2\\\\quick-play-loadout-tooltip-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","quick-play-loadout-tooltip"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","quick-play-loadout-selected-skin-container"],["flush-element"],["text","\\n    "],["open-element","img",[]],["static-attr","class","quick-play-loadout-selected-skin-image"],["dynamic-attr","src",["unknown",["selectedSkin","splashPath"]],null],["flush-element"],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","quick-play-loadout-skin-overlay-container"],["flush-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","quick-play-loadout-skin-name-and-summoner-spells"],["flush-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","quick-play-loadout-skin-name"],["flush-element"],["text","\\n          "],["append",["unknown",["selectedSkin","name"]],false],["text","\\n        "],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","quick-play-loadout-summoner-spells-container"],["flush-element"],["text","\\n          "],["append",["helper",["quick-play-summoner-spell-renderer"],null,[["spell"],[["get",["spell1"]]]]],false],["text","\\n          "],["append",["helper",["quick-play-summoner-spell-renderer"],null,[["spell"],[["get",["spell2"]]]]],false],["text","\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n"],["block",["if"],[["get",["selectedPerkPage"]]],null,0],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","quick-play-loadout-rune-page-name-and-icons"],["flush-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","quick-play-loadout-rune-page-name"],["flush-element"],["text","\\n        "],["append",["unknown",["selectedPerkPage","name"]],false],["text","\\n      "],["close-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","quick-play-loadout-rune-page-icons"],["flush-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","quick-play-loadout-rune-page-perk-frame keystone"],["flush-element"],["text","\\n          "],["open-element","img",[]],["static-attr","class","quick-play-loadout-rune-page-keystone-icon"],["dynamic-attr","src",["unknown",["selectedPerkPage","pageKeystone","iconPath"]],null],["flush-element"],["close-element"],["text","\\n        "],["close-element"],["text","\\n        "],["open-element","div",[]],["dynamic-attr","class",["concat",["quick-play-loadout-rune-page-perk-frame secondary style-",["unknown",["selectedPerkPage","subStyleId"]]]]],["flush-element"],["text","\\n          "],["open-element","div",[]],["static-attr","class","quick-play-loadout-rune-page-secondary-style-icon"],["dynamic-attr","style",["unknown",["secondaryStyleIconStyle"]],null],["flush-element"],["close-element"],["text","\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.default = void 0;
            var s, i = n(1),
                o = (s = n(309)) && s.__esModule ? s : {
                    default: s
                };
            n(428);
            const a = i.Audio.getChannel("sfx-ui");
            var l = o.default.extend({
                layout: n(429),
                classNames: ["multiteam-lobby-root-component"],
                selected: null,
                showingState: null,
                lobbiesService: i.Ember.inject.service("lobbies"),
                inParty: i.Ember.computed.and("lobbiesService.inLobby", "isShowingParty"),
                isSwapSoundPlaying: !1,
                subteamIndexes: i.Ember.computed("lobbiesService.multiteamLobbySubteamCount", (function() {
                    const e = this.get("lobbiesService.multiteamLobbySubteamCount");
                    if (!e || e <= 0) return [];
                    const t = new Array(e);
                    for (let n = 1; n <= e; n++) t[n - 1] = n;
                    return t
                })),
                setSwapButtonOnCooldown: function() {
                    this.set("isSwapButtonOnCooldown", !0), this.runTask((() => {
                        this.set("isSwapButtonOnCooldown", !1)
                    }), 4e3)
                },
                isSameAsCurrentBannerTooltip: function(e, t) {
                    return this._currentBannerTooltip && this._currentBannerTooltip.subteamIndex === e && this._currentBannerTooltip.intraSubteamPosition === t
                },
                hideCurrentBannerTooltipIfExists: function() {
                    this._currentBannerTooltip && (this._currentBannerTooltip.hideCallback && this._currentBannerTooltip.hideCallback(), this._currentBannerTooltip = null)
                },
                showNewBannerTooltip(e, t, n, s) {
                    n && n(), this._currentBannerTooltip = {
                        subteamIndex: e,
                        intraSubteamPosition: t,
                        hideCallback: s
                    }
                },
                actions: {
                    bannerTooltipTriggered: function(e, t, n, s) {
                        this.isSameAsCurrentBannerTooltip(e, t) || (this.hideCurrentBannerTooltipIfExists(), this.showNewBannerTooltip(e, t, n, s))
                    },
                    bannerTooltipExited: function(e, t) {
                        this.isSameAsCurrentBannerTooltip(e, t) && this.hideCurrentBannerTooltipIfExists()
                    },
                    showInviteModal: function() {
                        this.sendAction("showInviteModal")
                    },
                    onSwapButtonClicked: function(e, t) {
                        this.get("isSwapButtonOnCooldown") || (this.get("lobbiesService").setSubteamData(e, t), a.playSound("/fe/lol-static-assets/sounds/sfx-uikit-button-generic-click.ogg"), this.setSwapButtonOnCooldown())
                    },
                    onAnySwapOccurred: function(e) {
                        e && !this.get("isLocalPlayerSwapSoundPlaying") && (this.set("isLocalPlayerSwapSoundPlaying", !0), a.on("end", (() => {
                            this.set("isLocalPlayerSwapSoundPlaying", !1)
                        })), a.playSound("/fe/lol-static-assets/sounds/sfx-lobby-arena-player-swap.ogg")), this.get("isSwapSoundPlaying") || (this.set("isSwapSoundPlaying", !0), a.on("end", (() => {
                            this.set("isSwapSoundPlaying", !1)
                        })), a.playSound("/fe/lol-static-assets/sounds/sfx-parties-member-banner-invited.ogg"))
                    }
                }
            });
            t.default = l
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "juY+vnhE",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\multiteam-lobby\\\\multiteam-lobby-root-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\multiteam-lobby\\\\multiteam-lobby-root-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\multiteam-lobby\\\\multiteam-lobby-root-component\\\\index.js\\" "],["text","\\n"],["block",["if"],[["get",["inParty"]]],null,2]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","            "],["append",["helper",["multiteam-lobby-subteam"],null,[["subteamIndex","selected","bannerTooltipTriggered","bannerTooltipExited","showInviteModal","isSwapButtonOnCooldown","onSwapButtonClicked","onAnySwapOccurred"],[["get",["subteamIndex"]],["get",["selected"]],"bannerTooltipTriggered","bannerTooltipExited","showInviteModal",["get",["isSwapButtonOnCooldown"]],"onSwapButtonClicked","onAnySwapOccurred"]]],false],["text","\\n"]],"locals":["subteamIndex"]},{"statements":[["text","      "],["open-element","lol-uikit-scrollable",[]],["static-attr","class","multiteam-lobby-root__scrollable"],["flush-element"],["text","\\n        "],["open-element","div",[]],["dynamic-attr","class",["concat",["multiteam-lobby-root__subteam-table ",["helper",["if"],[["get",["isSwapButtonOnCooldown"]],"multiteam-lobby-root__subteam-table-swap-button-cooldown"],null]]]],["flush-element"],["text","\\n"],["block",["each"],[["get",["subteamIndexes"]]],null,0],["text","        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","multiteam-lobby-root__scrollable-wrapper"],["flush-element"],["text","\\n"],["block",["lower-section"],null,[["currentPlayer"],[["get",["currentPlayer"]]]],1],["text","  "],["close-element"],["text","\\n\\n  "],["open-element","div",[]],["static-attr","class","footer-container"],["flush-element"],["text","\\n    "],["append",["helper",["v2-footer"],null,[["showingState","inParty","selected"],[["get",["showingState"]],["get",["inParty"]],["get",["selected"]]]]],false],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.default = void 0;
            var s = n(1);
            n(431);
            var i = s.Ember.Component.extend({
                layout: n(432),
                classNames: ["multiteam-lobby-subteam-component"],
                classNameBindings: ["hasAnyPlayer::no-players", "isSearching:is-in-queue"],
                selected: null,
                subteamIndex: null,
                isSwapButtonOnCooldown: !1,
                lobbiesService: s.Ember.inject.service("lobbies"),
                matchmakingService: s.Ember.inject.service("matchmaking"),
                isSearching: s.Ember.computed.alias("matchmakingService.isSearching"),
                intraSubteamPositions: s.Ember.computed("lobbiesService.multiteamLobbySubteamPlayerSlotCount", (function() {
                    const e = this.get("lobbiesService.multiteamLobbySubteamPlayerSlotCount");
                    if (e <= 0) return [];
                    const t = new Array(e);
                    for (let n = 1; n <= e; n++) t[n - 1] = n;
                    return t
                })),
                hasAnyPlayer: s.Ember.computed("subteamIndex", "lobbiesService.subteamDataToSummonerIdMap", "intraSubteamPositions", (function() {
                    const e = this.get("intraSubteamPositions") || [];
                    for (let t = 0; t < e.length; ++t) {
                        const n = [this.get("subteamIndex"), e[t]];
                        if ((this.get("lobbiesService.subteamDataToSummonerIdMap") || {})[n]) return !0
                    }
                    return !1
                })),
                init() {
                    this._super(...arguments)
                },
                actions: {
                    bannerTooltipTriggered: function(e, t, n, s) {
                        this.sendAction("bannerTooltipTriggered", e, t, n, s)
                    },
                    bannerTooltipExited: function(e, t) {
                        this.sendAction("bannerTooltipExited", e, t)
                    },
                    showInviteModal: function() {
                        this.sendAction("showInviteModal")
                    },
                    onSwapButtonClicked: function(e, t) {
                        this.sendAction("onSwapButtonClicked", e, t)
                    },
                    onAnySwapOccurred: function(e) {
                        this.sendAction("onAnySwapOccurred", e)
                    }
                }
            });
            t.default = i
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "JXRd9TUI",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\multiteam-lobby\\\\multiteam-lobby-subteam-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\multiteam-lobby\\\\multiteam-lobby-subteam-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\multiteam-lobby\\\\multiteam-lobby-subteam-component\\\\index.js\\" "],["text","\\n"],["block",["each"],[["get",["intraSubteamPositions"]]],null,0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["append",["helper",["multiteam-lobby-subteam-player-slot"],null,[["subteamIndex","intraSubteamPosition","selected","bannerTooltipTriggered","bannerTooltipExited","showInviteModal","isSwapButtonOnCooldown","onSwapButtonClicked","onAnySwapOccurred"],[["get",["subteamIndex"]],["get",["intraSubteamPosition"]],["get",["selected"]],"bannerTooltipTriggered","bannerTooltipExited","showInviteModal",["get",["isSwapButtonOnCooldown"]],"onSwapButtonClicked","onAnySwapOccurred"]]],false],["text","\\n"]],"locals":["intraSubteamPosition"]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.default = void 0;
            var s = n(1);
            n(434);
            const i = ".player-slot__container",
                o = "lol-uikit-tooltip",
                a = ":hover",
                l = [
                    [20, 103],
                    [1200, 600]
                ],
                r = s.Audio.getChannel("sfx-ui"),
                {
                    RunMixin: c
                } = s.EmberAddons.EmberLifeline,
                m = (0, s.emberDataBinding)({
                    Ember: s.Ember,
                    websocket: (0, s.getProvider)().getSocket(),
                    basePaths: {
                        ranked: "/lol-ranked"
                    },
                    boundProperties: {
                        rankedData: {
                            api: "ranked",
                            path: "/v1/ranked-stats/{{puuid}}"
                        }
                    }
                });
            var u = s.Ember.Component.extend(c, m, {
                layout: n(435),
                classNames: ["multiteam-lobby-subteam-player-slot-component"],
                classNameBindings: ["isReadyOrSearching::multiteam-lobby-subteam-player-slot-component__not-ready", "shouldShowInviteButton:showing-invite-button", "isSearching::showing-swap-button"],
                selected: null,
                subteamIndex: null,
                intraSubteamPosition: null,
                isSwapButtonOnCooldown: !1,
                lobbiesService: s.Ember.inject.service("lobbies"),
                matchmakingService: s.Ember.inject.service("matchmaking"),
                localPlayer: s.Ember.computed.alias("lobbiesService.currentPlayer"),
                hasPlayer: s.Ember.computed.notEmpty("playerSlotSummonerId"),
                isLeader: s.Ember.computed.alias("playerSlotData.isLeader"),
                isReady: s.Ember.computed.alias("playerSlotData.ready"),
                isSearching: s.Ember.computed.alias("matchmakingService.isSearching"),
                isReadyOrSearching: s.Ember.computed.or("isReady", "isSearching"),
                queueType: s.Ember.computed.alias("selected.queue.type"),
                puuid: s.Ember.computed.alias("playerSlotData.puuid"),
                isLocalPlayer: s.Ember.computed("localPlayer", "playerSlotSummonerId", (function() {
                    const e = this.get("localPlayer"),
                        t = this.get("playerSlotSummonerId");
                    return e && e.summonerId && t && t === e.summonerId
                })),
                playerSlotData: s.Ember.computed("playerSlotSummonerId", "lobbiesService.currentPartyMembers", (function() {
                    const e = this.get("lobbiesService.currentPartyMembers"),
                        t = this.get("playerSlotSummonerId");
                    if (!e || !t) return null;
                    return e.find((e => e.summonerId === t))
                })),
                playerSlotSummonerId: s.Ember.computed("lobbiesService.subteamDataToSummonerIdMap", "subteamIndex", "intraSubteamPosition", (function() {
                    const e = this.get("subteamIndex"),
                        t = this.get("intraSubteamPosition"),
                        n = [e, t],
                        s = this.get("lobbiesService.subteamDataToSummonerIdMap");
                    return e && t && s && s[n] ? s[n] : null
                })),
                playerSlotSummonerIdObserver: s.Ember.observer("playerSlotSummonerId", (function() {
                    const e = this.get("playerSlotSummonerId");
                    this._lastSummonerId && !e && (this.exitedBannerTooltip(this.get("subteamIndex"), this.get("intraSubteamPosition")), this.removeCurrentRegaliaObserver()), e && this._lastSummonerId !== e && (this.animateSwap(), this.sendAction("onAnySwapOccurred", this.get("isLocalPlayer")), this.setUpRegaliaForSummonerId(e)), this.cacheSummonerId()
                })),
                shouldShowInviteButton: s.Ember.computed("hasPlayer", "isSearching", (function() {
                    return !this.get("hasPlayer") && !this.get("isSearching")
                })),
                isSwapButtonClickable: s.Ember.computed("hasPlayer", "isLocalPlayer", "isSearching", "isReady", "isSwapButtonOnCooldown", (function() {
                    return !this.get("isSearching") && !this.get("isLocalPlayer") && !this.get("isSwapButtonOnCooldown") && (this.get("isReady") || !this.get("hasPlayer"))
                })),
                init() {
                    this._super(...arguments), this.regaliaBinding = (0, s.dataBinding)("/lol-regalia", (0, s.getProvider)().getSocket())
                },
                willDestroyElement() {
                    this._super(...arguments), this.removeCurrentRegaliaObserver()
                },
                didInsertElement() {
                    this._super(...arguments), this.initBannerTooltip();
                    const e = this.get("playerSlotSummonerId");
                    e && this.setUpRegaliaForSummonerId(e), this.get("isLocalPlayer") || this.cacheSummonerId()
                },
                setUpRegaliaForSummonerId: function(e) {
                    e && (this._lastSummonerId && this._lastSummonerId !== e && this.removeCurrentRegaliaObserver(), this.getRegalia(e, !1), this.regaliaSummonerPath || (this.regaliaSummonerPath = `/v2/summoners/${e}/regalia/async`, this.regaliaBinding.observe(this.regaliaSummonerPath, this, this.handleRegaliaAsync)))
                },
                handleRegaliaAsync: function(e) {
                    const t = this.get("playerSlotSummonerId");
                    t && e && e.md5 !== this._regaliaMd5 && (this.getRegalia(t, !0), this._regaliaMd5 = e.md5)
                },
                getRegalia: function(e, t) {
                    const n = `/v2/summoners/${e}/regalia`;
                    return this.regaliaBinding.get(n, {
                        skipCache: t
                    }).then((e => {
                        e && e.profileIconId && this.set("profileIconId", e.profileIconId)
                    }))
                },
                removeCurrentRegaliaObserver: function() {
                    this.regaliaSummonerPath && (this.regaliaBinding.unobserve(this.regaliaSummonerPath, this), this.regaliaSummonerPath = null)
                },
                cacheSummonerId: function() {
                    this._lastSummonerId = this.get("playerSlotSummonerId")
                },
                animateSwap: function() {
                    this.set("isSwapSummonerDetailsAnimating", !0), this.runTask((() => {
                        this.set("isSwapSummonerDetailsAnimating", !1)
                    }), 400), this.get("isLocalPlayer") ? (this.set("isSwapLocalPlayerGlowAnimating", !0), this.runTask((() => {
                        this.set("isSwapLocalPlayerGlowAnimating", !1)
                    }), 2300)) : (this.set("isSwapGlowAnimating", !0), this.runTask((() => {
                        this.set("isSwapGlowAnimating", !1)
                    }), 1300))
                },
                initBannerTooltip: function() {
                    const e = this.element.querySelector(i),
                        t = this.element.querySelector(".player-slot__banner-container");
                    if (!e || !t) return;
                    const n = document.createElement(o);
                    n.appendChild(t);
                    let a = "left",
                        r = -330;
                    this.get("subteamIndex") % 2 == 0 && (a = "right", r = 225), s.UIKit.getTooltipManager().assign(e, n, null, {
                        type: "banner",
                        targetAnchor: {
                            x: a,
                            y: "center"
                        },
                        tooltipAnchor: {
                            x: a,
                            y: "center"
                        },
                        offset: {
                            x: r,
                            y: 0
                        },
                        restrictArea: l
                    }), s.UIKit.getTooltipManager().hide(e), this.set("playerSlotElement", e)
                },
                triggerBannerTooltip: function() {
                    if (this.get("hasPlayer")) {
                        const e = () => {
                                this.showBannerTooltip()
                            },
                            t = () => {
                                this.hideBannerTooltip()
                            };
                        this.sendAction("bannerTooltipTriggered", this.get("subteamIndex"), this.get("intraSubteamPosition"), e, t)
                    }
                },
                exitedBannerTooltip: function() {
                    this.sendAction("bannerTooltipExited", this.get("subteamIndex"), this.get("intraSubteamPosition"))
                },
                showBannerTooltip: function() {
                    const e = this.get("playerSlotElement");
                    e && this.get("hasPlayer") && s.UIKit.getTooltipManager().show(e)
                },
                hideBannerTooltip: function() {
                    const e = this.get("playerSlotElement");
                    e && s.UIKit.getTooltipManager().hide(e)
                },
                isHoveringPlayerSlot: function() {
                    return !!this.element.querySelector(i + a)
                },
                isHoveringBannerTooltip: function() {
                    return !!document.querySelector(o + a)
                },
                actions: {
                    onSwapButtonClicked: function() {
                        this.get("isSwapButtonClickable") && this.sendAction("onSwapButtonClicked", this.get("subteamIndex"), this.get("intraSubteamPosition"))
                    },
                    onHoverButton: function() {
                        r.playSound("/fe/lol-static-assets/sounds/sfx-uikit-button-circlegold-hover.ogg")
                    },
                    showInviteModal: function() {
                        r.playSound("/fe/lol-parties/sfx-lobby-button-banner-click.ogg"), this.sendAction("showInviteModal")
                    },
                    onMouseEnterBannerTooltipTrigger: function() {
                        this.triggerBannerTooltip()
                    },
                    onMouseLeaveBannerTooltipTrigger: function() {
                        this.isHoveringPlayerSlot() || this.isHoveringBannerTooltip() || this.exitedBannerTooltip()
                    }
                }
            });
            t.default = u
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "uB0Hake8",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\multiteam-lobby\\\\multiteam-lobby-subteam-player-slot-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\multiteam-lobby\\\\multiteam-lobby-subteam-player-slot-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\multiteam-lobby\\\\multiteam-lobby-subteam-player-slot-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["dynamic-attr","class",["concat",["player-slot__container ",["helper",["if"],[["get",["hasPlayer"]],"player-slot__container-has-player"],null]," ",["helper",["if"],[["get",["isSearching"]],"player-slot__container-is-searching"],null]]]],["dynamic-attr","onmouseenter",["helper",["action"],[["get",[null]],"onMouseEnterBannerTooltipTrigger"],null],null],["dynamic-attr","onmouseleave",["helper",["action"],[["get",[null]],"onMouseLeaveBannerTooltipTrigger"],null],null],["flush-element"],["text","\\n"],["block",["if"],[["get",["isLocalPlayer"]]],null,6],["text","  "],["open-element","div",[]],["dynamic-attr","class",["concat",["player-slot__swap-local-player-glow ",["helper",["if"],[["get",["isSwapLocalPlayerGlowAnimating"]],"player-slot__swap-local-player-glow-animation"],null]]]],["flush-element"],["close-element"],["text","\\n  "],["open-element","div",[]],["dynamic-attr","class",["concat",["player-slot__swap-glow ",["helper",["if"],[["get",["isSwapGlowAnimating"]],"player-slot__swap-glow-animation"],null]]]],["flush-element"],["close-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","player-slot__hover-glow"],["flush-element"],["close-element"],["text","\\n"],["block",["if"],[["get",["hasPlayer"]]],null,5],["text","  "],["open-element","div",[]],["static-attr","class","player-slot__banner-container"],["dynamic-attr","onmouseenter",["helper",["action"],[["get",[null]],"onMouseEnterBannerTooltipTrigger"],null],null],["dynamic-attr","onmouseleave",["helper",["action"],[["get",[null]],"onMouseLeaveBannerTooltipTrigger"],null],null],["flush-element"],["text","\\n    "],["append",["helper",["v2-banner"],null,[["member","puuid","summonerId","animationsEnabled","selected","isPlayerPartyControlsDisabled"],[["get",["playerSlotData"]],["get",["playerSlotData","puuid"]],["get",["playerSlotData","summonerId"]],"false",["get",["selected"]],"true"]]],false],["text","\\n  "],["close-element"],["text","\\n  "],["open-element","button",[]],["static-attr","class","player-slot__invite-button"],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"showInviteModal"],null],null],["dynamic-attr","onmouseenter",["helper",["action"],[["get",[null]],"onHoverButton"],null],null],["flush-element"],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipPosition","type"],["top","system"]],2],["text","    "],["open-element","div",[]],["static-attr","class","player-slot__invite-icon"],["flush-element"],["close-element"],["text","\\n  "],["close-element"],["text","\\n  "],["open-element","div",[]],["dynamic-attr","class",["concat",["player-slot__side-buttons-container ",["helper",["if"],[["get",["isLocalPlayer"]],"player-slot__side-buttons-container-is-local-player"],null]," ",["helper",["if"],[["get",["hasPlayer"]],"player-slot__side-buttons-container-has-player"],null]]]],["flush-element"],["text","\\n"],["block",["if"],[["get",["hasPlayer"]]],null,1],["text","    "],["open-element","button",[]],["dynamic-attr","class",["concat",["player-slot__swap-button ",["helper",["unless"],[["get",["isSwapButtonClickable"]],"player-slot__swap-button-disabled"],null]]]],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"onSwapButtonClicked"],null],null],["dynamic-attr","onmouseenter",["helper",["action"],[["get",[null]],"onHoverButton"],null],null],["flush-element"],["text","\\n"],["block",["uikit-tooltip"],null,[["tooltipPosition","type"],["top","system"]],0],["text","      "],["open-element","div",[]],["static-attr","class","player-slot__swap-icon"],["flush-element"],["close-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","player-slot__swap-button-cooldown"],["flush-element"],["text","\\n          "],["open-element","div",[]],["static-attr","class","player-slot__swap-button-cooldown-left-half-mask"],["flush-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","player-slot__swap-button-cooldown-left-half"],["flush-element"],["close-element"],["text","\\n          "],["close-element"],["text","\\n          "],["open-element","div",[]],["static-attr","class","player-slot__swap-button-cooldown-right-half"],["flush-element"],["close-element"],["text","\\n        "],["close-element"],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","        "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n          "],["open-element","p",[]],["flush-element"],["append",["unknown",["tra","parties_swap_button"]],false],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","player-slot__player-party-controls-wrapper"],["flush-element"],["text","\\n        "],["append",["helper",["v2-player-party-controls"],null,[["member","isLeader","isMe","isMultiteamLobby"],[["get",["playerSlotData"]],["get",["isLeader"]],["get",["isLocalPlayer"]],"true"]]],false],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-system"],["flush-element"],["text","\\n        "],["open-element","p",[]],["flush-element"],["append",["unknown",["tra","parties_invite_button"]],false],["close-element"],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","lol-not-ready-loader"],["flush-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","lol-not-ready-loader-segment"],["flush-element"],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","lol-not-ready-loader-segment"],["flush-element"],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","lol-not-ready-loader-segment"],["flush-element"],["close-element"],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","              "],["open-element","img",[]],["static-attr","src","/fe/lol-parties/icon-crown.png"],["static-attr","class","player-slot__leader-icon"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","player-slot__summoner-container"],["flush-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","player-slot__crest-wrapper"],["flush-element"],["text","\\n        "],["open-element","lol-regalia-crest-v2-element",[]],["dynamic-attr","voice-puuid",["unknown",["playerSlotData","puuid"]],null],["dynamic-attr","profile-icon",["unknown",["profileIconId"]],null],["static-attr","crest-sizing","small"],["static-attr","crest-type","none"],["flush-element"],["close-element"],["text","\\n      "],["close-element"],["text","\\n      "],["open-element","div",[]],["dynamic-attr","class",["concat",["player-slot__summoner-details-container ",["helper",["if"],[["get",["isSwapSummonerDetailsAnimating"]],"player-slot__swap-summoner-details-animation"],null]]]],["flush-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","player-slot__summoner-header-row"],["flush-element"],["text","\\n"],["block",["if"],[["get",["isLeader"]]],null,4],["text","            "],["open-element","div",[]],["dynamic-attr","class",["concat",["player-slot__summoner-name ",["helper",["if"],[["get",["isLocalPlayer"]],"player-slot__summoner-name-local-player"],null]]]],["flush-element"],["text","\\n              "],["append",["helper",["player-name"],null,[["format","puuid","summonerName"],["short",["get",["playerSlotData","puuid"]],["get",["playerSlotData","summonerName"]]]]],false],["text","\\n            "],["close-element"],["text","\\n        "],["close-element"],["text","\\n        "],["append",["helper",["cherry-rating"],null,[["rankedData","queueType","tooltipEnabled"],[["get",["rankedData"]],["get",["queueType"]],false]]],false],["text","\\n      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n"],["block",["unless"],[["get",["isReadyOrSearching"]]],null,3]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","player-slot__local-player-highlight"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            const i = "Map23_Playbook_TutorialSeen",
                o = "Playbook_CTASeen_TFT9",
                a = "/lol-cosmetics/v1/inventories/tft/playbooks",
                l = "/lol-cosmetics/v1/selection/playbook",
                r = "/lol-game-data/assets/v1/generic-assets.json",
                c = "/lol-settings/v1/account/lol-tutorial";
            e.exports = s.Ember.Service.extend({
                displayPlaybookMenu: !1,
                displayItemDetails: !1,
                shouldDisplayPlaybookTutorial: !1,
                playbookEnabled: !1,
                playbookAssets: null,
                playbookData: {},
                defaultPlaybookIcon: "",
                playbookSelectedItem: {},
                playbookViewItem: {},
                autoShowTutorial: !1,
                shouldShowCta: !1,
                init: function() {
                    this._super(...arguments), this._binding = s.db, this._initObservers()
                },
                willDestroy: function() {
                    this.get("playbookEnabled") && this._binding.removeObserver(a, this), this._binding.removeObserver(r, this), this._super(...arguments)
                },
                _initObservers() {
                    this.set("playbookEnabled", Boolean(!1)), this._binding.addObserver(r, this, (e => {
                        e && this.set("playbookAssets", e["lcu-assets-tft-playbook"])
                    }))
                },
                showPlaybookMenu: function() {
                    this.set("displayPlaybookMenu", !0)
                },
                hidePlaybookMenu: function() {
                    this.set("displayPlaybookMenu", !1), this.hideItemDetailsMenu()
                },
                showTutorialModal: function() {
                    this.set("shouldDisplayPlaybookTutorial", !0)
                },
                hideTutorialModal: function() {
                    this.set("shouldDisplayPlaybookTutorial", !1), this.setTutorialSeen()
                },
                showItemDetailsMenu: function() {
                    this.set("displayItemDetails", !0)
                },
                hideItemDetailsMenu: function() {
                    this.set("displayItemDetails", !1)
                },
                updateSelectedItem: function(e) {
                    this._binding.put(l, e.itemId).then((() => {
                        this.set("playbookSelectedItem", e), this.hidePlaybookMenu(), this.hideItemDetailsMenu()
                    })).catch((() => {
                        s.logger.error("Unable to update playbook item", l)
                    }))
                },
                checkForFirstViewing: function() {
                    const e = (e = {}, t) => e.data && e.data[t];
                    this._binding.get(c).then((t => {
                        if (e(t, i) || (this.set("autoShowTutorial", !0), this.set("shouldDisplayPlaybookTutorial", !0)), !e(t, o)) {
                            if (1 !== (this.get("playbookSelectedItem") || {}).itemId) return void this._updateSeenKey(o);
                            this.set("shouldShowCta", !0)
                        }
                    }))
                },
                setTutorialSeen: function() {
                    this.get("autoShowTutorial") && this._updateSeenKey(i), this.set("autoShowTutorial", !1)
                },
                _updateSeenKey: function(e) {
                    const t = c;
                    this._binding.get(t).then((n => {
                        if (!n) return;
                        const s = n.data || {};
                        s[e] = !0, this._binding.patch(t, {
                            data: s,
                            schemaVersion: n.schemaVersion
                        })
                    }))
                },
                closeCta: function() {
                    this.set("shouldShowCta", !1)
                },
                markCtaAsSeen: function() {
                    this.get("shouldShowCta") && this._updateSeenKey(o), this.closeCta()
                },
                sortPlaybookItems: function() {
                    this.get("playbookData.items").sort((function(e, t) {
                        return s.lodash.isEmpty(e.earlyAugments) && !s.lodash.isEmpty(t.earlyAugments) ? 1 : !s.lodash.isEmpty(e.earlyAugments) && s.lodash.isEmpty(t.earlyAugments) || e.name < t.name ? -1 : e.name > t.name ? 1 : 0
                    }))
                }
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1),
                i = n(15);
            n(438);
            const o = s.Audio.getChannel("sfx-ui").createSound("/fe/lol-static-assets/sounds/sfx-uikit-button-generic-hover.ogg"),
                a = s.Audio.getChannel("sfx-ui").createSound("/fe/lol-static-assets/sounds/sfx-uikit-button-generic-click.ogg");
            e.exports = s.Ember.Component.extend({
                layout: n(439),
                classNames: ["tft-playbook-icon"],
                playbook: s.Ember.inject.service("tft-playbook"),
                queueId: 0,
                showQueueDisabledTooltip: !1,
                isEnabled: s.Ember.computed("playbook.playbookEnabled", "queueId", (function() {
                    return this.get("playbook.playbookEnabled") && !i.TFT_HYPER_ROLL_QUEUE_IDS.includes(this.get("queueId"))
                })),
                isEquippedPlaybookDisabledForQueue: s.Ember.computed("queueId", "playbook.playbookSelectedItem", (function() {
                    const e = this.get("queueId");
                    return !(!i.PAIRS_QUEUE_IDS.includes(e) || !this.get("playbook.playbookSelectedItem.isDisabledInDoubleUp")) && (this.set("showQueueDisabledTooltip", !0), !0)
                })),
                playbookSelectedItem: s.Ember.computed.alias("playbook.playbookSelectedItem"),
                displayPlaybookMenu: s.Ember.computed.alias("playbook.displayPlaybookMenu"),
                shouldShowCTA: s.Ember.computed.alias("playbook.shouldShowCta"),
                selectedIcon: s.Ember.computed("playbookSelectedItem", "isEquippedPlaybookDisabledForQueue", "playbook.defaultPlaybookIcon", (function() {
                    const e = this.get("playbookSelectedItem");
                    return !e || this.get("isEquippedPlaybookDisabledForQueue") ? this.get("playbook.defaultPlaybookIcon") : e.iconPathSmall
                })),
                actions: {
                    showPlaybook: function() {
                        this.get("playbook").showPlaybookMenu(), a.play()
                    },
                    hover: function() {
                        o.play()
                    },
                    hideCta: function() {
                        this.get("playbook").closeCta()
                    },
                    closeButtonClick: function() {
                        this.get("playbook").hidePlaybookMenu()
                    },
                    closeQueueDisabledTooltip: function() {
                        this.set("showQueueDisabledTooltip", !1)
                    }
                }
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "2fW5xr0M",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-playbook-icon-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-playbook-icon-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-playbook-icon-component\\\\index.js\\" "],["text","\\n"],["block",["if"],[["get",["isEnabled"]]],null,5],["text","\\n"],["block",["if"],[["get",["displayPlaybookMenu"]]],null,1]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["append",["helper",["tft-playbook-menu"],null,[["queueId"],[["get",["queueId"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["block",["uikit-modal"],null,[["type","dismissible","dismissibleType","onClose"],["DialogAlert","true","inside",["helper",["action"],[["get",[null]],"closeButtonClick"],null]]],0]],"locals":[]},{"statements":[["text","      "],["open-element","lol-uikit-flyout-frame",[]],["static-attr","dismissable","true"],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"closeQueueDisabledTooltip"],null],null],["static-attr","class","playbook-tooltip-container"],["flush-element"],["text","\\n        "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-small"],["flush-element"],["text","\\n          "],["open-element","p",[]],["flush-element"],["append",["unknown",["tra","tft_playbook_queue_disabled_body"]],false],["close-element"],["text","\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n    "]],"locals":[]},{"statements":[["block",["if"],[["get",["showQueueDisabledTooltip"]]],null,2]],"locals":[]},{"statements":[["text","      "],["open-element","lol-uikit-flyout-frame",[]],["static-attr","class","playbook-tooltip-container"],["static-attr","orientation","bottom"],["flush-element"],["text","\\n        "],["open-element","lol-uikit-content-block",[]],["static-attr","type","tooltip-small"],["flush-element"],["text","\\n          "],["open-element","h4",[]],["flush-element"],["append",["unknown",["tra","tft_playbook_cta_title"]],false],["close-element"],["text","\\n          "],["open-element","hr",[]],["flush-element"],["close-element"],["text","\\n          "],["open-element","p",[]],["flush-element"],["append",["unknown",["tra","tft_playbook_cta_body"]],false],["close-element"],["text","\\n          "],["open-element","lol-uikit-flat-button",[]],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"hideCta"],null],null],["static-attr","class","button glow"],["flush-element"],["append",["unknown",["tra","tft_playbook_cta_button"]],false],["close-element"],["text","\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["open-element","div",[]],["static-attr","class","button-container"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","button-inner-container"],["flush-element"],["text","\\n  "],["open-element","button",[]],["static-attr","class","playbook-button"],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"showPlaybook"],null],null],["dynamic-attr","onmouseover",["helper",["action"],[["get",[null]],"hover"],null],null],["flush-element"],["text","\\n    "],["open-element","img",[]],["dynamic-attr","src",["concat",[["unknown",["selectedIcon"]]]]],["static-attr","class","icon"],["flush-element"],["close-element"],["text","\\n  "],["close-element"],["text","\\n"],["block",["if"],[["get",["shouldShowCTA"]]],null,4,3],["text","    "],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            n(441);
            var i = n(15);
            e.exports = s.Ember.Component.extend({
                layout: n(442),
                classNames: ["tft-playbook-menu"],
                playbook: s.Ember.inject.service("tft-playbook"),
                isEnabled: s.Ember.computed.alias("playbook.playbookEnabled"),
                playbookData: s.Ember.computed.alias("playbook.playbookData"),
                selectedItem: s.Ember.computed.alias("playbook.playbookSelectedItem"),
                selectedItemId: s.Ember.computed.alias("selectedItem.itemId"),
                viewItem: s.Ember.computed.alias("playbook.playbookViewItem"),
                viewItemId: s.Ember.computed.alias("viewItem.itemId"),
                itemData: s.Ember.computed.alias("playbookData.items"),
                shouldDisplayPlaybookTutorial: s.Ember.computed.alias("playbook.shouldDisplayPlaybookTutorial"),
                displayPlaybookItemDetails: s.Ember.computed.alias("playbook.displayItemDetails"),
                queueId: 0,
                detailsDisabled: s.Ember.computed("viewItem", (function() {
                    const e = this.get("viewItem");
                    return !!(s.lodash.isEmpty(e.earlyAugments) && s.lodash.isEmpty(e.midAugments) && s.lodash.isEmpty(e.lateAugments))
                })),
                equipDisabled: s.Ember.computed("viewItem", "queueId", (function() {
                    const e = this.get("viewItem"),
                        t = this.get("queueId");
                    return i.PAIRS_QUEUE_IDS.includes(t) && e.isDisabledInDoubleUp
                })),
                name: s.Ember.computed("viewItem.name", (function() {
                    return this.get("viewItem.name").replace(/: .*/, "")
                })),
                subName: s.Ember.computed("viewItem.name", (function() {
                    return this.get("viewItem.name").replace(/^[^:]+: /, "")
                })),
                sidePanelBackgroundStyle: s.Ember.computed("viewItem.splashPath", (function() {
                    return `background-image: url(${this.get("viewItem.splashPath")});`
                })),
                actions: {
                    selectItem: function(e) {
                        this.set("playbook.playbookViewItem", e)
                    },
                    equip: function() {
                        const e = this.get("viewItem"),
                            t = this.get("playbook");
                        t.markCtaAsSeen(), t.updateSelectedItem(e)
                    },
                    showDetails: function() {
                        if (this.get("detailsDisabled")) return;
                        this.get("playbook").showItemDetailsMenu()
                    },
                    showPlaybookTutorial: function() {
                        this.get("playbook").showTutorialModal()
                    },
                    back: function() {
                        this.get("playbook").hideItemDetailsMenu()
                    }
                }
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "jjwybLPw",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-playbook-menu-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-playbook-menu-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-playbook-menu-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","playbook-text-container"],["flush-element"],["text","\\n    "],["open-element","span",[]],["static-attr","class","title"],["flush-element"],["append",["unknown",["tra","tft_playbook_title"]],false],["close-element"],["open-element","br",[]],["flush-element"],["close-element"],["text","\\n    "],["open-element","lol-uikit-info-icon",[]],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"showPlaybookTutorial"],null],null],["flush-element"],["close-element"],["text","\\n"],["close-element"],["text","\\n"],["open-element","div",[]],["static-attr","class","playbook-bottom-container"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","left-container"],["flush-element"],["text","\\n        "],["open-element","lol-uikit-scrollable",[]],["static-attr","class","scroller"],["static-attr","overflow-masks","enabled"],["flush-element"],["text","\\n            "],["open-element","ul",[]],["static-attr","class","selection-display"],["flush-element"],["text","\\n"],["block",["each"],[["get",["itemData"]]],null,3],["text","            "],["close-element"],["text","\\n        "],["close-element"],["text","\\n        "],["append",["helper",["tft-playbook-item-details"],null,[["isShown"],[["get",["displayPlaybookItemDetails"]]]]],false],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","playbook-right-container"],["dynamic-attr","style",["unknown",["sidePanelBackgroundStyle"]],null],["flush-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","description-container"],["flush-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","name-text"],["flush-element"],["append",["unknown",["name"]],false],["close-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","name-divider"],["flush-element"],["close-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","sub-name-text"],["flush-element"],["append",["unknown",["subName"]],false],["close-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","description-text"],["flush-element"],["append",["unknown",["viewItem","description"]],false],["close-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","button-divider"],["flush-element"],["close-element"],["text","\\n        "],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","playbook-button-container"],["flush-element"],["text","\\n"],["block",["if"],[["get",["displayPlaybookItemDetails"]]],null,2,1],["text","        "],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","playbook-button-container"],["flush-element"],["text","\\n            "],["open-element","lol-uikit-flat-button",[]],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"equip"],null],null],["static-attr","class","button glow"],["static-attr","primary","true"],["dynamic-attr","disabled",["unknown",["equipDisabled"]],null],["flush-element"],["append",["unknown",["tra","tft_playbook_button_equip"]],false],["close-element"],["text","\\n        "],["close-element"],["text","\\n    "],["close-element"],["text","\\n"],["close-element"],["text","\\n"],["block",["if"],[["get",["shouldDisplayPlaybookTutorial"]]],null,0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["append",["unknown",["tft-playbook-tutorial"]],false],["text","\\n"]],"locals":[]},{"statements":[["text","                "],["open-element","lol-uikit-flat-button",[]],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"showDetails"],null],null],["static-attr","class","button glow"],["static-attr","primary","false"],["dynamic-attr","disabled",["unknown",["detailsDisabled"]],null],["flush-element"],["append",["unknown",["tra","tft_playbook_button_details"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","                "],["open-element","lol-uikit-flat-button",[]],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"back"],null],null],["static-attr","class","button glow"],["static-attr","primary","false"],["flush-element"],["append",["unknown",["tra","tft_playbook_button_back"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","                    "],["append",["helper",["tft-playbook-item"],null,[["item","onSelectItem","selectedItemId","viewItemId","queueId"],[["get",["currItem"]],["helper",["action"],[["get",[null]],"selectItem"],null],["get",["selectedItemId"]],["get",["viewItemId"]],["get",["queueId"]]]]],false],["text","\\n"]],"locals":["currItem"]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            n(444);
            var i = n(15);
            const o = "playbook-equipped-icon",
                a = s.Audio.getChannel("sfx-ui").createSound("/fe/lol-static-assets/sounds/sfx-uikit-button-generic-hover.ogg"),
                l = s.Audio.getChannel("sfx-ui").createSound("/fe/lol-static-assets/sounds/sfx-uikit-button-generic-click.ogg");
            e.exports = s.Ember.Component.extend({
                layout: n(445),
                classNames: ["tft-playbook-item"],
                playbook: s.Ember.inject.service("tft-playbook"),
                item: {},
                selectedItemId: -1,
                viewItemId: -1,
                queueId: 0,
                isDisabled: s.Ember.computed("queueId", "item.isDisabledInDoubleUp", (function() {
                    const e = this.get("queueId");
                    return i.PAIRS_QUEUE_IDS.includes(e) && this.get("item.isDisabledInDoubleUp")
                })),
                name: s.Ember.computed("item.name", (function() {
                    return this.get("item.name").replace(/: .*/, "")
                })),
                equippedIcon: s.Ember.computed("playbook.playbookAssets", (function() {
                    const e = this.get("playbook.playbookAssets");
                    return e && e[o] ? e[o] : ""
                })),
                isSelected: s.Ember.computed("item", "viewItemId", (function() {
                    const e = this.get("item"),
                        t = this.get("viewItemId");
                    return e.itemId === t
                })),
                isEquipped: s.Ember.computed("item", "selectedItemId", (function() {
                    const e = this.get("item"),
                        t = this.get("selectedItemId");
                    return e.itemId === t
                })),
                actions: {
                    select: function() {
                        const e = this.get("item");
                        this.get("onSelectItem")(e), l.play()
                    },
                    hover: function() {
                        a.play()
                    }
                }
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "RL4oXIyc",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-playbook-item-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-playbook-item-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-playbook-item-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["dynamic-attr","class",["helper",["if"],[["get",["isDisabled"]],"tft-playbook-item-container disabled","tft-playbook-item-container"],null],null],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"select"],null],null],["dynamic-attr","onmouseover",["helper",["action"],[["get",[null]],"hover"],null],null],["dynamic-attr","selected",["unknown",["isSelected"]],null],["flush-element"],["text","\\n    "],["open-element","img",[]],["dynamic-attr","src",["concat",[["unknown",["item","iconPath"]]]]],["static-attr","class","image-container"],["flush-element"],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","image-background"],["flush-element"],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","name-container"],["flush-element"],["append",["unknown",["name"]],false],["close-element"],["text","\\n"],["block",["if"],[["get",["isEquipped"]]],null,0],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","        "],["open-element","img",[]],["dynamic-attr","src",["unknown",["equippedIcon"]],null],["static-attr","class","equipped-icon"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            n(447), e.exports = s.Ember.Component.extend({
                layout: n(448),
                classNames: ["tft-playbook-item-details"],
                classNameBindings: ["isShown"],
                playbook: s.Ember.inject.service("tft-playbook"),
                viewItem: s.Ember.computed.alias("playbook.playbookViewItem"),
                scrollObserver: s.Ember.on("DidInsertElement", s.Ember.observer("playbook.displayItemDetails", (function() {
                    if (this.get("playbook.displayItemDetails")) {
                        this.$("#playbook-selection-scroller").get(0).scrollTop = 0
                    }
                })))
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "nn8+wxTR",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-playbook-item-details-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-playbook-item-details-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-playbook-item-details-component\\\\index.js\\" "],["text","\\n\\n"],["open-element","lol-uikit-scrollable",[]],["static-attr","class","scroller"],["static-attr","overflow-masks","enabled"],["static-attr","id","playbook-selection-scroller"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","divider-text"],["flush-element"],["append",["unknown",["tra","tft_playbook_section1_text"]],false],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","divider-line"],["flush-element"],["close-element"],["text","\\n    "],["open-element","ul",[]],["static-attr","class","card-container"],["flush-element"],["text","\\n"],["block",["each"],[["get",["viewItem","earlyAugments"]]],null,2],["text","    "],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","divider-text"],["flush-element"],["append",["unknown",["tra","tft_playbook_section2_text"]],false],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","divider-line"],["flush-element"],["close-element"],["text","\\n    "],["open-element","ul",[]],["static-attr","class","card-container"],["flush-element"],["text","\\n"],["block",["each"],[["get",["viewItem","midAugments"]]],null,1],["text","    "],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","divider-text"],["flush-element"],["append",["unknown",["tra","tft_playbook_section3_text"]],false],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","divider-line"],["flush-element"],["close-element"],["text","\\n    "],["open-element","ul",[]],["static-attr","class","card-container"],["flush-element"],["text","\\n"],["block",["each"],[["get",["viewItem","lateAugments"]]],null,0],["text","    "],["close-element"],["text","\\n"],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","            "],["append",["helper",["tft-playbook-card"],null,[["name","rawDescription","iconPath","effectAmounts"],[["get",["currAugment","name"]],["get",["currAugment","description"]],["get",["currAugment","iconPath"]],["get",["currAugment","effectAmounts"]]]]],false],["text","\\n"]],"locals":["currAugment"]},{"statements":[["text","            "],["append",["helper",["tft-playbook-card"],null,[["name","rawDescription","iconPath","effectAmounts"],[["get",["currAugment","name"]],["get",["currAugment","description"]],["get",["currAugment","iconPath"]],["get",["currAugment","effectAmounts"]]]]],false],["text","\\n"]],"locals":["currAugment"]},{"statements":[["text","            "],["append",["helper",["tft-playbook-card"],null,[["name","rawDescription","iconPath","effectAmounts"],[["get",["currAugment","name"]],["get",["currAugment","description"]],["get",["currAugment","iconPath"]],["get",["currAugment","effectAmounts"]]]]],false],["text","\\n"]],"locals":["currAugment"]}],"hasPartials":false}',
                meta: {}
            })
        }, (module, __unused_webpack_exports, __webpack_require__) => {
            "use strict";
            var _riotclientAsyncProviderProxy = __webpack_require__(1);
            __webpack_require__(450);
            const GDS_PLAYBOOK_ASSET_AUGMENT_CARD_HOLDER_KEY = "playbook-augment-card-holder";
            module.exports = _riotclientAsyncProviderProxy.Ember.Component.extend({
                layout: __webpack_require__(451),
                classNames: ["tft-playbook-card"],
                playbook: _riotclientAsyncProviderProxy.Ember.inject.service("tft-playbook"),
                name: "",
                rawDescription: "",
                iconPath: "",
                effectAmounts: [],
                cardHolderBackgroundStyle: _riotclientAsyncProviderProxy.Ember.computed("playbook.playbookAssets", (function() {
                    const e = this.get("playbook.playbookAssets");
                    if (!e || !e[GDS_PLAYBOOK_ASSET_AUGMENT_CARD_HOLDER_KEY]) return "";
                    return `background-image: url(${e[GDS_PLAYBOOK_ASSET_AUGMENT_CARD_HOLDER_KEY]});`
                })),
                description: _riotclientAsyncProviderProxy.Ember.computed("rawDescription", "effectAmounts", (function() {
                    const rawDescription = this.get("rawDescription"),
                        effectAmounts = this.get("effectAmounts").sort(((e, t) => t.name.length - e.name.length));
                    return rawDescription.replaceAll(/\@([^@]+)\@/g, (function(match, rawExpr, offset, string) {
                        if (rawExpr.startsWith("TFTUnitProperty")) return "";
                        let expr = rawExpr.toLowerCase();
                        effectAmounts.forEach((e => {
                            expr = expr.replaceAll(e.name.toLowerCase(), e.value.toString())
                        }));
                        let exprResult = null;
                        try {
                            exprResult = eval(expr.replace(/[^0-9\(\)\+\-\*\/\.]/g, ""))
                        } catch {
                            return match
                        }
                        return exprResult ? exprResult.toFixed(2).toString().replace(/\.?0*$/, "") : match
                    })).trim()
                }))
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "1ibTgpf/",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-playbook-card-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-playbook-card-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-playbook-card-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","holder"],["dynamic-attr","style",["unknown",["cardHolderBackgroundStyle"]],null],["flush-element"],["text","\\n    "],["open-element","img",[]],["dynamic-attr","src",["concat",[["unknown",["iconPath"]]]]],["static-attr","class","playbook-augment-icon"],["flush-element"],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","name-container"],["flush-element"],["append",["unknown",["name"]],false],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","description-container"],["flush-element"],["append",["unknown",["description"]],true],["close-element"],["text","\\n"],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            n(453), e.exports = s.Ember.Component.extend({
                layout: n(454),
                classNames: ["tft-playbook-tutorial"],
                playbook: s.Ember.inject.service("tft-playbook"),
                actions: {
                    closeButtonClick: function() {
                        this.get("playbook").hideTutorialModal()
                    }
                }
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "dyIKFesM",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-playbook-tutorial-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-playbook-tutorial-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-playbook-tutorial-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","playbook-tutorial-inner"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","playbook-tutorial-splash-art"],["flush-element"],["close-element"],["text","\\n    "],["open-element","h4",[]],["static-attr","class","playbook-tutorial-subtitle"],["flush-element"],["append",["unknown",["tra","tft_playbook_tutorial_subtitle"]],false],["close-element"],["text","\\n    "],["open-element","h3",[]],["static-attr","class","playbook-tutorial-title"],["flush-element"],["append",["unknown",["tra","tft_playbook_tutorial_title"]],false],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","playbook-tutorial-divider"],["flush-element"],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","playbook-tutorial-body"],["flush-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","playbook-tutorial-right-col"],["flush-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","playbook-tutorial-paragraph playbook-tutorial-paragraph-1"],["flush-element"],["text","\\n                "],["open-element","div",[]],["static-attr","class","playbook-tutorial-paragraph-icon"],["flush-element"],["close-element"],["text","\\n                "],["open-element","h4",[]],["static-attr","class","playbook-tutorial-paragraph-header"],["flush-element"],["append",["unknown",["tra","tft_playbook_tutorial_paragraph_header_1"]],false],["close-element"],["text","\\n                "],["open-element","p",[]],["static-attr","class","playbook-tutorial-paragraph-body"],["flush-element"],["append",["unknown",["tra","tft_playbook_tutorial_paragraph_body_1"]],false],["close-element"],["text","\\n            "],["close-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","playbook-tutorial-paragraph playbook-tutorial-paragraph-2"],["flush-element"],["text","\\n                "],["open-element","div",[]],["static-attr","class","playbook-tutorial-paragraph-icon"],["flush-element"],["close-element"],["text","\\n                "],["open-element","h4",[]],["static-attr","class","playbook-tutorial-paragraph-header"],["flush-element"],["append",["unknown",["tra","tft_playbook_tutorial_paragraph_header_2"]],false],["close-element"],["text","\\n                "],["open-element","p",[]],["static-attr","class","playbook-tutorial-paragraph-body"],["flush-element"],["append",["unknown",["tra","tft_playbook_tutorial_paragraph_body_2"]],false],["close-element"],["text","\\n            "],["close-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","playbook-tutorial-paragraph playbook-tutorial-paragraph-3"],["flush-element"],["text","\\n                "],["open-element","div",[]],["static-attr","class","playbook-tutorial-paragraph-icon"],["flush-element"],["close-element"],["text","\\n                "],["open-element","h4",[]],["static-attr","class","playbook-tutorial-paragraph-header"],["flush-element"],["append",["unknown",["tra","tft_playbook_tutorial_paragraph_header_3"]],false],["close-element"],["text","\\n                "],["open-element","p",[]],["static-attr","class","playbook-tutorial-paragraph-body"],["flush-element"],["append",["unknown",["tra","tft_playbook_tutorial_paragraph_body_3"]],false],["close-element"],["text","\\n            "],["close-element"],["text","\\n        "],["close-element"],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","playbook-tutorial-footer"],["flush-element"],["text","\\n        "],["open-element","lol-uikit-flat-button-group",[]],["static-attr","type","dialog-frame"],["flush-element"],["text","\\n                "],["open-element","lol-uikit-flat-button",[]],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"closeButtonClick"],null],null],["static-attr","class","button glow"],["static-attr","primary","true"],["flush-element"],["append",["unknown",["tra","tft_playbook_tutorial_close"]],false],["close-element"],["text","\\n        "],["close-element"],["text","\\n    "],["close-element"],["text","\\n"],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.default = void 0;
            var s = n(1);
            n(456);
            const i = s.UIKit.getVignetteCelebrationManager();
            var o = s.Ember.Component.extend({
                classNames: ["rcp-fe-lol-parties-reward-celebration"],
                layout: n(457),
                selectedReward: null,
                softSelectionMade: !1,
                didDestroyElement() {
                    null !== this.get("selectedReward") && this.set("selectedReward", null)
                },
                actions: {
                    selectReward(e, t) {
                        t.target.disabled || (null !== this.get("selectedReward") && this.set("selectedReward.isSelected", !1), this.set("selectedReward", e), this.set("selectedReward.isSelected", !0), this.set("softSelectionMade", !0), i.update({
                            id: this.id,
                            data: {
                                nextButtonEnabled: !0
                            }
                        }))
                    }
                }
            });
            t.default = o
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "hYEI3jeU",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-reward-celebration-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-reward-celebration-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\tft\\\\tft-reward-celebration-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","rewards-container"],["flush-element"],["text","\\n"],["block",["each"],[["get",["rewards"]]],null,2],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","reward"],["flush-element"],["text","\\n        "],["open-element","div",[]],["dynamic-attr","class",["concat",["reward-icon ",["unknown",["reward","rewardType"]]]]],["flush-element"],["text","\\n          "],["open-element","img",[]],["dynamic-attr","src",["unknown",["reward","iconUrl"]],null],["flush-element"],["close-element"],["text","\\n        "],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","reward-description-wrapper"],["flush-element"],["text","\\n          "],["open-element","div",[]],["static-attr","class","reward-description"],["flush-element"],["append",["unknown",["reward","description"]],false],["close-element"],["text","\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"selectReward",["get",["reward"]]],null],null],["dynamic-attr","class",["concat",["reward selectable \\n          ",["helper",["if"],[["get",["reward","isSelected"]],"selected"],null]," \\n          ",["helper",["if"],[["get",["softSelectionMade"]],"selection-made"],null]]]],["flush-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","brightener-bg"],["flush-element"],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","dimmer-bg"],["flush-element"],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","radial-glow"],["flush-element"],["close-element"],["text","\\n        "],["open-element","div",[]],["dynamic-attr","class",["concat",["reward-icon ",["unknown",["reward","rewardType"]]]]],["flush-element"],["text","\\n          "],["open-element","img",[]],["dynamic-attr","src",["unknown",["reward","iconUrl"]],null],["flush-element"],["close-element"],["text","\\n        "],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","reward-description-wrapper"],["flush-element"],["text","\\n          "],["open-element","div",[]],["static-attr","class","reward-description"],["flush-element"],["append",["unknown",["reward","description"]],false],["close-element"],["text","\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["selectable"]]],null,1,0]],"locals":["reward"]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1),
                i = n(34);
            const o = s.Ember.Component.extend({
                layout: n(459),
                classNames: ["parties-queue-error-dialog"],
                lobbiesService: s.Ember.inject.service("lobbies"),
                currentPlayer: s.Ember.computed.alias("lobbiesService.currentPlayer"),
                showError: s.Ember.computed.notEmpty("dialogSubComponent"),
                dialogSubComponent: s.Ember.computed("errorType", (function() {
                    switch (this.get("errorType")) {
                        case i.SEARCH_ERROR_TYPES.QUEUE_DODGER:
                            return "party-queue-error-dialog-queue-dodge";
                        case i.SEARCH_ERROR_TYPES.LEAVER_BUSTER_QUEUE_DELAY:
                            return "party-queue-error-dialog-leaver-busted";
                        case i.SEARCH_ERROR_TYPES.LEAVER_BUSTER_QUEUE_LOCKOUT:
                            return "party-queue-error-dialog-leaver-buster-lockout";
                        case i.SEARCH_ERROR_TYPES.LEAVER_BUSTER_TAINTED_WARNING:
                            return this.get("currentPlayer.summonerId") === this.get("errorData.penalizedSummonerId") ? "" : "party-queue-error-dialog-leaver-buster-tainted-warning";
                        case i.SEARCH_ERROR_TYPES.RANKED_MIN_LEVEL:
                            return "party-queue-error-dialog-min-level";
                        case i.SEARCH_ERROR_TYPES.PREREQUISITE_QUEUES_NOT_PLAYED:
                            return "party-queue-error-dialog-prerequisite-queues-not-played";
                        default:
                            return "party-queue-error-dialog-generic"
                    }
                }))
            });
            e.exports = o
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "7IfkGCrd",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\queue-error-dialog-component\\\\layout.hbs\\" style-path=\\"null\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\queue-error-dialog-component\\\\index.js\\" "],["text","\\n"],["block",["if"],[["get",["showError"]]],null,0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","parties-queue-error-content"],["flush-element"],["text","\\n    "],["append",["helper",["component"],[["get",["dialogSubComponent"]]],[["errorData"],[["get",["errorData"]]]]],false],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            e.exports = s.Ember.Component.extend({
                layout: n(461)
            })
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "93yJs7ba",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\queue-error-dialog-component\\\\generic\\\\layout.hbs\\" style-path=\\"null\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\queue-error-dialog-component\\\\generic\\\\index.js\\" "],["text","\\n"],["open-element","lol-uikit-content-block",[]],["static-attr","type","dialog-large"],["flush-element"],["text","\\n  "],["open-element","h4",[]],["flush-element"],["append",["unknown",["tra","parties_queue_error_generic_header"]],false],["close-element"],["text","\\n  "],["open-element","hr",[]],["static-attr","class","heading-spacer"],["flush-element"],["close-element"],["text","\\n  "],["open-element","p",[]],["flush-element"],["append",["helper",["sanitize"],[["get",["tra","parties_queue_error_generic_body$html"]]],null],false],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            e.exports = s.Ember.Component.extend({
                layout: n(463)
            })
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "/B2cLZvf",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\queue-error-dialog-component\\\\min-level\\\\layout.hbs\\" style-path=\\"null\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\queue-error-dialog-component\\\\min-level\\\\index.js\\" "],["text","\\n"],["open-element","lol-uikit-content-block",[]],["static-attr","type","dialog-large"],["flush-element"],["text","\\n  "],["open-element","h4",[]],["flush-element"],["append",["unknown",["tra","parties_queue_error_min_level_header"]],false],["close-element"],["text","\\n  "],["open-element","hr",[]],["static-attr","class","heading-spacer"],["flush-element"],["close-element"],["text","\\n  "],["open-element","p",[]],["flush-element"],["append",["unknown",["tra","parties_queue_error_min_level_body"]],false],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            e.exports = s.Ember.Component.extend({
                layout: n(465)
            })
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "pgan4/iB",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\queue-error-dialog-component\\\\leaver-busted\\\\layout.hbs\\" style-path=\\"null\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\queue-error-dialog-component\\\\leaver-busted\\\\index.js\\" "],["text","\\n"],["open-element","lol-uikit-content-block",[]],["static-attr","type","dialog-large"],["flush-element"],["text","\\n  "],["open-element","h4",[]],["flush-element"],["append",["unknown",["tra","parties_queue_error_leaver_busted_header"]],false],["close-element"],["text","\\n  "],["open-element","hr",[]],["static-attr","class","heading-spacer"],["flush-element"],["close-element"],["text","\\n  "],["open-element","p",[]],["flush-element"],["append",["unknown",["tra","parties_queue_error_leaver_busted_body"]],false],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1),
                i = n(111);
            n(467);
            const o = s.Ember.Object.extend(s.Ember.PromiseProxyMixin),
                a = s.Ember.Object.extend({
                    penalizedSummonerId: 0,
                    penaltyTimeRemaining: 0,
                    formattedTimeRemaining: s.Ember.computed("penaltyTimeRemaining", (function() {
                        return (0, i.formatThreeLargestUnits)(this.get("penaltyTimeRemaining"))
                    }))
                }),
                l = s.Ember.Object.extend({
                    penalizedSummonerId: 0,
                    playerNameFull: ""
                });
            e.exports = s.Ember.Component.extend({
                layout: n(468),
                classNames: ["leaver-buster-lockout-error-dialog"],
                init(...e) {
                    this._super(...e), this._playerNames = s.playerNames, this.set("penalizedSummoners", s.Ember.A()), this.binding = s.dataBinding.bindTo((0, s.getProvider)().getSocket()), this.binding.observe("/lol-matchmaking/v1/search", this, this.handleMatchMakingSearch)
                },
                willDestroyElement() {
                    this.binding.unobserve("/lol-matchmaking/v1/search", this)
                },
                penalizedAliases: s.Ember.computed.alias("penalizedAliasesProxy.content"),
                penalizedAliasesProxy: s.Ember.computed("penalizedSummoners.@each.penalizedSummonerId", (function() {
                    const e = this.get("penalizedSummoners");
                    return e.length && o.create({
                        promise: Promise.all(e.map((async e => {
                            const t = e.get("penalizedSummonerId"),
                                {
                                    playerNameFull: n
                                } = await this._playerNames.getDisplayNameBySummonerId(t);
                            return l.create({
                                penalizedSummonerId: t,
                                playerNameFull: n
                            })
                        })))
                    })
                })),
                handleMatchMakingSearch(e = {}) {
                    const t = this.get("penalizedSummoners"),
                        {
                            errors: n = []
                        } = e;
                    for (const {
                            errorType: e,
                            penalizedSummonerId: s,
                            penaltyTimeRemaining: i
                        }
                        of n) {
                        if ("LEAVER_BUSTER_QUEUE_LOCKOUT" !== e) continue;
                        const n = t.findBy("penalizedSummonerId", s);
                        n ? n.set("penaltyTimeRemaining", i) : t.addObject(a.create({
                            penalizedSummonerId: s,
                            penaltyTimeRemaining: i
                        })), t.sortBy("penaltyTimeRemaining").reverseObjects()
                    }
                },
                punishedPlayers: s.Ember.computed("penalizedAliases", "penalizedSummoners.@each.formattedTimeRemaining", (function() {
                    const e = s.Ember.A(this.get("penalizedAliases"));
                    return this.get("penalizedSummoners").map((t => {
                        const n = e.findBy("penalizedSummonerId", t.get("penalizedSummonerId"));
                        return {
                            displayName: n?.get("playerNameFull"),
                            penaltyTimeRemaining: t.get("formattedTimeRemaining")
                        }
                    })).filter((({
                        displayName: e
                    }) => e))
                }))
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "RL8HfW8o",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\queue-error-dialog-component\\\\leaver-buster-lockout\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\queue-error-dialog-component\\\\leaver-buster-lockout\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\queue-error-dialog-component\\\\leaver-buster-lockout\\\\index.js\\" "],["text","\\n"],["open-element","lol-uikit-content-block",[]],["static-attr","type","dialog-large"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","leaver-buster-lockout-modal"],["flush-element"],["text","\\n    "],["open-element","h3",[]],["flush-element"],["append",["unknown",["tra","parties_queue_error_leaver_buster_lockout_header"]],false],["close-element"],["text","\\n    "],["open-element","hr",[]],["static-attr","class","heading-spacer"],["flush-element"],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","lockout-error-body"],["flush-element"],["text","\\n      "],["open-element","p",[]],["flush-element"],["append",["helper",["sanitize"],[["get",["tra","parties_queue_error_leaver_buster_lockout_general_body"]]],null],false],["close-element"],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","br",[]],["flush-element"],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","lockout-queue-lockout-timer"],["flush-element"],["text","\\n      "],["open-element","p",[]],["flush-element"],["text","\\n      "],["open-element","h5",[]],["static-attr","class","lockout-timer-label subhead"],["flush-element"],["append",["unknown",["tra","parties_queue_error_leaver_buster_lockout_timer"]],false],["close-element"],["text","\\n      "],["close-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","lockout-player-table"],["flush-element"],["text","\\n"],["block",["each"],[["get",["punishedPlayers"]]],null,0],["text","      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n"],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","        "],["open-element","div",[]],["static-attr","class","lockout-player-row"],["flush-element"],["text","\\n          "],["open-element","div",[]],["static-attr","class","lockout-player-name"],["flush-element"],["text","\\n            "],["append",["unknown",["punishedPlayer","displayName"]],false],["text","\\n          "],["close-element"],["text","\\n          "],["open-element","div",[]],["static-attr","class","lockout-player-punishment-timer"],["flush-element"],["text","\\n            "],["append",["unknown",["punishedPlayer","penaltyTimeRemaining"]],false],["text","\\n          "],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":["punishedPlayer"]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            const i = s.Ember.Object.extend(s.Ember.PromiseProxyMixin);
            e.exports = s.Ember.Component.extend({
                layout: n(470),
                penalizedSummonerNameProxy: s.Ember.computed("errorData.penalizedSummonerId", (function() {
                    const e = this.get("searchError.penalizedSummonerId");
                    return e && i.create({
                        promise: s.playerNames.getDisplayNameBySummonerId(e)
                    })
                })),
                penalizedSummonerDisplayName: s.Ember.computed.alias("penalizedSummonerNameProxy.content.playerNameFull"),
                leaverBusterWarningTextHeader: s.Ember.computed((function() {
                    return this.get("tra").formatString("parties_queue_error_leaver_buster_party_has_member_warning_not_accepted_header")
                })),
                leaverBusterWarningTextBody: s.Ember.computed("penalizedSummonerDisplayName", (function() {
                    return this.get("tra").formatString("parties_queue_error_leaver_buster_party_has_member_warning_not_accepted_body", {
                        penalizedSummonerName: this.get("penalizedSummonerDisplayName")
                    })
                }))
            })
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "H1jMMHRL",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\queue-error-dialog-component\\\\leaver-buster-tainted-warning\\\\layout.hbs\\" style-path=\\"null\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\queue-error-dialog-component\\\\leaver-buster-tainted-warning\\\\index.js\\" "],["text","\\n"],["open-element","lol-uikit-content-block",[]],["static-attr","type","dialog-large"],["flush-element"],["text","\\n  "],["open-element","h4",[]],["flush-element"],["append",["unknown",["leaverBusterWarningTextHeader"]],false],["close-element"],["text","\\n  "],["open-element","hr",[]],["static-attr","class","heading-spacer"],["flush-element"],["close-element"],["text","\\n  "],["open-element","p",[]],["flush-element"],["append",["unknown",["leaverBusterWarningTextBody"]],false],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s, i = n(1),
                o = (s = n(111)) && s.__esModule ? s : {
                    default: s
                };
            n(472);
            const a = i.Ember.Object.extend(i.Ember.PromiseProxyMixin),
                l = (0, i.emberDataBinding)({
                    Ember: i.Ember,
                    websocket: (0, i.getProvider)().getSocket(),
                    logPrefix: "party:queue-error-dialog:queue-dodge:component",
                    basePaths: {
                        matchmaking: "/lol-matchmaking",
                        summoner: "/lol-summoner"
                    },
                    boundProperties: {
                        currentSummoner: {
                            api: "summoner",
                            path: "/v1/current-summoner"
                        },
                        search: {
                            api: "matchmaking",
                            path: "/v1/search"
                        }
                    }
                });
            e.exports = i.Ember.Component.extend(l, {
                layout: n(473),
                classNames: ["queue-dodge-error-dialog"],
                init(...e) {
                    this._super(...e), this._playerNames = i.playerNames
                },
                searchError: i.Ember.computed("search.errors", "search.errors.[].penaltyTimeRemaining", (function() {
                    const e = this.get("search.errors");
                    if (!e) return null;
                    const t = e.find((function(e) {
                        return "QUEUE_DODGER" === e.errorType
                    }), this);
                    return t || e[0]
                })),
                timeRemaining: i.Ember.computed.readOnly("searchError.penaltyTimeRemaining"),
                hasTimeRemaining: i.Ember.computed.gt("timeRemaining", 0),
                timeRemainingFormatted: i.Ember.computed("timeRemaining", (function() {
                    return o.default.formatSeconds(this.get("timeRemaining"))
                })),
                penalizedSummonerIsMe: i.Ember.computed("searchError.penalizedSummonerId", "currentSummoner.summonerId", (function() {
                    return this.get("searchError.penalizedSummonerId") === this.get("currentSummoner.summonerId")
                })),
                penalizedSummonerDisplayName: i.Ember.computed.alias("penalizedSummonerNameProxy.content.playerNameFull"),
                penalizedSummonerNameProxy: i.Ember.computed("searchError.penalizedSummonerId", (function() {
                    const e = this.get("searchError.penalizedSummonerId");
                    return e && a.create({
                        promise: this._playerNames.getDisplayNameBySummonerId(e)
                    })
                })),
                queueErrorMessage: i.Ember.computed("penalizedSummonerDisplayName", "penalizedSummonerIsMe", "tra.ready", "tra.parties_queue_error_queue_dodge_myself_body", "tra.parties_queue_error_queue_dodge_other_body", (function() {
                    return this.get("penalizedSummonerIsMe") ? this.get("tra.parties_queue_error_queue_dodge_myself_body") : this.get("penalizedSummonerDisplayName") ? this.get("tra").formatString("parties_queue_error_queue_dodge_other_body", {
                        player: this.get("penalizedSummonerDisplayName")
                    }) : this.get("tra.parties_queue_error_generic_body$html")
                }))
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "V2fVE/vu",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\queue-error-dialog-component\\\\queue-dodge\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\queue-error-dialog-component\\\\queue-dodge\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\queue-error-dialog-component\\\\queue-dodge\\\\index.js\\" "],["text","\\n"],["open-element","lol-uikit-content-block",[]],["static-attr","type","dialog-large"],["flush-element"],["text","\\n  "],["open-element","h4",[]],["flush-element"],["append",["unknown",["tra","parties_queue_error_queue_dodge_header"]],false],["close-element"],["text","\\n  "],["open-element","hr",[]],["static-attr","class","heading-spacer"],["flush-element"],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","parties-queue-error-body"],["flush-element"],["text","\\n      "],["open-element","p",[]],["flush-element"],["append",["unknown",["queueErrorMessage"]],false],["close-element"],["text","\\n    "],["close-element"],["text","\\n\\n    "],["open-element","div",[]],["dynamic-attr","class",["concat",["queue-dodge-timer ",["helper",["if"],[["get",["hasTimeRemaining"]],"","hidden"],null]]]],["flush-element"],["text","\\n      "],["open-element","p",[]],["flush-element"],["text","\\n        "],["open-element","h6",[]],["static-attr","class","queue-dodge-time-remaining-label subhead"],["flush-element"],["append",["unknown",["tra","parties_queue_dodge_timer"]],false],["close-element"],["text","\\n        "],["open-element","h6",[]],["static-attr","class","queue-dodge-time-remaining subhead"],["flush-element"],["append",["unknown",["timeRemainingFormatted"]],false],["close-element"],["text","\\n      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            e.exports = s.Ember.Component.extend({
                layout: n(475)
            })
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "eNBohR7x",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\queue-error-dialog-component\\\\prerequisite-queues-not-played\\\\layout.hbs\\" style-path=\\"null\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\queue-error-dialog-component\\\\prerequisite-queues-not-played\\\\index.js\\" "],["text","\\n"],["open-element","lol-uikit-content-block",[]],["static-attr","type","dialog-large"],["flush-element"],["text","\\n  "],["open-element","h4",[]],["flush-element"],["append",["unknown",["tra","parties_queue_error_prerequisite_queues_not_played_header"]],false],["close-element"],["text","\\n  "],["open-element","hr",[]],["static-attr","class","heading-spacer"],["flush-element"],["close-element"],["text","\\n  "],["open-element","p",[]],["flush-element"],["append",["unknown",["tra","parties_queue_error_prerequisite_queues_not_played_body"]],false],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            n(477);
            var i = c(n(106)),
                o = c(n(143)),
                a = c(n(122)),
                l = c(n(74)),
                r = n(478);

            function c(e) {
                return e && e.__esModule ? e : {
                    default: e
                }
            }
            const {
                RunMixin: m
            } = s.EmberAddons.EmberLifeline;

            function u(e, t) {
                return e.isHonorRecognized && t.isHonorRecognized ? t.gameId - e.gameId : e.isHonorRecognized && t.isRecentlyPlayed ? -1 : e.isRecentlyPlayed && t.isHonorRecognized ? 1 : e.isRecentlyPlayed && t.isRecentlyPlayed ? t.gameId - e.gameId : void 0
            }
            e.exports = s.Ember.Component.extend(m, a.default, l.default, o.default, {
                layout: n(479),
                classNames: ["parties-invite-dialog"],
                lobbiesService: s.Ember.inject.service("lobbies"),
                customGamesService: s.Ember.inject.service("custom-games"),
                invitesService: s.Ember.inject.service("invites"),
                chatService: s.Ember.inject.service("chat"),
                summonerService: s.Ember.inject.service("summoner"),
                currentPartyMemberIds: s.Ember.computed.alias("lobbiesService.currentPartyMemberIds"),
                isCurrentPlayerPartyLeader: s.Ember.computed.alias("lobbiesService.isCurrentPlayerPartyLeader"),
                currentPartyIsFull: s.Ember.computed.alias("lobbiesService.currentPartyIsFull"),
                recognitionHistorySummonerIds: s.Ember.computed("recognitionHistory", (function() {
                    return new Set((this.get("recognitionHistory") || []).map((({
                        summonerId: e
                    }) => e)))
                })),
                recentlyPlayedSummoners: s.Ember.computed("matchHistoryRecentlyPlayedSummoners", "recognitionHistorySummonerIds", (function() {
                    const e = this.get("matchHistoryRecentlyPlayedSummoners") || [],
                        t = this.get("recognitionHistorySummonerIds"),
                        n = e.reduce((function(e, n) {
                            return t.has(n.summonerId) ? e.push({
                                ...n,
                                isHonorRecognized: !0
                            }) : e.push({
                                ...n,
                                isRecentlyPlayed: !0
                            }), e
                        }), []);
                    return n.sort(u), n
                })),
                recentGroup: s.Ember.computed("recentlyPlayedSummoners", (function() {
                    const e = this.get("recentlyPlayedSummoners");
                    if (0 === e.length) return null;
                    return {
                        friends: e.map((e => i.default.create({
                            summonerId: e.summonerId,
                            puuid: e.puuid,
                            name: e.summonerName,
                            gameName: e.gameName,
                            gameTag: e.tagLine,
                            checked: !1,
                            isHonorRecognized: e.isHonorRecognized || !1,
                            isRecentlyPlayed: e.isRecentlyPlayed || !1,
                            championId: e.championId,
                            isInRecentGroup: !0
                        }))),
                        name: "recently-played"
                    }
                })),
                me: s.Ember.computed.alias("chatService.me"),
                friends: s.Ember.computed.alias("chatService.friends"),
                searchError: !1,
                hasNoSearchString: s.Ember.computed.empty("searchString"),
                onDidInsertElement: s.Ember.on("didInsertElement", (function() {
                    this.element.addEventListener("sendInvitesClicked", (() => {
                        this.send("sendInvites")
                    })), this.element.addEventListener("destroyComponent", (() => {
                        this.send("destroyApplication")
                    })), this.element.addEventListener("initInviteDialog", (() => {
                        this.send("initDialog")
                    }));
                    const e = this.element.querySelector("input.search-box-input");
                    e && this.runTask((function() {
                        e.focus()
                    }), 1), this._super()
                })),
                inviteHeaderText: s.Ember.computed("tra.ready", (function() {
                    return this.get("tra.invite_dialog_header")
                })),
                inviteableFriends: s.Ember.computed("me", "friends.@each.{canBeInvited,platformId,product}", "currentPartyMembersIds.[]", "recentGroup", (function() {
                    const e = this.get("me"),
                        t = this.get("friends"),
                        n = this.get("recentGroup") ? this.get("recentGroup").friends : [];
                    if (!t) return s.Ember.A([...n]);
                    const i = s.Ember.A(t.filter((t => t.canBeInvitedBy(e)))),
                        o = this.get("currentPartyMemberIds") || s.Ember.A(),
                        a = i.reject((function(e) {
                            return -1 !== o.indexOf(e.summonerId)
                        }));
                    return s.Ember.A([...a, ...n])
                })),
                selectedInviteableFriends: s.Ember.computed.filterBy("inviteableFriends", "checked", !0),
                inviteableSummoners: s.Ember.A(),
                selectedSummoners: s.Ember.computed.filterBy("inviteableSummoners", "checked", !0),
                haveSelectedFriends: s.Ember.computed.gt("selectedInviteableFriends.length", 0),
                haveSelectedSummoners: s.Ember.computed.gt("selectedSummoners.length", 0),
                haveSomebodySelected: s.Ember.computed.or("haveSelectedFriends", "haveSelectedSummoners"),
                haveNobodySelected: s.Ember.computed.not("haveSomebodySelected"),
                haveNobodySelectedObserver: s.Ember.on("didInsertElement", s.Ember.observer("haveNobodySelected", (function() {
                    s.Ember.run.once(this, (function() {
                        const e = this.get("haveNobodySelected") ? "disableacceptbutton" : "enableacceptbutton";
                        this.element.dispatchEvent(new Event(e, {
                            bubbles: !0
                        }))
                    }))
                }))),
                inviteableIds: s.Ember.computed("inviteableFriends.@each.id", "inviteableSummoners.@each.id", (function() {
                    const e = s.Ember.A(this.get("inviteableFriends").filterBy("summonerId")).mapBy("summonerId"),
                        t = s.Ember.A(this.get("inviteableSummoners").filterBy("summonerId")).mapBy("summonerId");
                    return s.Ember.A(e.concat(t))
                })),
                friendGroups: s.Ember.computed("inviteableFriends.[]", "inviteableFriends.@each.displayGroupId", (function() {
                    return s.lodash.groupBy(this.get("inviteableFriends"), "displayGroupId")
                })),
                searchStringArray: s.Ember.computed("searchString", (function() {
                    return (this.get("searchString") || "").split(" ")
                })),
                inviteByNameGroup: s.Ember.computed("inviteableSummoners.[]", "searchStringArray", (function() {
                    return s.Ember.Object.create({
                        friends: this._filterFriendListBySearchString(this.get("inviteableSummoners"))
                    })
                })),
                groups: s.Ember.computed("friendGroups", "chatService.groups.@each.id", "searchStringArray", (function() {
                    const e = s.lodash.map(this.get("chatService.groups"), (e => {
                            const t = this.get("friendGroups")[e.get("id")];
                            return e.set("friends", this._filterFriendListBySearchString(t)), e
                        })),
                        t = s.Ember.A([r.FRIEND_GROUPS.OFFLINE, r.FRIEND_GROUPS.MOBILE]),
                        n = this.filterFriendGroupsByName(e, t);
                    return n.sort((function(e, t) {
                        return e.priority === t.priority ? 0 : e.priority < t.priority ? 1 : -1
                    })), s.Ember.A(n)
                })),
                filterFriendGroupsByName: function(e, t) {
                    return s.lodash.filter(e, (e => -1 === t.indexOf(e.get("name"))))
                },
                partyFull: function() {
                    this.get("currentPartyIsFull") && this.element.dispatchEvent(new Event("closeinvitemodal", {
                        bubbles: !0
                    }))
                },
                partyFullObserver: s.Ember.observer("currentPartyIsFull", (function() {
                    this.partyFull()
                })),
                _filterFriendListBySearchString: function(e) {
                    return s.Ember.A(s.lodash.filter(e, (e => {
                        const t = (e.get("name") + (e.get("gameName") || "") + "#" + (e.get("gameTag") || "")).toLowerCase().replace(/\s/g, "");
                        return s.lodash.every(this.get("searchStringArray"), (e => s.lodash.includes(t, e.toLowerCase())))
                    }), this))
                },
                _shakeSearchBoxContainer: function() {
                    const e = this.$(".search-box-container");
                    e.addClass("not-found").on("animationend", (function() {
                        e.removeClass("not-found")
                    }))
                },
                _parseNames: function(e) {
                    e = -1 === e.indexOf(",") ? [e] : e.split(",");
                    const t = this.get("_playerNames").isUsingAlias,
                        n = [];
                    for (let i = 0; i < e.length; i++) {
                        let o = e[i];
                        if (t) {
                            let e, t, s = !1;
                            if (o.includes("#")) {
                                const n = o.split("#", 2);
                                e = n[0].trim(), t = n[1].trim(), s = !t
                            } else s = !0;
                            s ? this.set("searchError", this.get("tra.invite_dialog_search_error_blank_tagline")) : e && n.push({
                                gameName: e,
                                tagLine: t
                            })
                        } else {
                            if (o.includes("#")) {
                                const e = o.split("#", 2),
                                    t = e[0].trim(),
                                    n = e[1].trim(),
                                    i = s.Ember.A(this.get("friends")).find((e => e.gameName === t && e.gameTag === n));
                                o = "", i && i.name && (o = i.name)
                            }
                            o = o.trim(), o && n.push(o)
                        }
                    }
                    return n
                },
                _lookupSummonerByName: function() {
                    const e = this.get("searchString");
                    if (!e) return;
                    const t = this._parseNames(e),
                        n = this.get("_playerNames").isUsingAlias;
                    1 === t.length ? n ? this._handleSingleAliasSearch(t[0]) : this._handleSingleSummonerNameSearch(t[0]) : t.length > 1 ? n ? this._handleMultiAliasSearch(t) : this._handleMultiSummonerNameSearch(t) : this._shakeSearchBoxContainer()
                },
                _handleSingleAliasSearch(e) {
                    this.get("summonerService").getSummonersByAliases([e]).then((e => {
                        if (!e || !Array.isArray(e) || e.length <= 0 || !e[0]?.summonerId) return this.set("searchError", this.get("tra.invite_dialog_search_error_not_found")), void this._shakeSearchBoxContainer();
                        this._addToInviteList(e[0])
                    }), (() => {
                        this._shakeSearchBoxContainer()
                    }))
                },
                _handleSingleSummonerNameSearch(e) {
                    this.get("summonerService").getSummonerBySummonerName(e).then((e => {
                        if (!e || !e.summonerId) return this.set("searchError", this.get("tra.invite_dialog_search_error_not_found")), void this._shakeSearchBoxContainer();
                        this._addToInviteList(e)
                    }), (() => {
                        this._shakeSearchBoxContainer()
                    }))
                },
                _handleMultiAliasSearch(e) {
                    this.get("summonerService").getSummonersByAliases(e).then((e => {
                        if (!e || !Array.isArray(e) || 0 === e.length) return this.set("searchError", this.get("tra.invite_dialog_search_error_not_found")), void this._shakeSearchBoxContainer();
                        for (let t = 0; t < e.length; t++) this._addToInviteList(e[t])
                    }), (() => {
                        this._shakeSearchBoxContainer()
                    }))
                },
                _handleMultiSummonerNameSearch(e) {
                    this.get("summonerService").getSummonersBySummonerNames(e).then((e => {
                        if (!e || !Array.isArray(e) || 0 === e.length) return this.set("searchError", this.get("tra.invite_dialog_search_error_not_found")), void this._shakeSearchBoxContainer();
                        for (let t = 0; t < e.length; t++) this._addToInviteList(e[t])
                    }), (() => {
                        this._shakeSearchBoxContainer()
                    }))
                },
                _canAddToInviteList: function(e) {
                    if (!e) return !1;
                    if (this.get("currentPartyMemberIds").indexOf(e) > -1) return !1;
                    const t = s.Ember.A(this.get("friends")),
                        n = this.get("me"),
                        i = t.findBy("summonerId", e);
                    if (i) {
                        if (!i.canBeInvitedBy(n)) return !1;
                        i.set("checked", !0)
                    }
                    return !0
                },
                _addToInviteList: function(e) {
                    const t = e ? e.summonerId : void 0;
                    if (!this._canAddToInviteList(t)) return this.set("searchError", this.get("tra.invite_dialog_search_error_not_available")), void this._shakeSearchBoxContainer();
                    this.get("inviteableIds").includes(t) || this.get("inviteableSummoners").insertAt(0, i.default.create({
                        summonerId: t,
                        puuid: e.puuid,
                        name: e.displayName,
                        gameName: e.gameName,
                        gameTag: e.tagLine,
                        checked: !0
                    })), this.set("searchString", "")
                },
                aggregateSelectedPlayers: function() {
                    const e = this.get("selectedInviteableFriends"),
                        t = this.get("selectedSummoners");
                    return s.Ember.A(e.concat(t))
                },
                init: function() {
                    this._super(...arguments), this._playerNames = s.playerNames, this.honorBinding = (0, s.dataBinding)("/lol-honor-v2", (0, s.getProvider)().getSocket()), this.matchHistoryBinding = (0, s.dataBinding)("/lol-match-history", (0, s.getProvider)().getSocket()), this.honorBinding.observe("/v1/recognition-history", this, this.handleRecognitionHistory), this.matchHistoryBinding.observe("/v1/recently-played-summoners", this, this.handleRecentlyPlayedSummoners)
                },
                willDestroyElement: function() {
                    this._super(...arguments), this.honorBinding.unobserve("/v1/recognition-history", this), this.matchHistoryBinding.unobserve("/v1/recently-played-summoners", this)
                },
                handleRecognitionHistory(e) {
                    this.set("recognitionHistory", e)
                },
                handleRecentlyPlayedSummoners(e) {
                    this.set("matchHistoryRecentlyPlayedSummoners", e)
                },
                actions: {
                    inputChanged: function(e, t) {
                        if (13 === (t.keyCode || !1)) {
                            this.get("searchString") && t.stopPropagation()
                        } else this.set("searchError", !1)
                    },
                    addToInviteList: function() {
                        this._lookupSummonerByName()
                    },
                    sendInvites: function() {
                        const e = this.aggregateSelectedPlayers().mapBy("summonerId");
                        e.length && this.get("lobbiesService").invitePlayers(e).catch((e => {
                            s.logger.trace("Unable to invite summoners", e)
                        }))
                    },
                    destroyApplication: function() {
                        this.componentFactoryApp.destroy()
                    },
                    initDialog: function() {
                        this.get("searchError") && this.set("searchError", ""), this.get("inviteableSummoners.length") && this.set("inviteableSummoners", s.Ember.A());
                        const e = this.get("friends");
                        e && e.forEach((e => {
                            e.get("checked") && e.set("checked", !1)
                        }))
                    }
                }
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.FRIEND_GROUPS = void 0;
            t.FRIEND_GROUPS = {
                OFFLINE: "OFFLINE",
                MOBILE: "MOBILE"
            }
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "R9TzKlRV",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\invite-dialog-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\invite-dialog-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\invite-dialog-component\\\\index.js\\" "],["text","\\n"],["open-element","lol-uikit-scrollable",[]],["static-attr","class","parties-invite-dialog-container"],["flush-element"],["text","\\n  "],["open-element","lol-uikit-content-block",[]],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","search-box-container"],["flush-element"],["text","\\n      "],["open-element","lol-uikit-flat-input",[]],["static-attr","class","search-box"],["flush-element"],["text","\\n        "],["append",["helper",["input"],null,[["maxlength","class","enter","type","value","placeholder","key-down"],["209","search-box-input","addToInviteList","text",["get",["searchString"]],["get",["tra","invite_dialog_search_placeholder"]],"inputChanged"]]],false],["text","\\n      "],["close-element"],["text","\\n      "],["open-element","button",[]],["static-attr","class","search"],["dynamic-attr","disabled",["unknown",["hasNoSearchString"]],null],["modifier",["action"],[["get",[null]],"addToInviteList"]],["flush-element"],["close-element"],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","search-error"],["flush-element"],["text","\\n"],["block",["if"],[["get",["searchError"]]],null,2],["text","    "],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","available-players"],["flush-element"],["text","\\n      "],["append",["unknown",["tra","invite_dialog_available_players"]],false],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","groups"],["flush-element"],["text","\\n      "],["append",["helper",["invite-dialog-group"],null,[["group","selectedPlayers","inviteByName"],[["get",["inviteByNameGroup"]],["get",["selectedPlayers"]],true]]],false],["text","\\n"],["block",["if"],[["get",["recentGroup"]]],null,1],["block",["each"],[["get",["groups"]]],null,0],["text","    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n"],["close-element"],["text","\\n\\n"],["open-element","div",[]],["static-attr","style","display: none"],["flush-element"],["text","\\n  "],["comment"," here are some computeds we need in a template somewhere, so they update "],["text","\\n  "],["append",["unknown",["lobbiesService","notInLobbyObserver"]],false],["text","\\n  "],["append",["unknown",["lobbiesService","invitationsObserver"]],false],["text","\\n  "],["append",["unknown",["customGamesService","isCustomUI"]],false],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","        "],["append",["helper",["invite-dialog-group"],null,[["group","selectedPlayers"],[["get",["group"]],["get",["selectedPlayers"]]]]],false],["text","\\n"]],"locals":["group"]},{"statements":[["text","        "],["append",["helper",["invite-dialog-group"],null,[["group","selectedPlayers"],[["get",["recentGroup"]],["get",["selectedPlayers"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["append",["unknown",["searchError"]],false],["text","\\n"]],"locals":[]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            n(481);
            e.exports = s.Ember.Component.extend({
                layout: n(482),
                classNames: ["invite-dialog-group"],
                classNameBindings: ["isExpanded:expanded"],
                isExpanded: !0,
                inviteByName: !1,
                checkDisabled: !1,
                groupName: s.Ember.computed("group.name", "tra.ready", (function() {
                    const e = this.get("group.name");
                    return "**Default" === e ? this.get("tra.social_group_label_default") : "recently-played" === e ? this.get("tra.social_group_label_recently_played") : this.get("inviteByName") ? this.get("tra.social_group_label_invite_by_name") : e
                })),
                actions: {
                    toggleExpanded: function() {
                        this.toggleProperty("isExpanded")
                    }
                }
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "vlQLTRUG",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\invite-dialog-component\\\\group\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\invite-dialog-component\\\\group\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\invite-dialog-component\\\\group\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","header"],["modifier",["action"],[["get",[null]],"toggleExpanded"]],["flush-element"],["append",["unknown",["groupName"]],false],["close-element"],["text","\\n"],["open-element","div",[]],["static-attr","class","list-wrapper"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","list"],["flush-element"],["text","\\n"],["block",["each"],[["get",["group","friends"]]],null,5],["text","  "],["close-element"],["text","\\n"],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","                  "],["open-element","span",[]],["static-attr","class","invite-dialog-friend-gnt"],["flush-element"],["append",["unknown",["friend","gameName"]],false],["text"," #"],["append",["unknown",["friend","gameTag"]],false],["close-element"],["text","\\n                "]],"locals":[]},{"statements":[["block",["if"],[["get",["friend","gameName"]]],null,0]],"locals":[]},{"statements":[["text","                  "],["open-element","span",[]],["static-attr","class","lol_parties__invite_dialog_historical-context"],["flush-element"],["text","\\n                    "],["open-element","img",[]],["static-attr","src","/fe/lol-static-assets/images/clock-icon-grey1_5.svg"],["static-attr","alt","recently-played-default-icon"],["static-attr","class","lol_parties__invite_dialog_invite-context-icon clock"],["flush-element"],["close-element"],["text","\\n                    "],["append",["unknown",["tra","parties_invite_dialog_recently_played"]],false],["text","\\n                  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["friend","isRecentlyPlayed"]]],null,2,1]],"locals":[]},{"statements":[["text","                  "],["open-element","span",[]],["static-attr","class","lol_parties__invite_dialog_historical-context"],["flush-element"],["text","\\n                    "],["open-element","img",[]],["static-attr","src","/fe/lol-static-assets/images/honor-leaf.svg"],["static-attr","alt","recently-honored-default-icon"],["static-attr","class","lol_parties__invite_dialog_invite-context-icon"],["flush-element"],["close-element"],["text","\\n                    "],["append",["unknown",["tra","parties_invite_dialog_recently_honored"]],false],["text","\\n                  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","invite-dialog-friend"],["flush-element"],["text","\\n        "],["open-element","lol-uikit-flat-checkbox",[]],["static-attr","class","invite-dialog-friend-checkbox"],["flush-element"],["text","\\n          "],["append",["helper",["input"],null,[["slot","type","id","checked","name"],["input","checkbox",["get",["friend","checkboxId"]],["get",["friend","checked"]],["get",["friend","checkboxId"]]]]],false],["text","\\n          "],["open-element","label",[]],["static-attr","slot","label"],["dynamic-attr","for",["unknown",["friend","checkboxId"]],null],["flush-element"],["open-element","span",[]],["static-attr","class","flat-checkbox-span"],["flush-element"],["close-element"],["text","\\n            "],["open-element","span",[]],["static-attr","class","invite-dialog-friend-name"],["flush-element"],["text","\\n              "],["open-element","div",[]],["static-attr","class","lol_parties__invite_dialog_avatar"],["flush-element"],["text","\\n                "],["open-element","img",[]],["dynamic-attr","src",["unknown",["friend","avatarImgUrl"]],null],["flush-element"],["close-element"],["text","\\n              "],["close-element"],["text","\\n\\n              "],["open-element","div",[]],["static-attr","class","lol_parties__invite_dialog_name-and-context"],["flush-element"],["text","\\n                "],["open-element","span",[]],["flush-element"],["text","\\n                  "],["append",["helper",["player-name"],null,[["format","gameName","tagLine","summonerName"],["short",["get",["friend","gameName"]],["get",["friend","gameTag"]],["get",["friend","name"]]]]],false],["text","\\n                "],["close-element"],["text","\\n"],["block",["if"],[["get",["friend","isHonorRecognized"]]],null,4,3],["text","              "],["close-element"],["text","\\n            "],["close-element"],["text","\\n          "],["close-element"],["text","\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n"]],"locals":["friend"]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            n(484), e.exports = s.Ember.Component.extend({
                layout: n(485)
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "wr3HFvoU",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\low-priority-queue-toast-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\low-priority-queue-toast-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\low-priority-queue-toast-component\\\\index.js\\" "],["text","\\n"],["open-element","lol-uikit-content-block",[]],["static-attr","type","notification"],["flush-element"],["text","\\n  "],["open-element","p",[]],["flush-element"],["append",["unknown",["tra","low_priority_queue_notification_body"]],false],["close-element"],["text","\\n  "],["open-element","ul",[]],["static-attr","class","low-priority-player-list"],["flush-element"],["text","\\n"],["block",["each"],[["get",["penalizedPlayerNames"]]],null,0],["text","  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["open-element","li",[]],["static-attr","class","low-priority-player-name"],["flush-element"],["append",["get",["name"]],false],["close-element"],["text","  \\n"]],"locals":["name"]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s, i = n(1),
                o = (s = n(111)) && s.__esModule ? s : {
                    default: s
                };
            const a = (0, i.emberDataBinding)({
                Ember: i.Ember,
                websocket: (0, i.getProvider)().getSocket(),
                logPrefix: "party:self-low-priority-dialog",
                basePaths: {
                    matchmaking: "/lol-matchmaking"
                },
                boundProperties: {
                    search: {
                        api: "matchmaking",
                        path: "/v1/search"
                    }
                }
            });
            e.exports = i.Ember.Component.extend(a, {
                layout: n(487),
                classNames: ["low-priority-dialog"],
                lowPrioritytimeRemaining: i.Ember.computed.readOnly("search.lowPriorityData.penaltyTimeRemaining"),
                timeRemainingFormatted: i.Ember.computed("lowPrioritytimeRemaining", (function() {
                    return o.default.formatSeconds(this.get("lowPrioritytimeRemaining"))
                }))
            })
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "Tz81ViGY",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\low-priority-queue-modal-component\\\\layout.hbs\\" style-path=\\"null\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\low-priority-queue-modal-component\\\\index.js\\" "],["text","\\n"],["open-element","lol-uikit-content-block",[]],["static-attr","type","dialog-large"],["flush-element"],["text","\\n  "],["open-element","h4",[]],["flush-element"],["append",["unknown",["tra","low_priority_queue_modal_header"]],false],["close-element"],["text","\\n  "],["open-element","hr",[]],["static-attr","class","heading-spacer"],["flush-element"],["close-element"],["text","\\n    "],["open-element","p",[]],["static-attr","class","parties-queue-error-body"],["flush-element"],["text","\\n      "],["append",["unknown",["tra","low_priority_queue_modal_self_body"]],false],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","p",[]],["flush-element"],["text","\\n      "],["open-element","h6",[]],["static-attr","class","low-priority-dialog-time-remaining-label subhead"],["flush-element"],["append",["unknown",["tra","low_priority_queue_modal_timer_label"]],false],["close-element"],["text","\\n      "],["open-element","h6",[]],["static-attr","class","low-priority-dialog-time-remaining subhead"],["flush-element"],["append",["unknown",["timeRemainingFormatted"]],false],["close-element"],["text","\\n    "],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            n(489), e.exports = s.Ember.Component.extend({
                layout: n(490),
                partySettings: null,
                hideAutofillModal: !1,
                checkboxObserver: s.Ember.on("DidInsertElement", s.Ember.observer("hideAutofillModal", (function() {
                    s.Ember.run.once(this, (function() {
                        this.updateAutofillSetting()
                    }))
                }))),
                updateAutofillSetting: function() {
                    this.set("partySettings.permanentHideAutofillModal", this.get("hideAutofillModal"))
                }
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "si0klGlB",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\autofill-setting-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\autofill-setting-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\parties\\\\autofill-setting-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","autofill-settings"],["flush-element"],["text","\\n  "],["append",["unknown",["tra","parties_autofill_settings_dialog_text"]],false],["text","\\n  "],["open-element","ul",[]],["flush-element"],["text","\\n    "],["open-element","li",[]],["flush-element"],["text","\\n      "],["open-element","lol-uikit-flat-checkbox",[]],["flush-element"],["text","\\n        "],["append",["helper",["input"],null,[["slot","type","name","checked"],["input","checkbox","permanentHideAutofillModal",["get",["hideAutofillModal"]]]]],false],["text","\\n        "],["open-element","label",[]],["static-attr","slot","label"],["static-attr","for","permanentHideAutofillModal"],["flush-element"],["append",["unknown",["tra","parties_permanentHideAutofillModal"]],false],["close-element"],["text","\\n      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1),
                i = l(n(74)),
                o = l(n(143)),
                a = n(5);

            function l(e) {
                return e && e.__esModule ? e : {
                    default: e
                }
            }
            n(492), e.exports = s.Ember.Component.extend(o.default, i.default, {
                layout: n(493),
                classNames: ["game-mode-tutorial"],
                currentIndex: null,
                tutorialCards: [],
                carouselSfxUrl: a.SFX_URLS.SFX_UIKIT_CLICK_AND_SLIDE,
                tutorialItems: s.Ember.computed("tutorialCards.[]", (function() {
                    const e = this.get("tutorialCards");
                    if (!e || 0 === e.length) return s.Ember.A([]);
                    const t = e.map(((e, t) => s.Ember.Object.create(e, {
                        step: s.tra.numeral(t + 1).format()
                    })));
                    return s.Ember.A(t)
                })),
                leftArrowDisabled: s.Ember.computed.equal("currentIndex", 0),
                isViewingLastItem: s.Ember.computed("currentIndex", "tutorialItems.[]", (function() {
                    return this.get("currentIndex") >= this.get("tutorialItems.length") - 1
                })),
                rightArrowDisabled: s.Ember.computed.alias("isViewingLastItem"),
                didInsertElement: function() {
                    this._super(...arguments), this.get("tutorialItems") && this.handleSelectItem(0)
                },
                _setSelectedClass: function(e, t) {
                    for (let n = 0; n < t.length; ++n) n === e ? t[n].classList.add("selected") : t[n].classList.remove("selected")
                },
                handleSelectItem: function(e) {
                    if (this.get("tutorialItems.length") <= 0 || e < 0 || e > this.get("tutorialItems.length") || e === this.get("currentIndex")) return;
                    const t = this.element.querySelector(".game-mode-tutorial-carousel"),
                        n = t.children,
                        s = n[e],
                        i = s.offsetLeft,
                        o = (t.offsetWidth - s.offsetWidth) / 2;
                    t.style.transform = `translateX(${o-i}px)`, this._setSelectedClass(e, n);
                    const a = this.element.querySelectorAll(".navigation-pip");
                    this._setSelectedClass(e, a), this.set("currentIndex", e)
                },
                actions: {
                    selectItem: function(e) {
                        this.playSound(this.carouselSfxUrl), this.handleSelectItem(e)
                    },
                    advanceItem: function(e) {
                        this.handleSelectItem(this.get("currentIndex") + e)
                    },
                    confirmClicked: function() {
                        if (this.get("isViewingLastItem")) {
                            s.Navigation.getFullPageModalManager().close()
                        } else this.send("advanceItem", 1)
                    }
                }
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "YpZEHMLm",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-mode-tutorial-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-mode-tutorial-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-mode-tutorial-component\\\\index.js\\" "],["text","\\n"],["open-element","lol-uikit-backdrop-magic",[]],["static-attr","class","game-mode-tutorial-background"],["flush-element"],["text","\\n"],["close-element"],["text","\\n"],["open-element","div",[]],["static-attr","class","game-mode-tutorial-content"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","game-mode-tutorial-carousel"],["flush-element"],["text","\\n"],["block",["each"],[["get",["tutorialItems"]]],null,1],["text","  "],["close-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","game-mode-tutorial-navigation"],["flush-element"],["text","\\n"],["block",["each"],[["get",["tutorialItems"]]],null,0],["text","  "],["close-element"],["text","\\n  "],["open-element","lol-uikit-flat-button",[]],["static-attr","class","game-mode-tutorial-confirm-button"],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"confirmClicked"],null],null],["flush-element"],["text","\\n    "],["append",["helper",["if"],[["get",["isViewingLastItem"]],["get",["tra","tutorial_confirm_button_text"]],["get",["tra","tutorial_next_button_text"]]],null],false],["text","\\n  "],["close-element"],["text","\\n  "],["open-element","lol-uikit-arrow-button",[]],["static-attr","class","game-mode-tutorial-carousel-arrow left-arrow"],["static-attr","direction","left"],["dynamic-attr","disabled",["unknown",["leftArrowDisabled"]],null],["dynamic-attr","click-sfx-src",["unknown",["carouselSfxUrl"]],null],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"advanceItem",-1],null],null],["flush-element"],["text","\\n  "],["close-element"],["text","\\n  "],["open-element","lol-uikit-arrow-button",[]],["static-attr","class","game-mode-tutorial-carousel-arrow right-arrow"],["static-attr","direction","right"],["dynamic-attr","disabled",["unknown",["rightArrowDisabled"]],null],["dynamic-attr","click-sfx-src",["unknown",["carouselSfxUrl"]],null],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"advanceItem",1],null],null],["flush-element"],["text","\\n  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","navigation-pip"],["modifier",["action"],[["get",[null]],"selectItem",["get",["index"]]]],["flush-element"],["close-element"],["text","\\n"]],"locals":["tutorialItem","index"]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","game-mode-tutorial-carousel-item"],["dynamic-attr","class",["unknown",["tutorialItem","className"]],null],["modifier",["action"],[["get",[null]],"selectItem",["get",["index"]]]],["flush-element"],["text","\\n        "],["open-element","lol-uikit-dialog-frame",[]],["static-attr","appearance",""],["flush-element"],["text","\\n          "],["open-element","div",[]],["static-attr","class","game-mode-tutorial-carousel-item-content"],["dynamic-attr","style",["concat",["background-image:url(\'",["unknown",["tutorialItem","imagePath"]],"\')"]]],["flush-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","top-block"],["flush-element"],["text","\\n              "],["open-element","div",[]],["static-attr","class","step-block"],["flush-element"],["text","\\n                "],["open-element","div",[]],["static-attr","class","step"],["flush-element"],["append",["unknown",["tutorialItem","step"]],false],["close-element"],["text","\\n              "],["close-element"],["text","\\n              "],["open-element","div",[]],["static-attr","class","text-block"],["flush-element"],["text","\\n                "],["open-element","div",[]],["static-attr","class","title"],["flush-element"],["append",["unknown",["tutorialItem","header"]],false],["close-element"],["text","\\n                "],["open-element","div",[]],["static-attr","class","description"],["flush-element"],["append",["unknown",["tutorialItem","description"]],false],["close-element"],["text","\\n              "],["close-element"],["text","\\n            "],["close-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","footer"],["flush-element"],["text","\\n              "],["append",["unknown",["tutorialItem","footer"]],false],["text","\\n            "],["close-element"],["text","\\n          "],["close-element"],["text","\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n"]],"locals":["tutorialItem","index"]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            n(495), e.exports = s.Ember.Component.extend({
                layout: n(496),
                classNames: ["game-mode-one-page-tutorial"],
                classNameBindings: ["isLongCardLayout:long-card-layout"],
                title: null,
                subheader: null,
                iconV2: "",
                tutorialBg: "",
                tutorialCards: [],
                isLongCardLayout: !1
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "TdOkG0g2",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-mode-one-page-tutorial-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-mode-one-page-tutorial-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\game-mode-one-page-tutorial-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","one-page-tutorial-wrapper"],["dynamic-attr","style",["concat",["background-image: url(",["unknown",["tutorialBg"]],")"]]],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","header-group"],["flush-element"],["text","\\n"],["block",["if"],[["get",["iconV2"]]],null,2],["text","        "],["open-element","div",[]],["static-attr","class","header"],["flush-element"],["append",["unknown",["title"]],false],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","sub-header"],["flush-element"],["append",["unknown",["subheader"]],false],["close-element"],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","cards"],["flush-element"],["text","\\n"],["block",["each"],[["get",["tutorialCards"]]],null,1],["text","    "],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","            "],["open-element","div",[]],["static-attr","class","arrow"],["flush-element"],["text","\\n                "],["comment"," Waiting on design to fill this in "],["text","\\n            "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["index"]]],null,0],["text","        "],["open-element","div",[]],["static-attr","class","card"],["flush-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","card-header-img"],["dynamic-attr","style",["concat",["background-image: url(",["unknown",["card","imagePath"]],")"]]],["flush-element"],["close-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","card-title"],["flush-element"],["append",["helper",["sanitize"],[["get",["card","header"]]],null],false],["close-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","card-body"],["flush-element"],["append",["helper",["sanitize"],[["get",["card","description"]]],null],false],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":["card","index"]},{"statements":[["text","            "],["open-element","div",[]],["static-attr","class","tutorial-header-icon"],["dynamic-attr","style",["concat",["background-image: url(",["unknown",["iconV2"]],")"]]],["flush-element"],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1),
                i = n(293);
            n(498), e.exports = s.Ember.Component.extend({
                classNames: ["social-leaderboard-feature-flyout"],
                layout: n(499),
                lobbiesService: s.Ember.inject.service("lobbies"),
                socialLeaderboardService: s.Ember.inject.service("socialLeaderboard"),
                leaderboardData: [],
                filteredData: [],
                nextUpdateTime: 0,
                isLoading: !1,
                currentPlayerCanInvite: s.Ember.computed.alias("lobbiesService.currentPlayerCanInvite"),
                isFriendsFound: s.Ember.computed("filteredData", (function() {
                    return this.get("filteredData").length > 0
                })),
                hasEnoughFriends: s.Ember.computed("minFriendCount", "numFriends", (function() {
                    return this.get("numFriends") >= this.get("minFriendCount")
                })),
                didReceiveAttrs: function() {
                    this._super(...arguments), this.get("hasEnoughFriends") && this.querySocialLeaderboardData()
                },
                didInsertElement() {
                    this._super(...arguments), this.get("currentPlayerCanInvite")
                },
                init: function() {
                    this._super(...arguments), this._chatBinding = (0, s.dataBinding)("/lol-chat", (0, s.getProvider)().getSocket()), this._chatBinding.observe("/v1/friends", this, this.onFriendsChange)
                },
                querySocialLeaderboardData: function() {
                    const e = this.get("selected.queue.type");
                    if (!e) return void this.set("hasError", !0);
                    this.set("isLoading", !0), this.set("hasError", !1);
                    this.get("socialLeaderboardService").getSocialLeaderboardData(e).then((e => {
                        const t = e.rowData,
                            n = this.get("onResetNextUpdateTime"),
                            s = 1e3 * e.nextUpdateTime;
                        this.set("leaderboardData", [].concat(t).reverse()), this.set("nextUpdateTime", s), n && n(s), this.set("isLoading", !1)
                    })).catch((() => {
                        this.set("isLoading", !1), this.set("hasError", !0), s.Telemetry.sendEvent("social-leaderboard-data-acquisition-failure")
                    }))
                },
                onFriendsChange: function(e) {
                    if (!e) return;
                    const t = (0, i.friendsWithSummonerNamesCount)(e);
                    this.set("numFriends", t)
                },
                actions: {
                    refreshLeaderboard() {
                        this.querySocialLeaderboardData()
                    },
                    updateFilteredData(e) {
                        this.set("filteredData", e)
                    }
                }
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "Vj9NHby6",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\feature-flyout-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\feature-flyout-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\feature-flyout-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","social-leaderboard-container"],["flush-element"],["text","\\n"],["block",["if"],[["get",["isLoading"]]],null,7,6],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","        "],["append",["unknown",["social-leaderboard-friend-not-found"]],false],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["append",["helper",["social-leaderboard-table"],null,[["leaderboardData","currentSummonerName","closeSocialLeaderboard"],[["get",["filteredData"]],["get",["currentSummonerName"]],["get",["closeSocialLeaderboard"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["append",["helper",["social-leaderboard-header"],null,[["selected","nextUpdateTime","onRefresh"],[["get",["selected"]],["get",["nextUpdateTime"]],["helper",["action"],[["get",[null]],"refreshLeaderboard"],null]]]],false],["text","\\n      "],["append",["helper",["social-leaderboard-friend-filter"],null,[["leaderboardData","updateFilteredData"],[["get",["leaderboardData"]],["helper",["action"],[["get",[null]],"updateFilteredData"],null]]]],false],["text","\\n"],["block",["if"],[["get",["isFriendsFound"]]],null,1,0]],"locals":[]},{"statements":[["text","      "],["append",["helper",["social-leaderboard-not-enough-friends"],null,[["onAddFriends"],[["helper",["action"],[["get",[null]],"openFriendFinder"],null]]]],false],["text","\\n"]],"locals":[]},{"statements":[["block",["unless"],[["get",["hasEnoughFriends"]]],null,3,2],["text","  "]],"locals":[]},{"statements":[["text","    "],["append",["unknown",["social-leaderboard-error-state"]],false],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["hasError"]]],null,5,4]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","social-leaderboard-loading-animation-container"],["flush-element"],["text","\\n      "],["append",["unknown",["hextech-loading-animation"]],false],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s, i = n(1),
                o = (s = n(292)) && s.__esModule ? s : {
                    default: s
                },
                a = (n(501), n(15));
            n(502), e.exports = i.Ember.Component.extend(o.default, {
                classNames: ["social-leaderboard-header"],
                layout: n(503),
                countdownLabel: i.Ember.computed.alias("tra.social_leaderboard_next_ladder_update_countdown_label"),
                socialLeaderboardQueueText: i.Ember.computed("tra", "selected.queue.name", (function() {
                    const e = this.get("selected.queue.type"),
                        t = this.get("tra");
                    return e === a.QUEUE_TYPE.RANKED_FLEX_SR ? t.get("social_leaderboard_ranked_flex_sr_text") : t.get("social_leaderboard_ranked_solo_5x5_text")
                })),
                actions: {}
            })
        }, (e, t) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.SOCIAL_LEADERBOARD_ROW_HEIGHT = t.SEASON_YEAR_BASE = t.OTHER_TIERS = t.NUM_OF_ROWS_TO_CENTER = t.LEAGUE_DIVISION_NA = t.COUNTDOWN_INTERVAL_MS = void 0;
            t.SEASON_YEAR_BASE = 2010;
            t.COUNTDOWN_INTERVAL_MS = 1e3;
            t.SOCIAL_LEADERBOARD_ROW_HEIGHT = 36.8;
            t.NUM_OF_ROWS_TO_CENTER = 3.4;
            t.OTHER_TIERS = {
                UNRANKED: "UNRANKED",
                NONE: "NONE"
            };
            t.LEAGUE_DIVISION_NA = "NA"
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "rpaLC83K",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\header-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\header-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\header-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","social-leaderboard-header-container"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","social-leaderboard-header-icon"],["flush-element"],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","social-leaderboard-header-text-container"],["flush-element"],["text","\\n        "],["open-element","lol-uikit-flat-textarea",[]],["flush-element"],["text","\\n            "],["open-element","div",[]],["static-attr","class","social-leaderboard-header-text"],["flush-element"],["text","\\n                "],["append",["unknown",["tra","social_leaderboard_ranked_title"]],false],["text","\\n            "],["close-element"],["text","\\n            "],["append",["helper",["social-leaderboard-countdown-timer"],null,[["countdownLabel","countdownToTime","onRefresh"],[["get",["countdownLabel"]],["get",["nextUpdateTime"]],["get",["onRefresh"]]]]],false],["text","\\n        "],["close-element"],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","social-leaderboard-queue-container"],["flush-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","social-leaderboard-queue-visual"],["flush-element"],["text","\\n            "],["append",["unknown",["socialLeaderboardQueueText"]],false],["text","\\n        "],["close-element"],["text","\\n    "],["close-element"],["text","\\n"],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1),
                i = n(501);

            function o(e) {
                return e < 10 ? "0" + e : e
            }
            n(505), e.exports = s.Ember.Component.extend({
                classNames: ["social-leaderboard-countdown-timer"],
                layout: n(506),
                totalTime: 0,
                elapsedTime: 0,
                countdownToTime: 0,
                prevCountdownToTime: 0,
                remainingTime: s.Ember.computed("elapsedTime", "totalTime", (function() {
                    const e = this.get("totalTime") - this.get("elapsedTime");
                    return e > 0 ? e : 0
                })),
                countdownTimeLeft: s.Ember.computed("remainingTime", (function() {
                    const e = this.get("remainingTime"),
                        t = s.moment.duration(e);
                    return `${o(t.hours())}:${o(t.minutes())}:${o(t.seconds())}`
                })),
                hasFinished: s.Ember.computed("remainingTime", (function() {
                    return 0 === this.get("remainingTime")
                })),
                didReceiveAttrs() {
                    this._super(...arguments);
                    const e = this.get("countdownToTime");
                    e !== this.prevCountdownToTime && (this.stop(), this.reset(), this.set("totalTime", e - Date.now()), this.notifyPropertyChange("totalTime"), this.start(), this.prevCountdownToTime = e)
                },
                willDestroyElement: function() {
                    this._super(...arguments), s.Ember.run.cancel(this.get("timer"))
                },
                reset() {
                    this.set("elapsedTime", 0), this.set("currentTime", Date.now())
                },
                start() {
                    this.stop(), this.set("currentTime", Date.now()), this.tick()
                },
                stop() {
                    const e = this.get("timer");
                    e && (s.Ember.run.cancel(e), this.set("timer", null))
                },
                tick() {
                    if (this.get("hasFinished")) {
                        this.stop();
                        return void this.get("onRefresh")()
                    }
                    const e = this.get("currentTime"),
                        t = this.get("elapsedTime"),
                        n = Date.now();
                    this.set("elapsedTime", t + (n - e)), this.set("currentTime", n), this.set("timer", s.Ember.run.later(this, this.tick, i.COUNTDOWN_INTERVAL_MS))
                }
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "e396SJ2A",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\countdown-timer-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\countdown-timer-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\countdown-timer-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","countdown-timer-component"],["flush-element"],["text","\\n  "],["append",["unknown",["countdownLabel"]],false],["text","\\n  "],["open-element","div",[]],["static-attr","class","countdown-time-left"],["flush-element"],["text","\\n    "],["append",["unknown",["countdownTimeLeft"]],false],["text","\\n  "],["close-element"],["text","\\n"],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            n(508), e.exports = s.Ember.Component.extend({
                classNames: ["social-leaderboard-table"],
                layout: n(509),
                actions: {}
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "87GTtErl",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\table-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\table-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\table-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","social-leaderboard-table-container"],["flush-element"],["text","\\n  "],["open-element","table",[]],["static-attr","class","social-leaderboard-table"],["flush-element"],["text","\\n    "],["open-element","thead",[]],["flush-element"],["text","\\n      "],["open-element","tr",[]],["static-attr","class","social-leaderboard-table-header"],["flush-element"],["text","\\n        "],["open-element","th",[]],["flush-element"],["append",["unknown",["tra","social_leaderboard_position_column_header"]],false],["close-element"],["text","\\n        "],["open-element","th",[]],["flush-element"],["append",["unknown",["tra","social_leaderboard_rank_column_header"]],false],["close-element"],["text","\\n        "],["open-element","th",[]],["flush-element"],["append",["unknown",["tra","social_leaderboard_summoners_column_header"]],false],["close-element"],["text","\\n        "],["open-element","th",[]],["flush-element"],["append",["unknown",["tra","social_leaderboard_wins_column_header"]],false],["close-element"],["text","\\n      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","body",[]],["static-attr","class","social-leaderboard-table-body"],["flush-element"],["text","\\n      "],["open-element","lol-uikit-scrollable",[]],["flush-element"],["text","\\n"],["block",["each"],[["get",["leaderboardData"]]],null,0],["text","      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n"],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","          "],["append",["helper",["social-leaderboard-row"],null,[["leaderboardPosition","leaderboardRowIndex","division","tier","leaguePoints","summonerName","summonerId","puuid","wins","profileIconId","playerAvailability","isGiftable","currentSummonerName","closeSocialLeaderboard"],[["get",["leaderboardRowData","leaderboardPosition"]],["get",["index"]],["get",["leaderboardRowData","division"]],["get",["leaderboardRowData","tier"]],["get",["leaderboardRowData","leaguePoints"]],["get",["leaderboardRowData","summonerName"]],["get",["leaderboardRowData","summonerId"]],["get",["leaderboardRowData","puuid"]],["get",["leaderboardRowData","wins"]],["get",["leaderboardRowData","profileIconId"]],["get",["leaderboardRowData","availability"]],["get",["leaderboardRowData","isGiftable"]],["get",["currentSummonerName"]],["get",["closeSocialLeaderboard"]]]]],false],["text","\\n"]],"locals":["leaderboardRowData","index"]}],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1),
                i = n(501);
            n(511), e.exports = s.Ember.Component.extend({
                classNames: ["social-leaderboard-row"],
                classNameBindings: ["isPlayerRow"],
                layout: n(512),
                invitesService: s.Ember.inject.service("invites"),
                contextMenuManager: s.UIKit.getContextMenuManager(),
                didInsertElement() {
                    this._super(...arguments), this.centerLeaderboardOnPlayerRow()
                },
                isPlayerRow: s.Ember.computed("currentSummonerName", "summonerName", (function() {
                    return this.get("currentSummonerName") === this.get("summonerName")
                })),
                isUnranked: s.Ember.computed("tier", (function() {
                    const e = this.get("tier");
                    return !e || e === i.OTHER_TIERS.NONE
                })),
                rankedColumnText: s.Ember.computed("tier", "division", "leaguePoints", (function() {
                    const e = this.get("tier");
                    this.get("tra");
                    if (e === i.OTHER_TIERS.NONE) return this.get("tra.social_leaderboard_unranked_tier");
                    const t = this.get("division"),
                        n = this.get("leaguePoints");
                    return s.LeagueTierNames.getTierDivisionLpLoc(e, t, n)
                })),
                rankedMiniRegaliaPath: s.Ember.computed("tier", (function() {
                    const e = this.get("tier");
                    return s.LeagueTierNames.getRankedMiniRegaliaSvg(e !== i.OTHER_TIERS.NONE ? e : i.OTHER_TIERS.UNRANKED)
                })),
                centerLeaderboardOnPlayerRow() {
                    if (this.get("isPlayerRow")) {
                        const e = this.element.getBoundingClientRect().height,
                            t = e * this.get("leaderboardRowIndex") - e * i.NUM_OF_ROWS_TO_CENTER;
                        this.element.parentElement.scroll({
                            top: t,
                            behavior: "smooth"
                        })
                    }
                },
                closeSocialLeaderboardHelper() {
                    const e = this.get("closeSocialLeaderboard");
                    e && e()
                },
                isPlayerInvitable: s.Ember.computed("invitesService.canInvitePlayer", (function() {
                    if ("offline" === this.get("playerAvailability")) return !1;
                    return this.get("invitesService").canInvitePlayer(this.get("summonerId"))
                })),
                invitePlayer: function() {
                    s.Telemetry.sendEvent("social-leaderboard-invite-player", this.get("puuid"));
                    this.get("invitesService").invitePlayer(this.get("summonerId"), this.get("summonerName"))
                },
                viewProfile: function() {
                    s.Telemetry.sendEvent("social-leaderboard-view-profile", this.get("puuid")), (0, s.getProvider)().getOptional("rcp-fe-lol-profiles").then((e => {
                        this.closeSocialLeaderboardHelper(), e.showOverlay({
                            summonerId: this.get("summonerId")
                        })
                    }), (e => s.logger.error("Provider getOptional failure", e)))
                },
                openConversation: function() {
                    (0, s.getProvider)().getOptional("rcp-fe-lol-social").then((e => {
                        this.closeSocialLeaderboardHelper(), s.Telemetry.sendEvent("social-leaderboard-open-conversation", this.get("puuid")), e.openConversation(this.get("puuid"))
                    }), (e => s.logger.error("Provider getOptional failure", e)))
                },
                giveGift: function() {
                    s.Telemetry.sendEvent("social-leaderboard-give-gift", this.get("puuid")), this.closeSocialLeaderboardHelper(), s.Router.navigateTo("rcp-fe-lol-store", {
                        page: "gifting",
                        recipientSummonerId: this.get("summonerId")
                    })
                },
                contextMenu: function(e) {
                    this.get("summonerName") !== this.get("currentSummonerName") && (this.contextMenuManager.setMenuItems([{
                        label: this.get("tra.social_leaderboard_row_context_invite_to_game"),
                        action: "invitePlayer",
                        target: this,
                        disabled: !this.get("isPlayerInvitable")
                    }, {
                        label: this.get("tra.social_leaderboard_row_context_send_message"),
                        action: "openConversation",
                        target: this
                    }, {
                        label: this.get("tra.social_leaderboard_row_context_view_profile"),
                        action: "viewProfile",
                        target: this
                    }, {
                        label: this.get("tra.social_leaderboard_row_context_give_gift"),
                        action: "giveGift",
                        target: this,
                        disabled: !this.get("isGiftable")
                    }]), this.contextMenuManager.openAtEvent(e))
                },
                actions: {
                    onPlayerRowClick() {
                        this.centerLeaderboardOnPlayerRow()
                    }
                }
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "PWsAz2wm",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\row-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\row-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\row-component\\\\index.js\\" "],["text","\\n"],["open-element","tr",[]],["static-attr","class","social-leaderboard-table-row"],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"onPlayerRowClick"],null],null],["flush-element"],["text","\\n  "],["open-element","td",[]],["flush-element"],["append",["unknown",["leaderboardPosition"]],false],["close-element"],["text","\\n  "],["open-element","td",[]],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","social-leaderboard-cell"],["flush-element"],["text","\\n      "],["open-element","img",[]],["dynamic-attr","class",["concat",["social-leaderboard-rank-image ",["helper",["if"],[["get",["isUnranked"]],"social-leaderboard-unranked"],null]]]],["dynamic-attr","src",["unknown",["rankedMiniRegaliaPath"]],null],["flush-element"],["close-element"],["text","\\n      "],["append",["unknown",["rankedColumnText"]],false],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n  "],["open-element","td",[]],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","social-leaderboard-cell"],["flush-element"],["text","\\n      "],["open-element","lol-social-avatar-icon",[]],["static-attr","class","social-leaderboard-avatar"],["dynamic-attr","icon-id",["unknown",["profileIconId"]],null],["dynamic-attr","availability",["unknown",["playerAvailability"]],null],["static-attr","show-availability","true"],["flush-element"],["text","\\n        "],["append",["helper",["hovercard-component"],null,[["summonerId"],[["get",["summonerId"]]]]],false],["text","\\n      "],["close-element"],["text","\\n      "],["append",["helper",["player-name"],null,[["format","puuid","gameName","tagLine","summonerName"],["full",["get",["puuid"]],["get",["gameName"]],["get",["tagLine"]],["get",["summonerName"]]]]],false],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n  "],["open-element","td",[]],["flush-element"],["append",["unknown",["wins"]],false],["close-element"],["text","\\n"],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            n(514), e.exports = s.Ember.Component.extend({
                classNames: ["social-leaderboard-friend-filter"],
                layout: n(515),
                nameFilter: "",
                leaderboardModifiedData: s.Ember.computed("leaderboardData", (function() {
                    const e = this.get("leaderboardData"),
                        t = document.documentElement.lang || "en";
                    if (!Array.isArray(e)) return e;
                    return e.map((e => {
                        const {
                            gameName: n,
                            tagLine: s,
                            summonerName: i
                        } = e;
                        if (this.isUsingAlias) {
                            const i = `${n} #${s}`.toLocaleLowerCase(t);
                            return {
                                ...e,
                                gameNameAndTagLineLowerCase: i
                            }
                        } {
                            const n = i.toLocaleLowerCase(t);
                            return {
                                ...e,
                                summonerNameLowerCase: n
                            }
                        }
                    }))
                })),
                init: function() {
                    this._super(...arguments), this.isUsingAlias = s.playerNames.isUsingAlias
                },
                didReceiveAttrs: function() {
                    this._super(...arguments), this.filter()
                },
                filter() {
                    const e = this.get("updateFilteredData"),
                        t = document.documentElement.lang || "en",
                        n = this.get("nameFilter").toLocaleLowerCase(t),
                        s = this.get("leaderboardModifiedData");
                    "" === n && e(s);
                    e(s.filter((e => this.isUsingAlias ? e.gameNameAndTagLineLowerCase.includes(n) : e.summonerNameLowerCase.includes(n))))
                },
                actions: {
                    onInput() {
                        this.filter()
                    }
                }
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "FMvcbteS",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\friend-filter-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\friend-filter-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\friend-filter-component\\\\index.js\\" "],["text","\\n"],["open-element","lol-uikit-flat-input",[]],["static-attr","class","social-leaderboard-filter-input"],["flush-element"],["text","\\n  "],["append",["helper",["input"],null,[["type","maxlength","value","placeholder","input"],["search","40",["get",["nameFilter"]],["get",["tra","social_leaderbaord_filter_placeholder"]],["helper",["action"],[["get",[null]],"onInput"],null]]]],false],["text","\\n"],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            n(517), e.exports = s.Ember.Component.extend({
                classNames: ["social-leaderboard-friend-not-found"],
                layout: n(518),
                actions: {}
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "vWbP7QRG",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\friend-not-found-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\friend-not-found-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\friend-not-found-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","social-leaderboard-friend-not-found-container"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","friend-not-found-image"],["flush-element"],["close-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","social-leaderboard-friend-not-found-text"],["flush-element"],["text","\\n    "],["append",["unknown",["tra","social_leaderboard_friend_not_found"]],false],["text","\\n  "],["close-element"],["text","\\n"],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s, i = n(1),
                o = (s = n(292)) && s.__esModule ? s : {
                    default: s
                };
            n(520), e.exports = i.Ember.Component.extend(o.default, {
                classNames: ["not-enough-friends"],
                layout: n(521),
                notEnoughFriendsDescription: i.Ember.computed("tra.social_leaderboard_add_friends_description", "minFriendCount", (function() {
                    return this.get("tra").formatString("social_leaderboard_add_friends_description", {
                        minFriendCount: this.get("minFriendCount")
                    })
                })),
                actions: {
                    openFriendFinderModal() {
                        (0, i.getProvider)().getOptional("rcp-fe-lol-social").then((e => e.openFriendFinderModal()), (e => i.logger.error("Provider getOptional failure", e)))
                    }
                }
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "x6oASjhy",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\not-enough-friends-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\not-enough-friends-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\not-enough-friends-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","social-leaderboard-not-enough-friends-container"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","not-enough-friends-image"],["flush-element"],["close-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","social-leaderboard-add-friends-text"],["flush-element"],["text","\\n    "],["append",["unknown",["notEnoughFriendsDescription"]],false],["text","\\n  "],["close-element"],["text","\\n  "],["open-element","lol-uikit-flat-button",[]],["static-attr","class","social-leaderboard-add-friend-button"],["dynamic-attr","onclick",["helper",["action"],[["get",[null]],"openFriendFinderModal"],null],null],["flush-element"],["text","\\n    "],["append",["unknown",["tra","social_leaderboard_add_friends_button"]],false],["text","\\n  "],["close-element"],["text","\\n"],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
                meta: {}
            })
        }, (e, t, n) => {
            "use strict";
            var s = n(1);
            n(523), e.exports = s.Ember.Component.extend({
                classNames: ["social-leaderboard-error-state"],
                layout: n(524)
            })
        }, (e, t, n) => {
            "use strict";
            n.r(t)
        }, (e, t, n) => {
            const s = n(1).Ember;
            e.exports = s.HTMLBars.template({
                id: "WHhV12rw",
                block: '{"statements":[["comment","#ember-component template-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\error-state-component\\\\layout.hbs\\" style-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\error-state-component\\\\style.styl\\" js-path=\\"T:\\\\cid\\\\p4\\\\Releases_14_2\\\\LeagueClientContent_Release\\\\15680\\\\DevRoot\\\\Client\\\\fe\\\\rcp-fe-lol-parties\\\\src\\\\components\\\\social-leaderboard\\\\error-state-component\\\\index.js\\" "],["text","\\n"],["open-element","div",[]],["static-attr","class","social-leaderboard-error-state-container"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","error-state-image"],["flush-element"],["close-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","social-leaderboard-error-state-text"],["flush-element"],["text","\\n    "],["append",["unknown",["tra","social_leaderboard_oops"]],false],["text","\\n    "],["open-element","br",[]],["flush-element"],["close-element"],["text","\\n    "],["append",["unknown",["tra","social_leaderboard_error_message"]],false],["text","\\n  "],["close-element"],["text","\\n"],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
                meta: {}
            })
        }],
        __webpack_module_cache__ = {};

    function __webpack_require__(e) {
        var t = __webpack_module_cache__[e];
        if (void 0 !== t) return t.exports;
        var n = __webpack_module_cache__[e] = {
            id: e,
            exports: {}
        };
        return __webpack_modules__[e].call(n.exports, n, n.exports, __webpack_require__), n.exports
    }
    __webpack_require__.g = function() {
        if ("object" == typeof globalThis) return globalThis;
        try {
            return this || new Function("return this")()
        } catch (e) {
            if ("object" == typeof window) return window
        }
    }(), __webpack_require__.r = e => {
        "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {
            value: "Module"
        }), Object.defineProperty(e, "__esModule", {
            value: !0
        })
    }, __webpack_require__.p = "/fe/lol-parties/";
    var __webpack_exports__ = {};
    (() => {
        "use strict";
        var e = n(__webpack_require__(1)),
            t = n(__webpack_require__(2));

        function n(e) {
            return e && e.__esModule ? e : {
                default: e
            }
        }
        const s = "rcp-fe-lol-parties",
            i = document.currentScript.ownerDocument;
        const o = window.getPluginAnnounceEventName(s);
        i.addEventListener(o, (function(n) {
            const o = n.registrationHandler;
            t.default.set(i), o((t => e.default.init(t, {
                Audio: e => e.get("rcp-fe-audio"),
                bluebird: e => e.get("rcp-fe-common-libs").getBluebird(3),
                ChampionStatistics: e => e.get("rcp-fe-lol-champion-statistics"),
                ComponentFactory: e => e.get("rcp-fe-common-libs").getComponentFactory("1"),
                dataBinding: e => e.get("rcp-fe-common-libs").getDataBinding("rcp-fe-lol-parties"),
                Ember: e => e.get("rcp-fe-ember-libs").getEmber(),
                emberDataBinding: e => e.get("rcp-fe-ember-libs").getEmberDataBinding("rcp-fe-lol-parties"),
                FlyoutManager: e => e.get("rcp-fe-lol-uikit").getFlyoutManager(),
                gsap: e => e.get("rcp-fe-common-libs").getGsap("1"),
                HomeRegistry: e => e.get("rcp-fe-lol-shared-components").getApi_HomeRegistry(),
                LeagueTierNames: e => e.get("rcp-fe-lol-shared-components").getApi_LeagueTierNames(),
                lodash: e => e.get("rcp-fe-common-libs").getLodash(4),
                logger: e => e.get("rcp-fe-common-libs").logging.create(s),
                lottie: e => e.get("rcp-fe-common-libs").getLottie("1"),
                moment: e => e.get("rcp-fe-lol-l10n").moment(),
                Navigation: e => e.get("rcp-fe-lol-navigation"),
                pawApi: e => e.get("rcp-fe-lol-paw"),
                playerNames: e => e.get("rcp-fe-common-libs").playerNames,
                Router: e => e.get("rcp-fe-lol-shared-components").getApi_Router(),
                SharedChallengesConstants: e => e.get("rcp-fe-lol-shared-components").getApi_SharedChallengesConstants(),
                SharedComponents: e => e.get("rcp-fe-lol-shared-components"),
                SharedEmberComponents: e => e.get("rcp-fe-lol-shared-components").getSharedEmberComponents(),
                Telemetry: e => e.get("rcp-fe-common-libs").getTelemetry(1),
                tra: e => e.get("rcp-fe-lol-l10n").tra().overlay("/fe/lol-l10n/trans.json").overlay("/fe/lol-parties/trans.json").overlay("/fe/lol-social/trans.json").overlay("/fe/lol-shared-components/trans.json").overlay("/fe/lol-shared-components/trans-challenges.json").overlay("/fe/lol-tft/trans.json"),
                UIKit: e => e.get("rcp-fe-lol-uikit"),
                UXSettings: e => e.get("rcp-fe-lol-shared-components").getApi_UXSettings(),
                Viewport: e => e.get("rcp-fe-lol-shared-components").getApi_Viewport(),
                webComponents: e => e.get("rcp-fe-common-libs").getWebComponents(i)
            }).then((() => e.default.add({
                db: e.default.dataBinding.bindTo(t.getSocket()),
                EmberApplicationFactory: e => e.get("rcp-fe-ember-libs").getEmberApplicationFactory(),
                EmberAddons: e => e.get("rcp-fe-ember-libs").getSharedEmberAddons()
            }))).then((() => {
                t.getOptional("rcp-fe-lol-tft-team-planner").then((t => {
                    e.default.TeamPlanner = t
                }), (() => null))
            })).then((() => {
                __webpack_require__(3)();
                const t = new(__webpack_require__(66));
                e.default.add({
                    PartyAPI: t
                });
                return e.default.HomeRegistry.resolvePartiesHandler((() => t.show())), t
            }))))
        }), {
            once: !0
        })
    })()
})();